/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.parsable.thrift.v1.analytics;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
public class FilterArg extends org.apache.thrift.TUnion<FilterArg, FilterArg._Fields> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FilterArg");
  private static final org.apache.thrift.protocol.TField TEXT_MATCH_FIELD_DESC = new org.apache.thrift.protocol.TField("textMatch", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NUMBERS_FIELD_DESC = new org.apache.thrift.protocol.TField("numbers", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField LIST_VALUE_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("listValueIds", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField OBJ_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("objIds", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField ENUM_VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("enumValues", org.apache.thrift.protocol.TType.LIST, (short)5);

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * string value; uses full text matching
     */
    TEXT_MATCH((short)1, "textMatch"),
    /**
     * numeric values
     */
    NUMBERS((short)2, "numbers"),
    /**
     * ids referring to several list values (generally metadata list types)
     */
    LIST_VALUE_IDS((short)3, "listValueIds"),
    /**
     * UUIDs for some objects (e.g. templates, roles)
     */
    OBJ_IDS((short)4, "objIds"),
    /**
     * list of enum type values (specific enum depends on Key)
     */
    ENUM_VALUES((short)5, "enumValues");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TEXT_MATCH
          return TEXT_MATCH;
        case 2: // NUMBERS
          return NUMBERS;
        case 3: // LIST_VALUE_IDS
          return LIST_VALUE_IDS;
        case 4: // OBJ_IDS
          return OBJ_IDS;
        case 5: // ENUM_VALUES
          return ENUM_VALUES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TEXT_MATCH, new org.apache.thrift.meta_data.FieldMetaData("textMatch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NUMBERS, new org.apache.thrift.meta_data.FieldMetaData("numbers", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NumberArg.class)));
    tmpMap.put(_Fields.LIST_VALUE_IDS, new org.apache.thrift.meta_data.FieldMetaData("listValueIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.common.SelectedListValueIds.class)));
    tmpMap.put(_Fields.OBJ_IDS, new org.apache.thrift.meta_data.FieldMetaData("objIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.common.UUIDSet.class)));
    tmpMap.put(_Fields.ENUM_VALUES, new org.apache.thrift.meta_data.FieldMetaData("enumValues", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FilterArg.class, metaDataMap);
  }

  public FilterArg() {
    super();
  }

  public FilterArg(_Fields setField, Object value) {
    super(setField, value);
  }

  public FilterArg(FilterArg other) {
    super(other);
  }
  public FilterArg deepCopy() {
    return new FilterArg(this);
  }

  public static FilterArg textMatch(String value) {
    FilterArg x = new FilterArg();
    x.setTextMatch(value);
    return x;
  }

  public static FilterArg numbers(NumberArg value) {
    FilterArg x = new FilterArg();
    x.setNumbers(value);
    return x;
  }

  public static FilterArg listValueIds(com.wi.director.thrift.v1.common.SelectedListValueIds value) {
    FilterArg x = new FilterArg();
    x.setListValueIds(value);
    return x;
  }

  public static FilterArg objIds(com.wi.director.thrift.v1.common.UUIDSet value) {
    FilterArg x = new FilterArg();
    x.setObjIds(value);
    return x;
  }

  public static FilterArg enumValues(List<Integer> value) {
    FilterArg x = new FilterArg();
    x.setEnumValues(value);
    return x;
  }


  @Override
  protected void checkType(_Fields setField, Object value) throws ClassCastException {
    switch (setField) {
      case TEXT_MATCH:
        if (value instanceof String) {
          break;
        }
        throw new ClassCastException("Was expecting value of type String for field 'textMatch', but got " + value.getClass().getSimpleName());
      case NUMBERS:
        if (value instanceof NumberArg) {
          break;
        }
        throw new ClassCastException("Was expecting value of type NumberArg for field 'numbers', but got " + value.getClass().getSimpleName());
      case LIST_VALUE_IDS:
        if (value instanceof com.wi.director.thrift.v1.common.SelectedListValueIds) {
          break;
        }
        throw new ClassCastException("Was expecting value of type com.wi.director.thrift.v1.common.SelectedListValueIds for field 'listValueIds', but got " + value.getClass().getSimpleName());
      case OBJ_IDS:
        if (value instanceof com.wi.director.thrift.v1.common.UUIDSet) {
          break;
        }
        throw new ClassCastException("Was expecting value of type com.wi.director.thrift.v1.common.UUIDSet for field 'objIds', but got " + value.getClass().getSimpleName());
      case ENUM_VALUES:
        if (value instanceof List) {
          break;
        }
        throw new ClassCastException("Was expecting value of type List<Integer> for field 'enumValues', but got " + value.getClass().getSimpleName());
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected Object standardSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TField field) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(field.id);
    if (setField != null) {
      switch (setField) {
        case TEXT_MATCH:
          if (field.type == TEXT_MATCH_FIELD_DESC.type) {
            String textMatch;
            textMatch = iprot.readString();
            return textMatch;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case NUMBERS:
          if (field.type == NUMBERS_FIELD_DESC.type) {
            NumberArg numbers;
            numbers = new NumberArg();
            numbers.read(iprot);
            return numbers;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case LIST_VALUE_IDS:
          if (field.type == LIST_VALUE_IDS_FIELD_DESC.type) {
            com.wi.director.thrift.v1.common.SelectedListValueIds listValueIds;
            listValueIds = new com.wi.director.thrift.v1.common.SelectedListValueIds();
            listValueIds.read(iprot);
            return listValueIds;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case OBJ_IDS:
          if (field.type == OBJ_IDS_FIELD_DESC.type) {
            com.wi.director.thrift.v1.common.UUIDSet objIds;
            objIds = new com.wi.director.thrift.v1.common.UUIDSet();
            objIds.read(iprot);
            return objIds;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case ENUM_VALUES:
          if (field.type == ENUM_VALUES_FIELD_DESC.type) {
            List<Integer> enumValues;
            {
              org.apache.thrift.protocol.TList _list4 = iprot.readListBegin();
              enumValues = new ArrayList<Integer>(_list4.size);
              int _elem5;
              for (int _i6 = 0; _i6 < _list4.size; ++_i6)
              {
                _elem5 = iprot.readI32();
                enumValues.add(_elem5);
              }
              iprot.readListEnd();
            }
            return enumValues;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      return null;
    }
  }

  @Override
  protected void standardSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case TEXT_MATCH:
        String textMatch = (String)value_;
        oprot.writeString(textMatch);
        return;
      case NUMBERS:
        NumberArg numbers = (NumberArg)value_;
        numbers.write(oprot);
        return;
      case LIST_VALUE_IDS:
        com.wi.director.thrift.v1.common.SelectedListValueIds listValueIds = (com.wi.director.thrift.v1.common.SelectedListValueIds)value_;
        listValueIds.write(oprot);
        return;
      case OBJ_IDS:
        com.wi.director.thrift.v1.common.UUIDSet objIds = (com.wi.director.thrift.v1.common.UUIDSet)value_;
        objIds.write(oprot);
        return;
      case ENUM_VALUES:
        List<Integer> enumValues = (List<Integer>)value_;
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, enumValues.size()));
          for (int _iter7 : enumValues)
          {
            oprot.writeI32(_iter7);
          }
          oprot.writeListEnd();
        }
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected Object tupleSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, short fieldID) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(fieldID);
    if (setField != null) {
      switch (setField) {
        case TEXT_MATCH:
          String textMatch;
          textMatch = iprot.readString();
          return textMatch;
        case NUMBERS:
          NumberArg numbers;
          numbers = new NumberArg();
          numbers.read(iprot);
          return numbers;
        case LIST_VALUE_IDS:
          com.wi.director.thrift.v1.common.SelectedListValueIds listValueIds;
          listValueIds = new com.wi.director.thrift.v1.common.SelectedListValueIds();
          listValueIds.read(iprot);
          return listValueIds;
        case OBJ_IDS:
          com.wi.director.thrift.v1.common.UUIDSet objIds;
          objIds = new com.wi.director.thrift.v1.common.UUIDSet();
          objIds.read(iprot);
          return objIds;
        case ENUM_VALUES:
          List<Integer> enumValues;
          {
            org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
            enumValues = new ArrayList<Integer>(_list8.size);
            int _elem9;
            for (int _i10 = 0; _i10 < _list8.size; ++_i10)
            {
              _elem9 = iprot.readI32();
              enumValues.add(_elem9);
            }
            iprot.readListEnd();
          }
          return enumValues;
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      throw new TProtocolException("Couldn't find a field with field id " + fieldID);
    }
  }

  @Override
  protected void tupleSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case TEXT_MATCH:
        String textMatch = (String)value_;
        oprot.writeString(textMatch);
        return;
      case NUMBERS:
        NumberArg numbers = (NumberArg)value_;
        numbers.write(oprot);
        return;
      case LIST_VALUE_IDS:
        com.wi.director.thrift.v1.common.SelectedListValueIds listValueIds = (com.wi.director.thrift.v1.common.SelectedListValueIds)value_;
        listValueIds.write(oprot);
        return;
      case OBJ_IDS:
        com.wi.director.thrift.v1.common.UUIDSet objIds = (com.wi.director.thrift.v1.common.UUIDSet)value_;
        objIds.write(oprot);
        return;
      case ENUM_VALUES:
        List<Integer> enumValues = (List<Integer>)value_;
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, enumValues.size()));
          for (int _iter11 : enumValues)
          {
            oprot.writeI32(_iter11);
          }
          oprot.writeListEnd();
        }
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TField getFieldDesc(_Fields setField) {
    switch (setField) {
      case TEXT_MATCH:
        return TEXT_MATCH_FIELD_DESC;
      case NUMBERS:
        return NUMBERS_FIELD_DESC;
      case LIST_VALUE_IDS:
        return LIST_VALUE_IDS_FIELD_DESC;
      case OBJ_IDS:
        return OBJ_IDS_FIELD_DESC;
      case ENUM_VALUES:
        return ENUM_VALUES_FIELD_DESC;
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TStruct getStructDesc() {
    return STRUCT_DESC;
  }

  @Override
  protected _Fields enumForId(short id) {
    return _Fields.findByThriftIdOrThrow(id);
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  /**
   * string value; uses full text matching
   */
  public String getTextMatch() {
    if (getSetField() == _Fields.TEXT_MATCH) {
      return (String)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'textMatch' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  /**
   * string value; uses full text matching
   */
  public void setTextMatch(String value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.TEXT_MATCH;
    value_ = value;
  }

  /**
   * numeric values
   */
  public NumberArg getNumbers() {
    if (getSetField() == _Fields.NUMBERS) {
      return (NumberArg)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'numbers' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  /**
   * numeric values
   */
  public void setNumbers(NumberArg value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.NUMBERS;
    value_ = value;
  }

  /**
   * ids referring to several list values (generally metadata list types)
   */
  public com.wi.director.thrift.v1.common.SelectedListValueIds getListValueIds() {
    if (getSetField() == _Fields.LIST_VALUE_IDS) {
      return (com.wi.director.thrift.v1.common.SelectedListValueIds)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'listValueIds' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  /**
   * ids referring to several list values (generally metadata list types)
   */
  public void setListValueIds(com.wi.director.thrift.v1.common.SelectedListValueIds value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.LIST_VALUE_IDS;
    value_ = value;
  }

  /**
   * UUIDs for some objects (e.g. templates, roles)
   */
  public com.wi.director.thrift.v1.common.UUIDSet getObjIds() {
    if (getSetField() == _Fields.OBJ_IDS) {
      return (com.wi.director.thrift.v1.common.UUIDSet)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'objIds' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  /**
   * UUIDs for some objects (e.g. templates, roles)
   */
  public void setObjIds(com.wi.director.thrift.v1.common.UUIDSet value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.OBJ_IDS;
    value_ = value;
  }

  /**
   * list of enum type values (specific enum depends on Key)
   */
  public List<Integer> getEnumValues() {
    if (getSetField() == _Fields.ENUM_VALUES) {
      return (List<Integer>)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'enumValues' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  /**
   * list of enum type values (specific enum depends on Key)
   */
  public void setEnumValues(List<Integer> value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.ENUM_VALUES;
    value_ = value;
  }

  public boolean isSetTextMatch() {
    return setField_ == _Fields.TEXT_MATCH;
  }


  public boolean isSetNumbers() {
    return setField_ == _Fields.NUMBERS;
  }


  public boolean isSetListValueIds() {
    return setField_ == _Fields.LIST_VALUE_IDS;
  }


  public boolean isSetObjIds() {
    return setField_ == _Fields.OBJ_IDS;
  }


  public boolean isSetEnumValues() {
    return setField_ == _Fields.ENUM_VALUES;
  }


  public boolean equals(Object other) {
    if (other instanceof FilterArg) {
      return equals((FilterArg)other);
    } else {
      return false;
    }
  }

  public boolean equals(FilterArg other) {
    return other != null && getSetField() == other.getSetField() && getFieldValue().equals(other.getFieldValue());
  }

  @Override
  public int compareTo(FilterArg other) {
    int lastComparison = org.apache.thrift.TBaseHelper.compareTo(getSetField(), other.getSetField());
    if (lastComparison == 0) {
      return org.apache.thrift.TBaseHelper.compareTo(getFieldValue(), other.getFieldValue());
    }
    return lastComparison;
  }


  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();
    list.add(this.getClass().getName());
    org.apache.thrift.TFieldIdEnum setField = getSetField();
    if (setField != null) {
      list.add(setField.getThriftFieldId());
      Object value = getFieldValue();
      if (value instanceof org.apache.thrift.TEnum) {
        list.add(((org.apache.thrift.TEnum)getFieldValue()).getValue());
      } else {
        list.add(value);
      }
    }
    return list.hashCode();
  }
  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


}
