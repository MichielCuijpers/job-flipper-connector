/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.parsable.thrift.v1.analytics;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
public class DashboardSelection extends org.apache.thrift.TUnion<DashboardSelection, DashboardSelection._Fields> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DashboardSelection");
  private static final org.apache.thrift.protocol.TField USERS_FIELD_DESC = new org.apache.thrift.protocol.TField("users", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField JOBS_FIELD_DESC = new org.apache.thrift.protocol.TField("jobs", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField TEMPLATES_FIELD_DESC = new org.apache.thrift.protocol.TField("templates", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField ISSUES_FIELD_DESC = new org.apache.thrift.protocol.TField("issues", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField DEVIATIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("deviations", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField STEPS_FIELD_DESC = new org.apache.thrift.protocol.TField("steps", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField STEP_AVERAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("stepAverages", org.apache.thrift.protocol.TType.STRUCT, (short)7);

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    USERS((short)1, "users"),
    JOBS((short)2, "jobs"),
    TEMPLATES((short)3, "templates"),
    ISSUES((short)4, "issues"),
    DEVIATIONS((short)5, "deviations"),
    STEPS((short)6, "steps"),
    STEP_AVERAGES((short)7, "stepAverages");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USERS
          return USERS;
        case 2: // JOBS
          return JOBS;
        case 3: // TEMPLATES
          return TEMPLATES;
        case 4: // ISSUES
          return ISSUES;
        case 5: // DEVIATIONS
          return DEVIATIONS;
        case 6: // STEPS
          return STEPS;
        case 7: // STEP_AVERAGES
          return STEP_AVERAGES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USERS, new org.apache.thrift.meta_data.FieldMetaData("users", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UsersDashboard.class)));
    tmpMap.put(_Fields.JOBS, new org.apache.thrift.meta_data.FieldMetaData("jobs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JobsDashboard.class)));
    tmpMap.put(_Fields.TEMPLATES, new org.apache.thrift.meta_data.FieldMetaData("templates", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TemplateDashboard.class)));
    tmpMap.put(_Fields.ISSUES, new org.apache.thrift.meta_data.FieldMetaData("issues", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IssuesDashboard.class)));
    tmpMap.put(_Fields.DEVIATIONS, new org.apache.thrift.meta_data.FieldMetaData("deviations", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DeviationsDashboard.class)));
    tmpMap.put(_Fields.STEPS, new org.apache.thrift.meta_data.FieldMetaData("steps", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StepsDashboard.class)));
    tmpMap.put(_Fields.STEP_AVERAGES, new org.apache.thrift.meta_data.FieldMetaData("stepAverages", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StepAveragesDashboard.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DashboardSelection.class, metaDataMap);
  }

  public DashboardSelection() {
    super();
  }

  public DashboardSelection(_Fields setField, Object value) {
    super(setField, value);
  }

  public DashboardSelection(DashboardSelection other) {
    super(other);
  }
  public DashboardSelection deepCopy() {
    return new DashboardSelection(this);
  }

  public static DashboardSelection users(UsersDashboard value) {
    DashboardSelection x = new DashboardSelection();
    x.setUsers(value);
    return x;
  }

  public static DashboardSelection jobs(JobsDashboard value) {
    DashboardSelection x = new DashboardSelection();
    x.setJobs(value);
    return x;
  }

  public static DashboardSelection templates(TemplateDashboard value) {
    DashboardSelection x = new DashboardSelection();
    x.setTemplates(value);
    return x;
  }

  public static DashboardSelection issues(IssuesDashboard value) {
    DashboardSelection x = new DashboardSelection();
    x.setIssues(value);
    return x;
  }

  public static DashboardSelection deviations(DeviationsDashboard value) {
    DashboardSelection x = new DashboardSelection();
    x.setDeviations(value);
    return x;
  }

  public static DashboardSelection steps(StepsDashboard value) {
    DashboardSelection x = new DashboardSelection();
    x.setSteps(value);
    return x;
  }

  public static DashboardSelection stepAverages(StepAveragesDashboard value) {
    DashboardSelection x = new DashboardSelection();
    x.setStepAverages(value);
    return x;
  }


  @Override
  protected void checkType(_Fields setField, Object value) throws ClassCastException {
    switch (setField) {
      case USERS:
        if (value instanceof UsersDashboard) {
          break;
        }
        throw new ClassCastException("Was expecting value of type UsersDashboard for field 'users', but got " + value.getClass().getSimpleName());
      case JOBS:
        if (value instanceof JobsDashboard) {
          break;
        }
        throw new ClassCastException("Was expecting value of type JobsDashboard for field 'jobs', but got " + value.getClass().getSimpleName());
      case TEMPLATES:
        if (value instanceof TemplateDashboard) {
          break;
        }
        throw new ClassCastException("Was expecting value of type TemplateDashboard for field 'templates', but got " + value.getClass().getSimpleName());
      case ISSUES:
        if (value instanceof IssuesDashboard) {
          break;
        }
        throw new ClassCastException("Was expecting value of type IssuesDashboard for field 'issues', but got " + value.getClass().getSimpleName());
      case DEVIATIONS:
        if (value instanceof DeviationsDashboard) {
          break;
        }
        throw new ClassCastException("Was expecting value of type DeviationsDashboard for field 'deviations', but got " + value.getClass().getSimpleName());
      case STEPS:
        if (value instanceof StepsDashboard) {
          break;
        }
        throw new ClassCastException("Was expecting value of type StepsDashboard for field 'steps', but got " + value.getClass().getSimpleName());
      case STEP_AVERAGES:
        if (value instanceof StepAveragesDashboard) {
          break;
        }
        throw new ClassCastException("Was expecting value of type StepAveragesDashboard for field 'stepAverages', but got " + value.getClass().getSimpleName());
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected Object standardSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TField field) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(field.id);
    if (setField != null) {
      switch (setField) {
        case USERS:
          if (field.type == USERS_FIELD_DESC.type) {
            UsersDashboard users;
            users = new UsersDashboard();
            users.read(iprot);
            return users;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case JOBS:
          if (field.type == JOBS_FIELD_DESC.type) {
            JobsDashboard jobs;
            jobs = new JobsDashboard();
            jobs.read(iprot);
            return jobs;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case TEMPLATES:
          if (field.type == TEMPLATES_FIELD_DESC.type) {
            TemplateDashboard templates;
            templates = new TemplateDashboard();
            templates.read(iprot);
            return templates;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case ISSUES:
          if (field.type == ISSUES_FIELD_DESC.type) {
            IssuesDashboard issues;
            issues = new IssuesDashboard();
            issues.read(iprot);
            return issues;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case DEVIATIONS:
          if (field.type == DEVIATIONS_FIELD_DESC.type) {
            DeviationsDashboard deviations;
            deviations = new DeviationsDashboard();
            deviations.read(iprot);
            return deviations;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case STEPS:
          if (field.type == STEPS_FIELD_DESC.type) {
            StepsDashboard steps;
            steps = new StepsDashboard();
            steps.read(iprot);
            return steps;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case STEP_AVERAGES:
          if (field.type == STEP_AVERAGES_FIELD_DESC.type) {
            StepAveragesDashboard stepAverages;
            stepAverages = new StepAveragesDashboard();
            stepAverages.read(iprot);
            return stepAverages;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      return null;
    }
  }

  @Override
  protected void standardSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case USERS:
        UsersDashboard users = (UsersDashboard)value_;
        users.write(oprot);
        return;
      case JOBS:
        JobsDashboard jobs = (JobsDashboard)value_;
        jobs.write(oprot);
        return;
      case TEMPLATES:
        TemplateDashboard templates = (TemplateDashboard)value_;
        templates.write(oprot);
        return;
      case ISSUES:
        IssuesDashboard issues = (IssuesDashboard)value_;
        issues.write(oprot);
        return;
      case DEVIATIONS:
        DeviationsDashboard deviations = (DeviationsDashboard)value_;
        deviations.write(oprot);
        return;
      case STEPS:
        StepsDashboard steps = (StepsDashboard)value_;
        steps.write(oprot);
        return;
      case STEP_AVERAGES:
        StepAveragesDashboard stepAverages = (StepAveragesDashboard)value_;
        stepAverages.write(oprot);
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected Object tupleSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, short fieldID) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(fieldID);
    if (setField != null) {
      switch (setField) {
        case USERS:
          UsersDashboard users;
          users = new UsersDashboard();
          users.read(iprot);
          return users;
        case JOBS:
          JobsDashboard jobs;
          jobs = new JobsDashboard();
          jobs.read(iprot);
          return jobs;
        case TEMPLATES:
          TemplateDashboard templates;
          templates = new TemplateDashboard();
          templates.read(iprot);
          return templates;
        case ISSUES:
          IssuesDashboard issues;
          issues = new IssuesDashboard();
          issues.read(iprot);
          return issues;
        case DEVIATIONS:
          DeviationsDashboard deviations;
          deviations = new DeviationsDashboard();
          deviations.read(iprot);
          return deviations;
        case STEPS:
          StepsDashboard steps;
          steps = new StepsDashboard();
          steps.read(iprot);
          return steps;
        case STEP_AVERAGES:
          StepAveragesDashboard stepAverages;
          stepAverages = new StepAveragesDashboard();
          stepAverages.read(iprot);
          return stepAverages;
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      throw new TProtocolException("Couldn't find a field with field id " + fieldID);
    }
  }

  @Override
  protected void tupleSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case USERS:
        UsersDashboard users = (UsersDashboard)value_;
        users.write(oprot);
        return;
      case JOBS:
        JobsDashboard jobs = (JobsDashboard)value_;
        jobs.write(oprot);
        return;
      case TEMPLATES:
        TemplateDashboard templates = (TemplateDashboard)value_;
        templates.write(oprot);
        return;
      case ISSUES:
        IssuesDashboard issues = (IssuesDashboard)value_;
        issues.write(oprot);
        return;
      case DEVIATIONS:
        DeviationsDashboard deviations = (DeviationsDashboard)value_;
        deviations.write(oprot);
        return;
      case STEPS:
        StepsDashboard steps = (StepsDashboard)value_;
        steps.write(oprot);
        return;
      case STEP_AVERAGES:
        StepAveragesDashboard stepAverages = (StepAveragesDashboard)value_;
        stepAverages.write(oprot);
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TField getFieldDesc(_Fields setField) {
    switch (setField) {
      case USERS:
        return USERS_FIELD_DESC;
      case JOBS:
        return JOBS_FIELD_DESC;
      case TEMPLATES:
        return TEMPLATES_FIELD_DESC;
      case ISSUES:
        return ISSUES_FIELD_DESC;
      case DEVIATIONS:
        return DEVIATIONS_FIELD_DESC;
      case STEPS:
        return STEPS_FIELD_DESC;
      case STEP_AVERAGES:
        return STEP_AVERAGES_FIELD_DESC;
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TStruct getStructDesc() {
    return STRUCT_DESC;
  }

  @Override
  protected _Fields enumForId(short id) {
    return _Fields.findByThriftIdOrThrow(id);
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public UsersDashboard getUsers() {
    if (getSetField() == _Fields.USERS) {
      return (UsersDashboard)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'users' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setUsers(UsersDashboard value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.USERS;
    value_ = value;
  }

  public JobsDashboard getJobs() {
    if (getSetField() == _Fields.JOBS) {
      return (JobsDashboard)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'jobs' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setJobs(JobsDashboard value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.JOBS;
    value_ = value;
  }

  public TemplateDashboard getTemplates() {
    if (getSetField() == _Fields.TEMPLATES) {
      return (TemplateDashboard)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'templates' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setTemplates(TemplateDashboard value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.TEMPLATES;
    value_ = value;
  }

  public IssuesDashboard getIssues() {
    if (getSetField() == _Fields.ISSUES) {
      return (IssuesDashboard)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'issues' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setIssues(IssuesDashboard value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.ISSUES;
    value_ = value;
  }

  public DeviationsDashboard getDeviations() {
    if (getSetField() == _Fields.DEVIATIONS) {
      return (DeviationsDashboard)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'deviations' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setDeviations(DeviationsDashboard value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.DEVIATIONS;
    value_ = value;
  }

  public StepsDashboard getSteps() {
    if (getSetField() == _Fields.STEPS) {
      return (StepsDashboard)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'steps' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setSteps(StepsDashboard value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.STEPS;
    value_ = value;
  }

  public StepAveragesDashboard getStepAverages() {
    if (getSetField() == _Fields.STEP_AVERAGES) {
      return (StepAveragesDashboard)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'stepAverages' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setStepAverages(StepAveragesDashboard value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.STEP_AVERAGES;
    value_ = value;
  }

  public boolean isSetUsers() {
    return setField_ == _Fields.USERS;
  }


  public boolean isSetJobs() {
    return setField_ == _Fields.JOBS;
  }


  public boolean isSetTemplates() {
    return setField_ == _Fields.TEMPLATES;
  }


  public boolean isSetIssues() {
    return setField_ == _Fields.ISSUES;
  }


  public boolean isSetDeviations() {
    return setField_ == _Fields.DEVIATIONS;
  }


  public boolean isSetSteps() {
    return setField_ == _Fields.STEPS;
  }


  public boolean isSetStepAverages() {
    return setField_ == _Fields.STEP_AVERAGES;
  }


  public boolean equals(Object other) {
    if (other instanceof DashboardSelection) {
      return equals((DashboardSelection)other);
    } else {
      return false;
    }
  }

  public boolean equals(DashboardSelection other) {
    return other != null && getSetField() == other.getSetField() && getFieldValue().equals(other.getFieldValue());
  }

  @Override
  public int compareTo(DashboardSelection other) {
    int lastComparison = org.apache.thrift.TBaseHelper.compareTo(getSetField(), other.getSetField());
    if (lastComparison == 0) {
      return org.apache.thrift.TBaseHelper.compareTo(getFieldValue(), other.getFieldValue());
    }
    return lastComparison;
  }


  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();
    list.add(this.getClass().getName());
    org.apache.thrift.TFieldIdEnum setField = getSetField();
    if (setField != null) {
      list.add(setField.getThriftFieldId());
      Object value = getFieldValue();
      if (value instanceof org.apache.thrift.TEnum) {
        list.add(((org.apache.thrift.TEnum)getFieldValue()).getValue());
      } else {
        list.add(value);
      }
    }
    return list.hashCode();
  }
  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


}
