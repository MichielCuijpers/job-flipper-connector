/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.parsable.thrift.v1.analytics;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class IssuesDashboard implements org.apache.thrift.TBase<IssuesDashboard, IssuesDashboard._Fields>, java.io.Serializable, Cloneable, Comparable<IssuesDashboard> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("IssuesDashboard");

  private static final org.apache.thrift.protocol.TField INCLUDE_STATES_FIELD_DESC = new org.apache.thrift.protocol.TField("includeStates", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField INCLUDE_PRIORITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("includePriorities", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField REQUIRE_OPEN_USERS_FIELD_DESC = new org.apache.thrift.protocol.TField("requireOpenUsers", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField REQUIRE_RESOLVE_USERS_FIELD_DESC = new org.apache.thrift.protocol.TField("requireResolveUsers", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField REQUIRE_TEMPLATES_FIELD_DESC = new org.apache.thrift.protocol.TField("requireTemplates", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField REQUIRE_ROLES_FIELD_DESC = new org.apache.thrift.protocol.TField("requireRoles", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField SHOW_DURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("showDuration", org.apache.thrift.protocol.TType.BOOL, (short)100);
  private static final org.apache.thrift.protocol.TField SHOW_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("showList", org.apache.thrift.protocol.TType.BOOL, (short)101);
  private static final org.apache.thrift.protocol.TField PAGE_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("pageReq", org.apache.thrift.protocol.TType.STRUCT, (short)200);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new IssuesDashboardStandardSchemeFactory());
  }

  public List<IssueState> includeStates; // optional
  public List<com.wi.director.thrift.v1.job.PriorityLevel> includePriorities; // optional
  public List<String> requireOpenUsers; // optional
  public List<String> requireResolveUsers; // optional
  public List<String> requireTemplates; // optional
  public List<String> requireRoles; // optional
  public boolean showDuration; // required
  public boolean showList; // required
  public com.wi.director.thrift.v1.common.PageReq pageReq; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    INCLUDE_STATES((short)1, "includeStates"),
    INCLUDE_PRIORITIES((short)2, "includePriorities"),
    REQUIRE_OPEN_USERS((short)3, "requireOpenUsers"),
    REQUIRE_RESOLVE_USERS((short)4, "requireResolveUsers"),
    REQUIRE_TEMPLATES((short)5, "requireTemplates"),
    REQUIRE_ROLES((short)6, "requireRoles"),
    SHOW_DURATION((short)100, "showDuration"),
    SHOW_LIST((short)101, "showList"),
    PAGE_REQ((short)200, "pageReq");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // INCLUDE_STATES
          return INCLUDE_STATES;
        case 2: // INCLUDE_PRIORITIES
          return INCLUDE_PRIORITIES;
        case 3: // REQUIRE_OPEN_USERS
          return REQUIRE_OPEN_USERS;
        case 4: // REQUIRE_RESOLVE_USERS
          return REQUIRE_RESOLVE_USERS;
        case 5: // REQUIRE_TEMPLATES
          return REQUIRE_TEMPLATES;
        case 6: // REQUIRE_ROLES
          return REQUIRE_ROLES;
        case 100: // SHOW_DURATION
          return SHOW_DURATION;
        case 101: // SHOW_LIST
          return SHOW_LIST;
        case 200: // PAGE_REQ
          return PAGE_REQ;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SHOWDURATION_ISSET_ID = 0;
  private static final int __SHOWLIST_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.INCLUDE_STATES,_Fields.INCLUDE_PRIORITIES,_Fields.REQUIRE_OPEN_USERS,_Fields.REQUIRE_RESOLVE_USERS,_Fields.REQUIRE_TEMPLATES,_Fields.REQUIRE_ROLES,_Fields.PAGE_REQ};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INCLUDE_STATES, new org.apache.thrift.meta_data.FieldMetaData("includeStates", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, IssueState.class))));
    tmpMap.put(_Fields.INCLUDE_PRIORITIES, new org.apache.thrift.meta_data.FieldMetaData("includePriorities", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.job.PriorityLevel.class))));
    tmpMap.put(_Fields.REQUIRE_OPEN_USERS, new org.apache.thrift.meta_data.FieldMetaData("requireOpenUsers", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , "UUID"))));
    tmpMap.put(_Fields.REQUIRE_RESOLVE_USERS, new org.apache.thrift.meta_data.FieldMetaData("requireResolveUsers", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , "UUID"))));
    tmpMap.put(_Fields.REQUIRE_TEMPLATES, new org.apache.thrift.meta_data.FieldMetaData("requireTemplates", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , "UUID"))));
    tmpMap.put(_Fields.REQUIRE_ROLES, new org.apache.thrift.meta_data.FieldMetaData("requireRoles", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , "UUID"))));
    tmpMap.put(_Fields.SHOW_DURATION, new org.apache.thrift.meta_data.FieldMetaData("showDuration", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SHOW_LIST, new org.apache.thrift.meta_data.FieldMetaData("showList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PAGE_REQ, new org.apache.thrift.meta_data.FieldMetaData("pageReq", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.common.PageReq.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(IssuesDashboard.class, metaDataMap);
  }

  public IssuesDashboard() {
  }

  public IssuesDashboard(
    boolean showDuration,
    boolean showList)
  {
    this();
    this.showDuration = showDuration;
    setShowDurationIsSet(true);
    this.showList = showList;
    setShowListIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public IssuesDashboard(IssuesDashboard other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetIncludeStates()) {
      List<IssueState> __this__includeStates = new ArrayList<IssueState>(other.includeStates.size());
      for (IssueState other_element : other.includeStates) {
        __this__includeStates.add(other_element);
      }
      this.includeStates = __this__includeStates;
    }
    if (other.isSetIncludePriorities()) {
      List<com.wi.director.thrift.v1.job.PriorityLevel> __this__includePriorities = new ArrayList<com.wi.director.thrift.v1.job.PriorityLevel>(other.includePriorities.size());
      for (com.wi.director.thrift.v1.job.PriorityLevel other_element : other.includePriorities) {
        __this__includePriorities.add(new com.wi.director.thrift.v1.job.PriorityLevel(other_element));
      }
      this.includePriorities = __this__includePriorities;
    }
    if (other.isSetRequireOpenUsers()) {
      List<String> __this__requireOpenUsers = new ArrayList<String>(other.requireOpenUsers.size());
      for (String other_element : other.requireOpenUsers) {
        __this__requireOpenUsers.add(other_element);
      }
      this.requireOpenUsers = __this__requireOpenUsers;
    }
    if (other.isSetRequireResolveUsers()) {
      List<String> __this__requireResolveUsers = new ArrayList<String>(other.requireResolveUsers.size());
      for (String other_element : other.requireResolveUsers) {
        __this__requireResolveUsers.add(other_element);
      }
      this.requireResolveUsers = __this__requireResolveUsers;
    }
    if (other.isSetRequireTemplates()) {
      List<String> __this__requireTemplates = new ArrayList<String>(other.requireTemplates.size());
      for (String other_element : other.requireTemplates) {
        __this__requireTemplates.add(other_element);
      }
      this.requireTemplates = __this__requireTemplates;
    }
    if (other.isSetRequireRoles()) {
      List<String> __this__requireRoles = new ArrayList<String>(other.requireRoles.size());
      for (String other_element : other.requireRoles) {
        __this__requireRoles.add(other_element);
      }
      this.requireRoles = __this__requireRoles;
    }
    this.showDuration = other.showDuration;
    this.showList = other.showList;
    if (other.isSetPageReq()) {
      this.pageReq = new com.wi.director.thrift.v1.common.PageReq(other.pageReq);
    }
  }

  public IssuesDashboard deepCopy() {
    return new IssuesDashboard(this);
  }

  @Override
  public void clear() {
    this.includeStates = null;
    this.includePriorities = null;
    this.requireOpenUsers = null;
    this.requireResolveUsers = null;
    this.requireTemplates = null;
    this.requireRoles = null;
    setShowDurationIsSet(false);
    this.showDuration = false;
    setShowListIsSet(false);
    this.showList = false;
    this.pageReq = null;
  }

  public int getIncludeStatesSize() {
    return (this.includeStates == null) ? 0 : this.includeStates.size();
  }

  public java.util.Iterator<IssueState> getIncludeStatesIterator() {
    return (this.includeStates == null) ? null : this.includeStates.iterator();
  }

  public void addToIncludeStates(IssueState elem) {
    if (this.includeStates == null) {
      this.includeStates = new ArrayList<IssueState>();
    }
    this.includeStates.add(elem);
  }

  public List<IssueState> getIncludeStates() {
    return this.includeStates;
  }

  public IssuesDashboard setIncludeStates(List<IssueState> includeStates) {
    this.includeStates = includeStates;
    return this;
  }

  public void unsetIncludeStates() {
    this.includeStates = null;
  }

  /** Returns true if field includeStates is set (has been assigned a value) and false otherwise */
  public boolean isSetIncludeStates() {
    return this.includeStates != null;
  }

  public void setIncludeStatesIsSet(boolean value) {
    if (!value) {
      this.includeStates = null;
    }
  }

  public int getIncludePrioritiesSize() {
    return (this.includePriorities == null) ? 0 : this.includePriorities.size();
  }

  public java.util.Iterator<com.wi.director.thrift.v1.job.PriorityLevel> getIncludePrioritiesIterator() {
    return (this.includePriorities == null) ? null : this.includePriorities.iterator();
  }

  public void addToIncludePriorities(com.wi.director.thrift.v1.job.PriorityLevel elem) {
    if (this.includePriorities == null) {
      this.includePriorities = new ArrayList<com.wi.director.thrift.v1.job.PriorityLevel>();
    }
    this.includePriorities.add(elem);
  }

  public List<com.wi.director.thrift.v1.job.PriorityLevel> getIncludePriorities() {
    return this.includePriorities;
  }

  public IssuesDashboard setIncludePriorities(List<com.wi.director.thrift.v1.job.PriorityLevel> includePriorities) {
    this.includePriorities = includePriorities;
    return this;
  }

  public void unsetIncludePriorities() {
    this.includePriorities = null;
  }

  /** Returns true if field includePriorities is set (has been assigned a value) and false otherwise */
  public boolean isSetIncludePriorities() {
    return this.includePriorities != null;
  }

  public void setIncludePrioritiesIsSet(boolean value) {
    if (!value) {
      this.includePriorities = null;
    }
  }

  public int getRequireOpenUsersSize() {
    return (this.requireOpenUsers == null) ? 0 : this.requireOpenUsers.size();
  }

  public java.util.Iterator<String> getRequireOpenUsersIterator() {
    return (this.requireOpenUsers == null) ? null : this.requireOpenUsers.iterator();
  }

  public void addToRequireOpenUsers(String elem) {
    if (this.requireOpenUsers == null) {
      this.requireOpenUsers = new ArrayList<String>();
    }
    this.requireOpenUsers.add(elem);
  }

  public List<String> getRequireOpenUsers() {
    return this.requireOpenUsers;
  }

  public IssuesDashboard setRequireOpenUsers(List<String> requireOpenUsers) {
    this.requireOpenUsers = requireOpenUsers;
    return this;
  }

  public void unsetRequireOpenUsers() {
    this.requireOpenUsers = null;
  }

  /** Returns true if field requireOpenUsers is set (has been assigned a value) and false otherwise */
  public boolean isSetRequireOpenUsers() {
    return this.requireOpenUsers != null;
  }

  public void setRequireOpenUsersIsSet(boolean value) {
    if (!value) {
      this.requireOpenUsers = null;
    }
  }

  public int getRequireResolveUsersSize() {
    return (this.requireResolveUsers == null) ? 0 : this.requireResolveUsers.size();
  }

  public java.util.Iterator<String> getRequireResolveUsersIterator() {
    return (this.requireResolveUsers == null) ? null : this.requireResolveUsers.iterator();
  }

  public void addToRequireResolveUsers(String elem) {
    if (this.requireResolveUsers == null) {
      this.requireResolveUsers = new ArrayList<String>();
    }
    this.requireResolveUsers.add(elem);
  }

  public List<String> getRequireResolveUsers() {
    return this.requireResolveUsers;
  }

  public IssuesDashboard setRequireResolveUsers(List<String> requireResolveUsers) {
    this.requireResolveUsers = requireResolveUsers;
    return this;
  }

  public void unsetRequireResolveUsers() {
    this.requireResolveUsers = null;
  }

  /** Returns true if field requireResolveUsers is set (has been assigned a value) and false otherwise */
  public boolean isSetRequireResolveUsers() {
    return this.requireResolveUsers != null;
  }

  public void setRequireResolveUsersIsSet(boolean value) {
    if (!value) {
      this.requireResolveUsers = null;
    }
  }

  public int getRequireTemplatesSize() {
    return (this.requireTemplates == null) ? 0 : this.requireTemplates.size();
  }

  public java.util.Iterator<String> getRequireTemplatesIterator() {
    return (this.requireTemplates == null) ? null : this.requireTemplates.iterator();
  }

  public void addToRequireTemplates(String elem) {
    if (this.requireTemplates == null) {
      this.requireTemplates = new ArrayList<String>();
    }
    this.requireTemplates.add(elem);
  }

  public List<String> getRequireTemplates() {
    return this.requireTemplates;
  }

  public IssuesDashboard setRequireTemplates(List<String> requireTemplates) {
    this.requireTemplates = requireTemplates;
    return this;
  }

  public void unsetRequireTemplates() {
    this.requireTemplates = null;
  }

  /** Returns true if field requireTemplates is set (has been assigned a value) and false otherwise */
  public boolean isSetRequireTemplates() {
    return this.requireTemplates != null;
  }

  public void setRequireTemplatesIsSet(boolean value) {
    if (!value) {
      this.requireTemplates = null;
    }
  }

  public int getRequireRolesSize() {
    return (this.requireRoles == null) ? 0 : this.requireRoles.size();
  }

  public java.util.Iterator<String> getRequireRolesIterator() {
    return (this.requireRoles == null) ? null : this.requireRoles.iterator();
  }

  public void addToRequireRoles(String elem) {
    if (this.requireRoles == null) {
      this.requireRoles = new ArrayList<String>();
    }
    this.requireRoles.add(elem);
  }

  public List<String> getRequireRoles() {
    return this.requireRoles;
  }

  public IssuesDashboard setRequireRoles(List<String> requireRoles) {
    this.requireRoles = requireRoles;
    return this;
  }

  public void unsetRequireRoles() {
    this.requireRoles = null;
  }

  /** Returns true if field requireRoles is set (has been assigned a value) and false otherwise */
  public boolean isSetRequireRoles() {
    return this.requireRoles != null;
  }

  public void setRequireRolesIsSet(boolean value) {
    if (!value) {
      this.requireRoles = null;
    }
  }

  public boolean isShowDuration() {
    return this.showDuration;
  }

  public IssuesDashboard setShowDuration(boolean showDuration) {
    this.showDuration = showDuration;
    setShowDurationIsSet(true);
    return this;
  }

  public void unsetShowDuration() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHOWDURATION_ISSET_ID);
  }

  /** Returns true if field showDuration is set (has been assigned a value) and false otherwise */
  public boolean isSetShowDuration() {
    return EncodingUtils.testBit(__isset_bitfield, __SHOWDURATION_ISSET_ID);
  }

  public void setShowDurationIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHOWDURATION_ISSET_ID, value);
  }

  public boolean isShowList() {
    return this.showList;
  }

  public IssuesDashboard setShowList(boolean showList) {
    this.showList = showList;
    setShowListIsSet(true);
    return this;
  }

  public void unsetShowList() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHOWLIST_ISSET_ID);
  }

  /** Returns true if field showList is set (has been assigned a value) and false otherwise */
  public boolean isSetShowList() {
    return EncodingUtils.testBit(__isset_bitfield, __SHOWLIST_ISSET_ID);
  }

  public void setShowListIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHOWLIST_ISSET_ID, value);
  }

  public com.wi.director.thrift.v1.common.PageReq getPageReq() {
    return this.pageReq;
  }

  public IssuesDashboard setPageReq(com.wi.director.thrift.v1.common.PageReq pageReq) {
    this.pageReq = pageReq;
    return this;
  }

  public void unsetPageReq() {
    this.pageReq = null;
  }

  /** Returns true if field pageReq is set (has been assigned a value) and false otherwise */
  public boolean isSetPageReq() {
    return this.pageReq != null;
  }

  public void setPageReqIsSet(boolean value) {
    if (!value) {
      this.pageReq = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case INCLUDE_STATES:
      if (value == null) {
        unsetIncludeStates();
      } else {
        setIncludeStates((List<IssueState>)value);
      }
      break;

    case INCLUDE_PRIORITIES:
      if (value == null) {
        unsetIncludePriorities();
      } else {
        setIncludePriorities((List<com.wi.director.thrift.v1.job.PriorityLevel>)value);
      }
      break;

    case REQUIRE_OPEN_USERS:
      if (value == null) {
        unsetRequireOpenUsers();
      } else {
        setRequireOpenUsers((List<String>)value);
      }
      break;

    case REQUIRE_RESOLVE_USERS:
      if (value == null) {
        unsetRequireResolveUsers();
      } else {
        setRequireResolveUsers((List<String>)value);
      }
      break;

    case REQUIRE_TEMPLATES:
      if (value == null) {
        unsetRequireTemplates();
      } else {
        setRequireTemplates((List<String>)value);
      }
      break;

    case REQUIRE_ROLES:
      if (value == null) {
        unsetRequireRoles();
      } else {
        setRequireRoles((List<String>)value);
      }
      break;

    case SHOW_DURATION:
      if (value == null) {
        unsetShowDuration();
      } else {
        setShowDuration((Boolean)value);
      }
      break;

    case SHOW_LIST:
      if (value == null) {
        unsetShowList();
      } else {
        setShowList((Boolean)value);
      }
      break;

    case PAGE_REQ:
      if (value == null) {
        unsetPageReq();
      } else {
        setPageReq((com.wi.director.thrift.v1.common.PageReq)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case INCLUDE_STATES:
      return getIncludeStates();

    case INCLUDE_PRIORITIES:
      return getIncludePriorities();

    case REQUIRE_OPEN_USERS:
      return getRequireOpenUsers();

    case REQUIRE_RESOLVE_USERS:
      return getRequireResolveUsers();

    case REQUIRE_TEMPLATES:
      return getRequireTemplates();

    case REQUIRE_ROLES:
      return getRequireRoles();

    case SHOW_DURATION:
      return isShowDuration();

    case SHOW_LIST:
      return isShowList();

    case PAGE_REQ:
      return getPageReq();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case INCLUDE_STATES:
      return isSetIncludeStates();
    case INCLUDE_PRIORITIES:
      return isSetIncludePriorities();
    case REQUIRE_OPEN_USERS:
      return isSetRequireOpenUsers();
    case REQUIRE_RESOLVE_USERS:
      return isSetRequireResolveUsers();
    case REQUIRE_TEMPLATES:
      return isSetRequireTemplates();
    case REQUIRE_ROLES:
      return isSetRequireRoles();
    case SHOW_DURATION:
      return isSetShowDuration();
    case SHOW_LIST:
      return isSetShowList();
    case PAGE_REQ:
      return isSetPageReq();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof IssuesDashboard)
      return this.equals((IssuesDashboard)that);
    return false;
  }

  public boolean equals(IssuesDashboard that) {
    if (that == null)
      return false;

    boolean this_present_includeStates = true && this.isSetIncludeStates();
    boolean that_present_includeStates = true && that.isSetIncludeStates();
    if (this_present_includeStates || that_present_includeStates) {
      if (!(this_present_includeStates && that_present_includeStates))
        return false;
      if (!this.includeStates.equals(that.includeStates))
        return false;
    }

    boolean this_present_includePriorities = true && this.isSetIncludePriorities();
    boolean that_present_includePriorities = true && that.isSetIncludePriorities();
    if (this_present_includePriorities || that_present_includePriorities) {
      if (!(this_present_includePriorities && that_present_includePriorities))
        return false;
      if (!this.includePriorities.equals(that.includePriorities))
        return false;
    }

    boolean this_present_requireOpenUsers = true && this.isSetRequireOpenUsers();
    boolean that_present_requireOpenUsers = true && that.isSetRequireOpenUsers();
    if (this_present_requireOpenUsers || that_present_requireOpenUsers) {
      if (!(this_present_requireOpenUsers && that_present_requireOpenUsers))
        return false;
      if (!this.requireOpenUsers.equals(that.requireOpenUsers))
        return false;
    }

    boolean this_present_requireResolveUsers = true && this.isSetRequireResolveUsers();
    boolean that_present_requireResolveUsers = true && that.isSetRequireResolveUsers();
    if (this_present_requireResolveUsers || that_present_requireResolveUsers) {
      if (!(this_present_requireResolveUsers && that_present_requireResolveUsers))
        return false;
      if (!this.requireResolveUsers.equals(that.requireResolveUsers))
        return false;
    }

    boolean this_present_requireTemplates = true && this.isSetRequireTemplates();
    boolean that_present_requireTemplates = true && that.isSetRequireTemplates();
    if (this_present_requireTemplates || that_present_requireTemplates) {
      if (!(this_present_requireTemplates && that_present_requireTemplates))
        return false;
      if (!this.requireTemplates.equals(that.requireTemplates))
        return false;
    }

    boolean this_present_requireRoles = true && this.isSetRequireRoles();
    boolean that_present_requireRoles = true && that.isSetRequireRoles();
    if (this_present_requireRoles || that_present_requireRoles) {
      if (!(this_present_requireRoles && that_present_requireRoles))
        return false;
      if (!this.requireRoles.equals(that.requireRoles))
        return false;
    }

    boolean this_present_showDuration = true;
    boolean that_present_showDuration = true;
    if (this_present_showDuration || that_present_showDuration) {
      if (!(this_present_showDuration && that_present_showDuration))
        return false;
      if (this.showDuration != that.showDuration)
        return false;
    }

    boolean this_present_showList = true;
    boolean that_present_showList = true;
    if (this_present_showList || that_present_showList) {
      if (!(this_present_showList && that_present_showList))
        return false;
      if (this.showList != that.showList)
        return false;
    }

    boolean this_present_pageReq = true && this.isSetPageReq();
    boolean that_present_pageReq = true && that.isSetPageReq();
    if (this_present_pageReq || that_present_pageReq) {
      if (!(this_present_pageReq && that_present_pageReq))
        return false;
      if (!this.pageReq.equals(that.pageReq))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_includeStates = true && (isSetIncludeStates());
    list.add(present_includeStates);
    if (present_includeStates)
      list.add(includeStates);

    boolean present_includePriorities = true && (isSetIncludePriorities());
    list.add(present_includePriorities);
    if (present_includePriorities)
      list.add(includePriorities);

    boolean present_requireOpenUsers = true && (isSetRequireOpenUsers());
    list.add(present_requireOpenUsers);
    if (present_requireOpenUsers)
      list.add(requireOpenUsers);

    boolean present_requireResolveUsers = true && (isSetRequireResolveUsers());
    list.add(present_requireResolveUsers);
    if (present_requireResolveUsers)
      list.add(requireResolveUsers);

    boolean present_requireTemplates = true && (isSetRequireTemplates());
    list.add(present_requireTemplates);
    if (present_requireTemplates)
      list.add(requireTemplates);

    boolean present_requireRoles = true && (isSetRequireRoles());
    list.add(present_requireRoles);
    if (present_requireRoles)
      list.add(requireRoles);

    boolean present_showDuration = true;
    list.add(present_showDuration);
    if (present_showDuration)
      list.add(showDuration);

    boolean present_showList = true;
    list.add(present_showList);
    if (present_showList)
      list.add(showList);

    boolean present_pageReq = true && (isSetPageReq());
    list.add(present_pageReq);
    if (present_pageReq)
      list.add(pageReq);

    return list.hashCode();
  }

  @Override
  public int compareTo(IssuesDashboard other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetIncludeStates()).compareTo(other.isSetIncludeStates());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIncludeStates()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.includeStates, other.includeStates);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIncludePriorities()).compareTo(other.isSetIncludePriorities());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIncludePriorities()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.includePriorities, other.includePriorities);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequireOpenUsers()).compareTo(other.isSetRequireOpenUsers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequireOpenUsers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requireOpenUsers, other.requireOpenUsers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequireResolveUsers()).compareTo(other.isSetRequireResolveUsers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequireResolveUsers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requireResolveUsers, other.requireResolveUsers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequireTemplates()).compareTo(other.isSetRequireTemplates());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequireTemplates()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requireTemplates, other.requireTemplates);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequireRoles()).compareTo(other.isSetRequireRoles());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequireRoles()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requireRoles, other.requireRoles);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShowDuration()).compareTo(other.isSetShowDuration());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShowDuration()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.showDuration, other.showDuration);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShowList()).compareTo(other.isSetShowList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShowList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.showList, other.showList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPageReq()).compareTo(other.isSetPageReq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPageReq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageReq, other.pageReq);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("IssuesDashboard(");
    boolean first = true;

    if (isSetIncludeStates()) {
      sb.append("includeStates:");
      if (this.includeStates == null) {
        sb.append("null");
      } else {
        sb.append(this.includeStates);
      }
      first = false;
    }
    if (isSetIncludePriorities()) {
      if (!first) sb.append(", ");
      sb.append("includePriorities:");
      if (this.includePriorities == null) {
        sb.append("null");
      } else {
        sb.append(this.includePriorities);
      }
      first = false;
    }
    if (isSetRequireOpenUsers()) {
      if (!first) sb.append(", ");
      sb.append("requireOpenUsers:");
      if (this.requireOpenUsers == null) {
        sb.append("null");
      } else {
        sb.append(this.requireOpenUsers);
      }
      first = false;
    }
    if (isSetRequireResolveUsers()) {
      if (!first) sb.append(", ");
      sb.append("requireResolveUsers:");
      if (this.requireResolveUsers == null) {
        sb.append("null");
      } else {
        sb.append(this.requireResolveUsers);
      }
      first = false;
    }
    if (isSetRequireTemplates()) {
      if (!first) sb.append(", ");
      sb.append("requireTemplates:");
      if (this.requireTemplates == null) {
        sb.append("null");
      } else {
        sb.append(this.requireTemplates);
      }
      first = false;
    }
    if (isSetRequireRoles()) {
      if (!first) sb.append(", ");
      sb.append("requireRoles:");
      if (this.requireRoles == null) {
        sb.append("null");
      } else {
        sb.append(this.requireRoles);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("showDuration:");
    sb.append(this.showDuration);
    first = false;
    if (!first) sb.append(", ");
    sb.append("showList:");
    sb.append(this.showList);
    first = false;
    if (isSetPageReq()) {
      if (!first) sb.append(", ");
      sb.append("pageReq:");
      if (this.pageReq == null) {
        sb.append("null");
      } else {
        sb.append(this.pageReq);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (pageReq != null) {
      pageReq.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class IssuesDashboardStandardSchemeFactory implements SchemeFactory {
    public IssuesDashboardStandardScheme getScheme() {
      return new IssuesDashboardStandardScheme();
    }
  }

  private static class IssuesDashboardStandardScheme extends StandardScheme<IssuesDashboard> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, IssuesDashboard struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // INCLUDE_STATES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                struct.includeStates = new ArrayList<IssueState>(_list48.size);
                IssueState _elem49;
                for (int _i50 = 0; _i50 < _list48.size; ++_i50)
                {
                  _elem49 = com.parsable.thrift.v1.analytics.IssueState.findByValue(iprot.readI32());
                  struct.includeStates.add(_elem49);
                }
                iprot.readListEnd();
              }
              struct.setIncludeStatesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // INCLUDE_PRIORITIES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list51 = iprot.readListBegin();
                struct.includePriorities = new ArrayList<com.wi.director.thrift.v1.job.PriorityLevel>(_list51.size);
                com.wi.director.thrift.v1.job.PriorityLevel _elem52;
                for (int _i53 = 0; _i53 < _list51.size; ++_i53)
                {
                  _elem52 = new com.wi.director.thrift.v1.job.PriorityLevel();
                  _elem52.read(iprot);
                  struct.includePriorities.add(_elem52);
                }
                iprot.readListEnd();
              }
              struct.setIncludePrioritiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REQUIRE_OPEN_USERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list54 = iprot.readListBegin();
                struct.requireOpenUsers = new ArrayList<String>(_list54.size);
                String _elem55;
                for (int _i56 = 0; _i56 < _list54.size; ++_i56)
                {
                  _elem55 = iprot.readString();
                  struct.requireOpenUsers.add(_elem55);
                }
                iprot.readListEnd();
              }
              struct.setRequireOpenUsersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // REQUIRE_RESOLVE_USERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list57 = iprot.readListBegin();
                struct.requireResolveUsers = new ArrayList<String>(_list57.size);
                String _elem58;
                for (int _i59 = 0; _i59 < _list57.size; ++_i59)
                {
                  _elem58 = iprot.readString();
                  struct.requireResolveUsers.add(_elem58);
                }
                iprot.readListEnd();
              }
              struct.setRequireResolveUsersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // REQUIRE_TEMPLATES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list60 = iprot.readListBegin();
                struct.requireTemplates = new ArrayList<String>(_list60.size);
                String _elem61;
                for (int _i62 = 0; _i62 < _list60.size; ++_i62)
                {
                  _elem61 = iprot.readString();
                  struct.requireTemplates.add(_elem61);
                }
                iprot.readListEnd();
              }
              struct.setRequireTemplatesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // REQUIRE_ROLES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list63 = iprot.readListBegin();
                struct.requireRoles = new ArrayList<String>(_list63.size);
                String _elem64;
                for (int _i65 = 0; _i65 < _list63.size; ++_i65)
                {
                  _elem64 = iprot.readString();
                  struct.requireRoles.add(_elem64);
                }
                iprot.readListEnd();
              }
              struct.setRequireRolesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 100: // SHOW_DURATION
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.showDuration = iprot.readBool();
              struct.setShowDurationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 101: // SHOW_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.showList = iprot.readBool();
              struct.setShowListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 200: // PAGE_REQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.pageReq = new com.wi.director.thrift.v1.common.PageReq();
              struct.pageReq.read(iprot);
              struct.setPageReqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, IssuesDashboard struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.includeStates != null) {
        if (struct.isSetIncludeStates()) {
          oprot.writeFieldBegin(INCLUDE_STATES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.includeStates.size()));
            for (IssueState _iter66 : struct.includeStates)
            {
              oprot.writeI32(_iter66.getValue());
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.includePriorities != null) {
        if (struct.isSetIncludePriorities()) {
          oprot.writeFieldBegin(INCLUDE_PRIORITIES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.includePriorities.size()));
            for (com.wi.director.thrift.v1.job.PriorityLevel _iter67 : struct.includePriorities)
            {
              _iter67.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.requireOpenUsers != null) {
        if (struct.isSetRequireOpenUsers()) {
          oprot.writeFieldBegin(REQUIRE_OPEN_USERS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.requireOpenUsers.size()));
            for (String _iter68 : struct.requireOpenUsers)
            {
              oprot.writeString(_iter68);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.requireResolveUsers != null) {
        if (struct.isSetRequireResolveUsers()) {
          oprot.writeFieldBegin(REQUIRE_RESOLVE_USERS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.requireResolveUsers.size()));
            for (String _iter69 : struct.requireResolveUsers)
            {
              oprot.writeString(_iter69);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.requireTemplates != null) {
        if (struct.isSetRequireTemplates()) {
          oprot.writeFieldBegin(REQUIRE_TEMPLATES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.requireTemplates.size()));
            for (String _iter70 : struct.requireTemplates)
            {
              oprot.writeString(_iter70);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.requireRoles != null) {
        if (struct.isSetRequireRoles()) {
          oprot.writeFieldBegin(REQUIRE_ROLES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.requireRoles.size()));
            for (String _iter71 : struct.requireRoles)
            {
              oprot.writeString(_iter71);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(SHOW_DURATION_FIELD_DESC);
      oprot.writeBool(struct.showDuration);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SHOW_LIST_FIELD_DESC);
      oprot.writeBool(struct.showList);
      oprot.writeFieldEnd();
      if (struct.pageReq != null) {
        if (struct.isSetPageReq()) {
          oprot.writeFieldBegin(PAGE_REQ_FIELD_DESC);
          struct.pageReq.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

}

