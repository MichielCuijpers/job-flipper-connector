/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.parsable.thrift.v1.analytics;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
public class DashFilterKey extends org.apache.thrift.TUnion<DashFilterKey, DashFilterKey._Fields> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DashFilterKey");
  private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField JOB_FIELD_DESC = new org.apache.thrift.protocol.TField("job", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField TEMPLATE_FIELD_DESC = new org.apache.thrift.protocol.TField("template", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField ISSUE_FIELD_DESC = new org.apache.thrift.protocol.TField("issue", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField DEVIATION_FIELD_DESC = new org.apache.thrift.protocol.TField("deviation", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField STEP_AVERAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("stepAverages", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField JOB_METADATA_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("jobMetadataId", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField TEMPLATE_METADATA_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("templateMetadataId", org.apache.thrift.protocol.TType.STRING, (short)12);

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see UserFilterType
     */
    USER((short)1, "user"),
    /**
     * 
     * @see JobFilterType
     */
    JOB((short)2, "job"),
    /**
     * 
     * @see TemplateFilterType
     */
    TEMPLATE((short)3, "template"),
    /**
     * 
     * @see IssueFilterType
     */
    ISSUE((short)4, "issue"),
    /**
     * 
     * @see DeviationFilterType
     */
    DEVIATION((short)5, "deviation"),
    /**
     * 
     * @see StepAveragesFilterType
     */
    STEP_AVERAGES((short)6, "stepAverages"),
    JOB_METADATA_ID((short)11, "jobMetadataId"),
    TEMPLATE_METADATA_ID((short)12, "templateMetadataId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USER
          return USER;
        case 2: // JOB
          return JOB;
        case 3: // TEMPLATE
          return TEMPLATE;
        case 4: // ISSUE
          return ISSUE;
        case 5: // DEVIATION
          return DEVIATION;
        case 6: // STEP_AVERAGES
          return STEP_AVERAGES;
        case 11: // JOB_METADATA_ID
          return JOB_METADATA_ID;
        case 12: // TEMPLATE_METADATA_ID
          return TEMPLATE_METADATA_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, UserFilterType.class)));
    tmpMap.put(_Fields.JOB, new org.apache.thrift.meta_data.FieldMetaData("job", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, JobFilterType.class)));
    tmpMap.put(_Fields.TEMPLATE, new org.apache.thrift.meta_data.FieldMetaData("template", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TemplateFilterType.class)));
    tmpMap.put(_Fields.ISSUE, new org.apache.thrift.meta_data.FieldMetaData("issue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, IssueFilterType.class)));
    tmpMap.put(_Fields.DEVIATION, new org.apache.thrift.meta_data.FieldMetaData("deviation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, DeviationFilterType.class)));
    tmpMap.put(_Fields.STEP_AVERAGES, new org.apache.thrift.meta_data.FieldMetaData("stepAverages", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, StepAveragesFilterType.class)));
    tmpMap.put(_Fields.JOB_METADATA_ID, new org.apache.thrift.meta_data.FieldMetaData("jobMetadataId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "UUID")));
    tmpMap.put(_Fields.TEMPLATE_METADATA_ID, new org.apache.thrift.meta_data.FieldMetaData("templateMetadataId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "UUID")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DashFilterKey.class, metaDataMap);
  }

  public DashFilterKey() {
    super();
  }

  public DashFilterKey(_Fields setField, Object value) {
    super(setField, value);
  }

  public DashFilterKey(DashFilterKey other) {
    super(other);
  }
  public DashFilterKey deepCopy() {
    return new DashFilterKey(this);
  }

  public static DashFilterKey user(UserFilterType value) {
    DashFilterKey x = new DashFilterKey();
    x.setUser(value);
    return x;
  }

  public static DashFilterKey job(JobFilterType value) {
    DashFilterKey x = new DashFilterKey();
    x.setJob(value);
    return x;
  }

  public static DashFilterKey template(TemplateFilterType value) {
    DashFilterKey x = new DashFilterKey();
    x.setTemplate(value);
    return x;
  }

  public static DashFilterKey issue(IssueFilterType value) {
    DashFilterKey x = new DashFilterKey();
    x.setIssue(value);
    return x;
  }

  public static DashFilterKey deviation(DeviationFilterType value) {
    DashFilterKey x = new DashFilterKey();
    x.setDeviation(value);
    return x;
  }

  public static DashFilterKey stepAverages(StepAveragesFilterType value) {
    DashFilterKey x = new DashFilterKey();
    x.setStepAverages(value);
    return x;
  }

  public static DashFilterKey jobMetadataId(String value) {
    DashFilterKey x = new DashFilterKey();
    x.setJobMetadataId(value);
    return x;
  }

  public static DashFilterKey templateMetadataId(String value) {
    DashFilterKey x = new DashFilterKey();
    x.setTemplateMetadataId(value);
    return x;
  }


  @Override
  protected void checkType(_Fields setField, Object value) throws ClassCastException {
    switch (setField) {
      case USER:
        if (value instanceof UserFilterType) {
          break;
        }
        throw new ClassCastException("Was expecting value of type UserFilterType for field 'user', but got " + value.getClass().getSimpleName());
      case JOB:
        if (value instanceof JobFilterType) {
          break;
        }
        throw new ClassCastException("Was expecting value of type JobFilterType for field 'job', but got " + value.getClass().getSimpleName());
      case TEMPLATE:
        if (value instanceof TemplateFilterType) {
          break;
        }
        throw new ClassCastException("Was expecting value of type TemplateFilterType for field 'template', but got " + value.getClass().getSimpleName());
      case ISSUE:
        if (value instanceof IssueFilterType) {
          break;
        }
        throw new ClassCastException("Was expecting value of type IssueFilterType for field 'issue', but got " + value.getClass().getSimpleName());
      case DEVIATION:
        if (value instanceof DeviationFilterType) {
          break;
        }
        throw new ClassCastException("Was expecting value of type DeviationFilterType for field 'deviation', but got " + value.getClass().getSimpleName());
      case STEP_AVERAGES:
        if (value instanceof StepAveragesFilterType) {
          break;
        }
        throw new ClassCastException("Was expecting value of type StepAveragesFilterType for field 'stepAverages', but got " + value.getClass().getSimpleName());
      case JOB_METADATA_ID:
        if (value instanceof String) {
          break;
        }
        throw new ClassCastException("Was expecting value of type String for field 'jobMetadataId', but got " + value.getClass().getSimpleName());
      case TEMPLATE_METADATA_ID:
        if (value instanceof String) {
          break;
        }
        throw new ClassCastException("Was expecting value of type String for field 'templateMetadataId', but got " + value.getClass().getSimpleName());
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected Object standardSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TField field) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(field.id);
    if (setField != null) {
      switch (setField) {
        case USER:
          if (field.type == USER_FIELD_DESC.type) {
            UserFilterType user;
            user = com.parsable.thrift.v1.analytics.UserFilterType.findByValue(iprot.readI32());
            return user;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case JOB:
          if (field.type == JOB_FIELD_DESC.type) {
            JobFilterType job;
            job = com.parsable.thrift.v1.analytics.JobFilterType.findByValue(iprot.readI32());
            return job;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case TEMPLATE:
          if (field.type == TEMPLATE_FIELD_DESC.type) {
            TemplateFilterType template;
            template = com.parsable.thrift.v1.analytics.TemplateFilterType.findByValue(iprot.readI32());
            return template;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case ISSUE:
          if (field.type == ISSUE_FIELD_DESC.type) {
            IssueFilterType issue;
            issue = com.parsable.thrift.v1.analytics.IssueFilterType.findByValue(iprot.readI32());
            return issue;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case DEVIATION:
          if (field.type == DEVIATION_FIELD_DESC.type) {
            DeviationFilterType deviation;
            deviation = com.parsable.thrift.v1.analytics.DeviationFilterType.findByValue(iprot.readI32());
            return deviation;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case STEP_AVERAGES:
          if (field.type == STEP_AVERAGES_FIELD_DESC.type) {
            StepAveragesFilterType stepAverages;
            stepAverages = com.parsable.thrift.v1.analytics.StepAveragesFilterType.findByValue(iprot.readI32());
            return stepAverages;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case JOB_METADATA_ID:
          if (field.type == JOB_METADATA_ID_FIELD_DESC.type) {
            String jobMetadataId;
            jobMetadataId = iprot.readString();
            return jobMetadataId;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case TEMPLATE_METADATA_ID:
          if (field.type == TEMPLATE_METADATA_ID_FIELD_DESC.type) {
            String templateMetadataId;
            templateMetadataId = iprot.readString();
            return templateMetadataId;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      return null;
    }
  }

  @Override
  protected void standardSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case USER:
        UserFilterType user = (UserFilterType)value_;
        oprot.writeI32(user.getValue());
        return;
      case JOB:
        JobFilterType job = (JobFilterType)value_;
        oprot.writeI32(job.getValue());
        return;
      case TEMPLATE:
        TemplateFilterType template = (TemplateFilterType)value_;
        oprot.writeI32(template.getValue());
        return;
      case ISSUE:
        IssueFilterType issue = (IssueFilterType)value_;
        oprot.writeI32(issue.getValue());
        return;
      case DEVIATION:
        DeviationFilterType deviation = (DeviationFilterType)value_;
        oprot.writeI32(deviation.getValue());
        return;
      case STEP_AVERAGES:
        StepAveragesFilterType stepAverages = (StepAveragesFilterType)value_;
        oprot.writeI32(stepAverages.getValue());
        return;
      case JOB_METADATA_ID:
        String jobMetadataId = (String)value_;
        oprot.writeString(jobMetadataId);
        return;
      case TEMPLATE_METADATA_ID:
        String templateMetadataId = (String)value_;
        oprot.writeString(templateMetadataId);
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected Object tupleSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, short fieldID) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(fieldID);
    if (setField != null) {
      switch (setField) {
        case USER:
          UserFilterType user;
          user = com.parsable.thrift.v1.analytics.UserFilterType.findByValue(iprot.readI32());
          return user;
        case JOB:
          JobFilterType job;
          job = com.parsable.thrift.v1.analytics.JobFilterType.findByValue(iprot.readI32());
          return job;
        case TEMPLATE:
          TemplateFilterType template;
          template = com.parsable.thrift.v1.analytics.TemplateFilterType.findByValue(iprot.readI32());
          return template;
        case ISSUE:
          IssueFilterType issue;
          issue = com.parsable.thrift.v1.analytics.IssueFilterType.findByValue(iprot.readI32());
          return issue;
        case DEVIATION:
          DeviationFilterType deviation;
          deviation = com.parsable.thrift.v1.analytics.DeviationFilterType.findByValue(iprot.readI32());
          return deviation;
        case STEP_AVERAGES:
          StepAveragesFilterType stepAverages;
          stepAverages = com.parsable.thrift.v1.analytics.StepAveragesFilterType.findByValue(iprot.readI32());
          return stepAverages;
        case JOB_METADATA_ID:
          String jobMetadataId;
          jobMetadataId = iprot.readString();
          return jobMetadataId;
        case TEMPLATE_METADATA_ID:
          String templateMetadataId;
          templateMetadataId = iprot.readString();
          return templateMetadataId;
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      throw new TProtocolException("Couldn't find a field with field id " + fieldID);
    }
  }

  @Override
  protected void tupleSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case USER:
        UserFilterType user = (UserFilterType)value_;
        oprot.writeI32(user.getValue());
        return;
      case JOB:
        JobFilterType job = (JobFilterType)value_;
        oprot.writeI32(job.getValue());
        return;
      case TEMPLATE:
        TemplateFilterType template = (TemplateFilterType)value_;
        oprot.writeI32(template.getValue());
        return;
      case ISSUE:
        IssueFilterType issue = (IssueFilterType)value_;
        oprot.writeI32(issue.getValue());
        return;
      case DEVIATION:
        DeviationFilterType deviation = (DeviationFilterType)value_;
        oprot.writeI32(deviation.getValue());
        return;
      case STEP_AVERAGES:
        StepAveragesFilterType stepAverages = (StepAveragesFilterType)value_;
        oprot.writeI32(stepAverages.getValue());
        return;
      case JOB_METADATA_ID:
        String jobMetadataId = (String)value_;
        oprot.writeString(jobMetadataId);
        return;
      case TEMPLATE_METADATA_ID:
        String templateMetadataId = (String)value_;
        oprot.writeString(templateMetadataId);
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TField getFieldDesc(_Fields setField) {
    switch (setField) {
      case USER:
        return USER_FIELD_DESC;
      case JOB:
        return JOB_FIELD_DESC;
      case TEMPLATE:
        return TEMPLATE_FIELD_DESC;
      case ISSUE:
        return ISSUE_FIELD_DESC;
      case DEVIATION:
        return DEVIATION_FIELD_DESC;
      case STEP_AVERAGES:
        return STEP_AVERAGES_FIELD_DESC;
      case JOB_METADATA_ID:
        return JOB_METADATA_ID_FIELD_DESC;
      case TEMPLATE_METADATA_ID:
        return TEMPLATE_METADATA_ID_FIELD_DESC;
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TStruct getStructDesc() {
    return STRUCT_DESC;
  }

  @Override
  protected _Fields enumForId(short id) {
    return _Fields.findByThriftIdOrThrow(id);
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  /**
   * 
   * @see UserFilterType
   */
  public UserFilterType getUser() {
    if (getSetField() == _Fields.USER) {
      return (UserFilterType)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'user' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  /**
   * 
   * @see UserFilterType
   */
  public void setUser(UserFilterType value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.USER;
    value_ = value;
  }

  /**
   * 
   * @see JobFilterType
   */
  public JobFilterType getJob() {
    if (getSetField() == _Fields.JOB) {
      return (JobFilterType)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'job' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  /**
   * 
   * @see JobFilterType
   */
  public void setJob(JobFilterType value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.JOB;
    value_ = value;
  }

  /**
   * 
   * @see TemplateFilterType
   */
  public TemplateFilterType getTemplate() {
    if (getSetField() == _Fields.TEMPLATE) {
      return (TemplateFilterType)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'template' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  /**
   * 
   * @see TemplateFilterType
   */
  public void setTemplate(TemplateFilterType value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.TEMPLATE;
    value_ = value;
  }

  /**
   * 
   * @see IssueFilterType
   */
  public IssueFilterType getIssue() {
    if (getSetField() == _Fields.ISSUE) {
      return (IssueFilterType)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'issue' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  /**
   * 
   * @see IssueFilterType
   */
  public void setIssue(IssueFilterType value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.ISSUE;
    value_ = value;
  }

  /**
   * 
   * @see DeviationFilterType
   */
  public DeviationFilterType getDeviation() {
    if (getSetField() == _Fields.DEVIATION) {
      return (DeviationFilterType)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'deviation' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  /**
   * 
   * @see DeviationFilterType
   */
  public void setDeviation(DeviationFilterType value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.DEVIATION;
    value_ = value;
  }

  /**
   * 
   * @see StepAveragesFilterType
   */
  public StepAveragesFilterType getStepAverages() {
    if (getSetField() == _Fields.STEP_AVERAGES) {
      return (StepAveragesFilterType)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'stepAverages' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  /**
   * 
   * @see StepAveragesFilterType
   */
  public void setStepAverages(StepAveragesFilterType value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.STEP_AVERAGES;
    value_ = value;
  }

  public String getJobMetadataId() {
    if (getSetField() == _Fields.JOB_METADATA_ID) {
      return (String)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'jobMetadataId' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setJobMetadataId(String value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.JOB_METADATA_ID;
    value_ = value;
  }

  public String getTemplateMetadataId() {
    if (getSetField() == _Fields.TEMPLATE_METADATA_ID) {
      return (String)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'templateMetadataId' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setTemplateMetadataId(String value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.TEMPLATE_METADATA_ID;
    value_ = value;
  }

  public boolean isSetUser() {
    return setField_ == _Fields.USER;
  }


  public boolean isSetJob() {
    return setField_ == _Fields.JOB;
  }


  public boolean isSetTemplate() {
    return setField_ == _Fields.TEMPLATE;
  }


  public boolean isSetIssue() {
    return setField_ == _Fields.ISSUE;
  }


  public boolean isSetDeviation() {
    return setField_ == _Fields.DEVIATION;
  }


  public boolean isSetStepAverages() {
    return setField_ == _Fields.STEP_AVERAGES;
  }


  public boolean isSetJobMetadataId() {
    return setField_ == _Fields.JOB_METADATA_ID;
  }


  public boolean isSetTemplateMetadataId() {
    return setField_ == _Fields.TEMPLATE_METADATA_ID;
  }


  public boolean equals(Object other) {
    if (other instanceof DashFilterKey) {
      return equals((DashFilterKey)other);
    } else {
      return false;
    }
  }

  public boolean equals(DashFilterKey other) {
    return other != null && getSetField() == other.getSetField() && getFieldValue().equals(other.getFieldValue());
  }

  @Override
  public int compareTo(DashFilterKey other) {
    int lastComparison = org.apache.thrift.TBaseHelper.compareTo(getSetField(), other.getSetField());
    if (lastComparison == 0) {
      return org.apache.thrift.TBaseHelper.compareTo(getFieldValue(), other.getFieldValue());
    }
    return lastComparison;
  }


  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();
    list.add(this.getClass().getName());
    org.apache.thrift.TFieldIdEnum setField = getSetField();
    if (setField != null) {
      list.add(setField.getThriftFieldId());
      Object value = getFieldValue();
      if (value instanceof org.apache.thrift.TEnum) {
        list.add(((org.apache.thrift.TEnum)getFieldValue()).getValue());
      } else {
        list.add(value);
      }
    }
    return list.hashCode();
  }
  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


}
