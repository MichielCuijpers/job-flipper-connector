/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.parsable.thrift.v1.analytics;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class AnalyticsService {

  public interface Iface {

    public Dashboard PrepareDashboard(DashboardConfig conf, boolean verifyOnly) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public Dashboard PrepareDashboard(DashboardConfig conf, boolean verifyOnly) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      send_PrepareDashboard(conf, verifyOnly);
      return recv_PrepareDashboard();
    }

    public void send_PrepareDashboard(DashboardConfig conf, boolean verifyOnly) throws org.apache.thrift.TException
    {
      PrepareDashboard_args args = new PrepareDashboard_args();
      args.setConf(conf);
      args.setVerifyOnly(verifyOnly);
      sendBase("PrepareDashboard", args);
    }

    public Dashboard recv_PrepareDashboard() throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      PrepareDashboard_result result = new PrepareDashboard_result();
      receiveBase(result, "PrepareDashboard");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "PrepareDashboard failed: unknown result");
    }

  }
  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("PrepareDashboard", new PrepareDashboard());
      return processMap;
    }

    public static class PrepareDashboard<I extends Iface> extends org.apache.thrift.ProcessFunction<I, PrepareDashboard_args> {
      public PrepareDashboard() {
        super("PrepareDashboard");
      }

      public PrepareDashboard_args getEmptyArgsInstance() {
        return new PrepareDashboard_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public PrepareDashboard_result getResult(I iface, PrepareDashboard_args args) throws org.apache.thrift.TException {
        PrepareDashboard_result result = new PrepareDashboard_result();
        try {
          result.success = iface.PrepareDashboard(args.conf, args.verifyOnly);
        } catch (com.wi.director.thrift.v1.common.SystemException err) {
          result.err = err;
        }
        return result;
      }
    }

  }

  public static class PrepareDashboard_args implements org.apache.thrift.TBase<PrepareDashboard_args, PrepareDashboard_args._Fields>, java.io.Serializable, Cloneable, Comparable<PrepareDashboard_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PrepareDashboard_args");

    private static final org.apache.thrift.protocol.TField CONF_FIELD_DESC = new org.apache.thrift.protocol.TField("conf", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField VERIFY_ONLY_FIELD_DESC = new org.apache.thrift.protocol.TField("verifyOnly", org.apache.thrift.protocol.TType.BOOL, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new PrepareDashboard_argsStandardSchemeFactory());
    }

    public DashboardConfig conf; // required
    public boolean verifyOnly; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONF((short)1, "conf"),
      VERIFY_ONLY((short)2, "verifyOnly");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONF
            return CONF;
          case 2: // VERIFY_ONLY
            return VERIFY_ONLY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __VERIFYONLY_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONF, new org.apache.thrift.meta_data.FieldMetaData("conf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DashboardConfig.class)));
      tmpMap.put(_Fields.VERIFY_ONLY, new org.apache.thrift.meta_data.FieldMetaData("verifyOnly", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PrepareDashboard_args.class, metaDataMap);
    }

    public PrepareDashboard_args() {
    }

    public PrepareDashboard_args(
      DashboardConfig conf,
      boolean verifyOnly)
    {
      this();
      this.conf = conf;
      this.verifyOnly = verifyOnly;
      setVerifyOnlyIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public PrepareDashboard_args(PrepareDashboard_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetConf()) {
        this.conf = new DashboardConfig(other.conf);
      }
      this.verifyOnly = other.verifyOnly;
    }

    public PrepareDashboard_args deepCopy() {
      return new PrepareDashboard_args(this);
    }

    @Override
    public void clear() {
      this.conf = null;
      setVerifyOnlyIsSet(false);
      this.verifyOnly = false;
    }

    public DashboardConfig getConf() {
      return this.conf;
    }

    public PrepareDashboard_args setConf(DashboardConfig conf) {
      this.conf = conf;
      return this;
    }

    public void unsetConf() {
      this.conf = null;
    }

    /** Returns true if field conf is set (has been assigned a value) and false otherwise */
    public boolean isSetConf() {
      return this.conf != null;
    }

    public void setConfIsSet(boolean value) {
      if (!value) {
        this.conf = null;
      }
    }

    public boolean isVerifyOnly() {
      return this.verifyOnly;
    }

    public PrepareDashboard_args setVerifyOnly(boolean verifyOnly) {
      this.verifyOnly = verifyOnly;
      setVerifyOnlyIsSet(true);
      return this;
    }

    public void unsetVerifyOnly() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERIFYONLY_ISSET_ID);
    }

    /** Returns true if field verifyOnly is set (has been assigned a value) and false otherwise */
    public boolean isSetVerifyOnly() {
      return EncodingUtils.testBit(__isset_bitfield, __VERIFYONLY_ISSET_ID);
    }

    public void setVerifyOnlyIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERIFYONLY_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONF:
        if (value == null) {
          unsetConf();
        } else {
          setConf((DashboardConfig)value);
        }
        break;

      case VERIFY_ONLY:
        if (value == null) {
          unsetVerifyOnly();
        } else {
          setVerifyOnly((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONF:
        return getConf();

      case VERIFY_ONLY:
        return isVerifyOnly();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONF:
        return isSetConf();
      case VERIFY_ONLY:
        return isSetVerifyOnly();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof PrepareDashboard_args)
        return this.equals((PrepareDashboard_args)that);
      return false;
    }

    public boolean equals(PrepareDashboard_args that) {
      if (that == null)
        return false;

      boolean this_present_conf = true && this.isSetConf();
      boolean that_present_conf = true && that.isSetConf();
      if (this_present_conf || that_present_conf) {
        if (!(this_present_conf && that_present_conf))
          return false;
        if (!this.conf.equals(that.conf))
          return false;
      }

      boolean this_present_verifyOnly = true;
      boolean that_present_verifyOnly = true;
      if (this_present_verifyOnly || that_present_verifyOnly) {
        if (!(this_present_verifyOnly && that_present_verifyOnly))
          return false;
        if (this.verifyOnly != that.verifyOnly)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_conf = true && (isSetConf());
      list.add(present_conf);
      if (present_conf)
        list.add(conf);

      boolean present_verifyOnly = true;
      list.add(present_verifyOnly);
      if (present_verifyOnly)
        list.add(verifyOnly);

      return list.hashCode();
    }

    @Override
    public int compareTo(PrepareDashboard_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetConf()).compareTo(other.isSetConf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.conf, other.conf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVerifyOnly()).compareTo(other.isSetVerifyOnly());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVerifyOnly()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.verifyOnly, other.verifyOnly);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("PrepareDashboard_args(");
      boolean first = true;

      sb.append("conf:");
      if (this.conf == null) {
        sb.append("null");
      } else {
        sb.append(this.conf);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("verifyOnly:");
      sb.append(this.verifyOnly);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (conf != null) {
        conf.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class PrepareDashboard_argsStandardSchemeFactory implements SchemeFactory {
      public PrepareDashboard_argsStandardScheme getScheme() {
        return new PrepareDashboard_argsStandardScheme();
      }
    }

    private static class PrepareDashboard_argsStandardScheme extends StandardScheme<PrepareDashboard_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, PrepareDashboard_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.conf = new DashboardConfig();
                struct.conf.read(iprot);
                struct.setConfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VERIFY_ONLY
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.verifyOnly = iprot.readBool();
                struct.setVerifyOnlyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, PrepareDashboard_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.conf != null) {
          oprot.writeFieldBegin(CONF_FIELD_DESC);
          struct.conf.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(VERIFY_ONLY_FIELD_DESC);
        oprot.writeBool(struct.verifyOnly);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class PrepareDashboard_result implements org.apache.thrift.TBase<PrepareDashboard_result, PrepareDashboard_result._Fields>, java.io.Serializable, Cloneable, Comparable<PrepareDashboard_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PrepareDashboard_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new PrepareDashboard_resultStandardSchemeFactory());
    }

    public Dashboard success; // required
    public com.wi.director.thrift.v1.common.SystemException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Dashboard.class)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PrepareDashboard_result.class, metaDataMap);
    }

    public PrepareDashboard_result() {
    }

    public PrepareDashboard_result(
      Dashboard success,
      com.wi.director.thrift.v1.common.SystemException err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public PrepareDashboard_result(PrepareDashboard_result other) {
      if (other.isSetSuccess()) {
        this.success = new Dashboard(other.success);
      }
      if (other.isSetErr()) {
        this.err = new com.wi.director.thrift.v1.common.SystemException(other.err);
      }
    }

    public PrepareDashboard_result deepCopy() {
      return new PrepareDashboard_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public Dashboard getSuccess() {
      return this.success;
    }

    public PrepareDashboard_result setSuccess(Dashboard success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.wi.director.thrift.v1.common.SystemException getErr() {
      return this.err;
    }

    public PrepareDashboard_result setErr(com.wi.director.thrift.v1.common.SystemException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Dashboard)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((com.wi.director.thrift.v1.common.SystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof PrepareDashboard_result)
        return this.equals((PrepareDashboard_result)that);
      return false;
    }

    public boolean equals(PrepareDashboard_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(PrepareDashboard_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("PrepareDashboard_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class PrepareDashboard_resultStandardSchemeFactory implements SchemeFactory {
      public PrepareDashboard_resultStandardScheme getScheme() {
        return new PrepareDashboard_resultStandardScheme();
      }
    }

    private static class PrepareDashboard_resultStandardScheme extends StandardScheme<PrepareDashboard_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, PrepareDashboard_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Dashboard();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new com.wi.director.thrift.v1.common.SystemException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, PrepareDashboard_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

}
