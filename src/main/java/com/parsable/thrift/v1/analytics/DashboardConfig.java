/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.parsable.thrift.v1.analytics;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class DashboardConfig implements org.apache.thrift.TBase<DashboardConfig, DashboardConfig._Fields>, java.io.Serializable, Cloneable, Comparable<DashboardConfig> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DashboardConfig");

  private static final org.apache.thrift.protocol.TField TEAM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("teamId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField STEP_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("stepTime", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField TZ_FIELD_DESC = new org.apache.thrift.protocol.TField("tz", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField TIME_GRANULARITY_FIELD_DESC = new org.apache.thrift.protocol.TField("timeGranularity", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField SELECT_FIELD_DESC = new org.apache.thrift.protocol.TField("select", org.apache.thrift.protocol.TType.STRUCT, (short)10);
  private static final org.apache.thrift.protocol.TField FILTERS_FIELD_DESC = new org.apache.thrift.protocol.TField("filters", org.apache.thrift.protocol.TType.LIST, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DashboardConfigStandardSchemeFactory());
  }

  public String teamId; // required
  public long startTime; // required
  public long endTime; // required
  public long stepTime; // optional
  public String tz; // optional
  public TimeIncrement timeGranularity; // optional
  public DashboardSelection select; // required
  public List<DashFilter> filters; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TEAM_ID((short)1, "teamId"),
    START_TIME((short)2, "startTime"),
    END_TIME((short)3, "endTime"),
    STEP_TIME((short)4, "stepTime"),
    TZ((short)5, "tz"),
    TIME_GRANULARITY((short)6, "timeGranularity"),
    SELECT((short)10, "select"),
    FILTERS((short)11, "filters");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TEAM_ID
          return TEAM_ID;
        case 2: // START_TIME
          return START_TIME;
        case 3: // END_TIME
          return END_TIME;
        case 4: // STEP_TIME
          return STEP_TIME;
        case 5: // TZ
          return TZ;
        case 6: // TIME_GRANULARITY
          return TIME_GRANULARITY;
        case 10: // SELECT
          return SELECT;
        case 11: // FILTERS
          return FILTERS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STARTTIME_ISSET_ID = 0;
  private static final int __ENDTIME_ISSET_ID = 1;
  private static final int __STEPTIME_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.STEP_TIME,_Fields.TZ,_Fields.TIME_GRANULARITY};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TEAM_ID, new org.apache.thrift.meta_data.FieldMetaData("teamId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "UUID")));
    tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "TimeInSecs")));
    tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "TimeInSecs")));
    tmpMap.put(_Fields.STEP_TIME, new org.apache.thrift.meta_data.FieldMetaData("stepTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "TimeInSecs")));
    tmpMap.put(_Fields.TZ, new org.apache.thrift.meta_data.FieldMetaData("tz", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIME_GRANULARITY, new org.apache.thrift.meta_data.FieldMetaData("timeGranularity", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TimeIncrement.class)));
    tmpMap.put(_Fields.SELECT, new org.apache.thrift.meta_data.FieldMetaData("select", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DashboardSelection.class)));
    tmpMap.put(_Fields.FILTERS, new org.apache.thrift.meta_data.FieldMetaData("filters", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DashFilter.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DashboardConfig.class, metaDataMap);
  }

  public DashboardConfig() {
  }

  public DashboardConfig(
    String teamId,
    long startTime,
    long endTime,
    DashboardSelection select,
    List<DashFilter> filters)
  {
    this();
    this.teamId = teamId;
    this.startTime = startTime;
    setStartTimeIsSet(true);
    this.endTime = endTime;
    setEndTimeIsSet(true);
    this.select = select;
    this.filters = filters;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DashboardConfig(DashboardConfig other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTeamId()) {
      this.teamId = other.teamId;
    }
    this.startTime = other.startTime;
    this.endTime = other.endTime;
    this.stepTime = other.stepTime;
    if (other.isSetTz()) {
      this.tz = other.tz;
    }
    if (other.isSetTimeGranularity()) {
      this.timeGranularity = new TimeIncrement(other.timeGranularity);
    }
    if (other.isSetSelect()) {
      this.select = new DashboardSelection(other.select);
    }
    if (other.isSetFilters()) {
      List<DashFilter> __this__filters = new ArrayList<DashFilter>(other.filters.size());
      for (DashFilter other_element : other.filters) {
        __this__filters.add(new DashFilter(other_element));
      }
      this.filters = __this__filters;
    }
  }

  public DashboardConfig deepCopy() {
    return new DashboardConfig(this);
  }

  @Override
  public void clear() {
    this.teamId = null;
    setStartTimeIsSet(false);
    this.startTime = 0;
    setEndTimeIsSet(false);
    this.endTime = 0;
    setStepTimeIsSet(false);
    this.stepTime = 0;
    this.tz = null;
    this.timeGranularity = null;
    this.select = null;
    this.filters = null;
  }

  public String getTeamId() {
    return this.teamId;
  }

  public DashboardConfig setTeamId(String teamId) {
    this.teamId = teamId;
    return this;
  }

  public void unsetTeamId() {
    this.teamId = null;
  }

  /** Returns true if field teamId is set (has been assigned a value) and false otherwise */
  public boolean isSetTeamId() {
    return this.teamId != null;
  }

  public void setTeamIdIsSet(boolean value) {
    if (!value) {
      this.teamId = null;
    }
  }

  public long getStartTime() {
    return this.startTime;
  }

  public DashboardConfig setStartTime(long startTime) {
    this.startTime = startTime;
    setStartTimeIsSet(true);
    return this;
  }

  public void unsetStartTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTTIME_ISSET_ID);
  }

  /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTime() {
    return EncodingUtils.testBit(__isset_bitfield, __STARTTIME_ISSET_ID);
  }

  public void setStartTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTTIME_ISSET_ID, value);
  }

  public long getEndTime() {
    return this.endTime;
  }

  public DashboardConfig setEndTime(long endTime) {
    this.endTime = endTime;
    setEndTimeIsSet(true);
    return this;
  }

  public void unsetEndTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDTIME_ISSET_ID);
  }

  /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
  public boolean isSetEndTime() {
    return EncodingUtils.testBit(__isset_bitfield, __ENDTIME_ISSET_ID);
  }

  public void setEndTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDTIME_ISSET_ID, value);
  }

  public long getStepTime() {
    return this.stepTime;
  }

  public DashboardConfig setStepTime(long stepTime) {
    this.stepTime = stepTime;
    setStepTimeIsSet(true);
    return this;
  }

  public void unsetStepTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STEPTIME_ISSET_ID);
  }

  /** Returns true if field stepTime is set (has been assigned a value) and false otherwise */
  public boolean isSetStepTime() {
    return EncodingUtils.testBit(__isset_bitfield, __STEPTIME_ISSET_ID);
  }

  public void setStepTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STEPTIME_ISSET_ID, value);
  }

  public String getTz() {
    return this.tz;
  }

  public DashboardConfig setTz(String tz) {
    this.tz = tz;
    return this;
  }

  public void unsetTz() {
    this.tz = null;
  }

  /** Returns true if field tz is set (has been assigned a value) and false otherwise */
  public boolean isSetTz() {
    return this.tz != null;
  }

  public void setTzIsSet(boolean value) {
    if (!value) {
      this.tz = null;
    }
  }

  public TimeIncrement getTimeGranularity() {
    return this.timeGranularity;
  }

  public DashboardConfig setTimeGranularity(TimeIncrement timeGranularity) {
    this.timeGranularity = timeGranularity;
    return this;
  }

  public void unsetTimeGranularity() {
    this.timeGranularity = null;
  }

  /** Returns true if field timeGranularity is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeGranularity() {
    return this.timeGranularity != null;
  }

  public void setTimeGranularityIsSet(boolean value) {
    if (!value) {
      this.timeGranularity = null;
    }
  }

  public DashboardSelection getSelect() {
    return this.select;
  }

  public DashboardConfig setSelect(DashboardSelection select) {
    this.select = select;
    return this;
  }

  public void unsetSelect() {
    this.select = null;
  }

  /** Returns true if field select is set (has been assigned a value) and false otherwise */
  public boolean isSetSelect() {
    return this.select != null;
  }

  public void setSelectIsSet(boolean value) {
    if (!value) {
      this.select = null;
    }
  }

  public int getFiltersSize() {
    return (this.filters == null) ? 0 : this.filters.size();
  }

  public java.util.Iterator<DashFilter> getFiltersIterator() {
    return (this.filters == null) ? null : this.filters.iterator();
  }

  public void addToFilters(DashFilter elem) {
    if (this.filters == null) {
      this.filters = new ArrayList<DashFilter>();
    }
    this.filters.add(elem);
  }

  public List<DashFilter> getFilters() {
    return this.filters;
  }

  public DashboardConfig setFilters(List<DashFilter> filters) {
    this.filters = filters;
    return this;
  }

  public void unsetFilters() {
    this.filters = null;
  }

  /** Returns true if field filters is set (has been assigned a value) and false otherwise */
  public boolean isSetFilters() {
    return this.filters != null;
  }

  public void setFiltersIsSet(boolean value) {
    if (!value) {
      this.filters = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TEAM_ID:
      if (value == null) {
        unsetTeamId();
      } else {
        setTeamId((String)value);
      }
      break;

    case START_TIME:
      if (value == null) {
        unsetStartTime();
      } else {
        setStartTime((Long)value);
      }
      break;

    case END_TIME:
      if (value == null) {
        unsetEndTime();
      } else {
        setEndTime((Long)value);
      }
      break;

    case STEP_TIME:
      if (value == null) {
        unsetStepTime();
      } else {
        setStepTime((Long)value);
      }
      break;

    case TZ:
      if (value == null) {
        unsetTz();
      } else {
        setTz((String)value);
      }
      break;

    case TIME_GRANULARITY:
      if (value == null) {
        unsetTimeGranularity();
      } else {
        setTimeGranularity((TimeIncrement)value);
      }
      break;

    case SELECT:
      if (value == null) {
        unsetSelect();
      } else {
        setSelect((DashboardSelection)value);
      }
      break;

    case FILTERS:
      if (value == null) {
        unsetFilters();
      } else {
        setFilters((List<DashFilter>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TEAM_ID:
      return getTeamId();

    case START_TIME:
      return getStartTime();

    case END_TIME:
      return getEndTime();

    case STEP_TIME:
      return getStepTime();

    case TZ:
      return getTz();

    case TIME_GRANULARITY:
      return getTimeGranularity();

    case SELECT:
      return getSelect();

    case FILTERS:
      return getFilters();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TEAM_ID:
      return isSetTeamId();
    case START_TIME:
      return isSetStartTime();
    case END_TIME:
      return isSetEndTime();
    case STEP_TIME:
      return isSetStepTime();
    case TZ:
      return isSetTz();
    case TIME_GRANULARITY:
      return isSetTimeGranularity();
    case SELECT:
      return isSetSelect();
    case FILTERS:
      return isSetFilters();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DashboardConfig)
      return this.equals((DashboardConfig)that);
    return false;
  }

  public boolean equals(DashboardConfig that) {
    if (that == null)
      return false;

    boolean this_present_teamId = true && this.isSetTeamId();
    boolean that_present_teamId = true && that.isSetTeamId();
    if (this_present_teamId || that_present_teamId) {
      if (!(this_present_teamId && that_present_teamId))
        return false;
      if (!this.teamId.equals(that.teamId))
        return false;
    }

    boolean this_present_startTime = true;
    boolean that_present_startTime = true;
    if (this_present_startTime || that_present_startTime) {
      if (!(this_present_startTime && that_present_startTime))
        return false;
      if (this.startTime != that.startTime)
        return false;
    }

    boolean this_present_endTime = true;
    boolean that_present_endTime = true;
    if (this_present_endTime || that_present_endTime) {
      if (!(this_present_endTime && that_present_endTime))
        return false;
      if (this.endTime != that.endTime)
        return false;
    }

    boolean this_present_stepTime = true && this.isSetStepTime();
    boolean that_present_stepTime = true && that.isSetStepTime();
    if (this_present_stepTime || that_present_stepTime) {
      if (!(this_present_stepTime && that_present_stepTime))
        return false;
      if (this.stepTime != that.stepTime)
        return false;
    }

    boolean this_present_tz = true && this.isSetTz();
    boolean that_present_tz = true && that.isSetTz();
    if (this_present_tz || that_present_tz) {
      if (!(this_present_tz && that_present_tz))
        return false;
      if (!this.tz.equals(that.tz))
        return false;
    }

    boolean this_present_timeGranularity = true && this.isSetTimeGranularity();
    boolean that_present_timeGranularity = true && that.isSetTimeGranularity();
    if (this_present_timeGranularity || that_present_timeGranularity) {
      if (!(this_present_timeGranularity && that_present_timeGranularity))
        return false;
      if (!this.timeGranularity.equals(that.timeGranularity))
        return false;
    }

    boolean this_present_select = true && this.isSetSelect();
    boolean that_present_select = true && that.isSetSelect();
    if (this_present_select || that_present_select) {
      if (!(this_present_select && that_present_select))
        return false;
      if (!this.select.equals(that.select))
        return false;
    }

    boolean this_present_filters = true && this.isSetFilters();
    boolean that_present_filters = true && that.isSetFilters();
    if (this_present_filters || that_present_filters) {
      if (!(this_present_filters && that_present_filters))
        return false;
      if (!this.filters.equals(that.filters))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_teamId = true && (isSetTeamId());
    list.add(present_teamId);
    if (present_teamId)
      list.add(teamId);

    boolean present_startTime = true;
    list.add(present_startTime);
    if (present_startTime)
      list.add(startTime);

    boolean present_endTime = true;
    list.add(present_endTime);
    if (present_endTime)
      list.add(endTime);

    boolean present_stepTime = true && (isSetStepTime());
    list.add(present_stepTime);
    if (present_stepTime)
      list.add(stepTime);

    boolean present_tz = true && (isSetTz());
    list.add(present_tz);
    if (present_tz)
      list.add(tz);

    boolean present_timeGranularity = true && (isSetTimeGranularity());
    list.add(present_timeGranularity);
    if (present_timeGranularity)
      list.add(timeGranularity);

    boolean present_select = true && (isSetSelect());
    list.add(present_select);
    if (present_select)
      list.add(select);

    boolean present_filters = true && (isSetFilters());
    list.add(present_filters);
    if (present_filters)
      list.add(filters);

    return list.hashCode();
  }

  @Override
  public int compareTo(DashboardConfig other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTeamId()).compareTo(other.isSetTeamId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeamId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teamId, other.teamId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(other.isSetEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStepTime()).compareTo(other.isSetStepTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStepTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stepTime, other.stepTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTz()).compareTo(other.isSetTz());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTz()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tz, other.tz);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimeGranularity()).compareTo(other.isSetTimeGranularity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeGranularity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeGranularity, other.timeGranularity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSelect()).compareTo(other.isSetSelect());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSelect()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.select, other.select);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFilters()).compareTo(other.isSetFilters());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFilters()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filters, other.filters);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DashboardConfig(");
    boolean first = true;

    sb.append("teamId:");
    if (this.teamId == null) {
      sb.append("null");
    } else {
      sb.append(this.teamId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("startTime:");
    sb.append(this.startTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("endTime:");
    sb.append(this.endTime);
    first = false;
    if (isSetStepTime()) {
      if (!first) sb.append(", ");
      sb.append("stepTime:");
      sb.append(this.stepTime);
      first = false;
    }
    if (isSetTz()) {
      if (!first) sb.append(", ");
      sb.append("tz:");
      if (this.tz == null) {
        sb.append("null");
      } else {
        sb.append(this.tz);
      }
      first = false;
    }
    if (isSetTimeGranularity()) {
      if (!first) sb.append(", ");
      sb.append("timeGranularity:");
      if (this.timeGranularity == null) {
        sb.append("null");
      } else {
        sb.append(this.timeGranularity);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("select:");
    if (this.select == null) {
      sb.append("null");
    } else {
      sb.append(this.select);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("filters:");
    if (this.filters == null) {
      sb.append("null");
    } else {
      sb.append(this.filters);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (timeGranularity != null) {
      timeGranularity.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DashboardConfigStandardSchemeFactory implements SchemeFactory {
    public DashboardConfigStandardScheme getScheme() {
      return new DashboardConfigStandardScheme();
    }
  }

  private static class DashboardConfigStandardScheme extends StandardScheme<DashboardConfig> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DashboardConfig struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TEAM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.teamId = iprot.readString();
              struct.setTeamIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.startTime = iprot.readI64();
              struct.setStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.endTime = iprot.readI64();
              struct.setEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // STEP_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.stepTime = iprot.readI64();
              struct.setStepTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TZ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tz = iprot.readString();
              struct.setTzIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TIME_GRANULARITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.timeGranularity = new TimeIncrement();
              struct.timeGranularity.read(iprot);
              struct.setTimeGranularityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SELECT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.select = new DashboardSelection();
              struct.select.read(iprot);
              struct.setSelectIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // FILTERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list104 = iprot.readListBegin();
                struct.filters = new ArrayList<DashFilter>(_list104.size);
                DashFilter _elem105;
                for (int _i106 = 0; _i106 < _list104.size; ++_i106)
                {
                  _elem105 = new DashFilter();
                  _elem105.read(iprot);
                  struct.filters.add(_elem105);
                }
                iprot.readListEnd();
              }
              struct.setFiltersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DashboardConfig struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.teamId != null) {
        oprot.writeFieldBegin(TEAM_ID_FIELD_DESC);
        oprot.writeString(struct.teamId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(START_TIME_FIELD_DESC);
      oprot.writeI64(struct.startTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(END_TIME_FIELD_DESC);
      oprot.writeI64(struct.endTime);
      oprot.writeFieldEnd();
      if (struct.isSetStepTime()) {
        oprot.writeFieldBegin(STEP_TIME_FIELD_DESC);
        oprot.writeI64(struct.stepTime);
        oprot.writeFieldEnd();
      }
      if (struct.tz != null) {
        if (struct.isSetTz()) {
          oprot.writeFieldBegin(TZ_FIELD_DESC);
          oprot.writeString(struct.tz);
          oprot.writeFieldEnd();
        }
      }
      if (struct.timeGranularity != null) {
        if (struct.isSetTimeGranularity()) {
          oprot.writeFieldBegin(TIME_GRANULARITY_FIELD_DESC);
          struct.timeGranularity.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.select != null) {
        oprot.writeFieldBegin(SELECT_FIELD_DESC);
        struct.select.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.filters != null) {
        oprot.writeFieldBegin(FILTERS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.filters.size()));
          for (DashFilter _iter107 : struct.filters)
          {
            _iter107.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

}

