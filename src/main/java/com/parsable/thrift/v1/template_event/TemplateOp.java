/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.parsable.thrift.v1.template_event;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
public class TemplateOp extends org.apache.thrift.TUnion<TemplateOp, TemplateOp._Fields> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TemplateOp");
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField DESCRIP_FIELD_DESC = new org.apache.thrift.protocol.TField("descrip", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField TYP_FIELD_DESC = new org.apache.thrift.protocol.TField("typ", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField TAG_UPDATE_FIELD_DESC = new org.apache.thrift.protocol.TField("tagUpdate", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField TAG_DELETE_FIELD_DESC = new org.apache.thrift.protocol.TField("tagDelete", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField CREATION_FIELD_DESC = new org.apache.thrift.protocol.TField("creation", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField ADD_STEP_FIELD_DESC = new org.apache.thrift.protocol.TField("addStep", org.apache.thrift.protocol.TType.STRUCT, (short)21);
  private static final org.apache.thrift.protocol.TField ADD_STEP_GROUP_FIELD_DESC = new org.apache.thrift.protocol.TField("addStepGroup", org.apache.thrift.protocol.TType.STRUCT, (short)22);
  private static final org.apache.thrift.protocol.TField CLONE_STEP_FIELD_DESC = new org.apache.thrift.protocol.TField("cloneStep", org.apache.thrift.protocol.TType.STRUCT, (short)23);
  private static final org.apache.thrift.protocol.TField CLONE_STEP_GROUP_FIELD_DESC = new org.apache.thrift.protocol.TField("cloneStepGroup", org.apache.thrift.protocol.TType.STRUCT, (short)24);
  private static final org.apache.thrift.protocol.TField UPDATE_STEP_GROUP_HEADERS_FIELD_DESC = new org.apache.thrift.protocol.TField("updateStepGroupHeaders", org.apache.thrift.protocol.TType.STRUCT, (short)25);
  private static final org.apache.thrift.protocol.TField ADD_DOCUMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("addDocument", org.apache.thrift.protocol.TType.STRUCT, (short)31);
  private static final org.apache.thrift.protocol.TField REMOVE_DOCUMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("removeDocument", org.apache.thrift.protocol.TType.STRUCT, (short)32);
  private static final org.apache.thrift.protocol.TField METADATA_UPDATE_FIELD_DESC = new org.apache.thrift.protocol.TField("metadataUpdate", org.apache.thrift.protocol.TType.STRUCT, (short)33);
  private static final org.apache.thrift.protocol.TField METADATA_DELETE_FIELD_DESC = new org.apache.thrift.protocol.TField("metadataDelete", org.apache.thrift.protocol.TType.STRUCT, (short)34);
  private static final org.apache.thrift.protocol.TField LOCK_FIELD_DESC = new org.apache.thrift.protocol.TField("lock", org.apache.thrift.protocol.TType.STRUCT, (short)91);
  private static final org.apache.thrift.protocol.TField UNLOCK_FIELD_DESC = new org.apache.thrift.protocol.TField("unlock", org.apache.thrift.protocol.TType.STRUCT, (short)92);
  private static final org.apache.thrift.protocol.TField REVIEW_FIELD_DESC = new org.apache.thrift.protocol.TField("review", org.apache.thrift.protocol.TType.STRUCT, (short)93);
  private static final org.apache.thrift.protocol.TField PUBLISH_FIELD_DESC = new org.apache.thrift.protocol.TField("publish", org.apache.thrift.protocol.TType.STRUCT, (short)94);
  private static final org.apache.thrift.protocol.TField ARCHIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("archive", org.apache.thrift.protocol.TType.STRUCT, (short)95);
  private static final org.apache.thrift.protocol.TField SUBSCRIBE_FIELD_DESC = new org.apache.thrift.protocol.TField("subscribe", org.apache.thrift.protocol.TType.STRUCT, (short)110);
  private static final org.apache.thrift.protocol.TField UNSUBSCRIBE_FIELD_DESC = new org.apache.thrift.protocol.TField("unsubscribe", org.apache.thrift.protocol.TType.STRUCT, (short)111);

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TITLE((short)1, "title"),
    DESCRIP((short)2, "descrip"),
    TYP((short)3, "typ"),
    TAG_UPDATE((short)5, "tagUpdate"),
    TAG_DELETE((short)6, "tagDelete"),
    CREATION((short)7, "creation"),
    ADD_STEP((short)21, "addStep"),
    ADD_STEP_GROUP((short)22, "addStepGroup"),
    CLONE_STEP((short)23, "cloneStep"),
    CLONE_STEP_GROUP((short)24, "cloneStepGroup"),
    UPDATE_STEP_GROUP_HEADERS((short)25, "updateStepGroupHeaders"),
    ADD_DOCUMENT((short)31, "addDocument"),
    REMOVE_DOCUMENT((short)32, "removeDocument"),
    METADATA_UPDATE((short)33, "metadataUpdate"),
    METADATA_DELETE((short)34, "metadataDelete"),
    LOCK((short)91, "lock"),
    UNLOCK((short)92, "unlock"),
    REVIEW((short)93, "review"),
    PUBLISH((short)94, "publish"),
    ARCHIVE((short)95, "archive"),
    SUBSCRIBE((short)110, "subscribe"),
    UNSUBSCRIBE((short)111, "unsubscribe");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TITLE
          return TITLE;
        case 2: // DESCRIP
          return DESCRIP;
        case 3: // TYP
          return TYP;
        case 5: // TAG_UPDATE
          return TAG_UPDATE;
        case 6: // TAG_DELETE
          return TAG_DELETE;
        case 7: // CREATION
          return CREATION;
        case 21: // ADD_STEP
          return ADD_STEP;
        case 22: // ADD_STEP_GROUP
          return ADD_STEP_GROUP;
        case 23: // CLONE_STEP
          return CLONE_STEP;
        case 24: // CLONE_STEP_GROUP
          return CLONE_STEP_GROUP;
        case 25: // UPDATE_STEP_GROUP_HEADERS
          return UPDATE_STEP_GROUP_HEADERS;
        case 31: // ADD_DOCUMENT
          return ADD_DOCUMENT;
        case 32: // REMOVE_DOCUMENT
          return REMOVE_DOCUMENT;
        case 33: // METADATA_UPDATE
          return METADATA_UPDATE;
        case 34: // METADATA_DELETE
          return METADATA_DELETE;
        case 91: // LOCK
          return LOCK;
        case 92: // UNLOCK
          return UNLOCK;
        case 93: // REVIEW
          return REVIEW;
        case 94: // PUBLISH
          return PUBLISH;
        case 95: // ARCHIVE
          return ARCHIVE;
        case 110: // SUBSCRIBE
          return SUBSCRIBE;
        case 111: // UNSUBSCRIBE
          return UNSUBSCRIBE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.parsable.thrift.v1.common_event.TitleProperty.class)));
    tmpMap.put(_Fields.DESCRIP, new org.apache.thrift.meta_data.FieldMetaData("descrip", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DescripProperty.class)));
    tmpMap.put(_Fields.TYP, new org.apache.thrift.meta_data.FieldMetaData("typ", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TypeProperty.class)));
    tmpMap.put(_Fields.TAG_UPDATE, new org.apache.thrift.meta_data.FieldMetaData("tagUpdate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TagUpdateOp.class)));
    tmpMap.put(_Fields.TAG_DELETE, new org.apache.thrift.meta_data.FieldMetaData("tagDelete", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TagDeleteOp.class)));
    tmpMap.put(_Fields.CREATION, new org.apache.thrift.meta_data.FieldMetaData("creation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CreateTemplateOp.class)));
    tmpMap.put(_Fields.ADD_STEP, new org.apache.thrift.meta_data.FieldMetaData("addStep", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.parsable.thrift.v1.common_event.AddStepOp.class)));
    tmpMap.put(_Fields.ADD_STEP_GROUP, new org.apache.thrift.meta_data.FieldMetaData("addStepGroup", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.parsable.thrift.v1.common_event.AddStepGroupOp.class)));
    tmpMap.put(_Fields.CLONE_STEP, new org.apache.thrift.meta_data.FieldMetaData("cloneStep", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.parsable.thrift.v1.common_event.CloneStepOp.class)));
    tmpMap.put(_Fields.CLONE_STEP_GROUP, new org.apache.thrift.meta_data.FieldMetaData("cloneStepGroup", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.parsable.thrift.v1.common_event.CloneStepGroupOp.class)));
    tmpMap.put(_Fields.UPDATE_STEP_GROUP_HEADERS, new org.apache.thrift.meta_data.FieldMetaData("updateStepGroupHeaders", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UpdateStepGroupHeadersOp.class)));
    tmpMap.put(_Fields.ADD_DOCUMENT, new org.apache.thrift.meta_data.FieldMetaData("addDocument", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.parsable.thrift.v1.common_event.AddDocumentOp.class)));
    tmpMap.put(_Fields.REMOVE_DOCUMENT, new org.apache.thrift.meta_data.FieldMetaData("removeDocument", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.parsable.thrift.v1.common_event.RemoveDocumentOp.class)));
    tmpMap.put(_Fields.METADATA_UPDATE, new org.apache.thrift.meta_data.FieldMetaData("metadataUpdate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.parsable.thrift.v1.common_event.MetadataUpdateOp.class)));
    tmpMap.put(_Fields.METADATA_DELETE, new org.apache.thrift.meta_data.FieldMetaData("metadataDelete", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.parsable.thrift.v1.common_event.MetadataDeleteOp.class)));
    tmpMap.put(_Fields.LOCK, new org.apache.thrift.meta_data.FieldMetaData("lock", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LockOp.class)));
    tmpMap.put(_Fields.UNLOCK, new org.apache.thrift.meta_data.FieldMetaData("unlock", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UnLockOp.class)));
    tmpMap.put(_Fields.REVIEW, new org.apache.thrift.meta_data.FieldMetaData("review", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReviewOp.class)));
    tmpMap.put(_Fields.PUBLISH, new org.apache.thrift.meta_data.FieldMetaData("publish", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PublishOp.class)));
    tmpMap.put(_Fields.ARCHIVE, new org.apache.thrift.meta_data.FieldMetaData("archive", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.parsable.thrift.v1.common_event.ArchiveOp.class)));
    tmpMap.put(_Fields.SUBSCRIBE, new org.apache.thrift.meta_data.FieldMetaData("subscribe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.parsable.thrift.v1.common_event.FetchAndSubscribeOp.class)));
    tmpMap.put(_Fields.UNSUBSCRIBE, new org.apache.thrift.meta_data.FieldMetaData("unsubscribe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.parsable.thrift.v1.common_event.UnsubscribeOp.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TemplateOp.class, metaDataMap);
  }

  public TemplateOp() {
    super();
  }

  public TemplateOp(_Fields setField, Object value) {
    super(setField, value);
  }

  public TemplateOp(TemplateOp other) {
    super(other);
  }
  public TemplateOp deepCopy() {
    return new TemplateOp(this);
  }

  public static TemplateOp title(com.parsable.thrift.v1.common_event.TitleProperty value) {
    TemplateOp x = new TemplateOp();
    x.setTitle(value);
    return x;
  }

  public static TemplateOp descrip(DescripProperty value) {
    TemplateOp x = new TemplateOp();
    x.setDescrip(value);
    return x;
  }

  public static TemplateOp typ(TypeProperty value) {
    TemplateOp x = new TemplateOp();
    x.setTyp(value);
    return x;
  }

  public static TemplateOp tagUpdate(TagUpdateOp value) {
    TemplateOp x = new TemplateOp();
    x.setTagUpdate(value);
    return x;
  }

  public static TemplateOp tagDelete(TagDeleteOp value) {
    TemplateOp x = new TemplateOp();
    x.setTagDelete(value);
    return x;
  }

  public static TemplateOp creation(CreateTemplateOp value) {
    TemplateOp x = new TemplateOp();
    x.setCreation(value);
    return x;
  }

  public static TemplateOp addStep(com.parsable.thrift.v1.common_event.AddStepOp value) {
    TemplateOp x = new TemplateOp();
    x.setAddStep(value);
    return x;
  }

  public static TemplateOp addStepGroup(com.parsable.thrift.v1.common_event.AddStepGroupOp value) {
    TemplateOp x = new TemplateOp();
    x.setAddStepGroup(value);
    return x;
  }

  public static TemplateOp cloneStep(com.parsable.thrift.v1.common_event.CloneStepOp value) {
    TemplateOp x = new TemplateOp();
    x.setCloneStep(value);
    return x;
  }

  public static TemplateOp cloneStepGroup(com.parsable.thrift.v1.common_event.CloneStepGroupOp value) {
    TemplateOp x = new TemplateOp();
    x.setCloneStepGroup(value);
    return x;
  }

  public static TemplateOp updateStepGroupHeaders(UpdateStepGroupHeadersOp value) {
    TemplateOp x = new TemplateOp();
    x.setUpdateStepGroupHeaders(value);
    return x;
  }

  public static TemplateOp addDocument(com.parsable.thrift.v1.common_event.AddDocumentOp value) {
    TemplateOp x = new TemplateOp();
    x.setAddDocument(value);
    return x;
  }

  public static TemplateOp removeDocument(com.parsable.thrift.v1.common_event.RemoveDocumentOp value) {
    TemplateOp x = new TemplateOp();
    x.setRemoveDocument(value);
    return x;
  }

  public static TemplateOp metadataUpdate(com.parsable.thrift.v1.common_event.MetadataUpdateOp value) {
    TemplateOp x = new TemplateOp();
    x.setMetadataUpdate(value);
    return x;
  }

  public static TemplateOp metadataDelete(com.parsable.thrift.v1.common_event.MetadataDeleteOp value) {
    TemplateOp x = new TemplateOp();
    x.setMetadataDelete(value);
    return x;
  }

  public static TemplateOp lock(LockOp value) {
    TemplateOp x = new TemplateOp();
    x.setLock(value);
    return x;
  }

  public static TemplateOp unlock(UnLockOp value) {
    TemplateOp x = new TemplateOp();
    x.setUnlock(value);
    return x;
  }

  public static TemplateOp review(ReviewOp value) {
    TemplateOp x = new TemplateOp();
    x.setReview(value);
    return x;
  }

  public static TemplateOp publish(PublishOp value) {
    TemplateOp x = new TemplateOp();
    x.setPublish(value);
    return x;
  }

  public static TemplateOp archive(com.parsable.thrift.v1.common_event.ArchiveOp value) {
    TemplateOp x = new TemplateOp();
    x.setArchive(value);
    return x;
  }

  public static TemplateOp subscribe(com.parsable.thrift.v1.common_event.FetchAndSubscribeOp value) {
    TemplateOp x = new TemplateOp();
    x.setSubscribe(value);
    return x;
  }

  public static TemplateOp unsubscribe(com.parsable.thrift.v1.common_event.UnsubscribeOp value) {
    TemplateOp x = new TemplateOp();
    x.setUnsubscribe(value);
    return x;
  }


  @Override
  protected void checkType(_Fields setField, Object value) throws ClassCastException {
    switch (setField) {
      case TITLE:
        if (value instanceof com.parsable.thrift.v1.common_event.TitleProperty) {
          break;
        }
        throw new ClassCastException("Was expecting value of type com.parsable.thrift.v1.common_event.TitleProperty for field 'title', but got " + value.getClass().getSimpleName());
      case DESCRIP:
        if (value instanceof DescripProperty) {
          break;
        }
        throw new ClassCastException("Was expecting value of type DescripProperty for field 'descrip', but got " + value.getClass().getSimpleName());
      case TYP:
        if (value instanceof TypeProperty) {
          break;
        }
        throw new ClassCastException("Was expecting value of type TypeProperty for field 'typ', but got " + value.getClass().getSimpleName());
      case TAG_UPDATE:
        if (value instanceof TagUpdateOp) {
          break;
        }
        throw new ClassCastException("Was expecting value of type TagUpdateOp for field 'tagUpdate', but got " + value.getClass().getSimpleName());
      case TAG_DELETE:
        if (value instanceof TagDeleteOp) {
          break;
        }
        throw new ClassCastException("Was expecting value of type TagDeleteOp for field 'tagDelete', but got " + value.getClass().getSimpleName());
      case CREATION:
        if (value instanceof CreateTemplateOp) {
          break;
        }
        throw new ClassCastException("Was expecting value of type CreateTemplateOp for field 'creation', but got " + value.getClass().getSimpleName());
      case ADD_STEP:
        if (value instanceof com.parsable.thrift.v1.common_event.AddStepOp) {
          break;
        }
        throw new ClassCastException("Was expecting value of type com.parsable.thrift.v1.common_event.AddStepOp for field 'addStep', but got " + value.getClass().getSimpleName());
      case ADD_STEP_GROUP:
        if (value instanceof com.parsable.thrift.v1.common_event.AddStepGroupOp) {
          break;
        }
        throw new ClassCastException("Was expecting value of type com.parsable.thrift.v1.common_event.AddStepGroupOp for field 'addStepGroup', but got " + value.getClass().getSimpleName());
      case CLONE_STEP:
        if (value instanceof com.parsable.thrift.v1.common_event.CloneStepOp) {
          break;
        }
        throw new ClassCastException("Was expecting value of type com.parsable.thrift.v1.common_event.CloneStepOp for field 'cloneStep', but got " + value.getClass().getSimpleName());
      case CLONE_STEP_GROUP:
        if (value instanceof com.parsable.thrift.v1.common_event.CloneStepGroupOp) {
          break;
        }
        throw new ClassCastException("Was expecting value of type com.parsable.thrift.v1.common_event.CloneStepGroupOp for field 'cloneStepGroup', but got " + value.getClass().getSimpleName());
      case UPDATE_STEP_GROUP_HEADERS:
        if (value instanceof UpdateStepGroupHeadersOp) {
          break;
        }
        throw new ClassCastException("Was expecting value of type UpdateStepGroupHeadersOp for field 'updateStepGroupHeaders', but got " + value.getClass().getSimpleName());
      case ADD_DOCUMENT:
        if (value instanceof com.parsable.thrift.v1.common_event.AddDocumentOp) {
          break;
        }
        throw new ClassCastException("Was expecting value of type com.parsable.thrift.v1.common_event.AddDocumentOp for field 'addDocument', but got " + value.getClass().getSimpleName());
      case REMOVE_DOCUMENT:
        if (value instanceof com.parsable.thrift.v1.common_event.RemoveDocumentOp) {
          break;
        }
        throw new ClassCastException("Was expecting value of type com.parsable.thrift.v1.common_event.RemoveDocumentOp for field 'removeDocument', but got " + value.getClass().getSimpleName());
      case METADATA_UPDATE:
        if (value instanceof com.parsable.thrift.v1.common_event.MetadataUpdateOp) {
          break;
        }
        throw new ClassCastException("Was expecting value of type com.parsable.thrift.v1.common_event.MetadataUpdateOp for field 'metadataUpdate', but got " + value.getClass().getSimpleName());
      case METADATA_DELETE:
        if (value instanceof com.parsable.thrift.v1.common_event.MetadataDeleteOp) {
          break;
        }
        throw new ClassCastException("Was expecting value of type com.parsable.thrift.v1.common_event.MetadataDeleteOp for field 'metadataDelete', but got " + value.getClass().getSimpleName());
      case LOCK:
        if (value instanceof LockOp) {
          break;
        }
        throw new ClassCastException("Was expecting value of type LockOp for field 'lock', but got " + value.getClass().getSimpleName());
      case UNLOCK:
        if (value instanceof UnLockOp) {
          break;
        }
        throw new ClassCastException("Was expecting value of type UnLockOp for field 'unlock', but got " + value.getClass().getSimpleName());
      case REVIEW:
        if (value instanceof ReviewOp) {
          break;
        }
        throw new ClassCastException("Was expecting value of type ReviewOp for field 'review', but got " + value.getClass().getSimpleName());
      case PUBLISH:
        if (value instanceof PublishOp) {
          break;
        }
        throw new ClassCastException("Was expecting value of type PublishOp for field 'publish', but got " + value.getClass().getSimpleName());
      case ARCHIVE:
        if (value instanceof com.parsable.thrift.v1.common_event.ArchiveOp) {
          break;
        }
        throw new ClassCastException("Was expecting value of type com.parsable.thrift.v1.common_event.ArchiveOp for field 'archive', but got " + value.getClass().getSimpleName());
      case SUBSCRIBE:
        if (value instanceof com.parsable.thrift.v1.common_event.FetchAndSubscribeOp) {
          break;
        }
        throw new ClassCastException("Was expecting value of type com.parsable.thrift.v1.common_event.FetchAndSubscribeOp for field 'subscribe', but got " + value.getClass().getSimpleName());
      case UNSUBSCRIBE:
        if (value instanceof com.parsable.thrift.v1.common_event.UnsubscribeOp) {
          break;
        }
        throw new ClassCastException("Was expecting value of type com.parsable.thrift.v1.common_event.UnsubscribeOp for field 'unsubscribe', but got " + value.getClass().getSimpleName());
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected Object standardSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TField field) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(field.id);
    if (setField != null) {
      switch (setField) {
        case TITLE:
          if (field.type == TITLE_FIELD_DESC.type) {
            com.parsable.thrift.v1.common_event.TitleProperty title;
            title = new com.parsable.thrift.v1.common_event.TitleProperty();
            title.read(iprot);
            return title;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case DESCRIP:
          if (field.type == DESCRIP_FIELD_DESC.type) {
            DescripProperty descrip;
            descrip = new DescripProperty();
            descrip.read(iprot);
            return descrip;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case TYP:
          if (field.type == TYP_FIELD_DESC.type) {
            TypeProperty typ;
            typ = new TypeProperty();
            typ.read(iprot);
            return typ;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case TAG_UPDATE:
          if (field.type == TAG_UPDATE_FIELD_DESC.type) {
            TagUpdateOp tagUpdate;
            tagUpdate = new TagUpdateOp();
            tagUpdate.read(iprot);
            return tagUpdate;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case TAG_DELETE:
          if (field.type == TAG_DELETE_FIELD_DESC.type) {
            TagDeleteOp tagDelete;
            tagDelete = new TagDeleteOp();
            tagDelete.read(iprot);
            return tagDelete;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case CREATION:
          if (field.type == CREATION_FIELD_DESC.type) {
            CreateTemplateOp creation;
            creation = new CreateTemplateOp();
            creation.read(iprot);
            return creation;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case ADD_STEP:
          if (field.type == ADD_STEP_FIELD_DESC.type) {
            com.parsable.thrift.v1.common_event.AddStepOp addStep;
            addStep = new com.parsable.thrift.v1.common_event.AddStepOp();
            addStep.read(iprot);
            return addStep;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case ADD_STEP_GROUP:
          if (field.type == ADD_STEP_GROUP_FIELD_DESC.type) {
            com.parsable.thrift.v1.common_event.AddStepGroupOp addStepGroup;
            addStepGroup = new com.parsable.thrift.v1.common_event.AddStepGroupOp();
            addStepGroup.read(iprot);
            return addStepGroup;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case CLONE_STEP:
          if (field.type == CLONE_STEP_FIELD_DESC.type) {
            com.parsable.thrift.v1.common_event.CloneStepOp cloneStep;
            cloneStep = new com.parsable.thrift.v1.common_event.CloneStepOp();
            cloneStep.read(iprot);
            return cloneStep;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case CLONE_STEP_GROUP:
          if (field.type == CLONE_STEP_GROUP_FIELD_DESC.type) {
            com.parsable.thrift.v1.common_event.CloneStepGroupOp cloneStepGroup;
            cloneStepGroup = new com.parsable.thrift.v1.common_event.CloneStepGroupOp();
            cloneStepGroup.read(iprot);
            return cloneStepGroup;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case UPDATE_STEP_GROUP_HEADERS:
          if (field.type == UPDATE_STEP_GROUP_HEADERS_FIELD_DESC.type) {
            UpdateStepGroupHeadersOp updateStepGroupHeaders;
            updateStepGroupHeaders = new UpdateStepGroupHeadersOp();
            updateStepGroupHeaders.read(iprot);
            return updateStepGroupHeaders;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case ADD_DOCUMENT:
          if (field.type == ADD_DOCUMENT_FIELD_DESC.type) {
            com.parsable.thrift.v1.common_event.AddDocumentOp addDocument;
            addDocument = new com.parsable.thrift.v1.common_event.AddDocumentOp();
            addDocument.read(iprot);
            return addDocument;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case REMOVE_DOCUMENT:
          if (field.type == REMOVE_DOCUMENT_FIELD_DESC.type) {
            com.parsable.thrift.v1.common_event.RemoveDocumentOp removeDocument;
            removeDocument = new com.parsable.thrift.v1.common_event.RemoveDocumentOp();
            removeDocument.read(iprot);
            return removeDocument;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case METADATA_UPDATE:
          if (field.type == METADATA_UPDATE_FIELD_DESC.type) {
            com.parsable.thrift.v1.common_event.MetadataUpdateOp metadataUpdate;
            metadataUpdate = new com.parsable.thrift.v1.common_event.MetadataUpdateOp();
            metadataUpdate.read(iprot);
            return metadataUpdate;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case METADATA_DELETE:
          if (field.type == METADATA_DELETE_FIELD_DESC.type) {
            com.parsable.thrift.v1.common_event.MetadataDeleteOp metadataDelete;
            metadataDelete = new com.parsable.thrift.v1.common_event.MetadataDeleteOp();
            metadataDelete.read(iprot);
            return metadataDelete;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case LOCK:
          if (field.type == LOCK_FIELD_DESC.type) {
            LockOp lock;
            lock = new LockOp();
            lock.read(iprot);
            return lock;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case UNLOCK:
          if (field.type == UNLOCK_FIELD_DESC.type) {
            UnLockOp unlock;
            unlock = new UnLockOp();
            unlock.read(iprot);
            return unlock;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case REVIEW:
          if (field.type == REVIEW_FIELD_DESC.type) {
            ReviewOp review;
            review = new ReviewOp();
            review.read(iprot);
            return review;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case PUBLISH:
          if (field.type == PUBLISH_FIELD_DESC.type) {
            PublishOp publish;
            publish = new PublishOp();
            publish.read(iprot);
            return publish;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case ARCHIVE:
          if (field.type == ARCHIVE_FIELD_DESC.type) {
            com.parsable.thrift.v1.common_event.ArchiveOp archive;
            archive = new com.parsable.thrift.v1.common_event.ArchiveOp();
            archive.read(iprot);
            return archive;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case SUBSCRIBE:
          if (field.type == SUBSCRIBE_FIELD_DESC.type) {
            com.parsable.thrift.v1.common_event.FetchAndSubscribeOp subscribe;
            subscribe = new com.parsable.thrift.v1.common_event.FetchAndSubscribeOp();
            subscribe.read(iprot);
            return subscribe;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case UNSUBSCRIBE:
          if (field.type == UNSUBSCRIBE_FIELD_DESC.type) {
            com.parsable.thrift.v1.common_event.UnsubscribeOp unsubscribe;
            unsubscribe = new com.parsable.thrift.v1.common_event.UnsubscribeOp();
            unsubscribe.read(iprot);
            return unsubscribe;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      return null;
    }
  }

  @Override
  protected void standardSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case TITLE:
        com.parsable.thrift.v1.common_event.TitleProperty title = (com.parsable.thrift.v1.common_event.TitleProperty)value_;
        title.write(oprot);
        return;
      case DESCRIP:
        DescripProperty descrip = (DescripProperty)value_;
        descrip.write(oprot);
        return;
      case TYP:
        TypeProperty typ = (TypeProperty)value_;
        typ.write(oprot);
        return;
      case TAG_UPDATE:
        TagUpdateOp tagUpdate = (TagUpdateOp)value_;
        tagUpdate.write(oprot);
        return;
      case TAG_DELETE:
        TagDeleteOp tagDelete = (TagDeleteOp)value_;
        tagDelete.write(oprot);
        return;
      case CREATION:
        CreateTemplateOp creation = (CreateTemplateOp)value_;
        creation.write(oprot);
        return;
      case ADD_STEP:
        com.parsable.thrift.v1.common_event.AddStepOp addStep = (com.parsable.thrift.v1.common_event.AddStepOp)value_;
        addStep.write(oprot);
        return;
      case ADD_STEP_GROUP:
        com.parsable.thrift.v1.common_event.AddStepGroupOp addStepGroup = (com.parsable.thrift.v1.common_event.AddStepGroupOp)value_;
        addStepGroup.write(oprot);
        return;
      case CLONE_STEP:
        com.parsable.thrift.v1.common_event.CloneStepOp cloneStep = (com.parsable.thrift.v1.common_event.CloneStepOp)value_;
        cloneStep.write(oprot);
        return;
      case CLONE_STEP_GROUP:
        com.parsable.thrift.v1.common_event.CloneStepGroupOp cloneStepGroup = (com.parsable.thrift.v1.common_event.CloneStepGroupOp)value_;
        cloneStepGroup.write(oprot);
        return;
      case UPDATE_STEP_GROUP_HEADERS:
        UpdateStepGroupHeadersOp updateStepGroupHeaders = (UpdateStepGroupHeadersOp)value_;
        updateStepGroupHeaders.write(oprot);
        return;
      case ADD_DOCUMENT:
        com.parsable.thrift.v1.common_event.AddDocumentOp addDocument = (com.parsable.thrift.v1.common_event.AddDocumentOp)value_;
        addDocument.write(oprot);
        return;
      case REMOVE_DOCUMENT:
        com.parsable.thrift.v1.common_event.RemoveDocumentOp removeDocument = (com.parsable.thrift.v1.common_event.RemoveDocumentOp)value_;
        removeDocument.write(oprot);
        return;
      case METADATA_UPDATE:
        com.parsable.thrift.v1.common_event.MetadataUpdateOp metadataUpdate = (com.parsable.thrift.v1.common_event.MetadataUpdateOp)value_;
        metadataUpdate.write(oprot);
        return;
      case METADATA_DELETE:
        com.parsable.thrift.v1.common_event.MetadataDeleteOp metadataDelete = (com.parsable.thrift.v1.common_event.MetadataDeleteOp)value_;
        metadataDelete.write(oprot);
        return;
      case LOCK:
        LockOp lock = (LockOp)value_;
        lock.write(oprot);
        return;
      case UNLOCK:
        UnLockOp unlock = (UnLockOp)value_;
        unlock.write(oprot);
        return;
      case REVIEW:
        ReviewOp review = (ReviewOp)value_;
        review.write(oprot);
        return;
      case PUBLISH:
        PublishOp publish = (PublishOp)value_;
        publish.write(oprot);
        return;
      case ARCHIVE:
        com.parsable.thrift.v1.common_event.ArchiveOp archive = (com.parsable.thrift.v1.common_event.ArchiveOp)value_;
        archive.write(oprot);
        return;
      case SUBSCRIBE:
        com.parsable.thrift.v1.common_event.FetchAndSubscribeOp subscribe = (com.parsable.thrift.v1.common_event.FetchAndSubscribeOp)value_;
        subscribe.write(oprot);
        return;
      case UNSUBSCRIBE:
        com.parsable.thrift.v1.common_event.UnsubscribeOp unsubscribe = (com.parsable.thrift.v1.common_event.UnsubscribeOp)value_;
        unsubscribe.write(oprot);
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected Object tupleSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, short fieldID) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(fieldID);
    if (setField != null) {
      switch (setField) {
        case TITLE:
          com.parsable.thrift.v1.common_event.TitleProperty title;
          title = new com.parsable.thrift.v1.common_event.TitleProperty();
          title.read(iprot);
          return title;
        case DESCRIP:
          DescripProperty descrip;
          descrip = new DescripProperty();
          descrip.read(iprot);
          return descrip;
        case TYP:
          TypeProperty typ;
          typ = new TypeProperty();
          typ.read(iprot);
          return typ;
        case TAG_UPDATE:
          TagUpdateOp tagUpdate;
          tagUpdate = new TagUpdateOp();
          tagUpdate.read(iprot);
          return tagUpdate;
        case TAG_DELETE:
          TagDeleteOp tagDelete;
          tagDelete = new TagDeleteOp();
          tagDelete.read(iprot);
          return tagDelete;
        case CREATION:
          CreateTemplateOp creation;
          creation = new CreateTemplateOp();
          creation.read(iprot);
          return creation;
        case ADD_STEP:
          com.parsable.thrift.v1.common_event.AddStepOp addStep;
          addStep = new com.parsable.thrift.v1.common_event.AddStepOp();
          addStep.read(iprot);
          return addStep;
        case ADD_STEP_GROUP:
          com.parsable.thrift.v1.common_event.AddStepGroupOp addStepGroup;
          addStepGroup = new com.parsable.thrift.v1.common_event.AddStepGroupOp();
          addStepGroup.read(iprot);
          return addStepGroup;
        case CLONE_STEP:
          com.parsable.thrift.v1.common_event.CloneStepOp cloneStep;
          cloneStep = new com.parsable.thrift.v1.common_event.CloneStepOp();
          cloneStep.read(iprot);
          return cloneStep;
        case CLONE_STEP_GROUP:
          com.parsable.thrift.v1.common_event.CloneStepGroupOp cloneStepGroup;
          cloneStepGroup = new com.parsable.thrift.v1.common_event.CloneStepGroupOp();
          cloneStepGroup.read(iprot);
          return cloneStepGroup;
        case UPDATE_STEP_GROUP_HEADERS:
          UpdateStepGroupHeadersOp updateStepGroupHeaders;
          updateStepGroupHeaders = new UpdateStepGroupHeadersOp();
          updateStepGroupHeaders.read(iprot);
          return updateStepGroupHeaders;
        case ADD_DOCUMENT:
          com.parsable.thrift.v1.common_event.AddDocumentOp addDocument;
          addDocument = new com.parsable.thrift.v1.common_event.AddDocumentOp();
          addDocument.read(iprot);
          return addDocument;
        case REMOVE_DOCUMENT:
          com.parsable.thrift.v1.common_event.RemoveDocumentOp removeDocument;
          removeDocument = new com.parsable.thrift.v1.common_event.RemoveDocumentOp();
          removeDocument.read(iprot);
          return removeDocument;
        case METADATA_UPDATE:
          com.parsable.thrift.v1.common_event.MetadataUpdateOp metadataUpdate;
          metadataUpdate = new com.parsable.thrift.v1.common_event.MetadataUpdateOp();
          metadataUpdate.read(iprot);
          return metadataUpdate;
        case METADATA_DELETE:
          com.parsable.thrift.v1.common_event.MetadataDeleteOp metadataDelete;
          metadataDelete = new com.parsable.thrift.v1.common_event.MetadataDeleteOp();
          metadataDelete.read(iprot);
          return metadataDelete;
        case LOCK:
          LockOp lock;
          lock = new LockOp();
          lock.read(iprot);
          return lock;
        case UNLOCK:
          UnLockOp unlock;
          unlock = new UnLockOp();
          unlock.read(iprot);
          return unlock;
        case REVIEW:
          ReviewOp review;
          review = new ReviewOp();
          review.read(iprot);
          return review;
        case PUBLISH:
          PublishOp publish;
          publish = new PublishOp();
          publish.read(iprot);
          return publish;
        case ARCHIVE:
          com.parsable.thrift.v1.common_event.ArchiveOp archive;
          archive = new com.parsable.thrift.v1.common_event.ArchiveOp();
          archive.read(iprot);
          return archive;
        case SUBSCRIBE:
          com.parsable.thrift.v1.common_event.FetchAndSubscribeOp subscribe;
          subscribe = new com.parsable.thrift.v1.common_event.FetchAndSubscribeOp();
          subscribe.read(iprot);
          return subscribe;
        case UNSUBSCRIBE:
          com.parsable.thrift.v1.common_event.UnsubscribeOp unsubscribe;
          unsubscribe = new com.parsable.thrift.v1.common_event.UnsubscribeOp();
          unsubscribe.read(iprot);
          return unsubscribe;
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      throw new TProtocolException("Couldn't find a field with field id " + fieldID);
    }
  }

  @Override
  protected void tupleSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case TITLE:
        com.parsable.thrift.v1.common_event.TitleProperty title = (com.parsable.thrift.v1.common_event.TitleProperty)value_;
        title.write(oprot);
        return;
      case DESCRIP:
        DescripProperty descrip = (DescripProperty)value_;
        descrip.write(oprot);
        return;
      case TYP:
        TypeProperty typ = (TypeProperty)value_;
        typ.write(oprot);
        return;
      case TAG_UPDATE:
        TagUpdateOp tagUpdate = (TagUpdateOp)value_;
        tagUpdate.write(oprot);
        return;
      case TAG_DELETE:
        TagDeleteOp tagDelete = (TagDeleteOp)value_;
        tagDelete.write(oprot);
        return;
      case CREATION:
        CreateTemplateOp creation = (CreateTemplateOp)value_;
        creation.write(oprot);
        return;
      case ADD_STEP:
        com.parsable.thrift.v1.common_event.AddStepOp addStep = (com.parsable.thrift.v1.common_event.AddStepOp)value_;
        addStep.write(oprot);
        return;
      case ADD_STEP_GROUP:
        com.parsable.thrift.v1.common_event.AddStepGroupOp addStepGroup = (com.parsable.thrift.v1.common_event.AddStepGroupOp)value_;
        addStepGroup.write(oprot);
        return;
      case CLONE_STEP:
        com.parsable.thrift.v1.common_event.CloneStepOp cloneStep = (com.parsable.thrift.v1.common_event.CloneStepOp)value_;
        cloneStep.write(oprot);
        return;
      case CLONE_STEP_GROUP:
        com.parsable.thrift.v1.common_event.CloneStepGroupOp cloneStepGroup = (com.parsable.thrift.v1.common_event.CloneStepGroupOp)value_;
        cloneStepGroup.write(oprot);
        return;
      case UPDATE_STEP_GROUP_HEADERS:
        UpdateStepGroupHeadersOp updateStepGroupHeaders = (UpdateStepGroupHeadersOp)value_;
        updateStepGroupHeaders.write(oprot);
        return;
      case ADD_DOCUMENT:
        com.parsable.thrift.v1.common_event.AddDocumentOp addDocument = (com.parsable.thrift.v1.common_event.AddDocumentOp)value_;
        addDocument.write(oprot);
        return;
      case REMOVE_DOCUMENT:
        com.parsable.thrift.v1.common_event.RemoveDocumentOp removeDocument = (com.parsable.thrift.v1.common_event.RemoveDocumentOp)value_;
        removeDocument.write(oprot);
        return;
      case METADATA_UPDATE:
        com.parsable.thrift.v1.common_event.MetadataUpdateOp metadataUpdate = (com.parsable.thrift.v1.common_event.MetadataUpdateOp)value_;
        metadataUpdate.write(oprot);
        return;
      case METADATA_DELETE:
        com.parsable.thrift.v1.common_event.MetadataDeleteOp metadataDelete = (com.parsable.thrift.v1.common_event.MetadataDeleteOp)value_;
        metadataDelete.write(oprot);
        return;
      case LOCK:
        LockOp lock = (LockOp)value_;
        lock.write(oprot);
        return;
      case UNLOCK:
        UnLockOp unlock = (UnLockOp)value_;
        unlock.write(oprot);
        return;
      case REVIEW:
        ReviewOp review = (ReviewOp)value_;
        review.write(oprot);
        return;
      case PUBLISH:
        PublishOp publish = (PublishOp)value_;
        publish.write(oprot);
        return;
      case ARCHIVE:
        com.parsable.thrift.v1.common_event.ArchiveOp archive = (com.parsable.thrift.v1.common_event.ArchiveOp)value_;
        archive.write(oprot);
        return;
      case SUBSCRIBE:
        com.parsable.thrift.v1.common_event.FetchAndSubscribeOp subscribe = (com.parsable.thrift.v1.common_event.FetchAndSubscribeOp)value_;
        subscribe.write(oprot);
        return;
      case UNSUBSCRIBE:
        com.parsable.thrift.v1.common_event.UnsubscribeOp unsubscribe = (com.parsable.thrift.v1.common_event.UnsubscribeOp)value_;
        unsubscribe.write(oprot);
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TField getFieldDesc(_Fields setField) {
    switch (setField) {
      case TITLE:
        return TITLE_FIELD_DESC;
      case DESCRIP:
        return DESCRIP_FIELD_DESC;
      case TYP:
        return TYP_FIELD_DESC;
      case TAG_UPDATE:
        return TAG_UPDATE_FIELD_DESC;
      case TAG_DELETE:
        return TAG_DELETE_FIELD_DESC;
      case CREATION:
        return CREATION_FIELD_DESC;
      case ADD_STEP:
        return ADD_STEP_FIELD_DESC;
      case ADD_STEP_GROUP:
        return ADD_STEP_GROUP_FIELD_DESC;
      case CLONE_STEP:
        return CLONE_STEP_FIELD_DESC;
      case CLONE_STEP_GROUP:
        return CLONE_STEP_GROUP_FIELD_DESC;
      case UPDATE_STEP_GROUP_HEADERS:
        return UPDATE_STEP_GROUP_HEADERS_FIELD_DESC;
      case ADD_DOCUMENT:
        return ADD_DOCUMENT_FIELD_DESC;
      case REMOVE_DOCUMENT:
        return REMOVE_DOCUMENT_FIELD_DESC;
      case METADATA_UPDATE:
        return METADATA_UPDATE_FIELD_DESC;
      case METADATA_DELETE:
        return METADATA_DELETE_FIELD_DESC;
      case LOCK:
        return LOCK_FIELD_DESC;
      case UNLOCK:
        return UNLOCK_FIELD_DESC;
      case REVIEW:
        return REVIEW_FIELD_DESC;
      case PUBLISH:
        return PUBLISH_FIELD_DESC;
      case ARCHIVE:
        return ARCHIVE_FIELD_DESC;
      case SUBSCRIBE:
        return SUBSCRIBE_FIELD_DESC;
      case UNSUBSCRIBE:
        return UNSUBSCRIBE_FIELD_DESC;
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TStruct getStructDesc() {
    return STRUCT_DESC;
  }

  @Override
  protected _Fields enumForId(short id) {
    return _Fields.findByThriftIdOrThrow(id);
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public com.parsable.thrift.v1.common_event.TitleProperty getTitle() {
    if (getSetField() == _Fields.TITLE) {
      return (com.parsable.thrift.v1.common_event.TitleProperty)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'title' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setTitle(com.parsable.thrift.v1.common_event.TitleProperty value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.TITLE;
    value_ = value;
  }

  public DescripProperty getDescrip() {
    if (getSetField() == _Fields.DESCRIP) {
      return (DescripProperty)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'descrip' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setDescrip(DescripProperty value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.DESCRIP;
    value_ = value;
  }

  public TypeProperty getTyp() {
    if (getSetField() == _Fields.TYP) {
      return (TypeProperty)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'typ' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setTyp(TypeProperty value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.TYP;
    value_ = value;
  }

  public TagUpdateOp getTagUpdate() {
    if (getSetField() == _Fields.TAG_UPDATE) {
      return (TagUpdateOp)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'tagUpdate' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setTagUpdate(TagUpdateOp value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.TAG_UPDATE;
    value_ = value;
  }

  public TagDeleteOp getTagDelete() {
    if (getSetField() == _Fields.TAG_DELETE) {
      return (TagDeleteOp)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'tagDelete' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setTagDelete(TagDeleteOp value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.TAG_DELETE;
    value_ = value;
  }

  public CreateTemplateOp getCreation() {
    if (getSetField() == _Fields.CREATION) {
      return (CreateTemplateOp)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'creation' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setCreation(CreateTemplateOp value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.CREATION;
    value_ = value;
  }

  public com.parsable.thrift.v1.common_event.AddStepOp getAddStep() {
    if (getSetField() == _Fields.ADD_STEP) {
      return (com.parsable.thrift.v1.common_event.AddStepOp)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'addStep' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setAddStep(com.parsable.thrift.v1.common_event.AddStepOp value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.ADD_STEP;
    value_ = value;
  }

  public com.parsable.thrift.v1.common_event.AddStepGroupOp getAddStepGroup() {
    if (getSetField() == _Fields.ADD_STEP_GROUP) {
      return (com.parsable.thrift.v1.common_event.AddStepGroupOp)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'addStepGroup' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setAddStepGroup(com.parsable.thrift.v1.common_event.AddStepGroupOp value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.ADD_STEP_GROUP;
    value_ = value;
  }

  public com.parsable.thrift.v1.common_event.CloneStepOp getCloneStep() {
    if (getSetField() == _Fields.CLONE_STEP) {
      return (com.parsable.thrift.v1.common_event.CloneStepOp)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'cloneStep' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setCloneStep(com.parsable.thrift.v1.common_event.CloneStepOp value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.CLONE_STEP;
    value_ = value;
  }

  public com.parsable.thrift.v1.common_event.CloneStepGroupOp getCloneStepGroup() {
    if (getSetField() == _Fields.CLONE_STEP_GROUP) {
      return (com.parsable.thrift.v1.common_event.CloneStepGroupOp)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'cloneStepGroup' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setCloneStepGroup(com.parsable.thrift.v1.common_event.CloneStepGroupOp value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.CLONE_STEP_GROUP;
    value_ = value;
  }

  public UpdateStepGroupHeadersOp getUpdateStepGroupHeaders() {
    if (getSetField() == _Fields.UPDATE_STEP_GROUP_HEADERS) {
      return (UpdateStepGroupHeadersOp)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'updateStepGroupHeaders' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setUpdateStepGroupHeaders(UpdateStepGroupHeadersOp value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.UPDATE_STEP_GROUP_HEADERS;
    value_ = value;
  }

  public com.parsable.thrift.v1.common_event.AddDocumentOp getAddDocument() {
    if (getSetField() == _Fields.ADD_DOCUMENT) {
      return (com.parsable.thrift.v1.common_event.AddDocumentOp)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'addDocument' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setAddDocument(com.parsable.thrift.v1.common_event.AddDocumentOp value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.ADD_DOCUMENT;
    value_ = value;
  }

  public com.parsable.thrift.v1.common_event.RemoveDocumentOp getRemoveDocument() {
    if (getSetField() == _Fields.REMOVE_DOCUMENT) {
      return (com.parsable.thrift.v1.common_event.RemoveDocumentOp)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'removeDocument' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setRemoveDocument(com.parsable.thrift.v1.common_event.RemoveDocumentOp value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.REMOVE_DOCUMENT;
    value_ = value;
  }

  public com.parsable.thrift.v1.common_event.MetadataUpdateOp getMetadataUpdate() {
    if (getSetField() == _Fields.METADATA_UPDATE) {
      return (com.parsable.thrift.v1.common_event.MetadataUpdateOp)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'metadataUpdate' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setMetadataUpdate(com.parsable.thrift.v1.common_event.MetadataUpdateOp value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.METADATA_UPDATE;
    value_ = value;
  }

  public com.parsable.thrift.v1.common_event.MetadataDeleteOp getMetadataDelete() {
    if (getSetField() == _Fields.METADATA_DELETE) {
      return (com.parsable.thrift.v1.common_event.MetadataDeleteOp)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'metadataDelete' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setMetadataDelete(com.parsable.thrift.v1.common_event.MetadataDeleteOp value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.METADATA_DELETE;
    value_ = value;
  }

  public LockOp getLock() {
    if (getSetField() == _Fields.LOCK) {
      return (LockOp)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'lock' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setLock(LockOp value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.LOCK;
    value_ = value;
  }

  public UnLockOp getUnlock() {
    if (getSetField() == _Fields.UNLOCK) {
      return (UnLockOp)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'unlock' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setUnlock(UnLockOp value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.UNLOCK;
    value_ = value;
  }

  public ReviewOp getReview() {
    if (getSetField() == _Fields.REVIEW) {
      return (ReviewOp)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'review' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setReview(ReviewOp value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.REVIEW;
    value_ = value;
  }

  public PublishOp getPublish() {
    if (getSetField() == _Fields.PUBLISH) {
      return (PublishOp)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'publish' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setPublish(PublishOp value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.PUBLISH;
    value_ = value;
  }

  public com.parsable.thrift.v1.common_event.ArchiveOp getArchive() {
    if (getSetField() == _Fields.ARCHIVE) {
      return (com.parsable.thrift.v1.common_event.ArchiveOp)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'archive' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setArchive(com.parsable.thrift.v1.common_event.ArchiveOp value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.ARCHIVE;
    value_ = value;
  }

  public com.parsable.thrift.v1.common_event.FetchAndSubscribeOp getSubscribe() {
    if (getSetField() == _Fields.SUBSCRIBE) {
      return (com.parsable.thrift.v1.common_event.FetchAndSubscribeOp)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'subscribe' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setSubscribe(com.parsable.thrift.v1.common_event.FetchAndSubscribeOp value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.SUBSCRIBE;
    value_ = value;
  }

  public com.parsable.thrift.v1.common_event.UnsubscribeOp getUnsubscribe() {
    if (getSetField() == _Fields.UNSUBSCRIBE) {
      return (com.parsable.thrift.v1.common_event.UnsubscribeOp)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'unsubscribe' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setUnsubscribe(com.parsable.thrift.v1.common_event.UnsubscribeOp value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.UNSUBSCRIBE;
    value_ = value;
  }

  public boolean isSetTitle() {
    return setField_ == _Fields.TITLE;
  }


  public boolean isSetDescrip() {
    return setField_ == _Fields.DESCRIP;
  }


  public boolean isSetTyp() {
    return setField_ == _Fields.TYP;
  }


  public boolean isSetTagUpdate() {
    return setField_ == _Fields.TAG_UPDATE;
  }


  public boolean isSetTagDelete() {
    return setField_ == _Fields.TAG_DELETE;
  }


  public boolean isSetCreation() {
    return setField_ == _Fields.CREATION;
  }


  public boolean isSetAddStep() {
    return setField_ == _Fields.ADD_STEP;
  }


  public boolean isSetAddStepGroup() {
    return setField_ == _Fields.ADD_STEP_GROUP;
  }


  public boolean isSetCloneStep() {
    return setField_ == _Fields.CLONE_STEP;
  }


  public boolean isSetCloneStepGroup() {
    return setField_ == _Fields.CLONE_STEP_GROUP;
  }


  public boolean isSetUpdateStepGroupHeaders() {
    return setField_ == _Fields.UPDATE_STEP_GROUP_HEADERS;
  }


  public boolean isSetAddDocument() {
    return setField_ == _Fields.ADD_DOCUMENT;
  }


  public boolean isSetRemoveDocument() {
    return setField_ == _Fields.REMOVE_DOCUMENT;
  }


  public boolean isSetMetadataUpdate() {
    return setField_ == _Fields.METADATA_UPDATE;
  }


  public boolean isSetMetadataDelete() {
    return setField_ == _Fields.METADATA_DELETE;
  }


  public boolean isSetLock() {
    return setField_ == _Fields.LOCK;
  }


  public boolean isSetUnlock() {
    return setField_ == _Fields.UNLOCK;
  }


  public boolean isSetReview() {
    return setField_ == _Fields.REVIEW;
  }


  public boolean isSetPublish() {
    return setField_ == _Fields.PUBLISH;
  }


  public boolean isSetArchive() {
    return setField_ == _Fields.ARCHIVE;
  }


  public boolean isSetSubscribe() {
    return setField_ == _Fields.SUBSCRIBE;
  }


  public boolean isSetUnsubscribe() {
    return setField_ == _Fields.UNSUBSCRIBE;
  }


  public boolean equals(Object other) {
    if (other instanceof TemplateOp) {
      return equals((TemplateOp)other);
    } else {
      return false;
    }
  }

  public boolean equals(TemplateOp other) {
    return other != null && getSetField() == other.getSetField() && getFieldValue().equals(other.getFieldValue());
  }

  @Override
  public int compareTo(TemplateOp other) {
    int lastComparison = org.apache.thrift.TBaseHelper.compareTo(getSetField(), other.getSetField());
    if (lastComparison == 0) {
      return org.apache.thrift.TBaseHelper.compareTo(getFieldValue(), other.getFieldValue());
    }
    return lastComparison;
  }


  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();
    list.add(this.getClass().getName());
    org.apache.thrift.TFieldIdEnum setField = getSetField();
    if (setField != null) {
      list.add(setField.getThriftFieldId());
      Object value = getFieldValue();
      if (value instanceof org.apache.thrift.TEnum) {
        list.add(((org.apache.thrift.TEnum)getFieldValue()).getValue());
      } else {
        list.add(value);
      }
    }
    return list.hashCode();
  }
  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


}
