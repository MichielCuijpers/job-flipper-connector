/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.parsable.thrift.v1.common_event;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class AddStepOp implements org.apache.thrift.TBase<AddStepOp, AddStepOp._Fields>, java.io.Serializable, Cloneable, Comparable<AddStepOp> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AddStepOp");

  private static final org.apache.thrift.protocol.TField STEP_GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("stepGroupId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField STEP_FIELD_DESC = new org.apache.thrift.protocol.TField("step", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField POSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("position", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField REPLACE_FIELD_DESC = new org.apache.thrift.protocol.TField("replace", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField ADDED_AFTER_FIELD_DESC = new org.apache.thrift.protocol.TField("addedAfter", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AddStepOpStandardSchemeFactory());
  }

  public String stepGroupId; // required
  public com.wi.director.thrift.v1.step.BaseStep step; // required
  public int position; // required
  public boolean replace; // required
  public String addedAfter; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STEP_GROUP_ID((short)1, "stepGroupId"),
    STEP((short)2, "step"),
    POSITION((short)3, "position"),
    REPLACE((short)4, "replace"),
    ADDED_AFTER((short)5, "addedAfter");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STEP_GROUP_ID
          return STEP_GROUP_ID;
        case 2: // STEP
          return STEP;
        case 3: // POSITION
          return POSITION;
        case 4: // REPLACE
          return REPLACE;
        case 5: // ADDED_AFTER
          return ADDED_AFTER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __POSITION_ISSET_ID = 0;
  private static final int __REPLACE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ADDED_AFTER};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STEP_GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("stepGroupId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "UUID")));
    tmpMap.put(_Fields.STEP, new org.apache.thrift.meta_data.FieldMetaData("step", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.step.BaseStep.class)));
    tmpMap.put(_Fields.POSITION, new org.apache.thrift.meta_data.FieldMetaData("position", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REPLACE, new org.apache.thrift.meta_data.FieldMetaData("replace", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ADDED_AFTER, new org.apache.thrift.meta_data.FieldMetaData("addedAfter", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "UUID")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AddStepOp.class, metaDataMap);
  }

  public AddStepOp() {
    this.position = -1;

    this.replace = false;

  }

  public AddStepOp(
    String stepGroupId,
    com.wi.director.thrift.v1.step.BaseStep step,
    int position,
    boolean replace)
  {
    this();
    this.stepGroupId = stepGroupId;
    this.step = step;
    this.position = position;
    setPositionIsSet(true);
    this.replace = replace;
    setReplaceIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AddStepOp(AddStepOp other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetStepGroupId()) {
      this.stepGroupId = other.stepGroupId;
    }
    if (other.isSetStep()) {
      this.step = new com.wi.director.thrift.v1.step.BaseStep(other.step);
    }
    this.position = other.position;
    this.replace = other.replace;
    if (other.isSetAddedAfter()) {
      this.addedAfter = other.addedAfter;
    }
  }

  public AddStepOp deepCopy() {
    return new AddStepOp(this);
  }

  @Override
  public void clear() {
    this.stepGroupId = null;
    this.step = null;
    this.position = -1;

    this.replace = false;

    this.addedAfter = null;
  }

  public String getStepGroupId() {
    return this.stepGroupId;
  }

  public AddStepOp setStepGroupId(String stepGroupId) {
    this.stepGroupId = stepGroupId;
    return this;
  }

  public void unsetStepGroupId() {
    this.stepGroupId = null;
  }

  /** Returns true if field stepGroupId is set (has been assigned a value) and false otherwise */
  public boolean isSetStepGroupId() {
    return this.stepGroupId != null;
  }

  public void setStepGroupIdIsSet(boolean value) {
    if (!value) {
      this.stepGroupId = null;
    }
  }

  public com.wi.director.thrift.v1.step.BaseStep getStep() {
    return this.step;
  }

  public AddStepOp setStep(com.wi.director.thrift.v1.step.BaseStep step) {
    this.step = step;
    return this;
  }

  public void unsetStep() {
    this.step = null;
  }

  /** Returns true if field step is set (has been assigned a value) and false otherwise */
  public boolean isSetStep() {
    return this.step != null;
  }

  public void setStepIsSet(boolean value) {
    if (!value) {
      this.step = null;
    }
  }

  public int getPosition() {
    return this.position;
  }

  public AddStepOp setPosition(int position) {
    this.position = position;
    setPositionIsSet(true);
    return this;
  }

  public void unsetPosition() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POSITION_ISSET_ID);
  }

  /** Returns true if field position is set (has been assigned a value) and false otherwise */
  public boolean isSetPosition() {
    return EncodingUtils.testBit(__isset_bitfield, __POSITION_ISSET_ID);
  }

  public void setPositionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POSITION_ISSET_ID, value);
  }

  public boolean isReplace() {
    return this.replace;
  }

  public AddStepOp setReplace(boolean replace) {
    this.replace = replace;
    setReplaceIsSet(true);
    return this;
  }

  public void unsetReplace() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPLACE_ISSET_ID);
  }

  /** Returns true if field replace is set (has been assigned a value) and false otherwise */
  public boolean isSetReplace() {
    return EncodingUtils.testBit(__isset_bitfield, __REPLACE_ISSET_ID);
  }

  public void setReplaceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPLACE_ISSET_ID, value);
  }

  public String getAddedAfter() {
    return this.addedAfter;
  }

  public AddStepOp setAddedAfter(String addedAfter) {
    this.addedAfter = addedAfter;
    return this;
  }

  public void unsetAddedAfter() {
    this.addedAfter = null;
  }

  /** Returns true if field addedAfter is set (has been assigned a value) and false otherwise */
  public boolean isSetAddedAfter() {
    return this.addedAfter != null;
  }

  public void setAddedAfterIsSet(boolean value) {
    if (!value) {
      this.addedAfter = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STEP_GROUP_ID:
      if (value == null) {
        unsetStepGroupId();
      } else {
        setStepGroupId((String)value);
      }
      break;

    case STEP:
      if (value == null) {
        unsetStep();
      } else {
        setStep((com.wi.director.thrift.v1.step.BaseStep)value);
      }
      break;

    case POSITION:
      if (value == null) {
        unsetPosition();
      } else {
        setPosition((Integer)value);
      }
      break;

    case REPLACE:
      if (value == null) {
        unsetReplace();
      } else {
        setReplace((Boolean)value);
      }
      break;

    case ADDED_AFTER:
      if (value == null) {
        unsetAddedAfter();
      } else {
        setAddedAfter((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STEP_GROUP_ID:
      return getStepGroupId();

    case STEP:
      return getStep();

    case POSITION:
      return getPosition();

    case REPLACE:
      return isReplace();

    case ADDED_AFTER:
      return getAddedAfter();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STEP_GROUP_ID:
      return isSetStepGroupId();
    case STEP:
      return isSetStep();
    case POSITION:
      return isSetPosition();
    case REPLACE:
      return isSetReplace();
    case ADDED_AFTER:
      return isSetAddedAfter();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AddStepOp)
      return this.equals((AddStepOp)that);
    return false;
  }

  public boolean equals(AddStepOp that) {
    if (that == null)
      return false;

    boolean this_present_stepGroupId = true && this.isSetStepGroupId();
    boolean that_present_stepGroupId = true && that.isSetStepGroupId();
    if (this_present_stepGroupId || that_present_stepGroupId) {
      if (!(this_present_stepGroupId && that_present_stepGroupId))
        return false;
      if (!this.stepGroupId.equals(that.stepGroupId))
        return false;
    }

    boolean this_present_step = true && this.isSetStep();
    boolean that_present_step = true && that.isSetStep();
    if (this_present_step || that_present_step) {
      if (!(this_present_step && that_present_step))
        return false;
      if (!this.step.equals(that.step))
        return false;
    }

    boolean this_present_position = true;
    boolean that_present_position = true;
    if (this_present_position || that_present_position) {
      if (!(this_present_position && that_present_position))
        return false;
      if (this.position != that.position)
        return false;
    }

    boolean this_present_replace = true;
    boolean that_present_replace = true;
    if (this_present_replace || that_present_replace) {
      if (!(this_present_replace && that_present_replace))
        return false;
      if (this.replace != that.replace)
        return false;
    }

    boolean this_present_addedAfter = true && this.isSetAddedAfter();
    boolean that_present_addedAfter = true && that.isSetAddedAfter();
    if (this_present_addedAfter || that_present_addedAfter) {
      if (!(this_present_addedAfter && that_present_addedAfter))
        return false;
      if (!this.addedAfter.equals(that.addedAfter))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_stepGroupId = true && (isSetStepGroupId());
    list.add(present_stepGroupId);
    if (present_stepGroupId)
      list.add(stepGroupId);

    boolean present_step = true && (isSetStep());
    list.add(present_step);
    if (present_step)
      list.add(step);

    boolean present_position = true;
    list.add(present_position);
    if (present_position)
      list.add(position);

    boolean present_replace = true;
    list.add(present_replace);
    if (present_replace)
      list.add(replace);

    boolean present_addedAfter = true && (isSetAddedAfter());
    list.add(present_addedAfter);
    if (present_addedAfter)
      list.add(addedAfter);

    return list.hashCode();
  }

  @Override
  public int compareTo(AddStepOp other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetStepGroupId()).compareTo(other.isSetStepGroupId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStepGroupId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stepGroupId, other.stepGroupId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStep()).compareTo(other.isSetStep());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStep()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.step, other.step);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPosition()).compareTo(other.isSetPosition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPosition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.position, other.position);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReplace()).compareTo(other.isSetReplace());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReplace()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.replace, other.replace);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAddedAfter()).compareTo(other.isSetAddedAfter());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddedAfter()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.addedAfter, other.addedAfter);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AddStepOp(");
    boolean first = true;

    sb.append("stepGroupId:");
    if (this.stepGroupId == null) {
      sb.append("null");
    } else {
      sb.append(this.stepGroupId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("step:");
    if (this.step == null) {
      sb.append("null");
    } else {
      sb.append(this.step);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("position:");
    sb.append(this.position);
    first = false;
    if (!first) sb.append(", ");
    sb.append("replace:");
    sb.append(this.replace);
    first = false;
    if (isSetAddedAfter()) {
      if (!first) sb.append(", ");
      sb.append("addedAfter:");
      if (this.addedAfter == null) {
        sb.append("null");
      } else {
        sb.append(this.addedAfter);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (stepGroupId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'stepGroupId' was not present! Struct: " + toString());
    }
    if (step == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'step' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'position' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'replace' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
    if (step != null) {
      step.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AddStepOpStandardSchemeFactory implements SchemeFactory {
    public AddStepOpStandardScheme getScheme() {
      return new AddStepOpStandardScheme();
    }
  }

  private static class AddStepOpStandardScheme extends StandardScheme<AddStepOp> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AddStepOp struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STEP_GROUP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stepGroupId = iprot.readString();
              struct.setStepGroupIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STEP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.step = new com.wi.director.thrift.v1.step.BaseStep();
              struct.step.read(iprot);
              struct.setStepIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // POSITION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.position = iprot.readI32();
              struct.setPositionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // REPLACE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.replace = iprot.readBool();
              struct.setReplaceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ADDED_AFTER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.addedAfter = iprot.readString();
              struct.setAddedAfterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetPosition()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'position' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetReplace()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'replace' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AddStepOp struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.stepGroupId != null) {
        oprot.writeFieldBegin(STEP_GROUP_ID_FIELD_DESC);
        oprot.writeString(struct.stepGroupId);
        oprot.writeFieldEnd();
      }
      if (struct.step != null) {
        oprot.writeFieldBegin(STEP_FIELD_DESC);
        struct.step.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(POSITION_FIELD_DESC);
      oprot.writeI32(struct.position);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REPLACE_FIELD_DESC);
      oprot.writeBool(struct.replace);
      oprot.writeFieldEnd();
      if (struct.addedAfter != null) {
        if (struct.isSetAddedAfter()) {
          oprot.writeFieldBegin(ADDED_AFTER_FIELD_DESC);
          oprot.writeString(struct.addedAfter);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

}

