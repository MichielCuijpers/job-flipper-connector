/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.parsable.thrift.v1.formula;


import java.util.Map;
import java.util.HashMap;
import org.apache.thrift.TEnum;

/**
 * Operator Notation defines an operator's lexical classification; often just referred to as a "type" of
 * operator.
 */
public enum OpNotation implements org.apache.thrift.TEnum {
  /**
   * no operator for this function; it must be written as a function call eg SUM(x, y, z)
   */
  None(0),
  /**
   * the operator appears between two operands; eg X + Y
   */
  Infix(1),
  /**
   * the operator appears before a single operand; eg -X
   */
  Prefix(2),
  /**
   * the operator appears after its operand; eg XÂ²
   */
  Postfix(3),
  /**
   * the operator groups an expression; eg the parens in (X + Y) * 2
   */
  Grouping(4),
  /**
   * the operator follows a term (presently symbols/function names only) and encloses another term
   */
  Postcircumfix(5),
  /**
   * the operator is used to separate arguments in a list
   */
  Separator(6);

  private final int value;

  private OpNotation(int value) {
    this.value = value;
  }

  /**
   * Get the integer value of this enum value, as defined in the Thrift IDL.
   */
  public int getValue() {
    return value;
  }

  /**
   * Find a the enum type by its integer value, as defined in the Thrift IDL.
   * @return null if the value is not found.
   */
  public static OpNotation findByValue(int value) { 
    switch (value) {
      case 0:
        return None;
      case 1:
        return Infix;
      case 2:
        return Prefix;
      case 3:
        return Postfix;
      case 4:
        return Grouping;
      case 5:
        return Postcircumfix;
      case 6:
        return Separator;
      default:
        return null;
    }
  }
}
