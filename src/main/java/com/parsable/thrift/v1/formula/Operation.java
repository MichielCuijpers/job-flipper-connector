/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.parsable.thrift.v1.formula;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * An operation is either a function or an operator.  An operator may be sent in function style,
 * or it can be sent using its operator name according to its allowable notation.
 * 
 * Many facts included here are simple to provide, and while not useful to simple interfaces are invaluable for
 * ones which want to do things like context-aware completion or restriction of arguments to relevant types.
 */
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class Operation implements org.apache.thrift.TBase<Operation, Operation._Fields>, java.io.Serializable, Cloneable, Comparable<Operation> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Operation");

  private static final org.apache.thrift.protocol.TField OPERATION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("operationName", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField NOTATION_FIELD_DESC = new org.apache.thrift.protocol.TField("notation", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField PRECEDENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("precedence", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField SIGNATURES_FIELD_DESC = new org.apache.thrift.protocol.TField("signatures", org.apache.thrift.protocol.TType.LIST, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new OperationStandardSchemeFactory());
  }

  /**
   * 
   * @see OpName
   */
  public OpName operationName; // required
  /**
   * a short description of the operation eg "add two numbers together" (localized) - intended for tooltips
   * etc
   */
  public String description; // required
  /**
   * the "notation" defines where the operator appears in relation to its arguments
   * 
   * @see OpNotation
   */
  public OpNotation notation; // required
  /**
   * in the absense of parentheses, this indicates the priority of the operator. Lower numbers
   * mean more tightly binding (eg, × has a lower value than +)
   */
  public int precedence; // required
  /**
   * valid types for the arguments and return values of this operation
   */
  public List<OpSignature> signatures; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see OpName
     */
    OPERATION_NAME((short)1, "operationName"),
    /**
     * a short description of the operation eg "add two numbers together" (localized) - intended for tooltips
     * etc
     */
    DESCRIPTION((short)2, "description"),
    /**
     * the "notation" defines where the operator appears in relation to its arguments
     * 
     * @see OpNotation
     */
    NOTATION((short)3, "notation"),
    /**
     * in the absense of parentheses, this indicates the priority of the operator. Lower numbers
     * mean more tightly binding (eg, × has a lower value than +)
     */
    PRECEDENCE((short)4, "precedence"),
    /**
     * valid types for the arguments and return values of this operation
     */
    SIGNATURES((short)5, "signatures");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // OPERATION_NAME
          return OPERATION_NAME;
        case 2: // DESCRIPTION
          return DESCRIPTION;
        case 3: // NOTATION
          return NOTATION;
        case 4: // PRECEDENCE
          return PRECEDENCE;
        case 5: // SIGNATURES
          return SIGNATURES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PRECEDENCE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.OPERATION_NAME, new org.apache.thrift.meta_data.FieldMetaData("operationName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, OpName.class)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NOTATION, new org.apache.thrift.meta_data.FieldMetaData("notation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, OpNotation.class)));
    tmpMap.put(_Fields.PRECEDENCE, new org.apache.thrift.meta_data.FieldMetaData("precedence", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SIGNATURES, new org.apache.thrift.meta_data.FieldMetaData("signatures", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OpSignature.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Operation.class, metaDataMap);
  }

  public Operation() {
    this.precedence = -1;

  }

  public Operation(
    OpName operationName,
    String description,
    OpNotation notation,
    int precedence,
    List<OpSignature> signatures)
  {
    this();
    this.operationName = operationName;
    this.description = description;
    this.notation = notation;
    this.precedence = precedence;
    setPrecedenceIsSet(true);
    this.signatures = signatures;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Operation(Operation other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetOperationName()) {
      this.operationName = other.operationName;
    }
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    if (other.isSetNotation()) {
      this.notation = other.notation;
    }
    this.precedence = other.precedence;
    if (other.isSetSignatures()) {
      List<OpSignature> __this__signatures = new ArrayList<OpSignature>(other.signatures.size());
      for (OpSignature other_element : other.signatures) {
        __this__signatures.add(new OpSignature(other_element));
      }
      this.signatures = __this__signatures;
    }
  }

  public Operation deepCopy() {
    return new Operation(this);
  }

  @Override
  public void clear() {
    this.operationName = null;
    this.description = null;
    this.notation = null;
    this.precedence = -1;

    this.signatures = null;
  }

  /**
   * 
   * @see OpName
   */
  public OpName getOperationName() {
    return this.operationName;
  }

  /**
   * 
   * @see OpName
   */
  public Operation setOperationName(OpName operationName) {
    this.operationName = operationName;
    return this;
  }

  public void unsetOperationName() {
    this.operationName = null;
  }

  /** Returns true if field operationName is set (has been assigned a value) and false otherwise */
  public boolean isSetOperationName() {
    return this.operationName != null;
  }

  public void setOperationNameIsSet(boolean value) {
    if (!value) {
      this.operationName = null;
    }
  }

  /**
   * a short description of the operation eg "add two numbers together" (localized) - intended for tooltips
   * etc
   */
  public String getDescription() {
    return this.description;
  }

  /**
   * a short description of the operation eg "add two numbers together" (localized) - intended for tooltips
   * etc
   */
  public Operation setDescription(String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  /**
   * the "notation" defines where the operator appears in relation to its arguments
   * 
   * @see OpNotation
   */
  public OpNotation getNotation() {
    return this.notation;
  }

  /**
   * the "notation" defines where the operator appears in relation to its arguments
   * 
   * @see OpNotation
   */
  public Operation setNotation(OpNotation notation) {
    this.notation = notation;
    return this;
  }

  public void unsetNotation() {
    this.notation = null;
  }

  /** Returns true if field notation is set (has been assigned a value) and false otherwise */
  public boolean isSetNotation() {
    return this.notation != null;
  }

  public void setNotationIsSet(boolean value) {
    if (!value) {
      this.notation = null;
    }
  }

  /**
   * in the absense of parentheses, this indicates the priority of the operator. Lower numbers
   * mean more tightly binding (eg, × has a lower value than +)
   */
  public int getPrecedence() {
    return this.precedence;
  }

  /**
   * in the absense of parentheses, this indicates the priority of the operator. Lower numbers
   * mean more tightly binding (eg, × has a lower value than +)
   */
  public Operation setPrecedence(int precedence) {
    this.precedence = precedence;
    setPrecedenceIsSet(true);
    return this;
  }

  public void unsetPrecedence() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRECEDENCE_ISSET_ID);
  }

  /** Returns true if field precedence is set (has been assigned a value) and false otherwise */
  public boolean isSetPrecedence() {
    return EncodingUtils.testBit(__isset_bitfield, __PRECEDENCE_ISSET_ID);
  }

  public void setPrecedenceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRECEDENCE_ISSET_ID, value);
  }

  public int getSignaturesSize() {
    return (this.signatures == null) ? 0 : this.signatures.size();
  }

  public java.util.Iterator<OpSignature> getSignaturesIterator() {
    return (this.signatures == null) ? null : this.signatures.iterator();
  }

  public void addToSignatures(OpSignature elem) {
    if (this.signatures == null) {
      this.signatures = new ArrayList<OpSignature>();
    }
    this.signatures.add(elem);
  }

  /**
   * valid types for the arguments and return values of this operation
   */
  public List<OpSignature> getSignatures() {
    return this.signatures;
  }

  /**
   * valid types for the arguments and return values of this operation
   */
  public Operation setSignatures(List<OpSignature> signatures) {
    this.signatures = signatures;
    return this;
  }

  public void unsetSignatures() {
    this.signatures = null;
  }

  /** Returns true if field signatures is set (has been assigned a value) and false otherwise */
  public boolean isSetSignatures() {
    return this.signatures != null;
  }

  public void setSignaturesIsSet(boolean value) {
    if (!value) {
      this.signatures = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case OPERATION_NAME:
      if (value == null) {
        unsetOperationName();
      } else {
        setOperationName((OpName)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((String)value);
      }
      break;

    case NOTATION:
      if (value == null) {
        unsetNotation();
      } else {
        setNotation((OpNotation)value);
      }
      break;

    case PRECEDENCE:
      if (value == null) {
        unsetPrecedence();
      } else {
        setPrecedence((Integer)value);
      }
      break;

    case SIGNATURES:
      if (value == null) {
        unsetSignatures();
      } else {
        setSignatures((List<OpSignature>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case OPERATION_NAME:
      return getOperationName();

    case DESCRIPTION:
      return getDescription();

    case NOTATION:
      return getNotation();

    case PRECEDENCE:
      return getPrecedence();

    case SIGNATURES:
      return getSignatures();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case OPERATION_NAME:
      return isSetOperationName();
    case DESCRIPTION:
      return isSetDescription();
    case NOTATION:
      return isSetNotation();
    case PRECEDENCE:
      return isSetPrecedence();
    case SIGNATURES:
      return isSetSignatures();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Operation)
      return this.equals((Operation)that);
    return false;
  }

  public boolean equals(Operation that) {
    if (that == null)
      return false;

    boolean this_present_operationName = true && this.isSetOperationName();
    boolean that_present_operationName = true && that.isSetOperationName();
    if (this_present_operationName || that_present_operationName) {
      if (!(this_present_operationName && that_present_operationName))
        return false;
      if (!this.operationName.equals(that.operationName))
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_notation = true && this.isSetNotation();
    boolean that_present_notation = true && that.isSetNotation();
    if (this_present_notation || that_present_notation) {
      if (!(this_present_notation && that_present_notation))
        return false;
      if (!this.notation.equals(that.notation))
        return false;
    }

    boolean this_present_precedence = true;
    boolean that_present_precedence = true;
    if (this_present_precedence || that_present_precedence) {
      if (!(this_present_precedence && that_present_precedence))
        return false;
      if (this.precedence != that.precedence)
        return false;
    }

    boolean this_present_signatures = true && this.isSetSignatures();
    boolean that_present_signatures = true && that.isSetSignatures();
    if (this_present_signatures || that_present_signatures) {
      if (!(this_present_signatures && that_present_signatures))
        return false;
      if (!this.signatures.equals(that.signatures))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_operationName = true && (isSetOperationName());
    list.add(present_operationName);
    if (present_operationName)
      list.add(operationName.getValue());

    boolean present_description = true && (isSetDescription());
    list.add(present_description);
    if (present_description)
      list.add(description);

    boolean present_notation = true && (isSetNotation());
    list.add(present_notation);
    if (present_notation)
      list.add(notation.getValue());

    boolean present_precedence = true;
    list.add(present_precedence);
    if (present_precedence)
      list.add(precedence);

    boolean present_signatures = true && (isSetSignatures());
    list.add(present_signatures);
    if (present_signatures)
      list.add(signatures);

    return list.hashCode();
  }

  @Override
  public int compareTo(Operation other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetOperationName()).compareTo(other.isSetOperationName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperationName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operationName, other.operationName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNotation()).compareTo(other.isSetNotation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notation, other.notation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrecedence()).compareTo(other.isSetPrecedence());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrecedence()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.precedence, other.precedence);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSignatures()).compareTo(other.isSetSignatures());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSignatures()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.signatures, other.signatures);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Operation(");
    boolean first = true;

    sb.append("operationName:");
    if (this.operationName == null) {
      sb.append("null");
    } else {
      sb.append(this.operationName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("description:");
    if (this.description == null) {
      sb.append("null");
    } else {
      sb.append(this.description);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("notation:");
    if (this.notation == null) {
      sb.append("null");
    } else {
      sb.append(this.notation);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("precedence:");
    sb.append(this.precedence);
    first = false;
    if (!first) sb.append(", ");
    sb.append("signatures:");
    if (this.signatures == null) {
      sb.append("null");
    } else {
      sb.append(this.signatures);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class OperationStandardSchemeFactory implements SchemeFactory {
    public OperationStandardScheme getScheme() {
      return new OperationStandardScheme();
    }
  }

  private static class OperationStandardScheme extends StandardScheme<Operation> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Operation struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // OPERATION_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.operationName = com.parsable.thrift.v1.formula.OpName.findByValue(iprot.readI32());
              struct.setOperationNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NOTATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.notation = com.parsable.thrift.v1.formula.OpNotation.findByValue(iprot.readI32());
              struct.setNotationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PRECEDENCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.precedence = iprot.readI32();
              struct.setPrecedenceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SIGNATURES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list4 = iprot.readListBegin();
                struct.signatures = new ArrayList<OpSignature>(_list4.size);
                OpSignature _elem5;
                for (int _i6 = 0; _i6 < _list4.size; ++_i6)
                {
                  _elem5 = new OpSignature();
                  _elem5.read(iprot);
                  struct.signatures.add(_elem5);
                }
                iprot.readListEnd();
              }
              struct.setSignaturesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Operation struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.operationName != null) {
        oprot.writeFieldBegin(OPERATION_NAME_FIELD_DESC);
        oprot.writeI32(struct.operationName.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.description != null) {
        oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
        oprot.writeString(struct.description);
        oprot.writeFieldEnd();
      }
      if (struct.notation != null) {
        oprot.writeFieldBegin(NOTATION_FIELD_DESC);
        oprot.writeI32(struct.notation.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PRECEDENCE_FIELD_DESC);
      oprot.writeI32(struct.precedence);
      oprot.writeFieldEnd();
      if (struct.signatures != null) {
        oprot.writeFieldBegin(SIGNATURES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.signatures.size()));
          for (OpSignature _iter7 : struct.signatures)
          {
            _iter7.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

}

