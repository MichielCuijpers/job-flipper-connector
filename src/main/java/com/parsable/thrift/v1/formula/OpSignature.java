/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.parsable.thrift.v1.formula;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * An "OpSignature" is one set of valid argument types for a function.  eg, for a given set of argument
 * types, it will return the given type.  Many functions will have a single signature only.  Infix
 * operators will always have two arguments, prefix and postfix always one.
 */
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class OpSignature implements org.apache.thrift.TBase<OpSignature, OpSignature._Fields>, java.io.Serializable, Cloneable, Comparable<OpSignature> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OpSignature");

  private static final org.apache.thrift.protocol.TField RETURN_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("returnType", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ARG_TYPES_FIELD_DESC = new org.apache.thrift.protocol.TField("argTypes", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField VAR_ARGS_FIELD_DESC = new org.apache.thrift.protocol.TField("varArgs", org.apache.thrift.protocol.TType.BOOL, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new OpSignatureStandardSchemeFactory());
  }

  /**
   * the return type of the function when called in this way
   * 
   * @see com.wi.director.thrift.v1.field_data.FieldType
   */
  public com.wi.director.thrift.v1.field_data.FieldType returnType; // required
  /**
   * an acceptable list of argument types
   */
  public List<com.wi.director.thrift.v1.field_data.FieldType> argTypes; // required
  /**
   * the function can take a variable number of arguments/terms; the final argument can be provided 0 or more times.
   */
  public boolean varArgs; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * the return type of the function when called in this way
     * 
     * @see com.wi.director.thrift.v1.field_data.FieldType
     */
    RETURN_TYPE((short)1, "returnType"),
    /**
     * an acceptable list of argument types
     */
    ARG_TYPES((short)2, "argTypes"),
    /**
     * the function can take a variable number of arguments/terms; the final argument can be provided 0 or more times.
     */
    VAR_ARGS((short)3, "varArgs");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RETURN_TYPE
          return RETURN_TYPE;
        case 2: // ARG_TYPES
          return ARG_TYPES;
        case 3: // VAR_ARGS
          return VAR_ARGS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __VARARGS_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RETURN_TYPE, new org.apache.thrift.meta_data.FieldMetaData("returnType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.wi.director.thrift.v1.field_data.FieldType.class)));
    tmpMap.put(_Fields.ARG_TYPES, new org.apache.thrift.meta_data.FieldMetaData("argTypes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.wi.director.thrift.v1.field_data.FieldType.class))));
    tmpMap.put(_Fields.VAR_ARGS, new org.apache.thrift.meta_data.FieldMetaData("varArgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OpSignature.class, metaDataMap);
  }

  public OpSignature() {
    this.varArgs = false;

  }

  public OpSignature(
    com.wi.director.thrift.v1.field_data.FieldType returnType,
    List<com.wi.director.thrift.v1.field_data.FieldType> argTypes,
    boolean varArgs)
  {
    this();
    this.returnType = returnType;
    this.argTypes = argTypes;
    this.varArgs = varArgs;
    setVarArgsIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public OpSignature(OpSignature other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetReturnType()) {
      this.returnType = other.returnType;
    }
    if (other.isSetArgTypes()) {
      List<com.wi.director.thrift.v1.field_data.FieldType> __this__argTypes = new ArrayList<com.wi.director.thrift.v1.field_data.FieldType>(other.argTypes.size());
      for (com.wi.director.thrift.v1.field_data.FieldType other_element : other.argTypes) {
        __this__argTypes.add(other_element);
      }
      this.argTypes = __this__argTypes;
    }
    this.varArgs = other.varArgs;
  }

  public OpSignature deepCopy() {
    return new OpSignature(this);
  }

  @Override
  public void clear() {
    this.returnType = null;
    this.argTypes = null;
    this.varArgs = false;

  }

  /**
   * the return type of the function when called in this way
   * 
   * @see com.wi.director.thrift.v1.field_data.FieldType
   */
  public com.wi.director.thrift.v1.field_data.FieldType getReturnType() {
    return this.returnType;
  }

  /**
   * the return type of the function when called in this way
   * 
   * @see com.wi.director.thrift.v1.field_data.FieldType
   */
  public OpSignature setReturnType(com.wi.director.thrift.v1.field_data.FieldType returnType) {
    this.returnType = returnType;
    return this;
  }

  public void unsetReturnType() {
    this.returnType = null;
  }

  /** Returns true if field returnType is set (has been assigned a value) and false otherwise */
  public boolean isSetReturnType() {
    return this.returnType != null;
  }

  public void setReturnTypeIsSet(boolean value) {
    if (!value) {
      this.returnType = null;
    }
  }

  public int getArgTypesSize() {
    return (this.argTypes == null) ? 0 : this.argTypes.size();
  }

  public java.util.Iterator<com.wi.director.thrift.v1.field_data.FieldType> getArgTypesIterator() {
    return (this.argTypes == null) ? null : this.argTypes.iterator();
  }

  public void addToArgTypes(com.wi.director.thrift.v1.field_data.FieldType elem) {
    if (this.argTypes == null) {
      this.argTypes = new ArrayList<com.wi.director.thrift.v1.field_data.FieldType>();
    }
    this.argTypes.add(elem);
  }

  /**
   * an acceptable list of argument types
   */
  public List<com.wi.director.thrift.v1.field_data.FieldType> getArgTypes() {
    return this.argTypes;
  }

  /**
   * an acceptable list of argument types
   */
  public OpSignature setArgTypes(List<com.wi.director.thrift.v1.field_data.FieldType> argTypes) {
    this.argTypes = argTypes;
    return this;
  }

  public void unsetArgTypes() {
    this.argTypes = null;
  }

  /** Returns true if field argTypes is set (has been assigned a value) and false otherwise */
  public boolean isSetArgTypes() {
    return this.argTypes != null;
  }

  public void setArgTypesIsSet(boolean value) {
    if (!value) {
      this.argTypes = null;
    }
  }

  /**
   * the function can take a variable number of arguments/terms; the final argument can be provided 0 or more times.
   */
  public boolean isVarArgs() {
    return this.varArgs;
  }

  /**
   * the function can take a variable number of arguments/terms; the final argument can be provided 0 or more times.
   */
  public OpSignature setVarArgs(boolean varArgs) {
    this.varArgs = varArgs;
    setVarArgsIsSet(true);
    return this;
  }

  public void unsetVarArgs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VARARGS_ISSET_ID);
  }

  /** Returns true if field varArgs is set (has been assigned a value) and false otherwise */
  public boolean isSetVarArgs() {
    return EncodingUtils.testBit(__isset_bitfield, __VARARGS_ISSET_ID);
  }

  public void setVarArgsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VARARGS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RETURN_TYPE:
      if (value == null) {
        unsetReturnType();
      } else {
        setReturnType((com.wi.director.thrift.v1.field_data.FieldType)value);
      }
      break;

    case ARG_TYPES:
      if (value == null) {
        unsetArgTypes();
      } else {
        setArgTypes((List<com.wi.director.thrift.v1.field_data.FieldType>)value);
      }
      break;

    case VAR_ARGS:
      if (value == null) {
        unsetVarArgs();
      } else {
        setVarArgs((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RETURN_TYPE:
      return getReturnType();

    case ARG_TYPES:
      return getArgTypes();

    case VAR_ARGS:
      return isVarArgs();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RETURN_TYPE:
      return isSetReturnType();
    case ARG_TYPES:
      return isSetArgTypes();
    case VAR_ARGS:
      return isSetVarArgs();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof OpSignature)
      return this.equals((OpSignature)that);
    return false;
  }

  public boolean equals(OpSignature that) {
    if (that == null)
      return false;

    boolean this_present_returnType = true && this.isSetReturnType();
    boolean that_present_returnType = true && that.isSetReturnType();
    if (this_present_returnType || that_present_returnType) {
      if (!(this_present_returnType && that_present_returnType))
        return false;
      if (!this.returnType.equals(that.returnType))
        return false;
    }

    boolean this_present_argTypes = true && this.isSetArgTypes();
    boolean that_present_argTypes = true && that.isSetArgTypes();
    if (this_present_argTypes || that_present_argTypes) {
      if (!(this_present_argTypes && that_present_argTypes))
        return false;
      if (!this.argTypes.equals(that.argTypes))
        return false;
    }

    boolean this_present_varArgs = true;
    boolean that_present_varArgs = true;
    if (this_present_varArgs || that_present_varArgs) {
      if (!(this_present_varArgs && that_present_varArgs))
        return false;
      if (this.varArgs != that.varArgs)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_returnType = true && (isSetReturnType());
    list.add(present_returnType);
    if (present_returnType)
      list.add(returnType.getValue());

    boolean present_argTypes = true && (isSetArgTypes());
    list.add(present_argTypes);
    if (present_argTypes)
      list.add(argTypes);

    boolean present_varArgs = true;
    list.add(present_varArgs);
    if (present_varArgs)
      list.add(varArgs);

    return list.hashCode();
  }

  @Override
  public int compareTo(OpSignature other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetReturnType()).compareTo(other.isSetReturnType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReturnType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.returnType, other.returnType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArgTypes()).compareTo(other.isSetArgTypes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArgTypes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.argTypes, other.argTypes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVarArgs()).compareTo(other.isSetVarArgs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVarArgs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.varArgs, other.varArgs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("OpSignature(");
    boolean first = true;

    sb.append("returnType:");
    if (this.returnType == null) {
      sb.append("null");
    } else {
      sb.append(this.returnType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("argTypes:");
    if (this.argTypes == null) {
      sb.append("null");
    } else {
      sb.append(this.argTypes);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("varArgs:");
    sb.append(this.varArgs);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class OpSignatureStandardSchemeFactory implements SchemeFactory {
    public OpSignatureStandardScheme getScheme() {
      return new OpSignatureStandardScheme();
    }
  }

  private static class OpSignatureStandardScheme extends StandardScheme<OpSignature> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, OpSignature struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RETURN_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.returnType = com.wi.director.thrift.v1.field_data.FieldType.findByValue(iprot.readI32());
              struct.setReturnTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ARG_TYPES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.argTypes = new ArrayList<com.wi.director.thrift.v1.field_data.FieldType>(_list0.size);
                com.wi.director.thrift.v1.field_data.FieldType _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = com.wi.director.thrift.v1.field_data.FieldType.findByValue(iprot.readI32());
                  struct.argTypes.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setArgTypesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // VAR_ARGS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.varArgs = iprot.readBool();
              struct.setVarArgsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, OpSignature struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.returnType != null) {
        oprot.writeFieldBegin(RETURN_TYPE_FIELD_DESC);
        oprot.writeI32(struct.returnType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.argTypes != null) {
        oprot.writeFieldBegin(ARG_TYPES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.argTypes.size()));
          for (com.wi.director.thrift.v1.field_data.FieldType _iter3 : struct.argTypes)
          {
            oprot.writeI32(_iter3.getValue());
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(VAR_ARGS_FIELD_DESC);
      oprot.writeBool(struct.varArgs);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

}

