/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.parsable.thrift.v1.formula;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class FieldReference implements org.apache.thrift.TBase<FieldReference, FieldReference._Fields>, java.io.Serializable, Cloneable, Comparable<FieldReference> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FieldReference");

  private static final org.apache.thrift.protocol.TField FIELD_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("fieldType", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField FIELD_CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fieldClientId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField FIELD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fieldId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField FIELD_TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("fieldTitle", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField STEP_CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("stepClientId", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField JOB_BASE_STEP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("jobBaseStepId", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField STEP_TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("stepTitle", org.apache.thrift.protocol.TType.STRING, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FieldReferenceStandardSchemeFactory());
  }

  /**
   * the type of the field, the same as the type on the field.Field
   * 
   * @see com.wi.director.thrift.v1.field_data.FieldType
   */
  public com.wi.director.thrift.v1.field_data.FieldType fieldType; // required
  /**
   * in template authoring, this field contains the referenced field using the client Id
   */
  public String fieldClientId; // optional
  /**
   * specifying field by step.Field.id instead.  Always set on steps in materialized jobs
   */
  public String fieldId; // optional
  /**
   * set on the template version of a formula; this is the title of the input referred to.  Broken references
   * retain this value.
   */
  public String fieldTitle; // optional
  public String stepClientId; // optional
  public String jobBaseStepId; // optional
  /**
   * set on the template version of a formula with inter-step references; this is the title of the step
   * referred to.   Broken references retain this value.
   */
  public String stepTitle; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * the type of the field, the same as the type on the field.Field
     * 
     * @see com.wi.director.thrift.v1.field_data.FieldType
     */
    FIELD_TYPE((short)1, "fieldType"),
    /**
     * in template authoring, this field contains the referenced field using the client Id
     */
    FIELD_CLIENT_ID((short)2, "fieldClientId"),
    /**
     * specifying field by step.Field.id instead.  Always set on steps in materialized jobs
     */
    FIELD_ID((short)3, "fieldId"),
    /**
     * set on the template version of a formula; this is the title of the input referred to.  Broken references
     * retain this value.
     */
    FIELD_TITLE((short)4, "fieldTitle"),
    STEP_CLIENT_ID((short)5, "stepClientId"),
    JOB_BASE_STEP_ID((short)6, "jobBaseStepId"),
    /**
     * set on the template version of a formula with inter-step references; this is the title of the step
     * referred to.   Broken references retain this value.
     */
    STEP_TITLE((short)7, "stepTitle");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FIELD_TYPE
          return FIELD_TYPE;
        case 2: // FIELD_CLIENT_ID
          return FIELD_CLIENT_ID;
        case 3: // FIELD_ID
          return FIELD_ID;
        case 4: // FIELD_TITLE
          return FIELD_TITLE;
        case 5: // STEP_CLIENT_ID
          return STEP_CLIENT_ID;
        case 6: // JOB_BASE_STEP_ID
          return JOB_BASE_STEP_ID;
        case 7: // STEP_TITLE
          return STEP_TITLE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.FIELD_CLIENT_ID,_Fields.FIELD_ID,_Fields.FIELD_TITLE,_Fields.STEP_CLIENT_ID,_Fields.JOB_BASE_STEP_ID,_Fields.STEP_TITLE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FIELD_TYPE, new org.apache.thrift.meta_data.FieldMetaData("fieldType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.wi.director.thrift.v1.field_data.FieldType.class)));
    tmpMap.put(_Fields.FIELD_CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("fieldClientId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FIELD_ID, new org.apache.thrift.meta_data.FieldMetaData("fieldId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FIELD_TITLE, new org.apache.thrift.meta_data.FieldMetaData("fieldTitle", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STEP_CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("stepClientId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.JOB_BASE_STEP_ID, new org.apache.thrift.meta_data.FieldMetaData("jobBaseStepId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STEP_TITLE, new org.apache.thrift.meta_data.FieldMetaData("stepTitle", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FieldReference.class, metaDataMap);
  }

  public FieldReference() {
  }

  public FieldReference(
    com.wi.director.thrift.v1.field_data.FieldType fieldType)
  {
    this();
    this.fieldType = fieldType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FieldReference(FieldReference other) {
    if (other.isSetFieldType()) {
      this.fieldType = other.fieldType;
    }
    if (other.isSetFieldClientId()) {
      this.fieldClientId = other.fieldClientId;
    }
    if (other.isSetFieldId()) {
      this.fieldId = other.fieldId;
    }
    if (other.isSetFieldTitle()) {
      this.fieldTitle = other.fieldTitle;
    }
    if (other.isSetStepClientId()) {
      this.stepClientId = other.stepClientId;
    }
    if (other.isSetJobBaseStepId()) {
      this.jobBaseStepId = other.jobBaseStepId;
    }
    if (other.isSetStepTitle()) {
      this.stepTitle = other.stepTitle;
    }
  }

  public FieldReference deepCopy() {
    return new FieldReference(this);
  }

  @Override
  public void clear() {
    this.fieldType = null;
    this.fieldClientId = null;
    this.fieldId = null;
    this.fieldTitle = null;
    this.stepClientId = null;
    this.jobBaseStepId = null;
    this.stepTitle = null;
  }

  /**
   * the type of the field, the same as the type on the field.Field
   * 
   * @see com.wi.director.thrift.v1.field_data.FieldType
   */
  public com.wi.director.thrift.v1.field_data.FieldType getFieldType() {
    return this.fieldType;
  }

  /**
   * the type of the field, the same as the type on the field.Field
   * 
   * @see com.wi.director.thrift.v1.field_data.FieldType
   */
  public FieldReference setFieldType(com.wi.director.thrift.v1.field_data.FieldType fieldType) {
    this.fieldType = fieldType;
    return this;
  }

  public void unsetFieldType() {
    this.fieldType = null;
  }

  /** Returns true if field fieldType is set (has been assigned a value) and false otherwise */
  public boolean isSetFieldType() {
    return this.fieldType != null;
  }

  public void setFieldTypeIsSet(boolean value) {
    if (!value) {
      this.fieldType = null;
    }
  }

  /**
   * in template authoring, this field contains the referenced field using the client Id
   */
  public String getFieldClientId() {
    return this.fieldClientId;
  }

  /**
   * in template authoring, this field contains the referenced field using the client Id
   */
  public FieldReference setFieldClientId(String fieldClientId) {
    this.fieldClientId = fieldClientId;
    return this;
  }

  public void unsetFieldClientId() {
    this.fieldClientId = null;
  }

  /** Returns true if field fieldClientId is set (has been assigned a value) and false otherwise */
  public boolean isSetFieldClientId() {
    return this.fieldClientId != null;
  }

  public void setFieldClientIdIsSet(boolean value) {
    if (!value) {
      this.fieldClientId = null;
    }
  }

  /**
   * specifying field by step.Field.id instead.  Always set on steps in materialized jobs
   */
  public String getFieldId() {
    return this.fieldId;
  }

  /**
   * specifying field by step.Field.id instead.  Always set on steps in materialized jobs
   */
  public FieldReference setFieldId(String fieldId) {
    this.fieldId = fieldId;
    return this;
  }

  public void unsetFieldId() {
    this.fieldId = null;
  }

  /** Returns true if field fieldId is set (has been assigned a value) and false otherwise */
  public boolean isSetFieldId() {
    return this.fieldId != null;
  }

  public void setFieldIdIsSet(boolean value) {
    if (!value) {
      this.fieldId = null;
    }
  }

  /**
   * set on the template version of a formula; this is the title of the input referred to.  Broken references
   * retain this value.
   */
  public String getFieldTitle() {
    return this.fieldTitle;
  }

  /**
   * set on the template version of a formula; this is the title of the input referred to.  Broken references
   * retain this value.
   */
  public FieldReference setFieldTitle(String fieldTitle) {
    this.fieldTitle = fieldTitle;
    return this;
  }

  public void unsetFieldTitle() {
    this.fieldTitle = null;
  }

  /** Returns true if field fieldTitle is set (has been assigned a value) and false otherwise */
  public boolean isSetFieldTitle() {
    return this.fieldTitle != null;
  }

  public void setFieldTitleIsSet(boolean value) {
    if (!value) {
      this.fieldTitle = null;
    }
  }

  public String getStepClientId() {
    return this.stepClientId;
  }

  public FieldReference setStepClientId(String stepClientId) {
    this.stepClientId = stepClientId;
    return this;
  }

  public void unsetStepClientId() {
    this.stepClientId = null;
  }

  /** Returns true if field stepClientId is set (has been assigned a value) and false otherwise */
  public boolean isSetStepClientId() {
    return this.stepClientId != null;
  }

  public void setStepClientIdIsSet(boolean value) {
    if (!value) {
      this.stepClientId = null;
    }
  }

  public String getJobBaseStepId() {
    return this.jobBaseStepId;
  }

  public FieldReference setJobBaseStepId(String jobBaseStepId) {
    this.jobBaseStepId = jobBaseStepId;
    return this;
  }

  public void unsetJobBaseStepId() {
    this.jobBaseStepId = null;
  }

  /** Returns true if field jobBaseStepId is set (has been assigned a value) and false otherwise */
  public boolean isSetJobBaseStepId() {
    return this.jobBaseStepId != null;
  }

  public void setJobBaseStepIdIsSet(boolean value) {
    if (!value) {
      this.jobBaseStepId = null;
    }
  }

  /**
   * set on the template version of a formula with inter-step references; this is the title of the step
   * referred to.   Broken references retain this value.
   */
  public String getStepTitle() {
    return this.stepTitle;
  }

  /**
   * set on the template version of a formula with inter-step references; this is the title of the step
   * referred to.   Broken references retain this value.
   */
  public FieldReference setStepTitle(String stepTitle) {
    this.stepTitle = stepTitle;
    return this;
  }

  public void unsetStepTitle() {
    this.stepTitle = null;
  }

  /** Returns true if field stepTitle is set (has been assigned a value) and false otherwise */
  public boolean isSetStepTitle() {
    return this.stepTitle != null;
  }

  public void setStepTitleIsSet(boolean value) {
    if (!value) {
      this.stepTitle = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FIELD_TYPE:
      if (value == null) {
        unsetFieldType();
      } else {
        setFieldType((com.wi.director.thrift.v1.field_data.FieldType)value);
      }
      break;

    case FIELD_CLIENT_ID:
      if (value == null) {
        unsetFieldClientId();
      } else {
        setFieldClientId((String)value);
      }
      break;

    case FIELD_ID:
      if (value == null) {
        unsetFieldId();
      } else {
        setFieldId((String)value);
      }
      break;

    case FIELD_TITLE:
      if (value == null) {
        unsetFieldTitle();
      } else {
        setFieldTitle((String)value);
      }
      break;

    case STEP_CLIENT_ID:
      if (value == null) {
        unsetStepClientId();
      } else {
        setStepClientId((String)value);
      }
      break;

    case JOB_BASE_STEP_ID:
      if (value == null) {
        unsetJobBaseStepId();
      } else {
        setJobBaseStepId((String)value);
      }
      break;

    case STEP_TITLE:
      if (value == null) {
        unsetStepTitle();
      } else {
        setStepTitle((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FIELD_TYPE:
      return getFieldType();

    case FIELD_CLIENT_ID:
      return getFieldClientId();

    case FIELD_ID:
      return getFieldId();

    case FIELD_TITLE:
      return getFieldTitle();

    case STEP_CLIENT_ID:
      return getStepClientId();

    case JOB_BASE_STEP_ID:
      return getJobBaseStepId();

    case STEP_TITLE:
      return getStepTitle();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FIELD_TYPE:
      return isSetFieldType();
    case FIELD_CLIENT_ID:
      return isSetFieldClientId();
    case FIELD_ID:
      return isSetFieldId();
    case FIELD_TITLE:
      return isSetFieldTitle();
    case STEP_CLIENT_ID:
      return isSetStepClientId();
    case JOB_BASE_STEP_ID:
      return isSetJobBaseStepId();
    case STEP_TITLE:
      return isSetStepTitle();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FieldReference)
      return this.equals((FieldReference)that);
    return false;
  }

  public boolean equals(FieldReference that) {
    if (that == null)
      return false;

    boolean this_present_fieldType = true && this.isSetFieldType();
    boolean that_present_fieldType = true && that.isSetFieldType();
    if (this_present_fieldType || that_present_fieldType) {
      if (!(this_present_fieldType && that_present_fieldType))
        return false;
      if (!this.fieldType.equals(that.fieldType))
        return false;
    }

    boolean this_present_fieldClientId = true && this.isSetFieldClientId();
    boolean that_present_fieldClientId = true && that.isSetFieldClientId();
    if (this_present_fieldClientId || that_present_fieldClientId) {
      if (!(this_present_fieldClientId && that_present_fieldClientId))
        return false;
      if (!this.fieldClientId.equals(that.fieldClientId))
        return false;
    }

    boolean this_present_fieldId = true && this.isSetFieldId();
    boolean that_present_fieldId = true && that.isSetFieldId();
    if (this_present_fieldId || that_present_fieldId) {
      if (!(this_present_fieldId && that_present_fieldId))
        return false;
      if (!this.fieldId.equals(that.fieldId))
        return false;
    }

    boolean this_present_fieldTitle = true && this.isSetFieldTitle();
    boolean that_present_fieldTitle = true && that.isSetFieldTitle();
    if (this_present_fieldTitle || that_present_fieldTitle) {
      if (!(this_present_fieldTitle && that_present_fieldTitle))
        return false;
      if (!this.fieldTitle.equals(that.fieldTitle))
        return false;
    }

    boolean this_present_stepClientId = true && this.isSetStepClientId();
    boolean that_present_stepClientId = true && that.isSetStepClientId();
    if (this_present_stepClientId || that_present_stepClientId) {
      if (!(this_present_stepClientId && that_present_stepClientId))
        return false;
      if (!this.stepClientId.equals(that.stepClientId))
        return false;
    }

    boolean this_present_jobBaseStepId = true && this.isSetJobBaseStepId();
    boolean that_present_jobBaseStepId = true && that.isSetJobBaseStepId();
    if (this_present_jobBaseStepId || that_present_jobBaseStepId) {
      if (!(this_present_jobBaseStepId && that_present_jobBaseStepId))
        return false;
      if (!this.jobBaseStepId.equals(that.jobBaseStepId))
        return false;
    }

    boolean this_present_stepTitle = true && this.isSetStepTitle();
    boolean that_present_stepTitle = true && that.isSetStepTitle();
    if (this_present_stepTitle || that_present_stepTitle) {
      if (!(this_present_stepTitle && that_present_stepTitle))
        return false;
      if (!this.stepTitle.equals(that.stepTitle))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_fieldType = true && (isSetFieldType());
    list.add(present_fieldType);
    if (present_fieldType)
      list.add(fieldType.getValue());

    boolean present_fieldClientId = true && (isSetFieldClientId());
    list.add(present_fieldClientId);
    if (present_fieldClientId)
      list.add(fieldClientId);

    boolean present_fieldId = true && (isSetFieldId());
    list.add(present_fieldId);
    if (present_fieldId)
      list.add(fieldId);

    boolean present_fieldTitle = true && (isSetFieldTitle());
    list.add(present_fieldTitle);
    if (present_fieldTitle)
      list.add(fieldTitle);

    boolean present_stepClientId = true && (isSetStepClientId());
    list.add(present_stepClientId);
    if (present_stepClientId)
      list.add(stepClientId);

    boolean present_jobBaseStepId = true && (isSetJobBaseStepId());
    list.add(present_jobBaseStepId);
    if (present_jobBaseStepId)
      list.add(jobBaseStepId);

    boolean present_stepTitle = true && (isSetStepTitle());
    list.add(present_stepTitle);
    if (present_stepTitle)
      list.add(stepTitle);

    return list.hashCode();
  }

  @Override
  public int compareTo(FieldReference other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetFieldType()).compareTo(other.isSetFieldType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFieldType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fieldType, other.fieldType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFieldClientId()).compareTo(other.isSetFieldClientId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFieldClientId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fieldClientId, other.fieldClientId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFieldId()).compareTo(other.isSetFieldId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFieldId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fieldId, other.fieldId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFieldTitle()).compareTo(other.isSetFieldTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFieldTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fieldTitle, other.fieldTitle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStepClientId()).compareTo(other.isSetStepClientId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStepClientId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stepClientId, other.stepClientId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJobBaseStepId()).compareTo(other.isSetJobBaseStepId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJobBaseStepId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobBaseStepId, other.jobBaseStepId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStepTitle()).compareTo(other.isSetStepTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStepTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stepTitle, other.stepTitle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FieldReference(");
    boolean first = true;

    sb.append("fieldType:");
    if (this.fieldType == null) {
      sb.append("null");
    } else {
      sb.append(this.fieldType);
    }
    first = false;
    if (isSetFieldClientId()) {
      if (!first) sb.append(", ");
      sb.append("fieldClientId:");
      if (this.fieldClientId == null) {
        sb.append("null");
      } else {
        sb.append(this.fieldClientId);
      }
      first = false;
    }
    if (isSetFieldId()) {
      if (!first) sb.append(", ");
      sb.append("fieldId:");
      if (this.fieldId == null) {
        sb.append("null");
      } else {
        sb.append(this.fieldId);
      }
      first = false;
    }
    if (isSetFieldTitle()) {
      if (!first) sb.append(", ");
      sb.append("fieldTitle:");
      if (this.fieldTitle == null) {
        sb.append("null");
      } else {
        sb.append(this.fieldTitle);
      }
      first = false;
    }
    if (isSetStepClientId()) {
      if (!first) sb.append(", ");
      sb.append("stepClientId:");
      if (this.stepClientId == null) {
        sb.append("null");
      } else {
        sb.append(this.stepClientId);
      }
      first = false;
    }
    if (isSetJobBaseStepId()) {
      if (!first) sb.append(", ");
      sb.append("jobBaseStepId:");
      if (this.jobBaseStepId == null) {
        sb.append("null");
      } else {
        sb.append(this.jobBaseStepId);
      }
      first = false;
    }
    if (isSetStepTitle()) {
      if (!first) sb.append(", ");
      sb.append("stepTitle:");
      if (this.stepTitle == null) {
        sb.append("null");
      } else {
        sb.append(this.stepTitle);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FieldReferenceStandardSchemeFactory implements SchemeFactory {
    public FieldReferenceStandardScheme getScheme() {
      return new FieldReferenceStandardScheme();
    }
  }

  private static class FieldReferenceStandardScheme extends StandardScheme<FieldReference> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FieldReference struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FIELD_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.fieldType = com.wi.director.thrift.v1.field_data.FieldType.findByValue(iprot.readI32());
              struct.setFieldTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FIELD_CLIENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fieldClientId = iprot.readString();
              struct.setFieldClientIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FIELD_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fieldId = iprot.readString();
              struct.setFieldIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FIELD_TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fieldTitle = iprot.readString();
              struct.setFieldTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // STEP_CLIENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stepClientId = iprot.readString();
              struct.setStepClientIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // JOB_BASE_STEP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.jobBaseStepId = iprot.readString();
              struct.setJobBaseStepIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // STEP_TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stepTitle = iprot.readString();
              struct.setStepTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FieldReference struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.fieldType != null) {
        oprot.writeFieldBegin(FIELD_TYPE_FIELD_DESC);
        oprot.writeI32(struct.fieldType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.fieldClientId != null) {
        if (struct.isSetFieldClientId()) {
          oprot.writeFieldBegin(FIELD_CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.fieldClientId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.fieldId != null) {
        if (struct.isSetFieldId()) {
          oprot.writeFieldBegin(FIELD_ID_FIELD_DESC);
          oprot.writeString(struct.fieldId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.fieldTitle != null) {
        if (struct.isSetFieldTitle()) {
          oprot.writeFieldBegin(FIELD_TITLE_FIELD_DESC);
          oprot.writeString(struct.fieldTitle);
          oprot.writeFieldEnd();
        }
      }
      if (struct.stepClientId != null) {
        if (struct.isSetStepClientId()) {
          oprot.writeFieldBegin(STEP_CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.stepClientId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.jobBaseStepId != null) {
        if (struct.isSetJobBaseStepId()) {
          oprot.writeFieldBegin(JOB_BASE_STEP_ID_FIELD_DESC);
          oprot.writeString(struct.jobBaseStepId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.stepTitle != null) {
        if (struct.isSetStepTitle()) {
          oprot.writeFieldBegin(STEP_TITLE_FIELD_DESC);
          oprot.writeString(struct.stepTitle);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

}

