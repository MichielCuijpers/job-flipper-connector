/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.parsable.thrift.v1.legacy_event;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class LegacyTemplateEvent implements org.apache.thrift.TBase<LegacyTemplateEvent, LegacyTemplateEvent._Fields>, java.io.Serializable, Cloneable, Comparable<LegacyTemplateEvent> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LegacyTemplateEvent");

  private static final org.apache.thrift.protocol.TField TEMPLATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("templateId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PEDIGREE_FIELD_DESC = new org.apache.thrift.protocol.TField("pedigree", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField OP_FIELD_DESC = new org.apache.thrift.protocol.TField("op", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField INTERNAL_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("internalVersion", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField PUBLIC_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("publicVersion", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField PUBLISHED_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("publishedVersion", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField NEW_INTERNAL_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("newInternalVersion", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField NEW_PUBLIC_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("newPublicVersion", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField NEW_PUBLISHED_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("newPublishedVersion", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField TEMPLATE_FIELD_DESC = new org.apache.thrift.protocol.TField("template", org.apache.thrift.protocol.TType.STRUCT, (short)10);
  private static final org.apache.thrift.protocol.TField RECEIVED_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("receivedAt", org.apache.thrift.protocol.TType.I64, (short)20);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new LegacyTemplateEventStandardSchemeFactory());
  }

  public String templateId; // required
  public LegacyPedigree pedigree; // required
  public com.parsable.thrift.v1.template_event.TemplateOp op; // required
  public int internalVersion; // optional
  public int publicVersion; // optional
  public int publishedVersion; // optional
  public int newInternalVersion; // optional
  public int newPublicVersion; // optional
  public int newPublishedVersion; // optional
  public com.wi.director.thrift.v1.jobtemplate.JobTemplateModular template; // optional
  public long receivedAt; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TEMPLATE_ID((short)1, "templateId"),
    PEDIGREE((short)2, "pedigree"),
    OP((short)3, "op"),
    INTERNAL_VERSION((short)4, "internalVersion"),
    PUBLIC_VERSION((short)5, "publicVersion"),
    PUBLISHED_VERSION((short)8, "publishedVersion"),
    NEW_INTERNAL_VERSION((short)6, "newInternalVersion"),
    NEW_PUBLIC_VERSION((short)7, "newPublicVersion"),
    NEW_PUBLISHED_VERSION((short)9, "newPublishedVersion"),
    TEMPLATE((short)10, "template"),
    RECEIVED_AT((short)20, "receivedAt");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TEMPLATE_ID
          return TEMPLATE_ID;
        case 2: // PEDIGREE
          return PEDIGREE;
        case 3: // OP
          return OP;
        case 4: // INTERNAL_VERSION
          return INTERNAL_VERSION;
        case 5: // PUBLIC_VERSION
          return PUBLIC_VERSION;
        case 8: // PUBLISHED_VERSION
          return PUBLISHED_VERSION;
        case 6: // NEW_INTERNAL_VERSION
          return NEW_INTERNAL_VERSION;
        case 7: // NEW_PUBLIC_VERSION
          return NEW_PUBLIC_VERSION;
        case 9: // NEW_PUBLISHED_VERSION
          return NEW_PUBLISHED_VERSION;
        case 10: // TEMPLATE
          return TEMPLATE;
        case 20: // RECEIVED_AT
          return RECEIVED_AT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __INTERNALVERSION_ISSET_ID = 0;
  private static final int __PUBLICVERSION_ISSET_ID = 1;
  private static final int __PUBLISHEDVERSION_ISSET_ID = 2;
  private static final int __NEWINTERNALVERSION_ISSET_ID = 3;
  private static final int __NEWPUBLICVERSION_ISSET_ID = 4;
  private static final int __NEWPUBLISHEDVERSION_ISSET_ID = 5;
  private static final int __RECEIVEDAT_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.INTERNAL_VERSION,_Fields.PUBLIC_VERSION,_Fields.PUBLISHED_VERSION,_Fields.NEW_INTERNAL_VERSION,_Fields.NEW_PUBLIC_VERSION,_Fields.NEW_PUBLISHED_VERSION,_Fields.TEMPLATE,_Fields.RECEIVED_AT};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TEMPLATE_ID, new org.apache.thrift.meta_data.FieldMetaData("templateId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "UUID")));
    tmpMap.put(_Fields.PEDIGREE, new org.apache.thrift.meta_data.FieldMetaData("pedigree", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LegacyPedigree.class)));
    tmpMap.put(_Fields.OP, new org.apache.thrift.meta_data.FieldMetaData("op", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.parsable.thrift.v1.template_event.TemplateOp.class)));
    tmpMap.put(_Fields.INTERNAL_VERSION, new org.apache.thrift.meta_data.FieldMetaData("internalVersion", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PUBLIC_VERSION, new org.apache.thrift.meta_data.FieldMetaData("publicVersion", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PUBLISHED_VERSION, new org.apache.thrift.meta_data.FieldMetaData("publishedVersion", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NEW_INTERNAL_VERSION, new org.apache.thrift.meta_data.FieldMetaData("newInternalVersion", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NEW_PUBLIC_VERSION, new org.apache.thrift.meta_data.FieldMetaData("newPublicVersion", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NEW_PUBLISHED_VERSION, new org.apache.thrift.meta_data.FieldMetaData("newPublishedVersion", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TEMPLATE, new org.apache.thrift.meta_data.FieldMetaData("template", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.jobtemplate.JobTemplateModular.class)));
    tmpMap.put(_Fields.RECEIVED_AT, new org.apache.thrift.meta_data.FieldMetaData("receivedAt", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "TimeInSecs")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LegacyTemplateEvent.class, metaDataMap);
  }

  public LegacyTemplateEvent() {
  }

  public LegacyTemplateEvent(
    String templateId,
    LegacyPedigree pedigree,
    com.parsable.thrift.v1.template_event.TemplateOp op)
  {
    this();
    this.templateId = templateId;
    this.pedigree = pedigree;
    this.op = op;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LegacyTemplateEvent(LegacyTemplateEvent other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTemplateId()) {
      this.templateId = other.templateId;
    }
    if (other.isSetPedigree()) {
      this.pedigree = new LegacyPedigree(other.pedigree);
    }
    if (other.isSetOp()) {
      this.op = new com.parsable.thrift.v1.template_event.TemplateOp(other.op);
    }
    this.internalVersion = other.internalVersion;
    this.publicVersion = other.publicVersion;
    this.publishedVersion = other.publishedVersion;
    this.newInternalVersion = other.newInternalVersion;
    this.newPublicVersion = other.newPublicVersion;
    this.newPublishedVersion = other.newPublishedVersion;
    if (other.isSetTemplate()) {
      this.template = new com.wi.director.thrift.v1.jobtemplate.JobTemplateModular(other.template);
    }
    this.receivedAt = other.receivedAt;
  }

  public LegacyTemplateEvent deepCopy() {
    return new LegacyTemplateEvent(this);
  }

  @Override
  public void clear() {
    this.templateId = null;
    this.pedigree = null;
    this.op = null;
    setInternalVersionIsSet(false);
    this.internalVersion = 0;
    setPublicVersionIsSet(false);
    this.publicVersion = 0;
    setPublishedVersionIsSet(false);
    this.publishedVersion = 0;
    setNewInternalVersionIsSet(false);
    this.newInternalVersion = 0;
    setNewPublicVersionIsSet(false);
    this.newPublicVersion = 0;
    setNewPublishedVersionIsSet(false);
    this.newPublishedVersion = 0;
    this.template = null;
    setReceivedAtIsSet(false);
    this.receivedAt = 0;
  }

  public String getTemplateId() {
    return this.templateId;
  }

  public LegacyTemplateEvent setTemplateId(String templateId) {
    this.templateId = templateId;
    return this;
  }

  public void unsetTemplateId() {
    this.templateId = null;
  }

  /** Returns true if field templateId is set (has been assigned a value) and false otherwise */
  public boolean isSetTemplateId() {
    return this.templateId != null;
  }

  public void setTemplateIdIsSet(boolean value) {
    if (!value) {
      this.templateId = null;
    }
  }

  public LegacyPedigree getPedigree() {
    return this.pedigree;
  }

  public LegacyTemplateEvent setPedigree(LegacyPedigree pedigree) {
    this.pedigree = pedigree;
    return this;
  }

  public void unsetPedigree() {
    this.pedigree = null;
  }

  /** Returns true if field pedigree is set (has been assigned a value) and false otherwise */
  public boolean isSetPedigree() {
    return this.pedigree != null;
  }

  public void setPedigreeIsSet(boolean value) {
    if (!value) {
      this.pedigree = null;
    }
  }

  public com.parsable.thrift.v1.template_event.TemplateOp getOp() {
    return this.op;
  }

  public LegacyTemplateEvent setOp(com.parsable.thrift.v1.template_event.TemplateOp op) {
    this.op = op;
    return this;
  }

  public void unsetOp() {
    this.op = null;
  }

  /** Returns true if field op is set (has been assigned a value) and false otherwise */
  public boolean isSetOp() {
    return this.op != null;
  }

  public void setOpIsSet(boolean value) {
    if (!value) {
      this.op = null;
    }
  }

  public int getInternalVersion() {
    return this.internalVersion;
  }

  public LegacyTemplateEvent setInternalVersion(int internalVersion) {
    this.internalVersion = internalVersion;
    setInternalVersionIsSet(true);
    return this;
  }

  public void unsetInternalVersion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INTERNALVERSION_ISSET_ID);
  }

  /** Returns true if field internalVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetInternalVersion() {
    return EncodingUtils.testBit(__isset_bitfield, __INTERNALVERSION_ISSET_ID);
  }

  public void setInternalVersionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INTERNALVERSION_ISSET_ID, value);
  }

  public int getPublicVersion() {
    return this.publicVersion;
  }

  public LegacyTemplateEvent setPublicVersion(int publicVersion) {
    this.publicVersion = publicVersion;
    setPublicVersionIsSet(true);
    return this;
  }

  public void unsetPublicVersion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PUBLICVERSION_ISSET_ID);
  }

  /** Returns true if field publicVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetPublicVersion() {
    return EncodingUtils.testBit(__isset_bitfield, __PUBLICVERSION_ISSET_ID);
  }

  public void setPublicVersionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PUBLICVERSION_ISSET_ID, value);
  }

  public int getPublishedVersion() {
    return this.publishedVersion;
  }

  public LegacyTemplateEvent setPublishedVersion(int publishedVersion) {
    this.publishedVersion = publishedVersion;
    setPublishedVersionIsSet(true);
    return this;
  }

  public void unsetPublishedVersion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PUBLISHEDVERSION_ISSET_ID);
  }

  /** Returns true if field publishedVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetPublishedVersion() {
    return EncodingUtils.testBit(__isset_bitfield, __PUBLISHEDVERSION_ISSET_ID);
  }

  public void setPublishedVersionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PUBLISHEDVERSION_ISSET_ID, value);
  }

  public int getNewInternalVersion() {
    return this.newInternalVersion;
  }

  public LegacyTemplateEvent setNewInternalVersion(int newInternalVersion) {
    this.newInternalVersion = newInternalVersion;
    setNewInternalVersionIsSet(true);
    return this;
  }

  public void unsetNewInternalVersion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NEWINTERNALVERSION_ISSET_ID);
  }

  /** Returns true if field newInternalVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetNewInternalVersion() {
    return EncodingUtils.testBit(__isset_bitfield, __NEWINTERNALVERSION_ISSET_ID);
  }

  public void setNewInternalVersionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NEWINTERNALVERSION_ISSET_ID, value);
  }

  public int getNewPublicVersion() {
    return this.newPublicVersion;
  }

  public LegacyTemplateEvent setNewPublicVersion(int newPublicVersion) {
    this.newPublicVersion = newPublicVersion;
    setNewPublicVersionIsSet(true);
    return this;
  }

  public void unsetNewPublicVersion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NEWPUBLICVERSION_ISSET_ID);
  }

  /** Returns true if field newPublicVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetNewPublicVersion() {
    return EncodingUtils.testBit(__isset_bitfield, __NEWPUBLICVERSION_ISSET_ID);
  }

  public void setNewPublicVersionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NEWPUBLICVERSION_ISSET_ID, value);
  }

  public int getNewPublishedVersion() {
    return this.newPublishedVersion;
  }

  public LegacyTemplateEvent setNewPublishedVersion(int newPublishedVersion) {
    this.newPublishedVersion = newPublishedVersion;
    setNewPublishedVersionIsSet(true);
    return this;
  }

  public void unsetNewPublishedVersion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NEWPUBLISHEDVERSION_ISSET_ID);
  }

  /** Returns true if field newPublishedVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetNewPublishedVersion() {
    return EncodingUtils.testBit(__isset_bitfield, __NEWPUBLISHEDVERSION_ISSET_ID);
  }

  public void setNewPublishedVersionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NEWPUBLISHEDVERSION_ISSET_ID, value);
  }

  public com.wi.director.thrift.v1.jobtemplate.JobTemplateModular getTemplate() {
    return this.template;
  }

  public LegacyTemplateEvent setTemplate(com.wi.director.thrift.v1.jobtemplate.JobTemplateModular template) {
    this.template = template;
    return this;
  }

  public void unsetTemplate() {
    this.template = null;
  }

  /** Returns true if field template is set (has been assigned a value) and false otherwise */
  public boolean isSetTemplate() {
    return this.template != null;
  }

  public void setTemplateIsSet(boolean value) {
    if (!value) {
      this.template = null;
    }
  }

  public long getReceivedAt() {
    return this.receivedAt;
  }

  public LegacyTemplateEvent setReceivedAt(long receivedAt) {
    this.receivedAt = receivedAt;
    setReceivedAtIsSet(true);
    return this;
  }

  public void unsetReceivedAt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECEIVEDAT_ISSET_ID);
  }

  /** Returns true if field receivedAt is set (has been assigned a value) and false otherwise */
  public boolean isSetReceivedAt() {
    return EncodingUtils.testBit(__isset_bitfield, __RECEIVEDAT_ISSET_ID);
  }

  public void setReceivedAtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECEIVEDAT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TEMPLATE_ID:
      if (value == null) {
        unsetTemplateId();
      } else {
        setTemplateId((String)value);
      }
      break;

    case PEDIGREE:
      if (value == null) {
        unsetPedigree();
      } else {
        setPedigree((LegacyPedigree)value);
      }
      break;

    case OP:
      if (value == null) {
        unsetOp();
      } else {
        setOp((com.parsable.thrift.v1.template_event.TemplateOp)value);
      }
      break;

    case INTERNAL_VERSION:
      if (value == null) {
        unsetInternalVersion();
      } else {
        setInternalVersion((Integer)value);
      }
      break;

    case PUBLIC_VERSION:
      if (value == null) {
        unsetPublicVersion();
      } else {
        setPublicVersion((Integer)value);
      }
      break;

    case PUBLISHED_VERSION:
      if (value == null) {
        unsetPublishedVersion();
      } else {
        setPublishedVersion((Integer)value);
      }
      break;

    case NEW_INTERNAL_VERSION:
      if (value == null) {
        unsetNewInternalVersion();
      } else {
        setNewInternalVersion((Integer)value);
      }
      break;

    case NEW_PUBLIC_VERSION:
      if (value == null) {
        unsetNewPublicVersion();
      } else {
        setNewPublicVersion((Integer)value);
      }
      break;

    case NEW_PUBLISHED_VERSION:
      if (value == null) {
        unsetNewPublishedVersion();
      } else {
        setNewPublishedVersion((Integer)value);
      }
      break;

    case TEMPLATE:
      if (value == null) {
        unsetTemplate();
      } else {
        setTemplate((com.wi.director.thrift.v1.jobtemplate.JobTemplateModular)value);
      }
      break;

    case RECEIVED_AT:
      if (value == null) {
        unsetReceivedAt();
      } else {
        setReceivedAt((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TEMPLATE_ID:
      return getTemplateId();

    case PEDIGREE:
      return getPedigree();

    case OP:
      return getOp();

    case INTERNAL_VERSION:
      return getInternalVersion();

    case PUBLIC_VERSION:
      return getPublicVersion();

    case PUBLISHED_VERSION:
      return getPublishedVersion();

    case NEW_INTERNAL_VERSION:
      return getNewInternalVersion();

    case NEW_PUBLIC_VERSION:
      return getNewPublicVersion();

    case NEW_PUBLISHED_VERSION:
      return getNewPublishedVersion();

    case TEMPLATE:
      return getTemplate();

    case RECEIVED_AT:
      return getReceivedAt();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TEMPLATE_ID:
      return isSetTemplateId();
    case PEDIGREE:
      return isSetPedigree();
    case OP:
      return isSetOp();
    case INTERNAL_VERSION:
      return isSetInternalVersion();
    case PUBLIC_VERSION:
      return isSetPublicVersion();
    case PUBLISHED_VERSION:
      return isSetPublishedVersion();
    case NEW_INTERNAL_VERSION:
      return isSetNewInternalVersion();
    case NEW_PUBLIC_VERSION:
      return isSetNewPublicVersion();
    case NEW_PUBLISHED_VERSION:
      return isSetNewPublishedVersion();
    case TEMPLATE:
      return isSetTemplate();
    case RECEIVED_AT:
      return isSetReceivedAt();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof LegacyTemplateEvent)
      return this.equals((LegacyTemplateEvent)that);
    return false;
  }

  public boolean equals(LegacyTemplateEvent that) {
    if (that == null)
      return false;

    boolean this_present_templateId = true && this.isSetTemplateId();
    boolean that_present_templateId = true && that.isSetTemplateId();
    if (this_present_templateId || that_present_templateId) {
      if (!(this_present_templateId && that_present_templateId))
        return false;
      if (!this.templateId.equals(that.templateId))
        return false;
    }

    boolean this_present_pedigree = true && this.isSetPedigree();
    boolean that_present_pedigree = true && that.isSetPedigree();
    if (this_present_pedigree || that_present_pedigree) {
      if (!(this_present_pedigree && that_present_pedigree))
        return false;
      if (!this.pedigree.equals(that.pedigree))
        return false;
    }

    boolean this_present_op = true && this.isSetOp();
    boolean that_present_op = true && that.isSetOp();
    if (this_present_op || that_present_op) {
      if (!(this_present_op && that_present_op))
        return false;
      if (!this.op.equals(that.op))
        return false;
    }

    boolean this_present_internalVersion = true && this.isSetInternalVersion();
    boolean that_present_internalVersion = true && that.isSetInternalVersion();
    if (this_present_internalVersion || that_present_internalVersion) {
      if (!(this_present_internalVersion && that_present_internalVersion))
        return false;
      if (this.internalVersion != that.internalVersion)
        return false;
    }

    boolean this_present_publicVersion = true && this.isSetPublicVersion();
    boolean that_present_publicVersion = true && that.isSetPublicVersion();
    if (this_present_publicVersion || that_present_publicVersion) {
      if (!(this_present_publicVersion && that_present_publicVersion))
        return false;
      if (this.publicVersion != that.publicVersion)
        return false;
    }

    boolean this_present_publishedVersion = true && this.isSetPublishedVersion();
    boolean that_present_publishedVersion = true && that.isSetPublishedVersion();
    if (this_present_publishedVersion || that_present_publishedVersion) {
      if (!(this_present_publishedVersion && that_present_publishedVersion))
        return false;
      if (this.publishedVersion != that.publishedVersion)
        return false;
    }

    boolean this_present_newInternalVersion = true && this.isSetNewInternalVersion();
    boolean that_present_newInternalVersion = true && that.isSetNewInternalVersion();
    if (this_present_newInternalVersion || that_present_newInternalVersion) {
      if (!(this_present_newInternalVersion && that_present_newInternalVersion))
        return false;
      if (this.newInternalVersion != that.newInternalVersion)
        return false;
    }

    boolean this_present_newPublicVersion = true && this.isSetNewPublicVersion();
    boolean that_present_newPublicVersion = true && that.isSetNewPublicVersion();
    if (this_present_newPublicVersion || that_present_newPublicVersion) {
      if (!(this_present_newPublicVersion && that_present_newPublicVersion))
        return false;
      if (this.newPublicVersion != that.newPublicVersion)
        return false;
    }

    boolean this_present_newPublishedVersion = true && this.isSetNewPublishedVersion();
    boolean that_present_newPublishedVersion = true && that.isSetNewPublishedVersion();
    if (this_present_newPublishedVersion || that_present_newPublishedVersion) {
      if (!(this_present_newPublishedVersion && that_present_newPublishedVersion))
        return false;
      if (this.newPublishedVersion != that.newPublishedVersion)
        return false;
    }

    boolean this_present_template = true && this.isSetTemplate();
    boolean that_present_template = true && that.isSetTemplate();
    if (this_present_template || that_present_template) {
      if (!(this_present_template && that_present_template))
        return false;
      if (!this.template.equals(that.template))
        return false;
    }

    boolean this_present_receivedAt = true && this.isSetReceivedAt();
    boolean that_present_receivedAt = true && that.isSetReceivedAt();
    if (this_present_receivedAt || that_present_receivedAt) {
      if (!(this_present_receivedAt && that_present_receivedAt))
        return false;
      if (this.receivedAt != that.receivedAt)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_templateId = true && (isSetTemplateId());
    list.add(present_templateId);
    if (present_templateId)
      list.add(templateId);

    boolean present_pedigree = true && (isSetPedigree());
    list.add(present_pedigree);
    if (present_pedigree)
      list.add(pedigree);

    boolean present_op = true && (isSetOp());
    list.add(present_op);
    if (present_op)
      list.add(op);

    boolean present_internalVersion = true && (isSetInternalVersion());
    list.add(present_internalVersion);
    if (present_internalVersion)
      list.add(internalVersion);

    boolean present_publicVersion = true && (isSetPublicVersion());
    list.add(present_publicVersion);
    if (present_publicVersion)
      list.add(publicVersion);

    boolean present_publishedVersion = true && (isSetPublishedVersion());
    list.add(present_publishedVersion);
    if (present_publishedVersion)
      list.add(publishedVersion);

    boolean present_newInternalVersion = true && (isSetNewInternalVersion());
    list.add(present_newInternalVersion);
    if (present_newInternalVersion)
      list.add(newInternalVersion);

    boolean present_newPublicVersion = true && (isSetNewPublicVersion());
    list.add(present_newPublicVersion);
    if (present_newPublicVersion)
      list.add(newPublicVersion);

    boolean present_newPublishedVersion = true && (isSetNewPublishedVersion());
    list.add(present_newPublishedVersion);
    if (present_newPublishedVersion)
      list.add(newPublishedVersion);

    boolean present_template = true && (isSetTemplate());
    list.add(present_template);
    if (present_template)
      list.add(template);

    boolean present_receivedAt = true && (isSetReceivedAt());
    list.add(present_receivedAt);
    if (present_receivedAt)
      list.add(receivedAt);

    return list.hashCode();
  }

  @Override
  public int compareTo(LegacyTemplateEvent other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTemplateId()).compareTo(other.isSetTemplateId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTemplateId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.templateId, other.templateId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPedigree()).compareTo(other.isSetPedigree());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPedigree()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pedigree, other.pedigree);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOp()).compareTo(other.isSetOp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.op, other.op);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInternalVersion()).compareTo(other.isSetInternalVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInternalVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.internalVersion, other.internalVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPublicVersion()).compareTo(other.isSetPublicVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPublicVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.publicVersion, other.publicVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPublishedVersion()).compareTo(other.isSetPublishedVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPublishedVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.publishedVersion, other.publishedVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNewInternalVersion()).compareTo(other.isSetNewInternalVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNewInternalVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newInternalVersion, other.newInternalVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNewPublicVersion()).compareTo(other.isSetNewPublicVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNewPublicVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newPublicVersion, other.newPublicVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNewPublishedVersion()).compareTo(other.isSetNewPublishedVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNewPublishedVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newPublishedVersion, other.newPublishedVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTemplate()).compareTo(other.isSetTemplate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTemplate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.template, other.template);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReceivedAt()).compareTo(other.isSetReceivedAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReceivedAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.receivedAt, other.receivedAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("LegacyTemplateEvent(");
    boolean first = true;

    sb.append("templateId:");
    if (this.templateId == null) {
      sb.append("null");
    } else {
      sb.append(this.templateId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pedigree:");
    if (this.pedigree == null) {
      sb.append("null");
    } else {
      sb.append(this.pedigree);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("op:");
    if (this.op == null) {
      sb.append("null");
    } else {
      sb.append(this.op);
    }
    first = false;
    if (isSetInternalVersion()) {
      if (!first) sb.append(", ");
      sb.append("internalVersion:");
      sb.append(this.internalVersion);
      first = false;
    }
    if (isSetPublicVersion()) {
      if (!first) sb.append(", ");
      sb.append("publicVersion:");
      sb.append(this.publicVersion);
      first = false;
    }
    if (isSetPublishedVersion()) {
      if (!first) sb.append(", ");
      sb.append("publishedVersion:");
      sb.append(this.publishedVersion);
      first = false;
    }
    if (isSetNewInternalVersion()) {
      if (!first) sb.append(", ");
      sb.append("newInternalVersion:");
      sb.append(this.newInternalVersion);
      first = false;
    }
    if (isSetNewPublicVersion()) {
      if (!first) sb.append(", ");
      sb.append("newPublicVersion:");
      sb.append(this.newPublicVersion);
      first = false;
    }
    if (isSetNewPublishedVersion()) {
      if (!first) sb.append(", ");
      sb.append("newPublishedVersion:");
      sb.append(this.newPublishedVersion);
      first = false;
    }
    if (isSetTemplate()) {
      if (!first) sb.append(", ");
      sb.append("template:");
      if (this.template == null) {
        sb.append("null");
      } else {
        sb.append(this.template);
      }
      first = false;
    }
    if (isSetReceivedAt()) {
      if (!first) sb.append(", ");
      sb.append("receivedAt:");
      sb.append(this.receivedAt);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (templateId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'templateId' was not present! Struct: " + toString());
    }
    if (pedigree == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'pedigree' was not present! Struct: " + toString());
    }
    if (op == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'op' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (pedigree != null) {
      pedigree.validate();
    }
    if (template != null) {
      template.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LegacyTemplateEventStandardSchemeFactory implements SchemeFactory {
    public LegacyTemplateEventStandardScheme getScheme() {
      return new LegacyTemplateEventStandardScheme();
    }
  }

  private static class LegacyTemplateEventStandardScheme extends StandardScheme<LegacyTemplateEvent> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LegacyTemplateEvent struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TEMPLATE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.templateId = iprot.readString();
              struct.setTemplateIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PEDIGREE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.pedigree = new LegacyPedigree();
              struct.pedigree.read(iprot);
              struct.setPedigreeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.op = new com.parsable.thrift.v1.template_event.TemplateOp();
              struct.op.read(iprot);
              struct.setOpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // INTERNAL_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.internalVersion = iprot.readI32();
              struct.setInternalVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PUBLIC_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.publicVersion = iprot.readI32();
              struct.setPublicVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PUBLISHED_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.publishedVersion = iprot.readI32();
              struct.setPublishedVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NEW_INTERNAL_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.newInternalVersion = iprot.readI32();
              struct.setNewInternalVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // NEW_PUBLIC_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.newPublicVersion = iprot.readI32();
              struct.setNewPublicVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // NEW_PUBLISHED_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.newPublishedVersion = iprot.readI32();
              struct.setNewPublishedVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // TEMPLATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.template = new com.wi.director.thrift.v1.jobtemplate.JobTemplateModular();
              struct.template.read(iprot);
              struct.setTemplateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // RECEIVED_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.receivedAt = iprot.readI64();
              struct.setReceivedAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LegacyTemplateEvent struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.templateId != null) {
        oprot.writeFieldBegin(TEMPLATE_ID_FIELD_DESC);
        oprot.writeString(struct.templateId);
        oprot.writeFieldEnd();
      }
      if (struct.pedigree != null) {
        oprot.writeFieldBegin(PEDIGREE_FIELD_DESC);
        struct.pedigree.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.op != null) {
        oprot.writeFieldBegin(OP_FIELD_DESC);
        struct.op.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.isSetInternalVersion()) {
        oprot.writeFieldBegin(INTERNAL_VERSION_FIELD_DESC);
        oprot.writeI32(struct.internalVersion);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPublicVersion()) {
        oprot.writeFieldBegin(PUBLIC_VERSION_FIELD_DESC);
        oprot.writeI32(struct.publicVersion);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNewInternalVersion()) {
        oprot.writeFieldBegin(NEW_INTERNAL_VERSION_FIELD_DESC);
        oprot.writeI32(struct.newInternalVersion);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNewPublicVersion()) {
        oprot.writeFieldBegin(NEW_PUBLIC_VERSION_FIELD_DESC);
        oprot.writeI32(struct.newPublicVersion);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPublishedVersion()) {
        oprot.writeFieldBegin(PUBLISHED_VERSION_FIELD_DESC);
        oprot.writeI32(struct.publishedVersion);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNewPublishedVersion()) {
        oprot.writeFieldBegin(NEW_PUBLISHED_VERSION_FIELD_DESC);
        oprot.writeI32(struct.newPublishedVersion);
        oprot.writeFieldEnd();
      }
      if (struct.template != null) {
        if (struct.isSetTemplate()) {
          oprot.writeFieldBegin(TEMPLATE_FIELD_DESC);
          struct.template.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetReceivedAt()) {
        oprot.writeFieldBegin(RECEIVED_AT_FIELD_DESC);
        oprot.writeI64(struct.receivedAt);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

}

