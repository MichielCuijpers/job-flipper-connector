/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.parsable.thrift.v1.legacy_event;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class LegacyPedigree implements org.apache.thrift.TBase<LegacyPedigree, LegacyPedigree._Fields>, java.io.Serializable, Cloneable, Comparable<LegacyPedigree> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LegacyPedigree");

  private static final org.apache.thrift.protocol.TField TEAM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("teamId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ACTOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("actorId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ADMIN_ACTOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("adminActorId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionId", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CLIENT_SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientSessionId", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField CREATED_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("createdAt", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField SEQ_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("seqId", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField PARENT_VERSIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("parentVersions", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField IS_SIDE_EFFECT_FIELD_DESC = new org.apache.thrift.protocol.TField("isSideEffect", org.apache.thrift.protocol.TType.BOOL, (short)20);
  private static final org.apache.thrift.protocol.TField CAUSED_EVENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("causedEvents", org.apache.thrift.protocol.TType.LIST, (short)21);
  private static final org.apache.thrift.protocol.TField EXPANDED_PARENT_VERSIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("expandedParentVersions", org.apache.thrift.protocol.TType.LIST, (short)100);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new LegacyPedigreeStandardSchemeFactory());
  }

  public String teamId; // required
  public String actorId; // required
  public String adminActorId; // optional
  public String sessionId; // required
  public String clientSessionId; // optional
  public long createdAt; // required
  public long seqId; // optional
  public List<com.parsable.thrift.v1.core_event.NodeVersion> parentVersions; // optional
  public boolean isSideEffect; // required
  public List<com.parsable.thrift.v1.core_event.NodeVersion> causedEvents; // optional
  public List<com.parsable.thrift.v1.core_event.NodeVersion> expandedParentVersions; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TEAM_ID((short)1, "teamId"),
    ACTOR_ID((short)2, "actorId"),
    ADMIN_ACTOR_ID((short)3, "adminActorId"),
    SESSION_ID((short)4, "sessionId"),
    CLIENT_SESSION_ID((short)5, "clientSessionId"),
    CREATED_AT((short)6, "createdAt"),
    SEQ_ID((short)8, "seqId"),
    PARENT_VERSIONS((short)9, "parentVersions"),
    IS_SIDE_EFFECT((short)20, "isSideEffect"),
    CAUSED_EVENTS((short)21, "causedEvents"),
    EXPANDED_PARENT_VERSIONS((short)100, "expandedParentVersions");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TEAM_ID
          return TEAM_ID;
        case 2: // ACTOR_ID
          return ACTOR_ID;
        case 3: // ADMIN_ACTOR_ID
          return ADMIN_ACTOR_ID;
        case 4: // SESSION_ID
          return SESSION_ID;
        case 5: // CLIENT_SESSION_ID
          return CLIENT_SESSION_ID;
        case 6: // CREATED_AT
          return CREATED_AT;
        case 8: // SEQ_ID
          return SEQ_ID;
        case 9: // PARENT_VERSIONS
          return PARENT_VERSIONS;
        case 20: // IS_SIDE_EFFECT
          return IS_SIDE_EFFECT;
        case 21: // CAUSED_EVENTS
          return CAUSED_EVENTS;
        case 100: // EXPANDED_PARENT_VERSIONS
          return EXPANDED_PARENT_VERSIONS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CREATEDAT_ISSET_ID = 0;
  private static final int __SEQID_ISSET_ID = 1;
  private static final int __ISSIDEEFFECT_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ADMIN_ACTOR_ID,_Fields.CLIENT_SESSION_ID,_Fields.SEQ_ID,_Fields.PARENT_VERSIONS,_Fields.CAUSED_EVENTS,_Fields.EXPANDED_PARENT_VERSIONS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TEAM_ID, new org.apache.thrift.meta_data.FieldMetaData("teamId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "UUID")));
    tmpMap.put(_Fields.ACTOR_ID, new org.apache.thrift.meta_data.FieldMetaData("actorId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "UUID")));
    tmpMap.put(_Fields.ADMIN_ACTOR_ID, new org.apache.thrift.meta_data.FieldMetaData("adminActorId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "UUID")));
    tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "UUID")));
    tmpMap.put(_Fields.CLIENT_SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("clientSessionId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "UUID")));
    tmpMap.put(_Fields.CREATED_AT, new org.apache.thrift.meta_data.FieldMetaData("createdAt", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "TimeInSecs")));
    tmpMap.put(_Fields.SEQ_ID, new org.apache.thrift.meta_data.FieldMetaData("seqId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PARENT_VERSIONS, new org.apache.thrift.meta_data.FieldMetaData("parentVersions", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.parsable.thrift.v1.core_event.NodeVersion.class))));
    tmpMap.put(_Fields.IS_SIDE_EFFECT, new org.apache.thrift.meta_data.FieldMetaData("isSideEffect", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CAUSED_EVENTS, new org.apache.thrift.meta_data.FieldMetaData("causedEvents", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.parsable.thrift.v1.core_event.NodeVersion.class))));
    tmpMap.put(_Fields.EXPANDED_PARENT_VERSIONS, new org.apache.thrift.meta_data.FieldMetaData("expandedParentVersions", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.parsable.thrift.v1.core_event.NodeVersion.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LegacyPedigree.class, metaDataMap);
  }

  public LegacyPedigree() {
    this.isSideEffect = false;

  }

  public LegacyPedigree(
    String teamId,
    String actorId,
    String sessionId,
    long createdAt,
    boolean isSideEffect)
  {
    this();
    this.teamId = teamId;
    this.actorId = actorId;
    this.sessionId = sessionId;
    this.createdAt = createdAt;
    setCreatedAtIsSet(true);
    this.isSideEffect = isSideEffect;
    setIsSideEffectIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LegacyPedigree(LegacyPedigree other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTeamId()) {
      this.teamId = other.teamId;
    }
    if (other.isSetActorId()) {
      this.actorId = other.actorId;
    }
    if (other.isSetAdminActorId()) {
      this.adminActorId = other.adminActorId;
    }
    if (other.isSetSessionId()) {
      this.sessionId = other.sessionId;
    }
    if (other.isSetClientSessionId()) {
      this.clientSessionId = other.clientSessionId;
    }
    this.createdAt = other.createdAt;
    this.seqId = other.seqId;
    if (other.isSetParentVersions()) {
      List<com.parsable.thrift.v1.core_event.NodeVersion> __this__parentVersions = new ArrayList<com.parsable.thrift.v1.core_event.NodeVersion>(other.parentVersions.size());
      for (com.parsable.thrift.v1.core_event.NodeVersion other_element : other.parentVersions) {
        __this__parentVersions.add(new com.parsable.thrift.v1.core_event.NodeVersion(other_element));
      }
      this.parentVersions = __this__parentVersions;
    }
    this.isSideEffect = other.isSideEffect;
    if (other.isSetCausedEvents()) {
      List<com.parsable.thrift.v1.core_event.NodeVersion> __this__causedEvents = new ArrayList<com.parsable.thrift.v1.core_event.NodeVersion>(other.causedEvents.size());
      for (com.parsable.thrift.v1.core_event.NodeVersion other_element : other.causedEvents) {
        __this__causedEvents.add(new com.parsable.thrift.v1.core_event.NodeVersion(other_element));
      }
      this.causedEvents = __this__causedEvents;
    }
    if (other.isSetExpandedParentVersions()) {
      List<com.parsable.thrift.v1.core_event.NodeVersion> __this__expandedParentVersions = new ArrayList<com.parsable.thrift.v1.core_event.NodeVersion>(other.expandedParentVersions.size());
      for (com.parsable.thrift.v1.core_event.NodeVersion other_element : other.expandedParentVersions) {
        __this__expandedParentVersions.add(new com.parsable.thrift.v1.core_event.NodeVersion(other_element));
      }
      this.expandedParentVersions = __this__expandedParentVersions;
    }
  }

  public LegacyPedigree deepCopy() {
    return new LegacyPedigree(this);
  }

  @Override
  public void clear() {
    this.teamId = null;
    this.actorId = null;
    this.adminActorId = null;
    this.sessionId = null;
    this.clientSessionId = null;
    setCreatedAtIsSet(false);
    this.createdAt = 0;
    setSeqIdIsSet(false);
    this.seqId = 0;
    this.parentVersions = null;
    this.isSideEffect = false;

    this.causedEvents = null;
    this.expandedParentVersions = null;
  }

  public String getTeamId() {
    return this.teamId;
  }

  public LegacyPedigree setTeamId(String teamId) {
    this.teamId = teamId;
    return this;
  }

  public void unsetTeamId() {
    this.teamId = null;
  }

  /** Returns true if field teamId is set (has been assigned a value) and false otherwise */
  public boolean isSetTeamId() {
    return this.teamId != null;
  }

  public void setTeamIdIsSet(boolean value) {
    if (!value) {
      this.teamId = null;
    }
  }

  public String getActorId() {
    return this.actorId;
  }

  public LegacyPedigree setActorId(String actorId) {
    this.actorId = actorId;
    return this;
  }

  public void unsetActorId() {
    this.actorId = null;
  }

  /** Returns true if field actorId is set (has been assigned a value) and false otherwise */
  public boolean isSetActorId() {
    return this.actorId != null;
  }

  public void setActorIdIsSet(boolean value) {
    if (!value) {
      this.actorId = null;
    }
  }

  public String getAdminActorId() {
    return this.adminActorId;
  }

  public LegacyPedigree setAdminActorId(String adminActorId) {
    this.adminActorId = adminActorId;
    return this;
  }

  public void unsetAdminActorId() {
    this.adminActorId = null;
  }

  /** Returns true if field adminActorId is set (has been assigned a value) and false otherwise */
  public boolean isSetAdminActorId() {
    return this.adminActorId != null;
  }

  public void setAdminActorIdIsSet(boolean value) {
    if (!value) {
      this.adminActorId = null;
    }
  }

  public String getSessionId() {
    return this.sessionId;
  }

  public LegacyPedigree setSessionId(String sessionId) {
    this.sessionId = sessionId;
    return this;
  }

  public void unsetSessionId() {
    this.sessionId = null;
  }

  /** Returns true if field sessionId is set (has been assigned a value) and false otherwise */
  public boolean isSetSessionId() {
    return this.sessionId != null;
  }

  public void setSessionIdIsSet(boolean value) {
    if (!value) {
      this.sessionId = null;
    }
  }

  public String getClientSessionId() {
    return this.clientSessionId;
  }

  public LegacyPedigree setClientSessionId(String clientSessionId) {
    this.clientSessionId = clientSessionId;
    return this;
  }

  public void unsetClientSessionId() {
    this.clientSessionId = null;
  }

  /** Returns true if field clientSessionId is set (has been assigned a value) and false otherwise */
  public boolean isSetClientSessionId() {
    return this.clientSessionId != null;
  }

  public void setClientSessionIdIsSet(boolean value) {
    if (!value) {
      this.clientSessionId = null;
    }
  }

  public long getCreatedAt() {
    return this.createdAt;
  }

  public LegacyPedigree setCreatedAt(long createdAt) {
    this.createdAt = createdAt;
    setCreatedAtIsSet(true);
    return this;
  }

  public void unsetCreatedAt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATEDAT_ISSET_ID);
  }

  /** Returns true if field createdAt is set (has been assigned a value) and false otherwise */
  public boolean isSetCreatedAt() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATEDAT_ISSET_ID);
  }

  public void setCreatedAtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATEDAT_ISSET_ID, value);
  }

  public long getSeqId() {
    return this.seqId;
  }

  public LegacyPedigree setSeqId(long seqId) {
    this.seqId = seqId;
    setSeqIdIsSet(true);
    return this;
  }

  public void unsetSeqId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEQID_ISSET_ID);
  }

  /** Returns true if field seqId is set (has been assigned a value) and false otherwise */
  public boolean isSetSeqId() {
    return EncodingUtils.testBit(__isset_bitfield, __SEQID_ISSET_ID);
  }

  public void setSeqIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEQID_ISSET_ID, value);
  }

  public int getParentVersionsSize() {
    return (this.parentVersions == null) ? 0 : this.parentVersions.size();
  }

  public java.util.Iterator<com.parsable.thrift.v1.core_event.NodeVersion> getParentVersionsIterator() {
    return (this.parentVersions == null) ? null : this.parentVersions.iterator();
  }

  public void addToParentVersions(com.parsable.thrift.v1.core_event.NodeVersion elem) {
    if (this.parentVersions == null) {
      this.parentVersions = new ArrayList<com.parsable.thrift.v1.core_event.NodeVersion>();
    }
    this.parentVersions.add(elem);
  }

  public List<com.parsable.thrift.v1.core_event.NodeVersion> getParentVersions() {
    return this.parentVersions;
  }

  public LegacyPedigree setParentVersions(List<com.parsable.thrift.v1.core_event.NodeVersion> parentVersions) {
    this.parentVersions = parentVersions;
    return this;
  }

  public void unsetParentVersions() {
    this.parentVersions = null;
  }

  /** Returns true if field parentVersions is set (has been assigned a value) and false otherwise */
  public boolean isSetParentVersions() {
    return this.parentVersions != null;
  }

  public void setParentVersionsIsSet(boolean value) {
    if (!value) {
      this.parentVersions = null;
    }
  }

  public boolean isIsSideEffect() {
    return this.isSideEffect;
  }

  public LegacyPedigree setIsSideEffect(boolean isSideEffect) {
    this.isSideEffect = isSideEffect;
    setIsSideEffectIsSet(true);
    return this;
  }

  public void unsetIsSideEffect() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISSIDEEFFECT_ISSET_ID);
  }

  /** Returns true if field isSideEffect is set (has been assigned a value) and false otherwise */
  public boolean isSetIsSideEffect() {
    return EncodingUtils.testBit(__isset_bitfield, __ISSIDEEFFECT_ISSET_ID);
  }

  public void setIsSideEffectIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISSIDEEFFECT_ISSET_ID, value);
  }

  public int getCausedEventsSize() {
    return (this.causedEvents == null) ? 0 : this.causedEvents.size();
  }

  public java.util.Iterator<com.parsable.thrift.v1.core_event.NodeVersion> getCausedEventsIterator() {
    return (this.causedEvents == null) ? null : this.causedEvents.iterator();
  }

  public void addToCausedEvents(com.parsable.thrift.v1.core_event.NodeVersion elem) {
    if (this.causedEvents == null) {
      this.causedEvents = new ArrayList<com.parsable.thrift.v1.core_event.NodeVersion>();
    }
    this.causedEvents.add(elem);
  }

  public List<com.parsable.thrift.v1.core_event.NodeVersion> getCausedEvents() {
    return this.causedEvents;
  }

  public LegacyPedigree setCausedEvents(List<com.parsable.thrift.v1.core_event.NodeVersion> causedEvents) {
    this.causedEvents = causedEvents;
    return this;
  }

  public void unsetCausedEvents() {
    this.causedEvents = null;
  }

  /** Returns true if field causedEvents is set (has been assigned a value) and false otherwise */
  public boolean isSetCausedEvents() {
    return this.causedEvents != null;
  }

  public void setCausedEventsIsSet(boolean value) {
    if (!value) {
      this.causedEvents = null;
    }
  }

  public int getExpandedParentVersionsSize() {
    return (this.expandedParentVersions == null) ? 0 : this.expandedParentVersions.size();
  }

  public java.util.Iterator<com.parsable.thrift.v1.core_event.NodeVersion> getExpandedParentVersionsIterator() {
    return (this.expandedParentVersions == null) ? null : this.expandedParentVersions.iterator();
  }

  public void addToExpandedParentVersions(com.parsable.thrift.v1.core_event.NodeVersion elem) {
    if (this.expandedParentVersions == null) {
      this.expandedParentVersions = new ArrayList<com.parsable.thrift.v1.core_event.NodeVersion>();
    }
    this.expandedParentVersions.add(elem);
  }

  public List<com.parsable.thrift.v1.core_event.NodeVersion> getExpandedParentVersions() {
    return this.expandedParentVersions;
  }

  public LegacyPedigree setExpandedParentVersions(List<com.parsable.thrift.v1.core_event.NodeVersion> expandedParentVersions) {
    this.expandedParentVersions = expandedParentVersions;
    return this;
  }

  public void unsetExpandedParentVersions() {
    this.expandedParentVersions = null;
  }

  /** Returns true if field expandedParentVersions is set (has been assigned a value) and false otherwise */
  public boolean isSetExpandedParentVersions() {
    return this.expandedParentVersions != null;
  }

  public void setExpandedParentVersionsIsSet(boolean value) {
    if (!value) {
      this.expandedParentVersions = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TEAM_ID:
      if (value == null) {
        unsetTeamId();
      } else {
        setTeamId((String)value);
      }
      break;

    case ACTOR_ID:
      if (value == null) {
        unsetActorId();
      } else {
        setActorId((String)value);
      }
      break;

    case ADMIN_ACTOR_ID:
      if (value == null) {
        unsetAdminActorId();
      } else {
        setAdminActorId((String)value);
      }
      break;

    case SESSION_ID:
      if (value == null) {
        unsetSessionId();
      } else {
        setSessionId((String)value);
      }
      break;

    case CLIENT_SESSION_ID:
      if (value == null) {
        unsetClientSessionId();
      } else {
        setClientSessionId((String)value);
      }
      break;

    case CREATED_AT:
      if (value == null) {
        unsetCreatedAt();
      } else {
        setCreatedAt((Long)value);
      }
      break;

    case SEQ_ID:
      if (value == null) {
        unsetSeqId();
      } else {
        setSeqId((Long)value);
      }
      break;

    case PARENT_VERSIONS:
      if (value == null) {
        unsetParentVersions();
      } else {
        setParentVersions((List<com.parsable.thrift.v1.core_event.NodeVersion>)value);
      }
      break;

    case IS_SIDE_EFFECT:
      if (value == null) {
        unsetIsSideEffect();
      } else {
        setIsSideEffect((Boolean)value);
      }
      break;

    case CAUSED_EVENTS:
      if (value == null) {
        unsetCausedEvents();
      } else {
        setCausedEvents((List<com.parsable.thrift.v1.core_event.NodeVersion>)value);
      }
      break;

    case EXPANDED_PARENT_VERSIONS:
      if (value == null) {
        unsetExpandedParentVersions();
      } else {
        setExpandedParentVersions((List<com.parsable.thrift.v1.core_event.NodeVersion>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TEAM_ID:
      return getTeamId();

    case ACTOR_ID:
      return getActorId();

    case ADMIN_ACTOR_ID:
      return getAdminActorId();

    case SESSION_ID:
      return getSessionId();

    case CLIENT_SESSION_ID:
      return getClientSessionId();

    case CREATED_AT:
      return getCreatedAt();

    case SEQ_ID:
      return getSeqId();

    case PARENT_VERSIONS:
      return getParentVersions();

    case IS_SIDE_EFFECT:
      return isIsSideEffect();

    case CAUSED_EVENTS:
      return getCausedEvents();

    case EXPANDED_PARENT_VERSIONS:
      return getExpandedParentVersions();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TEAM_ID:
      return isSetTeamId();
    case ACTOR_ID:
      return isSetActorId();
    case ADMIN_ACTOR_ID:
      return isSetAdminActorId();
    case SESSION_ID:
      return isSetSessionId();
    case CLIENT_SESSION_ID:
      return isSetClientSessionId();
    case CREATED_AT:
      return isSetCreatedAt();
    case SEQ_ID:
      return isSetSeqId();
    case PARENT_VERSIONS:
      return isSetParentVersions();
    case IS_SIDE_EFFECT:
      return isSetIsSideEffect();
    case CAUSED_EVENTS:
      return isSetCausedEvents();
    case EXPANDED_PARENT_VERSIONS:
      return isSetExpandedParentVersions();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof LegacyPedigree)
      return this.equals((LegacyPedigree)that);
    return false;
  }

  public boolean equals(LegacyPedigree that) {
    if (that == null)
      return false;

    boolean this_present_teamId = true && this.isSetTeamId();
    boolean that_present_teamId = true && that.isSetTeamId();
    if (this_present_teamId || that_present_teamId) {
      if (!(this_present_teamId && that_present_teamId))
        return false;
      if (!this.teamId.equals(that.teamId))
        return false;
    }

    boolean this_present_actorId = true && this.isSetActorId();
    boolean that_present_actorId = true && that.isSetActorId();
    if (this_present_actorId || that_present_actorId) {
      if (!(this_present_actorId && that_present_actorId))
        return false;
      if (!this.actorId.equals(that.actorId))
        return false;
    }

    boolean this_present_adminActorId = true && this.isSetAdminActorId();
    boolean that_present_adminActorId = true && that.isSetAdminActorId();
    if (this_present_adminActorId || that_present_adminActorId) {
      if (!(this_present_adminActorId && that_present_adminActorId))
        return false;
      if (!this.adminActorId.equals(that.adminActorId))
        return false;
    }

    boolean this_present_sessionId = true && this.isSetSessionId();
    boolean that_present_sessionId = true && that.isSetSessionId();
    if (this_present_sessionId || that_present_sessionId) {
      if (!(this_present_sessionId && that_present_sessionId))
        return false;
      if (!this.sessionId.equals(that.sessionId))
        return false;
    }

    boolean this_present_clientSessionId = true && this.isSetClientSessionId();
    boolean that_present_clientSessionId = true && that.isSetClientSessionId();
    if (this_present_clientSessionId || that_present_clientSessionId) {
      if (!(this_present_clientSessionId && that_present_clientSessionId))
        return false;
      if (!this.clientSessionId.equals(that.clientSessionId))
        return false;
    }

    boolean this_present_createdAt = true;
    boolean that_present_createdAt = true;
    if (this_present_createdAt || that_present_createdAt) {
      if (!(this_present_createdAt && that_present_createdAt))
        return false;
      if (this.createdAt != that.createdAt)
        return false;
    }

    boolean this_present_seqId = true && this.isSetSeqId();
    boolean that_present_seqId = true && that.isSetSeqId();
    if (this_present_seqId || that_present_seqId) {
      if (!(this_present_seqId && that_present_seqId))
        return false;
      if (this.seqId != that.seqId)
        return false;
    }

    boolean this_present_parentVersions = true && this.isSetParentVersions();
    boolean that_present_parentVersions = true && that.isSetParentVersions();
    if (this_present_parentVersions || that_present_parentVersions) {
      if (!(this_present_parentVersions && that_present_parentVersions))
        return false;
      if (!this.parentVersions.equals(that.parentVersions))
        return false;
    }

    boolean this_present_isSideEffect = true;
    boolean that_present_isSideEffect = true;
    if (this_present_isSideEffect || that_present_isSideEffect) {
      if (!(this_present_isSideEffect && that_present_isSideEffect))
        return false;
      if (this.isSideEffect != that.isSideEffect)
        return false;
    }

    boolean this_present_causedEvents = true && this.isSetCausedEvents();
    boolean that_present_causedEvents = true && that.isSetCausedEvents();
    if (this_present_causedEvents || that_present_causedEvents) {
      if (!(this_present_causedEvents && that_present_causedEvents))
        return false;
      if (!this.causedEvents.equals(that.causedEvents))
        return false;
    }

    boolean this_present_expandedParentVersions = true && this.isSetExpandedParentVersions();
    boolean that_present_expandedParentVersions = true && that.isSetExpandedParentVersions();
    if (this_present_expandedParentVersions || that_present_expandedParentVersions) {
      if (!(this_present_expandedParentVersions && that_present_expandedParentVersions))
        return false;
      if (!this.expandedParentVersions.equals(that.expandedParentVersions))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_teamId = true && (isSetTeamId());
    list.add(present_teamId);
    if (present_teamId)
      list.add(teamId);

    boolean present_actorId = true && (isSetActorId());
    list.add(present_actorId);
    if (present_actorId)
      list.add(actorId);

    boolean present_adminActorId = true && (isSetAdminActorId());
    list.add(present_adminActorId);
    if (present_adminActorId)
      list.add(adminActorId);

    boolean present_sessionId = true && (isSetSessionId());
    list.add(present_sessionId);
    if (present_sessionId)
      list.add(sessionId);

    boolean present_clientSessionId = true && (isSetClientSessionId());
    list.add(present_clientSessionId);
    if (present_clientSessionId)
      list.add(clientSessionId);

    boolean present_createdAt = true;
    list.add(present_createdAt);
    if (present_createdAt)
      list.add(createdAt);

    boolean present_seqId = true && (isSetSeqId());
    list.add(present_seqId);
    if (present_seqId)
      list.add(seqId);

    boolean present_parentVersions = true && (isSetParentVersions());
    list.add(present_parentVersions);
    if (present_parentVersions)
      list.add(parentVersions);

    boolean present_isSideEffect = true;
    list.add(present_isSideEffect);
    if (present_isSideEffect)
      list.add(isSideEffect);

    boolean present_causedEvents = true && (isSetCausedEvents());
    list.add(present_causedEvents);
    if (present_causedEvents)
      list.add(causedEvents);

    boolean present_expandedParentVersions = true && (isSetExpandedParentVersions());
    list.add(present_expandedParentVersions);
    if (present_expandedParentVersions)
      list.add(expandedParentVersions);

    return list.hashCode();
  }

  @Override
  public int compareTo(LegacyPedigree other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTeamId()).compareTo(other.isSetTeamId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeamId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teamId, other.teamId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActorId()).compareTo(other.isSetActorId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActorId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actorId, other.actorId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdminActorId()).compareTo(other.isSetAdminActorId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdminActorId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adminActorId, other.adminActorId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSessionId()).compareTo(other.isSetSessionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSessionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionId, other.sessionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClientSessionId()).compareTo(other.isSetClientSessionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientSessionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientSessionId, other.clientSessionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreatedAt()).compareTo(other.isSetCreatedAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreatedAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createdAt, other.createdAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSeqId()).compareTo(other.isSetSeqId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSeqId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.seqId, other.seqId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParentVersions()).compareTo(other.isSetParentVersions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParentVersions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentVersions, other.parentVersions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsSideEffect()).compareTo(other.isSetIsSideEffect());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsSideEffect()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isSideEffect, other.isSideEffect);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCausedEvents()).compareTo(other.isSetCausedEvents());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCausedEvents()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.causedEvents, other.causedEvents);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExpandedParentVersions()).compareTo(other.isSetExpandedParentVersions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpandedParentVersions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expandedParentVersions, other.expandedParentVersions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("LegacyPedigree(");
    boolean first = true;

    sb.append("teamId:");
    if (this.teamId == null) {
      sb.append("null");
    } else {
      sb.append(this.teamId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("actorId:");
    if (this.actorId == null) {
      sb.append("null");
    } else {
      sb.append(this.actorId);
    }
    first = false;
    if (isSetAdminActorId()) {
      if (!first) sb.append(", ");
      sb.append("adminActorId:");
      if (this.adminActorId == null) {
        sb.append("null");
      } else {
        sb.append(this.adminActorId);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("sessionId:");
    if (this.sessionId == null) {
      sb.append("null");
    } else {
      sb.append(this.sessionId);
    }
    first = false;
    if (isSetClientSessionId()) {
      if (!first) sb.append(", ");
      sb.append("clientSessionId:");
      if (this.clientSessionId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientSessionId);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("createdAt:");
    sb.append(this.createdAt);
    first = false;
    if (isSetSeqId()) {
      if (!first) sb.append(", ");
      sb.append("seqId:");
      sb.append(this.seqId);
      first = false;
    }
    if (isSetParentVersions()) {
      if (!first) sb.append(", ");
      sb.append("parentVersions:");
      if (this.parentVersions == null) {
        sb.append("null");
      } else {
        sb.append(this.parentVersions);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("isSideEffect:");
    sb.append(this.isSideEffect);
    first = false;
    if (isSetCausedEvents()) {
      if (!first) sb.append(", ");
      sb.append("causedEvents:");
      if (this.causedEvents == null) {
        sb.append("null");
      } else {
        sb.append(this.causedEvents);
      }
      first = false;
    }
    if (isSetExpandedParentVersions()) {
      if (!first) sb.append(", ");
      sb.append("expandedParentVersions:");
      if (this.expandedParentVersions == null) {
        sb.append("null");
      } else {
        sb.append(this.expandedParentVersions);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (teamId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'teamId' was not present! Struct: " + toString());
    }
    if (actorId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'actorId' was not present! Struct: " + toString());
    }
    if (sessionId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'sessionId' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'createdAt' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LegacyPedigreeStandardSchemeFactory implements SchemeFactory {
    public LegacyPedigreeStandardScheme getScheme() {
      return new LegacyPedigreeStandardScheme();
    }
  }

  private static class LegacyPedigreeStandardScheme extends StandardScheme<LegacyPedigree> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LegacyPedigree struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TEAM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.teamId = iprot.readString();
              struct.setTeamIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ACTOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.actorId = iprot.readString();
              struct.setActorIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ADMIN_ACTOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.adminActorId = iprot.readString();
              struct.setAdminActorIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SESSION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sessionId = iprot.readString();
              struct.setSessionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CLIENT_SESSION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientSessionId = iprot.readString();
              struct.setClientSessionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CREATED_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createdAt = iprot.readI64();
              struct.setCreatedAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SEQ_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.seqId = iprot.readI64();
              struct.setSeqIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PARENT_VERSIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.parentVersions = new ArrayList<com.parsable.thrift.v1.core_event.NodeVersion>(_list0.size);
                com.parsable.thrift.v1.core_event.NodeVersion _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new com.parsable.thrift.v1.core_event.NodeVersion();
                  _elem1.read(iprot);
                  struct.parentVersions.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setParentVersionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // IS_SIDE_EFFECT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isSideEffect = iprot.readBool();
              struct.setIsSideEffectIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // CAUSED_EVENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.causedEvents = new ArrayList<com.parsable.thrift.v1.core_event.NodeVersion>(_list3.size);
                com.parsable.thrift.v1.core_event.NodeVersion _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = new com.parsable.thrift.v1.core_event.NodeVersion();
                  _elem4.read(iprot);
                  struct.causedEvents.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setCausedEventsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 100: // EXPANDED_PARENT_VERSIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                struct.expandedParentVersions = new ArrayList<com.parsable.thrift.v1.core_event.NodeVersion>(_list6.size);
                com.parsable.thrift.v1.core_event.NodeVersion _elem7;
                for (int _i8 = 0; _i8 < _list6.size; ++_i8)
                {
                  _elem7 = new com.parsable.thrift.v1.core_event.NodeVersion();
                  _elem7.read(iprot);
                  struct.expandedParentVersions.add(_elem7);
                }
                iprot.readListEnd();
              }
              struct.setExpandedParentVersionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetCreatedAt()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'createdAt' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LegacyPedigree struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.teamId != null) {
        oprot.writeFieldBegin(TEAM_ID_FIELD_DESC);
        oprot.writeString(struct.teamId);
        oprot.writeFieldEnd();
      }
      if (struct.actorId != null) {
        oprot.writeFieldBegin(ACTOR_ID_FIELD_DESC);
        oprot.writeString(struct.actorId);
        oprot.writeFieldEnd();
      }
      if (struct.adminActorId != null) {
        if (struct.isSetAdminActorId()) {
          oprot.writeFieldBegin(ADMIN_ACTOR_ID_FIELD_DESC);
          oprot.writeString(struct.adminActorId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.sessionId != null) {
        oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
        oprot.writeString(struct.sessionId);
        oprot.writeFieldEnd();
      }
      if (struct.clientSessionId != null) {
        if (struct.isSetClientSessionId()) {
          oprot.writeFieldBegin(CLIENT_SESSION_ID_FIELD_DESC);
          oprot.writeString(struct.clientSessionId);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(CREATED_AT_FIELD_DESC);
      oprot.writeI64(struct.createdAt);
      oprot.writeFieldEnd();
      if (struct.isSetSeqId()) {
        oprot.writeFieldBegin(SEQ_ID_FIELD_DESC);
        oprot.writeI64(struct.seqId);
        oprot.writeFieldEnd();
      }
      if (struct.parentVersions != null) {
        if (struct.isSetParentVersions()) {
          oprot.writeFieldBegin(PARENT_VERSIONS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.parentVersions.size()));
            for (com.parsable.thrift.v1.core_event.NodeVersion _iter9 : struct.parentVersions)
            {
              _iter9.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(IS_SIDE_EFFECT_FIELD_DESC);
      oprot.writeBool(struct.isSideEffect);
      oprot.writeFieldEnd();
      if (struct.causedEvents != null) {
        if (struct.isSetCausedEvents()) {
          oprot.writeFieldBegin(CAUSED_EVENTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.causedEvents.size()));
            for (com.parsable.thrift.v1.core_event.NodeVersion _iter10 : struct.causedEvents)
            {
              _iter10.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.expandedParentVersions != null) {
        if (struct.isSetExpandedParentVersions()) {
          oprot.writeFieldBegin(EXPANDED_PARENT_VERSIONS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.expandedParentVersions.size()));
            for (com.parsable.thrift.v1.core_event.NodeVersion _iter11 : struct.expandedParentVersions)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

}

