/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.parsable.thrift.v1.legacy_event;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
public class LegacyJobOp extends org.apache.thrift.TUnion<LegacyJobOp, LegacyJobOp._Fields> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LegacyJobOp");
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField PLANNED_FIELD_DESC = new org.apache.thrift.protocol.TField("planned", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField ADD_TEMPLATES_FIELD_DESC = new org.apache.thrift.protocol.TField("addTemplates", org.apache.thrift.protocol.TType.STRUCT, (short)11);
  private static final org.apache.thrift.protocol.TField ADD_TEMPLATE_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("addTemplateSet", org.apache.thrift.protocol.TType.STRUCT, (short)12);
  private static final org.apache.thrift.protocol.TField REMOVE_TEMPLATE_FIELD_DESC = new org.apache.thrift.protocol.TField("removeTemplate", org.apache.thrift.protocol.TType.STRUCT, (short)13);
  private static final org.apache.thrift.protocol.TField MOVE_TEMPLATE_FIELD_DESC = new org.apache.thrift.protocol.TField("moveTemplate", org.apache.thrift.protocol.TType.STRUCT, (short)14);
  private static final org.apache.thrift.protocol.TField ADD_STEP_FIELD_DESC = new org.apache.thrift.protocol.TField("addStep", org.apache.thrift.protocol.TType.STRUCT, (short)21);
  private static final org.apache.thrift.protocol.TField ADD_STEP_GROUP_FIELD_DESC = new org.apache.thrift.protocol.TField("addStepGroup", org.apache.thrift.protocol.TType.STRUCT, (short)22);
  private static final org.apache.thrift.protocol.TField CLONE_STEP_FIELD_DESC = new org.apache.thrift.protocol.TField("cloneStep", org.apache.thrift.protocol.TType.STRUCT, (short)23);
  private static final org.apache.thrift.protocol.TField CLONE_STEP_GROUP_FIELD_DESC = new org.apache.thrift.protocol.TField("cloneStepGroup", org.apache.thrift.protocol.TType.STRUCT, (short)24);
  private static final org.apache.thrift.protocol.TField ADD_DOCUMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("addDocument", org.apache.thrift.protocol.TType.STRUCT, (short)31);
  private static final org.apache.thrift.protocol.TField REMOVE_DOCUMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("removeDocument", org.apache.thrift.protocol.TType.STRUCT, (short)32);
  private static final org.apache.thrift.protocol.TField METADATA_UPDATE_FIELD_DESC = new org.apache.thrift.protocol.TField("metadataUpdate", org.apache.thrift.protocol.TType.STRUCT, (short)33);
  private static final org.apache.thrift.protocol.TField METADATA_DELETE_FIELD_DESC = new org.apache.thrift.protocol.TField("metadataDelete", org.apache.thrift.protocol.TType.STRUCT, (short)34);
  private static final org.apache.thrift.protocol.TField CREATION_FIELD_DESC = new org.apache.thrift.protocol.TField("creation", org.apache.thrift.protocol.TType.STRUCT, (short)101);
  private static final org.apache.thrift.protocol.TField MATERIALIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("materialize", org.apache.thrift.protocol.TType.STRUCT, (short)102);
  private static final org.apache.thrift.protocol.TField START_FIELD_DESC = new org.apache.thrift.protocol.TField("start", org.apache.thrift.protocol.TType.STRUCT, (short)103);
  private static final org.apache.thrift.protocol.TField ARCHIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("archive", org.apache.thrift.protocol.TType.STRUCT, (short)104);
  private static final org.apache.thrift.protocol.TField COMPLETE_FIELD_DESC = new org.apache.thrift.protocol.TField("complete", org.apache.thrift.protocol.TType.STRUCT, (short)105);
  private static final org.apache.thrift.protocol.TField ADD_ROLE_FIELD_DESC = new org.apache.thrift.protocol.TField("addRole", org.apache.thrift.protocol.TType.STRUCT, (short)106);
  private static final org.apache.thrift.protocol.TField REMOVE_ROLE_FIELD_DESC = new org.apache.thrift.protocol.TField("removeRole", org.apache.thrift.protocol.TType.STRUCT, (short)107);
  private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRUCT, (short)201);
  private static final org.apache.thrift.protocol.TField STEP_COMPLETE_FIELD_DESC = new org.apache.thrift.protocol.TField("stepComplete", org.apache.thrift.protocol.TType.STRUCT, (short)202);
  private static final org.apache.thrift.protocol.TField STEP_FIELD_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("stepFieldData", org.apache.thrift.protocol.TType.STRUCT, (short)203);
  private static final org.apache.thrift.protocol.TField STEP_NA_FIELD_DESC = new org.apache.thrift.protocol.TField("stepNA", org.apache.thrift.protocol.TType.STRUCT, (short)204);
  private static final org.apache.thrift.protocol.TField STEP_GROUP_CONDITIONAL_FIELD_DESC = new org.apache.thrift.protocol.TField("stepGroupConditional", org.apache.thrift.protocol.TType.STRUCT, (short)205);
  private static final org.apache.thrift.protocol.TField STEP_GROUP_NA_FIELD_DESC = new org.apache.thrift.protocol.TField("stepGroupNA", org.apache.thrift.protocol.TType.STRUCT, (short)206);

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TITLE((short)1, "title"),
    PLANNED((short)2, "planned"),
    ADD_TEMPLATES((short)11, "addTemplates"),
    ADD_TEMPLATE_SET((short)12, "addTemplateSet"),
    REMOVE_TEMPLATE((short)13, "removeTemplate"),
    MOVE_TEMPLATE((short)14, "moveTemplate"),
    ADD_STEP((short)21, "addStep"),
    ADD_STEP_GROUP((short)22, "addStepGroup"),
    CLONE_STEP((short)23, "cloneStep"),
    CLONE_STEP_GROUP((short)24, "cloneStepGroup"),
    ADD_DOCUMENT((short)31, "addDocument"),
    REMOVE_DOCUMENT((short)32, "removeDocument"),
    METADATA_UPDATE((short)33, "metadataUpdate"),
    METADATA_DELETE((short)34, "metadataDelete"),
    CREATION((short)101, "creation"),
    MATERIALIZE((short)102, "materialize"),
    START((short)103, "start"),
    ARCHIVE((short)104, "archive"),
    COMPLETE((short)105, "complete"),
    ADD_ROLE((short)106, "addRole"),
    REMOVE_ROLE((short)107, "removeRole"),
    MESSAGE((short)201, "message"),
    STEP_COMPLETE((short)202, "stepComplete"),
    STEP_FIELD_DATA((short)203, "stepFieldData"),
    STEP_NA((short)204, "stepNA"),
    STEP_GROUP_CONDITIONAL((short)205, "stepGroupConditional"),
    STEP_GROUP_NA((short)206, "stepGroupNA");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TITLE
          return TITLE;
        case 2: // PLANNED
          return PLANNED;
        case 11: // ADD_TEMPLATES
          return ADD_TEMPLATES;
        case 12: // ADD_TEMPLATE_SET
          return ADD_TEMPLATE_SET;
        case 13: // REMOVE_TEMPLATE
          return REMOVE_TEMPLATE;
        case 14: // MOVE_TEMPLATE
          return MOVE_TEMPLATE;
        case 21: // ADD_STEP
          return ADD_STEP;
        case 22: // ADD_STEP_GROUP
          return ADD_STEP_GROUP;
        case 23: // CLONE_STEP
          return CLONE_STEP;
        case 24: // CLONE_STEP_GROUP
          return CLONE_STEP_GROUP;
        case 31: // ADD_DOCUMENT
          return ADD_DOCUMENT;
        case 32: // REMOVE_DOCUMENT
          return REMOVE_DOCUMENT;
        case 33: // METADATA_UPDATE
          return METADATA_UPDATE;
        case 34: // METADATA_DELETE
          return METADATA_DELETE;
        case 101: // CREATION
          return CREATION;
        case 102: // MATERIALIZE
          return MATERIALIZE;
        case 103: // START
          return START;
        case 104: // ARCHIVE
          return ARCHIVE;
        case 105: // COMPLETE
          return COMPLETE;
        case 106: // ADD_ROLE
          return ADD_ROLE;
        case 107: // REMOVE_ROLE
          return REMOVE_ROLE;
        case 201: // MESSAGE
          return MESSAGE;
        case 202: // STEP_COMPLETE
          return STEP_COMPLETE;
        case 203: // STEP_FIELD_DATA
          return STEP_FIELD_DATA;
        case 204: // STEP_NA
          return STEP_NA;
        case 205: // STEP_GROUP_CONDITIONAL
          return STEP_GROUP_CONDITIONAL;
        case 206: // STEP_GROUP_NA
          return STEP_GROUP_NA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.parsable.thrift.v1.common_event.TitleProperty.class)));
    tmpMap.put(_Fields.PLANNED, new org.apache.thrift.meta_data.FieldMetaData("planned", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.parsable.thrift.v1.job_event.PlannedProperty.class)));
    tmpMap.put(_Fields.ADD_TEMPLATES, new org.apache.thrift.meta_data.FieldMetaData("addTemplates", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.parsable.thrift.v1.job_event.AddTemplatesOp.class)));
    tmpMap.put(_Fields.ADD_TEMPLATE_SET, new org.apache.thrift.meta_data.FieldMetaData("addTemplateSet", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.parsable.thrift.v1.job_event.AddTemplateSetOp.class)));
    tmpMap.put(_Fields.REMOVE_TEMPLATE, new org.apache.thrift.meta_data.FieldMetaData("removeTemplate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.parsable.thrift.v1.job_event.RemoveTemplateOp.class)));
    tmpMap.put(_Fields.MOVE_TEMPLATE, new org.apache.thrift.meta_data.FieldMetaData("moveTemplate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.parsable.thrift.v1.job_event.MoveTemplateOp.class)));
    tmpMap.put(_Fields.ADD_STEP, new org.apache.thrift.meta_data.FieldMetaData("addStep", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.parsable.thrift.v1.common_event.AddStepOp.class)));
    tmpMap.put(_Fields.ADD_STEP_GROUP, new org.apache.thrift.meta_data.FieldMetaData("addStepGroup", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.parsable.thrift.v1.common_event.AddStepGroupOp.class)));
    tmpMap.put(_Fields.CLONE_STEP, new org.apache.thrift.meta_data.FieldMetaData("cloneStep", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.parsable.thrift.v1.common_event.CloneStepOp.class)));
    tmpMap.put(_Fields.CLONE_STEP_GROUP, new org.apache.thrift.meta_data.FieldMetaData("cloneStepGroup", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.parsable.thrift.v1.common_event.CloneStepGroupOp.class)));
    tmpMap.put(_Fields.ADD_DOCUMENT, new org.apache.thrift.meta_data.FieldMetaData("addDocument", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.parsable.thrift.v1.common_event.AddDocumentOp.class)));
    tmpMap.put(_Fields.REMOVE_DOCUMENT, new org.apache.thrift.meta_data.FieldMetaData("removeDocument", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.parsable.thrift.v1.common_event.RemoveDocumentOp.class)));
    tmpMap.put(_Fields.METADATA_UPDATE, new org.apache.thrift.meta_data.FieldMetaData("metadataUpdate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.parsable.thrift.v1.common_event.MetadataUpdateOp.class)));
    tmpMap.put(_Fields.METADATA_DELETE, new org.apache.thrift.meta_data.FieldMetaData("metadataDelete", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.parsable.thrift.v1.common_event.MetadataDeleteOp.class)));
    tmpMap.put(_Fields.CREATION, new org.apache.thrift.meta_data.FieldMetaData("creation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.parsable.thrift.v1.job_event.CreateOp.class)));
    tmpMap.put(_Fields.MATERIALIZE, new org.apache.thrift.meta_data.FieldMetaData("materialize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.parsable.thrift.v1.job_event.MaterializeOp.class)));
    tmpMap.put(_Fields.START, new org.apache.thrift.meta_data.FieldMetaData("start", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.parsable.thrift.v1.job_event.StartOp.class)));
    tmpMap.put(_Fields.ARCHIVE, new org.apache.thrift.meta_data.FieldMetaData("archive", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.parsable.thrift.v1.common_event.ArchiveOp.class)));
    tmpMap.put(_Fields.COMPLETE, new org.apache.thrift.meta_data.FieldMetaData("complete", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.parsable.thrift.v1.job_event.CompleteOp.class)));
    tmpMap.put(_Fields.ADD_ROLE, new org.apache.thrift.meta_data.FieldMetaData("addRole", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.parsable.thrift.v1.job_event.AddRoleOp.class)));
    tmpMap.put(_Fields.REMOVE_ROLE, new org.apache.thrift.meta_data.FieldMetaData("removeRole", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.parsable.thrift.v1.job_event.RemoveRoleOp.class)));
    tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("message", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LegacyMessageOp.class)));
    tmpMap.put(_Fields.STEP_COMPLETE, new org.apache.thrift.meta_data.FieldMetaData("stepComplete", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.parsable.thrift.v1.job_event.StepCompleteOp.class)));
    tmpMap.put(_Fields.STEP_FIELD_DATA, new org.apache.thrift.meta_data.FieldMetaData("stepFieldData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.parsable.thrift.v1.job_event.StepFieldDataOp.class)));
    tmpMap.put(_Fields.STEP_NA, new org.apache.thrift.meta_data.FieldMetaData("stepNA", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.parsable.thrift.v1.job_event.StepNotApplicableOp.class)));
    tmpMap.put(_Fields.STEP_GROUP_CONDITIONAL, new org.apache.thrift.meta_data.FieldMetaData("stepGroupConditional", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.parsable.thrift.v1.job_event.StepGroupConditionalOp.class)));
    tmpMap.put(_Fields.STEP_GROUP_NA, new org.apache.thrift.meta_data.FieldMetaData("stepGroupNA", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.parsable.thrift.v1.job_event.StepGroupNotApplicableOp.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LegacyJobOp.class, metaDataMap);
  }

  public LegacyJobOp() {
    super();
  }

  public LegacyJobOp(_Fields setField, Object value) {
    super(setField, value);
  }

  public LegacyJobOp(LegacyJobOp other) {
    super(other);
  }
  public LegacyJobOp deepCopy() {
    return new LegacyJobOp(this);
  }

  public static LegacyJobOp title(com.parsable.thrift.v1.common_event.TitleProperty value) {
    LegacyJobOp x = new LegacyJobOp();
    x.setTitle(value);
    return x;
  }

  public static LegacyJobOp planned(com.parsable.thrift.v1.job_event.PlannedProperty value) {
    LegacyJobOp x = new LegacyJobOp();
    x.setPlanned(value);
    return x;
  }

  public static LegacyJobOp addTemplates(com.parsable.thrift.v1.job_event.AddTemplatesOp value) {
    LegacyJobOp x = new LegacyJobOp();
    x.setAddTemplates(value);
    return x;
  }

  public static LegacyJobOp addTemplateSet(com.parsable.thrift.v1.job_event.AddTemplateSetOp value) {
    LegacyJobOp x = new LegacyJobOp();
    x.setAddTemplateSet(value);
    return x;
  }

  public static LegacyJobOp removeTemplate(com.parsable.thrift.v1.job_event.RemoveTemplateOp value) {
    LegacyJobOp x = new LegacyJobOp();
    x.setRemoveTemplate(value);
    return x;
  }

  public static LegacyJobOp moveTemplate(com.parsable.thrift.v1.job_event.MoveTemplateOp value) {
    LegacyJobOp x = new LegacyJobOp();
    x.setMoveTemplate(value);
    return x;
  }

  public static LegacyJobOp addStep(com.parsable.thrift.v1.common_event.AddStepOp value) {
    LegacyJobOp x = new LegacyJobOp();
    x.setAddStep(value);
    return x;
  }

  public static LegacyJobOp addStepGroup(com.parsable.thrift.v1.common_event.AddStepGroupOp value) {
    LegacyJobOp x = new LegacyJobOp();
    x.setAddStepGroup(value);
    return x;
  }

  public static LegacyJobOp cloneStep(com.parsable.thrift.v1.common_event.CloneStepOp value) {
    LegacyJobOp x = new LegacyJobOp();
    x.setCloneStep(value);
    return x;
  }

  public static LegacyJobOp cloneStepGroup(com.parsable.thrift.v1.common_event.CloneStepGroupOp value) {
    LegacyJobOp x = new LegacyJobOp();
    x.setCloneStepGroup(value);
    return x;
  }

  public static LegacyJobOp addDocument(com.parsable.thrift.v1.common_event.AddDocumentOp value) {
    LegacyJobOp x = new LegacyJobOp();
    x.setAddDocument(value);
    return x;
  }

  public static LegacyJobOp removeDocument(com.parsable.thrift.v1.common_event.RemoveDocumentOp value) {
    LegacyJobOp x = new LegacyJobOp();
    x.setRemoveDocument(value);
    return x;
  }

  public static LegacyJobOp metadataUpdate(com.parsable.thrift.v1.common_event.MetadataUpdateOp value) {
    LegacyJobOp x = new LegacyJobOp();
    x.setMetadataUpdate(value);
    return x;
  }

  public static LegacyJobOp metadataDelete(com.parsable.thrift.v1.common_event.MetadataDeleteOp value) {
    LegacyJobOp x = new LegacyJobOp();
    x.setMetadataDelete(value);
    return x;
  }

  public static LegacyJobOp creation(com.parsable.thrift.v1.job_event.CreateOp value) {
    LegacyJobOp x = new LegacyJobOp();
    x.setCreation(value);
    return x;
  }

  public static LegacyJobOp materialize(com.parsable.thrift.v1.job_event.MaterializeOp value) {
    LegacyJobOp x = new LegacyJobOp();
    x.setMaterialize(value);
    return x;
  }

  public static LegacyJobOp start(com.parsable.thrift.v1.job_event.StartOp value) {
    LegacyJobOp x = new LegacyJobOp();
    x.setStart(value);
    return x;
  }

  public static LegacyJobOp archive(com.parsable.thrift.v1.common_event.ArchiveOp value) {
    LegacyJobOp x = new LegacyJobOp();
    x.setArchive(value);
    return x;
  }

  public static LegacyJobOp complete(com.parsable.thrift.v1.job_event.CompleteOp value) {
    LegacyJobOp x = new LegacyJobOp();
    x.setComplete(value);
    return x;
  }

  public static LegacyJobOp addRole(com.parsable.thrift.v1.job_event.AddRoleOp value) {
    LegacyJobOp x = new LegacyJobOp();
    x.setAddRole(value);
    return x;
  }

  public static LegacyJobOp removeRole(com.parsable.thrift.v1.job_event.RemoveRoleOp value) {
    LegacyJobOp x = new LegacyJobOp();
    x.setRemoveRole(value);
    return x;
  }

  public static LegacyJobOp message(LegacyMessageOp value) {
    LegacyJobOp x = new LegacyJobOp();
    x.setMessage(value);
    return x;
  }

  public static LegacyJobOp stepComplete(com.parsable.thrift.v1.job_event.StepCompleteOp value) {
    LegacyJobOp x = new LegacyJobOp();
    x.setStepComplete(value);
    return x;
  }

  public static LegacyJobOp stepFieldData(com.parsable.thrift.v1.job_event.StepFieldDataOp value) {
    LegacyJobOp x = new LegacyJobOp();
    x.setStepFieldData(value);
    return x;
  }

  public static LegacyJobOp stepNA(com.parsable.thrift.v1.job_event.StepNotApplicableOp value) {
    LegacyJobOp x = new LegacyJobOp();
    x.setStepNA(value);
    return x;
  }

  public static LegacyJobOp stepGroupConditional(com.parsable.thrift.v1.job_event.StepGroupConditionalOp value) {
    LegacyJobOp x = new LegacyJobOp();
    x.setStepGroupConditional(value);
    return x;
  }

  public static LegacyJobOp stepGroupNA(com.parsable.thrift.v1.job_event.StepGroupNotApplicableOp value) {
    LegacyJobOp x = new LegacyJobOp();
    x.setStepGroupNA(value);
    return x;
  }


  @Override
  protected void checkType(_Fields setField, Object value) throws ClassCastException {
    switch (setField) {
      case TITLE:
        if (value instanceof com.parsable.thrift.v1.common_event.TitleProperty) {
          break;
        }
        throw new ClassCastException("Was expecting value of type com.parsable.thrift.v1.common_event.TitleProperty for field 'title', but got " + value.getClass().getSimpleName());
      case PLANNED:
        if (value instanceof com.parsable.thrift.v1.job_event.PlannedProperty) {
          break;
        }
        throw new ClassCastException("Was expecting value of type com.parsable.thrift.v1.job_event.PlannedProperty for field 'planned', but got " + value.getClass().getSimpleName());
      case ADD_TEMPLATES:
        if (value instanceof com.parsable.thrift.v1.job_event.AddTemplatesOp) {
          break;
        }
        throw new ClassCastException("Was expecting value of type com.parsable.thrift.v1.job_event.AddTemplatesOp for field 'addTemplates', but got " + value.getClass().getSimpleName());
      case ADD_TEMPLATE_SET:
        if (value instanceof com.parsable.thrift.v1.job_event.AddTemplateSetOp) {
          break;
        }
        throw new ClassCastException("Was expecting value of type com.parsable.thrift.v1.job_event.AddTemplateSetOp for field 'addTemplateSet', but got " + value.getClass().getSimpleName());
      case REMOVE_TEMPLATE:
        if (value instanceof com.parsable.thrift.v1.job_event.RemoveTemplateOp) {
          break;
        }
        throw new ClassCastException("Was expecting value of type com.parsable.thrift.v1.job_event.RemoveTemplateOp for field 'removeTemplate', but got " + value.getClass().getSimpleName());
      case MOVE_TEMPLATE:
        if (value instanceof com.parsable.thrift.v1.job_event.MoveTemplateOp) {
          break;
        }
        throw new ClassCastException("Was expecting value of type com.parsable.thrift.v1.job_event.MoveTemplateOp for field 'moveTemplate', but got " + value.getClass().getSimpleName());
      case ADD_STEP:
        if (value instanceof com.parsable.thrift.v1.common_event.AddStepOp) {
          break;
        }
        throw new ClassCastException("Was expecting value of type com.parsable.thrift.v1.common_event.AddStepOp for field 'addStep', but got " + value.getClass().getSimpleName());
      case ADD_STEP_GROUP:
        if (value instanceof com.parsable.thrift.v1.common_event.AddStepGroupOp) {
          break;
        }
        throw new ClassCastException("Was expecting value of type com.parsable.thrift.v1.common_event.AddStepGroupOp for field 'addStepGroup', but got " + value.getClass().getSimpleName());
      case CLONE_STEP:
        if (value instanceof com.parsable.thrift.v1.common_event.CloneStepOp) {
          break;
        }
        throw new ClassCastException("Was expecting value of type com.parsable.thrift.v1.common_event.CloneStepOp for field 'cloneStep', but got " + value.getClass().getSimpleName());
      case CLONE_STEP_GROUP:
        if (value instanceof com.parsable.thrift.v1.common_event.CloneStepGroupOp) {
          break;
        }
        throw new ClassCastException("Was expecting value of type com.parsable.thrift.v1.common_event.CloneStepGroupOp for field 'cloneStepGroup', but got " + value.getClass().getSimpleName());
      case ADD_DOCUMENT:
        if (value instanceof com.parsable.thrift.v1.common_event.AddDocumentOp) {
          break;
        }
        throw new ClassCastException("Was expecting value of type com.parsable.thrift.v1.common_event.AddDocumentOp for field 'addDocument', but got " + value.getClass().getSimpleName());
      case REMOVE_DOCUMENT:
        if (value instanceof com.parsable.thrift.v1.common_event.RemoveDocumentOp) {
          break;
        }
        throw new ClassCastException("Was expecting value of type com.parsable.thrift.v1.common_event.RemoveDocumentOp for field 'removeDocument', but got " + value.getClass().getSimpleName());
      case METADATA_UPDATE:
        if (value instanceof com.parsable.thrift.v1.common_event.MetadataUpdateOp) {
          break;
        }
        throw new ClassCastException("Was expecting value of type com.parsable.thrift.v1.common_event.MetadataUpdateOp for field 'metadataUpdate', but got " + value.getClass().getSimpleName());
      case METADATA_DELETE:
        if (value instanceof com.parsable.thrift.v1.common_event.MetadataDeleteOp) {
          break;
        }
        throw new ClassCastException("Was expecting value of type com.parsable.thrift.v1.common_event.MetadataDeleteOp for field 'metadataDelete', but got " + value.getClass().getSimpleName());
      case CREATION:
        if (value instanceof com.parsable.thrift.v1.job_event.CreateOp) {
          break;
        }
        throw new ClassCastException("Was expecting value of type com.parsable.thrift.v1.job_event.CreateOp for field 'creation', but got " + value.getClass().getSimpleName());
      case MATERIALIZE:
        if (value instanceof com.parsable.thrift.v1.job_event.MaterializeOp) {
          break;
        }
        throw new ClassCastException("Was expecting value of type com.parsable.thrift.v1.job_event.MaterializeOp for field 'materialize', but got " + value.getClass().getSimpleName());
      case START:
        if (value instanceof com.parsable.thrift.v1.job_event.StartOp) {
          break;
        }
        throw new ClassCastException("Was expecting value of type com.parsable.thrift.v1.job_event.StartOp for field 'start', but got " + value.getClass().getSimpleName());
      case ARCHIVE:
        if (value instanceof com.parsable.thrift.v1.common_event.ArchiveOp) {
          break;
        }
        throw new ClassCastException("Was expecting value of type com.parsable.thrift.v1.common_event.ArchiveOp for field 'archive', but got " + value.getClass().getSimpleName());
      case COMPLETE:
        if (value instanceof com.parsable.thrift.v1.job_event.CompleteOp) {
          break;
        }
        throw new ClassCastException("Was expecting value of type com.parsable.thrift.v1.job_event.CompleteOp for field 'complete', but got " + value.getClass().getSimpleName());
      case ADD_ROLE:
        if (value instanceof com.parsable.thrift.v1.job_event.AddRoleOp) {
          break;
        }
        throw new ClassCastException("Was expecting value of type com.parsable.thrift.v1.job_event.AddRoleOp for field 'addRole', but got " + value.getClass().getSimpleName());
      case REMOVE_ROLE:
        if (value instanceof com.parsable.thrift.v1.job_event.RemoveRoleOp) {
          break;
        }
        throw new ClassCastException("Was expecting value of type com.parsable.thrift.v1.job_event.RemoveRoleOp for field 'removeRole', but got " + value.getClass().getSimpleName());
      case MESSAGE:
        if (value instanceof LegacyMessageOp) {
          break;
        }
        throw new ClassCastException("Was expecting value of type LegacyMessageOp for field 'message', but got " + value.getClass().getSimpleName());
      case STEP_COMPLETE:
        if (value instanceof com.parsable.thrift.v1.job_event.StepCompleteOp) {
          break;
        }
        throw new ClassCastException("Was expecting value of type com.parsable.thrift.v1.job_event.StepCompleteOp for field 'stepComplete', but got " + value.getClass().getSimpleName());
      case STEP_FIELD_DATA:
        if (value instanceof com.parsable.thrift.v1.job_event.StepFieldDataOp) {
          break;
        }
        throw new ClassCastException("Was expecting value of type com.parsable.thrift.v1.job_event.StepFieldDataOp for field 'stepFieldData', but got " + value.getClass().getSimpleName());
      case STEP_NA:
        if (value instanceof com.parsable.thrift.v1.job_event.StepNotApplicableOp) {
          break;
        }
        throw new ClassCastException("Was expecting value of type com.parsable.thrift.v1.job_event.StepNotApplicableOp for field 'stepNA', but got " + value.getClass().getSimpleName());
      case STEP_GROUP_CONDITIONAL:
        if (value instanceof com.parsable.thrift.v1.job_event.StepGroupConditionalOp) {
          break;
        }
        throw new ClassCastException("Was expecting value of type com.parsable.thrift.v1.job_event.StepGroupConditionalOp for field 'stepGroupConditional', but got " + value.getClass().getSimpleName());
      case STEP_GROUP_NA:
        if (value instanceof com.parsable.thrift.v1.job_event.StepGroupNotApplicableOp) {
          break;
        }
        throw new ClassCastException("Was expecting value of type com.parsable.thrift.v1.job_event.StepGroupNotApplicableOp for field 'stepGroupNA', but got " + value.getClass().getSimpleName());
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected Object standardSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TField field) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(field.id);
    if (setField != null) {
      switch (setField) {
        case TITLE:
          if (field.type == TITLE_FIELD_DESC.type) {
            com.parsable.thrift.v1.common_event.TitleProperty title;
            title = new com.parsable.thrift.v1.common_event.TitleProperty();
            title.read(iprot);
            return title;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case PLANNED:
          if (field.type == PLANNED_FIELD_DESC.type) {
            com.parsable.thrift.v1.job_event.PlannedProperty planned;
            planned = new com.parsable.thrift.v1.job_event.PlannedProperty();
            planned.read(iprot);
            return planned;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case ADD_TEMPLATES:
          if (field.type == ADD_TEMPLATES_FIELD_DESC.type) {
            com.parsable.thrift.v1.job_event.AddTemplatesOp addTemplates;
            addTemplates = new com.parsable.thrift.v1.job_event.AddTemplatesOp();
            addTemplates.read(iprot);
            return addTemplates;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case ADD_TEMPLATE_SET:
          if (field.type == ADD_TEMPLATE_SET_FIELD_DESC.type) {
            com.parsable.thrift.v1.job_event.AddTemplateSetOp addTemplateSet;
            addTemplateSet = new com.parsable.thrift.v1.job_event.AddTemplateSetOp();
            addTemplateSet.read(iprot);
            return addTemplateSet;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case REMOVE_TEMPLATE:
          if (field.type == REMOVE_TEMPLATE_FIELD_DESC.type) {
            com.parsable.thrift.v1.job_event.RemoveTemplateOp removeTemplate;
            removeTemplate = new com.parsable.thrift.v1.job_event.RemoveTemplateOp();
            removeTemplate.read(iprot);
            return removeTemplate;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case MOVE_TEMPLATE:
          if (field.type == MOVE_TEMPLATE_FIELD_DESC.type) {
            com.parsable.thrift.v1.job_event.MoveTemplateOp moveTemplate;
            moveTemplate = new com.parsable.thrift.v1.job_event.MoveTemplateOp();
            moveTemplate.read(iprot);
            return moveTemplate;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case ADD_STEP:
          if (field.type == ADD_STEP_FIELD_DESC.type) {
            com.parsable.thrift.v1.common_event.AddStepOp addStep;
            addStep = new com.parsable.thrift.v1.common_event.AddStepOp();
            addStep.read(iprot);
            return addStep;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case ADD_STEP_GROUP:
          if (field.type == ADD_STEP_GROUP_FIELD_DESC.type) {
            com.parsable.thrift.v1.common_event.AddStepGroupOp addStepGroup;
            addStepGroup = new com.parsable.thrift.v1.common_event.AddStepGroupOp();
            addStepGroup.read(iprot);
            return addStepGroup;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case CLONE_STEP:
          if (field.type == CLONE_STEP_FIELD_DESC.type) {
            com.parsable.thrift.v1.common_event.CloneStepOp cloneStep;
            cloneStep = new com.parsable.thrift.v1.common_event.CloneStepOp();
            cloneStep.read(iprot);
            return cloneStep;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case CLONE_STEP_GROUP:
          if (field.type == CLONE_STEP_GROUP_FIELD_DESC.type) {
            com.parsable.thrift.v1.common_event.CloneStepGroupOp cloneStepGroup;
            cloneStepGroup = new com.parsable.thrift.v1.common_event.CloneStepGroupOp();
            cloneStepGroup.read(iprot);
            return cloneStepGroup;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case ADD_DOCUMENT:
          if (field.type == ADD_DOCUMENT_FIELD_DESC.type) {
            com.parsable.thrift.v1.common_event.AddDocumentOp addDocument;
            addDocument = new com.parsable.thrift.v1.common_event.AddDocumentOp();
            addDocument.read(iprot);
            return addDocument;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case REMOVE_DOCUMENT:
          if (field.type == REMOVE_DOCUMENT_FIELD_DESC.type) {
            com.parsable.thrift.v1.common_event.RemoveDocumentOp removeDocument;
            removeDocument = new com.parsable.thrift.v1.common_event.RemoveDocumentOp();
            removeDocument.read(iprot);
            return removeDocument;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case METADATA_UPDATE:
          if (field.type == METADATA_UPDATE_FIELD_DESC.type) {
            com.parsable.thrift.v1.common_event.MetadataUpdateOp metadataUpdate;
            metadataUpdate = new com.parsable.thrift.v1.common_event.MetadataUpdateOp();
            metadataUpdate.read(iprot);
            return metadataUpdate;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case METADATA_DELETE:
          if (field.type == METADATA_DELETE_FIELD_DESC.type) {
            com.parsable.thrift.v1.common_event.MetadataDeleteOp metadataDelete;
            metadataDelete = new com.parsable.thrift.v1.common_event.MetadataDeleteOp();
            metadataDelete.read(iprot);
            return metadataDelete;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case CREATION:
          if (field.type == CREATION_FIELD_DESC.type) {
            com.parsable.thrift.v1.job_event.CreateOp creation;
            creation = new com.parsable.thrift.v1.job_event.CreateOp();
            creation.read(iprot);
            return creation;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case MATERIALIZE:
          if (field.type == MATERIALIZE_FIELD_DESC.type) {
            com.parsable.thrift.v1.job_event.MaterializeOp materialize;
            materialize = new com.parsable.thrift.v1.job_event.MaterializeOp();
            materialize.read(iprot);
            return materialize;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case START:
          if (field.type == START_FIELD_DESC.type) {
            com.parsable.thrift.v1.job_event.StartOp start;
            start = new com.parsable.thrift.v1.job_event.StartOp();
            start.read(iprot);
            return start;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case ARCHIVE:
          if (field.type == ARCHIVE_FIELD_DESC.type) {
            com.parsable.thrift.v1.common_event.ArchiveOp archive;
            archive = new com.parsable.thrift.v1.common_event.ArchiveOp();
            archive.read(iprot);
            return archive;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case COMPLETE:
          if (field.type == COMPLETE_FIELD_DESC.type) {
            com.parsable.thrift.v1.job_event.CompleteOp complete;
            complete = new com.parsable.thrift.v1.job_event.CompleteOp();
            complete.read(iprot);
            return complete;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case ADD_ROLE:
          if (field.type == ADD_ROLE_FIELD_DESC.type) {
            com.parsable.thrift.v1.job_event.AddRoleOp addRole;
            addRole = new com.parsable.thrift.v1.job_event.AddRoleOp();
            addRole.read(iprot);
            return addRole;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case REMOVE_ROLE:
          if (field.type == REMOVE_ROLE_FIELD_DESC.type) {
            com.parsable.thrift.v1.job_event.RemoveRoleOp removeRole;
            removeRole = new com.parsable.thrift.v1.job_event.RemoveRoleOp();
            removeRole.read(iprot);
            return removeRole;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case MESSAGE:
          if (field.type == MESSAGE_FIELD_DESC.type) {
            LegacyMessageOp message;
            message = new LegacyMessageOp();
            message.read(iprot);
            return message;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case STEP_COMPLETE:
          if (field.type == STEP_COMPLETE_FIELD_DESC.type) {
            com.parsable.thrift.v1.job_event.StepCompleteOp stepComplete;
            stepComplete = new com.parsable.thrift.v1.job_event.StepCompleteOp();
            stepComplete.read(iprot);
            return stepComplete;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case STEP_FIELD_DATA:
          if (field.type == STEP_FIELD_DATA_FIELD_DESC.type) {
            com.parsable.thrift.v1.job_event.StepFieldDataOp stepFieldData;
            stepFieldData = new com.parsable.thrift.v1.job_event.StepFieldDataOp();
            stepFieldData.read(iprot);
            return stepFieldData;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case STEP_NA:
          if (field.type == STEP_NA_FIELD_DESC.type) {
            com.parsable.thrift.v1.job_event.StepNotApplicableOp stepNA;
            stepNA = new com.parsable.thrift.v1.job_event.StepNotApplicableOp();
            stepNA.read(iprot);
            return stepNA;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case STEP_GROUP_CONDITIONAL:
          if (field.type == STEP_GROUP_CONDITIONAL_FIELD_DESC.type) {
            com.parsable.thrift.v1.job_event.StepGroupConditionalOp stepGroupConditional;
            stepGroupConditional = new com.parsable.thrift.v1.job_event.StepGroupConditionalOp();
            stepGroupConditional.read(iprot);
            return stepGroupConditional;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case STEP_GROUP_NA:
          if (field.type == STEP_GROUP_NA_FIELD_DESC.type) {
            com.parsable.thrift.v1.job_event.StepGroupNotApplicableOp stepGroupNA;
            stepGroupNA = new com.parsable.thrift.v1.job_event.StepGroupNotApplicableOp();
            stepGroupNA.read(iprot);
            return stepGroupNA;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      return null;
    }
  }

  @Override
  protected void standardSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case TITLE:
        com.parsable.thrift.v1.common_event.TitleProperty title = (com.parsable.thrift.v1.common_event.TitleProperty)value_;
        title.write(oprot);
        return;
      case PLANNED:
        com.parsable.thrift.v1.job_event.PlannedProperty planned = (com.parsable.thrift.v1.job_event.PlannedProperty)value_;
        planned.write(oprot);
        return;
      case ADD_TEMPLATES:
        com.parsable.thrift.v1.job_event.AddTemplatesOp addTemplates = (com.parsable.thrift.v1.job_event.AddTemplatesOp)value_;
        addTemplates.write(oprot);
        return;
      case ADD_TEMPLATE_SET:
        com.parsable.thrift.v1.job_event.AddTemplateSetOp addTemplateSet = (com.parsable.thrift.v1.job_event.AddTemplateSetOp)value_;
        addTemplateSet.write(oprot);
        return;
      case REMOVE_TEMPLATE:
        com.parsable.thrift.v1.job_event.RemoveTemplateOp removeTemplate = (com.parsable.thrift.v1.job_event.RemoveTemplateOp)value_;
        removeTemplate.write(oprot);
        return;
      case MOVE_TEMPLATE:
        com.parsable.thrift.v1.job_event.MoveTemplateOp moveTemplate = (com.parsable.thrift.v1.job_event.MoveTemplateOp)value_;
        moveTemplate.write(oprot);
        return;
      case ADD_STEP:
        com.parsable.thrift.v1.common_event.AddStepOp addStep = (com.parsable.thrift.v1.common_event.AddStepOp)value_;
        addStep.write(oprot);
        return;
      case ADD_STEP_GROUP:
        com.parsable.thrift.v1.common_event.AddStepGroupOp addStepGroup = (com.parsable.thrift.v1.common_event.AddStepGroupOp)value_;
        addStepGroup.write(oprot);
        return;
      case CLONE_STEP:
        com.parsable.thrift.v1.common_event.CloneStepOp cloneStep = (com.parsable.thrift.v1.common_event.CloneStepOp)value_;
        cloneStep.write(oprot);
        return;
      case CLONE_STEP_GROUP:
        com.parsable.thrift.v1.common_event.CloneStepGroupOp cloneStepGroup = (com.parsable.thrift.v1.common_event.CloneStepGroupOp)value_;
        cloneStepGroup.write(oprot);
        return;
      case ADD_DOCUMENT:
        com.parsable.thrift.v1.common_event.AddDocumentOp addDocument = (com.parsable.thrift.v1.common_event.AddDocumentOp)value_;
        addDocument.write(oprot);
        return;
      case REMOVE_DOCUMENT:
        com.parsable.thrift.v1.common_event.RemoveDocumentOp removeDocument = (com.parsable.thrift.v1.common_event.RemoveDocumentOp)value_;
        removeDocument.write(oprot);
        return;
      case METADATA_UPDATE:
        com.parsable.thrift.v1.common_event.MetadataUpdateOp metadataUpdate = (com.parsable.thrift.v1.common_event.MetadataUpdateOp)value_;
        metadataUpdate.write(oprot);
        return;
      case METADATA_DELETE:
        com.parsable.thrift.v1.common_event.MetadataDeleteOp metadataDelete = (com.parsable.thrift.v1.common_event.MetadataDeleteOp)value_;
        metadataDelete.write(oprot);
        return;
      case CREATION:
        com.parsable.thrift.v1.job_event.CreateOp creation = (com.parsable.thrift.v1.job_event.CreateOp)value_;
        creation.write(oprot);
        return;
      case MATERIALIZE:
        com.parsable.thrift.v1.job_event.MaterializeOp materialize = (com.parsable.thrift.v1.job_event.MaterializeOp)value_;
        materialize.write(oprot);
        return;
      case START:
        com.parsable.thrift.v1.job_event.StartOp start = (com.parsable.thrift.v1.job_event.StartOp)value_;
        start.write(oprot);
        return;
      case ARCHIVE:
        com.parsable.thrift.v1.common_event.ArchiveOp archive = (com.parsable.thrift.v1.common_event.ArchiveOp)value_;
        archive.write(oprot);
        return;
      case COMPLETE:
        com.parsable.thrift.v1.job_event.CompleteOp complete = (com.parsable.thrift.v1.job_event.CompleteOp)value_;
        complete.write(oprot);
        return;
      case ADD_ROLE:
        com.parsable.thrift.v1.job_event.AddRoleOp addRole = (com.parsable.thrift.v1.job_event.AddRoleOp)value_;
        addRole.write(oprot);
        return;
      case REMOVE_ROLE:
        com.parsable.thrift.v1.job_event.RemoveRoleOp removeRole = (com.parsable.thrift.v1.job_event.RemoveRoleOp)value_;
        removeRole.write(oprot);
        return;
      case MESSAGE:
        LegacyMessageOp message = (LegacyMessageOp)value_;
        message.write(oprot);
        return;
      case STEP_COMPLETE:
        com.parsable.thrift.v1.job_event.StepCompleteOp stepComplete = (com.parsable.thrift.v1.job_event.StepCompleteOp)value_;
        stepComplete.write(oprot);
        return;
      case STEP_FIELD_DATA:
        com.parsable.thrift.v1.job_event.StepFieldDataOp stepFieldData = (com.parsable.thrift.v1.job_event.StepFieldDataOp)value_;
        stepFieldData.write(oprot);
        return;
      case STEP_NA:
        com.parsable.thrift.v1.job_event.StepNotApplicableOp stepNA = (com.parsable.thrift.v1.job_event.StepNotApplicableOp)value_;
        stepNA.write(oprot);
        return;
      case STEP_GROUP_CONDITIONAL:
        com.parsable.thrift.v1.job_event.StepGroupConditionalOp stepGroupConditional = (com.parsable.thrift.v1.job_event.StepGroupConditionalOp)value_;
        stepGroupConditional.write(oprot);
        return;
      case STEP_GROUP_NA:
        com.parsable.thrift.v1.job_event.StepGroupNotApplicableOp stepGroupNA = (com.parsable.thrift.v1.job_event.StepGroupNotApplicableOp)value_;
        stepGroupNA.write(oprot);
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected Object tupleSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, short fieldID) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(fieldID);
    if (setField != null) {
      switch (setField) {
        case TITLE:
          com.parsable.thrift.v1.common_event.TitleProperty title;
          title = new com.parsable.thrift.v1.common_event.TitleProperty();
          title.read(iprot);
          return title;
        case PLANNED:
          com.parsable.thrift.v1.job_event.PlannedProperty planned;
          planned = new com.parsable.thrift.v1.job_event.PlannedProperty();
          planned.read(iprot);
          return planned;
        case ADD_TEMPLATES:
          com.parsable.thrift.v1.job_event.AddTemplatesOp addTemplates;
          addTemplates = new com.parsable.thrift.v1.job_event.AddTemplatesOp();
          addTemplates.read(iprot);
          return addTemplates;
        case ADD_TEMPLATE_SET:
          com.parsable.thrift.v1.job_event.AddTemplateSetOp addTemplateSet;
          addTemplateSet = new com.parsable.thrift.v1.job_event.AddTemplateSetOp();
          addTemplateSet.read(iprot);
          return addTemplateSet;
        case REMOVE_TEMPLATE:
          com.parsable.thrift.v1.job_event.RemoveTemplateOp removeTemplate;
          removeTemplate = new com.parsable.thrift.v1.job_event.RemoveTemplateOp();
          removeTemplate.read(iprot);
          return removeTemplate;
        case MOVE_TEMPLATE:
          com.parsable.thrift.v1.job_event.MoveTemplateOp moveTemplate;
          moveTemplate = new com.parsable.thrift.v1.job_event.MoveTemplateOp();
          moveTemplate.read(iprot);
          return moveTemplate;
        case ADD_STEP:
          com.parsable.thrift.v1.common_event.AddStepOp addStep;
          addStep = new com.parsable.thrift.v1.common_event.AddStepOp();
          addStep.read(iprot);
          return addStep;
        case ADD_STEP_GROUP:
          com.parsable.thrift.v1.common_event.AddStepGroupOp addStepGroup;
          addStepGroup = new com.parsable.thrift.v1.common_event.AddStepGroupOp();
          addStepGroup.read(iprot);
          return addStepGroup;
        case CLONE_STEP:
          com.parsable.thrift.v1.common_event.CloneStepOp cloneStep;
          cloneStep = new com.parsable.thrift.v1.common_event.CloneStepOp();
          cloneStep.read(iprot);
          return cloneStep;
        case CLONE_STEP_GROUP:
          com.parsable.thrift.v1.common_event.CloneStepGroupOp cloneStepGroup;
          cloneStepGroup = new com.parsable.thrift.v1.common_event.CloneStepGroupOp();
          cloneStepGroup.read(iprot);
          return cloneStepGroup;
        case ADD_DOCUMENT:
          com.parsable.thrift.v1.common_event.AddDocumentOp addDocument;
          addDocument = new com.parsable.thrift.v1.common_event.AddDocumentOp();
          addDocument.read(iprot);
          return addDocument;
        case REMOVE_DOCUMENT:
          com.parsable.thrift.v1.common_event.RemoveDocumentOp removeDocument;
          removeDocument = new com.parsable.thrift.v1.common_event.RemoveDocumentOp();
          removeDocument.read(iprot);
          return removeDocument;
        case METADATA_UPDATE:
          com.parsable.thrift.v1.common_event.MetadataUpdateOp metadataUpdate;
          metadataUpdate = new com.parsable.thrift.v1.common_event.MetadataUpdateOp();
          metadataUpdate.read(iprot);
          return metadataUpdate;
        case METADATA_DELETE:
          com.parsable.thrift.v1.common_event.MetadataDeleteOp metadataDelete;
          metadataDelete = new com.parsable.thrift.v1.common_event.MetadataDeleteOp();
          metadataDelete.read(iprot);
          return metadataDelete;
        case CREATION:
          com.parsable.thrift.v1.job_event.CreateOp creation;
          creation = new com.parsable.thrift.v1.job_event.CreateOp();
          creation.read(iprot);
          return creation;
        case MATERIALIZE:
          com.parsable.thrift.v1.job_event.MaterializeOp materialize;
          materialize = new com.parsable.thrift.v1.job_event.MaterializeOp();
          materialize.read(iprot);
          return materialize;
        case START:
          com.parsable.thrift.v1.job_event.StartOp start;
          start = new com.parsable.thrift.v1.job_event.StartOp();
          start.read(iprot);
          return start;
        case ARCHIVE:
          com.parsable.thrift.v1.common_event.ArchiveOp archive;
          archive = new com.parsable.thrift.v1.common_event.ArchiveOp();
          archive.read(iprot);
          return archive;
        case COMPLETE:
          com.parsable.thrift.v1.job_event.CompleteOp complete;
          complete = new com.parsable.thrift.v1.job_event.CompleteOp();
          complete.read(iprot);
          return complete;
        case ADD_ROLE:
          com.parsable.thrift.v1.job_event.AddRoleOp addRole;
          addRole = new com.parsable.thrift.v1.job_event.AddRoleOp();
          addRole.read(iprot);
          return addRole;
        case REMOVE_ROLE:
          com.parsable.thrift.v1.job_event.RemoveRoleOp removeRole;
          removeRole = new com.parsable.thrift.v1.job_event.RemoveRoleOp();
          removeRole.read(iprot);
          return removeRole;
        case MESSAGE:
          LegacyMessageOp message;
          message = new LegacyMessageOp();
          message.read(iprot);
          return message;
        case STEP_COMPLETE:
          com.parsable.thrift.v1.job_event.StepCompleteOp stepComplete;
          stepComplete = new com.parsable.thrift.v1.job_event.StepCompleteOp();
          stepComplete.read(iprot);
          return stepComplete;
        case STEP_FIELD_DATA:
          com.parsable.thrift.v1.job_event.StepFieldDataOp stepFieldData;
          stepFieldData = new com.parsable.thrift.v1.job_event.StepFieldDataOp();
          stepFieldData.read(iprot);
          return stepFieldData;
        case STEP_NA:
          com.parsable.thrift.v1.job_event.StepNotApplicableOp stepNA;
          stepNA = new com.parsable.thrift.v1.job_event.StepNotApplicableOp();
          stepNA.read(iprot);
          return stepNA;
        case STEP_GROUP_CONDITIONAL:
          com.parsable.thrift.v1.job_event.StepGroupConditionalOp stepGroupConditional;
          stepGroupConditional = new com.parsable.thrift.v1.job_event.StepGroupConditionalOp();
          stepGroupConditional.read(iprot);
          return stepGroupConditional;
        case STEP_GROUP_NA:
          com.parsable.thrift.v1.job_event.StepGroupNotApplicableOp stepGroupNA;
          stepGroupNA = new com.parsable.thrift.v1.job_event.StepGroupNotApplicableOp();
          stepGroupNA.read(iprot);
          return stepGroupNA;
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      throw new TProtocolException("Couldn't find a field with field id " + fieldID);
    }
  }

  @Override
  protected void tupleSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case TITLE:
        com.parsable.thrift.v1.common_event.TitleProperty title = (com.parsable.thrift.v1.common_event.TitleProperty)value_;
        title.write(oprot);
        return;
      case PLANNED:
        com.parsable.thrift.v1.job_event.PlannedProperty planned = (com.parsable.thrift.v1.job_event.PlannedProperty)value_;
        planned.write(oprot);
        return;
      case ADD_TEMPLATES:
        com.parsable.thrift.v1.job_event.AddTemplatesOp addTemplates = (com.parsable.thrift.v1.job_event.AddTemplatesOp)value_;
        addTemplates.write(oprot);
        return;
      case ADD_TEMPLATE_SET:
        com.parsable.thrift.v1.job_event.AddTemplateSetOp addTemplateSet = (com.parsable.thrift.v1.job_event.AddTemplateSetOp)value_;
        addTemplateSet.write(oprot);
        return;
      case REMOVE_TEMPLATE:
        com.parsable.thrift.v1.job_event.RemoveTemplateOp removeTemplate = (com.parsable.thrift.v1.job_event.RemoveTemplateOp)value_;
        removeTemplate.write(oprot);
        return;
      case MOVE_TEMPLATE:
        com.parsable.thrift.v1.job_event.MoveTemplateOp moveTemplate = (com.parsable.thrift.v1.job_event.MoveTemplateOp)value_;
        moveTemplate.write(oprot);
        return;
      case ADD_STEP:
        com.parsable.thrift.v1.common_event.AddStepOp addStep = (com.parsable.thrift.v1.common_event.AddStepOp)value_;
        addStep.write(oprot);
        return;
      case ADD_STEP_GROUP:
        com.parsable.thrift.v1.common_event.AddStepGroupOp addStepGroup = (com.parsable.thrift.v1.common_event.AddStepGroupOp)value_;
        addStepGroup.write(oprot);
        return;
      case CLONE_STEP:
        com.parsable.thrift.v1.common_event.CloneStepOp cloneStep = (com.parsable.thrift.v1.common_event.CloneStepOp)value_;
        cloneStep.write(oprot);
        return;
      case CLONE_STEP_GROUP:
        com.parsable.thrift.v1.common_event.CloneStepGroupOp cloneStepGroup = (com.parsable.thrift.v1.common_event.CloneStepGroupOp)value_;
        cloneStepGroup.write(oprot);
        return;
      case ADD_DOCUMENT:
        com.parsable.thrift.v1.common_event.AddDocumentOp addDocument = (com.parsable.thrift.v1.common_event.AddDocumentOp)value_;
        addDocument.write(oprot);
        return;
      case REMOVE_DOCUMENT:
        com.parsable.thrift.v1.common_event.RemoveDocumentOp removeDocument = (com.parsable.thrift.v1.common_event.RemoveDocumentOp)value_;
        removeDocument.write(oprot);
        return;
      case METADATA_UPDATE:
        com.parsable.thrift.v1.common_event.MetadataUpdateOp metadataUpdate = (com.parsable.thrift.v1.common_event.MetadataUpdateOp)value_;
        metadataUpdate.write(oprot);
        return;
      case METADATA_DELETE:
        com.parsable.thrift.v1.common_event.MetadataDeleteOp metadataDelete = (com.parsable.thrift.v1.common_event.MetadataDeleteOp)value_;
        metadataDelete.write(oprot);
        return;
      case CREATION:
        com.parsable.thrift.v1.job_event.CreateOp creation = (com.parsable.thrift.v1.job_event.CreateOp)value_;
        creation.write(oprot);
        return;
      case MATERIALIZE:
        com.parsable.thrift.v1.job_event.MaterializeOp materialize = (com.parsable.thrift.v1.job_event.MaterializeOp)value_;
        materialize.write(oprot);
        return;
      case START:
        com.parsable.thrift.v1.job_event.StartOp start = (com.parsable.thrift.v1.job_event.StartOp)value_;
        start.write(oprot);
        return;
      case ARCHIVE:
        com.parsable.thrift.v1.common_event.ArchiveOp archive = (com.parsable.thrift.v1.common_event.ArchiveOp)value_;
        archive.write(oprot);
        return;
      case COMPLETE:
        com.parsable.thrift.v1.job_event.CompleteOp complete = (com.parsable.thrift.v1.job_event.CompleteOp)value_;
        complete.write(oprot);
        return;
      case ADD_ROLE:
        com.parsable.thrift.v1.job_event.AddRoleOp addRole = (com.parsable.thrift.v1.job_event.AddRoleOp)value_;
        addRole.write(oprot);
        return;
      case REMOVE_ROLE:
        com.parsable.thrift.v1.job_event.RemoveRoleOp removeRole = (com.parsable.thrift.v1.job_event.RemoveRoleOp)value_;
        removeRole.write(oprot);
        return;
      case MESSAGE:
        LegacyMessageOp message = (LegacyMessageOp)value_;
        message.write(oprot);
        return;
      case STEP_COMPLETE:
        com.parsable.thrift.v1.job_event.StepCompleteOp stepComplete = (com.parsable.thrift.v1.job_event.StepCompleteOp)value_;
        stepComplete.write(oprot);
        return;
      case STEP_FIELD_DATA:
        com.parsable.thrift.v1.job_event.StepFieldDataOp stepFieldData = (com.parsable.thrift.v1.job_event.StepFieldDataOp)value_;
        stepFieldData.write(oprot);
        return;
      case STEP_NA:
        com.parsable.thrift.v1.job_event.StepNotApplicableOp stepNA = (com.parsable.thrift.v1.job_event.StepNotApplicableOp)value_;
        stepNA.write(oprot);
        return;
      case STEP_GROUP_CONDITIONAL:
        com.parsable.thrift.v1.job_event.StepGroupConditionalOp stepGroupConditional = (com.parsable.thrift.v1.job_event.StepGroupConditionalOp)value_;
        stepGroupConditional.write(oprot);
        return;
      case STEP_GROUP_NA:
        com.parsable.thrift.v1.job_event.StepGroupNotApplicableOp stepGroupNA = (com.parsable.thrift.v1.job_event.StepGroupNotApplicableOp)value_;
        stepGroupNA.write(oprot);
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TField getFieldDesc(_Fields setField) {
    switch (setField) {
      case TITLE:
        return TITLE_FIELD_DESC;
      case PLANNED:
        return PLANNED_FIELD_DESC;
      case ADD_TEMPLATES:
        return ADD_TEMPLATES_FIELD_DESC;
      case ADD_TEMPLATE_SET:
        return ADD_TEMPLATE_SET_FIELD_DESC;
      case REMOVE_TEMPLATE:
        return REMOVE_TEMPLATE_FIELD_DESC;
      case MOVE_TEMPLATE:
        return MOVE_TEMPLATE_FIELD_DESC;
      case ADD_STEP:
        return ADD_STEP_FIELD_DESC;
      case ADD_STEP_GROUP:
        return ADD_STEP_GROUP_FIELD_DESC;
      case CLONE_STEP:
        return CLONE_STEP_FIELD_DESC;
      case CLONE_STEP_GROUP:
        return CLONE_STEP_GROUP_FIELD_DESC;
      case ADD_DOCUMENT:
        return ADD_DOCUMENT_FIELD_DESC;
      case REMOVE_DOCUMENT:
        return REMOVE_DOCUMENT_FIELD_DESC;
      case METADATA_UPDATE:
        return METADATA_UPDATE_FIELD_DESC;
      case METADATA_DELETE:
        return METADATA_DELETE_FIELD_DESC;
      case CREATION:
        return CREATION_FIELD_DESC;
      case MATERIALIZE:
        return MATERIALIZE_FIELD_DESC;
      case START:
        return START_FIELD_DESC;
      case ARCHIVE:
        return ARCHIVE_FIELD_DESC;
      case COMPLETE:
        return COMPLETE_FIELD_DESC;
      case ADD_ROLE:
        return ADD_ROLE_FIELD_DESC;
      case REMOVE_ROLE:
        return REMOVE_ROLE_FIELD_DESC;
      case MESSAGE:
        return MESSAGE_FIELD_DESC;
      case STEP_COMPLETE:
        return STEP_COMPLETE_FIELD_DESC;
      case STEP_FIELD_DATA:
        return STEP_FIELD_DATA_FIELD_DESC;
      case STEP_NA:
        return STEP_NA_FIELD_DESC;
      case STEP_GROUP_CONDITIONAL:
        return STEP_GROUP_CONDITIONAL_FIELD_DESC;
      case STEP_GROUP_NA:
        return STEP_GROUP_NA_FIELD_DESC;
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TStruct getStructDesc() {
    return STRUCT_DESC;
  }

  @Override
  protected _Fields enumForId(short id) {
    return _Fields.findByThriftIdOrThrow(id);
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public com.parsable.thrift.v1.common_event.TitleProperty getTitle() {
    if (getSetField() == _Fields.TITLE) {
      return (com.parsable.thrift.v1.common_event.TitleProperty)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'title' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setTitle(com.parsable.thrift.v1.common_event.TitleProperty value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.TITLE;
    value_ = value;
  }

  public com.parsable.thrift.v1.job_event.PlannedProperty getPlanned() {
    if (getSetField() == _Fields.PLANNED) {
      return (com.parsable.thrift.v1.job_event.PlannedProperty)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'planned' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setPlanned(com.parsable.thrift.v1.job_event.PlannedProperty value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.PLANNED;
    value_ = value;
  }

  public com.parsable.thrift.v1.job_event.AddTemplatesOp getAddTemplates() {
    if (getSetField() == _Fields.ADD_TEMPLATES) {
      return (com.parsable.thrift.v1.job_event.AddTemplatesOp)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'addTemplates' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setAddTemplates(com.parsable.thrift.v1.job_event.AddTemplatesOp value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.ADD_TEMPLATES;
    value_ = value;
  }

  public com.parsable.thrift.v1.job_event.AddTemplateSetOp getAddTemplateSet() {
    if (getSetField() == _Fields.ADD_TEMPLATE_SET) {
      return (com.parsable.thrift.v1.job_event.AddTemplateSetOp)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'addTemplateSet' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setAddTemplateSet(com.parsable.thrift.v1.job_event.AddTemplateSetOp value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.ADD_TEMPLATE_SET;
    value_ = value;
  }

  public com.parsable.thrift.v1.job_event.RemoveTemplateOp getRemoveTemplate() {
    if (getSetField() == _Fields.REMOVE_TEMPLATE) {
      return (com.parsable.thrift.v1.job_event.RemoveTemplateOp)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'removeTemplate' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setRemoveTemplate(com.parsable.thrift.v1.job_event.RemoveTemplateOp value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.REMOVE_TEMPLATE;
    value_ = value;
  }

  public com.parsable.thrift.v1.job_event.MoveTemplateOp getMoveTemplate() {
    if (getSetField() == _Fields.MOVE_TEMPLATE) {
      return (com.parsable.thrift.v1.job_event.MoveTemplateOp)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'moveTemplate' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setMoveTemplate(com.parsable.thrift.v1.job_event.MoveTemplateOp value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.MOVE_TEMPLATE;
    value_ = value;
  }

  public com.parsable.thrift.v1.common_event.AddStepOp getAddStep() {
    if (getSetField() == _Fields.ADD_STEP) {
      return (com.parsable.thrift.v1.common_event.AddStepOp)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'addStep' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setAddStep(com.parsable.thrift.v1.common_event.AddStepOp value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.ADD_STEP;
    value_ = value;
  }

  public com.parsable.thrift.v1.common_event.AddStepGroupOp getAddStepGroup() {
    if (getSetField() == _Fields.ADD_STEP_GROUP) {
      return (com.parsable.thrift.v1.common_event.AddStepGroupOp)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'addStepGroup' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setAddStepGroup(com.parsable.thrift.v1.common_event.AddStepGroupOp value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.ADD_STEP_GROUP;
    value_ = value;
  }

  public com.parsable.thrift.v1.common_event.CloneStepOp getCloneStep() {
    if (getSetField() == _Fields.CLONE_STEP) {
      return (com.parsable.thrift.v1.common_event.CloneStepOp)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'cloneStep' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setCloneStep(com.parsable.thrift.v1.common_event.CloneStepOp value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.CLONE_STEP;
    value_ = value;
  }

  public com.parsable.thrift.v1.common_event.CloneStepGroupOp getCloneStepGroup() {
    if (getSetField() == _Fields.CLONE_STEP_GROUP) {
      return (com.parsable.thrift.v1.common_event.CloneStepGroupOp)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'cloneStepGroup' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setCloneStepGroup(com.parsable.thrift.v1.common_event.CloneStepGroupOp value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.CLONE_STEP_GROUP;
    value_ = value;
  }

  public com.parsable.thrift.v1.common_event.AddDocumentOp getAddDocument() {
    if (getSetField() == _Fields.ADD_DOCUMENT) {
      return (com.parsable.thrift.v1.common_event.AddDocumentOp)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'addDocument' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setAddDocument(com.parsable.thrift.v1.common_event.AddDocumentOp value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.ADD_DOCUMENT;
    value_ = value;
  }

  public com.parsable.thrift.v1.common_event.RemoveDocumentOp getRemoveDocument() {
    if (getSetField() == _Fields.REMOVE_DOCUMENT) {
      return (com.parsable.thrift.v1.common_event.RemoveDocumentOp)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'removeDocument' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setRemoveDocument(com.parsable.thrift.v1.common_event.RemoveDocumentOp value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.REMOVE_DOCUMENT;
    value_ = value;
  }

  public com.parsable.thrift.v1.common_event.MetadataUpdateOp getMetadataUpdate() {
    if (getSetField() == _Fields.METADATA_UPDATE) {
      return (com.parsable.thrift.v1.common_event.MetadataUpdateOp)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'metadataUpdate' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setMetadataUpdate(com.parsable.thrift.v1.common_event.MetadataUpdateOp value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.METADATA_UPDATE;
    value_ = value;
  }

  public com.parsable.thrift.v1.common_event.MetadataDeleteOp getMetadataDelete() {
    if (getSetField() == _Fields.METADATA_DELETE) {
      return (com.parsable.thrift.v1.common_event.MetadataDeleteOp)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'metadataDelete' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setMetadataDelete(com.parsable.thrift.v1.common_event.MetadataDeleteOp value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.METADATA_DELETE;
    value_ = value;
  }

  public com.parsable.thrift.v1.job_event.CreateOp getCreation() {
    if (getSetField() == _Fields.CREATION) {
      return (com.parsable.thrift.v1.job_event.CreateOp)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'creation' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setCreation(com.parsable.thrift.v1.job_event.CreateOp value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.CREATION;
    value_ = value;
  }

  public com.parsable.thrift.v1.job_event.MaterializeOp getMaterialize() {
    if (getSetField() == _Fields.MATERIALIZE) {
      return (com.parsable.thrift.v1.job_event.MaterializeOp)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'materialize' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setMaterialize(com.parsable.thrift.v1.job_event.MaterializeOp value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.MATERIALIZE;
    value_ = value;
  }

  public com.parsable.thrift.v1.job_event.StartOp getStart() {
    if (getSetField() == _Fields.START) {
      return (com.parsable.thrift.v1.job_event.StartOp)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'start' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setStart(com.parsable.thrift.v1.job_event.StartOp value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.START;
    value_ = value;
  }

  public com.parsable.thrift.v1.common_event.ArchiveOp getArchive() {
    if (getSetField() == _Fields.ARCHIVE) {
      return (com.parsable.thrift.v1.common_event.ArchiveOp)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'archive' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setArchive(com.parsable.thrift.v1.common_event.ArchiveOp value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.ARCHIVE;
    value_ = value;
  }

  public com.parsable.thrift.v1.job_event.CompleteOp getComplete() {
    if (getSetField() == _Fields.COMPLETE) {
      return (com.parsable.thrift.v1.job_event.CompleteOp)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'complete' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setComplete(com.parsable.thrift.v1.job_event.CompleteOp value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.COMPLETE;
    value_ = value;
  }

  public com.parsable.thrift.v1.job_event.AddRoleOp getAddRole() {
    if (getSetField() == _Fields.ADD_ROLE) {
      return (com.parsable.thrift.v1.job_event.AddRoleOp)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'addRole' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setAddRole(com.parsable.thrift.v1.job_event.AddRoleOp value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.ADD_ROLE;
    value_ = value;
  }

  public com.parsable.thrift.v1.job_event.RemoveRoleOp getRemoveRole() {
    if (getSetField() == _Fields.REMOVE_ROLE) {
      return (com.parsable.thrift.v1.job_event.RemoveRoleOp)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'removeRole' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setRemoveRole(com.parsable.thrift.v1.job_event.RemoveRoleOp value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.REMOVE_ROLE;
    value_ = value;
  }

  public LegacyMessageOp getMessage() {
    if (getSetField() == _Fields.MESSAGE) {
      return (LegacyMessageOp)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'message' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setMessage(LegacyMessageOp value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.MESSAGE;
    value_ = value;
  }

  public com.parsable.thrift.v1.job_event.StepCompleteOp getStepComplete() {
    if (getSetField() == _Fields.STEP_COMPLETE) {
      return (com.parsable.thrift.v1.job_event.StepCompleteOp)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'stepComplete' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setStepComplete(com.parsable.thrift.v1.job_event.StepCompleteOp value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.STEP_COMPLETE;
    value_ = value;
  }

  public com.parsable.thrift.v1.job_event.StepFieldDataOp getStepFieldData() {
    if (getSetField() == _Fields.STEP_FIELD_DATA) {
      return (com.parsable.thrift.v1.job_event.StepFieldDataOp)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'stepFieldData' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setStepFieldData(com.parsable.thrift.v1.job_event.StepFieldDataOp value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.STEP_FIELD_DATA;
    value_ = value;
  }

  public com.parsable.thrift.v1.job_event.StepNotApplicableOp getStepNA() {
    if (getSetField() == _Fields.STEP_NA) {
      return (com.parsable.thrift.v1.job_event.StepNotApplicableOp)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'stepNA' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setStepNA(com.parsable.thrift.v1.job_event.StepNotApplicableOp value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.STEP_NA;
    value_ = value;
  }

  public com.parsable.thrift.v1.job_event.StepGroupConditionalOp getStepGroupConditional() {
    if (getSetField() == _Fields.STEP_GROUP_CONDITIONAL) {
      return (com.parsable.thrift.v1.job_event.StepGroupConditionalOp)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'stepGroupConditional' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setStepGroupConditional(com.parsable.thrift.v1.job_event.StepGroupConditionalOp value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.STEP_GROUP_CONDITIONAL;
    value_ = value;
  }

  public com.parsable.thrift.v1.job_event.StepGroupNotApplicableOp getStepGroupNA() {
    if (getSetField() == _Fields.STEP_GROUP_NA) {
      return (com.parsable.thrift.v1.job_event.StepGroupNotApplicableOp)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'stepGroupNA' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setStepGroupNA(com.parsable.thrift.v1.job_event.StepGroupNotApplicableOp value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.STEP_GROUP_NA;
    value_ = value;
  }

  public boolean isSetTitle() {
    return setField_ == _Fields.TITLE;
  }


  public boolean isSetPlanned() {
    return setField_ == _Fields.PLANNED;
  }


  public boolean isSetAddTemplates() {
    return setField_ == _Fields.ADD_TEMPLATES;
  }


  public boolean isSetAddTemplateSet() {
    return setField_ == _Fields.ADD_TEMPLATE_SET;
  }


  public boolean isSetRemoveTemplate() {
    return setField_ == _Fields.REMOVE_TEMPLATE;
  }


  public boolean isSetMoveTemplate() {
    return setField_ == _Fields.MOVE_TEMPLATE;
  }


  public boolean isSetAddStep() {
    return setField_ == _Fields.ADD_STEP;
  }


  public boolean isSetAddStepGroup() {
    return setField_ == _Fields.ADD_STEP_GROUP;
  }


  public boolean isSetCloneStep() {
    return setField_ == _Fields.CLONE_STEP;
  }


  public boolean isSetCloneStepGroup() {
    return setField_ == _Fields.CLONE_STEP_GROUP;
  }


  public boolean isSetAddDocument() {
    return setField_ == _Fields.ADD_DOCUMENT;
  }


  public boolean isSetRemoveDocument() {
    return setField_ == _Fields.REMOVE_DOCUMENT;
  }


  public boolean isSetMetadataUpdate() {
    return setField_ == _Fields.METADATA_UPDATE;
  }


  public boolean isSetMetadataDelete() {
    return setField_ == _Fields.METADATA_DELETE;
  }


  public boolean isSetCreation() {
    return setField_ == _Fields.CREATION;
  }


  public boolean isSetMaterialize() {
    return setField_ == _Fields.MATERIALIZE;
  }


  public boolean isSetStart() {
    return setField_ == _Fields.START;
  }


  public boolean isSetArchive() {
    return setField_ == _Fields.ARCHIVE;
  }


  public boolean isSetComplete() {
    return setField_ == _Fields.COMPLETE;
  }


  public boolean isSetAddRole() {
    return setField_ == _Fields.ADD_ROLE;
  }


  public boolean isSetRemoveRole() {
    return setField_ == _Fields.REMOVE_ROLE;
  }


  public boolean isSetMessage() {
    return setField_ == _Fields.MESSAGE;
  }


  public boolean isSetStepComplete() {
    return setField_ == _Fields.STEP_COMPLETE;
  }


  public boolean isSetStepFieldData() {
    return setField_ == _Fields.STEP_FIELD_DATA;
  }


  public boolean isSetStepNA() {
    return setField_ == _Fields.STEP_NA;
  }


  public boolean isSetStepGroupConditional() {
    return setField_ == _Fields.STEP_GROUP_CONDITIONAL;
  }


  public boolean isSetStepGroupNA() {
    return setField_ == _Fields.STEP_GROUP_NA;
  }


  public boolean equals(Object other) {
    if (other instanceof LegacyJobOp) {
      return equals((LegacyJobOp)other);
    } else {
      return false;
    }
  }

  public boolean equals(LegacyJobOp other) {
    return other != null && getSetField() == other.getSetField() && getFieldValue().equals(other.getFieldValue());
  }

  @Override
  public int compareTo(LegacyJobOp other) {
    int lastComparison = org.apache.thrift.TBaseHelper.compareTo(getSetField(), other.getSetField());
    if (lastComparison == 0) {
      return org.apache.thrift.TBaseHelper.compareTo(getFieldValue(), other.getFieldValue());
    }
    return lastComparison;
  }


  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();
    list.add(this.getClass().getName());
    org.apache.thrift.TFieldIdEnum setField = getSetField();
    if (setField != null) {
      list.add(setField.getThriftFieldId());
      Object value = getFieldValue();
      if (value instanceof org.apache.thrift.TEnum) {
        list.add(((org.apache.thrift.TEnum)getFieldValue()).getValue());
      } else {
        list.add(value);
      }
    }
    return list.hashCode();
  }
  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


}
