/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.parsable.thrift.v1.analytics_event;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class AnalyticsEventService {

  public interface Iface {

    public void sendJobEvents(List<JobAnalyticsEvent> events, boolean waitForEvents) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void sendJobEvents(List<JobAnalyticsEvent> events, boolean waitForEvents) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      send_sendJobEvents(events, waitForEvents);
      recv_sendJobEvents();
    }

    public void send_sendJobEvents(List<JobAnalyticsEvent> events, boolean waitForEvents) throws org.apache.thrift.TException
    {
      sendJobEvents_args args = new sendJobEvents_args();
      args.setEvents(events);
      args.setWaitForEvents(waitForEvents);
      sendBase("sendJobEvents", args);
    }

    public void recv_sendJobEvents() throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      sendJobEvents_result result = new sendJobEvents_result();
      receiveBase(result, "sendJobEvents");
      if (result.err != null) {
        throw result.err;
      }
      return;
    }

  }
  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("sendJobEvents", new sendJobEvents());
      return processMap;
    }

    public static class sendJobEvents<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sendJobEvents_args> {
      public sendJobEvents() {
        super("sendJobEvents");
      }

      public sendJobEvents_args getEmptyArgsInstance() {
        return new sendJobEvents_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public sendJobEvents_result getResult(I iface, sendJobEvents_args args) throws org.apache.thrift.TException {
        sendJobEvents_result result = new sendJobEvents_result();
        try {
          iface.sendJobEvents(args.events, args.waitForEvents);
        } catch (com.wi.director.thrift.v1.common.SystemException err) {
          result.err = err;
        }
        return result;
      }
    }

  }

  public static class sendJobEvents_args implements org.apache.thrift.TBase<sendJobEvents_args, sendJobEvents_args._Fields>, java.io.Serializable, Cloneable, Comparable<sendJobEvents_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendJobEvents_args");

    private static final org.apache.thrift.protocol.TField EVENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("events", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField WAIT_FOR_EVENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("waitForEvents", org.apache.thrift.protocol.TType.BOOL, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendJobEvents_argsStandardSchemeFactory());
    }

    public List<JobAnalyticsEvent> events; // required
    public boolean waitForEvents; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EVENTS((short)1, "events"),
      WAIT_FOR_EVENTS((short)2, "waitForEvents");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EVENTS
            return EVENTS;
          case 2: // WAIT_FOR_EVENTS
            return WAIT_FOR_EVENTS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __WAITFOREVENTS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EVENTS, new org.apache.thrift.meta_data.FieldMetaData("events", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JobAnalyticsEvent.class))));
      tmpMap.put(_Fields.WAIT_FOR_EVENTS, new org.apache.thrift.meta_data.FieldMetaData("waitForEvents", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendJobEvents_args.class, metaDataMap);
    }

    public sendJobEvents_args() {
    }

    public sendJobEvents_args(
      List<JobAnalyticsEvent> events,
      boolean waitForEvents)
    {
      this();
      this.events = events;
      this.waitForEvents = waitForEvents;
      setWaitForEventsIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendJobEvents_args(sendJobEvents_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetEvents()) {
        List<JobAnalyticsEvent> __this__events = new ArrayList<JobAnalyticsEvent>(other.events.size());
        for (JobAnalyticsEvent other_element : other.events) {
          __this__events.add(new JobAnalyticsEvent(other_element));
        }
        this.events = __this__events;
      }
      this.waitForEvents = other.waitForEvents;
    }

    public sendJobEvents_args deepCopy() {
      return new sendJobEvents_args(this);
    }

    @Override
    public void clear() {
      this.events = null;
      setWaitForEventsIsSet(false);
      this.waitForEvents = false;
    }

    public int getEventsSize() {
      return (this.events == null) ? 0 : this.events.size();
    }

    public java.util.Iterator<JobAnalyticsEvent> getEventsIterator() {
      return (this.events == null) ? null : this.events.iterator();
    }

    public void addToEvents(JobAnalyticsEvent elem) {
      if (this.events == null) {
        this.events = new ArrayList<JobAnalyticsEvent>();
      }
      this.events.add(elem);
    }

    public List<JobAnalyticsEvent> getEvents() {
      return this.events;
    }

    public sendJobEvents_args setEvents(List<JobAnalyticsEvent> events) {
      this.events = events;
      return this;
    }

    public void unsetEvents() {
      this.events = null;
    }

    /** Returns true if field events is set (has been assigned a value) and false otherwise */
    public boolean isSetEvents() {
      return this.events != null;
    }

    public void setEventsIsSet(boolean value) {
      if (!value) {
        this.events = null;
      }
    }

    public boolean isWaitForEvents() {
      return this.waitForEvents;
    }

    public sendJobEvents_args setWaitForEvents(boolean waitForEvents) {
      this.waitForEvents = waitForEvents;
      setWaitForEventsIsSet(true);
      return this;
    }

    public void unsetWaitForEvents() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WAITFOREVENTS_ISSET_ID);
    }

    /** Returns true if field waitForEvents is set (has been assigned a value) and false otherwise */
    public boolean isSetWaitForEvents() {
      return EncodingUtils.testBit(__isset_bitfield, __WAITFOREVENTS_ISSET_ID);
    }

    public void setWaitForEventsIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WAITFOREVENTS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EVENTS:
        if (value == null) {
          unsetEvents();
        } else {
          setEvents((List<JobAnalyticsEvent>)value);
        }
        break;

      case WAIT_FOR_EVENTS:
        if (value == null) {
          unsetWaitForEvents();
        } else {
          setWaitForEvents((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EVENTS:
        return getEvents();

      case WAIT_FOR_EVENTS:
        return isWaitForEvents();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EVENTS:
        return isSetEvents();
      case WAIT_FOR_EVENTS:
        return isSetWaitForEvents();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendJobEvents_args)
        return this.equals((sendJobEvents_args)that);
      return false;
    }

    public boolean equals(sendJobEvents_args that) {
      if (that == null)
        return false;

      boolean this_present_events = true && this.isSetEvents();
      boolean that_present_events = true && that.isSetEvents();
      if (this_present_events || that_present_events) {
        if (!(this_present_events && that_present_events))
          return false;
        if (!this.events.equals(that.events))
          return false;
      }

      boolean this_present_waitForEvents = true;
      boolean that_present_waitForEvents = true;
      if (this_present_waitForEvents || that_present_waitForEvents) {
        if (!(this_present_waitForEvents && that_present_waitForEvents))
          return false;
        if (this.waitForEvents != that.waitForEvents)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_events = true && (isSetEvents());
      list.add(present_events);
      if (present_events)
        list.add(events);

      boolean present_waitForEvents = true;
      list.add(present_waitForEvents);
      if (present_waitForEvents)
        list.add(waitForEvents);

      return list.hashCode();
    }

    @Override
    public int compareTo(sendJobEvents_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEvents()).compareTo(other.isSetEvents());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEvents()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.events, other.events);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetWaitForEvents()).compareTo(other.isSetWaitForEvents());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWaitForEvents()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.waitForEvents, other.waitForEvents);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendJobEvents_args(");
      boolean first = true;

      sb.append("events:");
      if (this.events == null) {
        sb.append("null");
      } else {
        sb.append(this.events);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("waitForEvents:");
      sb.append(this.waitForEvents);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendJobEvents_argsStandardSchemeFactory implements SchemeFactory {
      public sendJobEvents_argsStandardScheme getScheme() {
        return new sendJobEvents_argsStandardScheme();
      }
    }

    private static class sendJobEvents_argsStandardScheme extends StandardScheme<sendJobEvents_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendJobEvents_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EVENTS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.events = new ArrayList<JobAnalyticsEvent>(_list0.size);
                  JobAnalyticsEvent _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = new JobAnalyticsEvent();
                    _elem1.read(iprot);
                    struct.events.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setEventsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // WAIT_FOR_EVENTS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.waitForEvents = iprot.readBool();
                struct.setWaitForEventsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendJobEvents_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.events != null) {
          oprot.writeFieldBegin(EVENTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.events.size()));
            for (JobAnalyticsEvent _iter3 : struct.events)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(WAIT_FOR_EVENTS_FIELD_DESC);
        oprot.writeBool(struct.waitForEvents);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class sendJobEvents_result implements org.apache.thrift.TBase<sendJobEvents_result, sendJobEvents_result._Fields>, java.io.Serializable, Cloneable, Comparable<sendJobEvents_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendJobEvents_result");

    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendJobEvents_resultStandardSchemeFactory());
    }

    public com.wi.director.thrift.v1.common.SystemException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendJobEvents_result.class, metaDataMap);
    }

    public sendJobEvents_result() {
    }

    public sendJobEvents_result(
      com.wi.director.thrift.v1.common.SystemException err)
    {
      this();
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendJobEvents_result(sendJobEvents_result other) {
      if (other.isSetErr()) {
        this.err = new com.wi.director.thrift.v1.common.SystemException(other.err);
      }
    }

    public sendJobEvents_result deepCopy() {
      return new sendJobEvents_result(this);
    }

    @Override
    public void clear() {
      this.err = null;
    }

    public com.wi.director.thrift.v1.common.SystemException getErr() {
      return this.err;
    }

    public sendJobEvents_result setErr(com.wi.director.thrift.v1.common.SystemException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((com.wi.director.thrift.v1.common.SystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendJobEvents_result)
        return this.equals((sendJobEvents_result)that);
      return false;
    }

    public boolean equals(sendJobEvents_result that) {
      if (that == null)
        return false;

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(sendJobEvents_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendJobEvents_result(");
      boolean first = true;

      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendJobEvents_resultStandardSchemeFactory implements SchemeFactory {
      public sendJobEvents_resultStandardScheme getScheme() {
        return new sendJobEvents_resultStandardScheme();
      }
    }

    private static class sendJobEvents_resultStandardScheme extends StandardScheme<sendJobEvents_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendJobEvents_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new com.wi.director.thrift.v1.common.SystemException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendJobEvents_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

}
