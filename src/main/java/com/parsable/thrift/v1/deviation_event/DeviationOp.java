/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.parsable.thrift.v1.deviation_event;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class DeviationOp implements org.apache.thrift.TBase<DeviationOp, DeviationOp._Fields>, java.io.Serializable, Cloneable, Comparable<DeviationOp> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DeviationOp");

  private static final org.apache.thrift.protocol.TField DEV_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("devType", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField REF_FIELD_DESC = new org.apache.thrift.protocol.TField("ref", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField OPEN_FIELD_DESC = new org.apache.thrift.protocol.TField("open", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField DEVIATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("deviationId", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("index", org.apache.thrift.protocol.TType.I32, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DeviationOpStandardSchemeFactory());
  }

  /**
   * 
   * @see com.wi.director.thrift.v1.job.JobDeviationType
   */
  public com.wi.director.thrift.v1.job.JobDeviationType devType; // required
  public com.wi.director.thrift.v1.job.JobDeviationRef ref; // required
  public boolean open; // required
  public String deviationId; // optional
  public int index; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see com.wi.director.thrift.v1.job.JobDeviationType
     */
    DEV_TYPE((short)1, "devType"),
    REF((short)2, "ref"),
    OPEN((short)3, "open"),
    DEVIATION_ID((short)4, "deviationId"),
    INDEX((short)5, "index");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DEV_TYPE
          return DEV_TYPE;
        case 2: // REF
          return REF;
        case 3: // OPEN
          return OPEN;
        case 4: // DEVIATION_ID
          return DEVIATION_ID;
        case 5: // INDEX
          return INDEX;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __OPEN_ISSET_ID = 0;
  private static final int __INDEX_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.DEVIATION_ID,_Fields.INDEX};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DEV_TYPE, new org.apache.thrift.meta_data.FieldMetaData("devType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.wi.director.thrift.v1.job.JobDeviationType.class)));
    tmpMap.put(_Fields.REF, new org.apache.thrift.meta_data.FieldMetaData("ref", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.job.JobDeviationRef.class)));
    tmpMap.put(_Fields.OPEN, new org.apache.thrift.meta_data.FieldMetaData("open", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DEVIATION_ID, new org.apache.thrift.meta_data.FieldMetaData("deviationId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "UUID")));
    tmpMap.put(_Fields.INDEX, new org.apache.thrift.meta_data.FieldMetaData("index", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DeviationOp.class, metaDataMap);
  }

  public DeviationOp() {
  }

  public DeviationOp(
    com.wi.director.thrift.v1.job.JobDeviationType devType,
    com.wi.director.thrift.v1.job.JobDeviationRef ref,
    boolean open)
  {
    this();
    this.devType = devType;
    this.ref = ref;
    this.open = open;
    setOpenIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DeviationOp(DeviationOp other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetDevType()) {
      this.devType = other.devType;
    }
    if (other.isSetRef()) {
      this.ref = new com.wi.director.thrift.v1.job.JobDeviationRef(other.ref);
    }
    this.open = other.open;
    if (other.isSetDeviationId()) {
      this.deviationId = other.deviationId;
    }
    this.index = other.index;
  }

  public DeviationOp deepCopy() {
    return new DeviationOp(this);
  }

  @Override
  public void clear() {
    this.devType = null;
    this.ref = null;
    setOpenIsSet(false);
    this.open = false;
    this.deviationId = null;
    setIndexIsSet(false);
    this.index = 0;
  }

  /**
   * 
   * @see com.wi.director.thrift.v1.job.JobDeviationType
   */
  public com.wi.director.thrift.v1.job.JobDeviationType getDevType() {
    return this.devType;
  }

  /**
   * 
   * @see com.wi.director.thrift.v1.job.JobDeviationType
   */
  public DeviationOp setDevType(com.wi.director.thrift.v1.job.JobDeviationType devType) {
    this.devType = devType;
    return this;
  }

  public void unsetDevType() {
    this.devType = null;
  }

  /** Returns true if field devType is set (has been assigned a value) and false otherwise */
  public boolean isSetDevType() {
    return this.devType != null;
  }

  public void setDevTypeIsSet(boolean value) {
    if (!value) {
      this.devType = null;
    }
  }

  public com.wi.director.thrift.v1.job.JobDeviationRef getRef() {
    return this.ref;
  }

  public DeviationOp setRef(com.wi.director.thrift.v1.job.JobDeviationRef ref) {
    this.ref = ref;
    return this;
  }

  public void unsetRef() {
    this.ref = null;
  }

  /** Returns true if field ref is set (has been assigned a value) and false otherwise */
  public boolean isSetRef() {
    return this.ref != null;
  }

  public void setRefIsSet(boolean value) {
    if (!value) {
      this.ref = null;
    }
  }

  public boolean isOpen() {
    return this.open;
  }

  public DeviationOp setOpen(boolean open) {
    this.open = open;
    setOpenIsSet(true);
    return this;
  }

  public void unsetOpen() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPEN_ISSET_ID);
  }

  /** Returns true if field open is set (has been assigned a value) and false otherwise */
  public boolean isSetOpen() {
    return EncodingUtils.testBit(__isset_bitfield, __OPEN_ISSET_ID);
  }

  public void setOpenIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPEN_ISSET_ID, value);
  }

  public String getDeviationId() {
    return this.deviationId;
  }

  public DeviationOp setDeviationId(String deviationId) {
    this.deviationId = deviationId;
    return this;
  }

  public void unsetDeviationId() {
    this.deviationId = null;
  }

  /** Returns true if field deviationId is set (has been assigned a value) and false otherwise */
  public boolean isSetDeviationId() {
    return this.deviationId != null;
  }

  public void setDeviationIdIsSet(boolean value) {
    if (!value) {
      this.deviationId = null;
    }
  }

  public int getIndex() {
    return this.index;
  }

  public DeviationOp setIndex(int index) {
    this.index = index;
    setIndexIsSet(true);
    return this;
  }

  public void unsetIndex() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INDEX_ISSET_ID);
  }

  /** Returns true if field index is set (has been assigned a value) and false otherwise */
  public boolean isSetIndex() {
    return EncodingUtils.testBit(__isset_bitfield, __INDEX_ISSET_ID);
  }

  public void setIndexIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INDEX_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DEV_TYPE:
      if (value == null) {
        unsetDevType();
      } else {
        setDevType((com.wi.director.thrift.v1.job.JobDeviationType)value);
      }
      break;

    case REF:
      if (value == null) {
        unsetRef();
      } else {
        setRef((com.wi.director.thrift.v1.job.JobDeviationRef)value);
      }
      break;

    case OPEN:
      if (value == null) {
        unsetOpen();
      } else {
        setOpen((Boolean)value);
      }
      break;

    case DEVIATION_ID:
      if (value == null) {
        unsetDeviationId();
      } else {
        setDeviationId((String)value);
      }
      break;

    case INDEX:
      if (value == null) {
        unsetIndex();
      } else {
        setIndex((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DEV_TYPE:
      return getDevType();

    case REF:
      return getRef();

    case OPEN:
      return isOpen();

    case DEVIATION_ID:
      return getDeviationId();

    case INDEX:
      return getIndex();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DEV_TYPE:
      return isSetDevType();
    case REF:
      return isSetRef();
    case OPEN:
      return isSetOpen();
    case DEVIATION_ID:
      return isSetDeviationId();
    case INDEX:
      return isSetIndex();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DeviationOp)
      return this.equals((DeviationOp)that);
    return false;
  }

  public boolean equals(DeviationOp that) {
    if (that == null)
      return false;

    boolean this_present_devType = true && this.isSetDevType();
    boolean that_present_devType = true && that.isSetDevType();
    if (this_present_devType || that_present_devType) {
      if (!(this_present_devType && that_present_devType))
        return false;
      if (!this.devType.equals(that.devType))
        return false;
    }

    boolean this_present_ref = true && this.isSetRef();
    boolean that_present_ref = true && that.isSetRef();
    if (this_present_ref || that_present_ref) {
      if (!(this_present_ref && that_present_ref))
        return false;
      if (!this.ref.equals(that.ref))
        return false;
    }

    boolean this_present_open = true;
    boolean that_present_open = true;
    if (this_present_open || that_present_open) {
      if (!(this_present_open && that_present_open))
        return false;
      if (this.open != that.open)
        return false;
    }

    boolean this_present_deviationId = true && this.isSetDeviationId();
    boolean that_present_deviationId = true && that.isSetDeviationId();
    if (this_present_deviationId || that_present_deviationId) {
      if (!(this_present_deviationId && that_present_deviationId))
        return false;
      if (!this.deviationId.equals(that.deviationId))
        return false;
    }

    boolean this_present_index = true && this.isSetIndex();
    boolean that_present_index = true && that.isSetIndex();
    if (this_present_index || that_present_index) {
      if (!(this_present_index && that_present_index))
        return false;
      if (this.index != that.index)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_devType = true && (isSetDevType());
    list.add(present_devType);
    if (present_devType)
      list.add(devType.getValue());

    boolean present_ref = true && (isSetRef());
    list.add(present_ref);
    if (present_ref)
      list.add(ref);

    boolean present_open = true;
    list.add(present_open);
    if (present_open)
      list.add(open);

    boolean present_deviationId = true && (isSetDeviationId());
    list.add(present_deviationId);
    if (present_deviationId)
      list.add(deviationId);

    boolean present_index = true && (isSetIndex());
    list.add(present_index);
    if (present_index)
      list.add(index);

    return list.hashCode();
  }

  @Override
  public int compareTo(DeviationOp other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetDevType()).compareTo(other.isSetDevType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDevType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.devType, other.devType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRef()).compareTo(other.isSetRef());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRef()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ref, other.ref);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOpen()).compareTo(other.isSetOpen());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpen()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.open, other.open);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeviationId()).compareTo(other.isSetDeviationId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeviationId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviationId, other.deviationId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIndex()).compareTo(other.isSetIndex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIndex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.index, other.index);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DeviationOp(");
    boolean first = true;

    sb.append("devType:");
    if (this.devType == null) {
      sb.append("null");
    } else {
      sb.append(this.devType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ref:");
    if (this.ref == null) {
      sb.append("null");
    } else {
      sb.append(this.ref);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("open:");
    sb.append(this.open);
    first = false;
    if (isSetDeviationId()) {
      if (!first) sb.append(", ");
      sb.append("deviationId:");
      if (this.deviationId == null) {
        sb.append("null");
      } else {
        sb.append(this.deviationId);
      }
      first = false;
    }
    if (isSetIndex()) {
      if (!first) sb.append(", ");
      sb.append("index:");
      sb.append(this.index);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (devType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'devType' was not present! Struct: " + toString());
    }
    if (ref == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'ref' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'open' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
    if (ref != null) {
      ref.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DeviationOpStandardSchemeFactory implements SchemeFactory {
    public DeviationOpStandardScheme getScheme() {
      return new DeviationOpStandardScheme();
    }
  }

  private static class DeviationOpStandardScheme extends StandardScheme<DeviationOp> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DeviationOp struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DEV_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.devType = com.wi.director.thrift.v1.job.JobDeviationType.findByValue(iprot.readI32());
              struct.setDevTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // REF
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ref = new com.wi.director.thrift.v1.job.JobDeviationRef();
              struct.ref.read(iprot);
              struct.setRefIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OPEN
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.open = iprot.readBool();
              struct.setOpenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DEVIATION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deviationId = iprot.readString();
              struct.setDeviationIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.index = iprot.readI32();
              struct.setIndexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetOpen()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'open' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DeviationOp struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.devType != null) {
        oprot.writeFieldBegin(DEV_TYPE_FIELD_DESC);
        oprot.writeI32(struct.devType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.ref != null) {
        oprot.writeFieldBegin(REF_FIELD_DESC);
        struct.ref.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(OPEN_FIELD_DESC);
      oprot.writeBool(struct.open);
      oprot.writeFieldEnd();
      if (struct.deviationId != null) {
        if (struct.isSetDeviationId()) {
          oprot.writeFieldBegin(DEVIATION_ID_FIELD_DESC);
          oprot.writeString(struct.deviationId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIndex()) {
        oprot.writeFieldBegin(INDEX_FIELD_DESC);
        oprot.writeI32(struct.index);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

}

