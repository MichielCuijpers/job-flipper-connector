/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.parsable.thrift.v1.reference;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class DataSheetRef implements org.apache.thrift.TBase<DataSheetRef, DataSheetRef._Fields>, java.io.Serializable, Cloneable, Comparable<DataSheetRef> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DataSheetRef");

  private static final org.apache.thrift.protocol.TField DEFINITION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("definitionId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("setId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DEFINITION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("definitionName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SET_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("setName", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DataSheetRefStandardSchemeFactory());
  }

  public String definitionId; // required
  public String setId; // required
  public String definitionName; // optional
  public String setName; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DEFINITION_ID((short)1, "definitionId"),
    SET_ID((short)2, "setId"),
    DEFINITION_NAME((short)3, "definitionName"),
    SET_NAME((short)4, "setName");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DEFINITION_ID
          return DEFINITION_ID;
        case 2: // SET_ID
          return SET_ID;
        case 3: // DEFINITION_NAME
          return DEFINITION_NAME;
        case 4: // SET_NAME
          return SET_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.DEFINITION_NAME,_Fields.SET_NAME};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DEFINITION_ID, new org.apache.thrift.meta_data.FieldMetaData("definitionId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SET_ID, new org.apache.thrift.meta_data.FieldMetaData("setId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEFINITION_NAME, new org.apache.thrift.meta_data.FieldMetaData("definitionName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SET_NAME, new org.apache.thrift.meta_data.FieldMetaData("setName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DataSheetRef.class, metaDataMap);
  }

  public DataSheetRef() {
  }

  public DataSheetRef(
    String definitionId,
    String setId)
  {
    this();
    this.definitionId = definitionId;
    this.setId = setId;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DataSheetRef(DataSheetRef other) {
    if (other.isSetDefinitionId()) {
      this.definitionId = other.definitionId;
    }
    if (other.isSetSetId()) {
      this.setId = other.setId;
    }
    if (other.isSetDefinitionName()) {
      this.definitionName = other.definitionName;
    }
    if (other.isSetSetName()) {
      this.setName = other.setName;
    }
  }

  public DataSheetRef deepCopy() {
    return new DataSheetRef(this);
  }

  @Override
  public void clear() {
    this.definitionId = null;
    this.setId = null;
    this.definitionName = null;
    this.setName = null;
  }

  public String getDefinitionId() {
    return this.definitionId;
  }

  public DataSheetRef setDefinitionId(String definitionId) {
    this.definitionId = definitionId;
    return this;
  }

  public void unsetDefinitionId() {
    this.definitionId = null;
  }

  /** Returns true if field definitionId is set (has been assigned a value) and false otherwise */
  public boolean isSetDefinitionId() {
    return this.definitionId != null;
  }

  public void setDefinitionIdIsSet(boolean value) {
    if (!value) {
      this.definitionId = null;
    }
  }

  public String getSetId() {
    return this.setId;
  }

  public DataSheetRef setSetId(String setId) {
    this.setId = setId;
    return this;
  }

  public void unsetSetId() {
    this.setId = null;
  }

  /** Returns true if field setId is set (has been assigned a value) and false otherwise */
  public boolean isSetSetId() {
    return this.setId != null;
  }

  public void setSetIdIsSet(boolean value) {
    if (!value) {
      this.setId = null;
    }
  }

  public String getDefinitionName() {
    return this.definitionName;
  }

  public DataSheetRef setDefinitionName(String definitionName) {
    this.definitionName = definitionName;
    return this;
  }

  public void unsetDefinitionName() {
    this.definitionName = null;
  }

  /** Returns true if field definitionName is set (has been assigned a value) and false otherwise */
  public boolean isSetDefinitionName() {
    return this.definitionName != null;
  }

  public void setDefinitionNameIsSet(boolean value) {
    if (!value) {
      this.definitionName = null;
    }
  }

  public String getSetName() {
    return this.setName;
  }

  public DataSheetRef setSetName(String setName) {
    this.setName = setName;
    return this;
  }

  public void unsetSetName() {
    this.setName = null;
  }

  /** Returns true if field setName is set (has been assigned a value) and false otherwise */
  public boolean isSetSetName() {
    return this.setName != null;
  }

  public void setSetNameIsSet(boolean value) {
    if (!value) {
      this.setName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DEFINITION_ID:
      if (value == null) {
        unsetDefinitionId();
      } else {
        setDefinitionId((String)value);
      }
      break;

    case SET_ID:
      if (value == null) {
        unsetSetId();
      } else {
        setSetId((String)value);
      }
      break;

    case DEFINITION_NAME:
      if (value == null) {
        unsetDefinitionName();
      } else {
        setDefinitionName((String)value);
      }
      break;

    case SET_NAME:
      if (value == null) {
        unsetSetName();
      } else {
        setSetName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DEFINITION_ID:
      return getDefinitionId();

    case SET_ID:
      return getSetId();

    case DEFINITION_NAME:
      return getDefinitionName();

    case SET_NAME:
      return getSetName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DEFINITION_ID:
      return isSetDefinitionId();
    case SET_ID:
      return isSetSetId();
    case DEFINITION_NAME:
      return isSetDefinitionName();
    case SET_NAME:
      return isSetSetName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DataSheetRef)
      return this.equals((DataSheetRef)that);
    return false;
  }

  public boolean equals(DataSheetRef that) {
    if (that == null)
      return false;

    boolean this_present_definitionId = true && this.isSetDefinitionId();
    boolean that_present_definitionId = true && that.isSetDefinitionId();
    if (this_present_definitionId || that_present_definitionId) {
      if (!(this_present_definitionId && that_present_definitionId))
        return false;
      if (!this.definitionId.equals(that.definitionId))
        return false;
    }

    boolean this_present_setId = true && this.isSetSetId();
    boolean that_present_setId = true && that.isSetSetId();
    if (this_present_setId || that_present_setId) {
      if (!(this_present_setId && that_present_setId))
        return false;
      if (!this.setId.equals(that.setId))
        return false;
    }

    boolean this_present_definitionName = true && this.isSetDefinitionName();
    boolean that_present_definitionName = true && that.isSetDefinitionName();
    if (this_present_definitionName || that_present_definitionName) {
      if (!(this_present_definitionName && that_present_definitionName))
        return false;
      if (!this.definitionName.equals(that.definitionName))
        return false;
    }

    boolean this_present_setName = true && this.isSetSetName();
    boolean that_present_setName = true && that.isSetSetName();
    if (this_present_setName || that_present_setName) {
      if (!(this_present_setName && that_present_setName))
        return false;
      if (!this.setName.equals(that.setName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_definitionId = true && (isSetDefinitionId());
    list.add(present_definitionId);
    if (present_definitionId)
      list.add(definitionId);

    boolean present_setId = true && (isSetSetId());
    list.add(present_setId);
    if (present_setId)
      list.add(setId);

    boolean present_definitionName = true && (isSetDefinitionName());
    list.add(present_definitionName);
    if (present_definitionName)
      list.add(definitionName);

    boolean present_setName = true && (isSetSetName());
    list.add(present_setName);
    if (present_setName)
      list.add(setName);

    return list.hashCode();
  }

  @Override
  public int compareTo(DataSheetRef other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetDefinitionId()).compareTo(other.isSetDefinitionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDefinitionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.definitionId, other.definitionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSetId()).compareTo(other.isSetSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.setId, other.setId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDefinitionName()).compareTo(other.isSetDefinitionName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDefinitionName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.definitionName, other.definitionName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSetName()).compareTo(other.isSetSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.setName, other.setName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DataSheetRef(");
    boolean first = true;

    sb.append("definitionId:");
    if (this.definitionId == null) {
      sb.append("null");
    } else {
      sb.append(this.definitionId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("setId:");
    if (this.setId == null) {
      sb.append("null");
    } else {
      sb.append(this.setId);
    }
    first = false;
    if (isSetDefinitionName()) {
      if (!first) sb.append(", ");
      sb.append("definitionName:");
      if (this.definitionName == null) {
        sb.append("null");
      } else {
        sb.append(this.definitionName);
      }
      first = false;
    }
    if (isSetSetName()) {
      if (!first) sb.append(", ");
      sb.append("setName:");
      if (this.setName == null) {
        sb.append("null");
      } else {
        sb.append(this.setName);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (definitionId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'definitionId' was not present! Struct: " + toString());
    }
    if (setId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'setId' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DataSheetRefStandardSchemeFactory implements SchemeFactory {
    public DataSheetRefStandardScheme getScheme() {
      return new DataSheetRefStandardScheme();
    }
  }

  private static class DataSheetRefStandardScheme extends StandardScheme<DataSheetRef> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DataSheetRef struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DEFINITION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.definitionId = iprot.readString();
              struct.setDefinitionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SET_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.setId = iprot.readString();
              struct.setSetIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DEFINITION_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.definitionName = iprot.readString();
              struct.setDefinitionNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SET_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.setName = iprot.readString();
              struct.setSetNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DataSheetRef struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.definitionId != null) {
        oprot.writeFieldBegin(DEFINITION_ID_FIELD_DESC);
        oprot.writeString(struct.definitionId);
        oprot.writeFieldEnd();
      }
      if (struct.setId != null) {
        oprot.writeFieldBegin(SET_ID_FIELD_DESC);
        oprot.writeString(struct.setId);
        oprot.writeFieldEnd();
      }
      if (struct.definitionName != null) {
        if (struct.isSetDefinitionName()) {
          oprot.writeFieldBegin(DEFINITION_NAME_FIELD_DESC);
          oprot.writeString(struct.definitionName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.setName != null) {
        if (struct.isSetSetName()) {
          oprot.writeFieldBegin(SET_NAME_FIELD_DESC);
          oprot.writeString(struct.setName);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

}

