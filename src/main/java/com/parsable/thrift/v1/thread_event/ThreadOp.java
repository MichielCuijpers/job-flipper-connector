/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.parsable.thrift.v1.thread_event;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
public class ThreadOp extends org.apache.thrift.TUnion<ThreadOp, ThreadOp._Fields> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ThreadOp");
  private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField CREATION_FIELD_DESC = new org.apache.thrift.protocol.TField("creation", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField UPDATE_FIELD_DESC = new org.apache.thrift.protocol.TField("update", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField SUBSCRIBE_FIELD_DESC = new org.apache.thrift.protocol.TField("subscribe", org.apache.thrift.protocol.TType.STRUCT, (short)100);
  private static final org.apache.thrift.protocol.TField UNSUBSCRIBE_FIELD_DESC = new org.apache.thrift.protocol.TField("unsubscribe", org.apache.thrift.protocol.TType.STRUCT, (short)101);

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MESSAGE((short)1, "message"),
    CREATION((short)2, "creation"),
    UPDATE((short)3, "update"),
    SUBSCRIBE((short)100, "subscribe"),
    UNSUBSCRIBE((short)101, "unsubscribe");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MESSAGE
          return MESSAGE;
        case 2: // CREATION
          return CREATION;
        case 3: // UPDATE
          return UPDATE;
        case 100: // SUBSCRIBE
          return SUBSCRIBE;
        case 101: // UNSUBSCRIBE
          return UNSUBSCRIBE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("message", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MessageOp.class)));
    tmpMap.put(_Fields.CREATION, new org.apache.thrift.meta_data.FieldMetaData("creation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CreateOp.class)));
    tmpMap.put(_Fields.UPDATE, new org.apache.thrift.meta_data.FieldMetaData("update", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UpdateOp.class)));
    tmpMap.put(_Fields.SUBSCRIBE, new org.apache.thrift.meta_data.FieldMetaData("subscribe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.parsable.thrift.v1.common_event.FetchAndSubscribeOp.class)));
    tmpMap.put(_Fields.UNSUBSCRIBE, new org.apache.thrift.meta_data.FieldMetaData("unsubscribe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.parsable.thrift.v1.common_event.UnsubscribeOp.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ThreadOp.class, metaDataMap);
  }

  public ThreadOp() {
    super();
  }

  public ThreadOp(_Fields setField, Object value) {
    super(setField, value);
  }

  public ThreadOp(ThreadOp other) {
    super(other);
  }
  public ThreadOp deepCopy() {
    return new ThreadOp(this);
  }

  public static ThreadOp message(MessageOp value) {
    ThreadOp x = new ThreadOp();
    x.setMessage(value);
    return x;
  }

  public static ThreadOp creation(CreateOp value) {
    ThreadOp x = new ThreadOp();
    x.setCreation(value);
    return x;
  }

  public static ThreadOp update(UpdateOp value) {
    ThreadOp x = new ThreadOp();
    x.setUpdate(value);
    return x;
  }

  public static ThreadOp subscribe(com.parsable.thrift.v1.common_event.FetchAndSubscribeOp value) {
    ThreadOp x = new ThreadOp();
    x.setSubscribe(value);
    return x;
  }

  public static ThreadOp unsubscribe(com.parsable.thrift.v1.common_event.UnsubscribeOp value) {
    ThreadOp x = new ThreadOp();
    x.setUnsubscribe(value);
    return x;
  }


  @Override
  protected void checkType(_Fields setField, Object value) throws ClassCastException {
    switch (setField) {
      case MESSAGE:
        if (value instanceof MessageOp) {
          break;
        }
        throw new ClassCastException("Was expecting value of type MessageOp for field 'message', but got " + value.getClass().getSimpleName());
      case CREATION:
        if (value instanceof CreateOp) {
          break;
        }
        throw new ClassCastException("Was expecting value of type CreateOp for field 'creation', but got " + value.getClass().getSimpleName());
      case UPDATE:
        if (value instanceof UpdateOp) {
          break;
        }
        throw new ClassCastException("Was expecting value of type UpdateOp for field 'update', but got " + value.getClass().getSimpleName());
      case SUBSCRIBE:
        if (value instanceof com.parsable.thrift.v1.common_event.FetchAndSubscribeOp) {
          break;
        }
        throw new ClassCastException("Was expecting value of type com.parsable.thrift.v1.common_event.FetchAndSubscribeOp for field 'subscribe', but got " + value.getClass().getSimpleName());
      case UNSUBSCRIBE:
        if (value instanceof com.parsable.thrift.v1.common_event.UnsubscribeOp) {
          break;
        }
        throw new ClassCastException("Was expecting value of type com.parsable.thrift.v1.common_event.UnsubscribeOp for field 'unsubscribe', but got " + value.getClass().getSimpleName());
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected Object standardSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TField field) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(field.id);
    if (setField != null) {
      switch (setField) {
        case MESSAGE:
          if (field.type == MESSAGE_FIELD_DESC.type) {
            MessageOp message;
            message = new MessageOp();
            message.read(iprot);
            return message;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case CREATION:
          if (field.type == CREATION_FIELD_DESC.type) {
            CreateOp creation;
            creation = new CreateOp();
            creation.read(iprot);
            return creation;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case UPDATE:
          if (field.type == UPDATE_FIELD_DESC.type) {
            UpdateOp update;
            update = new UpdateOp();
            update.read(iprot);
            return update;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case SUBSCRIBE:
          if (field.type == SUBSCRIBE_FIELD_DESC.type) {
            com.parsable.thrift.v1.common_event.FetchAndSubscribeOp subscribe;
            subscribe = new com.parsable.thrift.v1.common_event.FetchAndSubscribeOp();
            subscribe.read(iprot);
            return subscribe;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case UNSUBSCRIBE:
          if (field.type == UNSUBSCRIBE_FIELD_DESC.type) {
            com.parsable.thrift.v1.common_event.UnsubscribeOp unsubscribe;
            unsubscribe = new com.parsable.thrift.v1.common_event.UnsubscribeOp();
            unsubscribe.read(iprot);
            return unsubscribe;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      return null;
    }
  }

  @Override
  protected void standardSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case MESSAGE:
        MessageOp message = (MessageOp)value_;
        message.write(oprot);
        return;
      case CREATION:
        CreateOp creation = (CreateOp)value_;
        creation.write(oprot);
        return;
      case UPDATE:
        UpdateOp update = (UpdateOp)value_;
        update.write(oprot);
        return;
      case SUBSCRIBE:
        com.parsable.thrift.v1.common_event.FetchAndSubscribeOp subscribe = (com.parsable.thrift.v1.common_event.FetchAndSubscribeOp)value_;
        subscribe.write(oprot);
        return;
      case UNSUBSCRIBE:
        com.parsable.thrift.v1.common_event.UnsubscribeOp unsubscribe = (com.parsable.thrift.v1.common_event.UnsubscribeOp)value_;
        unsubscribe.write(oprot);
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected Object tupleSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, short fieldID) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(fieldID);
    if (setField != null) {
      switch (setField) {
        case MESSAGE:
          MessageOp message;
          message = new MessageOp();
          message.read(iprot);
          return message;
        case CREATION:
          CreateOp creation;
          creation = new CreateOp();
          creation.read(iprot);
          return creation;
        case UPDATE:
          UpdateOp update;
          update = new UpdateOp();
          update.read(iprot);
          return update;
        case SUBSCRIBE:
          com.parsable.thrift.v1.common_event.FetchAndSubscribeOp subscribe;
          subscribe = new com.parsable.thrift.v1.common_event.FetchAndSubscribeOp();
          subscribe.read(iprot);
          return subscribe;
        case UNSUBSCRIBE:
          com.parsable.thrift.v1.common_event.UnsubscribeOp unsubscribe;
          unsubscribe = new com.parsable.thrift.v1.common_event.UnsubscribeOp();
          unsubscribe.read(iprot);
          return unsubscribe;
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      throw new TProtocolException("Couldn't find a field with field id " + fieldID);
    }
  }

  @Override
  protected void tupleSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case MESSAGE:
        MessageOp message = (MessageOp)value_;
        message.write(oprot);
        return;
      case CREATION:
        CreateOp creation = (CreateOp)value_;
        creation.write(oprot);
        return;
      case UPDATE:
        UpdateOp update = (UpdateOp)value_;
        update.write(oprot);
        return;
      case SUBSCRIBE:
        com.parsable.thrift.v1.common_event.FetchAndSubscribeOp subscribe = (com.parsable.thrift.v1.common_event.FetchAndSubscribeOp)value_;
        subscribe.write(oprot);
        return;
      case UNSUBSCRIBE:
        com.parsable.thrift.v1.common_event.UnsubscribeOp unsubscribe = (com.parsable.thrift.v1.common_event.UnsubscribeOp)value_;
        unsubscribe.write(oprot);
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TField getFieldDesc(_Fields setField) {
    switch (setField) {
      case MESSAGE:
        return MESSAGE_FIELD_DESC;
      case CREATION:
        return CREATION_FIELD_DESC;
      case UPDATE:
        return UPDATE_FIELD_DESC;
      case SUBSCRIBE:
        return SUBSCRIBE_FIELD_DESC;
      case UNSUBSCRIBE:
        return UNSUBSCRIBE_FIELD_DESC;
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TStruct getStructDesc() {
    return STRUCT_DESC;
  }

  @Override
  protected _Fields enumForId(short id) {
    return _Fields.findByThriftIdOrThrow(id);
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public MessageOp getMessage() {
    if (getSetField() == _Fields.MESSAGE) {
      return (MessageOp)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'message' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setMessage(MessageOp value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.MESSAGE;
    value_ = value;
  }

  public CreateOp getCreation() {
    if (getSetField() == _Fields.CREATION) {
      return (CreateOp)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'creation' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setCreation(CreateOp value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.CREATION;
    value_ = value;
  }

  public UpdateOp getUpdate() {
    if (getSetField() == _Fields.UPDATE) {
      return (UpdateOp)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'update' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setUpdate(UpdateOp value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.UPDATE;
    value_ = value;
  }

  public com.parsable.thrift.v1.common_event.FetchAndSubscribeOp getSubscribe() {
    if (getSetField() == _Fields.SUBSCRIBE) {
      return (com.parsable.thrift.v1.common_event.FetchAndSubscribeOp)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'subscribe' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setSubscribe(com.parsable.thrift.v1.common_event.FetchAndSubscribeOp value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.SUBSCRIBE;
    value_ = value;
  }

  public com.parsable.thrift.v1.common_event.UnsubscribeOp getUnsubscribe() {
    if (getSetField() == _Fields.UNSUBSCRIBE) {
      return (com.parsable.thrift.v1.common_event.UnsubscribeOp)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'unsubscribe' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setUnsubscribe(com.parsable.thrift.v1.common_event.UnsubscribeOp value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.UNSUBSCRIBE;
    value_ = value;
  }

  public boolean isSetMessage() {
    return setField_ == _Fields.MESSAGE;
  }


  public boolean isSetCreation() {
    return setField_ == _Fields.CREATION;
  }


  public boolean isSetUpdate() {
    return setField_ == _Fields.UPDATE;
  }


  public boolean isSetSubscribe() {
    return setField_ == _Fields.SUBSCRIBE;
  }


  public boolean isSetUnsubscribe() {
    return setField_ == _Fields.UNSUBSCRIBE;
  }


  public boolean equals(Object other) {
    if (other instanceof ThreadOp) {
      return equals((ThreadOp)other);
    } else {
      return false;
    }
  }

  public boolean equals(ThreadOp other) {
    return other != null && getSetField() == other.getSetField() && getFieldValue().equals(other.getFieldValue());
  }

  @Override
  public int compareTo(ThreadOp other) {
    int lastComparison = org.apache.thrift.TBaseHelper.compareTo(getSetField(), other.getSetField());
    if (lastComparison == 0) {
      return org.apache.thrift.TBaseHelper.compareTo(getFieldValue(), other.getFieldValue());
    }
    return lastComparison;
  }


  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();
    list.add(this.getClass().getName());
    org.apache.thrift.TFieldIdEnum setField = getSetField();
    if (setField != null) {
      list.add(setField.getThriftFieldId());
      Object value = getFieldValue();
      if (value instanceof org.apache.thrift.TEnum) {
        list.add(((org.apache.thrift.TEnum)getFieldValue()).getValue());
      } else {
        list.add(value);
      }
    }
    return list.hashCode();
  }
  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


}
