/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.parsable.thrift.v1.job_event;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class StepFieldDataOp implements org.apache.thrift.TBase<StepFieldDataOp, StepFieldDataOp._Fields>, java.io.Serializable, Cloneable, Comparable<StepFieldDataOp> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StepFieldDataOp");

  private static final org.apache.thrift.protocol.TField JOB_STEP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("jobStepId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField STEP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("stepId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField FIELD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fieldId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField CLEAR_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("clearValue", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField DOCUMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("document", org.apache.thrift.protocol.TType.STRUCT, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new StepFieldDataOpStandardSchemeFactory());
  }

  public String jobStepId; // required
  public String stepId; // optional
  public String fieldId; // required
  public com.wi.director.thrift.v1.field_data.ExecutionData value; // optional
  public boolean clearValue; // optional
  public com.wi.director.thrift.v1.document.Document document; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    JOB_STEP_ID((short)1, "jobStepId"),
    STEP_ID((short)2, "stepId"),
    FIELD_ID((short)3, "fieldId"),
    VALUE((short)4, "value"),
    CLEAR_VALUE((short)5, "clearValue"),
    DOCUMENT((short)6, "document");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // JOB_STEP_ID
          return JOB_STEP_ID;
        case 2: // STEP_ID
          return STEP_ID;
        case 3: // FIELD_ID
          return FIELD_ID;
        case 4: // VALUE
          return VALUE;
        case 5: // CLEAR_VALUE
          return CLEAR_VALUE;
        case 6: // DOCUMENT
          return DOCUMENT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CLEARVALUE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.STEP_ID,_Fields.VALUE,_Fields.CLEAR_VALUE,_Fields.DOCUMENT};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.JOB_STEP_ID, new org.apache.thrift.meta_data.FieldMetaData("jobStepId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "UUID")));
    tmpMap.put(_Fields.STEP_ID, new org.apache.thrift.meta_data.FieldMetaData("stepId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "UUID")));
    tmpMap.put(_Fields.FIELD_ID, new org.apache.thrift.meta_data.FieldMetaData("fieldId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "UUID")));
    tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.field_data.ExecutionData.class)));
    tmpMap.put(_Fields.CLEAR_VALUE, new org.apache.thrift.meta_data.FieldMetaData("clearValue", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DOCUMENT, new org.apache.thrift.meta_data.FieldMetaData("document", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.document.Document.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StepFieldDataOp.class, metaDataMap);
  }

  public StepFieldDataOp() {
  }

  public StepFieldDataOp(
    String jobStepId,
    String fieldId)
  {
    this();
    this.jobStepId = jobStepId;
    this.fieldId = fieldId;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StepFieldDataOp(StepFieldDataOp other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetJobStepId()) {
      this.jobStepId = other.jobStepId;
    }
    if (other.isSetStepId()) {
      this.stepId = other.stepId;
    }
    if (other.isSetFieldId()) {
      this.fieldId = other.fieldId;
    }
    if (other.isSetValue()) {
      this.value = new com.wi.director.thrift.v1.field_data.ExecutionData(other.value);
    }
    this.clearValue = other.clearValue;
    if (other.isSetDocument()) {
      this.document = new com.wi.director.thrift.v1.document.Document(other.document);
    }
  }

  public StepFieldDataOp deepCopy() {
    return new StepFieldDataOp(this);
  }

  @Override
  public void clear() {
    this.jobStepId = null;
    this.stepId = null;
    this.fieldId = null;
    this.value = null;
    setClearValueIsSet(false);
    this.clearValue = false;
    this.document = null;
  }

  public String getJobStepId() {
    return this.jobStepId;
  }

  public StepFieldDataOp setJobStepId(String jobStepId) {
    this.jobStepId = jobStepId;
    return this;
  }

  public void unsetJobStepId() {
    this.jobStepId = null;
  }

  /** Returns true if field jobStepId is set (has been assigned a value) and false otherwise */
  public boolean isSetJobStepId() {
    return this.jobStepId != null;
  }

  public void setJobStepIdIsSet(boolean value) {
    if (!value) {
      this.jobStepId = null;
    }
  }

  public String getStepId() {
    return this.stepId;
  }

  public StepFieldDataOp setStepId(String stepId) {
    this.stepId = stepId;
    return this;
  }

  public void unsetStepId() {
    this.stepId = null;
  }

  /** Returns true if field stepId is set (has been assigned a value) and false otherwise */
  public boolean isSetStepId() {
    return this.stepId != null;
  }

  public void setStepIdIsSet(boolean value) {
    if (!value) {
      this.stepId = null;
    }
  }

  public String getFieldId() {
    return this.fieldId;
  }

  public StepFieldDataOp setFieldId(String fieldId) {
    this.fieldId = fieldId;
    return this;
  }

  public void unsetFieldId() {
    this.fieldId = null;
  }

  /** Returns true if field fieldId is set (has been assigned a value) and false otherwise */
  public boolean isSetFieldId() {
    return this.fieldId != null;
  }

  public void setFieldIdIsSet(boolean value) {
    if (!value) {
      this.fieldId = null;
    }
  }

  public com.wi.director.thrift.v1.field_data.ExecutionData getValue() {
    return this.value;
  }

  public StepFieldDataOp setValue(com.wi.director.thrift.v1.field_data.ExecutionData value) {
    this.value = value;
    return this;
  }

  public void unsetValue() {
    this.value = null;
  }

  /** Returns true if field value is set (has been assigned a value) and false otherwise */
  public boolean isSetValue() {
    return this.value != null;
  }

  public void setValueIsSet(boolean value) {
    if (!value) {
      this.value = null;
    }
  }

  public boolean isClearValue() {
    return this.clearValue;
  }

  public StepFieldDataOp setClearValue(boolean clearValue) {
    this.clearValue = clearValue;
    setClearValueIsSet(true);
    return this;
  }

  public void unsetClearValue() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CLEARVALUE_ISSET_ID);
  }

  /** Returns true if field clearValue is set (has been assigned a value) and false otherwise */
  public boolean isSetClearValue() {
    return EncodingUtils.testBit(__isset_bitfield, __CLEARVALUE_ISSET_ID);
  }

  public void setClearValueIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CLEARVALUE_ISSET_ID, value);
  }

  public com.wi.director.thrift.v1.document.Document getDocument() {
    return this.document;
  }

  public StepFieldDataOp setDocument(com.wi.director.thrift.v1.document.Document document) {
    this.document = document;
    return this;
  }

  public void unsetDocument() {
    this.document = null;
  }

  /** Returns true if field document is set (has been assigned a value) and false otherwise */
  public boolean isSetDocument() {
    return this.document != null;
  }

  public void setDocumentIsSet(boolean value) {
    if (!value) {
      this.document = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case JOB_STEP_ID:
      if (value == null) {
        unsetJobStepId();
      } else {
        setJobStepId((String)value);
      }
      break;

    case STEP_ID:
      if (value == null) {
        unsetStepId();
      } else {
        setStepId((String)value);
      }
      break;

    case FIELD_ID:
      if (value == null) {
        unsetFieldId();
      } else {
        setFieldId((String)value);
      }
      break;

    case VALUE:
      if (value == null) {
        unsetValue();
      } else {
        setValue((com.wi.director.thrift.v1.field_data.ExecutionData)value);
      }
      break;

    case CLEAR_VALUE:
      if (value == null) {
        unsetClearValue();
      } else {
        setClearValue((Boolean)value);
      }
      break;

    case DOCUMENT:
      if (value == null) {
        unsetDocument();
      } else {
        setDocument((com.wi.director.thrift.v1.document.Document)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case JOB_STEP_ID:
      return getJobStepId();

    case STEP_ID:
      return getStepId();

    case FIELD_ID:
      return getFieldId();

    case VALUE:
      return getValue();

    case CLEAR_VALUE:
      return isClearValue();

    case DOCUMENT:
      return getDocument();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case JOB_STEP_ID:
      return isSetJobStepId();
    case STEP_ID:
      return isSetStepId();
    case FIELD_ID:
      return isSetFieldId();
    case VALUE:
      return isSetValue();
    case CLEAR_VALUE:
      return isSetClearValue();
    case DOCUMENT:
      return isSetDocument();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof StepFieldDataOp)
      return this.equals((StepFieldDataOp)that);
    return false;
  }

  public boolean equals(StepFieldDataOp that) {
    if (that == null)
      return false;

    boolean this_present_jobStepId = true && this.isSetJobStepId();
    boolean that_present_jobStepId = true && that.isSetJobStepId();
    if (this_present_jobStepId || that_present_jobStepId) {
      if (!(this_present_jobStepId && that_present_jobStepId))
        return false;
      if (!this.jobStepId.equals(that.jobStepId))
        return false;
    }

    boolean this_present_stepId = true && this.isSetStepId();
    boolean that_present_stepId = true && that.isSetStepId();
    if (this_present_stepId || that_present_stepId) {
      if (!(this_present_stepId && that_present_stepId))
        return false;
      if (!this.stepId.equals(that.stepId))
        return false;
    }

    boolean this_present_fieldId = true && this.isSetFieldId();
    boolean that_present_fieldId = true && that.isSetFieldId();
    if (this_present_fieldId || that_present_fieldId) {
      if (!(this_present_fieldId && that_present_fieldId))
        return false;
      if (!this.fieldId.equals(that.fieldId))
        return false;
    }

    boolean this_present_value = true && this.isSetValue();
    boolean that_present_value = true && that.isSetValue();
    if (this_present_value || that_present_value) {
      if (!(this_present_value && that_present_value))
        return false;
      if (!this.value.equals(that.value))
        return false;
    }

    boolean this_present_clearValue = true && this.isSetClearValue();
    boolean that_present_clearValue = true && that.isSetClearValue();
    if (this_present_clearValue || that_present_clearValue) {
      if (!(this_present_clearValue && that_present_clearValue))
        return false;
      if (this.clearValue != that.clearValue)
        return false;
    }

    boolean this_present_document = true && this.isSetDocument();
    boolean that_present_document = true && that.isSetDocument();
    if (this_present_document || that_present_document) {
      if (!(this_present_document && that_present_document))
        return false;
      if (!this.document.equals(that.document))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_jobStepId = true && (isSetJobStepId());
    list.add(present_jobStepId);
    if (present_jobStepId)
      list.add(jobStepId);

    boolean present_stepId = true && (isSetStepId());
    list.add(present_stepId);
    if (present_stepId)
      list.add(stepId);

    boolean present_fieldId = true && (isSetFieldId());
    list.add(present_fieldId);
    if (present_fieldId)
      list.add(fieldId);

    boolean present_value = true && (isSetValue());
    list.add(present_value);
    if (present_value)
      list.add(value);

    boolean present_clearValue = true && (isSetClearValue());
    list.add(present_clearValue);
    if (present_clearValue)
      list.add(clearValue);

    boolean present_document = true && (isSetDocument());
    list.add(present_document);
    if (present_document)
      list.add(document);

    return list.hashCode();
  }

  @Override
  public int compareTo(StepFieldDataOp other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetJobStepId()).compareTo(other.isSetJobStepId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJobStepId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobStepId, other.jobStepId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStepId()).compareTo(other.isSetStepId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStepId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stepId, other.stepId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFieldId()).compareTo(other.isSetFieldId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFieldId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fieldId, other.fieldId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValue()).compareTo(other.isSetValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, other.value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClearValue()).compareTo(other.isSetClearValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClearValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clearValue, other.clearValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDocument()).compareTo(other.isSetDocument());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDocument()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.document, other.document);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("StepFieldDataOp(");
    boolean first = true;

    sb.append("jobStepId:");
    if (this.jobStepId == null) {
      sb.append("null");
    } else {
      sb.append(this.jobStepId);
    }
    first = false;
    if (isSetStepId()) {
      if (!first) sb.append(", ");
      sb.append("stepId:");
      if (this.stepId == null) {
        sb.append("null");
      } else {
        sb.append(this.stepId);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("fieldId:");
    if (this.fieldId == null) {
      sb.append("null");
    } else {
      sb.append(this.fieldId);
    }
    first = false;
    if (isSetValue()) {
      if (!first) sb.append(", ");
      sb.append("value:");
      if (this.value == null) {
        sb.append("null");
      } else {
        sb.append(this.value);
      }
      first = false;
    }
    if (isSetClearValue()) {
      if (!first) sb.append(", ");
      sb.append("clearValue:");
      sb.append(this.clearValue);
      first = false;
    }
    if (isSetDocument()) {
      if (!first) sb.append(", ");
      sb.append("document:");
      if (this.document == null) {
        sb.append("null");
      } else {
        sb.append(this.document);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (jobStepId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'jobStepId' was not present! Struct: " + toString());
    }
    if (fieldId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'fieldId' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (document != null) {
      document.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StepFieldDataOpStandardSchemeFactory implements SchemeFactory {
    public StepFieldDataOpStandardScheme getScheme() {
      return new StepFieldDataOpStandardScheme();
    }
  }

  private static class StepFieldDataOpStandardScheme extends StandardScheme<StepFieldDataOp> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, StepFieldDataOp struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // JOB_STEP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.jobStepId = iprot.readString();
              struct.setJobStepIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STEP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stepId = iprot.readString();
              struct.setStepIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FIELD_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fieldId = iprot.readString();
              struct.setFieldIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.value = new com.wi.director.thrift.v1.field_data.ExecutionData();
              struct.value.read(iprot);
              struct.setValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CLEAR_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.clearValue = iprot.readBool();
              struct.setClearValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DOCUMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.document = new com.wi.director.thrift.v1.document.Document();
              struct.document.read(iprot);
              struct.setDocumentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, StepFieldDataOp struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.jobStepId != null) {
        oprot.writeFieldBegin(JOB_STEP_ID_FIELD_DESC);
        oprot.writeString(struct.jobStepId);
        oprot.writeFieldEnd();
      }
      if (struct.stepId != null) {
        if (struct.isSetStepId()) {
          oprot.writeFieldBegin(STEP_ID_FIELD_DESC);
          oprot.writeString(struct.stepId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.fieldId != null) {
        oprot.writeFieldBegin(FIELD_ID_FIELD_DESC);
        oprot.writeString(struct.fieldId);
        oprot.writeFieldEnd();
      }
      if (struct.value != null) {
        if (struct.isSetValue()) {
          oprot.writeFieldBegin(VALUE_FIELD_DESC);
          struct.value.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetClearValue()) {
        oprot.writeFieldBegin(CLEAR_VALUE_FIELD_DESC);
        oprot.writeBool(struct.clearValue);
        oprot.writeFieldEnd();
      }
      if (struct.document != null) {
        if (struct.isSetDocument()) {
          oprot.writeFieldBegin(DOCUMENT_FIELD_DESC);
          struct.document.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

}

