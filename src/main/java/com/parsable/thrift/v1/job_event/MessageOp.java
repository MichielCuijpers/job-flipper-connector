/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.parsable.thrift.v1.job_event;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class MessageOp implements org.apache.thrift.TBase<MessageOp, MessageOp._Fields>, java.io.Serializable, Cloneable, Comparable<MessageOp> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MessageOp");

  private static final org.apache.thrift.protocol.TField BODY_FIELD_DESC = new org.apache.thrift.protocol.TField("body", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField STRUCTURED_BODY_FIELD_DESC = new org.apache.thrift.protocol.TField("structuredBody", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField("category", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField DOCUMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("documents", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField UPDATED_SEQ_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("updatedSeqId", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField MESSAGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("messageId", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MessageOpStandardSchemeFactory());
  }

  public String body; // required
  public com.wi.director.thrift.v1.messaging.StructuredBody structuredBody; // optional
  /**
   * 
   * @see com.wi.director.thrift.v1.messaging.MessageCategory
   */
  public com.wi.director.thrift.v1.messaging.MessageCategory category; // required
  public List<com.wi.director.thrift.v1.document.Document> documents; // required
  public long updatedSeqId; // optional
  public String messageId; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BODY((short)1, "body"),
    STRUCTURED_BODY((short)2, "structuredBody"),
    /**
     * 
     * @see com.wi.director.thrift.v1.messaging.MessageCategory
     */
    CATEGORY((short)3, "category"),
    DOCUMENTS((short)4, "documents"),
    UPDATED_SEQ_ID((short)5, "updatedSeqId"),
    MESSAGE_ID((short)6, "messageId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BODY
          return BODY;
        case 2: // STRUCTURED_BODY
          return STRUCTURED_BODY;
        case 3: // CATEGORY
          return CATEGORY;
        case 4: // DOCUMENTS
          return DOCUMENTS;
        case 5: // UPDATED_SEQ_ID
          return UPDATED_SEQ_ID;
        case 6: // MESSAGE_ID
          return MESSAGE_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __UPDATEDSEQID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.STRUCTURED_BODY,_Fields.UPDATED_SEQ_ID,_Fields.MESSAGE_ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BODY, new org.apache.thrift.meta_data.FieldMetaData("body", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STRUCTURED_BODY, new org.apache.thrift.meta_data.FieldMetaData("structuredBody", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.messaging.StructuredBody.class)));
    tmpMap.put(_Fields.CATEGORY, new org.apache.thrift.meta_data.FieldMetaData("category", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.wi.director.thrift.v1.messaging.MessageCategory.class)));
    tmpMap.put(_Fields.DOCUMENTS, new org.apache.thrift.meta_data.FieldMetaData("documents", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.document.Document.class))));
    tmpMap.put(_Fields.UPDATED_SEQ_ID, new org.apache.thrift.meta_data.FieldMetaData("updatedSeqId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MESSAGE_ID, new org.apache.thrift.meta_data.FieldMetaData("messageId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "UUID")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MessageOp.class, metaDataMap);
  }

  public MessageOp() {
  }

  public MessageOp(
    String body,
    com.wi.director.thrift.v1.messaging.MessageCategory category,
    List<com.wi.director.thrift.v1.document.Document> documents)
  {
    this();
    this.body = body;
    this.category = category;
    this.documents = documents;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MessageOp(MessageOp other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetBody()) {
      this.body = other.body;
    }
    if (other.isSetStructuredBody()) {
      this.structuredBody = new com.wi.director.thrift.v1.messaging.StructuredBody(other.structuredBody);
    }
    if (other.isSetCategory()) {
      this.category = other.category;
    }
    if (other.isSetDocuments()) {
      List<com.wi.director.thrift.v1.document.Document> __this__documents = new ArrayList<com.wi.director.thrift.v1.document.Document>(other.documents.size());
      for (com.wi.director.thrift.v1.document.Document other_element : other.documents) {
        __this__documents.add(new com.wi.director.thrift.v1.document.Document(other_element));
      }
      this.documents = __this__documents;
    }
    this.updatedSeqId = other.updatedSeqId;
    if (other.isSetMessageId()) {
      this.messageId = other.messageId;
    }
  }

  public MessageOp deepCopy() {
    return new MessageOp(this);
  }

  @Override
  public void clear() {
    this.body = null;
    this.structuredBody = null;
    this.category = null;
    this.documents = null;
    setUpdatedSeqIdIsSet(false);
    this.updatedSeqId = 0;
    this.messageId = null;
  }

  public String getBody() {
    return this.body;
  }

  public MessageOp setBody(String body) {
    this.body = body;
    return this;
  }

  public void unsetBody() {
    this.body = null;
  }

  /** Returns true if field body is set (has been assigned a value) and false otherwise */
  public boolean isSetBody() {
    return this.body != null;
  }

  public void setBodyIsSet(boolean value) {
    if (!value) {
      this.body = null;
    }
  }

  public com.wi.director.thrift.v1.messaging.StructuredBody getStructuredBody() {
    return this.structuredBody;
  }

  public MessageOp setStructuredBody(com.wi.director.thrift.v1.messaging.StructuredBody structuredBody) {
    this.structuredBody = structuredBody;
    return this;
  }

  public void unsetStructuredBody() {
    this.structuredBody = null;
  }

  /** Returns true if field structuredBody is set (has been assigned a value) and false otherwise */
  public boolean isSetStructuredBody() {
    return this.structuredBody != null;
  }

  public void setStructuredBodyIsSet(boolean value) {
    if (!value) {
      this.structuredBody = null;
    }
  }

  /**
   * 
   * @see com.wi.director.thrift.v1.messaging.MessageCategory
   */
  public com.wi.director.thrift.v1.messaging.MessageCategory getCategory() {
    return this.category;
  }

  /**
   * 
   * @see com.wi.director.thrift.v1.messaging.MessageCategory
   */
  public MessageOp setCategory(com.wi.director.thrift.v1.messaging.MessageCategory category) {
    this.category = category;
    return this;
  }

  public void unsetCategory() {
    this.category = null;
  }

  /** Returns true if field category is set (has been assigned a value) and false otherwise */
  public boolean isSetCategory() {
    return this.category != null;
  }

  public void setCategoryIsSet(boolean value) {
    if (!value) {
      this.category = null;
    }
  }

  public int getDocumentsSize() {
    return (this.documents == null) ? 0 : this.documents.size();
  }

  public java.util.Iterator<com.wi.director.thrift.v1.document.Document> getDocumentsIterator() {
    return (this.documents == null) ? null : this.documents.iterator();
  }

  public void addToDocuments(com.wi.director.thrift.v1.document.Document elem) {
    if (this.documents == null) {
      this.documents = new ArrayList<com.wi.director.thrift.v1.document.Document>();
    }
    this.documents.add(elem);
  }

  public List<com.wi.director.thrift.v1.document.Document> getDocuments() {
    return this.documents;
  }

  public MessageOp setDocuments(List<com.wi.director.thrift.v1.document.Document> documents) {
    this.documents = documents;
    return this;
  }

  public void unsetDocuments() {
    this.documents = null;
  }

  /** Returns true if field documents is set (has been assigned a value) and false otherwise */
  public boolean isSetDocuments() {
    return this.documents != null;
  }

  public void setDocumentsIsSet(boolean value) {
    if (!value) {
      this.documents = null;
    }
  }

  public long getUpdatedSeqId() {
    return this.updatedSeqId;
  }

  public MessageOp setUpdatedSeqId(long updatedSeqId) {
    this.updatedSeqId = updatedSeqId;
    setUpdatedSeqIdIsSet(true);
    return this;
  }

  public void unsetUpdatedSeqId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPDATEDSEQID_ISSET_ID);
  }

  /** Returns true if field updatedSeqId is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdatedSeqId() {
    return EncodingUtils.testBit(__isset_bitfield, __UPDATEDSEQID_ISSET_ID);
  }

  public void setUpdatedSeqIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPDATEDSEQID_ISSET_ID, value);
  }

  public String getMessageId() {
    return this.messageId;
  }

  public MessageOp setMessageId(String messageId) {
    this.messageId = messageId;
    return this;
  }

  public void unsetMessageId() {
    this.messageId = null;
  }

  /** Returns true if field messageId is set (has been assigned a value) and false otherwise */
  public boolean isSetMessageId() {
    return this.messageId != null;
  }

  public void setMessageIdIsSet(boolean value) {
    if (!value) {
      this.messageId = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BODY:
      if (value == null) {
        unsetBody();
      } else {
        setBody((String)value);
      }
      break;

    case STRUCTURED_BODY:
      if (value == null) {
        unsetStructuredBody();
      } else {
        setStructuredBody((com.wi.director.thrift.v1.messaging.StructuredBody)value);
      }
      break;

    case CATEGORY:
      if (value == null) {
        unsetCategory();
      } else {
        setCategory((com.wi.director.thrift.v1.messaging.MessageCategory)value);
      }
      break;

    case DOCUMENTS:
      if (value == null) {
        unsetDocuments();
      } else {
        setDocuments((List<com.wi.director.thrift.v1.document.Document>)value);
      }
      break;

    case UPDATED_SEQ_ID:
      if (value == null) {
        unsetUpdatedSeqId();
      } else {
        setUpdatedSeqId((Long)value);
      }
      break;

    case MESSAGE_ID:
      if (value == null) {
        unsetMessageId();
      } else {
        setMessageId((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BODY:
      return getBody();

    case STRUCTURED_BODY:
      return getStructuredBody();

    case CATEGORY:
      return getCategory();

    case DOCUMENTS:
      return getDocuments();

    case UPDATED_SEQ_ID:
      return getUpdatedSeqId();

    case MESSAGE_ID:
      return getMessageId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BODY:
      return isSetBody();
    case STRUCTURED_BODY:
      return isSetStructuredBody();
    case CATEGORY:
      return isSetCategory();
    case DOCUMENTS:
      return isSetDocuments();
    case UPDATED_SEQ_ID:
      return isSetUpdatedSeqId();
    case MESSAGE_ID:
      return isSetMessageId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MessageOp)
      return this.equals((MessageOp)that);
    return false;
  }

  public boolean equals(MessageOp that) {
    if (that == null)
      return false;

    boolean this_present_body = true && this.isSetBody();
    boolean that_present_body = true && that.isSetBody();
    if (this_present_body || that_present_body) {
      if (!(this_present_body && that_present_body))
        return false;
      if (!this.body.equals(that.body))
        return false;
    }

    boolean this_present_structuredBody = true && this.isSetStructuredBody();
    boolean that_present_structuredBody = true && that.isSetStructuredBody();
    if (this_present_structuredBody || that_present_structuredBody) {
      if (!(this_present_structuredBody && that_present_structuredBody))
        return false;
      if (!this.structuredBody.equals(that.structuredBody))
        return false;
    }

    boolean this_present_category = true && this.isSetCategory();
    boolean that_present_category = true && that.isSetCategory();
    if (this_present_category || that_present_category) {
      if (!(this_present_category && that_present_category))
        return false;
      if (!this.category.equals(that.category))
        return false;
    }

    boolean this_present_documents = true && this.isSetDocuments();
    boolean that_present_documents = true && that.isSetDocuments();
    if (this_present_documents || that_present_documents) {
      if (!(this_present_documents && that_present_documents))
        return false;
      if (!this.documents.equals(that.documents))
        return false;
    }

    boolean this_present_updatedSeqId = true && this.isSetUpdatedSeqId();
    boolean that_present_updatedSeqId = true && that.isSetUpdatedSeqId();
    if (this_present_updatedSeqId || that_present_updatedSeqId) {
      if (!(this_present_updatedSeqId && that_present_updatedSeqId))
        return false;
      if (this.updatedSeqId != that.updatedSeqId)
        return false;
    }

    boolean this_present_messageId = true && this.isSetMessageId();
    boolean that_present_messageId = true && that.isSetMessageId();
    if (this_present_messageId || that_present_messageId) {
      if (!(this_present_messageId && that_present_messageId))
        return false;
      if (!this.messageId.equals(that.messageId))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_body = true && (isSetBody());
    list.add(present_body);
    if (present_body)
      list.add(body);

    boolean present_structuredBody = true && (isSetStructuredBody());
    list.add(present_structuredBody);
    if (present_structuredBody)
      list.add(structuredBody);

    boolean present_category = true && (isSetCategory());
    list.add(present_category);
    if (present_category)
      list.add(category.getValue());

    boolean present_documents = true && (isSetDocuments());
    list.add(present_documents);
    if (present_documents)
      list.add(documents);

    boolean present_updatedSeqId = true && (isSetUpdatedSeqId());
    list.add(present_updatedSeqId);
    if (present_updatedSeqId)
      list.add(updatedSeqId);

    boolean present_messageId = true && (isSetMessageId());
    list.add(present_messageId);
    if (present_messageId)
      list.add(messageId);

    return list.hashCode();
  }

  @Override
  public int compareTo(MessageOp other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBody()).compareTo(other.isSetBody());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBody()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.body, other.body);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStructuredBody()).compareTo(other.isSetStructuredBody());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStructuredBody()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.structuredBody, other.structuredBody);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCategory()).compareTo(other.isSetCategory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCategory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.category, other.category);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDocuments()).compareTo(other.isSetDocuments());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDocuments()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.documents, other.documents);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdatedSeqId()).compareTo(other.isSetUpdatedSeqId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdatedSeqId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updatedSeqId, other.updatedSeqId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMessageId()).compareTo(other.isSetMessageId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessageId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messageId, other.messageId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MessageOp(");
    boolean first = true;

    sb.append("body:");
    if (this.body == null) {
      sb.append("null");
    } else {
      sb.append(this.body);
    }
    first = false;
    if (isSetStructuredBody()) {
      if (!first) sb.append(", ");
      sb.append("structuredBody:");
      if (this.structuredBody == null) {
        sb.append("null");
      } else {
        sb.append(this.structuredBody);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("category:");
    if (this.category == null) {
      sb.append("null");
    } else {
      sb.append(this.category);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("documents:");
    if (this.documents == null) {
      sb.append("null");
    } else {
      sb.append(this.documents);
    }
    first = false;
    if (isSetUpdatedSeqId()) {
      if (!first) sb.append(", ");
      sb.append("updatedSeqId:");
      sb.append(this.updatedSeqId);
      first = false;
    }
    if (isSetMessageId()) {
      if (!first) sb.append(", ");
      sb.append("messageId:");
      if (this.messageId == null) {
        sb.append("null");
      } else {
        sb.append(this.messageId);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (body == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'body' was not present! Struct: " + toString());
    }
    if (category == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'category' was not present! Struct: " + toString());
    }
    if (documents == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'documents' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (structuredBody != null) {
      structuredBody.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MessageOpStandardSchemeFactory implements SchemeFactory {
    public MessageOpStandardScheme getScheme() {
      return new MessageOpStandardScheme();
    }
  }

  private static class MessageOpStandardScheme extends StandardScheme<MessageOp> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MessageOp struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BODY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.body = iprot.readString();
              struct.setBodyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STRUCTURED_BODY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.structuredBody = new com.wi.director.thrift.v1.messaging.StructuredBody();
              struct.structuredBody.read(iprot);
              struct.setStructuredBodyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CATEGORY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.category = com.wi.director.thrift.v1.messaging.MessageCategory.findByValue(iprot.readI32());
              struct.setCategoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DOCUMENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list54 = iprot.readListBegin();
                struct.documents = new ArrayList<com.wi.director.thrift.v1.document.Document>(_list54.size);
                com.wi.director.thrift.v1.document.Document _elem55;
                for (int _i56 = 0; _i56 < _list54.size; ++_i56)
                {
                  _elem55 = new com.wi.director.thrift.v1.document.Document();
                  _elem55.read(iprot);
                  struct.documents.add(_elem55);
                }
                iprot.readListEnd();
              }
              struct.setDocumentsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // UPDATED_SEQ_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.updatedSeqId = iprot.readI64();
              struct.setUpdatedSeqIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MESSAGE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.messageId = iprot.readString();
              struct.setMessageIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MessageOp struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.body != null) {
        oprot.writeFieldBegin(BODY_FIELD_DESC);
        oprot.writeString(struct.body);
        oprot.writeFieldEnd();
      }
      if (struct.structuredBody != null) {
        if (struct.isSetStructuredBody()) {
          oprot.writeFieldBegin(STRUCTURED_BODY_FIELD_DESC);
          struct.structuredBody.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.category != null) {
        oprot.writeFieldBegin(CATEGORY_FIELD_DESC);
        oprot.writeI32(struct.category.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.documents != null) {
        oprot.writeFieldBegin(DOCUMENTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.documents.size()));
          for (com.wi.director.thrift.v1.document.Document _iter57 : struct.documents)
          {
            _iter57.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.isSetUpdatedSeqId()) {
        oprot.writeFieldBegin(UPDATED_SEQ_ID_FIELD_DESC);
        oprot.writeI64(struct.updatedSeqId);
        oprot.writeFieldEnd();
      }
      if (struct.messageId != null) {
        if (struct.isSetMessageId()) {
          oprot.writeFieldBegin(MESSAGE_ID_FIELD_DESC);
          oprot.writeString(struct.messageId);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

}

