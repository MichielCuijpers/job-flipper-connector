/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.parsable.thrift.v1.job_event;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class CreateOp implements org.apache.thrift.TBase<CreateOp, CreateOp._Fields>, java.io.Serializable, Cloneable, Comparable<CreateOp> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CreateOp");

  private static final org.apache.thrift.protocol.TField IS_PREVIEW_FIELD_DESC = new org.apache.thrift.protocol.TField("isPreview", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField IS_FROM_OFFLINE_FIELD_DESC = new org.apache.thrift.protocol.TField("isFromOffline", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField CLONED_FROM_JOB_FIELD_DESC = new org.apache.thrift.protocol.TField("clonedFromJob", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("source", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField MESH_ENABLED_FIELD_DESC = new org.apache.thrift.protocol.TField("meshEnabled", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField PRIORITY_FIELD_DESC = new org.apache.thrift.protocol.TField("priority", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("location", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField PLANNED_START_JOB_ROLE_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("plannedStartJobRoleIds", org.apache.thrift.protocol.TType.LIST, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CreateOpStandardSchemeFactory());
  }

  public boolean isPreview; // required
  public boolean isFromOffline; // required
  public String clonedFromJob; // optional
  public com.wi.director.thrift.v1.messaging.JobPtr source; // optional
  public boolean meshEnabled; // optional
  public com.wi.director.thrift.v1.job.PriorityLevel priority; // optional
  public String location; // optional
  public List<String> plannedStartJobRoleIds; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    IS_PREVIEW((short)1, "isPreview"),
    IS_FROM_OFFLINE((short)2, "isFromOffline"),
    CLONED_FROM_JOB((short)3, "clonedFromJob"),
    SOURCE((short)4, "source"),
    MESH_ENABLED((short)5, "meshEnabled"),
    PRIORITY((short)6, "priority"),
    LOCATION((short)7, "location"),
    PLANNED_START_JOB_ROLE_IDS((short)8, "plannedStartJobRoleIds");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // IS_PREVIEW
          return IS_PREVIEW;
        case 2: // IS_FROM_OFFLINE
          return IS_FROM_OFFLINE;
        case 3: // CLONED_FROM_JOB
          return CLONED_FROM_JOB;
        case 4: // SOURCE
          return SOURCE;
        case 5: // MESH_ENABLED
          return MESH_ENABLED;
        case 6: // PRIORITY
          return PRIORITY;
        case 7: // LOCATION
          return LOCATION;
        case 8: // PLANNED_START_JOB_ROLE_IDS
          return PLANNED_START_JOB_ROLE_IDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ISPREVIEW_ISSET_ID = 0;
  private static final int __ISFROMOFFLINE_ISSET_ID = 1;
  private static final int __MESHENABLED_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.CLONED_FROM_JOB,_Fields.SOURCE,_Fields.MESH_ENABLED,_Fields.PRIORITY,_Fields.LOCATION,_Fields.PLANNED_START_JOB_ROLE_IDS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.IS_PREVIEW, new org.apache.thrift.meta_data.FieldMetaData("isPreview", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_FROM_OFFLINE, new org.apache.thrift.meta_data.FieldMetaData("isFromOffline", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CLONED_FROM_JOB, new org.apache.thrift.meta_data.FieldMetaData("clonedFromJob", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "UUID")));
    tmpMap.put(_Fields.SOURCE, new org.apache.thrift.meta_data.FieldMetaData("source", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.messaging.JobPtr.class)));
    tmpMap.put(_Fields.MESH_ENABLED, new org.apache.thrift.meta_data.FieldMetaData("meshEnabled", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PRIORITY, new org.apache.thrift.meta_data.FieldMetaData("priority", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.job.PriorityLevel.class)));
    tmpMap.put(_Fields.LOCATION, new org.apache.thrift.meta_data.FieldMetaData("location", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLANNED_START_JOB_ROLE_IDS, new org.apache.thrift.meta_data.FieldMetaData("plannedStartJobRoleIds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CreateOp.class, metaDataMap);
  }

  public CreateOp() {
  }

  public CreateOp(
    boolean isPreview,
    boolean isFromOffline)
  {
    this();
    this.isPreview = isPreview;
    setIsPreviewIsSet(true);
    this.isFromOffline = isFromOffline;
    setIsFromOfflineIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CreateOp(CreateOp other) {
    __isset_bitfield = other.__isset_bitfield;
    this.isPreview = other.isPreview;
    this.isFromOffline = other.isFromOffline;
    if (other.isSetClonedFromJob()) {
      this.clonedFromJob = other.clonedFromJob;
    }
    if (other.isSetSource()) {
      this.source = new com.wi.director.thrift.v1.messaging.JobPtr(other.source);
    }
    this.meshEnabled = other.meshEnabled;
    if (other.isSetPriority()) {
      this.priority = new com.wi.director.thrift.v1.job.PriorityLevel(other.priority);
    }
    if (other.isSetLocation()) {
      this.location = other.location;
    }
    if (other.isSetPlannedStartJobRoleIds()) {
      List<String> __this__plannedStartJobRoleIds = new ArrayList<String>(other.plannedStartJobRoleIds);
      this.plannedStartJobRoleIds = __this__plannedStartJobRoleIds;
    }
  }

  public CreateOp deepCopy() {
    return new CreateOp(this);
  }

  @Override
  public void clear() {
    setIsPreviewIsSet(false);
    this.isPreview = false;
    setIsFromOfflineIsSet(false);
    this.isFromOffline = false;
    this.clonedFromJob = null;
    this.source = null;
    setMeshEnabledIsSet(false);
    this.meshEnabled = false;
    this.priority = null;
    this.location = null;
    this.plannedStartJobRoleIds = null;
  }

  public boolean isIsPreview() {
    return this.isPreview;
  }

  public CreateOp setIsPreview(boolean isPreview) {
    this.isPreview = isPreview;
    setIsPreviewIsSet(true);
    return this;
  }

  public void unsetIsPreview() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISPREVIEW_ISSET_ID);
  }

  /** Returns true if field isPreview is set (has been assigned a value) and false otherwise */
  public boolean isSetIsPreview() {
    return EncodingUtils.testBit(__isset_bitfield, __ISPREVIEW_ISSET_ID);
  }

  public void setIsPreviewIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISPREVIEW_ISSET_ID, value);
  }

  public boolean isIsFromOffline() {
    return this.isFromOffline;
  }

  public CreateOp setIsFromOffline(boolean isFromOffline) {
    this.isFromOffline = isFromOffline;
    setIsFromOfflineIsSet(true);
    return this;
  }

  public void unsetIsFromOffline() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISFROMOFFLINE_ISSET_ID);
  }

  /** Returns true if field isFromOffline is set (has been assigned a value) and false otherwise */
  public boolean isSetIsFromOffline() {
    return EncodingUtils.testBit(__isset_bitfield, __ISFROMOFFLINE_ISSET_ID);
  }

  public void setIsFromOfflineIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISFROMOFFLINE_ISSET_ID, value);
  }

  public String getClonedFromJob() {
    return this.clonedFromJob;
  }

  public CreateOp setClonedFromJob(String clonedFromJob) {
    this.clonedFromJob = clonedFromJob;
    return this;
  }

  public void unsetClonedFromJob() {
    this.clonedFromJob = null;
  }

  /** Returns true if field clonedFromJob is set (has been assigned a value) and false otherwise */
  public boolean isSetClonedFromJob() {
    return this.clonedFromJob != null;
  }

  public void setClonedFromJobIsSet(boolean value) {
    if (!value) {
      this.clonedFromJob = null;
    }
  }

  public com.wi.director.thrift.v1.messaging.JobPtr getSource() {
    return this.source;
  }

  public CreateOp setSource(com.wi.director.thrift.v1.messaging.JobPtr source) {
    this.source = source;
    return this;
  }

  public void unsetSource() {
    this.source = null;
  }

  /** Returns true if field source is set (has been assigned a value) and false otherwise */
  public boolean isSetSource() {
    return this.source != null;
  }

  public void setSourceIsSet(boolean value) {
    if (!value) {
      this.source = null;
    }
  }

  public boolean isMeshEnabled() {
    return this.meshEnabled;
  }

  public CreateOp setMeshEnabled(boolean meshEnabled) {
    this.meshEnabled = meshEnabled;
    setMeshEnabledIsSet(true);
    return this;
  }

  public void unsetMeshEnabled() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MESHENABLED_ISSET_ID);
  }

  /** Returns true if field meshEnabled is set (has been assigned a value) and false otherwise */
  public boolean isSetMeshEnabled() {
    return EncodingUtils.testBit(__isset_bitfield, __MESHENABLED_ISSET_ID);
  }

  public void setMeshEnabledIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MESHENABLED_ISSET_ID, value);
  }

  public com.wi.director.thrift.v1.job.PriorityLevel getPriority() {
    return this.priority;
  }

  public CreateOp setPriority(com.wi.director.thrift.v1.job.PriorityLevel priority) {
    this.priority = priority;
    return this;
  }

  public void unsetPriority() {
    this.priority = null;
  }

  /** Returns true if field priority is set (has been assigned a value) and false otherwise */
  public boolean isSetPriority() {
    return this.priority != null;
  }

  public void setPriorityIsSet(boolean value) {
    if (!value) {
      this.priority = null;
    }
  }

  public String getLocation() {
    return this.location;
  }

  public CreateOp setLocation(String location) {
    this.location = location;
    return this;
  }

  public void unsetLocation() {
    this.location = null;
  }

  /** Returns true if field location is set (has been assigned a value) and false otherwise */
  public boolean isSetLocation() {
    return this.location != null;
  }

  public void setLocationIsSet(boolean value) {
    if (!value) {
      this.location = null;
    }
  }

  public int getPlannedStartJobRoleIdsSize() {
    return (this.plannedStartJobRoleIds == null) ? 0 : this.plannedStartJobRoleIds.size();
  }

  public java.util.Iterator<String> getPlannedStartJobRoleIdsIterator() {
    return (this.plannedStartJobRoleIds == null) ? null : this.plannedStartJobRoleIds.iterator();
  }

  public void addToPlannedStartJobRoleIds(String elem) {
    if (this.plannedStartJobRoleIds == null) {
      this.plannedStartJobRoleIds = new ArrayList<String>();
    }
    this.plannedStartJobRoleIds.add(elem);
  }

  public List<String> getPlannedStartJobRoleIds() {
    return this.plannedStartJobRoleIds;
  }

  public CreateOp setPlannedStartJobRoleIds(List<String> plannedStartJobRoleIds) {
    this.plannedStartJobRoleIds = plannedStartJobRoleIds;
    return this;
  }

  public void unsetPlannedStartJobRoleIds() {
    this.plannedStartJobRoleIds = null;
  }

  /** Returns true if field plannedStartJobRoleIds is set (has been assigned a value) and false otherwise */
  public boolean isSetPlannedStartJobRoleIds() {
    return this.plannedStartJobRoleIds != null;
  }

  public void setPlannedStartJobRoleIdsIsSet(boolean value) {
    if (!value) {
      this.plannedStartJobRoleIds = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case IS_PREVIEW:
      if (value == null) {
        unsetIsPreview();
      } else {
        setIsPreview((Boolean)value);
      }
      break;

    case IS_FROM_OFFLINE:
      if (value == null) {
        unsetIsFromOffline();
      } else {
        setIsFromOffline((Boolean)value);
      }
      break;

    case CLONED_FROM_JOB:
      if (value == null) {
        unsetClonedFromJob();
      } else {
        setClonedFromJob((String)value);
      }
      break;

    case SOURCE:
      if (value == null) {
        unsetSource();
      } else {
        setSource((com.wi.director.thrift.v1.messaging.JobPtr)value);
      }
      break;

    case MESH_ENABLED:
      if (value == null) {
        unsetMeshEnabled();
      } else {
        setMeshEnabled((Boolean)value);
      }
      break;

    case PRIORITY:
      if (value == null) {
        unsetPriority();
      } else {
        setPriority((com.wi.director.thrift.v1.job.PriorityLevel)value);
      }
      break;

    case LOCATION:
      if (value == null) {
        unsetLocation();
      } else {
        setLocation((String)value);
      }
      break;

    case PLANNED_START_JOB_ROLE_IDS:
      if (value == null) {
        unsetPlannedStartJobRoleIds();
      } else {
        setPlannedStartJobRoleIds((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case IS_PREVIEW:
      return isIsPreview();

    case IS_FROM_OFFLINE:
      return isIsFromOffline();

    case CLONED_FROM_JOB:
      return getClonedFromJob();

    case SOURCE:
      return getSource();

    case MESH_ENABLED:
      return isMeshEnabled();

    case PRIORITY:
      return getPriority();

    case LOCATION:
      return getLocation();

    case PLANNED_START_JOB_ROLE_IDS:
      return getPlannedStartJobRoleIds();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case IS_PREVIEW:
      return isSetIsPreview();
    case IS_FROM_OFFLINE:
      return isSetIsFromOffline();
    case CLONED_FROM_JOB:
      return isSetClonedFromJob();
    case SOURCE:
      return isSetSource();
    case MESH_ENABLED:
      return isSetMeshEnabled();
    case PRIORITY:
      return isSetPriority();
    case LOCATION:
      return isSetLocation();
    case PLANNED_START_JOB_ROLE_IDS:
      return isSetPlannedStartJobRoleIds();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CreateOp)
      return this.equals((CreateOp)that);
    return false;
  }

  public boolean equals(CreateOp that) {
    if (that == null)
      return false;

    boolean this_present_isPreview = true;
    boolean that_present_isPreview = true;
    if (this_present_isPreview || that_present_isPreview) {
      if (!(this_present_isPreview && that_present_isPreview))
        return false;
      if (this.isPreview != that.isPreview)
        return false;
    }

    boolean this_present_isFromOffline = true;
    boolean that_present_isFromOffline = true;
    if (this_present_isFromOffline || that_present_isFromOffline) {
      if (!(this_present_isFromOffline && that_present_isFromOffline))
        return false;
      if (this.isFromOffline != that.isFromOffline)
        return false;
    }

    boolean this_present_clonedFromJob = true && this.isSetClonedFromJob();
    boolean that_present_clonedFromJob = true && that.isSetClonedFromJob();
    if (this_present_clonedFromJob || that_present_clonedFromJob) {
      if (!(this_present_clonedFromJob && that_present_clonedFromJob))
        return false;
      if (!this.clonedFromJob.equals(that.clonedFromJob))
        return false;
    }

    boolean this_present_source = true && this.isSetSource();
    boolean that_present_source = true && that.isSetSource();
    if (this_present_source || that_present_source) {
      if (!(this_present_source && that_present_source))
        return false;
      if (!this.source.equals(that.source))
        return false;
    }

    boolean this_present_meshEnabled = true && this.isSetMeshEnabled();
    boolean that_present_meshEnabled = true && that.isSetMeshEnabled();
    if (this_present_meshEnabled || that_present_meshEnabled) {
      if (!(this_present_meshEnabled && that_present_meshEnabled))
        return false;
      if (this.meshEnabled != that.meshEnabled)
        return false;
    }

    boolean this_present_priority = true && this.isSetPriority();
    boolean that_present_priority = true && that.isSetPriority();
    if (this_present_priority || that_present_priority) {
      if (!(this_present_priority && that_present_priority))
        return false;
      if (!this.priority.equals(that.priority))
        return false;
    }

    boolean this_present_location = true && this.isSetLocation();
    boolean that_present_location = true && that.isSetLocation();
    if (this_present_location || that_present_location) {
      if (!(this_present_location && that_present_location))
        return false;
      if (!this.location.equals(that.location))
        return false;
    }

    boolean this_present_plannedStartJobRoleIds = true && this.isSetPlannedStartJobRoleIds();
    boolean that_present_plannedStartJobRoleIds = true && that.isSetPlannedStartJobRoleIds();
    if (this_present_plannedStartJobRoleIds || that_present_plannedStartJobRoleIds) {
      if (!(this_present_plannedStartJobRoleIds && that_present_plannedStartJobRoleIds))
        return false;
      if (!this.plannedStartJobRoleIds.equals(that.plannedStartJobRoleIds))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_isPreview = true;
    list.add(present_isPreview);
    if (present_isPreview)
      list.add(isPreview);

    boolean present_isFromOffline = true;
    list.add(present_isFromOffline);
    if (present_isFromOffline)
      list.add(isFromOffline);

    boolean present_clonedFromJob = true && (isSetClonedFromJob());
    list.add(present_clonedFromJob);
    if (present_clonedFromJob)
      list.add(clonedFromJob);

    boolean present_source = true && (isSetSource());
    list.add(present_source);
    if (present_source)
      list.add(source);

    boolean present_meshEnabled = true && (isSetMeshEnabled());
    list.add(present_meshEnabled);
    if (present_meshEnabled)
      list.add(meshEnabled);

    boolean present_priority = true && (isSetPriority());
    list.add(present_priority);
    if (present_priority)
      list.add(priority);

    boolean present_location = true && (isSetLocation());
    list.add(present_location);
    if (present_location)
      list.add(location);

    boolean present_plannedStartJobRoleIds = true && (isSetPlannedStartJobRoleIds());
    list.add(present_plannedStartJobRoleIds);
    if (present_plannedStartJobRoleIds)
      list.add(plannedStartJobRoleIds);

    return list.hashCode();
  }

  @Override
  public int compareTo(CreateOp other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetIsPreview()).compareTo(other.isSetIsPreview());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsPreview()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isPreview, other.isPreview);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsFromOffline()).compareTo(other.isSetIsFromOffline());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsFromOffline()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isFromOffline, other.isFromOffline);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClonedFromJob()).compareTo(other.isSetClonedFromJob());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClonedFromJob()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clonedFromJob, other.clonedFromJob);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSource()).compareTo(other.isSetSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.source, other.source);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMeshEnabled()).compareTo(other.isSetMeshEnabled());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMeshEnabled()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.meshEnabled, other.meshEnabled);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPriority()).compareTo(other.isSetPriority());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPriority()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priority, other.priority);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocation()).compareTo(other.isSetLocation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.location, other.location);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlannedStartJobRoleIds()).compareTo(other.isSetPlannedStartJobRoleIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlannedStartJobRoleIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.plannedStartJobRoleIds, other.plannedStartJobRoleIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CreateOp(");
    boolean first = true;

    sb.append("isPreview:");
    sb.append(this.isPreview);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isFromOffline:");
    sb.append(this.isFromOffline);
    first = false;
    if (isSetClonedFromJob()) {
      if (!first) sb.append(", ");
      sb.append("clonedFromJob:");
      if (this.clonedFromJob == null) {
        sb.append("null");
      } else {
        sb.append(this.clonedFromJob);
      }
      first = false;
    }
    if (isSetSource()) {
      if (!first) sb.append(", ");
      sb.append("source:");
      if (this.source == null) {
        sb.append("null");
      } else {
        sb.append(this.source);
      }
      first = false;
    }
    if (isSetMeshEnabled()) {
      if (!first) sb.append(", ");
      sb.append("meshEnabled:");
      sb.append(this.meshEnabled);
      first = false;
    }
    if (isSetPriority()) {
      if (!first) sb.append(", ");
      sb.append("priority:");
      if (this.priority == null) {
        sb.append("null");
      } else {
        sb.append(this.priority);
      }
      first = false;
    }
    if (isSetLocation()) {
      if (!first) sb.append(", ");
      sb.append("location:");
      if (this.location == null) {
        sb.append("null");
      } else {
        sb.append(this.location);
      }
      first = false;
    }
    if (isSetPlannedStartJobRoleIds()) {
      if (!first) sb.append(", ");
      sb.append("plannedStartJobRoleIds:");
      if (this.plannedStartJobRoleIds == null) {
        sb.append("null");
      } else {
        sb.append(this.plannedStartJobRoleIds);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'isPreview' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'isFromOffline' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
    if (source != null) {
      source.validate();
    }
    if (priority != null) {
      priority.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CreateOpStandardSchemeFactory implements SchemeFactory {
    public CreateOpStandardScheme getScheme() {
      return new CreateOpStandardScheme();
    }
  }

  private static class CreateOpStandardScheme extends StandardScheme<CreateOp> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CreateOp struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // IS_PREVIEW
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isPreview = iprot.readBool();
              struct.setIsPreviewIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // IS_FROM_OFFLINE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isFromOffline = iprot.readBool();
              struct.setIsFromOfflineIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CLONED_FROM_JOB
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clonedFromJob = iprot.readString();
              struct.setClonedFromJobIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.source = new com.wi.director.thrift.v1.messaging.JobPtr();
              struct.source.read(iprot);
              struct.setSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MESH_ENABLED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.meshEnabled = iprot.readBool();
              struct.setMeshEnabledIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PRIORITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.priority = new com.wi.director.thrift.v1.job.PriorityLevel();
              struct.priority.read(iprot);
              struct.setPriorityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // LOCATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.location = iprot.readString();
              struct.setLocationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PLANNED_START_JOB_ROLE_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.plannedStartJobRoleIds = new ArrayList<String>(_list0.size);
                String _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readString();
                  struct.plannedStartJobRoleIds.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setPlannedStartJobRoleIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetIsPreview()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'isPreview' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetIsFromOffline()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'isFromOffline' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CreateOp struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(IS_PREVIEW_FIELD_DESC);
      oprot.writeBool(struct.isPreview);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_FROM_OFFLINE_FIELD_DESC);
      oprot.writeBool(struct.isFromOffline);
      oprot.writeFieldEnd();
      if (struct.clonedFromJob != null) {
        if (struct.isSetClonedFromJob()) {
          oprot.writeFieldBegin(CLONED_FROM_JOB_FIELD_DESC);
          oprot.writeString(struct.clonedFromJob);
          oprot.writeFieldEnd();
        }
      }
      if (struct.source != null) {
        if (struct.isSetSource()) {
          oprot.writeFieldBegin(SOURCE_FIELD_DESC);
          struct.source.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetMeshEnabled()) {
        oprot.writeFieldBegin(MESH_ENABLED_FIELD_DESC);
        oprot.writeBool(struct.meshEnabled);
        oprot.writeFieldEnd();
      }
      if (struct.priority != null) {
        if (struct.isSetPriority()) {
          oprot.writeFieldBegin(PRIORITY_FIELD_DESC);
          struct.priority.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.location != null) {
        if (struct.isSetLocation()) {
          oprot.writeFieldBegin(LOCATION_FIELD_DESC);
          oprot.writeString(struct.location);
          oprot.writeFieldEnd();
        }
      }
      if (struct.plannedStartJobRoleIds != null) {
        if (struct.isSetPlannedStartJobRoleIds()) {
          oprot.writeFieldBegin(PLANNED_START_JOB_ROLE_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.plannedStartJobRoleIds.size()));
            for (String _iter3 : struct.plannedStartJobRoleIds)
            {
              oprot.writeString(_iter3);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

}

