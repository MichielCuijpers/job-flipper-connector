/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.parsable.thrift.v1.job_event;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class AddTemplateSetOp implements org.apache.thrift.TBase<AddTemplateSetOp, AddTemplateSetOp._Fields>, java.io.Serializable, Cloneable, Comparable<AddTemplateSetOp> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AddTemplateSetOp");

  private static final org.apache.thrift.protocol.TField TEMPLATE_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("templateSet", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField TEMPLATES_FIELD_DESC = new org.apache.thrift.protocol.TField("templates", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField POSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("position", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField MATERIALIZED_STEPS_FIELD_DESC = new org.apache.thrift.protocol.TField("materializedSteps", org.apache.thrift.protocol.TType.LIST, (short)11);
  private static final org.apache.thrift.protocol.TField MATERIALIZED_DOCS_FIELD_DESC = new org.apache.thrift.protocol.TField("materializedDocs", org.apache.thrift.protocol.TType.LIST, (short)12);
  private static final org.apache.thrift.protocol.TField ADDED_AFTER_FIELD_DESC = new org.apache.thrift.protocol.TField("addedAfter", org.apache.thrift.protocol.TType.STRING, (short)13);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AddTemplateSetOpStandardSchemeFactory());
  }

  public com.wi.director.thrift.v1.common.VersionRef templateSet; // required
  public List<com.wi.director.thrift.v1.common.VersionRef> templates; // required
  public int position; // required
  public List<com.wi.director.thrift.v1.step.BaseStep> materializedSteps; // optional
  public List<com.wi.director.thrift.v1.document.Document> materializedDocs; // optional
  public String addedAfter; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TEMPLATE_SET((short)1, "templateSet"),
    TEMPLATES((short)2, "templates"),
    POSITION((short)3, "position"),
    MATERIALIZED_STEPS((short)11, "materializedSteps"),
    MATERIALIZED_DOCS((short)12, "materializedDocs"),
    ADDED_AFTER((short)13, "addedAfter");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TEMPLATE_SET
          return TEMPLATE_SET;
        case 2: // TEMPLATES
          return TEMPLATES;
        case 3: // POSITION
          return POSITION;
        case 11: // MATERIALIZED_STEPS
          return MATERIALIZED_STEPS;
        case 12: // MATERIALIZED_DOCS
          return MATERIALIZED_DOCS;
        case 13: // ADDED_AFTER
          return ADDED_AFTER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __POSITION_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.MATERIALIZED_STEPS,_Fields.MATERIALIZED_DOCS,_Fields.ADDED_AFTER};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TEMPLATE_SET, new org.apache.thrift.meta_data.FieldMetaData("templateSet", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.common.VersionRef.class)));
    tmpMap.put(_Fields.TEMPLATES, new org.apache.thrift.meta_data.FieldMetaData("templates", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.common.VersionRef.class))));
    tmpMap.put(_Fields.POSITION, new org.apache.thrift.meta_data.FieldMetaData("position", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MATERIALIZED_STEPS, new org.apache.thrift.meta_data.FieldMetaData("materializedSteps", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.step.BaseStep.class))));
    tmpMap.put(_Fields.MATERIALIZED_DOCS, new org.apache.thrift.meta_data.FieldMetaData("materializedDocs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.document.Document.class))));
    tmpMap.put(_Fields.ADDED_AFTER, new org.apache.thrift.meta_data.FieldMetaData("addedAfter", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "UUID")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AddTemplateSetOp.class, metaDataMap);
  }

  public AddTemplateSetOp() {
  }

  public AddTemplateSetOp(
    com.wi.director.thrift.v1.common.VersionRef templateSet,
    List<com.wi.director.thrift.v1.common.VersionRef> templates,
    int position)
  {
    this();
    this.templateSet = templateSet;
    this.templates = templates;
    this.position = position;
    setPositionIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AddTemplateSetOp(AddTemplateSetOp other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTemplateSet()) {
      this.templateSet = new com.wi.director.thrift.v1.common.VersionRef(other.templateSet);
    }
    if (other.isSetTemplates()) {
      List<com.wi.director.thrift.v1.common.VersionRef> __this__templates = new ArrayList<com.wi.director.thrift.v1.common.VersionRef>(other.templates.size());
      for (com.wi.director.thrift.v1.common.VersionRef other_element : other.templates) {
        __this__templates.add(new com.wi.director.thrift.v1.common.VersionRef(other_element));
      }
      this.templates = __this__templates;
    }
    this.position = other.position;
    if (other.isSetMaterializedSteps()) {
      List<com.wi.director.thrift.v1.step.BaseStep> __this__materializedSteps = new ArrayList<com.wi.director.thrift.v1.step.BaseStep>(other.materializedSteps.size());
      for (com.wi.director.thrift.v1.step.BaseStep other_element : other.materializedSteps) {
        __this__materializedSteps.add(new com.wi.director.thrift.v1.step.BaseStep(other_element));
      }
      this.materializedSteps = __this__materializedSteps;
    }
    if (other.isSetMaterializedDocs()) {
      List<com.wi.director.thrift.v1.document.Document> __this__materializedDocs = new ArrayList<com.wi.director.thrift.v1.document.Document>(other.materializedDocs.size());
      for (com.wi.director.thrift.v1.document.Document other_element : other.materializedDocs) {
        __this__materializedDocs.add(new com.wi.director.thrift.v1.document.Document(other_element));
      }
      this.materializedDocs = __this__materializedDocs;
    }
    if (other.isSetAddedAfter()) {
      this.addedAfter = other.addedAfter;
    }
  }

  public AddTemplateSetOp deepCopy() {
    return new AddTemplateSetOp(this);
  }

  @Override
  public void clear() {
    this.templateSet = null;
    this.templates = null;
    setPositionIsSet(false);
    this.position = 0;
    this.materializedSteps = null;
    this.materializedDocs = null;
    this.addedAfter = null;
  }

  public com.wi.director.thrift.v1.common.VersionRef getTemplateSet() {
    return this.templateSet;
  }

  public AddTemplateSetOp setTemplateSet(com.wi.director.thrift.v1.common.VersionRef templateSet) {
    this.templateSet = templateSet;
    return this;
  }

  public void unsetTemplateSet() {
    this.templateSet = null;
  }

  /** Returns true if field templateSet is set (has been assigned a value) and false otherwise */
  public boolean isSetTemplateSet() {
    return this.templateSet != null;
  }

  public void setTemplateSetIsSet(boolean value) {
    if (!value) {
      this.templateSet = null;
    }
  }

  public int getTemplatesSize() {
    return (this.templates == null) ? 0 : this.templates.size();
  }

  public java.util.Iterator<com.wi.director.thrift.v1.common.VersionRef> getTemplatesIterator() {
    return (this.templates == null) ? null : this.templates.iterator();
  }

  public void addToTemplates(com.wi.director.thrift.v1.common.VersionRef elem) {
    if (this.templates == null) {
      this.templates = new ArrayList<com.wi.director.thrift.v1.common.VersionRef>();
    }
    this.templates.add(elem);
  }

  public List<com.wi.director.thrift.v1.common.VersionRef> getTemplates() {
    return this.templates;
  }

  public AddTemplateSetOp setTemplates(List<com.wi.director.thrift.v1.common.VersionRef> templates) {
    this.templates = templates;
    return this;
  }

  public void unsetTemplates() {
    this.templates = null;
  }

  /** Returns true if field templates is set (has been assigned a value) and false otherwise */
  public boolean isSetTemplates() {
    return this.templates != null;
  }

  public void setTemplatesIsSet(boolean value) {
    if (!value) {
      this.templates = null;
    }
  }

  public int getPosition() {
    return this.position;
  }

  public AddTemplateSetOp setPosition(int position) {
    this.position = position;
    setPositionIsSet(true);
    return this;
  }

  public void unsetPosition() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POSITION_ISSET_ID);
  }

  /** Returns true if field position is set (has been assigned a value) and false otherwise */
  public boolean isSetPosition() {
    return EncodingUtils.testBit(__isset_bitfield, __POSITION_ISSET_ID);
  }

  public void setPositionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POSITION_ISSET_ID, value);
  }

  public int getMaterializedStepsSize() {
    return (this.materializedSteps == null) ? 0 : this.materializedSteps.size();
  }

  public java.util.Iterator<com.wi.director.thrift.v1.step.BaseStep> getMaterializedStepsIterator() {
    return (this.materializedSteps == null) ? null : this.materializedSteps.iterator();
  }

  public void addToMaterializedSteps(com.wi.director.thrift.v1.step.BaseStep elem) {
    if (this.materializedSteps == null) {
      this.materializedSteps = new ArrayList<com.wi.director.thrift.v1.step.BaseStep>();
    }
    this.materializedSteps.add(elem);
  }

  public List<com.wi.director.thrift.v1.step.BaseStep> getMaterializedSteps() {
    return this.materializedSteps;
  }

  public AddTemplateSetOp setMaterializedSteps(List<com.wi.director.thrift.v1.step.BaseStep> materializedSteps) {
    this.materializedSteps = materializedSteps;
    return this;
  }

  public void unsetMaterializedSteps() {
    this.materializedSteps = null;
  }

  /** Returns true if field materializedSteps is set (has been assigned a value) and false otherwise */
  public boolean isSetMaterializedSteps() {
    return this.materializedSteps != null;
  }

  public void setMaterializedStepsIsSet(boolean value) {
    if (!value) {
      this.materializedSteps = null;
    }
  }

  public int getMaterializedDocsSize() {
    return (this.materializedDocs == null) ? 0 : this.materializedDocs.size();
  }

  public java.util.Iterator<com.wi.director.thrift.v1.document.Document> getMaterializedDocsIterator() {
    return (this.materializedDocs == null) ? null : this.materializedDocs.iterator();
  }

  public void addToMaterializedDocs(com.wi.director.thrift.v1.document.Document elem) {
    if (this.materializedDocs == null) {
      this.materializedDocs = new ArrayList<com.wi.director.thrift.v1.document.Document>();
    }
    this.materializedDocs.add(elem);
  }

  public List<com.wi.director.thrift.v1.document.Document> getMaterializedDocs() {
    return this.materializedDocs;
  }

  public AddTemplateSetOp setMaterializedDocs(List<com.wi.director.thrift.v1.document.Document> materializedDocs) {
    this.materializedDocs = materializedDocs;
    return this;
  }

  public void unsetMaterializedDocs() {
    this.materializedDocs = null;
  }

  /** Returns true if field materializedDocs is set (has been assigned a value) and false otherwise */
  public boolean isSetMaterializedDocs() {
    return this.materializedDocs != null;
  }

  public void setMaterializedDocsIsSet(boolean value) {
    if (!value) {
      this.materializedDocs = null;
    }
  }

  public String getAddedAfter() {
    return this.addedAfter;
  }

  public AddTemplateSetOp setAddedAfter(String addedAfter) {
    this.addedAfter = addedAfter;
    return this;
  }

  public void unsetAddedAfter() {
    this.addedAfter = null;
  }

  /** Returns true if field addedAfter is set (has been assigned a value) and false otherwise */
  public boolean isSetAddedAfter() {
    return this.addedAfter != null;
  }

  public void setAddedAfterIsSet(boolean value) {
    if (!value) {
      this.addedAfter = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TEMPLATE_SET:
      if (value == null) {
        unsetTemplateSet();
      } else {
        setTemplateSet((com.wi.director.thrift.v1.common.VersionRef)value);
      }
      break;

    case TEMPLATES:
      if (value == null) {
        unsetTemplates();
      } else {
        setTemplates((List<com.wi.director.thrift.v1.common.VersionRef>)value);
      }
      break;

    case POSITION:
      if (value == null) {
        unsetPosition();
      } else {
        setPosition((Integer)value);
      }
      break;

    case MATERIALIZED_STEPS:
      if (value == null) {
        unsetMaterializedSteps();
      } else {
        setMaterializedSteps((List<com.wi.director.thrift.v1.step.BaseStep>)value);
      }
      break;

    case MATERIALIZED_DOCS:
      if (value == null) {
        unsetMaterializedDocs();
      } else {
        setMaterializedDocs((List<com.wi.director.thrift.v1.document.Document>)value);
      }
      break;

    case ADDED_AFTER:
      if (value == null) {
        unsetAddedAfter();
      } else {
        setAddedAfter((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TEMPLATE_SET:
      return getTemplateSet();

    case TEMPLATES:
      return getTemplates();

    case POSITION:
      return getPosition();

    case MATERIALIZED_STEPS:
      return getMaterializedSteps();

    case MATERIALIZED_DOCS:
      return getMaterializedDocs();

    case ADDED_AFTER:
      return getAddedAfter();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TEMPLATE_SET:
      return isSetTemplateSet();
    case TEMPLATES:
      return isSetTemplates();
    case POSITION:
      return isSetPosition();
    case MATERIALIZED_STEPS:
      return isSetMaterializedSteps();
    case MATERIALIZED_DOCS:
      return isSetMaterializedDocs();
    case ADDED_AFTER:
      return isSetAddedAfter();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AddTemplateSetOp)
      return this.equals((AddTemplateSetOp)that);
    return false;
  }

  public boolean equals(AddTemplateSetOp that) {
    if (that == null)
      return false;

    boolean this_present_templateSet = true && this.isSetTemplateSet();
    boolean that_present_templateSet = true && that.isSetTemplateSet();
    if (this_present_templateSet || that_present_templateSet) {
      if (!(this_present_templateSet && that_present_templateSet))
        return false;
      if (!this.templateSet.equals(that.templateSet))
        return false;
    }

    boolean this_present_templates = true && this.isSetTemplates();
    boolean that_present_templates = true && that.isSetTemplates();
    if (this_present_templates || that_present_templates) {
      if (!(this_present_templates && that_present_templates))
        return false;
      if (!this.templates.equals(that.templates))
        return false;
    }

    boolean this_present_position = true;
    boolean that_present_position = true;
    if (this_present_position || that_present_position) {
      if (!(this_present_position && that_present_position))
        return false;
      if (this.position != that.position)
        return false;
    }

    boolean this_present_materializedSteps = true && this.isSetMaterializedSteps();
    boolean that_present_materializedSteps = true && that.isSetMaterializedSteps();
    if (this_present_materializedSteps || that_present_materializedSteps) {
      if (!(this_present_materializedSteps && that_present_materializedSteps))
        return false;
      if (!this.materializedSteps.equals(that.materializedSteps))
        return false;
    }

    boolean this_present_materializedDocs = true && this.isSetMaterializedDocs();
    boolean that_present_materializedDocs = true && that.isSetMaterializedDocs();
    if (this_present_materializedDocs || that_present_materializedDocs) {
      if (!(this_present_materializedDocs && that_present_materializedDocs))
        return false;
      if (!this.materializedDocs.equals(that.materializedDocs))
        return false;
    }

    boolean this_present_addedAfter = true && this.isSetAddedAfter();
    boolean that_present_addedAfter = true && that.isSetAddedAfter();
    if (this_present_addedAfter || that_present_addedAfter) {
      if (!(this_present_addedAfter && that_present_addedAfter))
        return false;
      if (!this.addedAfter.equals(that.addedAfter))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_templateSet = true && (isSetTemplateSet());
    list.add(present_templateSet);
    if (present_templateSet)
      list.add(templateSet);

    boolean present_templates = true && (isSetTemplates());
    list.add(present_templates);
    if (present_templates)
      list.add(templates);

    boolean present_position = true;
    list.add(present_position);
    if (present_position)
      list.add(position);

    boolean present_materializedSteps = true && (isSetMaterializedSteps());
    list.add(present_materializedSteps);
    if (present_materializedSteps)
      list.add(materializedSteps);

    boolean present_materializedDocs = true && (isSetMaterializedDocs());
    list.add(present_materializedDocs);
    if (present_materializedDocs)
      list.add(materializedDocs);

    boolean present_addedAfter = true && (isSetAddedAfter());
    list.add(present_addedAfter);
    if (present_addedAfter)
      list.add(addedAfter);

    return list.hashCode();
  }

  @Override
  public int compareTo(AddTemplateSetOp other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTemplateSet()).compareTo(other.isSetTemplateSet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTemplateSet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.templateSet, other.templateSet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTemplates()).compareTo(other.isSetTemplates());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTemplates()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.templates, other.templates);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPosition()).compareTo(other.isSetPosition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPosition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.position, other.position);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaterializedSteps()).compareTo(other.isSetMaterializedSteps());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaterializedSteps()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.materializedSteps, other.materializedSteps);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaterializedDocs()).compareTo(other.isSetMaterializedDocs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaterializedDocs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.materializedDocs, other.materializedDocs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAddedAfter()).compareTo(other.isSetAddedAfter());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddedAfter()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.addedAfter, other.addedAfter);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AddTemplateSetOp(");
    boolean first = true;

    sb.append("templateSet:");
    if (this.templateSet == null) {
      sb.append("null");
    } else {
      sb.append(this.templateSet);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("templates:");
    if (this.templates == null) {
      sb.append("null");
    } else {
      sb.append(this.templates);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("position:");
    sb.append(this.position);
    first = false;
    if (isSetMaterializedSteps()) {
      if (!first) sb.append(", ");
      sb.append("materializedSteps:");
      if (this.materializedSteps == null) {
        sb.append("null");
      } else {
        sb.append(this.materializedSteps);
      }
      first = false;
    }
    if (isSetMaterializedDocs()) {
      if (!first) sb.append(", ");
      sb.append("materializedDocs:");
      if (this.materializedDocs == null) {
        sb.append("null");
      } else {
        sb.append(this.materializedDocs);
      }
      first = false;
    }
    if (isSetAddedAfter()) {
      if (!first) sb.append(", ");
      sb.append("addedAfter:");
      if (this.addedAfter == null) {
        sb.append("null");
      } else {
        sb.append(this.addedAfter);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (templateSet == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'templateSet' was not present! Struct: " + toString());
    }
    if (templates == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'templates' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'position' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
    if (templateSet != null) {
      templateSet.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AddTemplateSetOpStandardSchemeFactory implements SchemeFactory {
    public AddTemplateSetOpStandardScheme getScheme() {
      return new AddTemplateSetOpStandardScheme();
    }
  }

  private static class AddTemplateSetOpStandardScheme extends StandardScheme<AddTemplateSetOp> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AddTemplateSetOp struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TEMPLATE_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.templateSet = new com.wi.director.thrift.v1.common.VersionRef();
              struct.templateSet.read(iprot);
              struct.setTemplateSetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TEMPLATES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list37 = iprot.readListBegin();
                struct.templates = new ArrayList<com.wi.director.thrift.v1.common.VersionRef>(_list37.size);
                com.wi.director.thrift.v1.common.VersionRef _elem38;
                for (int _i39 = 0; _i39 < _list37.size; ++_i39)
                {
                  _elem38 = new com.wi.director.thrift.v1.common.VersionRef();
                  _elem38.read(iprot);
                  struct.templates.add(_elem38);
                }
                iprot.readListEnd();
              }
              struct.setTemplatesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // POSITION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.position = iprot.readI32();
              struct.setPositionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // MATERIALIZED_STEPS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                struct.materializedSteps = new ArrayList<com.wi.director.thrift.v1.step.BaseStep>(_list40.size);
                com.wi.director.thrift.v1.step.BaseStep _elem41;
                for (int _i42 = 0; _i42 < _list40.size; ++_i42)
                {
                  _elem41 = new com.wi.director.thrift.v1.step.BaseStep();
                  _elem41.read(iprot);
                  struct.materializedSteps.add(_elem41);
                }
                iprot.readListEnd();
              }
              struct.setMaterializedStepsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // MATERIALIZED_DOCS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list43 = iprot.readListBegin();
                struct.materializedDocs = new ArrayList<com.wi.director.thrift.v1.document.Document>(_list43.size);
                com.wi.director.thrift.v1.document.Document _elem44;
                for (int _i45 = 0; _i45 < _list43.size; ++_i45)
                {
                  _elem44 = new com.wi.director.thrift.v1.document.Document();
                  _elem44.read(iprot);
                  struct.materializedDocs.add(_elem44);
                }
                iprot.readListEnd();
              }
              struct.setMaterializedDocsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // ADDED_AFTER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.addedAfter = iprot.readString();
              struct.setAddedAfterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetPosition()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'position' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AddTemplateSetOp struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.templateSet != null) {
        oprot.writeFieldBegin(TEMPLATE_SET_FIELD_DESC);
        struct.templateSet.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.templates != null) {
        oprot.writeFieldBegin(TEMPLATES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.templates.size()));
          for (com.wi.director.thrift.v1.common.VersionRef _iter46 : struct.templates)
          {
            _iter46.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(POSITION_FIELD_DESC);
      oprot.writeI32(struct.position);
      oprot.writeFieldEnd();
      if (struct.materializedSteps != null) {
        if (struct.isSetMaterializedSteps()) {
          oprot.writeFieldBegin(MATERIALIZED_STEPS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.materializedSteps.size()));
            for (com.wi.director.thrift.v1.step.BaseStep _iter47 : struct.materializedSteps)
            {
              _iter47.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.materializedDocs != null) {
        if (struct.isSetMaterializedDocs()) {
          oprot.writeFieldBegin(MATERIALIZED_DOCS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.materializedDocs.size()));
            for (com.wi.director.thrift.v1.document.Document _iter48 : struct.materializedDocs)
            {
              _iter48.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.addedAfter != null) {
        if (struct.isSetAddedAfter()) {
          oprot.writeFieldBegin(ADDED_AFTER_FIELD_DESC);
          oprot.writeString(struct.addedAfter);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

}

