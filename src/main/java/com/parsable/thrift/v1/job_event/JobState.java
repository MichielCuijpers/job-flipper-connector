/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.parsable.thrift.v1.job_event;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class JobState implements org.apache.thrift.TBase<JobState, JobState._Fields>, java.io.Serializable, Cloneable, Comparable<JobState> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("JobState");

  private static final org.apache.thrift.protocol.TField JOB_FIELD_DESC = new org.apache.thrift.protocol.TField("job", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField MESSAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("messages", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField EXECUTION_SNIPPETS_FIELD_DESC = new org.apache.thrift.protocol.TField("executionSnippets", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField NODES_FIELD_DESC = new org.apache.thrift.protocol.TField("nodes", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField EVENTS_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("eventsCount", org.apache.thrift.protocol.TType.I64, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new JobStateStandardSchemeFactory());
  }

  public com.wi.director.thrift.v1.job.JobModular job; // required
  public List<com.wi.director.thrift.v1.messaging.Message> messages; // required
  public List<com.wi.director.thrift.v1.job.ExecutionSnippet> executionSnippets; // required
  public List<com.parsable.thrift.v1.core_event.NodeVersion> nodes; // required
  public long eventsCount; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    JOB((short)1, "job"),
    MESSAGES((short)2, "messages"),
    EXECUTION_SNIPPETS((short)3, "executionSnippets"),
    NODES((short)4, "nodes"),
    EVENTS_COUNT((short)5, "eventsCount");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // JOB
          return JOB;
        case 2: // MESSAGES
          return MESSAGES;
        case 3: // EXECUTION_SNIPPETS
          return EXECUTION_SNIPPETS;
        case 4: // NODES
          return NODES;
        case 5: // EVENTS_COUNT
          return EVENTS_COUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __EVENTSCOUNT_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.JOB, new org.apache.thrift.meta_data.FieldMetaData("job", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.job.JobModular.class)));
    tmpMap.put(_Fields.MESSAGES, new org.apache.thrift.meta_data.FieldMetaData("messages", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.messaging.Message.class))));
    tmpMap.put(_Fields.EXECUTION_SNIPPETS, new org.apache.thrift.meta_data.FieldMetaData("executionSnippets", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.job.ExecutionSnippet.class))));
    tmpMap.put(_Fields.NODES, new org.apache.thrift.meta_data.FieldMetaData("nodes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.parsable.thrift.v1.core_event.NodeVersion.class))));
    tmpMap.put(_Fields.EVENTS_COUNT, new org.apache.thrift.meta_data.FieldMetaData("eventsCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(JobState.class, metaDataMap);
  }

  public JobState() {
  }

  public JobState(
    com.wi.director.thrift.v1.job.JobModular job,
    List<com.wi.director.thrift.v1.messaging.Message> messages,
    List<com.wi.director.thrift.v1.job.ExecutionSnippet> executionSnippets,
    List<com.parsable.thrift.v1.core_event.NodeVersion> nodes,
    long eventsCount)
  {
    this();
    this.job = job;
    this.messages = messages;
    this.executionSnippets = executionSnippets;
    this.nodes = nodes;
    this.eventsCount = eventsCount;
    setEventsCountIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public JobState(JobState other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetJob()) {
      this.job = new com.wi.director.thrift.v1.job.JobModular(other.job);
    }
    if (other.isSetMessages()) {
      List<com.wi.director.thrift.v1.messaging.Message> __this__messages = new ArrayList<com.wi.director.thrift.v1.messaging.Message>(other.messages.size());
      for (com.wi.director.thrift.v1.messaging.Message other_element : other.messages) {
        __this__messages.add(new com.wi.director.thrift.v1.messaging.Message(other_element));
      }
      this.messages = __this__messages;
    }
    if (other.isSetExecutionSnippets()) {
      List<com.wi.director.thrift.v1.job.ExecutionSnippet> __this__executionSnippets = new ArrayList<com.wi.director.thrift.v1.job.ExecutionSnippet>(other.executionSnippets.size());
      for (com.wi.director.thrift.v1.job.ExecutionSnippet other_element : other.executionSnippets) {
        __this__executionSnippets.add(new com.wi.director.thrift.v1.job.ExecutionSnippet(other_element));
      }
      this.executionSnippets = __this__executionSnippets;
    }
    if (other.isSetNodes()) {
      List<com.parsable.thrift.v1.core_event.NodeVersion> __this__nodes = new ArrayList<com.parsable.thrift.v1.core_event.NodeVersion>(other.nodes.size());
      for (com.parsable.thrift.v1.core_event.NodeVersion other_element : other.nodes) {
        __this__nodes.add(new com.parsable.thrift.v1.core_event.NodeVersion(other_element));
      }
      this.nodes = __this__nodes;
    }
    this.eventsCount = other.eventsCount;
  }

  public JobState deepCopy() {
    return new JobState(this);
  }

  @Override
  public void clear() {
    this.job = null;
    this.messages = null;
    this.executionSnippets = null;
    this.nodes = null;
    setEventsCountIsSet(false);
    this.eventsCount = 0;
  }

  public com.wi.director.thrift.v1.job.JobModular getJob() {
    return this.job;
  }

  public JobState setJob(com.wi.director.thrift.v1.job.JobModular job) {
    this.job = job;
    return this;
  }

  public void unsetJob() {
    this.job = null;
  }

  /** Returns true if field job is set (has been assigned a value) and false otherwise */
  public boolean isSetJob() {
    return this.job != null;
  }

  public void setJobIsSet(boolean value) {
    if (!value) {
      this.job = null;
    }
  }

  public int getMessagesSize() {
    return (this.messages == null) ? 0 : this.messages.size();
  }

  public java.util.Iterator<com.wi.director.thrift.v1.messaging.Message> getMessagesIterator() {
    return (this.messages == null) ? null : this.messages.iterator();
  }

  public void addToMessages(com.wi.director.thrift.v1.messaging.Message elem) {
    if (this.messages == null) {
      this.messages = new ArrayList<com.wi.director.thrift.v1.messaging.Message>();
    }
    this.messages.add(elem);
  }

  public List<com.wi.director.thrift.v1.messaging.Message> getMessages() {
    return this.messages;
  }

  public JobState setMessages(List<com.wi.director.thrift.v1.messaging.Message> messages) {
    this.messages = messages;
    return this;
  }

  public void unsetMessages() {
    this.messages = null;
  }

  /** Returns true if field messages is set (has been assigned a value) and false otherwise */
  public boolean isSetMessages() {
    return this.messages != null;
  }

  public void setMessagesIsSet(boolean value) {
    if (!value) {
      this.messages = null;
    }
  }

  public int getExecutionSnippetsSize() {
    return (this.executionSnippets == null) ? 0 : this.executionSnippets.size();
  }

  public java.util.Iterator<com.wi.director.thrift.v1.job.ExecutionSnippet> getExecutionSnippetsIterator() {
    return (this.executionSnippets == null) ? null : this.executionSnippets.iterator();
  }

  public void addToExecutionSnippets(com.wi.director.thrift.v1.job.ExecutionSnippet elem) {
    if (this.executionSnippets == null) {
      this.executionSnippets = new ArrayList<com.wi.director.thrift.v1.job.ExecutionSnippet>();
    }
    this.executionSnippets.add(elem);
  }

  public List<com.wi.director.thrift.v1.job.ExecutionSnippet> getExecutionSnippets() {
    return this.executionSnippets;
  }

  public JobState setExecutionSnippets(List<com.wi.director.thrift.v1.job.ExecutionSnippet> executionSnippets) {
    this.executionSnippets = executionSnippets;
    return this;
  }

  public void unsetExecutionSnippets() {
    this.executionSnippets = null;
  }

  /** Returns true if field executionSnippets is set (has been assigned a value) and false otherwise */
  public boolean isSetExecutionSnippets() {
    return this.executionSnippets != null;
  }

  public void setExecutionSnippetsIsSet(boolean value) {
    if (!value) {
      this.executionSnippets = null;
    }
  }

  public int getNodesSize() {
    return (this.nodes == null) ? 0 : this.nodes.size();
  }

  public java.util.Iterator<com.parsable.thrift.v1.core_event.NodeVersion> getNodesIterator() {
    return (this.nodes == null) ? null : this.nodes.iterator();
  }

  public void addToNodes(com.parsable.thrift.v1.core_event.NodeVersion elem) {
    if (this.nodes == null) {
      this.nodes = new ArrayList<com.parsable.thrift.v1.core_event.NodeVersion>();
    }
    this.nodes.add(elem);
  }

  public List<com.parsable.thrift.v1.core_event.NodeVersion> getNodes() {
    return this.nodes;
  }

  public JobState setNodes(List<com.parsable.thrift.v1.core_event.NodeVersion> nodes) {
    this.nodes = nodes;
    return this;
  }

  public void unsetNodes() {
    this.nodes = null;
  }

  /** Returns true if field nodes is set (has been assigned a value) and false otherwise */
  public boolean isSetNodes() {
    return this.nodes != null;
  }

  public void setNodesIsSet(boolean value) {
    if (!value) {
      this.nodes = null;
    }
  }

  public long getEventsCount() {
    return this.eventsCount;
  }

  public JobState setEventsCount(long eventsCount) {
    this.eventsCount = eventsCount;
    setEventsCountIsSet(true);
    return this;
  }

  public void unsetEventsCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EVENTSCOUNT_ISSET_ID);
  }

  /** Returns true if field eventsCount is set (has been assigned a value) and false otherwise */
  public boolean isSetEventsCount() {
    return EncodingUtils.testBit(__isset_bitfield, __EVENTSCOUNT_ISSET_ID);
  }

  public void setEventsCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EVENTSCOUNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case JOB:
      if (value == null) {
        unsetJob();
      } else {
        setJob((com.wi.director.thrift.v1.job.JobModular)value);
      }
      break;

    case MESSAGES:
      if (value == null) {
        unsetMessages();
      } else {
        setMessages((List<com.wi.director.thrift.v1.messaging.Message>)value);
      }
      break;

    case EXECUTION_SNIPPETS:
      if (value == null) {
        unsetExecutionSnippets();
      } else {
        setExecutionSnippets((List<com.wi.director.thrift.v1.job.ExecutionSnippet>)value);
      }
      break;

    case NODES:
      if (value == null) {
        unsetNodes();
      } else {
        setNodes((List<com.parsable.thrift.v1.core_event.NodeVersion>)value);
      }
      break;

    case EVENTS_COUNT:
      if (value == null) {
        unsetEventsCount();
      } else {
        setEventsCount((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case JOB:
      return getJob();

    case MESSAGES:
      return getMessages();

    case EXECUTION_SNIPPETS:
      return getExecutionSnippets();

    case NODES:
      return getNodes();

    case EVENTS_COUNT:
      return getEventsCount();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case JOB:
      return isSetJob();
    case MESSAGES:
      return isSetMessages();
    case EXECUTION_SNIPPETS:
      return isSetExecutionSnippets();
    case NODES:
      return isSetNodes();
    case EVENTS_COUNT:
      return isSetEventsCount();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof JobState)
      return this.equals((JobState)that);
    return false;
  }

  public boolean equals(JobState that) {
    if (that == null)
      return false;

    boolean this_present_job = true && this.isSetJob();
    boolean that_present_job = true && that.isSetJob();
    if (this_present_job || that_present_job) {
      if (!(this_present_job && that_present_job))
        return false;
      if (!this.job.equals(that.job))
        return false;
    }

    boolean this_present_messages = true && this.isSetMessages();
    boolean that_present_messages = true && that.isSetMessages();
    if (this_present_messages || that_present_messages) {
      if (!(this_present_messages && that_present_messages))
        return false;
      if (!this.messages.equals(that.messages))
        return false;
    }

    boolean this_present_executionSnippets = true && this.isSetExecutionSnippets();
    boolean that_present_executionSnippets = true && that.isSetExecutionSnippets();
    if (this_present_executionSnippets || that_present_executionSnippets) {
      if (!(this_present_executionSnippets && that_present_executionSnippets))
        return false;
      if (!this.executionSnippets.equals(that.executionSnippets))
        return false;
    }

    boolean this_present_nodes = true && this.isSetNodes();
    boolean that_present_nodes = true && that.isSetNodes();
    if (this_present_nodes || that_present_nodes) {
      if (!(this_present_nodes && that_present_nodes))
        return false;
      if (!this.nodes.equals(that.nodes))
        return false;
    }

    boolean this_present_eventsCount = true;
    boolean that_present_eventsCount = true;
    if (this_present_eventsCount || that_present_eventsCount) {
      if (!(this_present_eventsCount && that_present_eventsCount))
        return false;
      if (this.eventsCount != that.eventsCount)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_job = true && (isSetJob());
    list.add(present_job);
    if (present_job)
      list.add(job);

    boolean present_messages = true && (isSetMessages());
    list.add(present_messages);
    if (present_messages)
      list.add(messages);

    boolean present_executionSnippets = true && (isSetExecutionSnippets());
    list.add(present_executionSnippets);
    if (present_executionSnippets)
      list.add(executionSnippets);

    boolean present_nodes = true && (isSetNodes());
    list.add(present_nodes);
    if (present_nodes)
      list.add(nodes);

    boolean present_eventsCount = true;
    list.add(present_eventsCount);
    if (present_eventsCount)
      list.add(eventsCount);

    return list.hashCode();
  }

  @Override
  public int compareTo(JobState other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetJob()).compareTo(other.isSetJob());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJob()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.job, other.job);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMessages()).compareTo(other.isSetMessages());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessages()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messages, other.messages);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExecutionSnippets()).compareTo(other.isSetExecutionSnippets());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecutionSnippets()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.executionSnippets, other.executionSnippets);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNodes()).compareTo(other.isSetNodes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNodes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodes, other.nodes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEventsCount()).compareTo(other.isSetEventsCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEventsCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eventsCount, other.eventsCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("JobState(");
    boolean first = true;

    sb.append("job:");
    if (this.job == null) {
      sb.append("null");
    } else {
      sb.append(this.job);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("messages:");
    if (this.messages == null) {
      sb.append("null");
    } else {
      sb.append(this.messages);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("executionSnippets:");
    if (this.executionSnippets == null) {
      sb.append("null");
    } else {
      sb.append(this.executionSnippets);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nodes:");
    if (this.nodes == null) {
      sb.append("null");
    } else {
      sb.append(this.nodes);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("eventsCount:");
    sb.append(this.eventsCount);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (job != null) {
      job.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class JobStateStandardSchemeFactory implements SchemeFactory {
    public JobStateStandardScheme getScheme() {
      return new JobStateStandardScheme();
    }
  }

  private static class JobStateStandardScheme extends StandardScheme<JobState> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, JobState struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // JOB
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.job = new com.wi.director.thrift.v1.job.JobModular();
              struct.job.read(iprot);
              struct.setJobIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MESSAGES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list58 = iprot.readListBegin();
                struct.messages = new ArrayList<com.wi.director.thrift.v1.messaging.Message>(_list58.size);
                com.wi.director.thrift.v1.messaging.Message _elem59;
                for (int _i60 = 0; _i60 < _list58.size; ++_i60)
                {
                  _elem59 = new com.wi.director.thrift.v1.messaging.Message();
                  _elem59.read(iprot);
                  struct.messages.add(_elem59);
                }
                iprot.readListEnd();
              }
              struct.setMessagesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EXECUTION_SNIPPETS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list61 = iprot.readListBegin();
                struct.executionSnippets = new ArrayList<com.wi.director.thrift.v1.job.ExecutionSnippet>(_list61.size);
                com.wi.director.thrift.v1.job.ExecutionSnippet _elem62;
                for (int _i63 = 0; _i63 < _list61.size; ++_i63)
                {
                  _elem62 = new com.wi.director.thrift.v1.job.ExecutionSnippet();
                  _elem62.read(iprot);
                  struct.executionSnippets.add(_elem62);
                }
                iprot.readListEnd();
              }
              struct.setExecutionSnippetsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NODES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list64 = iprot.readListBegin();
                struct.nodes = new ArrayList<com.parsable.thrift.v1.core_event.NodeVersion>(_list64.size);
                com.parsable.thrift.v1.core_event.NodeVersion _elem65;
                for (int _i66 = 0; _i66 < _list64.size; ++_i66)
                {
                  _elem65 = new com.parsable.thrift.v1.core_event.NodeVersion();
                  _elem65.read(iprot);
                  struct.nodes.add(_elem65);
                }
                iprot.readListEnd();
              }
              struct.setNodesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // EVENTS_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.eventsCount = iprot.readI64();
              struct.setEventsCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, JobState struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.job != null) {
        oprot.writeFieldBegin(JOB_FIELD_DESC);
        struct.job.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.messages != null) {
        oprot.writeFieldBegin(MESSAGES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.messages.size()));
          for (com.wi.director.thrift.v1.messaging.Message _iter67 : struct.messages)
          {
            _iter67.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.executionSnippets != null) {
        oprot.writeFieldBegin(EXECUTION_SNIPPETS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.executionSnippets.size()));
          for (com.wi.director.thrift.v1.job.ExecutionSnippet _iter68 : struct.executionSnippets)
          {
            _iter68.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.nodes != null) {
        oprot.writeFieldBegin(NODES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.nodes.size()));
          for (com.parsable.thrift.v1.core_event.NodeVersion _iter69 : struct.nodes)
          {
            _iter69.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(EVENTS_COUNT_FIELD_DESC);
      oprot.writeI64(struct.eventsCount);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

}

