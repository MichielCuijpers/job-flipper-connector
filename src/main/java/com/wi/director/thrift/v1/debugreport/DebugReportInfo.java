/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wi.director.thrift.v1.debugreport;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class DebugReportInfo implements org.apache.thrift.TBase<DebugReportInfo, DebugReportInfo._Fields>, java.io.Serializable, Cloneable, Comparable<DebugReportInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DebugReportInfo");

  private static final org.apache.thrift.protocol.TField REPORT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("reportId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField RESERVED_DOC_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("reservedDocIds", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DebugReportInfoStandardSchemeFactory());
  }

  public String reportId; // required
  public List<String> reservedDocIds; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    REPORT_ID((short)1, "reportId"),
    RESERVED_DOC_IDS((short)2, "reservedDocIds");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // REPORT_ID
          return REPORT_ID;
        case 2: // RESERVED_DOC_IDS
          return RESERVED_DOC_IDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.REPORT_ID, new org.apache.thrift.meta_data.FieldMetaData("reportId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RESERVED_DOC_IDS, new org.apache.thrift.meta_data.FieldMetaData("reservedDocIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DebugReportInfo.class, metaDataMap);
  }

  public DebugReportInfo() {
  }

  public DebugReportInfo(
    String reportId,
    List<String> reservedDocIds)
  {
    this();
    this.reportId = reportId;
    this.reservedDocIds = reservedDocIds;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DebugReportInfo(DebugReportInfo other) {
    if (other.isSetReportId()) {
      this.reportId = other.reportId;
    }
    if (other.isSetReservedDocIds()) {
      List<String> __this__reservedDocIds = new ArrayList<String>(other.reservedDocIds);
      this.reservedDocIds = __this__reservedDocIds;
    }
  }

  public DebugReportInfo deepCopy() {
    return new DebugReportInfo(this);
  }

  @Override
  public void clear() {
    this.reportId = null;
    this.reservedDocIds = null;
  }

  public String getReportId() {
    return this.reportId;
  }

  public DebugReportInfo setReportId(String reportId) {
    this.reportId = reportId;
    return this;
  }

  public void unsetReportId() {
    this.reportId = null;
  }

  /** Returns true if field reportId is set (has been assigned a value) and false otherwise */
  public boolean isSetReportId() {
    return this.reportId != null;
  }

  public void setReportIdIsSet(boolean value) {
    if (!value) {
      this.reportId = null;
    }
  }

  public int getReservedDocIdsSize() {
    return (this.reservedDocIds == null) ? 0 : this.reservedDocIds.size();
  }

  public java.util.Iterator<String> getReservedDocIdsIterator() {
    return (this.reservedDocIds == null) ? null : this.reservedDocIds.iterator();
  }

  public void addToReservedDocIds(String elem) {
    if (this.reservedDocIds == null) {
      this.reservedDocIds = new ArrayList<String>();
    }
    this.reservedDocIds.add(elem);
  }

  public List<String> getReservedDocIds() {
    return this.reservedDocIds;
  }

  public DebugReportInfo setReservedDocIds(List<String> reservedDocIds) {
    this.reservedDocIds = reservedDocIds;
    return this;
  }

  public void unsetReservedDocIds() {
    this.reservedDocIds = null;
  }

  /** Returns true if field reservedDocIds is set (has been assigned a value) and false otherwise */
  public boolean isSetReservedDocIds() {
    return this.reservedDocIds != null;
  }

  public void setReservedDocIdsIsSet(boolean value) {
    if (!value) {
      this.reservedDocIds = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case REPORT_ID:
      if (value == null) {
        unsetReportId();
      } else {
        setReportId((String)value);
      }
      break;

    case RESERVED_DOC_IDS:
      if (value == null) {
        unsetReservedDocIds();
      } else {
        setReservedDocIds((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case REPORT_ID:
      return getReportId();

    case RESERVED_DOC_IDS:
      return getReservedDocIds();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case REPORT_ID:
      return isSetReportId();
    case RESERVED_DOC_IDS:
      return isSetReservedDocIds();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DebugReportInfo)
      return this.equals((DebugReportInfo)that);
    return false;
  }

  public boolean equals(DebugReportInfo that) {
    if (that == null)
      return false;

    boolean this_present_reportId = true && this.isSetReportId();
    boolean that_present_reportId = true && that.isSetReportId();
    if (this_present_reportId || that_present_reportId) {
      if (!(this_present_reportId && that_present_reportId))
        return false;
      if (!this.reportId.equals(that.reportId))
        return false;
    }

    boolean this_present_reservedDocIds = true && this.isSetReservedDocIds();
    boolean that_present_reservedDocIds = true && that.isSetReservedDocIds();
    if (this_present_reservedDocIds || that_present_reservedDocIds) {
      if (!(this_present_reservedDocIds && that_present_reservedDocIds))
        return false;
      if (!this.reservedDocIds.equals(that.reservedDocIds))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_reportId = true && (isSetReportId());
    list.add(present_reportId);
    if (present_reportId)
      list.add(reportId);

    boolean present_reservedDocIds = true && (isSetReservedDocIds());
    list.add(present_reservedDocIds);
    if (present_reservedDocIds)
      list.add(reservedDocIds);

    return list.hashCode();
  }

  @Override
  public int compareTo(DebugReportInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetReportId()).compareTo(other.isSetReportId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReportId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reportId, other.reportId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReservedDocIds()).compareTo(other.isSetReservedDocIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReservedDocIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reservedDocIds, other.reservedDocIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DebugReportInfo(");
    boolean first = true;

    sb.append("reportId:");
    if (this.reportId == null) {
      sb.append("null");
    } else {
      sb.append(this.reportId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("reservedDocIds:");
    if (this.reservedDocIds == null) {
      sb.append("null");
    } else {
      sb.append(this.reservedDocIds);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DebugReportInfoStandardSchemeFactory implements SchemeFactory {
    public DebugReportInfoStandardScheme getScheme() {
      return new DebugReportInfoStandardScheme();
    }
  }

  private static class DebugReportInfoStandardScheme extends StandardScheme<DebugReportInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DebugReportInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // REPORT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reportId = iprot.readString();
              struct.setReportIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RESERVED_DOC_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list4 = iprot.readListBegin();
                struct.reservedDocIds = new ArrayList<String>(_list4.size);
                String _elem5;
                for (int _i6 = 0; _i6 < _list4.size; ++_i6)
                {
                  _elem5 = iprot.readString();
                  struct.reservedDocIds.add(_elem5);
                }
                iprot.readListEnd();
              }
              struct.setReservedDocIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DebugReportInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.reportId != null) {
        oprot.writeFieldBegin(REPORT_ID_FIELD_DESC);
        oprot.writeString(struct.reportId);
        oprot.writeFieldEnd();
      }
      if (struct.reservedDocIds != null) {
        oprot.writeFieldBegin(RESERVED_DOC_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.reservedDocIds.size()));
          for (String _iter7 : struct.reservedDocIds)
          {
            oprot.writeString(_iter7);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

}

