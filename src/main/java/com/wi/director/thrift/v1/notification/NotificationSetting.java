/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wi.director.thrift.v1.notification;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class NotificationSetting implements org.apache.thrift.TBase<NotificationSetting, NotificationSetting._Fields>, java.io.Serializable, Cloneable, Comparable<NotificationSetting> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("NotificationSetting");

  private static final org.apache.thrift.protocol.TField TYPES_FIELD_DESC = new org.apache.thrift.protocol.TField("types", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField SUB_CATEGORIES_FIELD_DESC = new org.apache.thrift.protocol.TField("subCategories", org.apache.thrift.protocol.TType.MAP, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new NotificationSettingStandardSchemeFactory());
  }

  public NotificationTypes types; // required
  public Map<Category,NotificationTypes> subCategories; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TYPES((short)1, "types"),
    SUB_CATEGORIES((short)2, "subCategories");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TYPES
          return TYPES;
        case 2: // SUB_CATEGORIES
          return SUB_CATEGORIES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.SUB_CATEGORIES};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TYPES, new org.apache.thrift.meta_data.FieldMetaData("types", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NotificationTypes.class)));
    tmpMap.put(_Fields.SUB_CATEGORIES, new org.apache.thrift.meta_data.FieldMetaData("subCategories", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Category.class), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NotificationTypes.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(NotificationSetting.class, metaDataMap);
  }

  public NotificationSetting() {
  }

  public NotificationSetting(
    NotificationTypes types)
  {
    this();
    this.types = types;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public NotificationSetting(NotificationSetting other) {
    if (other.isSetTypes()) {
      this.types = new NotificationTypes(other.types);
    }
    if (other.isSetSubCategories()) {
      Map<Category,NotificationTypes> __this__subCategories = new HashMap<Category,NotificationTypes>(other.subCategories.size());
      for (Map.Entry<Category, NotificationTypes> other_element : other.subCategories.entrySet()) {

        Category other_element_key = other_element.getKey();
        NotificationTypes other_element_value = other_element.getValue();

        Category __this__subCategories_copy_key = other_element_key;

        NotificationTypes __this__subCategories_copy_value = new NotificationTypes(other_element_value);

        __this__subCategories.put(__this__subCategories_copy_key, __this__subCategories_copy_value);
      }
      this.subCategories = __this__subCategories;
    }
  }

  public NotificationSetting deepCopy() {
    return new NotificationSetting(this);
  }

  @Override
  public void clear() {
    this.types = null;
    this.subCategories = null;
  }

  public NotificationTypes getTypes() {
    return this.types;
  }

  public NotificationSetting setTypes(NotificationTypes types) {
    this.types = types;
    return this;
  }

  public void unsetTypes() {
    this.types = null;
  }

  /** Returns true if field types is set (has been assigned a value) and false otherwise */
  public boolean isSetTypes() {
    return this.types != null;
  }

  public void setTypesIsSet(boolean value) {
    if (!value) {
      this.types = null;
    }
  }

  public int getSubCategoriesSize() {
    return (this.subCategories == null) ? 0 : this.subCategories.size();
  }

  public void putToSubCategories(Category key, NotificationTypes val) {
    if (this.subCategories == null) {
      this.subCategories = new HashMap<Category,NotificationTypes>();
    }
    this.subCategories.put(key, val);
  }

  public Map<Category,NotificationTypes> getSubCategories() {
    return this.subCategories;
  }

  public NotificationSetting setSubCategories(Map<Category,NotificationTypes> subCategories) {
    this.subCategories = subCategories;
    return this;
  }

  public void unsetSubCategories() {
    this.subCategories = null;
  }

  /** Returns true if field subCategories is set (has been assigned a value) and false otherwise */
  public boolean isSetSubCategories() {
    return this.subCategories != null;
  }

  public void setSubCategoriesIsSet(boolean value) {
    if (!value) {
      this.subCategories = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TYPES:
      if (value == null) {
        unsetTypes();
      } else {
        setTypes((NotificationTypes)value);
      }
      break;

    case SUB_CATEGORIES:
      if (value == null) {
        unsetSubCategories();
      } else {
        setSubCategories((Map<Category,NotificationTypes>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TYPES:
      return getTypes();

    case SUB_CATEGORIES:
      return getSubCategories();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TYPES:
      return isSetTypes();
    case SUB_CATEGORIES:
      return isSetSubCategories();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof NotificationSetting)
      return this.equals((NotificationSetting)that);
    return false;
  }

  public boolean equals(NotificationSetting that) {
    if (that == null)
      return false;

    boolean this_present_types = true && this.isSetTypes();
    boolean that_present_types = true && that.isSetTypes();
    if (this_present_types || that_present_types) {
      if (!(this_present_types && that_present_types))
        return false;
      if (!this.types.equals(that.types))
        return false;
    }

    boolean this_present_subCategories = true && this.isSetSubCategories();
    boolean that_present_subCategories = true && that.isSetSubCategories();
    if (this_present_subCategories || that_present_subCategories) {
      if (!(this_present_subCategories && that_present_subCategories))
        return false;
      if (!this.subCategories.equals(that.subCategories))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_types = true && (isSetTypes());
    list.add(present_types);
    if (present_types)
      list.add(types);

    boolean present_subCategories = true && (isSetSubCategories());
    list.add(present_subCategories);
    if (present_subCategories)
      list.add(subCategories);

    return list.hashCode();
  }

  @Override
  public int compareTo(NotificationSetting other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTypes()).compareTo(other.isSetTypes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTypes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.types, other.types);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubCategories()).compareTo(other.isSetSubCategories());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubCategories()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subCategories, other.subCategories);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("NotificationSetting(");
    boolean first = true;

    sb.append("types:");
    if (this.types == null) {
      sb.append("null");
    } else {
      sb.append(this.types);
    }
    first = false;
    if (isSetSubCategories()) {
      if (!first) sb.append(", ");
      sb.append("subCategories:");
      if (this.subCategories == null) {
        sb.append("null");
      } else {
        sb.append(this.subCategories);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (types != null) {
      types.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class NotificationSettingStandardSchemeFactory implements SchemeFactory {
    public NotificationSettingStandardScheme getScheme() {
      return new NotificationSettingStandardScheme();
    }
  }

  private static class NotificationSettingStandardScheme extends StandardScheme<NotificationSetting> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, NotificationSetting struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TYPES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.types = new NotificationTypes();
              struct.types.read(iprot);
              struct.setTypesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SUB_CATEGORIES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map9 = iprot.readMapBegin();
                struct.subCategories = new HashMap<Category,NotificationTypes>(2*_map9.size);
                Category _key10;
                NotificationTypes _val11;
                for (int _i12 = 0; _i12 < _map9.size; ++_i12)
                {
                  _key10 = com.wi.director.thrift.v1.notification.Category.findByValue(iprot.readI32());
                  _val11 = new NotificationTypes();
                  _val11.read(iprot);
                  struct.subCategories.put(_key10, _val11);
                }
                iprot.readMapEnd();
              }
              struct.setSubCategoriesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, NotificationSetting struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.types != null) {
        oprot.writeFieldBegin(TYPES_FIELD_DESC);
        struct.types.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.subCategories != null) {
        if (struct.isSetSubCategories()) {
          oprot.writeFieldBegin(SUB_CATEGORIES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, struct.subCategories.size()));
            for (Map.Entry<Category, NotificationTypes> _iter13 : struct.subCategories.entrySet())
            {
              oprot.writeI32(_iter13.getKey().getValue());
              _iter13.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

}

