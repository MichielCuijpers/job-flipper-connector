/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wi.director.thrift.v1.step;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * BaseStep is a node in the step hierarchy.  Nodes in the job template tree can be
 * Steps or StepGroups, and so BaseStep represents
 * the base class, and StepImpl is the instance data.
 */
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class BaseStep implements org.apache.thrift.TBase<BaseStep, BaseStep._Fields>, java.io.Serializable, Cloneable, Comparable<BaseStep> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BaseStep");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DESCRIP_FIELD_DESC = new org.apache.thrift.protocol.TField("descrip", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField IMPL_FIELD_DESC = new org.apache.thrift.protocol.TField("impl", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField CHILDREN_FIELD_DESC = new org.apache.thrift.protocol.TField("children", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField IS_COMPONENT_FIELD_DESC = new org.apache.thrift.protocol.TField("isComponent", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField METADATA_ENTRY_FIELD_DESC = new org.apache.thrift.protocol.TField("metadataEntry", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField METADATA_BY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("metadataById", org.apache.thrift.protocol.TType.MAP, (short)9);
  private static final org.apache.thrift.protocol.TField JOB_BASE_STEP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("jobBaseStepId", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField HIERARCHY_POSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("hierarchyPosition", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField PARENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parentId", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField PARENT_JOB_BASE_STEP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parentJobBaseStepId", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField CLIENT_GENERATED_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("clientGeneratedIds", org.apache.thrift.protocol.TType.BOOL, (short)14);
  private static final org.apache.thrift.protocol.TField TITLE_WRAPPER_FIELD_DESC = new org.apache.thrift.protocol.TField("titleWrapper", org.apache.thrift.protocol.TType.STRUCT, (short)16);
  private static final org.apache.thrift.protocol.TField BLOCKING_FIELD_DESC = new org.apache.thrift.protocol.TField("blocking", org.apache.thrift.protocol.TType.BOOL, (short)20);
  private static final org.apache.thrift.protocol.TField CHILD_CHANGE_FIELD_DESC = new org.apache.thrift.protocol.TField("childChange", org.apache.thrift.protocol.TType.STRUCT, (short)200);
  private static final org.apache.thrift.protocol.TField TITLE_DIFF_FIELD_DESC = new org.apache.thrift.protocol.TField("titleDiff", org.apache.thrift.protocol.TType.STRUCT, (short)201);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BaseStepStandardSchemeFactory());
  }

  public String id; // required
  /**
   * The name of the Step/StepGroup
   */
  public String title; // required
  /**
   * Description of the Step/StepGroup
   */
  public List<StepDescriptionElement> descrip; // required
  /**
   * Implementation of the Step/StepGroup
   */
  public StepImpl impl; // required
  /**
   * Child nodes of the StepGroup
   */
  public List<BaseStep> children; // required
  /**
   * True if this StepGroup is a shared component
   */
  public boolean isComponent; // required
  /**
   * DEPRECATED Step Metadata
   */
  public List<com.wi.director.thrift.v1.metadata.MetadataEntry> metadataEntry; // optional
  /**
   * Step Metadata
   */
  public Map<String,com.wi.director.thrift.v1.metadata.MetadataEntry> metadataById; // optional
  public String jobBaseStepId; // required
  /**
   * Dot-separated integers identifying the step's position in the hierarchy
   */
  public String hierarchyPosition; // required
  public String parentId; // required
  public String parentJobBaseStepId; // required
  public String clientId; // required
  public boolean clientGeneratedIds; // required
  public com.parsable.thrift.v1.reference.StringWrapper titleWrapper; // optional
  public boolean blocking; // required
  public com.wi.director.thrift.v1.diff.Change childChange; // optional
  public com.wi.director.thrift.v1.diff.StringDiff titleDiff; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    /**
     * The name of the Step/StepGroup
     */
    TITLE((short)2, "title"),
    /**
     * Description of the Step/StepGroup
     */
    DESCRIP((short)3, "descrip"),
    /**
     * Implementation of the Step/StepGroup
     */
    IMPL((short)4, "impl"),
    /**
     * Child nodes of the StepGroup
     */
    CHILDREN((short)5, "children"),
    /**
     * True if this StepGroup is a shared component
     */
    IS_COMPONENT((short)6, "isComponent"),
    /**
     * DEPRECATED Step Metadata
     */
    METADATA_ENTRY((short)7, "metadataEntry"),
    /**
     * Step Metadata
     */
    METADATA_BY_ID((short)9, "metadataById"),
    JOB_BASE_STEP_ID((short)8, "jobBaseStepId"),
    /**
     * Dot-separated integers identifying the step's position in the hierarchy
     */
    HIERARCHY_POSITION((short)10, "hierarchyPosition"),
    PARENT_ID((short)11, "parentId"),
    PARENT_JOB_BASE_STEP_ID((short)12, "parentJobBaseStepId"),
    CLIENT_ID((short)13, "clientId"),
    CLIENT_GENERATED_IDS((short)14, "clientGeneratedIds"),
    TITLE_WRAPPER((short)16, "titleWrapper"),
    BLOCKING((short)20, "blocking"),
    CHILD_CHANGE((short)200, "childChange"),
    TITLE_DIFF((short)201, "titleDiff");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // TITLE
          return TITLE;
        case 3: // DESCRIP
          return DESCRIP;
        case 4: // IMPL
          return IMPL;
        case 5: // CHILDREN
          return CHILDREN;
        case 6: // IS_COMPONENT
          return IS_COMPONENT;
        case 7: // METADATA_ENTRY
          return METADATA_ENTRY;
        case 9: // METADATA_BY_ID
          return METADATA_BY_ID;
        case 8: // JOB_BASE_STEP_ID
          return JOB_BASE_STEP_ID;
        case 10: // HIERARCHY_POSITION
          return HIERARCHY_POSITION;
        case 11: // PARENT_ID
          return PARENT_ID;
        case 12: // PARENT_JOB_BASE_STEP_ID
          return PARENT_JOB_BASE_STEP_ID;
        case 13: // CLIENT_ID
          return CLIENT_ID;
        case 14: // CLIENT_GENERATED_IDS
          return CLIENT_GENERATED_IDS;
        case 16: // TITLE_WRAPPER
          return TITLE_WRAPPER;
        case 20: // BLOCKING
          return BLOCKING;
        case 200: // CHILD_CHANGE
          return CHILD_CHANGE;
        case 201: // TITLE_DIFF
          return TITLE_DIFF;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ISCOMPONENT_ISSET_ID = 0;
  private static final int __CLIENTGENERATEDIDS_ISSET_ID = 1;
  private static final int __BLOCKING_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.METADATA_ENTRY,_Fields.METADATA_BY_ID,_Fields.TITLE_WRAPPER,_Fields.CHILD_CHANGE,_Fields.TITLE_DIFF};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRIP, new org.apache.thrift.meta_data.FieldMetaData("descrip", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StepDescriptionElement.class))));
    tmpMap.put(_Fields.IMPL, new org.apache.thrift.meta_data.FieldMetaData("impl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StepImpl.class)));
    tmpMap.put(_Fields.CHILDREN, new org.apache.thrift.meta_data.FieldMetaData("children", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "BaseStep"))));
    tmpMap.put(_Fields.IS_COMPONENT, new org.apache.thrift.meta_data.FieldMetaData("isComponent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.METADATA_ENTRY, new org.apache.thrift.meta_data.FieldMetaData("metadataEntry", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.metadata.MetadataEntry.class))));
    tmpMap.put(_Fields.METADATA_BY_ID, new org.apache.thrift.meta_data.FieldMetaData("metadataById", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.metadata.MetadataEntry.class))));
    tmpMap.put(_Fields.JOB_BASE_STEP_ID, new org.apache.thrift.meta_data.FieldMetaData("jobBaseStepId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HIERARCHY_POSITION, new org.apache.thrift.meta_data.FieldMetaData("hierarchyPosition", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARENT_ID, new org.apache.thrift.meta_data.FieldMetaData("parentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARENT_JOB_BASE_STEP_ID, new org.apache.thrift.meta_data.FieldMetaData("parentJobBaseStepId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLIENT_GENERATED_IDS, new org.apache.thrift.meta_data.FieldMetaData("clientGeneratedIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TITLE_WRAPPER, new org.apache.thrift.meta_data.FieldMetaData("titleWrapper", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.parsable.thrift.v1.reference.StringWrapper.class)));
    tmpMap.put(_Fields.BLOCKING, new org.apache.thrift.meta_data.FieldMetaData("blocking", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CHILD_CHANGE, new org.apache.thrift.meta_data.FieldMetaData("childChange", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.diff.Change.class)));
    tmpMap.put(_Fields.TITLE_DIFF, new org.apache.thrift.meta_data.FieldMetaData("titleDiff", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.diff.StringDiff.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BaseStep.class, metaDataMap);
  }

  public BaseStep() {
    this.blocking = false;

  }

  public BaseStep(
    String id,
    String title,
    List<StepDescriptionElement> descrip,
    StepImpl impl,
    List<BaseStep> children,
    boolean isComponent,
    String jobBaseStepId,
    String hierarchyPosition,
    String parentId,
    String parentJobBaseStepId,
    String clientId,
    boolean clientGeneratedIds,
    boolean blocking)
  {
    this();
    this.id = id;
    this.title = title;
    this.descrip = descrip;
    this.impl = impl;
    this.children = children;
    this.isComponent = isComponent;
    setIsComponentIsSet(true);
    this.jobBaseStepId = jobBaseStepId;
    this.hierarchyPosition = hierarchyPosition;
    this.parentId = parentId;
    this.parentJobBaseStepId = parentJobBaseStepId;
    this.clientId = clientId;
    this.clientGeneratedIds = clientGeneratedIds;
    setClientGeneratedIdsIsSet(true);
    this.blocking = blocking;
    setBlockingIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BaseStep(BaseStep other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    if (other.isSetDescrip()) {
      List<StepDescriptionElement> __this__descrip = new ArrayList<StepDescriptionElement>(other.descrip.size());
      for (StepDescriptionElement other_element : other.descrip) {
        __this__descrip.add(new StepDescriptionElement(other_element));
      }
      this.descrip = __this__descrip;
    }
    if (other.isSetImpl()) {
      this.impl = new StepImpl(other.impl);
    }
    if (other.isSetChildren()) {
      List<BaseStep> __this__children = new ArrayList<BaseStep>(other.children.size());
      for (BaseStep other_element : other.children) {
        __this__children.add(new BaseStep(other_element));
      }
      this.children = __this__children;
    }
    this.isComponent = other.isComponent;
    if (other.isSetMetadataEntry()) {
      List<com.wi.director.thrift.v1.metadata.MetadataEntry> __this__metadataEntry = new ArrayList<com.wi.director.thrift.v1.metadata.MetadataEntry>(other.metadataEntry.size());
      for (com.wi.director.thrift.v1.metadata.MetadataEntry other_element : other.metadataEntry) {
        __this__metadataEntry.add(new com.wi.director.thrift.v1.metadata.MetadataEntry(other_element));
      }
      this.metadataEntry = __this__metadataEntry;
    }
    if (other.isSetMetadataById()) {
      Map<String,com.wi.director.thrift.v1.metadata.MetadataEntry> __this__metadataById = new HashMap<String,com.wi.director.thrift.v1.metadata.MetadataEntry>(other.metadataById.size());
      for (Map.Entry<String, com.wi.director.thrift.v1.metadata.MetadataEntry> other_element : other.metadataById.entrySet()) {

        String other_element_key = other_element.getKey();
        com.wi.director.thrift.v1.metadata.MetadataEntry other_element_value = other_element.getValue();

        String __this__metadataById_copy_key = other_element_key;

        com.wi.director.thrift.v1.metadata.MetadataEntry __this__metadataById_copy_value = new com.wi.director.thrift.v1.metadata.MetadataEntry(other_element_value);

        __this__metadataById.put(__this__metadataById_copy_key, __this__metadataById_copy_value);
      }
      this.metadataById = __this__metadataById;
    }
    if (other.isSetJobBaseStepId()) {
      this.jobBaseStepId = other.jobBaseStepId;
    }
    if (other.isSetHierarchyPosition()) {
      this.hierarchyPosition = other.hierarchyPosition;
    }
    if (other.isSetParentId()) {
      this.parentId = other.parentId;
    }
    if (other.isSetParentJobBaseStepId()) {
      this.parentJobBaseStepId = other.parentJobBaseStepId;
    }
    if (other.isSetClientId()) {
      this.clientId = other.clientId;
    }
    this.clientGeneratedIds = other.clientGeneratedIds;
    if (other.isSetTitleWrapper()) {
      this.titleWrapper = new com.parsable.thrift.v1.reference.StringWrapper(other.titleWrapper);
    }
    this.blocking = other.blocking;
    if (other.isSetChildChange()) {
      this.childChange = new com.wi.director.thrift.v1.diff.Change(other.childChange);
    }
    if (other.isSetTitleDiff()) {
      this.titleDiff = new com.wi.director.thrift.v1.diff.StringDiff(other.titleDiff);
    }
  }

  public BaseStep deepCopy() {
    return new BaseStep(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.title = null;
    this.descrip = null;
    this.impl = null;
    this.children = null;
    setIsComponentIsSet(false);
    this.isComponent = false;
    this.metadataEntry = null;
    this.metadataById = null;
    this.jobBaseStepId = null;
    this.hierarchyPosition = null;
    this.parentId = null;
    this.parentJobBaseStepId = null;
    this.clientId = null;
    setClientGeneratedIdsIsSet(false);
    this.clientGeneratedIds = false;
    this.titleWrapper = null;
    this.blocking = false;

    this.childChange = null;
    this.titleDiff = null;
  }

  public String getId() {
    return this.id;
  }

  public BaseStep setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  /**
   * The name of the Step/StepGroup
   */
  public String getTitle() {
    return this.title;
  }

  /**
   * The name of the Step/StepGroup
   */
  public BaseStep setTitle(String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public int getDescripSize() {
    return (this.descrip == null) ? 0 : this.descrip.size();
  }

  public java.util.Iterator<StepDescriptionElement> getDescripIterator() {
    return (this.descrip == null) ? null : this.descrip.iterator();
  }

  public void addToDescrip(StepDescriptionElement elem) {
    if (this.descrip == null) {
      this.descrip = new ArrayList<StepDescriptionElement>();
    }
    this.descrip.add(elem);
  }

  /**
   * Description of the Step/StepGroup
   */
  public List<StepDescriptionElement> getDescrip() {
    return this.descrip;
  }

  /**
   * Description of the Step/StepGroup
   */
  public BaseStep setDescrip(List<StepDescriptionElement> descrip) {
    this.descrip = descrip;
    return this;
  }

  public void unsetDescrip() {
    this.descrip = null;
  }

  /** Returns true if field descrip is set (has been assigned a value) and false otherwise */
  public boolean isSetDescrip() {
    return this.descrip != null;
  }

  public void setDescripIsSet(boolean value) {
    if (!value) {
      this.descrip = null;
    }
  }

  /**
   * Implementation of the Step/StepGroup
   */
  public StepImpl getImpl() {
    return this.impl;
  }

  /**
   * Implementation of the Step/StepGroup
   */
  public BaseStep setImpl(StepImpl impl) {
    this.impl = impl;
    return this;
  }

  public void unsetImpl() {
    this.impl = null;
  }

  /** Returns true if field impl is set (has been assigned a value) and false otherwise */
  public boolean isSetImpl() {
    return this.impl != null;
  }

  public void setImplIsSet(boolean value) {
    if (!value) {
      this.impl = null;
    }
  }

  public int getChildrenSize() {
    return (this.children == null) ? 0 : this.children.size();
  }

  public java.util.Iterator<BaseStep> getChildrenIterator() {
    return (this.children == null) ? null : this.children.iterator();
  }

  public void addToChildren(BaseStep elem) {
    if (this.children == null) {
      this.children = new ArrayList<BaseStep>();
    }
    this.children.add(elem);
  }

  /**
   * Child nodes of the StepGroup
   */
  public List<BaseStep> getChildren() {
    return this.children;
  }

  /**
   * Child nodes of the StepGroup
   */
  public BaseStep setChildren(List<BaseStep> children) {
    this.children = children;
    return this;
  }

  public void unsetChildren() {
    this.children = null;
  }

  /** Returns true if field children is set (has been assigned a value) and false otherwise */
  public boolean isSetChildren() {
    return this.children != null;
  }

  public void setChildrenIsSet(boolean value) {
    if (!value) {
      this.children = null;
    }
  }

  /**
   * True if this StepGroup is a shared component
   */
  public boolean isIsComponent() {
    return this.isComponent;
  }

  /**
   * True if this StepGroup is a shared component
   */
  public BaseStep setIsComponent(boolean isComponent) {
    this.isComponent = isComponent;
    setIsComponentIsSet(true);
    return this;
  }

  public void unsetIsComponent() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISCOMPONENT_ISSET_ID);
  }

  /** Returns true if field isComponent is set (has been assigned a value) and false otherwise */
  public boolean isSetIsComponent() {
    return EncodingUtils.testBit(__isset_bitfield, __ISCOMPONENT_ISSET_ID);
  }

  public void setIsComponentIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISCOMPONENT_ISSET_ID, value);
  }

  public int getMetadataEntrySize() {
    return (this.metadataEntry == null) ? 0 : this.metadataEntry.size();
  }

  public java.util.Iterator<com.wi.director.thrift.v1.metadata.MetadataEntry> getMetadataEntryIterator() {
    return (this.metadataEntry == null) ? null : this.metadataEntry.iterator();
  }

  public void addToMetadataEntry(com.wi.director.thrift.v1.metadata.MetadataEntry elem) {
    if (this.metadataEntry == null) {
      this.metadataEntry = new ArrayList<com.wi.director.thrift.v1.metadata.MetadataEntry>();
    }
    this.metadataEntry.add(elem);
  }

  /**
   * DEPRECATED Step Metadata
   */
  public List<com.wi.director.thrift.v1.metadata.MetadataEntry> getMetadataEntry() {
    return this.metadataEntry;
  }

  /**
   * DEPRECATED Step Metadata
   */
  public BaseStep setMetadataEntry(List<com.wi.director.thrift.v1.metadata.MetadataEntry> metadataEntry) {
    this.metadataEntry = metadataEntry;
    return this;
  }

  public void unsetMetadataEntry() {
    this.metadataEntry = null;
  }

  /** Returns true if field metadataEntry is set (has been assigned a value) and false otherwise */
  public boolean isSetMetadataEntry() {
    return this.metadataEntry != null;
  }

  public void setMetadataEntryIsSet(boolean value) {
    if (!value) {
      this.metadataEntry = null;
    }
  }

  public int getMetadataByIdSize() {
    return (this.metadataById == null) ? 0 : this.metadataById.size();
  }

  public void putToMetadataById(String key, com.wi.director.thrift.v1.metadata.MetadataEntry val) {
    if (this.metadataById == null) {
      this.metadataById = new HashMap<String,com.wi.director.thrift.v1.metadata.MetadataEntry>();
    }
    this.metadataById.put(key, val);
  }

  /**
   * Step Metadata
   */
  public Map<String,com.wi.director.thrift.v1.metadata.MetadataEntry> getMetadataById() {
    return this.metadataById;
  }

  /**
   * Step Metadata
   */
  public BaseStep setMetadataById(Map<String,com.wi.director.thrift.v1.metadata.MetadataEntry> metadataById) {
    this.metadataById = metadataById;
    return this;
  }

  public void unsetMetadataById() {
    this.metadataById = null;
  }

  /** Returns true if field metadataById is set (has been assigned a value) and false otherwise */
  public boolean isSetMetadataById() {
    return this.metadataById != null;
  }

  public void setMetadataByIdIsSet(boolean value) {
    if (!value) {
      this.metadataById = null;
    }
  }

  public String getJobBaseStepId() {
    return this.jobBaseStepId;
  }

  public BaseStep setJobBaseStepId(String jobBaseStepId) {
    this.jobBaseStepId = jobBaseStepId;
    return this;
  }

  public void unsetJobBaseStepId() {
    this.jobBaseStepId = null;
  }

  /** Returns true if field jobBaseStepId is set (has been assigned a value) and false otherwise */
  public boolean isSetJobBaseStepId() {
    return this.jobBaseStepId != null;
  }

  public void setJobBaseStepIdIsSet(boolean value) {
    if (!value) {
      this.jobBaseStepId = null;
    }
  }

  /**
   * Dot-separated integers identifying the step's position in the hierarchy
   */
  public String getHierarchyPosition() {
    return this.hierarchyPosition;
  }

  /**
   * Dot-separated integers identifying the step's position in the hierarchy
   */
  public BaseStep setHierarchyPosition(String hierarchyPosition) {
    this.hierarchyPosition = hierarchyPosition;
    return this;
  }

  public void unsetHierarchyPosition() {
    this.hierarchyPosition = null;
  }

  /** Returns true if field hierarchyPosition is set (has been assigned a value) and false otherwise */
  public boolean isSetHierarchyPosition() {
    return this.hierarchyPosition != null;
  }

  public void setHierarchyPositionIsSet(boolean value) {
    if (!value) {
      this.hierarchyPosition = null;
    }
  }

  public String getParentId() {
    return this.parentId;
  }

  public BaseStep setParentId(String parentId) {
    this.parentId = parentId;
    return this;
  }

  public void unsetParentId() {
    this.parentId = null;
  }

  /** Returns true if field parentId is set (has been assigned a value) and false otherwise */
  public boolean isSetParentId() {
    return this.parentId != null;
  }

  public void setParentIdIsSet(boolean value) {
    if (!value) {
      this.parentId = null;
    }
  }

  public String getParentJobBaseStepId() {
    return this.parentJobBaseStepId;
  }

  public BaseStep setParentJobBaseStepId(String parentJobBaseStepId) {
    this.parentJobBaseStepId = parentJobBaseStepId;
    return this;
  }

  public void unsetParentJobBaseStepId() {
    this.parentJobBaseStepId = null;
  }

  /** Returns true if field parentJobBaseStepId is set (has been assigned a value) and false otherwise */
  public boolean isSetParentJobBaseStepId() {
    return this.parentJobBaseStepId != null;
  }

  public void setParentJobBaseStepIdIsSet(boolean value) {
    if (!value) {
      this.parentJobBaseStepId = null;
    }
  }

  public String getClientId() {
    return this.clientId;
  }

  public BaseStep setClientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  public void unsetClientId() {
    this.clientId = null;
  }

  /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
  public boolean isSetClientId() {
    return this.clientId != null;
  }

  public void setClientIdIsSet(boolean value) {
    if (!value) {
      this.clientId = null;
    }
  }

  public boolean isClientGeneratedIds() {
    return this.clientGeneratedIds;
  }

  public BaseStep setClientGeneratedIds(boolean clientGeneratedIds) {
    this.clientGeneratedIds = clientGeneratedIds;
    setClientGeneratedIdsIsSet(true);
    return this;
  }

  public void unsetClientGeneratedIds() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CLIENTGENERATEDIDS_ISSET_ID);
  }

  /** Returns true if field clientGeneratedIds is set (has been assigned a value) and false otherwise */
  public boolean isSetClientGeneratedIds() {
    return EncodingUtils.testBit(__isset_bitfield, __CLIENTGENERATEDIDS_ISSET_ID);
  }

  public void setClientGeneratedIdsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CLIENTGENERATEDIDS_ISSET_ID, value);
  }

  public com.parsable.thrift.v1.reference.StringWrapper getTitleWrapper() {
    return this.titleWrapper;
  }

  public BaseStep setTitleWrapper(com.parsable.thrift.v1.reference.StringWrapper titleWrapper) {
    this.titleWrapper = titleWrapper;
    return this;
  }

  public void unsetTitleWrapper() {
    this.titleWrapper = null;
  }

  /** Returns true if field titleWrapper is set (has been assigned a value) and false otherwise */
  public boolean isSetTitleWrapper() {
    return this.titleWrapper != null;
  }

  public void setTitleWrapperIsSet(boolean value) {
    if (!value) {
      this.titleWrapper = null;
    }
  }

  public boolean isBlocking() {
    return this.blocking;
  }

  public BaseStep setBlocking(boolean blocking) {
    this.blocking = blocking;
    setBlockingIsSet(true);
    return this;
  }

  public void unsetBlocking() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BLOCKING_ISSET_ID);
  }

  /** Returns true if field blocking is set (has been assigned a value) and false otherwise */
  public boolean isSetBlocking() {
    return EncodingUtils.testBit(__isset_bitfield, __BLOCKING_ISSET_ID);
  }

  public void setBlockingIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BLOCKING_ISSET_ID, value);
  }

  public com.wi.director.thrift.v1.diff.Change getChildChange() {
    return this.childChange;
  }

  public BaseStep setChildChange(com.wi.director.thrift.v1.diff.Change childChange) {
    this.childChange = childChange;
    return this;
  }

  public void unsetChildChange() {
    this.childChange = null;
  }

  /** Returns true if field childChange is set (has been assigned a value) and false otherwise */
  public boolean isSetChildChange() {
    return this.childChange != null;
  }

  public void setChildChangeIsSet(boolean value) {
    if (!value) {
      this.childChange = null;
    }
  }

  public com.wi.director.thrift.v1.diff.StringDiff getTitleDiff() {
    return this.titleDiff;
  }

  public BaseStep setTitleDiff(com.wi.director.thrift.v1.diff.StringDiff titleDiff) {
    this.titleDiff = titleDiff;
    return this;
  }

  public void unsetTitleDiff() {
    this.titleDiff = null;
  }

  /** Returns true if field titleDiff is set (has been assigned a value) and false otherwise */
  public boolean isSetTitleDiff() {
    return this.titleDiff != null;
  }

  public void setTitleDiffIsSet(boolean value) {
    if (!value) {
      this.titleDiff = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((String)value);
      }
      break;

    case DESCRIP:
      if (value == null) {
        unsetDescrip();
      } else {
        setDescrip((List<StepDescriptionElement>)value);
      }
      break;

    case IMPL:
      if (value == null) {
        unsetImpl();
      } else {
        setImpl((StepImpl)value);
      }
      break;

    case CHILDREN:
      if (value == null) {
        unsetChildren();
      } else {
        setChildren((List<BaseStep>)value);
      }
      break;

    case IS_COMPONENT:
      if (value == null) {
        unsetIsComponent();
      } else {
        setIsComponent((Boolean)value);
      }
      break;

    case METADATA_ENTRY:
      if (value == null) {
        unsetMetadataEntry();
      } else {
        setMetadataEntry((List<com.wi.director.thrift.v1.metadata.MetadataEntry>)value);
      }
      break;

    case METADATA_BY_ID:
      if (value == null) {
        unsetMetadataById();
      } else {
        setMetadataById((Map<String,com.wi.director.thrift.v1.metadata.MetadataEntry>)value);
      }
      break;

    case JOB_BASE_STEP_ID:
      if (value == null) {
        unsetJobBaseStepId();
      } else {
        setJobBaseStepId((String)value);
      }
      break;

    case HIERARCHY_POSITION:
      if (value == null) {
        unsetHierarchyPosition();
      } else {
        setHierarchyPosition((String)value);
      }
      break;

    case PARENT_ID:
      if (value == null) {
        unsetParentId();
      } else {
        setParentId((String)value);
      }
      break;

    case PARENT_JOB_BASE_STEP_ID:
      if (value == null) {
        unsetParentJobBaseStepId();
      } else {
        setParentJobBaseStepId((String)value);
      }
      break;

    case CLIENT_ID:
      if (value == null) {
        unsetClientId();
      } else {
        setClientId((String)value);
      }
      break;

    case CLIENT_GENERATED_IDS:
      if (value == null) {
        unsetClientGeneratedIds();
      } else {
        setClientGeneratedIds((Boolean)value);
      }
      break;

    case TITLE_WRAPPER:
      if (value == null) {
        unsetTitleWrapper();
      } else {
        setTitleWrapper((com.parsable.thrift.v1.reference.StringWrapper)value);
      }
      break;

    case BLOCKING:
      if (value == null) {
        unsetBlocking();
      } else {
        setBlocking((Boolean)value);
      }
      break;

    case CHILD_CHANGE:
      if (value == null) {
        unsetChildChange();
      } else {
        setChildChange((com.wi.director.thrift.v1.diff.Change)value);
      }
      break;

    case TITLE_DIFF:
      if (value == null) {
        unsetTitleDiff();
      } else {
        setTitleDiff((com.wi.director.thrift.v1.diff.StringDiff)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case TITLE:
      return getTitle();

    case DESCRIP:
      return getDescrip();

    case IMPL:
      return getImpl();

    case CHILDREN:
      return getChildren();

    case IS_COMPONENT:
      return isIsComponent();

    case METADATA_ENTRY:
      return getMetadataEntry();

    case METADATA_BY_ID:
      return getMetadataById();

    case JOB_BASE_STEP_ID:
      return getJobBaseStepId();

    case HIERARCHY_POSITION:
      return getHierarchyPosition();

    case PARENT_ID:
      return getParentId();

    case PARENT_JOB_BASE_STEP_ID:
      return getParentJobBaseStepId();

    case CLIENT_ID:
      return getClientId();

    case CLIENT_GENERATED_IDS:
      return isClientGeneratedIds();

    case TITLE_WRAPPER:
      return getTitleWrapper();

    case BLOCKING:
      return isBlocking();

    case CHILD_CHANGE:
      return getChildChange();

    case TITLE_DIFF:
      return getTitleDiff();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case TITLE:
      return isSetTitle();
    case DESCRIP:
      return isSetDescrip();
    case IMPL:
      return isSetImpl();
    case CHILDREN:
      return isSetChildren();
    case IS_COMPONENT:
      return isSetIsComponent();
    case METADATA_ENTRY:
      return isSetMetadataEntry();
    case METADATA_BY_ID:
      return isSetMetadataById();
    case JOB_BASE_STEP_ID:
      return isSetJobBaseStepId();
    case HIERARCHY_POSITION:
      return isSetHierarchyPosition();
    case PARENT_ID:
      return isSetParentId();
    case PARENT_JOB_BASE_STEP_ID:
      return isSetParentJobBaseStepId();
    case CLIENT_ID:
      return isSetClientId();
    case CLIENT_GENERATED_IDS:
      return isSetClientGeneratedIds();
    case TITLE_WRAPPER:
      return isSetTitleWrapper();
    case BLOCKING:
      return isSetBlocking();
    case CHILD_CHANGE:
      return isSetChildChange();
    case TITLE_DIFF:
      return isSetTitleDiff();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BaseStep)
      return this.equals((BaseStep)that);
    return false;
  }

  public boolean equals(BaseStep that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_descrip = true && this.isSetDescrip();
    boolean that_present_descrip = true && that.isSetDescrip();
    if (this_present_descrip || that_present_descrip) {
      if (!(this_present_descrip && that_present_descrip))
        return false;
      if (!this.descrip.equals(that.descrip))
        return false;
    }

    boolean this_present_impl = true && this.isSetImpl();
    boolean that_present_impl = true && that.isSetImpl();
    if (this_present_impl || that_present_impl) {
      if (!(this_present_impl && that_present_impl))
        return false;
      if (!this.impl.equals(that.impl))
        return false;
    }

    boolean this_present_children = true && this.isSetChildren();
    boolean that_present_children = true && that.isSetChildren();
    if (this_present_children || that_present_children) {
      if (!(this_present_children && that_present_children))
        return false;
      if (!this.children.equals(that.children))
        return false;
    }

    boolean this_present_isComponent = true;
    boolean that_present_isComponent = true;
    if (this_present_isComponent || that_present_isComponent) {
      if (!(this_present_isComponent && that_present_isComponent))
        return false;
      if (this.isComponent != that.isComponent)
        return false;
    }

    boolean this_present_metadataEntry = true && this.isSetMetadataEntry();
    boolean that_present_metadataEntry = true && that.isSetMetadataEntry();
    if (this_present_metadataEntry || that_present_metadataEntry) {
      if (!(this_present_metadataEntry && that_present_metadataEntry))
        return false;
      if (!this.metadataEntry.equals(that.metadataEntry))
        return false;
    }

    boolean this_present_metadataById = true && this.isSetMetadataById();
    boolean that_present_metadataById = true && that.isSetMetadataById();
    if (this_present_metadataById || that_present_metadataById) {
      if (!(this_present_metadataById && that_present_metadataById))
        return false;
      if (!this.metadataById.equals(that.metadataById))
        return false;
    }

    boolean this_present_jobBaseStepId = true && this.isSetJobBaseStepId();
    boolean that_present_jobBaseStepId = true && that.isSetJobBaseStepId();
    if (this_present_jobBaseStepId || that_present_jobBaseStepId) {
      if (!(this_present_jobBaseStepId && that_present_jobBaseStepId))
        return false;
      if (!this.jobBaseStepId.equals(that.jobBaseStepId))
        return false;
    }

    boolean this_present_hierarchyPosition = true && this.isSetHierarchyPosition();
    boolean that_present_hierarchyPosition = true && that.isSetHierarchyPosition();
    if (this_present_hierarchyPosition || that_present_hierarchyPosition) {
      if (!(this_present_hierarchyPosition && that_present_hierarchyPosition))
        return false;
      if (!this.hierarchyPosition.equals(that.hierarchyPosition))
        return false;
    }

    boolean this_present_parentId = true && this.isSetParentId();
    boolean that_present_parentId = true && that.isSetParentId();
    if (this_present_parentId || that_present_parentId) {
      if (!(this_present_parentId && that_present_parentId))
        return false;
      if (!this.parentId.equals(that.parentId))
        return false;
    }

    boolean this_present_parentJobBaseStepId = true && this.isSetParentJobBaseStepId();
    boolean that_present_parentJobBaseStepId = true && that.isSetParentJobBaseStepId();
    if (this_present_parentJobBaseStepId || that_present_parentJobBaseStepId) {
      if (!(this_present_parentJobBaseStepId && that_present_parentJobBaseStepId))
        return false;
      if (!this.parentJobBaseStepId.equals(that.parentJobBaseStepId))
        return false;
    }

    boolean this_present_clientId = true && this.isSetClientId();
    boolean that_present_clientId = true && that.isSetClientId();
    if (this_present_clientId || that_present_clientId) {
      if (!(this_present_clientId && that_present_clientId))
        return false;
      if (!this.clientId.equals(that.clientId))
        return false;
    }

    boolean this_present_clientGeneratedIds = true;
    boolean that_present_clientGeneratedIds = true;
    if (this_present_clientGeneratedIds || that_present_clientGeneratedIds) {
      if (!(this_present_clientGeneratedIds && that_present_clientGeneratedIds))
        return false;
      if (this.clientGeneratedIds != that.clientGeneratedIds)
        return false;
    }

    boolean this_present_titleWrapper = true && this.isSetTitleWrapper();
    boolean that_present_titleWrapper = true && that.isSetTitleWrapper();
    if (this_present_titleWrapper || that_present_titleWrapper) {
      if (!(this_present_titleWrapper && that_present_titleWrapper))
        return false;
      if (!this.titleWrapper.equals(that.titleWrapper))
        return false;
    }

    boolean this_present_blocking = true;
    boolean that_present_blocking = true;
    if (this_present_blocking || that_present_blocking) {
      if (!(this_present_blocking && that_present_blocking))
        return false;
      if (this.blocking != that.blocking)
        return false;
    }

    boolean this_present_childChange = true && this.isSetChildChange();
    boolean that_present_childChange = true && that.isSetChildChange();
    if (this_present_childChange || that_present_childChange) {
      if (!(this_present_childChange && that_present_childChange))
        return false;
      if (!this.childChange.equals(that.childChange))
        return false;
    }

    boolean this_present_titleDiff = true && this.isSetTitleDiff();
    boolean that_present_titleDiff = true && that.isSetTitleDiff();
    if (this_present_titleDiff || that_present_titleDiff) {
      if (!(this_present_titleDiff && that_present_titleDiff))
        return false;
      if (!this.titleDiff.equals(that.titleDiff))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_title = true && (isSetTitle());
    list.add(present_title);
    if (present_title)
      list.add(title);

    boolean present_descrip = true && (isSetDescrip());
    list.add(present_descrip);
    if (present_descrip)
      list.add(descrip);

    boolean present_impl = true && (isSetImpl());
    list.add(present_impl);
    if (present_impl)
      list.add(impl);

    boolean present_children = true && (isSetChildren());
    list.add(present_children);
    if (present_children)
      list.add(children);

    boolean present_isComponent = true;
    list.add(present_isComponent);
    if (present_isComponent)
      list.add(isComponent);

    boolean present_metadataEntry = true && (isSetMetadataEntry());
    list.add(present_metadataEntry);
    if (present_metadataEntry)
      list.add(metadataEntry);

    boolean present_metadataById = true && (isSetMetadataById());
    list.add(present_metadataById);
    if (present_metadataById)
      list.add(metadataById);

    boolean present_jobBaseStepId = true && (isSetJobBaseStepId());
    list.add(present_jobBaseStepId);
    if (present_jobBaseStepId)
      list.add(jobBaseStepId);

    boolean present_hierarchyPosition = true && (isSetHierarchyPosition());
    list.add(present_hierarchyPosition);
    if (present_hierarchyPosition)
      list.add(hierarchyPosition);

    boolean present_parentId = true && (isSetParentId());
    list.add(present_parentId);
    if (present_parentId)
      list.add(parentId);

    boolean present_parentJobBaseStepId = true && (isSetParentJobBaseStepId());
    list.add(present_parentJobBaseStepId);
    if (present_parentJobBaseStepId)
      list.add(parentJobBaseStepId);

    boolean present_clientId = true && (isSetClientId());
    list.add(present_clientId);
    if (present_clientId)
      list.add(clientId);

    boolean present_clientGeneratedIds = true;
    list.add(present_clientGeneratedIds);
    if (present_clientGeneratedIds)
      list.add(clientGeneratedIds);

    boolean present_titleWrapper = true && (isSetTitleWrapper());
    list.add(present_titleWrapper);
    if (present_titleWrapper)
      list.add(titleWrapper);

    boolean present_blocking = true;
    list.add(present_blocking);
    if (present_blocking)
      list.add(blocking);

    boolean present_childChange = true && (isSetChildChange());
    list.add(present_childChange);
    if (present_childChange)
      list.add(childChange);

    boolean present_titleDiff = true && (isSetTitleDiff());
    list.add(present_titleDiff);
    if (present_titleDiff)
      list.add(titleDiff);

    return list.hashCode();
  }

  @Override
  public int compareTo(BaseStep other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTitle()).compareTo(other.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescrip()).compareTo(other.isSetDescrip());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescrip()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.descrip, other.descrip);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImpl()).compareTo(other.isSetImpl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImpl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.impl, other.impl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChildren()).compareTo(other.isSetChildren());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChildren()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.children, other.children);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsComponent()).compareTo(other.isSetIsComponent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsComponent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isComponent, other.isComponent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMetadataEntry()).compareTo(other.isSetMetadataEntry());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMetadataEntry()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metadataEntry, other.metadataEntry);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMetadataById()).compareTo(other.isSetMetadataById());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMetadataById()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metadataById, other.metadataById);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJobBaseStepId()).compareTo(other.isSetJobBaseStepId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJobBaseStepId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobBaseStepId, other.jobBaseStepId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHierarchyPosition()).compareTo(other.isSetHierarchyPosition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHierarchyPosition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hierarchyPosition, other.hierarchyPosition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParentId()).compareTo(other.isSetParentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentId, other.parentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParentJobBaseStepId()).compareTo(other.isSetParentJobBaseStepId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParentJobBaseStepId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentJobBaseStepId, other.parentJobBaseStepId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClientGeneratedIds()).compareTo(other.isSetClientGeneratedIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientGeneratedIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientGeneratedIds, other.clientGeneratedIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTitleWrapper()).compareTo(other.isSetTitleWrapper());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitleWrapper()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.titleWrapper, other.titleWrapper);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBlocking()).compareTo(other.isSetBlocking());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBlocking()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.blocking, other.blocking);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChildChange()).compareTo(other.isSetChildChange());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChildChange()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.childChange, other.childChange);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTitleDiff()).compareTo(other.isSetTitleDiff());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitleDiff()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.titleDiff, other.titleDiff);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BaseStep(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("title:");
    if (this.title == null) {
      sb.append("null");
    } else {
      sb.append(this.title);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("descrip:");
    if (this.descrip == null) {
      sb.append("null");
    } else {
      sb.append(this.descrip);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("impl:");
    if (this.impl == null) {
      sb.append("null");
    } else {
      sb.append(this.impl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("children:");
    if (this.children == null) {
      sb.append("null");
    } else {
      sb.append(this.children);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isComponent:");
    sb.append(this.isComponent);
    first = false;
    if (isSetMetadataEntry()) {
      if (!first) sb.append(", ");
      sb.append("metadataEntry:");
      if (this.metadataEntry == null) {
        sb.append("null");
      } else {
        sb.append(this.metadataEntry);
      }
      first = false;
    }
    if (isSetMetadataById()) {
      if (!first) sb.append(", ");
      sb.append("metadataById:");
      if (this.metadataById == null) {
        sb.append("null");
      } else {
        sb.append(this.metadataById);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("jobBaseStepId:");
    if (this.jobBaseStepId == null) {
      sb.append("null");
    } else {
      sb.append(this.jobBaseStepId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("hierarchyPosition:");
    if (this.hierarchyPosition == null) {
      sb.append("null");
    } else {
      sb.append(this.hierarchyPosition);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("parentId:");
    if (this.parentId == null) {
      sb.append("null");
    } else {
      sb.append(this.parentId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("parentJobBaseStepId:");
    if (this.parentJobBaseStepId == null) {
      sb.append("null");
    } else {
      sb.append(this.parentJobBaseStepId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("clientId:");
    if (this.clientId == null) {
      sb.append("null");
    } else {
      sb.append(this.clientId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("clientGeneratedIds:");
    sb.append(this.clientGeneratedIds);
    first = false;
    if (isSetTitleWrapper()) {
      if (!first) sb.append(", ");
      sb.append("titleWrapper:");
      if (this.titleWrapper == null) {
        sb.append("null");
      } else {
        sb.append(this.titleWrapper);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("blocking:");
    sb.append(this.blocking);
    first = false;
    if (isSetChildChange()) {
      if (!first) sb.append(", ");
      sb.append("childChange:");
      if (this.childChange == null) {
        sb.append("null");
      } else {
        sb.append(this.childChange);
      }
      first = false;
    }
    if (isSetTitleDiff()) {
      if (!first) sb.append(", ");
      sb.append("titleDiff:");
      if (this.titleDiff == null) {
        sb.append("null");
      } else {
        sb.append(this.titleDiff);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (titleWrapper != null) {
      titleWrapper.validate();
    }
    if (childChange != null) {
      childChange.validate();
    }
    if (titleDiff != null) {
      titleDiff.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BaseStepStandardSchemeFactory implements SchemeFactory {
    public BaseStepStandardScheme getScheme() {
      return new BaseStepStandardScheme();
    }
  }

  private static class BaseStepStandardScheme extends StandardScheme<BaseStep> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BaseStep struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DESCRIP
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list9 = iprot.readListBegin();
                struct.descrip = new ArrayList<StepDescriptionElement>(_list9.size);
                StepDescriptionElement _elem10;
                for (int _i11 = 0; _i11 < _list9.size; ++_i11)
                {
                  _elem10 = new StepDescriptionElement();
                  _elem10.read(iprot);
                  struct.descrip.add(_elem10);
                }
                iprot.readListEnd();
              }
              struct.setDescripIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IMPL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.impl = new StepImpl();
              struct.impl.read(iprot);
              struct.setImplIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CHILDREN
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list12 = iprot.readListBegin();
                struct.children = new ArrayList<BaseStep>(_list12.size);
                BaseStep _elem13;
                for (int _i14 = 0; _i14 < _list12.size; ++_i14)
                {
                  _elem13 = new BaseStep();
                  _elem13.read(iprot);
                  struct.children.add(_elem13);
                }
                iprot.readListEnd();
              }
              struct.setChildrenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // IS_COMPONENT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isComponent = iprot.readBool();
              struct.setIsComponentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // METADATA_ENTRY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list15 = iprot.readListBegin();
                struct.metadataEntry = new ArrayList<com.wi.director.thrift.v1.metadata.MetadataEntry>(_list15.size);
                com.wi.director.thrift.v1.metadata.MetadataEntry _elem16;
                for (int _i17 = 0; _i17 < _list15.size; ++_i17)
                {
                  _elem16 = new com.wi.director.thrift.v1.metadata.MetadataEntry();
                  _elem16.read(iprot);
                  struct.metadataEntry.add(_elem16);
                }
                iprot.readListEnd();
              }
              struct.setMetadataEntryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // METADATA_BY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map18 = iprot.readMapBegin();
                struct.metadataById = new HashMap<String,com.wi.director.thrift.v1.metadata.MetadataEntry>(2*_map18.size);
                String _key19;
                com.wi.director.thrift.v1.metadata.MetadataEntry _val20;
                for (int _i21 = 0; _i21 < _map18.size; ++_i21)
                {
                  _key19 = iprot.readString();
                  _val20 = new com.wi.director.thrift.v1.metadata.MetadataEntry();
                  _val20.read(iprot);
                  struct.metadataById.put(_key19, _val20);
                }
                iprot.readMapEnd();
              }
              struct.setMetadataByIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // JOB_BASE_STEP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.jobBaseStepId = iprot.readString();
              struct.setJobBaseStepIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // HIERARCHY_POSITION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hierarchyPosition = iprot.readString();
              struct.setHierarchyPositionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // PARENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.parentId = iprot.readString();
              struct.setParentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // PARENT_JOB_BASE_STEP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.parentJobBaseStepId = iprot.readString();
              struct.setParentJobBaseStepIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // CLIENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientId = iprot.readString();
              struct.setClientIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // CLIENT_GENERATED_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.clientGeneratedIds = iprot.readBool();
              struct.setClientGeneratedIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // TITLE_WRAPPER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.titleWrapper = new com.parsable.thrift.v1.reference.StringWrapper();
              struct.titleWrapper.read(iprot);
              struct.setTitleWrapperIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // BLOCKING
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.blocking = iprot.readBool();
              struct.setBlockingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 200: // CHILD_CHANGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.childChange = new com.wi.director.thrift.v1.diff.Change();
              struct.childChange.read(iprot);
              struct.setChildChangeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 201: // TITLE_DIFF
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.titleDiff = new com.wi.director.thrift.v1.diff.StringDiff();
              struct.titleDiff.read(iprot);
              struct.setTitleDiffIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BaseStep struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.title != null) {
        oprot.writeFieldBegin(TITLE_FIELD_DESC);
        oprot.writeString(struct.title);
        oprot.writeFieldEnd();
      }
      if (struct.descrip != null) {
        oprot.writeFieldBegin(DESCRIP_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.descrip.size()));
          for (StepDescriptionElement _iter22 : struct.descrip)
          {
            _iter22.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.impl != null) {
        oprot.writeFieldBegin(IMPL_FIELD_DESC);
        struct.impl.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.children != null) {
        oprot.writeFieldBegin(CHILDREN_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.children.size()));
          for (BaseStep _iter23 : struct.children)
          {
            _iter23.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_COMPONENT_FIELD_DESC);
      oprot.writeBool(struct.isComponent);
      oprot.writeFieldEnd();
      if (struct.metadataEntry != null) {
        if (struct.isSetMetadataEntry()) {
          oprot.writeFieldBegin(METADATA_ENTRY_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.metadataEntry.size()));
            for (com.wi.director.thrift.v1.metadata.MetadataEntry _iter24 : struct.metadataEntry)
            {
              _iter24.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.jobBaseStepId != null) {
        oprot.writeFieldBegin(JOB_BASE_STEP_ID_FIELD_DESC);
        oprot.writeString(struct.jobBaseStepId);
        oprot.writeFieldEnd();
      }
      if (struct.metadataById != null) {
        if (struct.isSetMetadataById()) {
          oprot.writeFieldBegin(METADATA_BY_ID_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.metadataById.size()));
            for (Map.Entry<String, com.wi.director.thrift.v1.metadata.MetadataEntry> _iter25 : struct.metadataById.entrySet())
            {
              oprot.writeString(_iter25.getKey());
              _iter25.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.hierarchyPosition != null) {
        oprot.writeFieldBegin(HIERARCHY_POSITION_FIELD_DESC);
        oprot.writeString(struct.hierarchyPosition);
        oprot.writeFieldEnd();
      }
      if (struct.parentId != null) {
        oprot.writeFieldBegin(PARENT_ID_FIELD_DESC);
        oprot.writeString(struct.parentId);
        oprot.writeFieldEnd();
      }
      if (struct.parentJobBaseStepId != null) {
        oprot.writeFieldBegin(PARENT_JOB_BASE_STEP_ID_FIELD_DESC);
        oprot.writeString(struct.parentJobBaseStepId);
        oprot.writeFieldEnd();
      }
      if (struct.clientId != null) {
        oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
        oprot.writeString(struct.clientId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CLIENT_GENERATED_IDS_FIELD_DESC);
      oprot.writeBool(struct.clientGeneratedIds);
      oprot.writeFieldEnd();
      if (struct.titleWrapper != null) {
        if (struct.isSetTitleWrapper()) {
          oprot.writeFieldBegin(TITLE_WRAPPER_FIELD_DESC);
          struct.titleWrapper.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(BLOCKING_FIELD_DESC);
      oprot.writeBool(struct.blocking);
      oprot.writeFieldEnd();
      if (struct.childChange != null) {
        if (struct.isSetChildChange()) {
          oprot.writeFieldBegin(CHILD_CHANGE_FIELD_DESC);
          struct.childChange.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.titleDiff != null) {
        if (struct.isSetTitleDiff()) {
          oprot.writeFieldBegin(TITLE_DIFF_FIELD_DESC);
          struct.titleDiff.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

}

