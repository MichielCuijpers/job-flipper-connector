/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wi.director.thrift.v1.step;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class TextElement implements org.apache.thrift.TBase<TextElement, TextElement._Fields>, java.io.Serializable, Cloneable, Comparable<TextElement> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TextElement");

  private static final org.apache.thrift.protocol.TField REFERENCE_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("referenceKey", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TXT_FIELD_DESC = new org.apache.thrift.protocol.TField("txt", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TEXT_WRAPPER_FIELD_DESC = new org.apache.thrift.protocol.TField("textWrapper", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField LATEST_CHANGE_FIELD_DESC = new org.apache.thrift.protocol.TField("latestChange", org.apache.thrift.protocol.TType.STRUCT, (short)200);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TextElementStandardSchemeFactory());
  }

  /**
   * referenceKey is in the format of "<stepId>-<index>" where index is the position of the element in the description.
   * This is set by the server each time the struct is returned. This field is READ ONLY.
   * The referenceKey is NOT guaranteed to persist across requests
   */
  public String referenceKey; // optional
  public String txt; // required
  public com.parsable.thrift.v1.reference.StringWrapper textWrapper; // optional
  public com.wi.director.thrift.v1.diff.Change latestChange; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * referenceKey is in the format of "<stepId>-<index>" where index is the position of the element in the description.
     * This is set by the server each time the struct is returned. This field is READ ONLY.
     * The referenceKey is NOT guaranteed to persist across requests
     */
    REFERENCE_KEY((short)1, "referenceKey"),
    TXT((short)2, "txt"),
    TEXT_WRAPPER((short)3, "textWrapper"),
    LATEST_CHANGE((short)200, "latestChange");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // REFERENCE_KEY
          return REFERENCE_KEY;
        case 2: // TXT
          return TXT;
        case 3: // TEXT_WRAPPER
          return TEXT_WRAPPER;
        case 200: // LATEST_CHANGE
          return LATEST_CHANGE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.REFERENCE_KEY,_Fields.TEXT_WRAPPER,_Fields.LATEST_CHANGE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.REFERENCE_KEY, new org.apache.thrift.meta_data.FieldMetaData("referenceKey", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TXT, new org.apache.thrift.meta_data.FieldMetaData("txt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TEXT_WRAPPER, new org.apache.thrift.meta_data.FieldMetaData("textWrapper", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.parsable.thrift.v1.reference.StringWrapper.class)));
    tmpMap.put(_Fields.LATEST_CHANGE, new org.apache.thrift.meta_data.FieldMetaData("latestChange", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.diff.Change.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TextElement.class, metaDataMap);
  }

  public TextElement() {
  }

  public TextElement(
    String txt)
  {
    this();
    this.txt = txt;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TextElement(TextElement other) {
    if (other.isSetReferenceKey()) {
      this.referenceKey = other.referenceKey;
    }
    if (other.isSetTxt()) {
      this.txt = other.txt;
    }
    if (other.isSetTextWrapper()) {
      this.textWrapper = new com.parsable.thrift.v1.reference.StringWrapper(other.textWrapper);
    }
    if (other.isSetLatestChange()) {
      this.latestChange = new com.wi.director.thrift.v1.diff.Change(other.latestChange);
    }
  }

  public TextElement deepCopy() {
    return new TextElement(this);
  }

  @Override
  public void clear() {
    this.referenceKey = null;
    this.txt = null;
    this.textWrapper = null;
    this.latestChange = null;
  }

  /**
   * referenceKey is in the format of "<stepId>-<index>" where index is the position of the element in the description.
   * This is set by the server each time the struct is returned. This field is READ ONLY.
   * The referenceKey is NOT guaranteed to persist across requests
   */
  public String getReferenceKey() {
    return this.referenceKey;
  }

  /**
   * referenceKey is in the format of "<stepId>-<index>" where index is the position of the element in the description.
   * This is set by the server each time the struct is returned. This field is READ ONLY.
   * The referenceKey is NOT guaranteed to persist across requests
   */
  public TextElement setReferenceKey(String referenceKey) {
    this.referenceKey = referenceKey;
    return this;
  }

  public void unsetReferenceKey() {
    this.referenceKey = null;
  }

  /** Returns true if field referenceKey is set (has been assigned a value) and false otherwise */
  public boolean isSetReferenceKey() {
    return this.referenceKey != null;
  }

  public void setReferenceKeyIsSet(boolean value) {
    if (!value) {
      this.referenceKey = null;
    }
  }

  public String getTxt() {
    return this.txt;
  }

  public TextElement setTxt(String txt) {
    this.txt = txt;
    return this;
  }

  public void unsetTxt() {
    this.txt = null;
  }

  /** Returns true if field txt is set (has been assigned a value) and false otherwise */
  public boolean isSetTxt() {
    return this.txt != null;
  }

  public void setTxtIsSet(boolean value) {
    if (!value) {
      this.txt = null;
    }
  }

  public com.parsable.thrift.v1.reference.StringWrapper getTextWrapper() {
    return this.textWrapper;
  }

  public TextElement setTextWrapper(com.parsable.thrift.v1.reference.StringWrapper textWrapper) {
    this.textWrapper = textWrapper;
    return this;
  }

  public void unsetTextWrapper() {
    this.textWrapper = null;
  }

  /** Returns true if field textWrapper is set (has been assigned a value) and false otherwise */
  public boolean isSetTextWrapper() {
    return this.textWrapper != null;
  }

  public void setTextWrapperIsSet(boolean value) {
    if (!value) {
      this.textWrapper = null;
    }
  }

  public com.wi.director.thrift.v1.diff.Change getLatestChange() {
    return this.latestChange;
  }

  public TextElement setLatestChange(com.wi.director.thrift.v1.diff.Change latestChange) {
    this.latestChange = latestChange;
    return this;
  }

  public void unsetLatestChange() {
    this.latestChange = null;
  }

  /** Returns true if field latestChange is set (has been assigned a value) and false otherwise */
  public boolean isSetLatestChange() {
    return this.latestChange != null;
  }

  public void setLatestChangeIsSet(boolean value) {
    if (!value) {
      this.latestChange = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case REFERENCE_KEY:
      if (value == null) {
        unsetReferenceKey();
      } else {
        setReferenceKey((String)value);
      }
      break;

    case TXT:
      if (value == null) {
        unsetTxt();
      } else {
        setTxt((String)value);
      }
      break;

    case TEXT_WRAPPER:
      if (value == null) {
        unsetTextWrapper();
      } else {
        setTextWrapper((com.parsable.thrift.v1.reference.StringWrapper)value);
      }
      break;

    case LATEST_CHANGE:
      if (value == null) {
        unsetLatestChange();
      } else {
        setLatestChange((com.wi.director.thrift.v1.diff.Change)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case REFERENCE_KEY:
      return getReferenceKey();

    case TXT:
      return getTxt();

    case TEXT_WRAPPER:
      return getTextWrapper();

    case LATEST_CHANGE:
      return getLatestChange();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case REFERENCE_KEY:
      return isSetReferenceKey();
    case TXT:
      return isSetTxt();
    case TEXT_WRAPPER:
      return isSetTextWrapper();
    case LATEST_CHANGE:
      return isSetLatestChange();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TextElement)
      return this.equals((TextElement)that);
    return false;
  }

  public boolean equals(TextElement that) {
    if (that == null)
      return false;

    boolean this_present_referenceKey = true && this.isSetReferenceKey();
    boolean that_present_referenceKey = true && that.isSetReferenceKey();
    if (this_present_referenceKey || that_present_referenceKey) {
      if (!(this_present_referenceKey && that_present_referenceKey))
        return false;
      if (!this.referenceKey.equals(that.referenceKey))
        return false;
    }

    boolean this_present_txt = true && this.isSetTxt();
    boolean that_present_txt = true && that.isSetTxt();
    if (this_present_txt || that_present_txt) {
      if (!(this_present_txt && that_present_txt))
        return false;
      if (!this.txt.equals(that.txt))
        return false;
    }

    boolean this_present_textWrapper = true && this.isSetTextWrapper();
    boolean that_present_textWrapper = true && that.isSetTextWrapper();
    if (this_present_textWrapper || that_present_textWrapper) {
      if (!(this_present_textWrapper && that_present_textWrapper))
        return false;
      if (!this.textWrapper.equals(that.textWrapper))
        return false;
    }

    boolean this_present_latestChange = true && this.isSetLatestChange();
    boolean that_present_latestChange = true && that.isSetLatestChange();
    if (this_present_latestChange || that_present_latestChange) {
      if (!(this_present_latestChange && that_present_latestChange))
        return false;
      if (!this.latestChange.equals(that.latestChange))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_referenceKey = true && (isSetReferenceKey());
    list.add(present_referenceKey);
    if (present_referenceKey)
      list.add(referenceKey);

    boolean present_txt = true && (isSetTxt());
    list.add(present_txt);
    if (present_txt)
      list.add(txt);

    boolean present_textWrapper = true && (isSetTextWrapper());
    list.add(present_textWrapper);
    if (present_textWrapper)
      list.add(textWrapper);

    boolean present_latestChange = true && (isSetLatestChange());
    list.add(present_latestChange);
    if (present_latestChange)
      list.add(latestChange);

    return list.hashCode();
  }

  @Override
  public int compareTo(TextElement other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetReferenceKey()).compareTo(other.isSetReferenceKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReferenceKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.referenceKey, other.referenceKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTxt()).compareTo(other.isSetTxt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTxt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.txt, other.txt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTextWrapper()).compareTo(other.isSetTextWrapper());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTextWrapper()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.textWrapper, other.textWrapper);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLatestChange()).compareTo(other.isSetLatestChange());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLatestChange()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.latestChange, other.latestChange);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TextElement(");
    boolean first = true;

    if (isSetReferenceKey()) {
      sb.append("referenceKey:");
      if (this.referenceKey == null) {
        sb.append("null");
      } else {
        sb.append(this.referenceKey);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("txt:");
    if (this.txt == null) {
      sb.append("null");
    } else {
      sb.append(this.txt);
    }
    first = false;
    if (isSetTextWrapper()) {
      if (!first) sb.append(", ");
      sb.append("textWrapper:");
      if (this.textWrapper == null) {
        sb.append("null");
      } else {
        sb.append(this.textWrapper);
      }
      first = false;
    }
    if (isSetLatestChange()) {
      if (!first) sb.append(", ");
      sb.append("latestChange:");
      if (this.latestChange == null) {
        sb.append("null");
      } else {
        sb.append(this.latestChange);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (textWrapper != null) {
      textWrapper.validate();
    }
    if (latestChange != null) {
      latestChange.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TextElementStandardSchemeFactory implements SchemeFactory {
    public TextElementStandardScheme getScheme() {
      return new TextElementStandardScheme();
    }
  }

  private static class TextElementStandardScheme extends StandardScheme<TextElement> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TextElement struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // REFERENCE_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.referenceKey = iprot.readString();
              struct.setReferenceKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.txt = iprot.readString();
              struct.setTxtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TEXT_WRAPPER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.textWrapper = new com.parsable.thrift.v1.reference.StringWrapper();
              struct.textWrapper.read(iprot);
              struct.setTextWrapperIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 200: // LATEST_CHANGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.latestChange = new com.wi.director.thrift.v1.diff.Change();
              struct.latestChange.read(iprot);
              struct.setLatestChangeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TextElement struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.referenceKey != null) {
        if (struct.isSetReferenceKey()) {
          oprot.writeFieldBegin(REFERENCE_KEY_FIELD_DESC);
          oprot.writeString(struct.referenceKey);
          oprot.writeFieldEnd();
        }
      }
      if (struct.txt != null) {
        oprot.writeFieldBegin(TXT_FIELD_DESC);
        oprot.writeString(struct.txt);
        oprot.writeFieldEnd();
      }
      if (struct.textWrapper != null) {
        if (struct.isSetTextWrapper()) {
          oprot.writeFieldBegin(TEXT_WRAPPER_FIELD_DESC);
          struct.textWrapper.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.latestChange != null) {
        if (struct.isSetLatestChange()) {
          oprot.writeFieldBegin(LATEST_CHANGE_FIELD_DESC);
          struct.latestChange.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

}

