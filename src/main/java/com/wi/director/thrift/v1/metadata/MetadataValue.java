/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wi.director.thrift.v1.metadata;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
public class MetadataValue extends org.apache.thrift.TUnion<MetadataValue, MetadataValue._Fields> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MetadataValue");
  private static final org.apache.thrift.protocol.TField TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("text", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("number", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField LIST_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("listValue", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField LIST_VALUE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("listValueId", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField SELECTED_LIST_VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("selectedListValues", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField SELECTED_LIST_VALUE_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("selectedListValueIds", org.apache.thrift.protocol.TType.STRUCT, (short)6);

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * string value; when passed in <code>*WhereOpts</code>, uses full text searching
     */
    TEXT((short)1, "text"),
    /**
     * double value; when passed in <code>*WhereOpts</code>, uses exact number searching
     */
    NUMBER((short)2, "number"),
    /**
     * string value from metadata list of options; when passed in <code>*WhereOpts</code>, uses exact string searching
     */
    LIST_VALUE((short)3, "listValue"),
    /**
     * value id referring to <code>listValue</code>
     */
    LIST_VALUE_ID((short)5, "listValueId"),
    /**
     * set of string values from metadata list of options; when passed in <code>*WhereOpts</code>, uses string "contains" searching, e.g. searching for "A" returns all values containing "A", such as set("A"), set("A", "B"), set("A", "B", "C") ...
     */
    SELECTED_LIST_VALUES((short)4, "selectedListValues"),
    /**
     * value id set referring to <code>selectedListValues</code>
     */
    SELECTED_LIST_VALUE_IDS((short)6, "selectedListValueIds");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TEXT
          return TEXT;
        case 2: // NUMBER
          return NUMBER;
        case 3: // LIST_VALUE
          return LIST_VALUE;
        case 5: // LIST_VALUE_ID
          return LIST_VALUE_ID;
        case 4: // SELECTED_LIST_VALUES
          return SELECTED_LIST_VALUES;
        case 6: // SELECTED_LIST_VALUE_IDS
          return SELECTED_LIST_VALUE_IDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TEXT, new org.apache.thrift.meta_data.FieldMetaData("text", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NUMBER, new org.apache.thrift.meta_data.FieldMetaData("number", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LIST_VALUE, new org.apache.thrift.meta_data.FieldMetaData("listValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LIST_VALUE_ID, new org.apache.thrift.meta_data.FieldMetaData("listValueId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SELECTED_LIST_VALUES, new org.apache.thrift.meta_data.FieldMetaData("selectedListValues", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.common.SelectedListValues.class)));
    tmpMap.put(_Fields.SELECTED_LIST_VALUE_IDS, new org.apache.thrift.meta_data.FieldMetaData("selectedListValueIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.common.SelectedListValueIds.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MetadataValue.class, metaDataMap);
  }

  public MetadataValue() {
    super();
  }

  public MetadataValue(_Fields setField, Object value) {
    super(setField, value);
  }

  public MetadataValue(MetadataValue other) {
    super(other);
  }
  public MetadataValue deepCopy() {
    return new MetadataValue(this);
  }

  public static MetadataValue text(String value) {
    MetadataValue x = new MetadataValue();
    x.setText(value);
    return x;
  }

  public static MetadataValue number(double value) {
    MetadataValue x = new MetadataValue();
    x.setNumber(value);
    return x;
  }

  public static MetadataValue listValue(String value) {
    MetadataValue x = new MetadataValue();
    x.setListValue(value);
    return x;
  }

  public static MetadataValue listValueId(String value) {
    MetadataValue x = new MetadataValue();
    x.setListValueId(value);
    return x;
  }

  public static MetadataValue selectedListValues(com.wi.director.thrift.v1.common.SelectedListValues value) {
    MetadataValue x = new MetadataValue();
    x.setSelectedListValues(value);
    return x;
  }

  public static MetadataValue selectedListValueIds(com.wi.director.thrift.v1.common.SelectedListValueIds value) {
    MetadataValue x = new MetadataValue();
    x.setSelectedListValueIds(value);
    return x;
  }


  @Override
  protected void checkType(_Fields setField, Object value) throws ClassCastException {
    switch (setField) {
      case TEXT:
        if (value instanceof String) {
          break;
        }
        throw new ClassCastException("Was expecting value of type String for field 'text', but got " + value.getClass().getSimpleName());
      case NUMBER:
        if (value instanceof Double) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Double for field 'number', but got " + value.getClass().getSimpleName());
      case LIST_VALUE:
        if (value instanceof String) {
          break;
        }
        throw new ClassCastException("Was expecting value of type String for field 'listValue', but got " + value.getClass().getSimpleName());
      case LIST_VALUE_ID:
        if (value instanceof String) {
          break;
        }
        throw new ClassCastException("Was expecting value of type String for field 'listValueId', but got " + value.getClass().getSimpleName());
      case SELECTED_LIST_VALUES:
        if (value instanceof com.wi.director.thrift.v1.common.SelectedListValues) {
          break;
        }
        throw new ClassCastException("Was expecting value of type com.wi.director.thrift.v1.common.SelectedListValues for field 'selectedListValues', but got " + value.getClass().getSimpleName());
      case SELECTED_LIST_VALUE_IDS:
        if (value instanceof com.wi.director.thrift.v1.common.SelectedListValueIds) {
          break;
        }
        throw new ClassCastException("Was expecting value of type com.wi.director.thrift.v1.common.SelectedListValueIds for field 'selectedListValueIds', but got " + value.getClass().getSimpleName());
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected Object standardSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TField field) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(field.id);
    if (setField != null) {
      switch (setField) {
        case TEXT:
          if (field.type == TEXT_FIELD_DESC.type) {
            String text;
            text = iprot.readString();
            return text;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case NUMBER:
          if (field.type == NUMBER_FIELD_DESC.type) {
            Double number;
            number = iprot.readDouble();
            return number;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case LIST_VALUE:
          if (field.type == LIST_VALUE_FIELD_DESC.type) {
            String listValue;
            listValue = iprot.readString();
            return listValue;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case LIST_VALUE_ID:
          if (field.type == LIST_VALUE_ID_FIELD_DESC.type) {
            String listValueId;
            listValueId = iprot.readString();
            return listValueId;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case SELECTED_LIST_VALUES:
          if (field.type == SELECTED_LIST_VALUES_FIELD_DESC.type) {
            com.wi.director.thrift.v1.common.SelectedListValues selectedListValues;
            selectedListValues = new com.wi.director.thrift.v1.common.SelectedListValues();
            selectedListValues.read(iprot);
            return selectedListValues;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case SELECTED_LIST_VALUE_IDS:
          if (field.type == SELECTED_LIST_VALUE_IDS_FIELD_DESC.type) {
            com.wi.director.thrift.v1.common.SelectedListValueIds selectedListValueIds;
            selectedListValueIds = new com.wi.director.thrift.v1.common.SelectedListValueIds();
            selectedListValueIds.read(iprot);
            return selectedListValueIds;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      return null;
    }
  }

  @Override
  protected void standardSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case TEXT:
        String text = (String)value_;
        oprot.writeString(text);
        return;
      case NUMBER:
        Double number = (Double)value_;
        oprot.writeDouble(number);
        return;
      case LIST_VALUE:
        String listValue = (String)value_;
        oprot.writeString(listValue);
        return;
      case LIST_VALUE_ID:
        String listValueId = (String)value_;
        oprot.writeString(listValueId);
        return;
      case SELECTED_LIST_VALUES:
        com.wi.director.thrift.v1.common.SelectedListValues selectedListValues = (com.wi.director.thrift.v1.common.SelectedListValues)value_;
        selectedListValues.write(oprot);
        return;
      case SELECTED_LIST_VALUE_IDS:
        com.wi.director.thrift.v1.common.SelectedListValueIds selectedListValueIds = (com.wi.director.thrift.v1.common.SelectedListValueIds)value_;
        selectedListValueIds.write(oprot);
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected Object tupleSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, short fieldID) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(fieldID);
    if (setField != null) {
      switch (setField) {
        case TEXT:
          String text;
          text = iprot.readString();
          return text;
        case NUMBER:
          Double number;
          number = iprot.readDouble();
          return number;
        case LIST_VALUE:
          String listValue;
          listValue = iprot.readString();
          return listValue;
        case LIST_VALUE_ID:
          String listValueId;
          listValueId = iprot.readString();
          return listValueId;
        case SELECTED_LIST_VALUES:
          com.wi.director.thrift.v1.common.SelectedListValues selectedListValues;
          selectedListValues = new com.wi.director.thrift.v1.common.SelectedListValues();
          selectedListValues.read(iprot);
          return selectedListValues;
        case SELECTED_LIST_VALUE_IDS:
          com.wi.director.thrift.v1.common.SelectedListValueIds selectedListValueIds;
          selectedListValueIds = new com.wi.director.thrift.v1.common.SelectedListValueIds();
          selectedListValueIds.read(iprot);
          return selectedListValueIds;
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      throw new TProtocolException("Couldn't find a field with field id " + fieldID);
    }
  }

  @Override
  protected void tupleSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case TEXT:
        String text = (String)value_;
        oprot.writeString(text);
        return;
      case NUMBER:
        Double number = (Double)value_;
        oprot.writeDouble(number);
        return;
      case LIST_VALUE:
        String listValue = (String)value_;
        oprot.writeString(listValue);
        return;
      case LIST_VALUE_ID:
        String listValueId = (String)value_;
        oprot.writeString(listValueId);
        return;
      case SELECTED_LIST_VALUES:
        com.wi.director.thrift.v1.common.SelectedListValues selectedListValues = (com.wi.director.thrift.v1.common.SelectedListValues)value_;
        selectedListValues.write(oprot);
        return;
      case SELECTED_LIST_VALUE_IDS:
        com.wi.director.thrift.v1.common.SelectedListValueIds selectedListValueIds = (com.wi.director.thrift.v1.common.SelectedListValueIds)value_;
        selectedListValueIds.write(oprot);
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TField getFieldDesc(_Fields setField) {
    switch (setField) {
      case TEXT:
        return TEXT_FIELD_DESC;
      case NUMBER:
        return NUMBER_FIELD_DESC;
      case LIST_VALUE:
        return LIST_VALUE_FIELD_DESC;
      case LIST_VALUE_ID:
        return LIST_VALUE_ID_FIELD_DESC;
      case SELECTED_LIST_VALUES:
        return SELECTED_LIST_VALUES_FIELD_DESC;
      case SELECTED_LIST_VALUE_IDS:
        return SELECTED_LIST_VALUE_IDS_FIELD_DESC;
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TStruct getStructDesc() {
    return STRUCT_DESC;
  }

  @Override
  protected _Fields enumForId(short id) {
    return _Fields.findByThriftIdOrThrow(id);
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  /**
   * string value; when passed in <code>*WhereOpts</code>, uses full text searching
   */
  public String getText() {
    if (getSetField() == _Fields.TEXT) {
      return (String)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'text' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  /**
   * string value; when passed in <code>*WhereOpts</code>, uses full text searching
   */
  public void setText(String value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.TEXT;
    value_ = value;
  }

  /**
   * double value; when passed in <code>*WhereOpts</code>, uses exact number searching
   */
  public double getNumber() {
    if (getSetField() == _Fields.NUMBER) {
      return (Double)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'number' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  /**
   * double value; when passed in <code>*WhereOpts</code>, uses exact number searching
   */
  public void setNumber(double value) {
    setField_ = _Fields.NUMBER;
    value_ = value;
  }

  /**
   * string value from metadata list of options; when passed in <code>*WhereOpts</code>, uses exact string searching
   */
  public String getListValue() {
    if (getSetField() == _Fields.LIST_VALUE) {
      return (String)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'listValue' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  /**
   * string value from metadata list of options; when passed in <code>*WhereOpts</code>, uses exact string searching
   */
  public void setListValue(String value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.LIST_VALUE;
    value_ = value;
  }

  /**
   * value id referring to <code>listValue</code>
   */
  public String getListValueId() {
    if (getSetField() == _Fields.LIST_VALUE_ID) {
      return (String)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'listValueId' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  /**
   * value id referring to <code>listValue</code>
   */
  public void setListValueId(String value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.LIST_VALUE_ID;
    value_ = value;
  }

  /**
   * set of string values from metadata list of options; when passed in <code>*WhereOpts</code>, uses string "contains" searching, e.g. searching for "A" returns all values containing "A", such as set("A"), set("A", "B"), set("A", "B", "C") ...
   */
  public com.wi.director.thrift.v1.common.SelectedListValues getSelectedListValues() {
    if (getSetField() == _Fields.SELECTED_LIST_VALUES) {
      return (com.wi.director.thrift.v1.common.SelectedListValues)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'selectedListValues' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  /**
   * set of string values from metadata list of options; when passed in <code>*WhereOpts</code>, uses string "contains" searching, e.g. searching for "A" returns all values containing "A", such as set("A"), set("A", "B"), set("A", "B", "C") ...
   */
  public void setSelectedListValues(com.wi.director.thrift.v1.common.SelectedListValues value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.SELECTED_LIST_VALUES;
    value_ = value;
  }

  /**
   * value id set referring to <code>selectedListValues</code>
   */
  public com.wi.director.thrift.v1.common.SelectedListValueIds getSelectedListValueIds() {
    if (getSetField() == _Fields.SELECTED_LIST_VALUE_IDS) {
      return (com.wi.director.thrift.v1.common.SelectedListValueIds)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'selectedListValueIds' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  /**
   * value id set referring to <code>selectedListValues</code>
   */
  public void setSelectedListValueIds(com.wi.director.thrift.v1.common.SelectedListValueIds value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.SELECTED_LIST_VALUE_IDS;
    value_ = value;
  }

  public boolean isSetText() {
    return setField_ == _Fields.TEXT;
  }


  public boolean isSetNumber() {
    return setField_ == _Fields.NUMBER;
  }


  public boolean isSetListValue() {
    return setField_ == _Fields.LIST_VALUE;
  }


  public boolean isSetListValueId() {
    return setField_ == _Fields.LIST_VALUE_ID;
  }


  public boolean isSetSelectedListValues() {
    return setField_ == _Fields.SELECTED_LIST_VALUES;
  }


  public boolean isSetSelectedListValueIds() {
    return setField_ == _Fields.SELECTED_LIST_VALUE_IDS;
  }


  public boolean equals(Object other) {
    if (other instanceof MetadataValue) {
      return equals((MetadataValue)other);
    } else {
      return false;
    }
  }

  public boolean equals(MetadataValue other) {
    return other != null && getSetField() == other.getSetField() && getFieldValue().equals(other.getFieldValue());
  }

  @Override
  public int compareTo(MetadataValue other) {
    int lastComparison = org.apache.thrift.TBaseHelper.compareTo(getSetField(), other.getSetField());
    if (lastComparison == 0) {
      return org.apache.thrift.TBaseHelper.compareTo(getFieldValue(), other.getFieldValue());
    }
    return lastComparison;
  }


  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();
    list.add(this.getClass().getName());
    org.apache.thrift.TFieldIdEnum setField = getSetField();
    if (setField != null) {
      list.add(setField.getThriftFieldId());
      Object value = getFieldValue();
      if (value instanceof org.apache.thrift.TEnum) {
        list.add(((org.apache.thrift.TEnum)getFieldValue()).getValue());
      } else {
        list.add(value);
      }
    }
    return list.hashCode();
  }
  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


}
