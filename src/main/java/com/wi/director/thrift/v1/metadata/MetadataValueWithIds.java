/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wi.director.thrift.v1.metadata;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * NOHTML
 * MetadataValueWithIds replaces MetadataValue. There is no new functionality here, but it will always
 * include both unique uuids alongside the human readable version of those values. Additionally, this
 * type will use objects even for the simpler fields, as that provides more ability for backwards
 * compatibility as things change going forward.
 * NOTE: This alternate version is currently only used in events. More work would need to be done to implement
 * this across the rest of the app, and there isn't a lot of immediate benefit until a new feature crops
 * up that requires editing the MetadataValue struct. At which point in time, I'd recommend switching
 * over to this version.
 */
public class MetadataValueWithIds extends org.apache.thrift.TUnion<MetadataValueWithIds, MetadataValueWithIds._Fields> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MetadataValueWithIds");
  private static final org.apache.thrift.protocol.TField TEXT_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("textVal", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField NUMBER_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("numberVal", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField LIST_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("listVal", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField MULTISELECT_LIST_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("multiselectListVal", org.apache.thrift.protocol.TType.STRUCT, (short)4);

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TEXT_VAL((short)1, "textVal"),
    NUMBER_VAL((short)2, "numberVal"),
    LIST_VAL((short)3, "listVal"),
    MULTISELECT_LIST_VAL((short)4, "multiselectListVal");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TEXT_VAL
          return TEXT_VAL;
        case 2: // NUMBER_VAL
          return NUMBER_VAL;
        case 3: // LIST_VAL
          return LIST_VAL;
        case 4: // MULTISELECT_LIST_VAL
          return MULTISELECT_LIST_VAL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TEXT_VAL, new org.apache.thrift.meta_data.FieldMetaData("textVal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MetadataTextVal.class)));
    tmpMap.put(_Fields.NUMBER_VAL, new org.apache.thrift.meta_data.FieldMetaData("numberVal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MetadataNumberVal.class)));
    tmpMap.put(_Fields.LIST_VAL, new org.apache.thrift.meta_data.FieldMetaData("listVal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MetadataListVal.class)));
    tmpMap.put(_Fields.MULTISELECT_LIST_VAL, new org.apache.thrift.meta_data.FieldMetaData("multiselectListVal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MetadataMultiselectListVal.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MetadataValueWithIds.class, metaDataMap);
  }

  public MetadataValueWithIds() {
    super();
  }

  public MetadataValueWithIds(_Fields setField, Object value) {
    super(setField, value);
  }

  public MetadataValueWithIds(MetadataValueWithIds other) {
    super(other);
  }
  public MetadataValueWithIds deepCopy() {
    return new MetadataValueWithIds(this);
  }

  public static MetadataValueWithIds textVal(MetadataTextVal value) {
    MetadataValueWithIds x = new MetadataValueWithIds();
    x.setTextVal(value);
    return x;
  }

  public static MetadataValueWithIds numberVal(MetadataNumberVal value) {
    MetadataValueWithIds x = new MetadataValueWithIds();
    x.setNumberVal(value);
    return x;
  }

  public static MetadataValueWithIds listVal(MetadataListVal value) {
    MetadataValueWithIds x = new MetadataValueWithIds();
    x.setListVal(value);
    return x;
  }

  public static MetadataValueWithIds multiselectListVal(MetadataMultiselectListVal value) {
    MetadataValueWithIds x = new MetadataValueWithIds();
    x.setMultiselectListVal(value);
    return x;
  }


  @Override
  protected void checkType(_Fields setField, Object value) throws ClassCastException {
    switch (setField) {
      case TEXT_VAL:
        if (value instanceof MetadataTextVal) {
          break;
        }
        throw new ClassCastException("Was expecting value of type MetadataTextVal for field 'textVal', but got " + value.getClass().getSimpleName());
      case NUMBER_VAL:
        if (value instanceof MetadataNumberVal) {
          break;
        }
        throw new ClassCastException("Was expecting value of type MetadataNumberVal for field 'numberVal', but got " + value.getClass().getSimpleName());
      case LIST_VAL:
        if (value instanceof MetadataListVal) {
          break;
        }
        throw new ClassCastException("Was expecting value of type MetadataListVal for field 'listVal', but got " + value.getClass().getSimpleName());
      case MULTISELECT_LIST_VAL:
        if (value instanceof MetadataMultiselectListVal) {
          break;
        }
        throw new ClassCastException("Was expecting value of type MetadataMultiselectListVal for field 'multiselectListVal', but got " + value.getClass().getSimpleName());
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected Object standardSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TField field) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(field.id);
    if (setField != null) {
      switch (setField) {
        case TEXT_VAL:
          if (field.type == TEXT_VAL_FIELD_DESC.type) {
            MetadataTextVal textVal;
            textVal = new MetadataTextVal();
            textVal.read(iprot);
            return textVal;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case NUMBER_VAL:
          if (field.type == NUMBER_VAL_FIELD_DESC.type) {
            MetadataNumberVal numberVal;
            numberVal = new MetadataNumberVal();
            numberVal.read(iprot);
            return numberVal;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case LIST_VAL:
          if (field.type == LIST_VAL_FIELD_DESC.type) {
            MetadataListVal listVal;
            listVal = new MetadataListVal();
            listVal.read(iprot);
            return listVal;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case MULTISELECT_LIST_VAL:
          if (field.type == MULTISELECT_LIST_VAL_FIELD_DESC.type) {
            MetadataMultiselectListVal multiselectListVal;
            multiselectListVal = new MetadataMultiselectListVal();
            multiselectListVal.read(iprot);
            return multiselectListVal;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      return null;
    }
  }

  @Override
  protected void standardSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case TEXT_VAL:
        MetadataTextVal textVal = (MetadataTextVal)value_;
        textVal.write(oprot);
        return;
      case NUMBER_VAL:
        MetadataNumberVal numberVal = (MetadataNumberVal)value_;
        numberVal.write(oprot);
        return;
      case LIST_VAL:
        MetadataListVal listVal = (MetadataListVal)value_;
        listVal.write(oprot);
        return;
      case MULTISELECT_LIST_VAL:
        MetadataMultiselectListVal multiselectListVal = (MetadataMultiselectListVal)value_;
        multiselectListVal.write(oprot);
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected Object tupleSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, short fieldID) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(fieldID);
    if (setField != null) {
      switch (setField) {
        case TEXT_VAL:
          MetadataTextVal textVal;
          textVal = new MetadataTextVal();
          textVal.read(iprot);
          return textVal;
        case NUMBER_VAL:
          MetadataNumberVal numberVal;
          numberVal = new MetadataNumberVal();
          numberVal.read(iprot);
          return numberVal;
        case LIST_VAL:
          MetadataListVal listVal;
          listVal = new MetadataListVal();
          listVal.read(iprot);
          return listVal;
        case MULTISELECT_LIST_VAL:
          MetadataMultiselectListVal multiselectListVal;
          multiselectListVal = new MetadataMultiselectListVal();
          multiselectListVal.read(iprot);
          return multiselectListVal;
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      throw new TProtocolException("Couldn't find a field with field id " + fieldID);
    }
  }

  @Override
  protected void tupleSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case TEXT_VAL:
        MetadataTextVal textVal = (MetadataTextVal)value_;
        textVal.write(oprot);
        return;
      case NUMBER_VAL:
        MetadataNumberVal numberVal = (MetadataNumberVal)value_;
        numberVal.write(oprot);
        return;
      case LIST_VAL:
        MetadataListVal listVal = (MetadataListVal)value_;
        listVal.write(oprot);
        return;
      case MULTISELECT_LIST_VAL:
        MetadataMultiselectListVal multiselectListVal = (MetadataMultiselectListVal)value_;
        multiselectListVal.write(oprot);
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TField getFieldDesc(_Fields setField) {
    switch (setField) {
      case TEXT_VAL:
        return TEXT_VAL_FIELD_DESC;
      case NUMBER_VAL:
        return NUMBER_VAL_FIELD_DESC;
      case LIST_VAL:
        return LIST_VAL_FIELD_DESC;
      case MULTISELECT_LIST_VAL:
        return MULTISELECT_LIST_VAL_FIELD_DESC;
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TStruct getStructDesc() {
    return STRUCT_DESC;
  }

  @Override
  protected _Fields enumForId(short id) {
    return _Fields.findByThriftIdOrThrow(id);
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public MetadataTextVal getTextVal() {
    if (getSetField() == _Fields.TEXT_VAL) {
      return (MetadataTextVal)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'textVal' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setTextVal(MetadataTextVal value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.TEXT_VAL;
    value_ = value;
  }

  public MetadataNumberVal getNumberVal() {
    if (getSetField() == _Fields.NUMBER_VAL) {
      return (MetadataNumberVal)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'numberVal' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setNumberVal(MetadataNumberVal value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.NUMBER_VAL;
    value_ = value;
  }

  public MetadataListVal getListVal() {
    if (getSetField() == _Fields.LIST_VAL) {
      return (MetadataListVal)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'listVal' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setListVal(MetadataListVal value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.LIST_VAL;
    value_ = value;
  }

  public MetadataMultiselectListVal getMultiselectListVal() {
    if (getSetField() == _Fields.MULTISELECT_LIST_VAL) {
      return (MetadataMultiselectListVal)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'multiselectListVal' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setMultiselectListVal(MetadataMultiselectListVal value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.MULTISELECT_LIST_VAL;
    value_ = value;
  }

  public boolean isSetTextVal() {
    return setField_ == _Fields.TEXT_VAL;
  }


  public boolean isSetNumberVal() {
    return setField_ == _Fields.NUMBER_VAL;
  }


  public boolean isSetListVal() {
    return setField_ == _Fields.LIST_VAL;
  }


  public boolean isSetMultiselectListVal() {
    return setField_ == _Fields.MULTISELECT_LIST_VAL;
  }


  public boolean equals(Object other) {
    if (other instanceof MetadataValueWithIds) {
      return equals((MetadataValueWithIds)other);
    } else {
      return false;
    }
  }

  public boolean equals(MetadataValueWithIds other) {
    return other != null && getSetField() == other.getSetField() && getFieldValue().equals(other.getFieldValue());
  }

  @Override
  public int compareTo(MetadataValueWithIds other) {
    int lastComparison = org.apache.thrift.TBaseHelper.compareTo(getSetField(), other.getSetField());
    if (lastComparison == 0) {
      return org.apache.thrift.TBaseHelper.compareTo(getFieldValue(), other.getFieldValue());
    }
    return lastComparison;
  }


  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();
    list.add(this.getClass().getName());
    org.apache.thrift.TFieldIdEnum setField = getSetField();
    if (setField != null) {
      list.add(setField.getThriftFieldId());
      Object value = getFieldValue();
      if (value instanceof org.apache.thrift.TEnum) {
        list.add(((org.apache.thrift.TEnum)getFieldValue()).getValue());
      } else {
        list.add(value);
      }
    }
    return list.hashCode();
  }
  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


}
