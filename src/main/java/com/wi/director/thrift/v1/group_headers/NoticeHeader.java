/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wi.director.thrift.v1.group_headers;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * A notice represents a message at the top of a step group containing a standard icon
 * and a description.
 */
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class NoticeHeader implements org.apache.thrift.TBase<NoticeHeader, NoticeHeader._Fields>, java.io.Serializable, Cloneable, Comparable<NoticeHeader> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("NoticeHeader");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ICON_FIELD_DESC = new org.apache.thrift.protocol.TField("icon", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField DESCRIP_FIELD_DESC = new org.apache.thrift.protocol.TField("descrip", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DESCRIP_WRAPPER_FIELD_DESC = new org.apache.thrift.protocol.TField("descripWrapper", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_DIFF_FIELD_DESC = new org.apache.thrift.protocol.TField("descriptionDiff", org.apache.thrift.protocol.TType.STRUCT, (short)100);
  private static final org.apache.thrift.protocol.TField ICON_DIFF_FIELD_DESC = new org.apache.thrift.protocol.TField("iconDiff", org.apache.thrift.protocol.TType.STRUCT, (short)101);
  private static final org.apache.thrift.protocol.TField LATEST_CHANGE_FIELD_DESC = new org.apache.thrift.protocol.TField("latestChange", org.apache.thrift.protocol.TType.STRUCT, (short)200);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new NoticeHeaderStandardSchemeFactory());
  }

  public String id; // required
  public NoticeIcon icon; // required
  public String descrip; // required
  public com.parsable.thrift.v1.reference.StringWrapper descripWrapper; // optional
  public com.wi.director.thrift.v1.diff.StringDiff descriptionDiff; // optional
  public IconDiff iconDiff; // optional
  public com.wi.director.thrift.v1.diff.Change latestChange; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    ICON((short)2, "icon"),
    DESCRIP((short)3, "descrip"),
    DESCRIP_WRAPPER((short)4, "descripWrapper"),
    DESCRIPTION_DIFF((short)100, "descriptionDiff"),
    ICON_DIFF((short)101, "iconDiff"),
    LATEST_CHANGE((short)200, "latestChange");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // ICON
          return ICON;
        case 3: // DESCRIP
          return DESCRIP;
        case 4: // DESCRIP_WRAPPER
          return DESCRIP_WRAPPER;
        case 100: // DESCRIPTION_DIFF
          return DESCRIPTION_DIFF;
        case 101: // ICON_DIFF
          return ICON_DIFF;
        case 200: // LATEST_CHANGE
          return LATEST_CHANGE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.DESCRIP_WRAPPER,_Fields.DESCRIPTION_DIFF,_Fields.ICON_DIFF,_Fields.LATEST_CHANGE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ICON, new org.apache.thrift.meta_data.FieldMetaData("icon", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NoticeIcon.class)));
    tmpMap.put(_Fields.DESCRIP, new org.apache.thrift.meta_data.FieldMetaData("descrip", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRIP_WRAPPER, new org.apache.thrift.meta_data.FieldMetaData("descripWrapper", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.parsable.thrift.v1.reference.StringWrapper.class)));
    tmpMap.put(_Fields.DESCRIPTION_DIFF, new org.apache.thrift.meta_data.FieldMetaData("descriptionDiff", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.diff.StringDiff.class)));
    tmpMap.put(_Fields.ICON_DIFF, new org.apache.thrift.meta_data.FieldMetaData("iconDiff", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IconDiff.class)));
    tmpMap.put(_Fields.LATEST_CHANGE, new org.apache.thrift.meta_data.FieldMetaData("latestChange", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.diff.Change.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(NoticeHeader.class, metaDataMap);
  }

  public NoticeHeader() {
  }

  public NoticeHeader(
    String id,
    NoticeIcon icon,
    String descrip)
  {
    this();
    this.id = id;
    this.icon = icon;
    this.descrip = descrip;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public NoticeHeader(NoticeHeader other) {
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetIcon()) {
      this.icon = new NoticeIcon(other.icon);
    }
    if (other.isSetDescrip()) {
      this.descrip = other.descrip;
    }
    if (other.isSetDescripWrapper()) {
      this.descripWrapper = new com.parsable.thrift.v1.reference.StringWrapper(other.descripWrapper);
    }
    if (other.isSetDescriptionDiff()) {
      this.descriptionDiff = new com.wi.director.thrift.v1.diff.StringDiff(other.descriptionDiff);
    }
    if (other.isSetIconDiff()) {
      this.iconDiff = new IconDiff(other.iconDiff);
    }
    if (other.isSetLatestChange()) {
      this.latestChange = new com.wi.director.thrift.v1.diff.Change(other.latestChange);
    }
  }

  public NoticeHeader deepCopy() {
    return new NoticeHeader(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.icon = null;
    this.descrip = null;
    this.descripWrapper = null;
    this.descriptionDiff = null;
    this.iconDiff = null;
    this.latestChange = null;
  }

  public String getId() {
    return this.id;
  }

  public NoticeHeader setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public NoticeIcon getIcon() {
    return this.icon;
  }

  public NoticeHeader setIcon(NoticeIcon icon) {
    this.icon = icon;
    return this;
  }

  public void unsetIcon() {
    this.icon = null;
  }

  /** Returns true if field icon is set (has been assigned a value) and false otherwise */
  public boolean isSetIcon() {
    return this.icon != null;
  }

  public void setIconIsSet(boolean value) {
    if (!value) {
      this.icon = null;
    }
  }

  public String getDescrip() {
    return this.descrip;
  }

  public NoticeHeader setDescrip(String descrip) {
    this.descrip = descrip;
    return this;
  }

  public void unsetDescrip() {
    this.descrip = null;
  }

  /** Returns true if field descrip is set (has been assigned a value) and false otherwise */
  public boolean isSetDescrip() {
    return this.descrip != null;
  }

  public void setDescripIsSet(boolean value) {
    if (!value) {
      this.descrip = null;
    }
  }

  public com.parsable.thrift.v1.reference.StringWrapper getDescripWrapper() {
    return this.descripWrapper;
  }

  public NoticeHeader setDescripWrapper(com.parsable.thrift.v1.reference.StringWrapper descripWrapper) {
    this.descripWrapper = descripWrapper;
    return this;
  }

  public void unsetDescripWrapper() {
    this.descripWrapper = null;
  }

  /** Returns true if field descripWrapper is set (has been assigned a value) and false otherwise */
  public boolean isSetDescripWrapper() {
    return this.descripWrapper != null;
  }

  public void setDescripWrapperIsSet(boolean value) {
    if (!value) {
      this.descripWrapper = null;
    }
  }

  public com.wi.director.thrift.v1.diff.StringDiff getDescriptionDiff() {
    return this.descriptionDiff;
  }

  public NoticeHeader setDescriptionDiff(com.wi.director.thrift.v1.diff.StringDiff descriptionDiff) {
    this.descriptionDiff = descriptionDiff;
    return this;
  }

  public void unsetDescriptionDiff() {
    this.descriptionDiff = null;
  }

  /** Returns true if field descriptionDiff is set (has been assigned a value) and false otherwise */
  public boolean isSetDescriptionDiff() {
    return this.descriptionDiff != null;
  }

  public void setDescriptionDiffIsSet(boolean value) {
    if (!value) {
      this.descriptionDiff = null;
    }
  }

  public IconDiff getIconDiff() {
    return this.iconDiff;
  }

  public NoticeHeader setIconDiff(IconDiff iconDiff) {
    this.iconDiff = iconDiff;
    return this;
  }

  public void unsetIconDiff() {
    this.iconDiff = null;
  }

  /** Returns true if field iconDiff is set (has been assigned a value) and false otherwise */
  public boolean isSetIconDiff() {
    return this.iconDiff != null;
  }

  public void setIconDiffIsSet(boolean value) {
    if (!value) {
      this.iconDiff = null;
    }
  }

  public com.wi.director.thrift.v1.diff.Change getLatestChange() {
    return this.latestChange;
  }

  public NoticeHeader setLatestChange(com.wi.director.thrift.v1.diff.Change latestChange) {
    this.latestChange = latestChange;
    return this;
  }

  public void unsetLatestChange() {
    this.latestChange = null;
  }

  /** Returns true if field latestChange is set (has been assigned a value) and false otherwise */
  public boolean isSetLatestChange() {
    return this.latestChange != null;
  }

  public void setLatestChangeIsSet(boolean value) {
    if (!value) {
      this.latestChange = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case ICON:
      if (value == null) {
        unsetIcon();
      } else {
        setIcon((NoticeIcon)value);
      }
      break;

    case DESCRIP:
      if (value == null) {
        unsetDescrip();
      } else {
        setDescrip((String)value);
      }
      break;

    case DESCRIP_WRAPPER:
      if (value == null) {
        unsetDescripWrapper();
      } else {
        setDescripWrapper((com.parsable.thrift.v1.reference.StringWrapper)value);
      }
      break;

    case DESCRIPTION_DIFF:
      if (value == null) {
        unsetDescriptionDiff();
      } else {
        setDescriptionDiff((com.wi.director.thrift.v1.diff.StringDiff)value);
      }
      break;

    case ICON_DIFF:
      if (value == null) {
        unsetIconDiff();
      } else {
        setIconDiff((IconDiff)value);
      }
      break;

    case LATEST_CHANGE:
      if (value == null) {
        unsetLatestChange();
      } else {
        setLatestChange((com.wi.director.thrift.v1.diff.Change)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case ICON:
      return getIcon();

    case DESCRIP:
      return getDescrip();

    case DESCRIP_WRAPPER:
      return getDescripWrapper();

    case DESCRIPTION_DIFF:
      return getDescriptionDiff();

    case ICON_DIFF:
      return getIconDiff();

    case LATEST_CHANGE:
      return getLatestChange();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case ICON:
      return isSetIcon();
    case DESCRIP:
      return isSetDescrip();
    case DESCRIP_WRAPPER:
      return isSetDescripWrapper();
    case DESCRIPTION_DIFF:
      return isSetDescriptionDiff();
    case ICON_DIFF:
      return isSetIconDiff();
    case LATEST_CHANGE:
      return isSetLatestChange();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof NoticeHeader)
      return this.equals((NoticeHeader)that);
    return false;
  }

  public boolean equals(NoticeHeader that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_icon = true && this.isSetIcon();
    boolean that_present_icon = true && that.isSetIcon();
    if (this_present_icon || that_present_icon) {
      if (!(this_present_icon && that_present_icon))
        return false;
      if (!this.icon.equals(that.icon))
        return false;
    }

    boolean this_present_descrip = true && this.isSetDescrip();
    boolean that_present_descrip = true && that.isSetDescrip();
    if (this_present_descrip || that_present_descrip) {
      if (!(this_present_descrip && that_present_descrip))
        return false;
      if (!this.descrip.equals(that.descrip))
        return false;
    }

    boolean this_present_descripWrapper = true && this.isSetDescripWrapper();
    boolean that_present_descripWrapper = true && that.isSetDescripWrapper();
    if (this_present_descripWrapper || that_present_descripWrapper) {
      if (!(this_present_descripWrapper && that_present_descripWrapper))
        return false;
      if (!this.descripWrapper.equals(that.descripWrapper))
        return false;
    }

    boolean this_present_descriptionDiff = true && this.isSetDescriptionDiff();
    boolean that_present_descriptionDiff = true && that.isSetDescriptionDiff();
    if (this_present_descriptionDiff || that_present_descriptionDiff) {
      if (!(this_present_descriptionDiff && that_present_descriptionDiff))
        return false;
      if (!this.descriptionDiff.equals(that.descriptionDiff))
        return false;
    }

    boolean this_present_iconDiff = true && this.isSetIconDiff();
    boolean that_present_iconDiff = true && that.isSetIconDiff();
    if (this_present_iconDiff || that_present_iconDiff) {
      if (!(this_present_iconDiff && that_present_iconDiff))
        return false;
      if (!this.iconDiff.equals(that.iconDiff))
        return false;
    }

    boolean this_present_latestChange = true && this.isSetLatestChange();
    boolean that_present_latestChange = true && that.isSetLatestChange();
    if (this_present_latestChange || that_present_latestChange) {
      if (!(this_present_latestChange && that_present_latestChange))
        return false;
      if (!this.latestChange.equals(that.latestChange))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_icon = true && (isSetIcon());
    list.add(present_icon);
    if (present_icon)
      list.add(icon);

    boolean present_descrip = true && (isSetDescrip());
    list.add(present_descrip);
    if (present_descrip)
      list.add(descrip);

    boolean present_descripWrapper = true && (isSetDescripWrapper());
    list.add(present_descripWrapper);
    if (present_descripWrapper)
      list.add(descripWrapper);

    boolean present_descriptionDiff = true && (isSetDescriptionDiff());
    list.add(present_descriptionDiff);
    if (present_descriptionDiff)
      list.add(descriptionDiff);

    boolean present_iconDiff = true && (isSetIconDiff());
    list.add(present_iconDiff);
    if (present_iconDiff)
      list.add(iconDiff);

    boolean present_latestChange = true && (isSetLatestChange());
    list.add(present_latestChange);
    if (present_latestChange)
      list.add(latestChange);

    return list.hashCode();
  }

  @Override
  public int compareTo(NoticeHeader other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIcon()).compareTo(other.isSetIcon());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIcon()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.icon, other.icon);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescrip()).compareTo(other.isSetDescrip());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescrip()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.descrip, other.descrip);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescripWrapper()).compareTo(other.isSetDescripWrapper());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescripWrapper()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.descripWrapper, other.descripWrapper);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescriptionDiff()).compareTo(other.isSetDescriptionDiff());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescriptionDiff()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.descriptionDiff, other.descriptionDiff);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIconDiff()).compareTo(other.isSetIconDiff());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIconDiff()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iconDiff, other.iconDiff);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLatestChange()).compareTo(other.isSetLatestChange());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLatestChange()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.latestChange, other.latestChange);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("NoticeHeader(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("icon:");
    if (this.icon == null) {
      sb.append("null");
    } else {
      sb.append(this.icon);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("descrip:");
    if (this.descrip == null) {
      sb.append("null");
    } else {
      sb.append(this.descrip);
    }
    first = false;
    if (isSetDescripWrapper()) {
      if (!first) sb.append(", ");
      sb.append("descripWrapper:");
      if (this.descripWrapper == null) {
        sb.append("null");
      } else {
        sb.append(this.descripWrapper);
      }
      first = false;
    }
    if (isSetDescriptionDiff()) {
      if (!first) sb.append(", ");
      sb.append("descriptionDiff:");
      if (this.descriptionDiff == null) {
        sb.append("null");
      } else {
        sb.append(this.descriptionDiff);
      }
      first = false;
    }
    if (isSetIconDiff()) {
      if (!first) sb.append(", ");
      sb.append("iconDiff:");
      if (this.iconDiff == null) {
        sb.append("null");
      } else {
        sb.append(this.iconDiff);
      }
      first = false;
    }
    if (isSetLatestChange()) {
      if (!first) sb.append(", ");
      sb.append("latestChange:");
      if (this.latestChange == null) {
        sb.append("null");
      } else {
        sb.append(this.latestChange);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (icon != null) {
      icon.validate();
    }
    if (descripWrapper != null) {
      descripWrapper.validate();
    }
    if (descriptionDiff != null) {
      descriptionDiff.validate();
    }
    if (iconDiff != null) {
      iconDiff.validate();
    }
    if (latestChange != null) {
      latestChange.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class NoticeHeaderStandardSchemeFactory implements SchemeFactory {
    public NoticeHeaderStandardScheme getScheme() {
      return new NoticeHeaderStandardScheme();
    }
  }

  private static class NoticeHeaderStandardScheme extends StandardScheme<NoticeHeader> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, NoticeHeader struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ICON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.icon = new NoticeIcon();
              struct.icon.read(iprot);
              struct.setIconIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DESCRIP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.descrip = iprot.readString();
              struct.setDescripIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DESCRIP_WRAPPER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.descripWrapper = new com.parsable.thrift.v1.reference.StringWrapper();
              struct.descripWrapper.read(iprot);
              struct.setDescripWrapperIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 100: // DESCRIPTION_DIFF
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.descriptionDiff = new com.wi.director.thrift.v1.diff.StringDiff();
              struct.descriptionDiff.read(iprot);
              struct.setDescriptionDiffIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 101: // ICON_DIFF
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.iconDiff = new IconDiff();
              struct.iconDiff.read(iprot);
              struct.setIconDiffIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 200: // LATEST_CHANGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.latestChange = new com.wi.director.thrift.v1.diff.Change();
              struct.latestChange.read(iprot);
              struct.setLatestChangeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, NoticeHeader struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.icon != null) {
        oprot.writeFieldBegin(ICON_FIELD_DESC);
        struct.icon.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.descrip != null) {
        oprot.writeFieldBegin(DESCRIP_FIELD_DESC);
        oprot.writeString(struct.descrip);
        oprot.writeFieldEnd();
      }
      if (struct.descripWrapper != null) {
        if (struct.isSetDescripWrapper()) {
          oprot.writeFieldBegin(DESCRIP_WRAPPER_FIELD_DESC);
          struct.descripWrapper.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.descriptionDiff != null) {
        if (struct.isSetDescriptionDiff()) {
          oprot.writeFieldBegin(DESCRIPTION_DIFF_FIELD_DESC);
          struct.descriptionDiff.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.iconDiff != null) {
        if (struct.isSetIconDiff()) {
          oprot.writeFieldBegin(ICON_DIFF_FIELD_DESC);
          struct.iconDiff.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.latestChange != null) {
        if (struct.isSetLatestChange()) {
          oprot.writeFieldBegin(LATEST_CHANGE_FIELD_DESC);
          struct.latestChange.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

}

