/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wi.director.thrift.v1.schedule;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class GetScheduleResult implements org.apache.thrift.TBase<GetScheduleResult, GetScheduleResult._Fields>, java.io.Serializable, Cloneable, Comparable<GetScheduleResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetScheduleResult");

  private static final org.apache.thrift.protocol.TField SCHEDULE_FIELD_DESC = new org.apache.thrift.protocol.TField("schedule", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField LOGS_FIELD_DESC = new org.apache.thrift.protocol.TField("logs", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField NEXT_SCHEDULED_RUNS_FIELD_DESC = new org.apache.thrift.protocol.TField("nextScheduledRuns", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GetScheduleResultStandardSchemeFactory());
  }

  public Schedule schedule; // required
  public List<ScheduleLog> logs; // optional
  public List<String> nextScheduledRuns; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SCHEDULE((short)1, "schedule"),
    LOGS((short)2, "logs"),
    NEXT_SCHEDULED_RUNS((short)3, "nextScheduledRuns");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SCHEDULE
          return SCHEDULE;
        case 2: // LOGS
          return LOGS;
        case 3: // NEXT_SCHEDULED_RUNS
          return NEXT_SCHEDULED_RUNS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.LOGS,_Fields.NEXT_SCHEDULED_RUNS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SCHEDULE, new org.apache.thrift.meta_data.FieldMetaData("schedule", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Schedule.class)));
    tmpMap.put(_Fields.LOGS, new org.apache.thrift.meta_data.FieldMetaData("logs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ScheduleLog.class))));
    tmpMap.put(_Fields.NEXT_SCHEDULED_RUNS, new org.apache.thrift.meta_data.FieldMetaData("nextScheduledRuns", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetScheduleResult.class, metaDataMap);
  }

  public GetScheduleResult() {
  }

  public GetScheduleResult(
    Schedule schedule)
  {
    this();
    this.schedule = schedule;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GetScheduleResult(GetScheduleResult other) {
    if (other.isSetSchedule()) {
      this.schedule = new Schedule(other.schedule);
    }
    if (other.isSetLogs()) {
      List<ScheduleLog> __this__logs = new ArrayList<ScheduleLog>(other.logs.size());
      for (ScheduleLog other_element : other.logs) {
        __this__logs.add(new ScheduleLog(other_element));
      }
      this.logs = __this__logs;
    }
    if (other.isSetNextScheduledRuns()) {
      List<String> __this__nextScheduledRuns = new ArrayList<String>(other.nextScheduledRuns);
      this.nextScheduledRuns = __this__nextScheduledRuns;
    }
  }

  public GetScheduleResult deepCopy() {
    return new GetScheduleResult(this);
  }

  @Override
  public void clear() {
    this.schedule = null;
    this.logs = null;
    this.nextScheduledRuns = null;
  }

  public Schedule getSchedule() {
    return this.schedule;
  }

  public GetScheduleResult setSchedule(Schedule schedule) {
    this.schedule = schedule;
    return this;
  }

  public void unsetSchedule() {
    this.schedule = null;
  }

  /** Returns true if field schedule is set (has been assigned a value) and false otherwise */
  public boolean isSetSchedule() {
    return this.schedule != null;
  }

  public void setScheduleIsSet(boolean value) {
    if (!value) {
      this.schedule = null;
    }
  }

  public int getLogsSize() {
    return (this.logs == null) ? 0 : this.logs.size();
  }

  public java.util.Iterator<ScheduleLog> getLogsIterator() {
    return (this.logs == null) ? null : this.logs.iterator();
  }

  public void addToLogs(ScheduleLog elem) {
    if (this.logs == null) {
      this.logs = new ArrayList<ScheduleLog>();
    }
    this.logs.add(elem);
  }

  public List<ScheduleLog> getLogs() {
    return this.logs;
  }

  public GetScheduleResult setLogs(List<ScheduleLog> logs) {
    this.logs = logs;
    return this;
  }

  public void unsetLogs() {
    this.logs = null;
  }

  /** Returns true if field logs is set (has been assigned a value) and false otherwise */
  public boolean isSetLogs() {
    return this.logs != null;
  }

  public void setLogsIsSet(boolean value) {
    if (!value) {
      this.logs = null;
    }
  }

  public int getNextScheduledRunsSize() {
    return (this.nextScheduledRuns == null) ? 0 : this.nextScheduledRuns.size();
  }

  public java.util.Iterator<String> getNextScheduledRunsIterator() {
    return (this.nextScheduledRuns == null) ? null : this.nextScheduledRuns.iterator();
  }

  public void addToNextScheduledRuns(String elem) {
    if (this.nextScheduledRuns == null) {
      this.nextScheduledRuns = new ArrayList<String>();
    }
    this.nextScheduledRuns.add(elem);
  }

  public List<String> getNextScheduledRuns() {
    return this.nextScheduledRuns;
  }

  public GetScheduleResult setNextScheduledRuns(List<String> nextScheduledRuns) {
    this.nextScheduledRuns = nextScheduledRuns;
    return this;
  }

  public void unsetNextScheduledRuns() {
    this.nextScheduledRuns = null;
  }

  /** Returns true if field nextScheduledRuns is set (has been assigned a value) and false otherwise */
  public boolean isSetNextScheduledRuns() {
    return this.nextScheduledRuns != null;
  }

  public void setNextScheduledRunsIsSet(boolean value) {
    if (!value) {
      this.nextScheduledRuns = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SCHEDULE:
      if (value == null) {
        unsetSchedule();
      } else {
        setSchedule((Schedule)value);
      }
      break;

    case LOGS:
      if (value == null) {
        unsetLogs();
      } else {
        setLogs((List<ScheduleLog>)value);
      }
      break;

    case NEXT_SCHEDULED_RUNS:
      if (value == null) {
        unsetNextScheduledRuns();
      } else {
        setNextScheduledRuns((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SCHEDULE:
      return getSchedule();

    case LOGS:
      return getLogs();

    case NEXT_SCHEDULED_RUNS:
      return getNextScheduledRuns();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SCHEDULE:
      return isSetSchedule();
    case LOGS:
      return isSetLogs();
    case NEXT_SCHEDULED_RUNS:
      return isSetNextScheduledRuns();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GetScheduleResult)
      return this.equals((GetScheduleResult)that);
    return false;
  }

  public boolean equals(GetScheduleResult that) {
    if (that == null)
      return false;

    boolean this_present_schedule = true && this.isSetSchedule();
    boolean that_present_schedule = true && that.isSetSchedule();
    if (this_present_schedule || that_present_schedule) {
      if (!(this_present_schedule && that_present_schedule))
        return false;
      if (!this.schedule.equals(that.schedule))
        return false;
    }

    boolean this_present_logs = true && this.isSetLogs();
    boolean that_present_logs = true && that.isSetLogs();
    if (this_present_logs || that_present_logs) {
      if (!(this_present_logs && that_present_logs))
        return false;
      if (!this.logs.equals(that.logs))
        return false;
    }

    boolean this_present_nextScheduledRuns = true && this.isSetNextScheduledRuns();
    boolean that_present_nextScheduledRuns = true && that.isSetNextScheduledRuns();
    if (this_present_nextScheduledRuns || that_present_nextScheduledRuns) {
      if (!(this_present_nextScheduledRuns && that_present_nextScheduledRuns))
        return false;
      if (!this.nextScheduledRuns.equals(that.nextScheduledRuns))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_schedule = true && (isSetSchedule());
    list.add(present_schedule);
    if (present_schedule)
      list.add(schedule);

    boolean present_logs = true && (isSetLogs());
    list.add(present_logs);
    if (present_logs)
      list.add(logs);

    boolean present_nextScheduledRuns = true && (isSetNextScheduledRuns());
    list.add(present_nextScheduledRuns);
    if (present_nextScheduledRuns)
      list.add(nextScheduledRuns);

    return list.hashCode();
  }

  @Override
  public int compareTo(GetScheduleResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSchedule()).compareTo(other.isSetSchedule());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSchedule()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schedule, other.schedule);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLogs()).compareTo(other.isSetLogs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLogs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logs, other.logs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNextScheduledRuns()).compareTo(other.isSetNextScheduledRuns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNextScheduledRuns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nextScheduledRuns, other.nextScheduledRuns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GetScheduleResult(");
    boolean first = true;

    sb.append("schedule:");
    if (this.schedule == null) {
      sb.append("null");
    } else {
      sb.append(this.schedule);
    }
    first = false;
    if (isSetLogs()) {
      if (!first) sb.append(", ");
      sb.append("logs:");
      if (this.logs == null) {
        sb.append("null");
      } else {
        sb.append(this.logs);
      }
      first = false;
    }
    if (isSetNextScheduledRuns()) {
      if (!first) sb.append(", ");
      sb.append("nextScheduledRuns:");
      if (this.nextScheduledRuns == null) {
        sb.append("null");
      } else {
        sb.append(this.nextScheduledRuns);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (schedule != null) {
      schedule.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GetScheduleResultStandardSchemeFactory implements SchemeFactory {
    public GetScheduleResultStandardScheme getScheme() {
      return new GetScheduleResultStandardScheme();
    }
  }

  private static class GetScheduleResultStandardScheme extends StandardScheme<GetScheduleResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GetScheduleResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SCHEDULE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.schedule = new Schedule();
              struct.schedule.read(iprot);
              struct.setScheduleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LOGS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list12 = iprot.readListBegin();
                struct.logs = new ArrayList<ScheduleLog>(_list12.size);
                ScheduleLog _elem13;
                for (int _i14 = 0; _i14 < _list12.size; ++_i14)
                {
                  _elem13 = new ScheduleLog();
                  _elem13.read(iprot);
                  struct.logs.add(_elem13);
                }
                iprot.readListEnd();
              }
              struct.setLogsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NEXT_SCHEDULED_RUNS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list15 = iprot.readListBegin();
                struct.nextScheduledRuns = new ArrayList<String>(_list15.size);
                String _elem16;
                for (int _i17 = 0; _i17 < _list15.size; ++_i17)
                {
                  _elem16 = iprot.readString();
                  struct.nextScheduledRuns.add(_elem16);
                }
                iprot.readListEnd();
              }
              struct.setNextScheduledRunsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GetScheduleResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.schedule != null) {
        oprot.writeFieldBegin(SCHEDULE_FIELD_DESC);
        struct.schedule.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.logs != null) {
        if (struct.isSetLogs()) {
          oprot.writeFieldBegin(LOGS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.logs.size()));
            for (ScheduleLog _iter18 : struct.logs)
            {
              _iter18.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.nextScheduledRuns != null) {
        if (struct.isSetNextScheduledRuns()) {
          oprot.writeFieldBegin(NEXT_SCHEDULED_RUNS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.nextScheduledRuns.size()));
            for (String _iter19 : struct.nextScheduledRuns)
            {
              oprot.writeString(_iter19);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

}

