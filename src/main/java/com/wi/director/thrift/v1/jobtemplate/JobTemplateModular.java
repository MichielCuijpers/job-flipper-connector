/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wi.director.thrift.v1.jobtemplate;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class JobTemplateModular implements org.apache.thrift.TBase<JobTemplateModular, JobTemplateModular._Fields>, java.io.Serializable, Cloneable, Comparable<JobTemplateModular> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("JobTemplateModular");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField INTERNAL_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("internalVersion", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField PUBLIC_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("publicVersion", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField DESCRIP_FIELD_DESC = new org.apache.thrift.protocol.TField("descrip", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField STEP_GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("stepGroupId", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField TEAM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("teamId", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField UNSUPPORTEDDOCUMENT_EMAIL_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("UNSUPPORTEDdocumentEmailAddress", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField LAST_AUTHORED_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("lastAuthoredAt", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField PUBLISHED_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("publishedAt", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField ARCHIVED_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("archivedAt", org.apache.thrift.protocol.TType.I64, (short)13);
  private static final org.apache.thrift.protocol.TField LAST_AUTHOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lastAuthorId", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField SYSTEM_FIELD_DESC = new org.apache.thrift.protocol.TField("system", org.apache.thrift.protocol.TType.BOOL, (short)15);
  private static final org.apache.thrift.protocol.TField METADATA_ENTRY_FIELD_DESC = new org.apache.thrift.protocol.TField("metadataEntry", org.apache.thrift.protocol.TType.LIST, (short)16);
  private static final org.apache.thrift.protocol.TField METADATA_BY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("metadataById", org.apache.thrift.protocol.TType.MAP, (short)17);
  private static final org.apache.thrift.protocol.TField PUBLISHED_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("publishedVersion", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField TYP_FIELD_DESC = new org.apache.thrift.protocol.TField("typ", org.apache.thrift.protocol.TType.I32, (short)19);
  private static final org.apache.thrift.protocol.TField LOCKED_FIELD_DESC = new org.apache.thrift.protocol.TField("locked", org.apache.thrift.protocol.TType.STRUCT, (short)20);
  private static final org.apache.thrift.protocol.TField TEAM_FIELD_DESC = new org.apache.thrift.protocol.TField("team", org.apache.thrift.protocol.TType.STRUCT, (short)101);
  private static final org.apache.thrift.protocol.TField ROOT_HEADERS_FIELD_DESC = new org.apache.thrift.protocol.TField("rootHeaders", org.apache.thrift.protocol.TType.STRUCT, (short)102);
  private static final org.apache.thrift.protocol.TField STEP_GROUP_FIELD_DESC = new org.apache.thrift.protocol.TField("stepGroup", org.apache.thrift.protocol.TType.STRUCT, (short)103);
  private static final org.apache.thrift.protocol.TField DOCUMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("documents", org.apache.thrift.protocol.TType.LIST, (short)104);
  private static final org.apache.thrift.protocol.TField LAST_PUBLISHED_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("lastPublishedAt", org.apache.thrift.protocol.TType.I64, (short)105);
  private static final org.apache.thrift.protocol.TField LAST_AUTHOR_FIELD_DESC = new org.apache.thrift.protocol.TField("lastAuthor", org.apache.thrift.protocol.TType.STRUCT, (short)106);
  private static final org.apache.thrift.protocol.TField STATS_FIELD_DESC = new org.apache.thrift.protocol.TField("stats", org.apache.thrift.protocol.TType.STRUCT, (short)107);
  private static final org.apache.thrift.protocol.TField TEMPLATE_TAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("templateTags", org.apache.thrift.protocol.TType.LIST, (short)108);
  private static final org.apache.thrift.protocol.TField DRAFTS_FIELD_DESC = new org.apache.thrift.protocol.TField("drafts", org.apache.thrift.protocol.TType.LIST, (short)109);
  private static final org.apache.thrift.protocol.TField LAST_PUBLISHED_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("lastPublishedVersion", org.apache.thrift.protocol.TType.I32, (short)110);
  private static final org.apache.thrift.protocol.TField LAST_PUBLISH_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("lastPublishTime", org.apache.thrift.protocol.TType.I64, (short)111);
  private static final org.apache.thrift.protocol.TField LAST_MODIFIED_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("lastModifiedAt", org.apache.thrift.protocol.TType.I64, (short)112);
  private static final org.apache.thrift.protocol.TField ATTRIBUTES_FIELD_DESC = new org.apache.thrift.protocol.TField("attributes", org.apache.thrift.protocol.TType.LIST, (short)113);
  private static final org.apache.thrift.protocol.TField REFERENCES_FIELD_DESC = new org.apache.thrift.protocol.TField("references", org.apache.thrift.protocol.TType.MAP, (short)115);
  private static final org.apache.thrift.protocol.TField PLANNED_DATA_SHEET_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("plannedDataSheetIds", org.apache.thrift.protocol.TType.MAP, (short)120);
  private static final org.apache.thrift.protocol.TField SNAPSHOTTED_DATA_SHEET_VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("snapshottedDataSheetValues", org.apache.thrift.protocol.TType.MAP, (short)121);
  private static final org.apache.thrift.protocol.TField STRUCT_DIFF_FIELD_DESC = new org.apache.thrift.protocol.TField("structDiff", org.apache.thrift.protocol.TType.I32, (short)200);
  private static final org.apache.thrift.protocol.TField TITLE_DIFF_FIELD_DESC = new org.apache.thrift.protocol.TField("titleDiff", org.apache.thrift.protocol.TType.STRUCT, (short)201);
  private static final org.apache.thrift.protocol.TField DESCRIP_DIFF_FIELD_DESC = new org.apache.thrift.protocol.TField("descripDiff", org.apache.thrift.protocol.TType.STRUCT, (short)202);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new JobTemplateModularStandardSchemeFactory());
  }

  public String id; // required
  /**
   * See <code>version</code> in <a href="#Struct_JobTemplate">JobTemplate</a>
   */
  public int internalVersion; // required
  /**
   * See <code>publicVersion</code> in <a href="#Struct_JobTemplate">JobTemplate</a>
   */
  public int publicVersion; // required
  public String title; // required
  public String descrip; // required
  /**
   * 
   * @see JobTemplateStatus
   */
  public JobTemplateStatus status; // required
  public String stepGroupId; // required
  public String teamId; // required
  /**
   * UNSUPPORTED Email address for this particular job template
   */
  public String UNSUPPORTEDdocumentEmailAddress; // required
  public long lastAuthoredAt; // required
  public long publishedAt; // required
  public long archivedAt; // required
  public String lastAuthorId; // required
  public boolean system; // required
  public List<com.wi.director.thrift.v1.metadata.MetadataEntry> metadataEntry; // required
  public Map<String,com.wi.director.thrift.v1.metadata.MetadataEntry> metadataById; // required
  /**
   * See <code>publishedVersion</code> in <a href="#Struct_JobTemplate">JobTemplate</a>
   */
  public int publishedVersion; // required
  /**
   * 
   * @see TemplateType
   */
  public TemplateType typ; // required
  /**
   * Internal authoring lock
   */
  public JobTemplateLock locked; // optional
  public com.wi.director.thrift.v1.team.TeamModular team; // optional
  public com.wi.director.thrift.v1.group_headers.StepGroupHeaders rootHeaders; // optional
  public com.wi.director.thrift.v1.step.BaseStep stepGroup; // optional
  public List<com.wi.director.thrift.v1.document.Document> documents; // optional
  /**
   * DEPRECATED Bumps up on Create/Publish/InReview/Reject, 0 if no such event has occurred. Note that this field is wrongly named.
   */
  public long lastPublishedAt; // optional
  public com.wi.director.thrift.v1.user.User lastAuthor; // optional
  public JobTemplateStats stats; // optional
  public List<TemplateTag> templateTags; // optional
  public List<TemplateDraft> drafts; // optional
  /**
   * last published version for this template. 0 if not published
   */
  public int lastPublishedVersion; // optional
  /**
   * Bumps up on Publish, 0 if never pubished. (fixed version of lastPublishedAt)
   */
  public long lastPublishTime; // optional
  /**
   * Bumps up on edit, status change, archive
   */
  public long lastModifiedAt; // optional
  public List<com.wi.director.thrift.v1.abac.AbacAttribute> attributes; // optional
  public Map<com.parsable.thrift.v1.reference.RefSource,Set<String>> references; // optional
  /**
   * Map of data sheet set id -> data sheet id picked during job planning
   * This is only valid if the data sheet set ids are contained in <code>references</code> above
   */
  public Map<String,String> plannedDataSheetIds; // optional
  /**
   * Map of data sheet set definition id -> data sheet value snapshotted at/after job start
   * This is only valid if the data sheet set definition ids are contained in <code>references</code> above
   */
  public Map<String,com.wi.director.thrift.v1.datasheet.DataSheetValue> snapshottedDataSheetValues; // optional
  /**
   * 
   * @see com.wi.director.thrift.v1.diff.ChangeType
   */
  public com.wi.director.thrift.v1.diff.ChangeType structDiff; // optional
  public com.wi.director.thrift.v1.diff.StringDiff titleDiff; // optional
  public com.wi.director.thrift.v1.diff.StringDiff descripDiff; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    /**
     * See <code>version</code> in <a href="#Struct_JobTemplate">JobTemplate</a>
     */
    INTERNAL_VERSION((short)2, "internalVersion"),
    /**
     * See <code>publicVersion</code> in <a href="#Struct_JobTemplate">JobTemplate</a>
     */
    PUBLIC_VERSION((short)3, "publicVersion"),
    TITLE((short)4, "title"),
    DESCRIP((short)5, "descrip"),
    /**
     * 
     * @see JobTemplateStatus
     */
    STATUS((short)6, "status"),
    STEP_GROUP_ID((short)7, "stepGroupId"),
    TEAM_ID((short)8, "teamId"),
    /**
     * UNSUPPORTED Email address for this particular job template
     */
    UNSUPPORTEDDOCUMENT_EMAIL_ADDRESS((short)9, "UNSUPPORTEDdocumentEmailAddress"),
    LAST_AUTHORED_AT((short)10, "lastAuthoredAt"),
    PUBLISHED_AT((short)11, "publishedAt"),
    ARCHIVED_AT((short)13, "archivedAt"),
    LAST_AUTHOR_ID((short)14, "lastAuthorId"),
    SYSTEM((short)15, "system"),
    METADATA_ENTRY((short)16, "metadataEntry"),
    METADATA_BY_ID((short)17, "metadataById"),
    /**
     * See <code>publishedVersion</code> in <a href="#Struct_JobTemplate">JobTemplate</a>
     */
    PUBLISHED_VERSION((short)18, "publishedVersion"),
    /**
     * 
     * @see TemplateType
     */
    TYP((short)19, "typ"),
    /**
     * Internal authoring lock
     */
    LOCKED((short)20, "locked"),
    TEAM((short)101, "team"),
    ROOT_HEADERS((short)102, "rootHeaders"),
    STEP_GROUP((short)103, "stepGroup"),
    DOCUMENTS((short)104, "documents"),
    /**
     * DEPRECATED Bumps up on Create/Publish/InReview/Reject, 0 if no such event has occurred. Note that this field is wrongly named.
     */
    LAST_PUBLISHED_AT((short)105, "lastPublishedAt"),
    LAST_AUTHOR((short)106, "lastAuthor"),
    STATS((short)107, "stats"),
    TEMPLATE_TAGS((short)108, "templateTags"),
    DRAFTS((short)109, "drafts"),
    /**
     * last published version for this template. 0 if not published
     */
    LAST_PUBLISHED_VERSION((short)110, "lastPublishedVersion"),
    /**
     * Bumps up on Publish, 0 if never pubished. (fixed version of lastPublishedAt)
     */
    LAST_PUBLISH_TIME((short)111, "lastPublishTime"),
    /**
     * Bumps up on edit, status change, archive
     */
    LAST_MODIFIED_AT((short)112, "lastModifiedAt"),
    ATTRIBUTES((short)113, "attributes"),
    REFERENCES((short)115, "references"),
    /**
     * Map of data sheet set id -> data sheet id picked during job planning
     * This is only valid if the data sheet set ids are contained in <code>references</code> above
     */
    PLANNED_DATA_SHEET_IDS((short)120, "plannedDataSheetIds"),
    /**
     * Map of data sheet set definition id -> data sheet value snapshotted at/after job start
     * This is only valid if the data sheet set definition ids are contained in <code>references</code> above
     */
    SNAPSHOTTED_DATA_SHEET_VALUES((short)121, "snapshottedDataSheetValues"),
    /**
     * 
     * @see com.wi.director.thrift.v1.diff.ChangeType
     */
    STRUCT_DIFF((short)200, "structDiff"),
    TITLE_DIFF((short)201, "titleDiff"),
    DESCRIP_DIFF((short)202, "descripDiff");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // INTERNAL_VERSION
          return INTERNAL_VERSION;
        case 3: // PUBLIC_VERSION
          return PUBLIC_VERSION;
        case 4: // TITLE
          return TITLE;
        case 5: // DESCRIP
          return DESCRIP;
        case 6: // STATUS
          return STATUS;
        case 7: // STEP_GROUP_ID
          return STEP_GROUP_ID;
        case 8: // TEAM_ID
          return TEAM_ID;
        case 9: // UNSUPPORTEDDOCUMENT_EMAIL_ADDRESS
          return UNSUPPORTEDDOCUMENT_EMAIL_ADDRESS;
        case 10: // LAST_AUTHORED_AT
          return LAST_AUTHORED_AT;
        case 11: // PUBLISHED_AT
          return PUBLISHED_AT;
        case 13: // ARCHIVED_AT
          return ARCHIVED_AT;
        case 14: // LAST_AUTHOR_ID
          return LAST_AUTHOR_ID;
        case 15: // SYSTEM
          return SYSTEM;
        case 16: // METADATA_ENTRY
          return METADATA_ENTRY;
        case 17: // METADATA_BY_ID
          return METADATA_BY_ID;
        case 18: // PUBLISHED_VERSION
          return PUBLISHED_VERSION;
        case 19: // TYP
          return TYP;
        case 20: // LOCKED
          return LOCKED;
        case 101: // TEAM
          return TEAM;
        case 102: // ROOT_HEADERS
          return ROOT_HEADERS;
        case 103: // STEP_GROUP
          return STEP_GROUP;
        case 104: // DOCUMENTS
          return DOCUMENTS;
        case 105: // LAST_PUBLISHED_AT
          return LAST_PUBLISHED_AT;
        case 106: // LAST_AUTHOR
          return LAST_AUTHOR;
        case 107: // STATS
          return STATS;
        case 108: // TEMPLATE_TAGS
          return TEMPLATE_TAGS;
        case 109: // DRAFTS
          return DRAFTS;
        case 110: // LAST_PUBLISHED_VERSION
          return LAST_PUBLISHED_VERSION;
        case 111: // LAST_PUBLISH_TIME
          return LAST_PUBLISH_TIME;
        case 112: // LAST_MODIFIED_AT
          return LAST_MODIFIED_AT;
        case 113: // ATTRIBUTES
          return ATTRIBUTES;
        case 115: // REFERENCES
          return REFERENCES;
        case 120: // PLANNED_DATA_SHEET_IDS
          return PLANNED_DATA_SHEET_IDS;
        case 121: // SNAPSHOTTED_DATA_SHEET_VALUES
          return SNAPSHOTTED_DATA_SHEET_VALUES;
        case 200: // STRUCT_DIFF
          return STRUCT_DIFF;
        case 201: // TITLE_DIFF
          return TITLE_DIFF;
        case 202: // DESCRIP_DIFF
          return DESCRIP_DIFF;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __INTERNALVERSION_ISSET_ID = 0;
  private static final int __PUBLICVERSION_ISSET_ID = 1;
  private static final int __LASTAUTHOREDAT_ISSET_ID = 2;
  private static final int __PUBLISHEDAT_ISSET_ID = 3;
  private static final int __ARCHIVEDAT_ISSET_ID = 4;
  private static final int __SYSTEM_ISSET_ID = 5;
  private static final int __PUBLISHEDVERSION_ISSET_ID = 6;
  private static final int __LASTPUBLISHEDAT_ISSET_ID = 7;
  private static final int __LASTPUBLISHEDVERSION_ISSET_ID = 8;
  private static final int __LASTPUBLISHTIME_ISSET_ID = 9;
  private static final int __LASTMODIFIEDAT_ISSET_ID = 10;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.LOCKED,_Fields.TEAM,_Fields.ROOT_HEADERS,_Fields.STEP_GROUP,_Fields.DOCUMENTS,_Fields.LAST_PUBLISHED_AT,_Fields.LAST_AUTHOR,_Fields.STATS,_Fields.TEMPLATE_TAGS,_Fields.DRAFTS,_Fields.LAST_PUBLISHED_VERSION,_Fields.LAST_PUBLISH_TIME,_Fields.LAST_MODIFIED_AT,_Fields.ATTRIBUTES,_Fields.REFERENCES,_Fields.PLANNED_DATA_SHEET_IDS,_Fields.SNAPSHOTTED_DATA_SHEET_VALUES,_Fields.STRUCT_DIFF,_Fields.TITLE_DIFF,_Fields.DESCRIP_DIFF};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INTERNAL_VERSION, new org.apache.thrift.meta_data.FieldMetaData("internalVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PUBLIC_VERSION, new org.apache.thrift.meta_data.FieldMetaData("publicVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRIP, new org.apache.thrift.meta_data.FieldMetaData("descrip", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, JobTemplateStatus.class)));
    tmpMap.put(_Fields.STEP_GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("stepGroupId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TEAM_ID, new org.apache.thrift.meta_data.FieldMetaData("teamId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UNSUPPORTEDDOCUMENT_EMAIL_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("UNSUPPORTEDdocumentEmailAddress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_AUTHORED_AT, new org.apache.thrift.meta_data.FieldMetaData("lastAuthoredAt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PUBLISHED_AT, new org.apache.thrift.meta_data.FieldMetaData("publishedAt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ARCHIVED_AT, new org.apache.thrift.meta_data.FieldMetaData("archivedAt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LAST_AUTHOR_ID, new org.apache.thrift.meta_data.FieldMetaData("lastAuthorId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SYSTEM, new org.apache.thrift.meta_data.FieldMetaData("system", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.METADATA_ENTRY, new org.apache.thrift.meta_data.FieldMetaData("metadataEntry", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.metadata.MetadataEntry.class))));
    tmpMap.put(_Fields.METADATA_BY_ID, new org.apache.thrift.meta_data.FieldMetaData("metadataById", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.metadata.MetadataEntry.class))));
    tmpMap.put(_Fields.PUBLISHED_VERSION, new org.apache.thrift.meta_data.FieldMetaData("publishedVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TYP, new org.apache.thrift.meta_data.FieldMetaData("typ", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TemplateType.class)));
    tmpMap.put(_Fields.LOCKED, new org.apache.thrift.meta_data.FieldMetaData("locked", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JobTemplateLock.class)));
    tmpMap.put(_Fields.TEAM, new org.apache.thrift.meta_data.FieldMetaData("team", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.team.TeamModular.class)));
    tmpMap.put(_Fields.ROOT_HEADERS, new org.apache.thrift.meta_data.FieldMetaData("rootHeaders", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.group_headers.StepGroupHeaders.class)));
    tmpMap.put(_Fields.STEP_GROUP, new org.apache.thrift.meta_data.FieldMetaData("stepGroup", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.step.BaseStep.class)));
    tmpMap.put(_Fields.DOCUMENTS, new org.apache.thrift.meta_data.FieldMetaData("documents", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.document.Document.class))));
    tmpMap.put(_Fields.LAST_PUBLISHED_AT, new org.apache.thrift.meta_data.FieldMetaData("lastPublishedAt", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LAST_AUTHOR, new org.apache.thrift.meta_data.FieldMetaData("lastAuthor", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.user.User.class)));
    tmpMap.put(_Fields.STATS, new org.apache.thrift.meta_data.FieldMetaData("stats", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JobTemplateStats.class)));
    tmpMap.put(_Fields.TEMPLATE_TAGS, new org.apache.thrift.meta_data.FieldMetaData("templateTags", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TemplateTag.class))));
    tmpMap.put(_Fields.DRAFTS, new org.apache.thrift.meta_data.FieldMetaData("drafts", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TemplateDraft.class))));
    tmpMap.put(_Fields.LAST_PUBLISHED_VERSION, new org.apache.thrift.meta_data.FieldMetaData("lastPublishedVersion", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LAST_PUBLISH_TIME, new org.apache.thrift.meta_data.FieldMetaData("lastPublishTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LAST_MODIFIED_AT, new org.apache.thrift.meta_data.FieldMetaData("lastModifiedAt", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ATTRIBUTES, new org.apache.thrift.meta_data.FieldMetaData("attributes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.abac.AbacAttribute.class))));
    tmpMap.put(_Fields.REFERENCES, new org.apache.thrift.meta_data.FieldMetaData("references", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.parsable.thrift.v1.reference.RefSource.class), 
            new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
    tmpMap.put(_Fields.PLANNED_DATA_SHEET_IDS, new org.apache.thrift.meta_data.FieldMetaData("plannedDataSheetIds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.SNAPSHOTTED_DATA_SHEET_VALUES, new org.apache.thrift.meta_data.FieldMetaData("snapshottedDataSheetValues", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.datasheet.DataSheetValue.class))));
    tmpMap.put(_Fields.STRUCT_DIFF, new org.apache.thrift.meta_data.FieldMetaData("structDiff", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.wi.director.thrift.v1.diff.ChangeType.class)));
    tmpMap.put(_Fields.TITLE_DIFF, new org.apache.thrift.meta_data.FieldMetaData("titleDiff", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.diff.StringDiff.class)));
    tmpMap.put(_Fields.DESCRIP_DIFF, new org.apache.thrift.meta_data.FieldMetaData("descripDiff", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.diff.StringDiff.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(JobTemplateModular.class, metaDataMap);
  }

  public JobTemplateModular() {
  }

  public JobTemplateModular(
    String id,
    int internalVersion,
    int publicVersion,
    String title,
    String descrip,
    JobTemplateStatus status,
    String stepGroupId,
    String teamId,
    String UNSUPPORTEDdocumentEmailAddress,
    long lastAuthoredAt,
    long publishedAt,
    long archivedAt,
    String lastAuthorId,
    boolean system,
    List<com.wi.director.thrift.v1.metadata.MetadataEntry> metadataEntry,
    Map<String,com.wi.director.thrift.v1.metadata.MetadataEntry> metadataById,
    int publishedVersion,
    TemplateType typ)
  {
    this();
    this.id = id;
    this.internalVersion = internalVersion;
    setInternalVersionIsSet(true);
    this.publicVersion = publicVersion;
    setPublicVersionIsSet(true);
    this.title = title;
    this.descrip = descrip;
    this.status = status;
    this.stepGroupId = stepGroupId;
    this.teamId = teamId;
    this.UNSUPPORTEDdocumentEmailAddress = UNSUPPORTEDdocumentEmailAddress;
    this.lastAuthoredAt = lastAuthoredAt;
    setLastAuthoredAtIsSet(true);
    this.publishedAt = publishedAt;
    setPublishedAtIsSet(true);
    this.archivedAt = archivedAt;
    setArchivedAtIsSet(true);
    this.lastAuthorId = lastAuthorId;
    this.system = system;
    setSystemIsSet(true);
    this.metadataEntry = metadataEntry;
    this.metadataById = metadataById;
    this.publishedVersion = publishedVersion;
    setPublishedVersionIsSet(true);
    this.typ = typ;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public JobTemplateModular(JobTemplateModular other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = other.id;
    }
    this.internalVersion = other.internalVersion;
    this.publicVersion = other.publicVersion;
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    if (other.isSetDescrip()) {
      this.descrip = other.descrip;
    }
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    if (other.isSetStepGroupId()) {
      this.stepGroupId = other.stepGroupId;
    }
    if (other.isSetTeamId()) {
      this.teamId = other.teamId;
    }
    if (other.isSetUNSUPPORTEDdocumentEmailAddress()) {
      this.UNSUPPORTEDdocumentEmailAddress = other.UNSUPPORTEDdocumentEmailAddress;
    }
    this.lastAuthoredAt = other.lastAuthoredAt;
    this.publishedAt = other.publishedAt;
    this.archivedAt = other.archivedAt;
    if (other.isSetLastAuthorId()) {
      this.lastAuthorId = other.lastAuthorId;
    }
    this.system = other.system;
    if (other.isSetMetadataEntry()) {
      List<com.wi.director.thrift.v1.metadata.MetadataEntry> __this__metadataEntry = new ArrayList<com.wi.director.thrift.v1.metadata.MetadataEntry>(other.metadataEntry.size());
      for (com.wi.director.thrift.v1.metadata.MetadataEntry other_element : other.metadataEntry) {
        __this__metadataEntry.add(new com.wi.director.thrift.v1.metadata.MetadataEntry(other_element));
      }
      this.metadataEntry = __this__metadataEntry;
    }
    if (other.isSetMetadataById()) {
      Map<String,com.wi.director.thrift.v1.metadata.MetadataEntry> __this__metadataById = new HashMap<String,com.wi.director.thrift.v1.metadata.MetadataEntry>(other.metadataById.size());
      for (Map.Entry<String, com.wi.director.thrift.v1.metadata.MetadataEntry> other_element : other.metadataById.entrySet()) {

        String other_element_key = other_element.getKey();
        com.wi.director.thrift.v1.metadata.MetadataEntry other_element_value = other_element.getValue();

        String __this__metadataById_copy_key = other_element_key;

        com.wi.director.thrift.v1.metadata.MetadataEntry __this__metadataById_copy_value = new com.wi.director.thrift.v1.metadata.MetadataEntry(other_element_value);

        __this__metadataById.put(__this__metadataById_copy_key, __this__metadataById_copy_value);
      }
      this.metadataById = __this__metadataById;
    }
    this.publishedVersion = other.publishedVersion;
    if (other.isSetTyp()) {
      this.typ = other.typ;
    }
    if (other.isSetLocked()) {
      this.locked = new JobTemplateLock(other.locked);
    }
    if (other.isSetTeam()) {
      this.team = new com.wi.director.thrift.v1.team.TeamModular(other.team);
    }
    if (other.isSetRootHeaders()) {
      this.rootHeaders = new com.wi.director.thrift.v1.group_headers.StepGroupHeaders(other.rootHeaders);
    }
    if (other.isSetStepGroup()) {
      this.stepGroup = new com.wi.director.thrift.v1.step.BaseStep(other.stepGroup);
    }
    if (other.isSetDocuments()) {
      List<com.wi.director.thrift.v1.document.Document> __this__documents = new ArrayList<com.wi.director.thrift.v1.document.Document>(other.documents.size());
      for (com.wi.director.thrift.v1.document.Document other_element : other.documents) {
        __this__documents.add(new com.wi.director.thrift.v1.document.Document(other_element));
      }
      this.documents = __this__documents;
    }
    this.lastPublishedAt = other.lastPublishedAt;
    if (other.isSetLastAuthor()) {
      this.lastAuthor = new com.wi.director.thrift.v1.user.User(other.lastAuthor);
    }
    if (other.isSetStats()) {
      this.stats = new JobTemplateStats(other.stats);
    }
    if (other.isSetTemplateTags()) {
      List<TemplateTag> __this__templateTags = new ArrayList<TemplateTag>(other.templateTags.size());
      for (TemplateTag other_element : other.templateTags) {
        __this__templateTags.add(new TemplateTag(other_element));
      }
      this.templateTags = __this__templateTags;
    }
    if (other.isSetDrafts()) {
      List<TemplateDraft> __this__drafts = new ArrayList<TemplateDraft>(other.drafts.size());
      for (TemplateDraft other_element : other.drafts) {
        __this__drafts.add(new TemplateDraft(other_element));
      }
      this.drafts = __this__drafts;
    }
    this.lastPublishedVersion = other.lastPublishedVersion;
    this.lastPublishTime = other.lastPublishTime;
    this.lastModifiedAt = other.lastModifiedAt;
    if (other.isSetAttributes()) {
      List<com.wi.director.thrift.v1.abac.AbacAttribute> __this__attributes = new ArrayList<com.wi.director.thrift.v1.abac.AbacAttribute>(other.attributes.size());
      for (com.wi.director.thrift.v1.abac.AbacAttribute other_element : other.attributes) {
        __this__attributes.add(new com.wi.director.thrift.v1.abac.AbacAttribute(other_element));
      }
      this.attributes = __this__attributes;
    }
    if (other.isSetReferences()) {
      Map<com.parsable.thrift.v1.reference.RefSource,Set<String>> __this__references = new HashMap<com.parsable.thrift.v1.reference.RefSource,Set<String>>(other.references.size());
      for (Map.Entry<com.parsable.thrift.v1.reference.RefSource, Set<String>> other_element : other.references.entrySet()) {

        com.parsable.thrift.v1.reference.RefSource other_element_key = other_element.getKey();
        Set<String> other_element_value = other_element.getValue();

        com.parsable.thrift.v1.reference.RefSource __this__references_copy_key = other_element_key;

        Set<String> __this__references_copy_value = new HashSet<String>(other_element_value);

        __this__references.put(__this__references_copy_key, __this__references_copy_value);
      }
      this.references = __this__references;
    }
    if (other.isSetPlannedDataSheetIds()) {
      Map<String,String> __this__plannedDataSheetIds = new HashMap<String,String>(other.plannedDataSheetIds);
      this.plannedDataSheetIds = __this__plannedDataSheetIds;
    }
    if (other.isSetSnapshottedDataSheetValues()) {
      Map<String,com.wi.director.thrift.v1.datasheet.DataSheetValue> __this__snapshottedDataSheetValues = new HashMap<String,com.wi.director.thrift.v1.datasheet.DataSheetValue>(other.snapshottedDataSheetValues.size());
      for (Map.Entry<String, com.wi.director.thrift.v1.datasheet.DataSheetValue> other_element : other.snapshottedDataSheetValues.entrySet()) {

        String other_element_key = other_element.getKey();
        com.wi.director.thrift.v1.datasheet.DataSheetValue other_element_value = other_element.getValue();

        String __this__snapshottedDataSheetValues_copy_key = other_element_key;

        com.wi.director.thrift.v1.datasheet.DataSheetValue __this__snapshottedDataSheetValues_copy_value = new com.wi.director.thrift.v1.datasheet.DataSheetValue(other_element_value);

        __this__snapshottedDataSheetValues.put(__this__snapshottedDataSheetValues_copy_key, __this__snapshottedDataSheetValues_copy_value);
      }
      this.snapshottedDataSheetValues = __this__snapshottedDataSheetValues;
    }
    if (other.isSetStructDiff()) {
      this.structDiff = other.structDiff;
    }
    if (other.isSetTitleDiff()) {
      this.titleDiff = new com.wi.director.thrift.v1.diff.StringDiff(other.titleDiff);
    }
    if (other.isSetDescripDiff()) {
      this.descripDiff = new com.wi.director.thrift.v1.diff.StringDiff(other.descripDiff);
    }
  }

  public JobTemplateModular deepCopy() {
    return new JobTemplateModular(this);
  }

  @Override
  public void clear() {
    this.id = null;
    setInternalVersionIsSet(false);
    this.internalVersion = 0;
    setPublicVersionIsSet(false);
    this.publicVersion = 0;
    this.title = null;
    this.descrip = null;
    this.status = null;
    this.stepGroupId = null;
    this.teamId = null;
    this.UNSUPPORTEDdocumentEmailAddress = null;
    setLastAuthoredAtIsSet(false);
    this.lastAuthoredAt = 0;
    setPublishedAtIsSet(false);
    this.publishedAt = 0;
    setArchivedAtIsSet(false);
    this.archivedAt = 0;
    this.lastAuthorId = null;
    setSystemIsSet(false);
    this.system = false;
    this.metadataEntry = null;
    this.metadataById = null;
    setPublishedVersionIsSet(false);
    this.publishedVersion = 0;
    this.typ = null;
    this.locked = null;
    this.team = null;
    this.rootHeaders = null;
    this.stepGroup = null;
    this.documents = null;
    setLastPublishedAtIsSet(false);
    this.lastPublishedAt = 0;
    this.lastAuthor = null;
    this.stats = null;
    this.templateTags = null;
    this.drafts = null;
    setLastPublishedVersionIsSet(false);
    this.lastPublishedVersion = 0;
    setLastPublishTimeIsSet(false);
    this.lastPublishTime = 0;
    setLastModifiedAtIsSet(false);
    this.lastModifiedAt = 0;
    this.attributes = null;
    this.references = null;
    this.plannedDataSheetIds = null;
    this.snapshottedDataSheetValues = null;
    this.structDiff = null;
    this.titleDiff = null;
    this.descripDiff = null;
  }

  public String getId() {
    return this.id;
  }

  public JobTemplateModular setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  /**
   * See <code>version</code> in <a href="#Struct_JobTemplate">JobTemplate</a>
   */
  public int getInternalVersion() {
    return this.internalVersion;
  }

  /**
   * See <code>version</code> in <a href="#Struct_JobTemplate">JobTemplate</a>
   */
  public JobTemplateModular setInternalVersion(int internalVersion) {
    this.internalVersion = internalVersion;
    setInternalVersionIsSet(true);
    return this;
  }

  public void unsetInternalVersion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INTERNALVERSION_ISSET_ID);
  }

  /** Returns true if field internalVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetInternalVersion() {
    return EncodingUtils.testBit(__isset_bitfield, __INTERNALVERSION_ISSET_ID);
  }

  public void setInternalVersionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INTERNALVERSION_ISSET_ID, value);
  }

  /**
   * See <code>publicVersion</code> in <a href="#Struct_JobTemplate">JobTemplate</a>
   */
  public int getPublicVersion() {
    return this.publicVersion;
  }

  /**
   * See <code>publicVersion</code> in <a href="#Struct_JobTemplate">JobTemplate</a>
   */
  public JobTemplateModular setPublicVersion(int publicVersion) {
    this.publicVersion = publicVersion;
    setPublicVersionIsSet(true);
    return this;
  }

  public void unsetPublicVersion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PUBLICVERSION_ISSET_ID);
  }

  /** Returns true if field publicVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetPublicVersion() {
    return EncodingUtils.testBit(__isset_bitfield, __PUBLICVERSION_ISSET_ID);
  }

  public void setPublicVersionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PUBLICVERSION_ISSET_ID, value);
  }

  public String getTitle() {
    return this.title;
  }

  public JobTemplateModular setTitle(String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public String getDescrip() {
    return this.descrip;
  }

  public JobTemplateModular setDescrip(String descrip) {
    this.descrip = descrip;
    return this;
  }

  public void unsetDescrip() {
    this.descrip = null;
  }

  /** Returns true if field descrip is set (has been assigned a value) and false otherwise */
  public boolean isSetDescrip() {
    return this.descrip != null;
  }

  public void setDescripIsSet(boolean value) {
    if (!value) {
      this.descrip = null;
    }
  }

  /**
   * 
   * @see JobTemplateStatus
   */
  public JobTemplateStatus getStatus() {
    return this.status;
  }

  /**
   * 
   * @see JobTemplateStatus
   */
  public JobTemplateModular setStatus(JobTemplateStatus status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public String getStepGroupId() {
    return this.stepGroupId;
  }

  public JobTemplateModular setStepGroupId(String stepGroupId) {
    this.stepGroupId = stepGroupId;
    return this;
  }

  public void unsetStepGroupId() {
    this.stepGroupId = null;
  }

  /** Returns true if field stepGroupId is set (has been assigned a value) and false otherwise */
  public boolean isSetStepGroupId() {
    return this.stepGroupId != null;
  }

  public void setStepGroupIdIsSet(boolean value) {
    if (!value) {
      this.stepGroupId = null;
    }
  }

  public String getTeamId() {
    return this.teamId;
  }

  public JobTemplateModular setTeamId(String teamId) {
    this.teamId = teamId;
    return this;
  }

  public void unsetTeamId() {
    this.teamId = null;
  }

  /** Returns true if field teamId is set (has been assigned a value) and false otherwise */
  public boolean isSetTeamId() {
    return this.teamId != null;
  }

  public void setTeamIdIsSet(boolean value) {
    if (!value) {
      this.teamId = null;
    }
  }

  /**
   * UNSUPPORTED Email address for this particular job template
   */
  public String getUNSUPPORTEDdocumentEmailAddress() {
    return this.UNSUPPORTEDdocumentEmailAddress;
  }

  /**
   * UNSUPPORTED Email address for this particular job template
   */
  public JobTemplateModular setUNSUPPORTEDdocumentEmailAddress(String UNSUPPORTEDdocumentEmailAddress) {
    this.UNSUPPORTEDdocumentEmailAddress = UNSUPPORTEDdocumentEmailAddress;
    return this;
  }

  public void unsetUNSUPPORTEDdocumentEmailAddress() {
    this.UNSUPPORTEDdocumentEmailAddress = null;
  }

  /** Returns true if field UNSUPPORTEDdocumentEmailAddress is set (has been assigned a value) and false otherwise */
  public boolean isSetUNSUPPORTEDdocumentEmailAddress() {
    return this.UNSUPPORTEDdocumentEmailAddress != null;
  }

  public void setUNSUPPORTEDdocumentEmailAddressIsSet(boolean value) {
    if (!value) {
      this.UNSUPPORTEDdocumentEmailAddress = null;
    }
  }

  public long getLastAuthoredAt() {
    return this.lastAuthoredAt;
  }

  public JobTemplateModular setLastAuthoredAt(long lastAuthoredAt) {
    this.lastAuthoredAt = lastAuthoredAt;
    setLastAuthoredAtIsSet(true);
    return this;
  }

  public void unsetLastAuthoredAt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTAUTHOREDAT_ISSET_ID);
  }

  /** Returns true if field lastAuthoredAt is set (has been assigned a value) and false otherwise */
  public boolean isSetLastAuthoredAt() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTAUTHOREDAT_ISSET_ID);
  }

  public void setLastAuthoredAtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTAUTHOREDAT_ISSET_ID, value);
  }

  public long getPublishedAt() {
    return this.publishedAt;
  }

  public JobTemplateModular setPublishedAt(long publishedAt) {
    this.publishedAt = publishedAt;
    setPublishedAtIsSet(true);
    return this;
  }

  public void unsetPublishedAt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PUBLISHEDAT_ISSET_ID);
  }

  /** Returns true if field publishedAt is set (has been assigned a value) and false otherwise */
  public boolean isSetPublishedAt() {
    return EncodingUtils.testBit(__isset_bitfield, __PUBLISHEDAT_ISSET_ID);
  }

  public void setPublishedAtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PUBLISHEDAT_ISSET_ID, value);
  }

  public long getArchivedAt() {
    return this.archivedAt;
  }

  public JobTemplateModular setArchivedAt(long archivedAt) {
    this.archivedAt = archivedAt;
    setArchivedAtIsSet(true);
    return this;
  }

  public void unsetArchivedAt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ARCHIVEDAT_ISSET_ID);
  }

  /** Returns true if field archivedAt is set (has been assigned a value) and false otherwise */
  public boolean isSetArchivedAt() {
    return EncodingUtils.testBit(__isset_bitfield, __ARCHIVEDAT_ISSET_ID);
  }

  public void setArchivedAtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ARCHIVEDAT_ISSET_ID, value);
  }

  public String getLastAuthorId() {
    return this.lastAuthorId;
  }

  public JobTemplateModular setLastAuthorId(String lastAuthorId) {
    this.lastAuthorId = lastAuthorId;
    return this;
  }

  public void unsetLastAuthorId() {
    this.lastAuthorId = null;
  }

  /** Returns true if field lastAuthorId is set (has been assigned a value) and false otherwise */
  public boolean isSetLastAuthorId() {
    return this.lastAuthorId != null;
  }

  public void setLastAuthorIdIsSet(boolean value) {
    if (!value) {
      this.lastAuthorId = null;
    }
  }

  public boolean isSystem() {
    return this.system;
  }

  public JobTemplateModular setSystem(boolean system) {
    this.system = system;
    setSystemIsSet(true);
    return this;
  }

  public void unsetSystem() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SYSTEM_ISSET_ID);
  }

  /** Returns true if field system is set (has been assigned a value) and false otherwise */
  public boolean isSetSystem() {
    return EncodingUtils.testBit(__isset_bitfield, __SYSTEM_ISSET_ID);
  }

  public void setSystemIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SYSTEM_ISSET_ID, value);
  }

  public int getMetadataEntrySize() {
    return (this.metadataEntry == null) ? 0 : this.metadataEntry.size();
  }

  public java.util.Iterator<com.wi.director.thrift.v1.metadata.MetadataEntry> getMetadataEntryIterator() {
    return (this.metadataEntry == null) ? null : this.metadataEntry.iterator();
  }

  public void addToMetadataEntry(com.wi.director.thrift.v1.metadata.MetadataEntry elem) {
    if (this.metadataEntry == null) {
      this.metadataEntry = new ArrayList<com.wi.director.thrift.v1.metadata.MetadataEntry>();
    }
    this.metadataEntry.add(elem);
  }

  public List<com.wi.director.thrift.v1.metadata.MetadataEntry> getMetadataEntry() {
    return this.metadataEntry;
  }

  public JobTemplateModular setMetadataEntry(List<com.wi.director.thrift.v1.metadata.MetadataEntry> metadataEntry) {
    this.metadataEntry = metadataEntry;
    return this;
  }

  public void unsetMetadataEntry() {
    this.metadataEntry = null;
  }

  /** Returns true if field metadataEntry is set (has been assigned a value) and false otherwise */
  public boolean isSetMetadataEntry() {
    return this.metadataEntry != null;
  }

  public void setMetadataEntryIsSet(boolean value) {
    if (!value) {
      this.metadataEntry = null;
    }
  }

  public int getMetadataByIdSize() {
    return (this.metadataById == null) ? 0 : this.metadataById.size();
  }

  public void putToMetadataById(String key, com.wi.director.thrift.v1.metadata.MetadataEntry val) {
    if (this.metadataById == null) {
      this.metadataById = new HashMap<String,com.wi.director.thrift.v1.metadata.MetadataEntry>();
    }
    this.metadataById.put(key, val);
  }

  public Map<String,com.wi.director.thrift.v1.metadata.MetadataEntry> getMetadataById() {
    return this.metadataById;
  }

  public JobTemplateModular setMetadataById(Map<String,com.wi.director.thrift.v1.metadata.MetadataEntry> metadataById) {
    this.metadataById = metadataById;
    return this;
  }

  public void unsetMetadataById() {
    this.metadataById = null;
  }

  /** Returns true if field metadataById is set (has been assigned a value) and false otherwise */
  public boolean isSetMetadataById() {
    return this.metadataById != null;
  }

  public void setMetadataByIdIsSet(boolean value) {
    if (!value) {
      this.metadataById = null;
    }
  }

  /**
   * See <code>publishedVersion</code> in <a href="#Struct_JobTemplate">JobTemplate</a>
   */
  public int getPublishedVersion() {
    return this.publishedVersion;
  }

  /**
   * See <code>publishedVersion</code> in <a href="#Struct_JobTemplate">JobTemplate</a>
   */
  public JobTemplateModular setPublishedVersion(int publishedVersion) {
    this.publishedVersion = publishedVersion;
    setPublishedVersionIsSet(true);
    return this;
  }

  public void unsetPublishedVersion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PUBLISHEDVERSION_ISSET_ID);
  }

  /** Returns true if field publishedVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetPublishedVersion() {
    return EncodingUtils.testBit(__isset_bitfield, __PUBLISHEDVERSION_ISSET_ID);
  }

  public void setPublishedVersionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PUBLISHEDVERSION_ISSET_ID, value);
  }

  /**
   * 
   * @see TemplateType
   */
  public TemplateType getTyp() {
    return this.typ;
  }

  /**
   * 
   * @see TemplateType
   */
  public JobTemplateModular setTyp(TemplateType typ) {
    this.typ = typ;
    return this;
  }

  public void unsetTyp() {
    this.typ = null;
  }

  /** Returns true if field typ is set (has been assigned a value) and false otherwise */
  public boolean isSetTyp() {
    return this.typ != null;
  }

  public void setTypIsSet(boolean value) {
    if (!value) {
      this.typ = null;
    }
  }

  /**
   * Internal authoring lock
   */
  public JobTemplateLock getLocked() {
    return this.locked;
  }

  /**
   * Internal authoring lock
   */
  public JobTemplateModular setLocked(JobTemplateLock locked) {
    this.locked = locked;
    return this;
  }

  public void unsetLocked() {
    this.locked = null;
  }

  /** Returns true if field locked is set (has been assigned a value) and false otherwise */
  public boolean isSetLocked() {
    return this.locked != null;
  }

  public void setLockedIsSet(boolean value) {
    if (!value) {
      this.locked = null;
    }
  }

  public com.wi.director.thrift.v1.team.TeamModular getTeam() {
    return this.team;
  }

  public JobTemplateModular setTeam(com.wi.director.thrift.v1.team.TeamModular team) {
    this.team = team;
    return this;
  }

  public void unsetTeam() {
    this.team = null;
  }

  /** Returns true if field team is set (has been assigned a value) and false otherwise */
  public boolean isSetTeam() {
    return this.team != null;
  }

  public void setTeamIsSet(boolean value) {
    if (!value) {
      this.team = null;
    }
  }

  public com.wi.director.thrift.v1.group_headers.StepGroupHeaders getRootHeaders() {
    return this.rootHeaders;
  }

  public JobTemplateModular setRootHeaders(com.wi.director.thrift.v1.group_headers.StepGroupHeaders rootHeaders) {
    this.rootHeaders = rootHeaders;
    return this;
  }

  public void unsetRootHeaders() {
    this.rootHeaders = null;
  }

  /** Returns true if field rootHeaders is set (has been assigned a value) and false otherwise */
  public boolean isSetRootHeaders() {
    return this.rootHeaders != null;
  }

  public void setRootHeadersIsSet(boolean value) {
    if (!value) {
      this.rootHeaders = null;
    }
  }

  public com.wi.director.thrift.v1.step.BaseStep getStepGroup() {
    return this.stepGroup;
  }

  public JobTemplateModular setStepGroup(com.wi.director.thrift.v1.step.BaseStep stepGroup) {
    this.stepGroup = stepGroup;
    return this;
  }

  public void unsetStepGroup() {
    this.stepGroup = null;
  }

  /** Returns true if field stepGroup is set (has been assigned a value) and false otherwise */
  public boolean isSetStepGroup() {
    return this.stepGroup != null;
  }

  public void setStepGroupIsSet(boolean value) {
    if (!value) {
      this.stepGroup = null;
    }
  }

  public int getDocumentsSize() {
    return (this.documents == null) ? 0 : this.documents.size();
  }

  public java.util.Iterator<com.wi.director.thrift.v1.document.Document> getDocumentsIterator() {
    return (this.documents == null) ? null : this.documents.iterator();
  }

  public void addToDocuments(com.wi.director.thrift.v1.document.Document elem) {
    if (this.documents == null) {
      this.documents = new ArrayList<com.wi.director.thrift.v1.document.Document>();
    }
    this.documents.add(elem);
  }

  public List<com.wi.director.thrift.v1.document.Document> getDocuments() {
    return this.documents;
  }

  public JobTemplateModular setDocuments(List<com.wi.director.thrift.v1.document.Document> documents) {
    this.documents = documents;
    return this;
  }

  public void unsetDocuments() {
    this.documents = null;
  }

  /** Returns true if field documents is set (has been assigned a value) and false otherwise */
  public boolean isSetDocuments() {
    return this.documents != null;
  }

  public void setDocumentsIsSet(boolean value) {
    if (!value) {
      this.documents = null;
    }
  }

  /**
   * DEPRECATED Bumps up on Create/Publish/InReview/Reject, 0 if no such event has occurred. Note that this field is wrongly named.
   */
  public long getLastPublishedAt() {
    return this.lastPublishedAt;
  }

  /**
   * DEPRECATED Bumps up on Create/Publish/InReview/Reject, 0 if no such event has occurred. Note that this field is wrongly named.
   */
  public JobTemplateModular setLastPublishedAt(long lastPublishedAt) {
    this.lastPublishedAt = lastPublishedAt;
    setLastPublishedAtIsSet(true);
    return this;
  }

  public void unsetLastPublishedAt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTPUBLISHEDAT_ISSET_ID);
  }

  /** Returns true if field lastPublishedAt is set (has been assigned a value) and false otherwise */
  public boolean isSetLastPublishedAt() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTPUBLISHEDAT_ISSET_ID);
  }

  public void setLastPublishedAtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTPUBLISHEDAT_ISSET_ID, value);
  }

  public com.wi.director.thrift.v1.user.User getLastAuthor() {
    return this.lastAuthor;
  }

  public JobTemplateModular setLastAuthor(com.wi.director.thrift.v1.user.User lastAuthor) {
    this.lastAuthor = lastAuthor;
    return this;
  }

  public void unsetLastAuthor() {
    this.lastAuthor = null;
  }

  /** Returns true if field lastAuthor is set (has been assigned a value) and false otherwise */
  public boolean isSetLastAuthor() {
    return this.lastAuthor != null;
  }

  public void setLastAuthorIsSet(boolean value) {
    if (!value) {
      this.lastAuthor = null;
    }
  }

  public JobTemplateStats getStats() {
    return this.stats;
  }

  public JobTemplateModular setStats(JobTemplateStats stats) {
    this.stats = stats;
    return this;
  }

  public void unsetStats() {
    this.stats = null;
  }

  /** Returns true if field stats is set (has been assigned a value) and false otherwise */
  public boolean isSetStats() {
    return this.stats != null;
  }

  public void setStatsIsSet(boolean value) {
    if (!value) {
      this.stats = null;
    }
  }

  public int getTemplateTagsSize() {
    return (this.templateTags == null) ? 0 : this.templateTags.size();
  }

  public java.util.Iterator<TemplateTag> getTemplateTagsIterator() {
    return (this.templateTags == null) ? null : this.templateTags.iterator();
  }

  public void addToTemplateTags(TemplateTag elem) {
    if (this.templateTags == null) {
      this.templateTags = new ArrayList<TemplateTag>();
    }
    this.templateTags.add(elem);
  }

  public List<TemplateTag> getTemplateTags() {
    return this.templateTags;
  }

  public JobTemplateModular setTemplateTags(List<TemplateTag> templateTags) {
    this.templateTags = templateTags;
    return this;
  }

  public void unsetTemplateTags() {
    this.templateTags = null;
  }

  /** Returns true if field templateTags is set (has been assigned a value) and false otherwise */
  public boolean isSetTemplateTags() {
    return this.templateTags != null;
  }

  public void setTemplateTagsIsSet(boolean value) {
    if (!value) {
      this.templateTags = null;
    }
  }

  public int getDraftsSize() {
    return (this.drafts == null) ? 0 : this.drafts.size();
  }

  public java.util.Iterator<TemplateDraft> getDraftsIterator() {
    return (this.drafts == null) ? null : this.drafts.iterator();
  }

  public void addToDrafts(TemplateDraft elem) {
    if (this.drafts == null) {
      this.drafts = new ArrayList<TemplateDraft>();
    }
    this.drafts.add(elem);
  }

  public List<TemplateDraft> getDrafts() {
    return this.drafts;
  }

  public JobTemplateModular setDrafts(List<TemplateDraft> drafts) {
    this.drafts = drafts;
    return this;
  }

  public void unsetDrafts() {
    this.drafts = null;
  }

  /** Returns true if field drafts is set (has been assigned a value) and false otherwise */
  public boolean isSetDrafts() {
    return this.drafts != null;
  }

  public void setDraftsIsSet(boolean value) {
    if (!value) {
      this.drafts = null;
    }
  }

  /**
   * last published version for this template. 0 if not published
   */
  public int getLastPublishedVersion() {
    return this.lastPublishedVersion;
  }

  /**
   * last published version for this template. 0 if not published
   */
  public JobTemplateModular setLastPublishedVersion(int lastPublishedVersion) {
    this.lastPublishedVersion = lastPublishedVersion;
    setLastPublishedVersionIsSet(true);
    return this;
  }

  public void unsetLastPublishedVersion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTPUBLISHEDVERSION_ISSET_ID);
  }

  /** Returns true if field lastPublishedVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetLastPublishedVersion() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTPUBLISHEDVERSION_ISSET_ID);
  }

  public void setLastPublishedVersionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTPUBLISHEDVERSION_ISSET_ID, value);
  }

  /**
   * Bumps up on Publish, 0 if never pubished. (fixed version of lastPublishedAt)
   */
  public long getLastPublishTime() {
    return this.lastPublishTime;
  }

  /**
   * Bumps up on Publish, 0 if never pubished. (fixed version of lastPublishedAt)
   */
  public JobTemplateModular setLastPublishTime(long lastPublishTime) {
    this.lastPublishTime = lastPublishTime;
    setLastPublishTimeIsSet(true);
    return this;
  }

  public void unsetLastPublishTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTPUBLISHTIME_ISSET_ID);
  }

  /** Returns true if field lastPublishTime is set (has been assigned a value) and false otherwise */
  public boolean isSetLastPublishTime() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTPUBLISHTIME_ISSET_ID);
  }

  public void setLastPublishTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTPUBLISHTIME_ISSET_ID, value);
  }

  /**
   * Bumps up on edit, status change, archive
   */
  public long getLastModifiedAt() {
    return this.lastModifiedAt;
  }

  /**
   * Bumps up on edit, status change, archive
   */
  public JobTemplateModular setLastModifiedAt(long lastModifiedAt) {
    this.lastModifiedAt = lastModifiedAt;
    setLastModifiedAtIsSet(true);
    return this;
  }

  public void unsetLastModifiedAt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTMODIFIEDAT_ISSET_ID);
  }

  /** Returns true if field lastModifiedAt is set (has been assigned a value) and false otherwise */
  public boolean isSetLastModifiedAt() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTMODIFIEDAT_ISSET_ID);
  }

  public void setLastModifiedAtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTMODIFIEDAT_ISSET_ID, value);
  }

  public int getAttributesSize() {
    return (this.attributes == null) ? 0 : this.attributes.size();
  }

  public java.util.Iterator<com.wi.director.thrift.v1.abac.AbacAttribute> getAttributesIterator() {
    return (this.attributes == null) ? null : this.attributes.iterator();
  }

  public void addToAttributes(com.wi.director.thrift.v1.abac.AbacAttribute elem) {
    if (this.attributes == null) {
      this.attributes = new ArrayList<com.wi.director.thrift.v1.abac.AbacAttribute>();
    }
    this.attributes.add(elem);
  }

  public List<com.wi.director.thrift.v1.abac.AbacAttribute> getAttributes() {
    return this.attributes;
  }

  public JobTemplateModular setAttributes(List<com.wi.director.thrift.v1.abac.AbacAttribute> attributes) {
    this.attributes = attributes;
    return this;
  }

  public void unsetAttributes() {
    this.attributes = null;
  }

  /** Returns true if field attributes is set (has been assigned a value) and false otherwise */
  public boolean isSetAttributes() {
    return this.attributes != null;
  }

  public void setAttributesIsSet(boolean value) {
    if (!value) {
      this.attributes = null;
    }
  }

  public int getReferencesSize() {
    return (this.references == null) ? 0 : this.references.size();
  }

  public void putToReferences(com.parsable.thrift.v1.reference.RefSource key, Set<String> val) {
    if (this.references == null) {
      this.references = new HashMap<com.parsable.thrift.v1.reference.RefSource,Set<String>>();
    }
    this.references.put(key, val);
  }

  public Map<com.parsable.thrift.v1.reference.RefSource,Set<String>> getReferences() {
    return this.references;
  }

  public JobTemplateModular setReferences(Map<com.parsable.thrift.v1.reference.RefSource,Set<String>> references) {
    this.references = references;
    return this;
  }

  public void unsetReferences() {
    this.references = null;
  }

  /** Returns true if field references is set (has been assigned a value) and false otherwise */
  public boolean isSetReferences() {
    return this.references != null;
  }

  public void setReferencesIsSet(boolean value) {
    if (!value) {
      this.references = null;
    }
  }

  public int getPlannedDataSheetIdsSize() {
    return (this.plannedDataSheetIds == null) ? 0 : this.plannedDataSheetIds.size();
  }

  public void putToPlannedDataSheetIds(String key, String val) {
    if (this.plannedDataSheetIds == null) {
      this.plannedDataSheetIds = new HashMap<String,String>();
    }
    this.plannedDataSheetIds.put(key, val);
  }

  /**
   * Map of data sheet set id -> data sheet id picked during job planning
   * This is only valid if the data sheet set ids are contained in <code>references</code> above
   */
  public Map<String,String> getPlannedDataSheetIds() {
    return this.plannedDataSheetIds;
  }

  /**
   * Map of data sheet set id -> data sheet id picked during job planning
   * This is only valid if the data sheet set ids are contained in <code>references</code> above
   */
  public JobTemplateModular setPlannedDataSheetIds(Map<String,String> plannedDataSheetIds) {
    this.plannedDataSheetIds = plannedDataSheetIds;
    return this;
  }

  public void unsetPlannedDataSheetIds() {
    this.plannedDataSheetIds = null;
  }

  /** Returns true if field plannedDataSheetIds is set (has been assigned a value) and false otherwise */
  public boolean isSetPlannedDataSheetIds() {
    return this.plannedDataSheetIds != null;
  }

  public void setPlannedDataSheetIdsIsSet(boolean value) {
    if (!value) {
      this.plannedDataSheetIds = null;
    }
  }

  public int getSnapshottedDataSheetValuesSize() {
    return (this.snapshottedDataSheetValues == null) ? 0 : this.snapshottedDataSheetValues.size();
  }

  public void putToSnapshottedDataSheetValues(String key, com.wi.director.thrift.v1.datasheet.DataSheetValue val) {
    if (this.snapshottedDataSheetValues == null) {
      this.snapshottedDataSheetValues = new HashMap<String,com.wi.director.thrift.v1.datasheet.DataSheetValue>();
    }
    this.snapshottedDataSheetValues.put(key, val);
  }

  /**
   * Map of data sheet set definition id -> data sheet value snapshotted at/after job start
   * This is only valid if the data sheet set definition ids are contained in <code>references</code> above
   */
  public Map<String,com.wi.director.thrift.v1.datasheet.DataSheetValue> getSnapshottedDataSheetValues() {
    return this.snapshottedDataSheetValues;
  }

  /**
   * Map of data sheet set definition id -> data sheet value snapshotted at/after job start
   * This is only valid if the data sheet set definition ids are contained in <code>references</code> above
   */
  public JobTemplateModular setSnapshottedDataSheetValues(Map<String,com.wi.director.thrift.v1.datasheet.DataSheetValue> snapshottedDataSheetValues) {
    this.snapshottedDataSheetValues = snapshottedDataSheetValues;
    return this;
  }

  public void unsetSnapshottedDataSheetValues() {
    this.snapshottedDataSheetValues = null;
  }

  /** Returns true if field snapshottedDataSheetValues is set (has been assigned a value) and false otherwise */
  public boolean isSetSnapshottedDataSheetValues() {
    return this.snapshottedDataSheetValues != null;
  }

  public void setSnapshottedDataSheetValuesIsSet(boolean value) {
    if (!value) {
      this.snapshottedDataSheetValues = null;
    }
  }

  /**
   * 
   * @see com.wi.director.thrift.v1.diff.ChangeType
   */
  public com.wi.director.thrift.v1.diff.ChangeType getStructDiff() {
    return this.structDiff;
  }

  /**
   * 
   * @see com.wi.director.thrift.v1.diff.ChangeType
   */
  public JobTemplateModular setStructDiff(com.wi.director.thrift.v1.diff.ChangeType structDiff) {
    this.structDiff = structDiff;
    return this;
  }

  public void unsetStructDiff() {
    this.structDiff = null;
  }

  /** Returns true if field structDiff is set (has been assigned a value) and false otherwise */
  public boolean isSetStructDiff() {
    return this.structDiff != null;
  }

  public void setStructDiffIsSet(boolean value) {
    if (!value) {
      this.structDiff = null;
    }
  }

  public com.wi.director.thrift.v1.diff.StringDiff getTitleDiff() {
    return this.titleDiff;
  }

  public JobTemplateModular setTitleDiff(com.wi.director.thrift.v1.diff.StringDiff titleDiff) {
    this.titleDiff = titleDiff;
    return this;
  }

  public void unsetTitleDiff() {
    this.titleDiff = null;
  }

  /** Returns true if field titleDiff is set (has been assigned a value) and false otherwise */
  public boolean isSetTitleDiff() {
    return this.titleDiff != null;
  }

  public void setTitleDiffIsSet(boolean value) {
    if (!value) {
      this.titleDiff = null;
    }
  }

  public com.wi.director.thrift.v1.diff.StringDiff getDescripDiff() {
    return this.descripDiff;
  }

  public JobTemplateModular setDescripDiff(com.wi.director.thrift.v1.diff.StringDiff descripDiff) {
    this.descripDiff = descripDiff;
    return this;
  }

  public void unsetDescripDiff() {
    this.descripDiff = null;
  }

  /** Returns true if field descripDiff is set (has been assigned a value) and false otherwise */
  public boolean isSetDescripDiff() {
    return this.descripDiff != null;
  }

  public void setDescripDiffIsSet(boolean value) {
    if (!value) {
      this.descripDiff = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case INTERNAL_VERSION:
      if (value == null) {
        unsetInternalVersion();
      } else {
        setInternalVersion((Integer)value);
      }
      break;

    case PUBLIC_VERSION:
      if (value == null) {
        unsetPublicVersion();
      } else {
        setPublicVersion((Integer)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((String)value);
      }
      break;

    case DESCRIP:
      if (value == null) {
        unsetDescrip();
      } else {
        setDescrip((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((JobTemplateStatus)value);
      }
      break;

    case STEP_GROUP_ID:
      if (value == null) {
        unsetStepGroupId();
      } else {
        setStepGroupId((String)value);
      }
      break;

    case TEAM_ID:
      if (value == null) {
        unsetTeamId();
      } else {
        setTeamId((String)value);
      }
      break;

    case UNSUPPORTEDDOCUMENT_EMAIL_ADDRESS:
      if (value == null) {
        unsetUNSUPPORTEDdocumentEmailAddress();
      } else {
        setUNSUPPORTEDdocumentEmailAddress((String)value);
      }
      break;

    case LAST_AUTHORED_AT:
      if (value == null) {
        unsetLastAuthoredAt();
      } else {
        setLastAuthoredAt((Long)value);
      }
      break;

    case PUBLISHED_AT:
      if (value == null) {
        unsetPublishedAt();
      } else {
        setPublishedAt((Long)value);
      }
      break;

    case ARCHIVED_AT:
      if (value == null) {
        unsetArchivedAt();
      } else {
        setArchivedAt((Long)value);
      }
      break;

    case LAST_AUTHOR_ID:
      if (value == null) {
        unsetLastAuthorId();
      } else {
        setLastAuthorId((String)value);
      }
      break;

    case SYSTEM:
      if (value == null) {
        unsetSystem();
      } else {
        setSystem((Boolean)value);
      }
      break;

    case METADATA_ENTRY:
      if (value == null) {
        unsetMetadataEntry();
      } else {
        setMetadataEntry((List<com.wi.director.thrift.v1.metadata.MetadataEntry>)value);
      }
      break;

    case METADATA_BY_ID:
      if (value == null) {
        unsetMetadataById();
      } else {
        setMetadataById((Map<String,com.wi.director.thrift.v1.metadata.MetadataEntry>)value);
      }
      break;

    case PUBLISHED_VERSION:
      if (value == null) {
        unsetPublishedVersion();
      } else {
        setPublishedVersion((Integer)value);
      }
      break;

    case TYP:
      if (value == null) {
        unsetTyp();
      } else {
        setTyp((TemplateType)value);
      }
      break;

    case LOCKED:
      if (value == null) {
        unsetLocked();
      } else {
        setLocked((JobTemplateLock)value);
      }
      break;

    case TEAM:
      if (value == null) {
        unsetTeam();
      } else {
        setTeam((com.wi.director.thrift.v1.team.TeamModular)value);
      }
      break;

    case ROOT_HEADERS:
      if (value == null) {
        unsetRootHeaders();
      } else {
        setRootHeaders((com.wi.director.thrift.v1.group_headers.StepGroupHeaders)value);
      }
      break;

    case STEP_GROUP:
      if (value == null) {
        unsetStepGroup();
      } else {
        setStepGroup((com.wi.director.thrift.v1.step.BaseStep)value);
      }
      break;

    case DOCUMENTS:
      if (value == null) {
        unsetDocuments();
      } else {
        setDocuments((List<com.wi.director.thrift.v1.document.Document>)value);
      }
      break;

    case LAST_PUBLISHED_AT:
      if (value == null) {
        unsetLastPublishedAt();
      } else {
        setLastPublishedAt((Long)value);
      }
      break;

    case LAST_AUTHOR:
      if (value == null) {
        unsetLastAuthor();
      } else {
        setLastAuthor((com.wi.director.thrift.v1.user.User)value);
      }
      break;

    case STATS:
      if (value == null) {
        unsetStats();
      } else {
        setStats((JobTemplateStats)value);
      }
      break;

    case TEMPLATE_TAGS:
      if (value == null) {
        unsetTemplateTags();
      } else {
        setTemplateTags((List<TemplateTag>)value);
      }
      break;

    case DRAFTS:
      if (value == null) {
        unsetDrafts();
      } else {
        setDrafts((List<TemplateDraft>)value);
      }
      break;

    case LAST_PUBLISHED_VERSION:
      if (value == null) {
        unsetLastPublishedVersion();
      } else {
        setLastPublishedVersion((Integer)value);
      }
      break;

    case LAST_PUBLISH_TIME:
      if (value == null) {
        unsetLastPublishTime();
      } else {
        setLastPublishTime((Long)value);
      }
      break;

    case LAST_MODIFIED_AT:
      if (value == null) {
        unsetLastModifiedAt();
      } else {
        setLastModifiedAt((Long)value);
      }
      break;

    case ATTRIBUTES:
      if (value == null) {
        unsetAttributes();
      } else {
        setAttributes((List<com.wi.director.thrift.v1.abac.AbacAttribute>)value);
      }
      break;

    case REFERENCES:
      if (value == null) {
        unsetReferences();
      } else {
        setReferences((Map<com.parsable.thrift.v1.reference.RefSource,Set<String>>)value);
      }
      break;

    case PLANNED_DATA_SHEET_IDS:
      if (value == null) {
        unsetPlannedDataSheetIds();
      } else {
        setPlannedDataSheetIds((Map<String,String>)value);
      }
      break;

    case SNAPSHOTTED_DATA_SHEET_VALUES:
      if (value == null) {
        unsetSnapshottedDataSheetValues();
      } else {
        setSnapshottedDataSheetValues((Map<String,com.wi.director.thrift.v1.datasheet.DataSheetValue>)value);
      }
      break;

    case STRUCT_DIFF:
      if (value == null) {
        unsetStructDiff();
      } else {
        setStructDiff((com.wi.director.thrift.v1.diff.ChangeType)value);
      }
      break;

    case TITLE_DIFF:
      if (value == null) {
        unsetTitleDiff();
      } else {
        setTitleDiff((com.wi.director.thrift.v1.diff.StringDiff)value);
      }
      break;

    case DESCRIP_DIFF:
      if (value == null) {
        unsetDescripDiff();
      } else {
        setDescripDiff((com.wi.director.thrift.v1.diff.StringDiff)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case INTERNAL_VERSION:
      return getInternalVersion();

    case PUBLIC_VERSION:
      return getPublicVersion();

    case TITLE:
      return getTitle();

    case DESCRIP:
      return getDescrip();

    case STATUS:
      return getStatus();

    case STEP_GROUP_ID:
      return getStepGroupId();

    case TEAM_ID:
      return getTeamId();

    case UNSUPPORTEDDOCUMENT_EMAIL_ADDRESS:
      return getUNSUPPORTEDdocumentEmailAddress();

    case LAST_AUTHORED_AT:
      return getLastAuthoredAt();

    case PUBLISHED_AT:
      return getPublishedAt();

    case ARCHIVED_AT:
      return getArchivedAt();

    case LAST_AUTHOR_ID:
      return getLastAuthorId();

    case SYSTEM:
      return isSystem();

    case METADATA_ENTRY:
      return getMetadataEntry();

    case METADATA_BY_ID:
      return getMetadataById();

    case PUBLISHED_VERSION:
      return getPublishedVersion();

    case TYP:
      return getTyp();

    case LOCKED:
      return getLocked();

    case TEAM:
      return getTeam();

    case ROOT_HEADERS:
      return getRootHeaders();

    case STEP_GROUP:
      return getStepGroup();

    case DOCUMENTS:
      return getDocuments();

    case LAST_PUBLISHED_AT:
      return getLastPublishedAt();

    case LAST_AUTHOR:
      return getLastAuthor();

    case STATS:
      return getStats();

    case TEMPLATE_TAGS:
      return getTemplateTags();

    case DRAFTS:
      return getDrafts();

    case LAST_PUBLISHED_VERSION:
      return getLastPublishedVersion();

    case LAST_PUBLISH_TIME:
      return getLastPublishTime();

    case LAST_MODIFIED_AT:
      return getLastModifiedAt();

    case ATTRIBUTES:
      return getAttributes();

    case REFERENCES:
      return getReferences();

    case PLANNED_DATA_SHEET_IDS:
      return getPlannedDataSheetIds();

    case SNAPSHOTTED_DATA_SHEET_VALUES:
      return getSnapshottedDataSheetValues();

    case STRUCT_DIFF:
      return getStructDiff();

    case TITLE_DIFF:
      return getTitleDiff();

    case DESCRIP_DIFF:
      return getDescripDiff();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case INTERNAL_VERSION:
      return isSetInternalVersion();
    case PUBLIC_VERSION:
      return isSetPublicVersion();
    case TITLE:
      return isSetTitle();
    case DESCRIP:
      return isSetDescrip();
    case STATUS:
      return isSetStatus();
    case STEP_GROUP_ID:
      return isSetStepGroupId();
    case TEAM_ID:
      return isSetTeamId();
    case UNSUPPORTEDDOCUMENT_EMAIL_ADDRESS:
      return isSetUNSUPPORTEDdocumentEmailAddress();
    case LAST_AUTHORED_AT:
      return isSetLastAuthoredAt();
    case PUBLISHED_AT:
      return isSetPublishedAt();
    case ARCHIVED_AT:
      return isSetArchivedAt();
    case LAST_AUTHOR_ID:
      return isSetLastAuthorId();
    case SYSTEM:
      return isSetSystem();
    case METADATA_ENTRY:
      return isSetMetadataEntry();
    case METADATA_BY_ID:
      return isSetMetadataById();
    case PUBLISHED_VERSION:
      return isSetPublishedVersion();
    case TYP:
      return isSetTyp();
    case LOCKED:
      return isSetLocked();
    case TEAM:
      return isSetTeam();
    case ROOT_HEADERS:
      return isSetRootHeaders();
    case STEP_GROUP:
      return isSetStepGroup();
    case DOCUMENTS:
      return isSetDocuments();
    case LAST_PUBLISHED_AT:
      return isSetLastPublishedAt();
    case LAST_AUTHOR:
      return isSetLastAuthor();
    case STATS:
      return isSetStats();
    case TEMPLATE_TAGS:
      return isSetTemplateTags();
    case DRAFTS:
      return isSetDrafts();
    case LAST_PUBLISHED_VERSION:
      return isSetLastPublishedVersion();
    case LAST_PUBLISH_TIME:
      return isSetLastPublishTime();
    case LAST_MODIFIED_AT:
      return isSetLastModifiedAt();
    case ATTRIBUTES:
      return isSetAttributes();
    case REFERENCES:
      return isSetReferences();
    case PLANNED_DATA_SHEET_IDS:
      return isSetPlannedDataSheetIds();
    case SNAPSHOTTED_DATA_SHEET_VALUES:
      return isSetSnapshottedDataSheetValues();
    case STRUCT_DIFF:
      return isSetStructDiff();
    case TITLE_DIFF:
      return isSetTitleDiff();
    case DESCRIP_DIFF:
      return isSetDescripDiff();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof JobTemplateModular)
      return this.equals((JobTemplateModular)that);
    return false;
  }

  public boolean equals(JobTemplateModular that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_internalVersion = true;
    boolean that_present_internalVersion = true;
    if (this_present_internalVersion || that_present_internalVersion) {
      if (!(this_present_internalVersion && that_present_internalVersion))
        return false;
      if (this.internalVersion != that.internalVersion)
        return false;
    }

    boolean this_present_publicVersion = true;
    boolean that_present_publicVersion = true;
    if (this_present_publicVersion || that_present_publicVersion) {
      if (!(this_present_publicVersion && that_present_publicVersion))
        return false;
      if (this.publicVersion != that.publicVersion)
        return false;
    }

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_descrip = true && this.isSetDescrip();
    boolean that_present_descrip = true && that.isSetDescrip();
    if (this_present_descrip || that_present_descrip) {
      if (!(this_present_descrip && that_present_descrip))
        return false;
      if (!this.descrip.equals(that.descrip))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_stepGroupId = true && this.isSetStepGroupId();
    boolean that_present_stepGroupId = true && that.isSetStepGroupId();
    if (this_present_stepGroupId || that_present_stepGroupId) {
      if (!(this_present_stepGroupId && that_present_stepGroupId))
        return false;
      if (!this.stepGroupId.equals(that.stepGroupId))
        return false;
    }

    boolean this_present_teamId = true && this.isSetTeamId();
    boolean that_present_teamId = true && that.isSetTeamId();
    if (this_present_teamId || that_present_teamId) {
      if (!(this_present_teamId && that_present_teamId))
        return false;
      if (!this.teamId.equals(that.teamId))
        return false;
    }

    boolean this_present_UNSUPPORTEDdocumentEmailAddress = true && this.isSetUNSUPPORTEDdocumentEmailAddress();
    boolean that_present_UNSUPPORTEDdocumentEmailAddress = true && that.isSetUNSUPPORTEDdocumentEmailAddress();
    if (this_present_UNSUPPORTEDdocumentEmailAddress || that_present_UNSUPPORTEDdocumentEmailAddress) {
      if (!(this_present_UNSUPPORTEDdocumentEmailAddress && that_present_UNSUPPORTEDdocumentEmailAddress))
        return false;
      if (!this.UNSUPPORTEDdocumentEmailAddress.equals(that.UNSUPPORTEDdocumentEmailAddress))
        return false;
    }

    boolean this_present_lastAuthoredAt = true;
    boolean that_present_lastAuthoredAt = true;
    if (this_present_lastAuthoredAt || that_present_lastAuthoredAt) {
      if (!(this_present_lastAuthoredAt && that_present_lastAuthoredAt))
        return false;
      if (this.lastAuthoredAt != that.lastAuthoredAt)
        return false;
    }

    boolean this_present_publishedAt = true;
    boolean that_present_publishedAt = true;
    if (this_present_publishedAt || that_present_publishedAt) {
      if (!(this_present_publishedAt && that_present_publishedAt))
        return false;
      if (this.publishedAt != that.publishedAt)
        return false;
    }

    boolean this_present_archivedAt = true;
    boolean that_present_archivedAt = true;
    if (this_present_archivedAt || that_present_archivedAt) {
      if (!(this_present_archivedAt && that_present_archivedAt))
        return false;
      if (this.archivedAt != that.archivedAt)
        return false;
    }

    boolean this_present_lastAuthorId = true && this.isSetLastAuthorId();
    boolean that_present_lastAuthorId = true && that.isSetLastAuthorId();
    if (this_present_lastAuthorId || that_present_lastAuthorId) {
      if (!(this_present_lastAuthorId && that_present_lastAuthorId))
        return false;
      if (!this.lastAuthorId.equals(that.lastAuthorId))
        return false;
    }

    boolean this_present_system = true;
    boolean that_present_system = true;
    if (this_present_system || that_present_system) {
      if (!(this_present_system && that_present_system))
        return false;
      if (this.system != that.system)
        return false;
    }

    boolean this_present_metadataEntry = true && this.isSetMetadataEntry();
    boolean that_present_metadataEntry = true && that.isSetMetadataEntry();
    if (this_present_metadataEntry || that_present_metadataEntry) {
      if (!(this_present_metadataEntry && that_present_metadataEntry))
        return false;
      if (!this.metadataEntry.equals(that.metadataEntry))
        return false;
    }

    boolean this_present_metadataById = true && this.isSetMetadataById();
    boolean that_present_metadataById = true && that.isSetMetadataById();
    if (this_present_metadataById || that_present_metadataById) {
      if (!(this_present_metadataById && that_present_metadataById))
        return false;
      if (!this.metadataById.equals(that.metadataById))
        return false;
    }

    boolean this_present_publishedVersion = true;
    boolean that_present_publishedVersion = true;
    if (this_present_publishedVersion || that_present_publishedVersion) {
      if (!(this_present_publishedVersion && that_present_publishedVersion))
        return false;
      if (this.publishedVersion != that.publishedVersion)
        return false;
    }

    boolean this_present_typ = true && this.isSetTyp();
    boolean that_present_typ = true && that.isSetTyp();
    if (this_present_typ || that_present_typ) {
      if (!(this_present_typ && that_present_typ))
        return false;
      if (!this.typ.equals(that.typ))
        return false;
    }

    boolean this_present_locked = true && this.isSetLocked();
    boolean that_present_locked = true && that.isSetLocked();
    if (this_present_locked || that_present_locked) {
      if (!(this_present_locked && that_present_locked))
        return false;
      if (!this.locked.equals(that.locked))
        return false;
    }

    boolean this_present_team = true && this.isSetTeam();
    boolean that_present_team = true && that.isSetTeam();
    if (this_present_team || that_present_team) {
      if (!(this_present_team && that_present_team))
        return false;
      if (!this.team.equals(that.team))
        return false;
    }

    boolean this_present_rootHeaders = true && this.isSetRootHeaders();
    boolean that_present_rootHeaders = true && that.isSetRootHeaders();
    if (this_present_rootHeaders || that_present_rootHeaders) {
      if (!(this_present_rootHeaders && that_present_rootHeaders))
        return false;
      if (!this.rootHeaders.equals(that.rootHeaders))
        return false;
    }

    boolean this_present_stepGroup = true && this.isSetStepGroup();
    boolean that_present_stepGroup = true && that.isSetStepGroup();
    if (this_present_stepGroup || that_present_stepGroup) {
      if (!(this_present_stepGroup && that_present_stepGroup))
        return false;
      if (!this.stepGroup.equals(that.stepGroup))
        return false;
    }

    boolean this_present_documents = true && this.isSetDocuments();
    boolean that_present_documents = true && that.isSetDocuments();
    if (this_present_documents || that_present_documents) {
      if (!(this_present_documents && that_present_documents))
        return false;
      if (!this.documents.equals(that.documents))
        return false;
    }

    boolean this_present_lastPublishedAt = true && this.isSetLastPublishedAt();
    boolean that_present_lastPublishedAt = true && that.isSetLastPublishedAt();
    if (this_present_lastPublishedAt || that_present_lastPublishedAt) {
      if (!(this_present_lastPublishedAt && that_present_lastPublishedAt))
        return false;
      if (this.lastPublishedAt != that.lastPublishedAt)
        return false;
    }

    boolean this_present_lastAuthor = true && this.isSetLastAuthor();
    boolean that_present_lastAuthor = true && that.isSetLastAuthor();
    if (this_present_lastAuthor || that_present_lastAuthor) {
      if (!(this_present_lastAuthor && that_present_lastAuthor))
        return false;
      if (!this.lastAuthor.equals(that.lastAuthor))
        return false;
    }

    boolean this_present_stats = true && this.isSetStats();
    boolean that_present_stats = true && that.isSetStats();
    if (this_present_stats || that_present_stats) {
      if (!(this_present_stats && that_present_stats))
        return false;
      if (!this.stats.equals(that.stats))
        return false;
    }

    boolean this_present_templateTags = true && this.isSetTemplateTags();
    boolean that_present_templateTags = true && that.isSetTemplateTags();
    if (this_present_templateTags || that_present_templateTags) {
      if (!(this_present_templateTags && that_present_templateTags))
        return false;
      if (!this.templateTags.equals(that.templateTags))
        return false;
    }

    boolean this_present_drafts = true && this.isSetDrafts();
    boolean that_present_drafts = true && that.isSetDrafts();
    if (this_present_drafts || that_present_drafts) {
      if (!(this_present_drafts && that_present_drafts))
        return false;
      if (!this.drafts.equals(that.drafts))
        return false;
    }

    boolean this_present_lastPublishedVersion = true && this.isSetLastPublishedVersion();
    boolean that_present_lastPublishedVersion = true && that.isSetLastPublishedVersion();
    if (this_present_lastPublishedVersion || that_present_lastPublishedVersion) {
      if (!(this_present_lastPublishedVersion && that_present_lastPublishedVersion))
        return false;
      if (this.lastPublishedVersion != that.lastPublishedVersion)
        return false;
    }

    boolean this_present_lastPublishTime = true && this.isSetLastPublishTime();
    boolean that_present_lastPublishTime = true && that.isSetLastPublishTime();
    if (this_present_lastPublishTime || that_present_lastPublishTime) {
      if (!(this_present_lastPublishTime && that_present_lastPublishTime))
        return false;
      if (this.lastPublishTime != that.lastPublishTime)
        return false;
    }

    boolean this_present_lastModifiedAt = true && this.isSetLastModifiedAt();
    boolean that_present_lastModifiedAt = true && that.isSetLastModifiedAt();
    if (this_present_lastModifiedAt || that_present_lastModifiedAt) {
      if (!(this_present_lastModifiedAt && that_present_lastModifiedAt))
        return false;
      if (this.lastModifiedAt != that.lastModifiedAt)
        return false;
    }

    boolean this_present_attributes = true && this.isSetAttributes();
    boolean that_present_attributes = true && that.isSetAttributes();
    if (this_present_attributes || that_present_attributes) {
      if (!(this_present_attributes && that_present_attributes))
        return false;
      if (!this.attributes.equals(that.attributes))
        return false;
    }

    boolean this_present_references = true && this.isSetReferences();
    boolean that_present_references = true && that.isSetReferences();
    if (this_present_references || that_present_references) {
      if (!(this_present_references && that_present_references))
        return false;
      if (!this.references.equals(that.references))
        return false;
    }

    boolean this_present_plannedDataSheetIds = true && this.isSetPlannedDataSheetIds();
    boolean that_present_plannedDataSheetIds = true && that.isSetPlannedDataSheetIds();
    if (this_present_plannedDataSheetIds || that_present_plannedDataSheetIds) {
      if (!(this_present_plannedDataSheetIds && that_present_plannedDataSheetIds))
        return false;
      if (!this.plannedDataSheetIds.equals(that.plannedDataSheetIds))
        return false;
    }

    boolean this_present_snapshottedDataSheetValues = true && this.isSetSnapshottedDataSheetValues();
    boolean that_present_snapshottedDataSheetValues = true && that.isSetSnapshottedDataSheetValues();
    if (this_present_snapshottedDataSheetValues || that_present_snapshottedDataSheetValues) {
      if (!(this_present_snapshottedDataSheetValues && that_present_snapshottedDataSheetValues))
        return false;
      if (!this.snapshottedDataSheetValues.equals(that.snapshottedDataSheetValues))
        return false;
    }

    boolean this_present_structDiff = true && this.isSetStructDiff();
    boolean that_present_structDiff = true && that.isSetStructDiff();
    if (this_present_structDiff || that_present_structDiff) {
      if (!(this_present_structDiff && that_present_structDiff))
        return false;
      if (!this.structDiff.equals(that.structDiff))
        return false;
    }

    boolean this_present_titleDiff = true && this.isSetTitleDiff();
    boolean that_present_titleDiff = true && that.isSetTitleDiff();
    if (this_present_titleDiff || that_present_titleDiff) {
      if (!(this_present_titleDiff && that_present_titleDiff))
        return false;
      if (!this.titleDiff.equals(that.titleDiff))
        return false;
    }

    boolean this_present_descripDiff = true && this.isSetDescripDiff();
    boolean that_present_descripDiff = true && that.isSetDescripDiff();
    if (this_present_descripDiff || that_present_descripDiff) {
      if (!(this_present_descripDiff && that_present_descripDiff))
        return false;
      if (!this.descripDiff.equals(that.descripDiff))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_internalVersion = true;
    list.add(present_internalVersion);
    if (present_internalVersion)
      list.add(internalVersion);

    boolean present_publicVersion = true;
    list.add(present_publicVersion);
    if (present_publicVersion)
      list.add(publicVersion);

    boolean present_title = true && (isSetTitle());
    list.add(present_title);
    if (present_title)
      list.add(title);

    boolean present_descrip = true && (isSetDescrip());
    list.add(present_descrip);
    if (present_descrip)
      list.add(descrip);

    boolean present_status = true && (isSetStatus());
    list.add(present_status);
    if (present_status)
      list.add(status.getValue());

    boolean present_stepGroupId = true && (isSetStepGroupId());
    list.add(present_stepGroupId);
    if (present_stepGroupId)
      list.add(stepGroupId);

    boolean present_teamId = true && (isSetTeamId());
    list.add(present_teamId);
    if (present_teamId)
      list.add(teamId);

    boolean present_UNSUPPORTEDdocumentEmailAddress = true && (isSetUNSUPPORTEDdocumentEmailAddress());
    list.add(present_UNSUPPORTEDdocumentEmailAddress);
    if (present_UNSUPPORTEDdocumentEmailAddress)
      list.add(UNSUPPORTEDdocumentEmailAddress);

    boolean present_lastAuthoredAt = true;
    list.add(present_lastAuthoredAt);
    if (present_lastAuthoredAt)
      list.add(lastAuthoredAt);

    boolean present_publishedAt = true;
    list.add(present_publishedAt);
    if (present_publishedAt)
      list.add(publishedAt);

    boolean present_archivedAt = true;
    list.add(present_archivedAt);
    if (present_archivedAt)
      list.add(archivedAt);

    boolean present_lastAuthorId = true && (isSetLastAuthorId());
    list.add(present_lastAuthorId);
    if (present_lastAuthorId)
      list.add(lastAuthorId);

    boolean present_system = true;
    list.add(present_system);
    if (present_system)
      list.add(system);

    boolean present_metadataEntry = true && (isSetMetadataEntry());
    list.add(present_metadataEntry);
    if (present_metadataEntry)
      list.add(metadataEntry);

    boolean present_metadataById = true && (isSetMetadataById());
    list.add(present_metadataById);
    if (present_metadataById)
      list.add(metadataById);

    boolean present_publishedVersion = true;
    list.add(present_publishedVersion);
    if (present_publishedVersion)
      list.add(publishedVersion);

    boolean present_typ = true && (isSetTyp());
    list.add(present_typ);
    if (present_typ)
      list.add(typ.getValue());

    boolean present_locked = true && (isSetLocked());
    list.add(present_locked);
    if (present_locked)
      list.add(locked);

    boolean present_team = true && (isSetTeam());
    list.add(present_team);
    if (present_team)
      list.add(team);

    boolean present_rootHeaders = true && (isSetRootHeaders());
    list.add(present_rootHeaders);
    if (present_rootHeaders)
      list.add(rootHeaders);

    boolean present_stepGroup = true && (isSetStepGroup());
    list.add(present_stepGroup);
    if (present_stepGroup)
      list.add(stepGroup);

    boolean present_documents = true && (isSetDocuments());
    list.add(present_documents);
    if (present_documents)
      list.add(documents);

    boolean present_lastPublishedAt = true && (isSetLastPublishedAt());
    list.add(present_lastPublishedAt);
    if (present_lastPublishedAt)
      list.add(lastPublishedAt);

    boolean present_lastAuthor = true && (isSetLastAuthor());
    list.add(present_lastAuthor);
    if (present_lastAuthor)
      list.add(lastAuthor);

    boolean present_stats = true && (isSetStats());
    list.add(present_stats);
    if (present_stats)
      list.add(stats);

    boolean present_templateTags = true && (isSetTemplateTags());
    list.add(present_templateTags);
    if (present_templateTags)
      list.add(templateTags);

    boolean present_drafts = true && (isSetDrafts());
    list.add(present_drafts);
    if (present_drafts)
      list.add(drafts);

    boolean present_lastPublishedVersion = true && (isSetLastPublishedVersion());
    list.add(present_lastPublishedVersion);
    if (present_lastPublishedVersion)
      list.add(lastPublishedVersion);

    boolean present_lastPublishTime = true && (isSetLastPublishTime());
    list.add(present_lastPublishTime);
    if (present_lastPublishTime)
      list.add(lastPublishTime);

    boolean present_lastModifiedAt = true && (isSetLastModifiedAt());
    list.add(present_lastModifiedAt);
    if (present_lastModifiedAt)
      list.add(lastModifiedAt);

    boolean present_attributes = true && (isSetAttributes());
    list.add(present_attributes);
    if (present_attributes)
      list.add(attributes);

    boolean present_references = true && (isSetReferences());
    list.add(present_references);
    if (present_references)
      list.add(references);

    boolean present_plannedDataSheetIds = true && (isSetPlannedDataSheetIds());
    list.add(present_plannedDataSheetIds);
    if (present_plannedDataSheetIds)
      list.add(plannedDataSheetIds);

    boolean present_snapshottedDataSheetValues = true && (isSetSnapshottedDataSheetValues());
    list.add(present_snapshottedDataSheetValues);
    if (present_snapshottedDataSheetValues)
      list.add(snapshottedDataSheetValues);

    boolean present_structDiff = true && (isSetStructDiff());
    list.add(present_structDiff);
    if (present_structDiff)
      list.add(structDiff.getValue());

    boolean present_titleDiff = true && (isSetTitleDiff());
    list.add(present_titleDiff);
    if (present_titleDiff)
      list.add(titleDiff);

    boolean present_descripDiff = true && (isSetDescripDiff());
    list.add(present_descripDiff);
    if (present_descripDiff)
      list.add(descripDiff);

    return list.hashCode();
  }

  @Override
  public int compareTo(JobTemplateModular other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInternalVersion()).compareTo(other.isSetInternalVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInternalVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.internalVersion, other.internalVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPublicVersion()).compareTo(other.isSetPublicVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPublicVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.publicVersion, other.publicVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTitle()).compareTo(other.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescrip()).compareTo(other.isSetDescrip());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescrip()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.descrip, other.descrip);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStepGroupId()).compareTo(other.isSetStepGroupId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStepGroupId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stepGroupId, other.stepGroupId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTeamId()).compareTo(other.isSetTeamId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeamId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teamId, other.teamId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUNSUPPORTEDdocumentEmailAddress()).compareTo(other.isSetUNSUPPORTEDdocumentEmailAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUNSUPPORTEDdocumentEmailAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.UNSUPPORTEDdocumentEmailAddress, other.UNSUPPORTEDdocumentEmailAddress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastAuthoredAt()).compareTo(other.isSetLastAuthoredAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastAuthoredAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastAuthoredAt, other.lastAuthoredAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPublishedAt()).compareTo(other.isSetPublishedAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPublishedAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.publishedAt, other.publishedAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArchivedAt()).compareTo(other.isSetArchivedAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArchivedAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.archivedAt, other.archivedAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastAuthorId()).compareTo(other.isSetLastAuthorId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastAuthorId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastAuthorId, other.lastAuthorId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSystem()).compareTo(other.isSetSystem());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSystem()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.system, other.system);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMetadataEntry()).compareTo(other.isSetMetadataEntry());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMetadataEntry()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metadataEntry, other.metadataEntry);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMetadataById()).compareTo(other.isSetMetadataById());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMetadataById()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metadataById, other.metadataById);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPublishedVersion()).compareTo(other.isSetPublishedVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPublishedVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.publishedVersion, other.publishedVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTyp()).compareTo(other.isSetTyp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTyp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.typ, other.typ);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocked()).compareTo(other.isSetLocked());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocked()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locked, other.locked);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTeam()).compareTo(other.isSetTeam());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeam()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.team, other.team);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRootHeaders()).compareTo(other.isSetRootHeaders());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRootHeaders()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rootHeaders, other.rootHeaders);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStepGroup()).compareTo(other.isSetStepGroup());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStepGroup()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stepGroup, other.stepGroup);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDocuments()).compareTo(other.isSetDocuments());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDocuments()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.documents, other.documents);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastPublishedAt()).compareTo(other.isSetLastPublishedAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastPublishedAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastPublishedAt, other.lastPublishedAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastAuthor()).compareTo(other.isSetLastAuthor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastAuthor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastAuthor, other.lastAuthor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStats()).compareTo(other.isSetStats());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStats()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stats, other.stats);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTemplateTags()).compareTo(other.isSetTemplateTags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTemplateTags()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.templateTags, other.templateTags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDrafts()).compareTo(other.isSetDrafts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDrafts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.drafts, other.drafts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastPublishedVersion()).compareTo(other.isSetLastPublishedVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastPublishedVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastPublishedVersion, other.lastPublishedVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastPublishTime()).compareTo(other.isSetLastPublishTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastPublishTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastPublishTime, other.lastPublishTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastModifiedAt()).compareTo(other.isSetLastModifiedAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastModifiedAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastModifiedAt, other.lastModifiedAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAttributes()).compareTo(other.isSetAttributes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAttributes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attributes, other.attributes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReferences()).compareTo(other.isSetReferences());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReferences()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.references, other.references);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlannedDataSheetIds()).compareTo(other.isSetPlannedDataSheetIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlannedDataSheetIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.plannedDataSheetIds, other.plannedDataSheetIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSnapshottedDataSheetValues()).compareTo(other.isSetSnapshottedDataSheetValues());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSnapshottedDataSheetValues()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.snapshottedDataSheetValues, other.snapshottedDataSheetValues);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStructDiff()).compareTo(other.isSetStructDiff());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStructDiff()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.structDiff, other.structDiff);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTitleDiff()).compareTo(other.isSetTitleDiff());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitleDiff()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.titleDiff, other.titleDiff);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescripDiff()).compareTo(other.isSetDescripDiff());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescripDiff()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.descripDiff, other.descripDiff);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("JobTemplateModular(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("internalVersion:");
    sb.append(this.internalVersion);
    first = false;
    if (!first) sb.append(", ");
    sb.append("publicVersion:");
    sb.append(this.publicVersion);
    first = false;
    if (!first) sb.append(", ");
    sb.append("title:");
    if (this.title == null) {
      sb.append("null");
    } else {
      sb.append(this.title);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("descrip:");
    if (this.descrip == null) {
      sb.append("null");
    } else {
      sb.append(this.descrip);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("stepGroupId:");
    if (this.stepGroupId == null) {
      sb.append("null");
    } else {
      sb.append(this.stepGroupId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("teamId:");
    if (this.teamId == null) {
      sb.append("null");
    } else {
      sb.append(this.teamId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("UNSUPPORTEDdocumentEmailAddress:");
    if (this.UNSUPPORTEDdocumentEmailAddress == null) {
      sb.append("null");
    } else {
      sb.append(this.UNSUPPORTEDdocumentEmailAddress);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastAuthoredAt:");
    sb.append(this.lastAuthoredAt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("publishedAt:");
    sb.append(this.publishedAt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("archivedAt:");
    sb.append(this.archivedAt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastAuthorId:");
    if (this.lastAuthorId == null) {
      sb.append("null");
    } else {
      sb.append(this.lastAuthorId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("system:");
    sb.append(this.system);
    first = false;
    if (!first) sb.append(", ");
    sb.append("metadataEntry:");
    if (this.metadataEntry == null) {
      sb.append("null");
    } else {
      sb.append(this.metadataEntry);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("metadataById:");
    if (this.metadataById == null) {
      sb.append("null");
    } else {
      sb.append(this.metadataById);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("publishedVersion:");
    sb.append(this.publishedVersion);
    first = false;
    if (!first) sb.append(", ");
    sb.append("typ:");
    if (this.typ == null) {
      sb.append("null");
    } else {
      sb.append(this.typ);
    }
    first = false;
    if (isSetLocked()) {
      if (!first) sb.append(", ");
      sb.append("locked:");
      if (this.locked == null) {
        sb.append("null");
      } else {
        sb.append(this.locked);
      }
      first = false;
    }
    if (isSetTeam()) {
      if (!first) sb.append(", ");
      sb.append("team:");
      if (this.team == null) {
        sb.append("null");
      } else {
        sb.append(this.team);
      }
      first = false;
    }
    if (isSetRootHeaders()) {
      if (!first) sb.append(", ");
      sb.append("rootHeaders:");
      if (this.rootHeaders == null) {
        sb.append("null");
      } else {
        sb.append(this.rootHeaders);
      }
      first = false;
    }
    if (isSetStepGroup()) {
      if (!first) sb.append(", ");
      sb.append("stepGroup:");
      if (this.stepGroup == null) {
        sb.append("null");
      } else {
        sb.append(this.stepGroup);
      }
      first = false;
    }
    if (isSetDocuments()) {
      if (!first) sb.append(", ");
      sb.append("documents:");
      if (this.documents == null) {
        sb.append("null");
      } else {
        sb.append(this.documents);
      }
      first = false;
    }
    if (isSetLastPublishedAt()) {
      if (!first) sb.append(", ");
      sb.append("lastPublishedAt:");
      sb.append(this.lastPublishedAt);
      first = false;
    }
    if (isSetLastAuthor()) {
      if (!first) sb.append(", ");
      sb.append("lastAuthor:");
      if (this.lastAuthor == null) {
        sb.append("null");
      } else {
        sb.append(this.lastAuthor);
      }
      first = false;
    }
    if (isSetStats()) {
      if (!first) sb.append(", ");
      sb.append("stats:");
      if (this.stats == null) {
        sb.append("null");
      } else {
        sb.append(this.stats);
      }
      first = false;
    }
    if (isSetTemplateTags()) {
      if (!first) sb.append(", ");
      sb.append("templateTags:");
      if (this.templateTags == null) {
        sb.append("null");
      } else {
        sb.append(this.templateTags);
      }
      first = false;
    }
    if (isSetDrafts()) {
      if (!first) sb.append(", ");
      sb.append("drafts:");
      if (this.drafts == null) {
        sb.append("null");
      } else {
        sb.append(this.drafts);
      }
      first = false;
    }
    if (isSetLastPublishedVersion()) {
      if (!first) sb.append(", ");
      sb.append("lastPublishedVersion:");
      sb.append(this.lastPublishedVersion);
      first = false;
    }
    if (isSetLastPublishTime()) {
      if (!first) sb.append(", ");
      sb.append("lastPublishTime:");
      sb.append(this.lastPublishTime);
      first = false;
    }
    if (isSetLastModifiedAt()) {
      if (!first) sb.append(", ");
      sb.append("lastModifiedAt:");
      sb.append(this.lastModifiedAt);
      first = false;
    }
    if (isSetAttributes()) {
      if (!first) sb.append(", ");
      sb.append("attributes:");
      if (this.attributes == null) {
        sb.append("null");
      } else {
        sb.append(this.attributes);
      }
      first = false;
    }
    if (isSetReferences()) {
      if (!first) sb.append(", ");
      sb.append("references:");
      if (this.references == null) {
        sb.append("null");
      } else {
        sb.append(this.references);
      }
      first = false;
    }
    if (isSetPlannedDataSheetIds()) {
      if (!first) sb.append(", ");
      sb.append("plannedDataSheetIds:");
      if (this.plannedDataSheetIds == null) {
        sb.append("null");
      } else {
        sb.append(this.plannedDataSheetIds);
      }
      first = false;
    }
    if (isSetSnapshottedDataSheetValues()) {
      if (!first) sb.append(", ");
      sb.append("snapshottedDataSheetValues:");
      if (this.snapshottedDataSheetValues == null) {
        sb.append("null");
      } else {
        sb.append(this.snapshottedDataSheetValues);
      }
      first = false;
    }
    if (isSetStructDiff()) {
      if (!first) sb.append(", ");
      sb.append("structDiff:");
      if (this.structDiff == null) {
        sb.append("null");
      } else {
        sb.append(this.structDiff);
      }
      first = false;
    }
    if (isSetTitleDiff()) {
      if (!first) sb.append(", ");
      sb.append("titleDiff:");
      if (this.titleDiff == null) {
        sb.append("null");
      } else {
        sb.append(this.titleDiff);
      }
      first = false;
    }
    if (isSetDescripDiff()) {
      if (!first) sb.append(", ");
      sb.append("descripDiff:");
      if (this.descripDiff == null) {
        sb.append("null");
      } else {
        sb.append(this.descripDiff);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (locked != null) {
      locked.validate();
    }
    if (team != null) {
      team.validate();
    }
    if (rootHeaders != null) {
      rootHeaders.validate();
    }
    if (stepGroup != null) {
      stepGroup.validate();
    }
    if (lastAuthor != null) {
      lastAuthor.validate();
    }
    if (stats != null) {
      stats.validate();
    }
    if (titleDiff != null) {
      titleDiff.validate();
    }
    if (descripDiff != null) {
      descripDiff.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class JobTemplateModularStandardSchemeFactory implements SchemeFactory {
    public JobTemplateModularStandardScheme getScheme() {
      return new JobTemplateModularStandardScheme();
    }
  }

  private static class JobTemplateModularStandardScheme extends StandardScheme<JobTemplateModular> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, JobTemplateModular struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // INTERNAL_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.internalVersion = iprot.readI32();
              struct.setInternalVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PUBLIC_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.publicVersion = iprot.readI32();
              struct.setPublicVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DESCRIP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.descrip = iprot.readString();
              struct.setDescripIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = com.wi.director.thrift.v1.jobtemplate.JobTemplateStatus.findByValue(iprot.readI32());
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // STEP_GROUP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stepGroupId = iprot.readString();
              struct.setStepGroupIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TEAM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.teamId = iprot.readString();
              struct.setTeamIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // UNSUPPORTEDDOCUMENT_EMAIL_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.UNSUPPORTEDdocumentEmailAddress = iprot.readString();
              struct.setUNSUPPORTEDdocumentEmailAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // LAST_AUTHORED_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastAuthoredAt = iprot.readI64();
              struct.setLastAuthoredAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // PUBLISHED_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.publishedAt = iprot.readI64();
              struct.setPublishedAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // ARCHIVED_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.archivedAt = iprot.readI64();
              struct.setArchivedAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // LAST_AUTHOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastAuthorId = iprot.readString();
              struct.setLastAuthorIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // SYSTEM
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.system = iprot.readBool();
              struct.setSystemIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // METADATA_ENTRY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list21 = iprot.readListBegin();
                struct.metadataEntry = new ArrayList<com.wi.director.thrift.v1.metadata.MetadataEntry>(_list21.size);
                com.wi.director.thrift.v1.metadata.MetadataEntry _elem22;
                for (int _i23 = 0; _i23 < _list21.size; ++_i23)
                {
                  _elem22 = new com.wi.director.thrift.v1.metadata.MetadataEntry();
                  _elem22.read(iprot);
                  struct.metadataEntry.add(_elem22);
                }
                iprot.readListEnd();
              }
              struct.setMetadataEntryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // METADATA_BY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map24 = iprot.readMapBegin();
                struct.metadataById = new HashMap<String,com.wi.director.thrift.v1.metadata.MetadataEntry>(2*_map24.size);
                String _key25;
                com.wi.director.thrift.v1.metadata.MetadataEntry _val26;
                for (int _i27 = 0; _i27 < _map24.size; ++_i27)
                {
                  _key25 = iprot.readString();
                  _val26 = new com.wi.director.thrift.v1.metadata.MetadataEntry();
                  _val26.read(iprot);
                  struct.metadataById.put(_key25, _val26);
                }
                iprot.readMapEnd();
              }
              struct.setMetadataByIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // PUBLISHED_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.publishedVersion = iprot.readI32();
              struct.setPublishedVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // TYP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.typ = com.wi.director.thrift.v1.jobtemplate.TemplateType.findByValue(iprot.readI32());
              struct.setTypIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // LOCKED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.locked = new JobTemplateLock();
              struct.locked.read(iprot);
              struct.setLockedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 101: // TEAM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.team = new com.wi.director.thrift.v1.team.TeamModular();
              struct.team.read(iprot);
              struct.setTeamIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 102: // ROOT_HEADERS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.rootHeaders = new com.wi.director.thrift.v1.group_headers.StepGroupHeaders();
              struct.rootHeaders.read(iprot);
              struct.setRootHeadersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 103: // STEP_GROUP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.stepGroup = new com.wi.director.thrift.v1.step.BaseStep();
              struct.stepGroup.read(iprot);
              struct.setStepGroupIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 104: // DOCUMENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list28 = iprot.readListBegin();
                struct.documents = new ArrayList<com.wi.director.thrift.v1.document.Document>(_list28.size);
                com.wi.director.thrift.v1.document.Document _elem29;
                for (int _i30 = 0; _i30 < _list28.size; ++_i30)
                {
                  _elem29 = new com.wi.director.thrift.v1.document.Document();
                  _elem29.read(iprot);
                  struct.documents.add(_elem29);
                }
                iprot.readListEnd();
              }
              struct.setDocumentsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 105: // LAST_PUBLISHED_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastPublishedAt = iprot.readI64();
              struct.setLastPublishedAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 106: // LAST_AUTHOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.lastAuthor = new com.wi.director.thrift.v1.user.User();
              struct.lastAuthor.read(iprot);
              struct.setLastAuthorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 107: // STATS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.stats = new JobTemplateStats();
              struct.stats.read(iprot);
              struct.setStatsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 108: // TEMPLATE_TAGS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list31 = iprot.readListBegin();
                struct.templateTags = new ArrayList<TemplateTag>(_list31.size);
                TemplateTag _elem32;
                for (int _i33 = 0; _i33 < _list31.size; ++_i33)
                {
                  _elem32 = new TemplateTag();
                  _elem32.read(iprot);
                  struct.templateTags.add(_elem32);
                }
                iprot.readListEnd();
              }
              struct.setTemplateTagsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 109: // DRAFTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list34 = iprot.readListBegin();
                struct.drafts = new ArrayList<TemplateDraft>(_list34.size);
                TemplateDraft _elem35;
                for (int _i36 = 0; _i36 < _list34.size; ++_i36)
                {
                  _elem35 = new TemplateDraft();
                  _elem35.read(iprot);
                  struct.drafts.add(_elem35);
                }
                iprot.readListEnd();
              }
              struct.setDraftsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 110: // LAST_PUBLISHED_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.lastPublishedVersion = iprot.readI32();
              struct.setLastPublishedVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 111: // LAST_PUBLISH_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastPublishTime = iprot.readI64();
              struct.setLastPublishTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 112: // LAST_MODIFIED_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastModifiedAt = iprot.readI64();
              struct.setLastModifiedAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 113: // ATTRIBUTES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list37 = iprot.readListBegin();
                struct.attributes = new ArrayList<com.wi.director.thrift.v1.abac.AbacAttribute>(_list37.size);
                com.wi.director.thrift.v1.abac.AbacAttribute _elem38;
                for (int _i39 = 0; _i39 < _list37.size; ++_i39)
                {
                  _elem38 = new com.wi.director.thrift.v1.abac.AbacAttribute();
                  _elem38.read(iprot);
                  struct.attributes.add(_elem38);
                }
                iprot.readListEnd();
              }
              struct.setAttributesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 115: // REFERENCES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map40 = iprot.readMapBegin();
                struct.references = new HashMap<com.parsable.thrift.v1.reference.RefSource,Set<String>>(2*_map40.size);
                com.parsable.thrift.v1.reference.RefSource _key41;
                Set<String> _val42;
                for (int _i43 = 0; _i43 < _map40.size; ++_i43)
                {
                  _key41 = com.parsable.thrift.v1.reference.RefSource.findByValue(iprot.readI32());
                  {
                    org.apache.thrift.protocol.TSet _set44 = iprot.readSetBegin();
                    _val42 = new HashSet<String>(2*_set44.size);
                    String _elem45;
                    for (int _i46 = 0; _i46 < _set44.size; ++_i46)
                    {
                      _elem45 = iprot.readString();
                      _val42.add(_elem45);
                    }
                    iprot.readSetEnd();
                  }
                  struct.references.put(_key41, _val42);
                }
                iprot.readMapEnd();
              }
              struct.setReferencesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 120: // PLANNED_DATA_SHEET_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map47 = iprot.readMapBegin();
                struct.plannedDataSheetIds = new HashMap<String,String>(2*_map47.size);
                String _key48;
                String _val49;
                for (int _i50 = 0; _i50 < _map47.size; ++_i50)
                {
                  _key48 = iprot.readString();
                  _val49 = iprot.readString();
                  struct.plannedDataSheetIds.put(_key48, _val49);
                }
                iprot.readMapEnd();
              }
              struct.setPlannedDataSheetIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 121: // SNAPSHOTTED_DATA_SHEET_VALUES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map51 = iprot.readMapBegin();
                struct.snapshottedDataSheetValues = new HashMap<String,com.wi.director.thrift.v1.datasheet.DataSheetValue>(2*_map51.size);
                String _key52;
                com.wi.director.thrift.v1.datasheet.DataSheetValue _val53;
                for (int _i54 = 0; _i54 < _map51.size; ++_i54)
                {
                  _key52 = iprot.readString();
                  _val53 = new com.wi.director.thrift.v1.datasheet.DataSheetValue();
                  _val53.read(iprot);
                  struct.snapshottedDataSheetValues.put(_key52, _val53);
                }
                iprot.readMapEnd();
              }
              struct.setSnapshottedDataSheetValuesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 200: // STRUCT_DIFF
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.structDiff = com.wi.director.thrift.v1.diff.ChangeType.findByValue(iprot.readI32());
              struct.setStructDiffIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 201: // TITLE_DIFF
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.titleDiff = new com.wi.director.thrift.v1.diff.StringDiff();
              struct.titleDiff.read(iprot);
              struct.setTitleDiffIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 202: // DESCRIP_DIFF
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.descripDiff = new com.wi.director.thrift.v1.diff.StringDiff();
              struct.descripDiff.read(iprot);
              struct.setDescripDiffIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, JobTemplateModular struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(INTERNAL_VERSION_FIELD_DESC);
      oprot.writeI32(struct.internalVersion);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PUBLIC_VERSION_FIELD_DESC);
      oprot.writeI32(struct.publicVersion);
      oprot.writeFieldEnd();
      if (struct.title != null) {
        oprot.writeFieldBegin(TITLE_FIELD_DESC);
        oprot.writeString(struct.title);
        oprot.writeFieldEnd();
      }
      if (struct.descrip != null) {
        oprot.writeFieldBegin(DESCRIP_FIELD_DESC);
        oprot.writeString(struct.descrip);
        oprot.writeFieldEnd();
      }
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeI32(struct.status.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.stepGroupId != null) {
        oprot.writeFieldBegin(STEP_GROUP_ID_FIELD_DESC);
        oprot.writeString(struct.stepGroupId);
        oprot.writeFieldEnd();
      }
      if (struct.teamId != null) {
        oprot.writeFieldBegin(TEAM_ID_FIELD_DESC);
        oprot.writeString(struct.teamId);
        oprot.writeFieldEnd();
      }
      if (struct.UNSUPPORTEDdocumentEmailAddress != null) {
        oprot.writeFieldBegin(UNSUPPORTEDDOCUMENT_EMAIL_ADDRESS_FIELD_DESC);
        oprot.writeString(struct.UNSUPPORTEDdocumentEmailAddress);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LAST_AUTHORED_AT_FIELD_DESC);
      oprot.writeI64(struct.lastAuthoredAt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PUBLISHED_AT_FIELD_DESC);
      oprot.writeI64(struct.publishedAt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ARCHIVED_AT_FIELD_DESC);
      oprot.writeI64(struct.archivedAt);
      oprot.writeFieldEnd();
      if (struct.lastAuthorId != null) {
        oprot.writeFieldBegin(LAST_AUTHOR_ID_FIELD_DESC);
        oprot.writeString(struct.lastAuthorId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SYSTEM_FIELD_DESC);
      oprot.writeBool(struct.system);
      oprot.writeFieldEnd();
      if (struct.metadataEntry != null) {
        oprot.writeFieldBegin(METADATA_ENTRY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.metadataEntry.size()));
          for (com.wi.director.thrift.v1.metadata.MetadataEntry _iter55 : struct.metadataEntry)
          {
            _iter55.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.metadataById != null) {
        oprot.writeFieldBegin(METADATA_BY_ID_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.metadataById.size()));
          for (Map.Entry<String, com.wi.director.thrift.v1.metadata.MetadataEntry> _iter56 : struct.metadataById.entrySet())
          {
            oprot.writeString(_iter56.getKey());
            _iter56.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PUBLISHED_VERSION_FIELD_DESC);
      oprot.writeI32(struct.publishedVersion);
      oprot.writeFieldEnd();
      if (struct.typ != null) {
        oprot.writeFieldBegin(TYP_FIELD_DESC);
        oprot.writeI32(struct.typ.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.locked != null) {
        if (struct.isSetLocked()) {
          oprot.writeFieldBegin(LOCKED_FIELD_DESC);
          struct.locked.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.team != null) {
        if (struct.isSetTeam()) {
          oprot.writeFieldBegin(TEAM_FIELD_DESC);
          struct.team.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.rootHeaders != null) {
        if (struct.isSetRootHeaders()) {
          oprot.writeFieldBegin(ROOT_HEADERS_FIELD_DESC);
          struct.rootHeaders.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.stepGroup != null) {
        if (struct.isSetStepGroup()) {
          oprot.writeFieldBegin(STEP_GROUP_FIELD_DESC);
          struct.stepGroup.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.documents != null) {
        if (struct.isSetDocuments()) {
          oprot.writeFieldBegin(DOCUMENTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.documents.size()));
            for (com.wi.director.thrift.v1.document.Document _iter57 : struct.documents)
            {
              _iter57.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetLastPublishedAt()) {
        oprot.writeFieldBegin(LAST_PUBLISHED_AT_FIELD_DESC);
        oprot.writeI64(struct.lastPublishedAt);
        oprot.writeFieldEnd();
      }
      if (struct.lastAuthor != null) {
        if (struct.isSetLastAuthor()) {
          oprot.writeFieldBegin(LAST_AUTHOR_FIELD_DESC);
          struct.lastAuthor.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.stats != null) {
        if (struct.isSetStats()) {
          oprot.writeFieldBegin(STATS_FIELD_DESC);
          struct.stats.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.templateTags != null) {
        if (struct.isSetTemplateTags()) {
          oprot.writeFieldBegin(TEMPLATE_TAGS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.templateTags.size()));
            for (TemplateTag _iter58 : struct.templateTags)
            {
              _iter58.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.drafts != null) {
        if (struct.isSetDrafts()) {
          oprot.writeFieldBegin(DRAFTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.drafts.size()));
            for (TemplateDraft _iter59 : struct.drafts)
            {
              _iter59.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetLastPublishedVersion()) {
        oprot.writeFieldBegin(LAST_PUBLISHED_VERSION_FIELD_DESC);
        oprot.writeI32(struct.lastPublishedVersion);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLastPublishTime()) {
        oprot.writeFieldBegin(LAST_PUBLISH_TIME_FIELD_DESC);
        oprot.writeI64(struct.lastPublishTime);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLastModifiedAt()) {
        oprot.writeFieldBegin(LAST_MODIFIED_AT_FIELD_DESC);
        oprot.writeI64(struct.lastModifiedAt);
        oprot.writeFieldEnd();
      }
      if (struct.attributes != null) {
        if (struct.isSetAttributes()) {
          oprot.writeFieldBegin(ATTRIBUTES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.attributes.size()));
            for (com.wi.director.thrift.v1.abac.AbacAttribute _iter60 : struct.attributes)
            {
              _iter60.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.references != null) {
        if (struct.isSetReferences()) {
          oprot.writeFieldBegin(REFERENCES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.SET, struct.references.size()));
            for (Map.Entry<com.parsable.thrift.v1.reference.RefSource, Set<String>> _iter61 : struct.references.entrySet())
            {
              oprot.writeI32(_iter61.getKey().getValue());
              {
                oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, _iter61.getValue().size()));
                for (String _iter62 : _iter61.getValue())
                {
                  oprot.writeString(_iter62);
                }
                oprot.writeSetEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.plannedDataSheetIds != null) {
        if (struct.isSetPlannedDataSheetIds()) {
          oprot.writeFieldBegin(PLANNED_DATA_SHEET_IDS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.plannedDataSheetIds.size()));
            for (Map.Entry<String, String> _iter63 : struct.plannedDataSheetIds.entrySet())
            {
              oprot.writeString(_iter63.getKey());
              oprot.writeString(_iter63.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.snapshottedDataSheetValues != null) {
        if (struct.isSetSnapshottedDataSheetValues()) {
          oprot.writeFieldBegin(SNAPSHOTTED_DATA_SHEET_VALUES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.snapshottedDataSheetValues.size()));
            for (Map.Entry<String, com.wi.director.thrift.v1.datasheet.DataSheetValue> _iter64 : struct.snapshottedDataSheetValues.entrySet())
            {
              oprot.writeString(_iter64.getKey());
              _iter64.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.structDiff != null) {
        if (struct.isSetStructDiff()) {
          oprot.writeFieldBegin(STRUCT_DIFF_FIELD_DESC);
          oprot.writeI32(struct.structDiff.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.titleDiff != null) {
        if (struct.isSetTitleDiff()) {
          oprot.writeFieldBegin(TITLE_DIFF_FIELD_DESC);
          struct.titleDiff.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.descripDiff != null) {
        if (struct.isSetDescripDiff()) {
          oprot.writeFieldBegin(DESCRIP_DIFF_FIELD_DESC);
          struct.descripDiff.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

}

