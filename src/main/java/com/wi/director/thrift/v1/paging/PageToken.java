/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wi.director.thrift.v1.paging;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * NOHTML
 */
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class PageToken implements org.apache.thrift.TBase<PageToken, PageToken._Fields>, java.io.Serializable, Cloneable, Comparable<PageToken> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PageToken");

  private static final org.apache.thrift.protocol.TField NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("num", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("offset", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("total", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField SORT_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("sortOrder", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField RESUME_KEYS_FIELD_DESC = new org.apache.thrift.protocol.TField("resumeKeys", org.apache.thrift.protocol.TType.LIST, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PageTokenStandardSchemeFactory());
  }

  public int num; // required
  public int offset; // required
  public int total; // optional
  public PageTokenSortOrder sortOrder; // optional
  public List<String> resumeKeys; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NUM((short)1, "num"),
    OFFSET((short)2, "offset"),
    TOTAL((short)3, "total"),
    SORT_ORDER((short)4, "sortOrder"),
    RESUME_KEYS((short)5, "resumeKeys");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NUM
          return NUM;
        case 2: // OFFSET
          return OFFSET;
        case 3: // TOTAL
          return TOTAL;
        case 4: // SORT_ORDER
          return SORT_ORDER;
        case 5: // RESUME_KEYS
          return RESUME_KEYS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NUM_ISSET_ID = 0;
  private static final int __OFFSET_ISSET_ID = 1;
  private static final int __TOTAL_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.TOTAL,_Fields.SORT_ORDER,_Fields.RESUME_KEYS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NUM, new org.apache.thrift.meta_data.FieldMetaData("num", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OFFSET, new org.apache.thrift.meta_data.FieldMetaData("offset", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL, new org.apache.thrift.meta_data.FieldMetaData("total", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SORT_ORDER, new org.apache.thrift.meta_data.FieldMetaData("sortOrder", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PageTokenSortOrder.class)));
    tmpMap.put(_Fields.RESUME_KEYS, new org.apache.thrift.meta_data.FieldMetaData("resumeKeys", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PageToken.class, metaDataMap);
  }

  public PageToken() {
  }

  public PageToken(
    int num,
    int offset)
  {
    this();
    this.num = num;
    setNumIsSet(true);
    this.offset = offset;
    setOffsetIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PageToken(PageToken other) {
    __isset_bitfield = other.__isset_bitfield;
    this.num = other.num;
    this.offset = other.offset;
    this.total = other.total;
    if (other.isSetSortOrder()) {
      this.sortOrder = new PageTokenSortOrder(other.sortOrder);
    }
    if (other.isSetResumeKeys()) {
      List<String> __this__resumeKeys = new ArrayList<String>(other.resumeKeys);
      this.resumeKeys = __this__resumeKeys;
    }
  }

  public PageToken deepCopy() {
    return new PageToken(this);
  }

  @Override
  public void clear() {
    setNumIsSet(false);
    this.num = 0;
    setOffsetIsSet(false);
    this.offset = 0;
    setTotalIsSet(false);
    this.total = 0;
    this.sortOrder = null;
    this.resumeKeys = null;
  }

  public int getNum() {
    return this.num;
  }

  public PageToken setNum(int num) {
    this.num = num;
    setNumIsSet(true);
    return this;
  }

  public void unsetNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM_ISSET_ID);
  }

  /** Returns true if field num is set (has been assigned a value) and false otherwise */
  public boolean isSetNum() {
    return EncodingUtils.testBit(__isset_bitfield, __NUM_ISSET_ID);
  }

  public void setNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM_ISSET_ID, value);
  }

  public int getOffset() {
    return this.offset;
  }

  public PageToken setOffset(int offset) {
    this.offset = offset;
    setOffsetIsSet(true);
    return this;
  }

  public void unsetOffset() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OFFSET_ISSET_ID);
  }

  /** Returns true if field offset is set (has been assigned a value) and false otherwise */
  public boolean isSetOffset() {
    return EncodingUtils.testBit(__isset_bitfield, __OFFSET_ISSET_ID);
  }

  public void setOffsetIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OFFSET_ISSET_ID, value);
  }

  public int getTotal() {
    return this.total;
  }

  public PageToken setTotal(int total) {
    this.total = total;
    setTotalIsSet(true);
    return this;
  }

  public void unsetTotal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTAL_ISSET_ID);
  }

  /** Returns true if field total is set (has been assigned a value) and false otherwise */
  public boolean isSetTotal() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTAL_ISSET_ID);
  }

  public void setTotalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTAL_ISSET_ID, value);
  }

  public PageTokenSortOrder getSortOrder() {
    return this.sortOrder;
  }

  public PageToken setSortOrder(PageTokenSortOrder sortOrder) {
    this.sortOrder = sortOrder;
    return this;
  }

  public void unsetSortOrder() {
    this.sortOrder = null;
  }

  /** Returns true if field sortOrder is set (has been assigned a value) and false otherwise */
  public boolean isSetSortOrder() {
    return this.sortOrder != null;
  }

  public void setSortOrderIsSet(boolean value) {
    if (!value) {
      this.sortOrder = null;
    }
  }

  public int getResumeKeysSize() {
    return (this.resumeKeys == null) ? 0 : this.resumeKeys.size();
  }

  public java.util.Iterator<String> getResumeKeysIterator() {
    return (this.resumeKeys == null) ? null : this.resumeKeys.iterator();
  }

  public void addToResumeKeys(String elem) {
    if (this.resumeKeys == null) {
      this.resumeKeys = new ArrayList<String>();
    }
    this.resumeKeys.add(elem);
  }

  public List<String> getResumeKeys() {
    return this.resumeKeys;
  }

  public PageToken setResumeKeys(List<String> resumeKeys) {
    this.resumeKeys = resumeKeys;
    return this;
  }

  public void unsetResumeKeys() {
    this.resumeKeys = null;
  }

  /** Returns true if field resumeKeys is set (has been assigned a value) and false otherwise */
  public boolean isSetResumeKeys() {
    return this.resumeKeys != null;
  }

  public void setResumeKeysIsSet(boolean value) {
    if (!value) {
      this.resumeKeys = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NUM:
      if (value == null) {
        unsetNum();
      } else {
        setNum((Integer)value);
      }
      break;

    case OFFSET:
      if (value == null) {
        unsetOffset();
      } else {
        setOffset((Integer)value);
      }
      break;

    case TOTAL:
      if (value == null) {
        unsetTotal();
      } else {
        setTotal((Integer)value);
      }
      break;

    case SORT_ORDER:
      if (value == null) {
        unsetSortOrder();
      } else {
        setSortOrder((PageTokenSortOrder)value);
      }
      break;

    case RESUME_KEYS:
      if (value == null) {
        unsetResumeKeys();
      } else {
        setResumeKeys((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NUM:
      return getNum();

    case OFFSET:
      return getOffset();

    case TOTAL:
      return getTotal();

    case SORT_ORDER:
      return getSortOrder();

    case RESUME_KEYS:
      return getResumeKeys();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NUM:
      return isSetNum();
    case OFFSET:
      return isSetOffset();
    case TOTAL:
      return isSetTotal();
    case SORT_ORDER:
      return isSetSortOrder();
    case RESUME_KEYS:
      return isSetResumeKeys();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PageToken)
      return this.equals((PageToken)that);
    return false;
  }

  public boolean equals(PageToken that) {
    if (that == null)
      return false;

    boolean this_present_num = true;
    boolean that_present_num = true;
    if (this_present_num || that_present_num) {
      if (!(this_present_num && that_present_num))
        return false;
      if (this.num != that.num)
        return false;
    }

    boolean this_present_offset = true;
    boolean that_present_offset = true;
    if (this_present_offset || that_present_offset) {
      if (!(this_present_offset && that_present_offset))
        return false;
      if (this.offset != that.offset)
        return false;
    }

    boolean this_present_total = true && this.isSetTotal();
    boolean that_present_total = true && that.isSetTotal();
    if (this_present_total || that_present_total) {
      if (!(this_present_total && that_present_total))
        return false;
      if (this.total != that.total)
        return false;
    }

    boolean this_present_sortOrder = true && this.isSetSortOrder();
    boolean that_present_sortOrder = true && that.isSetSortOrder();
    if (this_present_sortOrder || that_present_sortOrder) {
      if (!(this_present_sortOrder && that_present_sortOrder))
        return false;
      if (!this.sortOrder.equals(that.sortOrder))
        return false;
    }

    boolean this_present_resumeKeys = true && this.isSetResumeKeys();
    boolean that_present_resumeKeys = true && that.isSetResumeKeys();
    if (this_present_resumeKeys || that_present_resumeKeys) {
      if (!(this_present_resumeKeys && that_present_resumeKeys))
        return false;
      if (!this.resumeKeys.equals(that.resumeKeys))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_num = true;
    list.add(present_num);
    if (present_num)
      list.add(num);

    boolean present_offset = true;
    list.add(present_offset);
    if (present_offset)
      list.add(offset);

    boolean present_total = true && (isSetTotal());
    list.add(present_total);
    if (present_total)
      list.add(total);

    boolean present_sortOrder = true && (isSetSortOrder());
    list.add(present_sortOrder);
    if (present_sortOrder)
      list.add(sortOrder);

    boolean present_resumeKeys = true && (isSetResumeKeys());
    list.add(present_resumeKeys);
    if (present_resumeKeys)
      list.add(resumeKeys);

    return list.hashCode();
  }

  @Override
  public int compareTo(PageToken other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetNum()).compareTo(other.isSetNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num, other.num);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOffset()).compareTo(other.isSetOffset());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOffset()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offset, other.offset);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotal()).compareTo(other.isSetTotal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.total, other.total);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSortOrder()).compareTo(other.isSetSortOrder());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSortOrder()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sortOrder, other.sortOrder);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResumeKeys()).compareTo(other.isSetResumeKeys());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResumeKeys()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resumeKeys, other.resumeKeys);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PageToken(");
    boolean first = true;

    sb.append("num:");
    sb.append(this.num);
    first = false;
    if (!first) sb.append(", ");
    sb.append("offset:");
    sb.append(this.offset);
    first = false;
    if (isSetTotal()) {
      if (!first) sb.append(", ");
      sb.append("total:");
      sb.append(this.total);
      first = false;
    }
    if (isSetSortOrder()) {
      if (!first) sb.append(", ");
      sb.append("sortOrder:");
      if (this.sortOrder == null) {
        sb.append("null");
      } else {
        sb.append(this.sortOrder);
      }
      first = false;
    }
    if (isSetResumeKeys()) {
      if (!first) sb.append(", ");
      sb.append("resumeKeys:");
      if (this.resumeKeys == null) {
        sb.append("null");
      } else {
        sb.append(this.resumeKeys);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PageTokenStandardSchemeFactory implements SchemeFactory {
    public PageTokenStandardScheme getScheme() {
      return new PageTokenStandardScheme();
    }
  }

  private static class PageTokenStandardScheme extends StandardScheme<PageToken> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PageToken struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.num = iprot.readI32();
              struct.setNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // OFFSET
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.offset = iprot.readI32();
              struct.setOffsetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.total = iprot.readI32();
              struct.setTotalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SORT_ORDER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.sortOrder = new PageTokenSortOrder();
              struct.sortOrder.read(iprot);
              struct.setSortOrderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // RESUME_KEYS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list56 = iprot.readListBegin();
                struct.resumeKeys = new ArrayList<String>(_list56.size);
                String _elem57;
                for (int _i58 = 0; _i58 < _list56.size; ++_i58)
                {
                  _elem57 = iprot.readString();
                  struct.resumeKeys.add(_elem57);
                }
                iprot.readListEnd();
              }
              struct.setResumeKeysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PageToken struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NUM_FIELD_DESC);
      oprot.writeI32(struct.num);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OFFSET_FIELD_DESC);
      oprot.writeI32(struct.offset);
      oprot.writeFieldEnd();
      if (struct.isSetTotal()) {
        oprot.writeFieldBegin(TOTAL_FIELD_DESC);
        oprot.writeI32(struct.total);
        oprot.writeFieldEnd();
      }
      if (struct.sortOrder != null) {
        if (struct.isSetSortOrder()) {
          oprot.writeFieldBegin(SORT_ORDER_FIELD_DESC);
          struct.sortOrder.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.resumeKeys != null) {
        if (struct.isSetResumeKeys()) {
          oprot.writeFieldBegin(RESUME_KEYS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.resumeKeys.size()));
            for (String _iter59 : struct.resumeKeys)
            {
              oprot.writeString(_iter59);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

}

