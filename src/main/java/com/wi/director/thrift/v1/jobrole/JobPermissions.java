/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wi.director.thrift.v1.jobrole;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class JobPermissions implements org.apache.thrift.TBase<JobPermissions, JobPermissions._Fields>, java.io.Serializable, Cloneable, Comparable<JobPermissions> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("JobPermissions");

  private static final org.apache.thrift.protocol.TField EDIT_TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("editTitle", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField EDIT_METADATA_FIELD_DESC = new org.apache.thrift.protocol.TField("editMetadata", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField COMPLETE_FIELD_DESC = new org.apache.thrift.protocol.TField("complete", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField UNCOMPLETE_FIELD_DESC = new org.apache.thrift.protocol.TField("uncomplete", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField STEP_FIELD_DESC = new org.apache.thrift.protocol.TField("step", org.apache.thrift.protocol.TType.STRUCT, (short)101);
  private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.STRUCT, (short)102);
  private static final org.apache.thrift.protocol.TField TEMPLATE_FIELD_DESC = new org.apache.thrift.protocol.TField("template", org.apache.thrift.protocol.TType.STRUCT, (short)103);
  private static final org.apache.thrift.protocol.TField DOC_FIELD_DESC = new org.apache.thrift.protocol.TField("doc", org.apache.thrift.protocol.TType.STRUCT, (short)104);
  private static final org.apache.thrift.protocol.TField ISSUE_FIELD_DESC = new org.apache.thrift.protocol.TField("issue", org.apache.thrift.protocol.TType.STRUCT, (short)105);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new JobPermissionsStandardSchemeFactory());
  }

  public boolean editTitle; // required
  public boolean editMetadata; // required
  public boolean complete; // required
  public boolean uncomplete; // required
  public StepPermissions step; // required
  public UserPermissions user; // required
  public TemplatePermissions template; // required
  public DocumentPermissions doc; // required
  public IssuePermissions issue; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    EDIT_TITLE((short)1, "editTitle"),
    EDIT_METADATA((short)2, "editMetadata"),
    COMPLETE((short)3, "complete"),
    UNCOMPLETE((short)4, "uncomplete"),
    STEP((short)101, "step"),
    USER((short)102, "user"),
    TEMPLATE((short)103, "template"),
    DOC((short)104, "doc"),
    ISSUE((short)105, "issue");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // EDIT_TITLE
          return EDIT_TITLE;
        case 2: // EDIT_METADATA
          return EDIT_METADATA;
        case 3: // COMPLETE
          return COMPLETE;
        case 4: // UNCOMPLETE
          return UNCOMPLETE;
        case 101: // STEP
          return STEP;
        case 102: // USER
          return USER;
        case 103: // TEMPLATE
          return TEMPLATE;
        case 104: // DOC
          return DOC;
        case 105: // ISSUE
          return ISSUE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __EDITTITLE_ISSET_ID = 0;
  private static final int __EDITMETADATA_ISSET_ID = 1;
  private static final int __COMPLETE_ISSET_ID = 2;
  private static final int __UNCOMPLETE_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ISSUE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.EDIT_TITLE, new org.apache.thrift.meta_data.FieldMetaData("editTitle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.EDIT_METADATA, new org.apache.thrift.meta_data.FieldMetaData("editMetadata", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.COMPLETE, new org.apache.thrift.meta_data.FieldMetaData("complete", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.UNCOMPLETE, new org.apache.thrift.meta_data.FieldMetaData("uncomplete", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.STEP, new org.apache.thrift.meta_data.FieldMetaData("step", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StepPermissions.class)));
    tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserPermissions.class)));
    tmpMap.put(_Fields.TEMPLATE, new org.apache.thrift.meta_data.FieldMetaData("template", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TemplatePermissions.class)));
    tmpMap.put(_Fields.DOC, new org.apache.thrift.meta_data.FieldMetaData("doc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DocumentPermissions.class)));
    tmpMap.put(_Fields.ISSUE, new org.apache.thrift.meta_data.FieldMetaData("issue", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IssuePermissions.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(JobPermissions.class, metaDataMap);
  }

  public JobPermissions() {
  }

  public JobPermissions(
    boolean editTitle,
    boolean editMetadata,
    boolean complete,
    boolean uncomplete,
    StepPermissions step,
    UserPermissions user,
    TemplatePermissions template,
    DocumentPermissions doc)
  {
    this();
    this.editTitle = editTitle;
    setEditTitleIsSet(true);
    this.editMetadata = editMetadata;
    setEditMetadataIsSet(true);
    this.complete = complete;
    setCompleteIsSet(true);
    this.uncomplete = uncomplete;
    setUncompleteIsSet(true);
    this.step = step;
    this.user = user;
    this.template = template;
    this.doc = doc;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public JobPermissions(JobPermissions other) {
    __isset_bitfield = other.__isset_bitfield;
    this.editTitle = other.editTitle;
    this.editMetadata = other.editMetadata;
    this.complete = other.complete;
    this.uncomplete = other.uncomplete;
    if (other.isSetStep()) {
      this.step = new StepPermissions(other.step);
    }
    if (other.isSetUser()) {
      this.user = new UserPermissions(other.user);
    }
    if (other.isSetTemplate()) {
      this.template = new TemplatePermissions(other.template);
    }
    if (other.isSetDoc()) {
      this.doc = new DocumentPermissions(other.doc);
    }
    if (other.isSetIssue()) {
      this.issue = new IssuePermissions(other.issue);
    }
  }

  public JobPermissions deepCopy() {
    return new JobPermissions(this);
  }

  @Override
  public void clear() {
    setEditTitleIsSet(false);
    this.editTitle = false;
    setEditMetadataIsSet(false);
    this.editMetadata = false;
    setCompleteIsSet(false);
    this.complete = false;
    setUncompleteIsSet(false);
    this.uncomplete = false;
    this.step = null;
    this.user = null;
    this.template = null;
    this.doc = null;
    this.issue = null;
  }

  public boolean isEditTitle() {
    return this.editTitle;
  }

  public JobPermissions setEditTitle(boolean editTitle) {
    this.editTitle = editTitle;
    setEditTitleIsSet(true);
    return this;
  }

  public void unsetEditTitle() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EDITTITLE_ISSET_ID);
  }

  /** Returns true if field editTitle is set (has been assigned a value) and false otherwise */
  public boolean isSetEditTitle() {
    return EncodingUtils.testBit(__isset_bitfield, __EDITTITLE_ISSET_ID);
  }

  public void setEditTitleIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EDITTITLE_ISSET_ID, value);
  }

  public boolean isEditMetadata() {
    return this.editMetadata;
  }

  public JobPermissions setEditMetadata(boolean editMetadata) {
    this.editMetadata = editMetadata;
    setEditMetadataIsSet(true);
    return this;
  }

  public void unsetEditMetadata() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EDITMETADATA_ISSET_ID);
  }

  /** Returns true if field editMetadata is set (has been assigned a value) and false otherwise */
  public boolean isSetEditMetadata() {
    return EncodingUtils.testBit(__isset_bitfield, __EDITMETADATA_ISSET_ID);
  }

  public void setEditMetadataIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EDITMETADATA_ISSET_ID, value);
  }

  public boolean isComplete() {
    return this.complete;
  }

  public JobPermissions setComplete(boolean complete) {
    this.complete = complete;
    setCompleteIsSet(true);
    return this;
  }

  public void unsetComplete() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMPLETE_ISSET_ID);
  }

  /** Returns true if field complete is set (has been assigned a value) and false otherwise */
  public boolean isSetComplete() {
    return EncodingUtils.testBit(__isset_bitfield, __COMPLETE_ISSET_ID);
  }

  public void setCompleteIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMPLETE_ISSET_ID, value);
  }

  public boolean isUncomplete() {
    return this.uncomplete;
  }

  public JobPermissions setUncomplete(boolean uncomplete) {
    this.uncomplete = uncomplete;
    setUncompleteIsSet(true);
    return this;
  }

  public void unsetUncomplete() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UNCOMPLETE_ISSET_ID);
  }

  /** Returns true if field uncomplete is set (has been assigned a value) and false otherwise */
  public boolean isSetUncomplete() {
    return EncodingUtils.testBit(__isset_bitfield, __UNCOMPLETE_ISSET_ID);
  }

  public void setUncompleteIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UNCOMPLETE_ISSET_ID, value);
  }

  public StepPermissions getStep() {
    return this.step;
  }

  public JobPermissions setStep(StepPermissions step) {
    this.step = step;
    return this;
  }

  public void unsetStep() {
    this.step = null;
  }

  /** Returns true if field step is set (has been assigned a value) and false otherwise */
  public boolean isSetStep() {
    return this.step != null;
  }

  public void setStepIsSet(boolean value) {
    if (!value) {
      this.step = null;
    }
  }

  public UserPermissions getUser() {
    return this.user;
  }

  public JobPermissions setUser(UserPermissions user) {
    this.user = user;
    return this;
  }

  public void unsetUser() {
    this.user = null;
  }

  /** Returns true if field user is set (has been assigned a value) and false otherwise */
  public boolean isSetUser() {
    return this.user != null;
  }

  public void setUserIsSet(boolean value) {
    if (!value) {
      this.user = null;
    }
  }

  public TemplatePermissions getTemplate() {
    return this.template;
  }

  public JobPermissions setTemplate(TemplatePermissions template) {
    this.template = template;
    return this;
  }

  public void unsetTemplate() {
    this.template = null;
  }

  /** Returns true if field template is set (has been assigned a value) and false otherwise */
  public boolean isSetTemplate() {
    return this.template != null;
  }

  public void setTemplateIsSet(boolean value) {
    if (!value) {
      this.template = null;
    }
  }

  public DocumentPermissions getDoc() {
    return this.doc;
  }

  public JobPermissions setDoc(DocumentPermissions doc) {
    this.doc = doc;
    return this;
  }

  public void unsetDoc() {
    this.doc = null;
  }

  /** Returns true if field doc is set (has been assigned a value) and false otherwise */
  public boolean isSetDoc() {
    return this.doc != null;
  }

  public void setDocIsSet(boolean value) {
    if (!value) {
      this.doc = null;
    }
  }

  public IssuePermissions getIssue() {
    return this.issue;
  }

  public JobPermissions setIssue(IssuePermissions issue) {
    this.issue = issue;
    return this;
  }

  public void unsetIssue() {
    this.issue = null;
  }

  /** Returns true if field issue is set (has been assigned a value) and false otherwise */
  public boolean isSetIssue() {
    return this.issue != null;
  }

  public void setIssueIsSet(boolean value) {
    if (!value) {
      this.issue = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case EDIT_TITLE:
      if (value == null) {
        unsetEditTitle();
      } else {
        setEditTitle((Boolean)value);
      }
      break;

    case EDIT_METADATA:
      if (value == null) {
        unsetEditMetadata();
      } else {
        setEditMetadata((Boolean)value);
      }
      break;

    case COMPLETE:
      if (value == null) {
        unsetComplete();
      } else {
        setComplete((Boolean)value);
      }
      break;

    case UNCOMPLETE:
      if (value == null) {
        unsetUncomplete();
      } else {
        setUncomplete((Boolean)value);
      }
      break;

    case STEP:
      if (value == null) {
        unsetStep();
      } else {
        setStep((StepPermissions)value);
      }
      break;

    case USER:
      if (value == null) {
        unsetUser();
      } else {
        setUser((UserPermissions)value);
      }
      break;

    case TEMPLATE:
      if (value == null) {
        unsetTemplate();
      } else {
        setTemplate((TemplatePermissions)value);
      }
      break;

    case DOC:
      if (value == null) {
        unsetDoc();
      } else {
        setDoc((DocumentPermissions)value);
      }
      break;

    case ISSUE:
      if (value == null) {
        unsetIssue();
      } else {
        setIssue((IssuePermissions)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case EDIT_TITLE:
      return isEditTitle();

    case EDIT_METADATA:
      return isEditMetadata();

    case COMPLETE:
      return isComplete();

    case UNCOMPLETE:
      return isUncomplete();

    case STEP:
      return getStep();

    case USER:
      return getUser();

    case TEMPLATE:
      return getTemplate();

    case DOC:
      return getDoc();

    case ISSUE:
      return getIssue();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case EDIT_TITLE:
      return isSetEditTitle();
    case EDIT_METADATA:
      return isSetEditMetadata();
    case COMPLETE:
      return isSetComplete();
    case UNCOMPLETE:
      return isSetUncomplete();
    case STEP:
      return isSetStep();
    case USER:
      return isSetUser();
    case TEMPLATE:
      return isSetTemplate();
    case DOC:
      return isSetDoc();
    case ISSUE:
      return isSetIssue();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof JobPermissions)
      return this.equals((JobPermissions)that);
    return false;
  }

  public boolean equals(JobPermissions that) {
    if (that == null)
      return false;

    boolean this_present_editTitle = true;
    boolean that_present_editTitle = true;
    if (this_present_editTitle || that_present_editTitle) {
      if (!(this_present_editTitle && that_present_editTitle))
        return false;
      if (this.editTitle != that.editTitle)
        return false;
    }

    boolean this_present_editMetadata = true;
    boolean that_present_editMetadata = true;
    if (this_present_editMetadata || that_present_editMetadata) {
      if (!(this_present_editMetadata && that_present_editMetadata))
        return false;
      if (this.editMetadata != that.editMetadata)
        return false;
    }

    boolean this_present_complete = true;
    boolean that_present_complete = true;
    if (this_present_complete || that_present_complete) {
      if (!(this_present_complete && that_present_complete))
        return false;
      if (this.complete != that.complete)
        return false;
    }

    boolean this_present_uncomplete = true;
    boolean that_present_uncomplete = true;
    if (this_present_uncomplete || that_present_uncomplete) {
      if (!(this_present_uncomplete && that_present_uncomplete))
        return false;
      if (this.uncomplete != that.uncomplete)
        return false;
    }

    boolean this_present_step = true && this.isSetStep();
    boolean that_present_step = true && that.isSetStep();
    if (this_present_step || that_present_step) {
      if (!(this_present_step && that_present_step))
        return false;
      if (!this.step.equals(that.step))
        return false;
    }

    boolean this_present_user = true && this.isSetUser();
    boolean that_present_user = true && that.isSetUser();
    if (this_present_user || that_present_user) {
      if (!(this_present_user && that_present_user))
        return false;
      if (!this.user.equals(that.user))
        return false;
    }

    boolean this_present_template = true && this.isSetTemplate();
    boolean that_present_template = true && that.isSetTemplate();
    if (this_present_template || that_present_template) {
      if (!(this_present_template && that_present_template))
        return false;
      if (!this.template.equals(that.template))
        return false;
    }

    boolean this_present_doc = true && this.isSetDoc();
    boolean that_present_doc = true && that.isSetDoc();
    if (this_present_doc || that_present_doc) {
      if (!(this_present_doc && that_present_doc))
        return false;
      if (!this.doc.equals(that.doc))
        return false;
    }

    boolean this_present_issue = true && this.isSetIssue();
    boolean that_present_issue = true && that.isSetIssue();
    if (this_present_issue || that_present_issue) {
      if (!(this_present_issue && that_present_issue))
        return false;
      if (!this.issue.equals(that.issue))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_editTitle = true;
    list.add(present_editTitle);
    if (present_editTitle)
      list.add(editTitle);

    boolean present_editMetadata = true;
    list.add(present_editMetadata);
    if (present_editMetadata)
      list.add(editMetadata);

    boolean present_complete = true;
    list.add(present_complete);
    if (present_complete)
      list.add(complete);

    boolean present_uncomplete = true;
    list.add(present_uncomplete);
    if (present_uncomplete)
      list.add(uncomplete);

    boolean present_step = true && (isSetStep());
    list.add(present_step);
    if (present_step)
      list.add(step);

    boolean present_user = true && (isSetUser());
    list.add(present_user);
    if (present_user)
      list.add(user);

    boolean present_template = true && (isSetTemplate());
    list.add(present_template);
    if (present_template)
      list.add(template);

    boolean present_doc = true && (isSetDoc());
    list.add(present_doc);
    if (present_doc)
      list.add(doc);

    boolean present_issue = true && (isSetIssue());
    list.add(present_issue);
    if (present_issue)
      list.add(issue);

    return list.hashCode();
  }

  @Override
  public int compareTo(JobPermissions other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetEditTitle()).compareTo(other.isSetEditTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEditTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.editTitle, other.editTitle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEditMetadata()).compareTo(other.isSetEditMetadata());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEditMetadata()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.editMetadata, other.editMetadata);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetComplete()).compareTo(other.isSetComplete());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComplete()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.complete, other.complete);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUncomplete()).compareTo(other.isSetUncomplete());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUncomplete()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uncomplete, other.uncomplete);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStep()).compareTo(other.isSetStep());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStep()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.step, other.step);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUser()).compareTo(other.isSetUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, other.user);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTemplate()).compareTo(other.isSetTemplate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTemplate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.template, other.template);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDoc()).compareTo(other.isSetDoc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDoc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.doc, other.doc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIssue()).compareTo(other.isSetIssue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIssue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.issue, other.issue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("JobPermissions(");
    boolean first = true;

    sb.append("editTitle:");
    sb.append(this.editTitle);
    first = false;
    if (!first) sb.append(", ");
    sb.append("editMetadata:");
    sb.append(this.editMetadata);
    first = false;
    if (!first) sb.append(", ");
    sb.append("complete:");
    sb.append(this.complete);
    first = false;
    if (!first) sb.append(", ");
    sb.append("uncomplete:");
    sb.append(this.uncomplete);
    first = false;
    if (!first) sb.append(", ");
    sb.append("step:");
    if (this.step == null) {
      sb.append("null");
    } else {
      sb.append(this.step);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("user:");
    if (this.user == null) {
      sb.append("null");
    } else {
      sb.append(this.user);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("template:");
    if (this.template == null) {
      sb.append("null");
    } else {
      sb.append(this.template);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("doc:");
    if (this.doc == null) {
      sb.append("null");
    } else {
      sb.append(this.doc);
    }
    first = false;
    if (isSetIssue()) {
      if (!first) sb.append(", ");
      sb.append("issue:");
      if (this.issue == null) {
        sb.append("null");
      } else {
        sb.append(this.issue);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (step != null) {
      step.validate();
    }
    if (user != null) {
      user.validate();
    }
    if (template != null) {
      template.validate();
    }
    if (doc != null) {
      doc.validate();
    }
    if (issue != null) {
      issue.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class JobPermissionsStandardSchemeFactory implements SchemeFactory {
    public JobPermissionsStandardScheme getScheme() {
      return new JobPermissionsStandardScheme();
    }
  }

  private static class JobPermissionsStandardScheme extends StandardScheme<JobPermissions> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, JobPermissions struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // EDIT_TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.editTitle = iprot.readBool();
              struct.setEditTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // EDIT_METADATA
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.editMetadata = iprot.readBool();
              struct.setEditMetadataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COMPLETE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.complete = iprot.readBool();
              struct.setCompleteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // UNCOMPLETE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.uncomplete = iprot.readBool();
              struct.setUncompleteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 101: // STEP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.step = new StepPermissions();
              struct.step.read(iprot);
              struct.setStepIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 102: // USER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.user = new UserPermissions();
              struct.user.read(iprot);
              struct.setUserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 103: // TEMPLATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.template = new TemplatePermissions();
              struct.template.read(iprot);
              struct.setTemplateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 104: // DOC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.doc = new DocumentPermissions();
              struct.doc.read(iprot);
              struct.setDocIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 105: // ISSUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.issue = new IssuePermissions();
              struct.issue.read(iprot);
              struct.setIssueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, JobPermissions struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(EDIT_TITLE_FIELD_DESC);
      oprot.writeBool(struct.editTitle);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EDIT_METADATA_FIELD_DESC);
      oprot.writeBool(struct.editMetadata);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COMPLETE_FIELD_DESC);
      oprot.writeBool(struct.complete);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UNCOMPLETE_FIELD_DESC);
      oprot.writeBool(struct.uncomplete);
      oprot.writeFieldEnd();
      if (struct.step != null) {
        oprot.writeFieldBegin(STEP_FIELD_DESC);
        struct.step.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.user != null) {
        oprot.writeFieldBegin(USER_FIELD_DESC);
        struct.user.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.template != null) {
        oprot.writeFieldBegin(TEMPLATE_FIELD_DESC);
        struct.template.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.doc != null) {
        oprot.writeFieldBegin(DOC_FIELD_DESC);
        struct.doc.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.issue != null) {
        if (struct.isSetIssue()) {
          oprot.writeFieldBegin(ISSUE_FIELD_DESC);
          struct.issue.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

}

