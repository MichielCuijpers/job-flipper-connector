/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wi.director.thrift.v1.debugreport;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class DebugReport implements org.apache.thrift.TBase<DebugReport, DebugReport._Fields>, java.io.Serializable, Cloneable, Comparable<DebugReport> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DebugReport");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField JOB_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("jobId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DEVICE_OS_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceOS", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField DEVICE_MAKE_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceMake", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField DEVICE_MODEL_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceModel", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField DEVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceId", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField API_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("apiVersion", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField JSON_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("jsonData", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField USER_MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("userMessage", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField CREATED_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("createdAt", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField UPDATED_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("updatedAt", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField REPORT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("reportType", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField DOCUMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("documents", org.apache.thrift.protocol.TType.SET, (short)101);
  private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.STRUCT, (short)102);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DebugReportStandardSchemeFactory());
  }

  public String id; // required
  public String userId; // required
  public String jobId; // required
  public String deviceOS; // required
  public String deviceMake; // required
  public String deviceModel; // required
  public String deviceId; // required
  public String apiVersion; // required
  public String jsonData; // required
  public String userMessage; // optional
  public long createdAt; // required
  public long updatedAt; // required
  /**
   * 
   * @see DebugReportType
   */
  public DebugReportType reportType; // required
  public Set<com.wi.director.thrift.v1.document.Document> documents; // optional
  public com.wi.director.thrift.v1.user.User user; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    USER_ID((short)2, "userId"),
    JOB_ID((short)3, "jobId"),
    DEVICE_OS((short)4, "deviceOS"),
    DEVICE_MAKE((short)5, "deviceMake"),
    DEVICE_MODEL((short)6, "deviceModel"),
    DEVICE_ID((short)7, "deviceId"),
    API_VERSION((short)8, "apiVersion"),
    JSON_DATA((short)9, "jsonData"),
    USER_MESSAGE((short)10, "userMessage"),
    CREATED_AT((short)11, "createdAt"),
    UPDATED_AT((short)12, "updatedAt"),
    /**
     * 
     * @see DebugReportType
     */
    REPORT_TYPE((short)13, "reportType"),
    DOCUMENTS((short)101, "documents"),
    USER((short)102, "user");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // USER_ID
          return USER_ID;
        case 3: // JOB_ID
          return JOB_ID;
        case 4: // DEVICE_OS
          return DEVICE_OS;
        case 5: // DEVICE_MAKE
          return DEVICE_MAKE;
        case 6: // DEVICE_MODEL
          return DEVICE_MODEL;
        case 7: // DEVICE_ID
          return DEVICE_ID;
        case 8: // API_VERSION
          return API_VERSION;
        case 9: // JSON_DATA
          return JSON_DATA;
        case 10: // USER_MESSAGE
          return USER_MESSAGE;
        case 11: // CREATED_AT
          return CREATED_AT;
        case 12: // UPDATED_AT
          return UPDATED_AT;
        case 13: // REPORT_TYPE
          return REPORT_TYPE;
        case 101: // DOCUMENTS
          return DOCUMENTS;
        case 102: // USER
          return USER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CREATEDAT_ISSET_ID = 0;
  private static final int __UPDATEDAT_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.USER_MESSAGE,_Fields.DOCUMENTS,_Fields.USER};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "UUID")));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "UUID")));
    tmpMap.put(_Fields.JOB_ID, new org.apache.thrift.meta_data.FieldMetaData("jobId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "UUID")));
    tmpMap.put(_Fields.DEVICE_OS, new org.apache.thrift.meta_data.FieldMetaData("deviceOS", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEVICE_MAKE, new org.apache.thrift.meta_data.FieldMetaData("deviceMake", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEVICE_MODEL, new org.apache.thrift.meta_data.FieldMetaData("deviceModel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("deviceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.API_VERSION, new org.apache.thrift.meta_data.FieldMetaData("apiVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.JSON_DATA, new org.apache.thrift.meta_data.FieldMetaData("jsonData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("userMessage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATED_AT, new org.apache.thrift.meta_data.FieldMetaData("createdAt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.UPDATED_AT, new org.apache.thrift.meta_data.FieldMetaData("updatedAt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.REPORT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("reportType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, DebugReportType.class)));
    tmpMap.put(_Fields.DOCUMENTS, new org.apache.thrift.meta_data.FieldMetaData("documents", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.document.Document.class))));
    tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.user.User.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DebugReport.class, metaDataMap);
  }

  public DebugReport() {
  }

  public DebugReport(
    String id,
    String userId,
    String jobId,
    String deviceOS,
    String deviceMake,
    String deviceModel,
    String deviceId,
    String apiVersion,
    String jsonData,
    long createdAt,
    long updatedAt,
    DebugReportType reportType)
  {
    this();
    this.id = id;
    this.userId = userId;
    this.jobId = jobId;
    this.deviceOS = deviceOS;
    this.deviceMake = deviceMake;
    this.deviceModel = deviceModel;
    this.deviceId = deviceId;
    this.apiVersion = apiVersion;
    this.jsonData = jsonData;
    this.createdAt = createdAt;
    setCreatedAtIsSet(true);
    this.updatedAt = updatedAt;
    setUpdatedAtIsSet(true);
    this.reportType = reportType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DebugReport(DebugReport other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetUserId()) {
      this.userId = other.userId;
    }
    if (other.isSetJobId()) {
      this.jobId = other.jobId;
    }
    if (other.isSetDeviceOS()) {
      this.deviceOS = other.deviceOS;
    }
    if (other.isSetDeviceMake()) {
      this.deviceMake = other.deviceMake;
    }
    if (other.isSetDeviceModel()) {
      this.deviceModel = other.deviceModel;
    }
    if (other.isSetDeviceId()) {
      this.deviceId = other.deviceId;
    }
    if (other.isSetApiVersion()) {
      this.apiVersion = other.apiVersion;
    }
    if (other.isSetJsonData()) {
      this.jsonData = other.jsonData;
    }
    if (other.isSetUserMessage()) {
      this.userMessage = other.userMessage;
    }
    this.createdAt = other.createdAt;
    this.updatedAt = other.updatedAt;
    if (other.isSetReportType()) {
      this.reportType = other.reportType;
    }
    if (other.isSetDocuments()) {
      Set<com.wi.director.thrift.v1.document.Document> __this__documents = new HashSet<com.wi.director.thrift.v1.document.Document>(other.documents.size());
      for (com.wi.director.thrift.v1.document.Document other_element : other.documents) {
        __this__documents.add(new com.wi.director.thrift.v1.document.Document(other_element));
      }
      this.documents = __this__documents;
    }
    if (other.isSetUser()) {
      this.user = new com.wi.director.thrift.v1.user.User(other.user);
    }
  }

  public DebugReport deepCopy() {
    return new DebugReport(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.userId = null;
    this.jobId = null;
    this.deviceOS = null;
    this.deviceMake = null;
    this.deviceModel = null;
    this.deviceId = null;
    this.apiVersion = null;
    this.jsonData = null;
    this.userMessage = null;
    setCreatedAtIsSet(false);
    this.createdAt = 0;
    setUpdatedAtIsSet(false);
    this.updatedAt = 0;
    this.reportType = null;
    this.documents = null;
    this.user = null;
  }

  public String getId() {
    return this.id;
  }

  public DebugReport setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public String getUserId() {
    return this.userId;
  }

  public DebugReport setUserId(String userId) {
    this.userId = userId;
    return this;
  }

  public void unsetUserId() {
    this.userId = null;
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return this.userId != null;
  }

  public void setUserIdIsSet(boolean value) {
    if (!value) {
      this.userId = null;
    }
  }

  public String getJobId() {
    return this.jobId;
  }

  public DebugReport setJobId(String jobId) {
    this.jobId = jobId;
    return this;
  }

  public void unsetJobId() {
    this.jobId = null;
  }

  /** Returns true if field jobId is set (has been assigned a value) and false otherwise */
  public boolean isSetJobId() {
    return this.jobId != null;
  }

  public void setJobIdIsSet(boolean value) {
    if (!value) {
      this.jobId = null;
    }
  }

  public String getDeviceOS() {
    return this.deviceOS;
  }

  public DebugReport setDeviceOS(String deviceOS) {
    this.deviceOS = deviceOS;
    return this;
  }

  public void unsetDeviceOS() {
    this.deviceOS = null;
  }

  /** Returns true if field deviceOS is set (has been assigned a value) and false otherwise */
  public boolean isSetDeviceOS() {
    return this.deviceOS != null;
  }

  public void setDeviceOSIsSet(boolean value) {
    if (!value) {
      this.deviceOS = null;
    }
  }

  public String getDeviceMake() {
    return this.deviceMake;
  }

  public DebugReport setDeviceMake(String deviceMake) {
    this.deviceMake = deviceMake;
    return this;
  }

  public void unsetDeviceMake() {
    this.deviceMake = null;
  }

  /** Returns true if field deviceMake is set (has been assigned a value) and false otherwise */
  public boolean isSetDeviceMake() {
    return this.deviceMake != null;
  }

  public void setDeviceMakeIsSet(boolean value) {
    if (!value) {
      this.deviceMake = null;
    }
  }

  public String getDeviceModel() {
    return this.deviceModel;
  }

  public DebugReport setDeviceModel(String deviceModel) {
    this.deviceModel = deviceModel;
    return this;
  }

  public void unsetDeviceModel() {
    this.deviceModel = null;
  }

  /** Returns true if field deviceModel is set (has been assigned a value) and false otherwise */
  public boolean isSetDeviceModel() {
    return this.deviceModel != null;
  }

  public void setDeviceModelIsSet(boolean value) {
    if (!value) {
      this.deviceModel = null;
    }
  }

  public String getDeviceId() {
    return this.deviceId;
  }

  public DebugReport setDeviceId(String deviceId) {
    this.deviceId = deviceId;
    return this;
  }

  public void unsetDeviceId() {
    this.deviceId = null;
  }

  /** Returns true if field deviceId is set (has been assigned a value) and false otherwise */
  public boolean isSetDeviceId() {
    return this.deviceId != null;
  }

  public void setDeviceIdIsSet(boolean value) {
    if (!value) {
      this.deviceId = null;
    }
  }

  public String getApiVersion() {
    return this.apiVersion;
  }

  public DebugReport setApiVersion(String apiVersion) {
    this.apiVersion = apiVersion;
    return this;
  }

  public void unsetApiVersion() {
    this.apiVersion = null;
  }

  /** Returns true if field apiVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetApiVersion() {
    return this.apiVersion != null;
  }

  public void setApiVersionIsSet(boolean value) {
    if (!value) {
      this.apiVersion = null;
    }
  }

  public String getJsonData() {
    return this.jsonData;
  }

  public DebugReport setJsonData(String jsonData) {
    this.jsonData = jsonData;
    return this;
  }

  public void unsetJsonData() {
    this.jsonData = null;
  }

  /** Returns true if field jsonData is set (has been assigned a value) and false otherwise */
  public boolean isSetJsonData() {
    return this.jsonData != null;
  }

  public void setJsonDataIsSet(boolean value) {
    if (!value) {
      this.jsonData = null;
    }
  }

  public String getUserMessage() {
    return this.userMessage;
  }

  public DebugReport setUserMessage(String userMessage) {
    this.userMessage = userMessage;
    return this;
  }

  public void unsetUserMessage() {
    this.userMessage = null;
  }

  /** Returns true if field userMessage is set (has been assigned a value) and false otherwise */
  public boolean isSetUserMessage() {
    return this.userMessage != null;
  }

  public void setUserMessageIsSet(boolean value) {
    if (!value) {
      this.userMessage = null;
    }
  }

  public long getCreatedAt() {
    return this.createdAt;
  }

  public DebugReport setCreatedAt(long createdAt) {
    this.createdAt = createdAt;
    setCreatedAtIsSet(true);
    return this;
  }

  public void unsetCreatedAt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATEDAT_ISSET_ID);
  }

  /** Returns true if field createdAt is set (has been assigned a value) and false otherwise */
  public boolean isSetCreatedAt() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATEDAT_ISSET_ID);
  }

  public void setCreatedAtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATEDAT_ISSET_ID, value);
  }

  public long getUpdatedAt() {
    return this.updatedAt;
  }

  public DebugReport setUpdatedAt(long updatedAt) {
    this.updatedAt = updatedAt;
    setUpdatedAtIsSet(true);
    return this;
  }

  public void unsetUpdatedAt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPDATEDAT_ISSET_ID);
  }

  /** Returns true if field updatedAt is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdatedAt() {
    return EncodingUtils.testBit(__isset_bitfield, __UPDATEDAT_ISSET_ID);
  }

  public void setUpdatedAtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPDATEDAT_ISSET_ID, value);
  }

  /**
   * 
   * @see DebugReportType
   */
  public DebugReportType getReportType() {
    return this.reportType;
  }

  /**
   * 
   * @see DebugReportType
   */
  public DebugReport setReportType(DebugReportType reportType) {
    this.reportType = reportType;
    return this;
  }

  public void unsetReportType() {
    this.reportType = null;
  }

  /** Returns true if field reportType is set (has been assigned a value) and false otherwise */
  public boolean isSetReportType() {
    return this.reportType != null;
  }

  public void setReportTypeIsSet(boolean value) {
    if (!value) {
      this.reportType = null;
    }
  }

  public int getDocumentsSize() {
    return (this.documents == null) ? 0 : this.documents.size();
  }

  public java.util.Iterator<com.wi.director.thrift.v1.document.Document> getDocumentsIterator() {
    return (this.documents == null) ? null : this.documents.iterator();
  }

  public void addToDocuments(com.wi.director.thrift.v1.document.Document elem) {
    if (this.documents == null) {
      this.documents = new HashSet<com.wi.director.thrift.v1.document.Document>();
    }
    this.documents.add(elem);
  }

  public Set<com.wi.director.thrift.v1.document.Document> getDocuments() {
    return this.documents;
  }

  public DebugReport setDocuments(Set<com.wi.director.thrift.v1.document.Document> documents) {
    this.documents = documents;
    return this;
  }

  public void unsetDocuments() {
    this.documents = null;
  }

  /** Returns true if field documents is set (has been assigned a value) and false otherwise */
  public boolean isSetDocuments() {
    return this.documents != null;
  }

  public void setDocumentsIsSet(boolean value) {
    if (!value) {
      this.documents = null;
    }
  }

  public com.wi.director.thrift.v1.user.User getUser() {
    return this.user;
  }

  public DebugReport setUser(com.wi.director.thrift.v1.user.User user) {
    this.user = user;
    return this;
  }

  public void unsetUser() {
    this.user = null;
  }

  /** Returns true if field user is set (has been assigned a value) and false otherwise */
  public boolean isSetUser() {
    return this.user != null;
  }

  public void setUserIsSet(boolean value) {
    if (!value) {
      this.user = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((String)value);
      }
      break;

    case JOB_ID:
      if (value == null) {
        unsetJobId();
      } else {
        setJobId((String)value);
      }
      break;

    case DEVICE_OS:
      if (value == null) {
        unsetDeviceOS();
      } else {
        setDeviceOS((String)value);
      }
      break;

    case DEVICE_MAKE:
      if (value == null) {
        unsetDeviceMake();
      } else {
        setDeviceMake((String)value);
      }
      break;

    case DEVICE_MODEL:
      if (value == null) {
        unsetDeviceModel();
      } else {
        setDeviceModel((String)value);
      }
      break;

    case DEVICE_ID:
      if (value == null) {
        unsetDeviceId();
      } else {
        setDeviceId((String)value);
      }
      break;

    case API_VERSION:
      if (value == null) {
        unsetApiVersion();
      } else {
        setApiVersion((String)value);
      }
      break;

    case JSON_DATA:
      if (value == null) {
        unsetJsonData();
      } else {
        setJsonData((String)value);
      }
      break;

    case USER_MESSAGE:
      if (value == null) {
        unsetUserMessage();
      } else {
        setUserMessage((String)value);
      }
      break;

    case CREATED_AT:
      if (value == null) {
        unsetCreatedAt();
      } else {
        setCreatedAt((Long)value);
      }
      break;

    case UPDATED_AT:
      if (value == null) {
        unsetUpdatedAt();
      } else {
        setUpdatedAt((Long)value);
      }
      break;

    case REPORT_TYPE:
      if (value == null) {
        unsetReportType();
      } else {
        setReportType((DebugReportType)value);
      }
      break;

    case DOCUMENTS:
      if (value == null) {
        unsetDocuments();
      } else {
        setDocuments((Set<com.wi.director.thrift.v1.document.Document>)value);
      }
      break;

    case USER:
      if (value == null) {
        unsetUser();
      } else {
        setUser((com.wi.director.thrift.v1.user.User)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case USER_ID:
      return getUserId();

    case JOB_ID:
      return getJobId();

    case DEVICE_OS:
      return getDeviceOS();

    case DEVICE_MAKE:
      return getDeviceMake();

    case DEVICE_MODEL:
      return getDeviceModel();

    case DEVICE_ID:
      return getDeviceId();

    case API_VERSION:
      return getApiVersion();

    case JSON_DATA:
      return getJsonData();

    case USER_MESSAGE:
      return getUserMessage();

    case CREATED_AT:
      return getCreatedAt();

    case UPDATED_AT:
      return getUpdatedAt();

    case REPORT_TYPE:
      return getReportType();

    case DOCUMENTS:
      return getDocuments();

    case USER:
      return getUser();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case USER_ID:
      return isSetUserId();
    case JOB_ID:
      return isSetJobId();
    case DEVICE_OS:
      return isSetDeviceOS();
    case DEVICE_MAKE:
      return isSetDeviceMake();
    case DEVICE_MODEL:
      return isSetDeviceModel();
    case DEVICE_ID:
      return isSetDeviceId();
    case API_VERSION:
      return isSetApiVersion();
    case JSON_DATA:
      return isSetJsonData();
    case USER_MESSAGE:
      return isSetUserMessage();
    case CREATED_AT:
      return isSetCreatedAt();
    case UPDATED_AT:
      return isSetUpdatedAt();
    case REPORT_TYPE:
      return isSetReportType();
    case DOCUMENTS:
      return isSetDocuments();
    case USER:
      return isSetUser();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DebugReport)
      return this.equals((DebugReport)that);
    return false;
  }

  public boolean equals(DebugReport that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_userId = true && this.isSetUserId();
    boolean that_present_userId = true && that.isSetUserId();
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (!this.userId.equals(that.userId))
        return false;
    }

    boolean this_present_jobId = true && this.isSetJobId();
    boolean that_present_jobId = true && that.isSetJobId();
    if (this_present_jobId || that_present_jobId) {
      if (!(this_present_jobId && that_present_jobId))
        return false;
      if (!this.jobId.equals(that.jobId))
        return false;
    }

    boolean this_present_deviceOS = true && this.isSetDeviceOS();
    boolean that_present_deviceOS = true && that.isSetDeviceOS();
    if (this_present_deviceOS || that_present_deviceOS) {
      if (!(this_present_deviceOS && that_present_deviceOS))
        return false;
      if (!this.deviceOS.equals(that.deviceOS))
        return false;
    }

    boolean this_present_deviceMake = true && this.isSetDeviceMake();
    boolean that_present_deviceMake = true && that.isSetDeviceMake();
    if (this_present_deviceMake || that_present_deviceMake) {
      if (!(this_present_deviceMake && that_present_deviceMake))
        return false;
      if (!this.deviceMake.equals(that.deviceMake))
        return false;
    }

    boolean this_present_deviceModel = true && this.isSetDeviceModel();
    boolean that_present_deviceModel = true && that.isSetDeviceModel();
    if (this_present_deviceModel || that_present_deviceModel) {
      if (!(this_present_deviceModel && that_present_deviceModel))
        return false;
      if (!this.deviceModel.equals(that.deviceModel))
        return false;
    }

    boolean this_present_deviceId = true && this.isSetDeviceId();
    boolean that_present_deviceId = true && that.isSetDeviceId();
    if (this_present_deviceId || that_present_deviceId) {
      if (!(this_present_deviceId && that_present_deviceId))
        return false;
      if (!this.deviceId.equals(that.deviceId))
        return false;
    }

    boolean this_present_apiVersion = true && this.isSetApiVersion();
    boolean that_present_apiVersion = true && that.isSetApiVersion();
    if (this_present_apiVersion || that_present_apiVersion) {
      if (!(this_present_apiVersion && that_present_apiVersion))
        return false;
      if (!this.apiVersion.equals(that.apiVersion))
        return false;
    }

    boolean this_present_jsonData = true && this.isSetJsonData();
    boolean that_present_jsonData = true && that.isSetJsonData();
    if (this_present_jsonData || that_present_jsonData) {
      if (!(this_present_jsonData && that_present_jsonData))
        return false;
      if (!this.jsonData.equals(that.jsonData))
        return false;
    }

    boolean this_present_userMessage = true && this.isSetUserMessage();
    boolean that_present_userMessage = true && that.isSetUserMessage();
    if (this_present_userMessage || that_present_userMessage) {
      if (!(this_present_userMessage && that_present_userMessage))
        return false;
      if (!this.userMessage.equals(that.userMessage))
        return false;
    }

    boolean this_present_createdAt = true;
    boolean that_present_createdAt = true;
    if (this_present_createdAt || that_present_createdAt) {
      if (!(this_present_createdAt && that_present_createdAt))
        return false;
      if (this.createdAt != that.createdAt)
        return false;
    }

    boolean this_present_updatedAt = true;
    boolean that_present_updatedAt = true;
    if (this_present_updatedAt || that_present_updatedAt) {
      if (!(this_present_updatedAt && that_present_updatedAt))
        return false;
      if (this.updatedAt != that.updatedAt)
        return false;
    }

    boolean this_present_reportType = true && this.isSetReportType();
    boolean that_present_reportType = true && that.isSetReportType();
    if (this_present_reportType || that_present_reportType) {
      if (!(this_present_reportType && that_present_reportType))
        return false;
      if (!this.reportType.equals(that.reportType))
        return false;
    }

    boolean this_present_documents = true && this.isSetDocuments();
    boolean that_present_documents = true && that.isSetDocuments();
    if (this_present_documents || that_present_documents) {
      if (!(this_present_documents && that_present_documents))
        return false;
      if (!this.documents.equals(that.documents))
        return false;
    }

    boolean this_present_user = true && this.isSetUser();
    boolean that_present_user = true && that.isSetUser();
    if (this_present_user || that_present_user) {
      if (!(this_present_user && that_present_user))
        return false;
      if (!this.user.equals(that.user))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_userId = true && (isSetUserId());
    list.add(present_userId);
    if (present_userId)
      list.add(userId);

    boolean present_jobId = true && (isSetJobId());
    list.add(present_jobId);
    if (present_jobId)
      list.add(jobId);

    boolean present_deviceOS = true && (isSetDeviceOS());
    list.add(present_deviceOS);
    if (present_deviceOS)
      list.add(deviceOS);

    boolean present_deviceMake = true && (isSetDeviceMake());
    list.add(present_deviceMake);
    if (present_deviceMake)
      list.add(deviceMake);

    boolean present_deviceModel = true && (isSetDeviceModel());
    list.add(present_deviceModel);
    if (present_deviceModel)
      list.add(deviceModel);

    boolean present_deviceId = true && (isSetDeviceId());
    list.add(present_deviceId);
    if (present_deviceId)
      list.add(deviceId);

    boolean present_apiVersion = true && (isSetApiVersion());
    list.add(present_apiVersion);
    if (present_apiVersion)
      list.add(apiVersion);

    boolean present_jsonData = true && (isSetJsonData());
    list.add(present_jsonData);
    if (present_jsonData)
      list.add(jsonData);

    boolean present_userMessage = true && (isSetUserMessage());
    list.add(present_userMessage);
    if (present_userMessage)
      list.add(userMessage);

    boolean present_createdAt = true;
    list.add(present_createdAt);
    if (present_createdAt)
      list.add(createdAt);

    boolean present_updatedAt = true;
    list.add(present_updatedAt);
    if (present_updatedAt)
      list.add(updatedAt);

    boolean present_reportType = true && (isSetReportType());
    list.add(present_reportType);
    if (present_reportType)
      list.add(reportType.getValue());

    boolean present_documents = true && (isSetDocuments());
    list.add(present_documents);
    if (present_documents)
      list.add(documents);

    boolean present_user = true && (isSetUser());
    list.add(present_user);
    if (present_user)
      list.add(user);

    return list.hashCode();
  }

  @Override
  public int compareTo(DebugReport other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJobId()).compareTo(other.isSetJobId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJobId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobId, other.jobId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeviceOS()).compareTo(other.isSetDeviceOS());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeviceOS()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceOS, other.deviceOS);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeviceMake()).compareTo(other.isSetDeviceMake());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeviceMake()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceMake, other.deviceMake);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeviceModel()).compareTo(other.isSetDeviceModel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeviceModel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceModel, other.deviceModel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeviceId()).compareTo(other.isSetDeviceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeviceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceId, other.deviceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApiVersion()).compareTo(other.isSetApiVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApiVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.apiVersion, other.apiVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJsonData()).compareTo(other.isSetJsonData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJsonData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jsonData, other.jsonData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserMessage()).compareTo(other.isSetUserMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userMessage, other.userMessage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreatedAt()).compareTo(other.isSetCreatedAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreatedAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createdAt, other.createdAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdatedAt()).compareTo(other.isSetUpdatedAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdatedAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updatedAt, other.updatedAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReportType()).compareTo(other.isSetReportType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReportType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reportType, other.reportType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDocuments()).compareTo(other.isSetDocuments());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDocuments()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.documents, other.documents);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUser()).compareTo(other.isSetUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, other.user);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DebugReport(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userId:");
    if (this.userId == null) {
      sb.append("null");
    } else {
      sb.append(this.userId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("jobId:");
    if (this.jobId == null) {
      sb.append("null");
    } else {
      sb.append(this.jobId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("deviceOS:");
    if (this.deviceOS == null) {
      sb.append("null");
    } else {
      sb.append(this.deviceOS);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("deviceMake:");
    if (this.deviceMake == null) {
      sb.append("null");
    } else {
      sb.append(this.deviceMake);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("deviceModel:");
    if (this.deviceModel == null) {
      sb.append("null");
    } else {
      sb.append(this.deviceModel);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("deviceId:");
    if (this.deviceId == null) {
      sb.append("null");
    } else {
      sb.append(this.deviceId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("apiVersion:");
    if (this.apiVersion == null) {
      sb.append("null");
    } else {
      sb.append(this.apiVersion);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("jsonData:");
    if (this.jsonData == null) {
      sb.append("null");
    } else {
      sb.append(this.jsonData);
    }
    first = false;
    if (isSetUserMessage()) {
      if (!first) sb.append(", ");
      sb.append("userMessage:");
      if (this.userMessage == null) {
        sb.append("null");
      } else {
        sb.append(this.userMessage);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("createdAt:");
    sb.append(this.createdAt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updatedAt:");
    sb.append(this.updatedAt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("reportType:");
    if (this.reportType == null) {
      sb.append("null");
    } else {
      sb.append(this.reportType);
    }
    first = false;
    if (isSetDocuments()) {
      if (!first) sb.append(", ");
      sb.append("documents:");
      if (this.documents == null) {
        sb.append("null");
      } else {
        sb.append(this.documents);
      }
      first = false;
    }
    if (isSetUser()) {
      if (!first) sb.append(", ");
      sb.append("user:");
      if (this.user == null) {
        sb.append("null");
      } else {
        sb.append(this.user);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (user != null) {
      user.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DebugReportStandardSchemeFactory implements SchemeFactory {
    public DebugReportStandardScheme getScheme() {
      return new DebugReportStandardScheme();
    }
  }

  private static class DebugReportStandardScheme extends StandardScheme<DebugReport> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DebugReport struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userId = iprot.readString();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // JOB_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.jobId = iprot.readString();
              struct.setJobIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DEVICE_OS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deviceOS = iprot.readString();
              struct.setDeviceOSIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DEVICE_MAKE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deviceMake = iprot.readString();
              struct.setDeviceMakeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DEVICE_MODEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deviceModel = iprot.readString();
              struct.setDeviceModelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DEVICE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deviceId = iprot.readString();
              struct.setDeviceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // API_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.apiVersion = iprot.readString();
              struct.setApiVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // JSON_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.jsonData = iprot.readString();
              struct.setJsonDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // USER_MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userMessage = iprot.readString();
              struct.setUserMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CREATED_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createdAt = iprot.readI64();
              struct.setCreatedAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // UPDATED_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.updatedAt = iprot.readI64();
              struct.setUpdatedAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // REPORT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.reportType = com.wi.director.thrift.v1.debugreport.DebugReportType.findByValue(iprot.readI32());
              struct.setReportTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 101: // DOCUMENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set0 = iprot.readSetBegin();
                struct.documents = new HashSet<com.wi.director.thrift.v1.document.Document>(2*_set0.size);
                com.wi.director.thrift.v1.document.Document _elem1;
                for (int _i2 = 0; _i2 < _set0.size; ++_i2)
                {
                  _elem1 = new com.wi.director.thrift.v1.document.Document();
                  _elem1.read(iprot);
                  struct.documents.add(_elem1);
                }
                iprot.readSetEnd();
              }
              struct.setDocumentsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 102: // USER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.user = new com.wi.director.thrift.v1.user.User();
              struct.user.read(iprot);
              struct.setUserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DebugReport struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.userId != null) {
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeString(struct.userId);
        oprot.writeFieldEnd();
      }
      if (struct.jobId != null) {
        oprot.writeFieldBegin(JOB_ID_FIELD_DESC);
        oprot.writeString(struct.jobId);
        oprot.writeFieldEnd();
      }
      if (struct.deviceOS != null) {
        oprot.writeFieldBegin(DEVICE_OS_FIELD_DESC);
        oprot.writeString(struct.deviceOS);
        oprot.writeFieldEnd();
      }
      if (struct.deviceMake != null) {
        oprot.writeFieldBegin(DEVICE_MAKE_FIELD_DESC);
        oprot.writeString(struct.deviceMake);
        oprot.writeFieldEnd();
      }
      if (struct.deviceModel != null) {
        oprot.writeFieldBegin(DEVICE_MODEL_FIELD_DESC);
        oprot.writeString(struct.deviceModel);
        oprot.writeFieldEnd();
      }
      if (struct.deviceId != null) {
        oprot.writeFieldBegin(DEVICE_ID_FIELD_DESC);
        oprot.writeString(struct.deviceId);
        oprot.writeFieldEnd();
      }
      if (struct.apiVersion != null) {
        oprot.writeFieldBegin(API_VERSION_FIELD_DESC);
        oprot.writeString(struct.apiVersion);
        oprot.writeFieldEnd();
      }
      if (struct.jsonData != null) {
        oprot.writeFieldBegin(JSON_DATA_FIELD_DESC);
        oprot.writeString(struct.jsonData);
        oprot.writeFieldEnd();
      }
      if (struct.userMessage != null) {
        if (struct.isSetUserMessage()) {
          oprot.writeFieldBegin(USER_MESSAGE_FIELD_DESC);
          oprot.writeString(struct.userMessage);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(CREATED_AT_FIELD_DESC);
      oprot.writeI64(struct.createdAt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UPDATED_AT_FIELD_DESC);
      oprot.writeI64(struct.updatedAt);
      oprot.writeFieldEnd();
      if (struct.reportType != null) {
        oprot.writeFieldBegin(REPORT_TYPE_FIELD_DESC);
        oprot.writeI32(struct.reportType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.documents != null) {
        if (struct.isSetDocuments()) {
          oprot.writeFieldBegin(DOCUMENTS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.documents.size()));
            for (com.wi.director.thrift.v1.document.Document _iter3 : struct.documents)
            {
              _iter3.write(oprot);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.user != null) {
        if (struct.isSetUser()) {
          oprot.writeFieldBegin(USER_FIELD_DESC);
          struct.user.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

}

