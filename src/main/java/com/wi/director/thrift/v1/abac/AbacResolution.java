/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wi.director.thrift.v1.abac;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * Result of an individual ABAC resolution request
 * We send back the object, subject and action to the client to support batch processing
 */
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class AbacResolution implements org.apache.thrift.TBase<AbacResolution, AbacResolution._Fields>, java.io.Serializable, Cloneable, Comparable<AbacResolution> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AbacResolution");

  private static final org.apache.thrift.protocol.TField OBJECT_FIELD_DESC = new org.apache.thrift.protocol.TField("object", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField SUBJECT_FIELD_DESC = new org.apache.thrift.protocol.TField("subject", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField ACTION_FIELD_DESC = new org.apache.thrift.protocol.TField("action", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField TEAM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("teamId", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField AUTHORIZED_FIELD_DESC = new org.apache.thrift.protocol.TField("authorized", org.apache.thrift.protocol.TType.BOOL, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AbacResolutionStandardSchemeFactory());
  }

  public AbacActor object; // required
  /**
   * the actor requesting authorization for <action> on <subject>
   */
  public AbacActor subject; // required
  /**
   * the actor being acted upon by <subject>
   * 
   * @see AbacAction
   */
  public AbacAction action; // required
  /**
   * the action being authorized: edit, view, archive, etc
   */
  public String teamId; // required
  /**
   * the team context that this request is being made within
   */
  public boolean authorized; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    OBJECT((short)1, "object"),
    /**
     * the actor requesting authorization for <action> on <subject>
     */
    SUBJECT((short)2, "subject"),
    /**
     * the actor being acted upon by <subject>
     * 
     * @see AbacAction
     */
    ACTION((short)3, "action"),
    /**
     * the action being authorized: edit, view, archive, etc
     */
    TEAM_ID((short)4, "teamId"),
    /**
     * the team context that this request is being made within
     */
    AUTHORIZED((short)5, "authorized");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // OBJECT
          return OBJECT;
        case 2: // SUBJECT
          return SUBJECT;
        case 3: // ACTION
          return ACTION;
        case 4: // TEAM_ID
          return TEAM_ID;
        case 5: // AUTHORIZED
          return AUTHORIZED;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __AUTHORIZED_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.OBJECT, new org.apache.thrift.meta_data.FieldMetaData("object", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AbacActor.class)));
    tmpMap.put(_Fields.SUBJECT, new org.apache.thrift.meta_data.FieldMetaData("subject", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AbacActor.class)));
    tmpMap.put(_Fields.ACTION, new org.apache.thrift.meta_data.FieldMetaData("action", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, AbacAction.class)));
    tmpMap.put(_Fields.TEAM_ID, new org.apache.thrift.meta_data.FieldMetaData("teamId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AUTHORIZED, new org.apache.thrift.meta_data.FieldMetaData("authorized", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AbacResolution.class, metaDataMap);
  }

  public AbacResolution() {
  }

  public AbacResolution(
    AbacActor object,
    AbacActor subject,
    AbacAction action,
    String teamId,
    boolean authorized)
  {
    this();
    this.object = object;
    this.subject = subject;
    this.action = action;
    this.teamId = teamId;
    this.authorized = authorized;
    setAuthorizedIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AbacResolution(AbacResolution other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetObject()) {
      this.object = new AbacActor(other.object);
    }
    if (other.isSetSubject()) {
      this.subject = new AbacActor(other.subject);
    }
    if (other.isSetAction()) {
      this.action = other.action;
    }
    if (other.isSetTeamId()) {
      this.teamId = other.teamId;
    }
    this.authorized = other.authorized;
  }

  public AbacResolution deepCopy() {
    return new AbacResolution(this);
  }

  @Override
  public void clear() {
    this.object = null;
    this.subject = null;
    this.action = null;
    this.teamId = null;
    setAuthorizedIsSet(false);
    this.authorized = false;
  }

  public AbacActor getObject() {
    return this.object;
  }

  public AbacResolution setObject(AbacActor object) {
    this.object = object;
    return this;
  }

  public void unsetObject() {
    this.object = null;
  }

  /** Returns true if field object is set (has been assigned a value) and false otherwise */
  public boolean isSetObject() {
    return this.object != null;
  }

  public void setObjectIsSet(boolean value) {
    if (!value) {
      this.object = null;
    }
  }

  /**
   * the actor requesting authorization for <action> on <subject>
   */
  public AbacActor getSubject() {
    return this.subject;
  }

  /**
   * the actor requesting authorization for <action> on <subject>
   */
  public AbacResolution setSubject(AbacActor subject) {
    this.subject = subject;
    return this;
  }

  public void unsetSubject() {
    this.subject = null;
  }

  /** Returns true if field subject is set (has been assigned a value) and false otherwise */
  public boolean isSetSubject() {
    return this.subject != null;
  }

  public void setSubjectIsSet(boolean value) {
    if (!value) {
      this.subject = null;
    }
  }

  /**
   * the actor being acted upon by <subject>
   * 
   * @see AbacAction
   */
  public AbacAction getAction() {
    return this.action;
  }

  /**
   * the actor being acted upon by <subject>
   * 
   * @see AbacAction
   */
  public AbacResolution setAction(AbacAction action) {
    this.action = action;
    return this;
  }

  public void unsetAction() {
    this.action = null;
  }

  /** Returns true if field action is set (has been assigned a value) and false otherwise */
  public boolean isSetAction() {
    return this.action != null;
  }

  public void setActionIsSet(boolean value) {
    if (!value) {
      this.action = null;
    }
  }

  /**
   * the action being authorized: edit, view, archive, etc
   */
  public String getTeamId() {
    return this.teamId;
  }

  /**
   * the action being authorized: edit, view, archive, etc
   */
  public AbacResolution setTeamId(String teamId) {
    this.teamId = teamId;
    return this;
  }

  public void unsetTeamId() {
    this.teamId = null;
  }

  /** Returns true if field teamId is set (has been assigned a value) and false otherwise */
  public boolean isSetTeamId() {
    return this.teamId != null;
  }

  public void setTeamIdIsSet(boolean value) {
    if (!value) {
      this.teamId = null;
    }
  }

  /**
   * the team context that this request is being made within
   */
  public boolean isAuthorized() {
    return this.authorized;
  }

  /**
   * the team context that this request is being made within
   */
  public AbacResolution setAuthorized(boolean authorized) {
    this.authorized = authorized;
    setAuthorizedIsSet(true);
    return this;
  }

  public void unsetAuthorized() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AUTHORIZED_ISSET_ID);
  }

  /** Returns true if field authorized is set (has been assigned a value) and false otherwise */
  public boolean isSetAuthorized() {
    return EncodingUtils.testBit(__isset_bitfield, __AUTHORIZED_ISSET_ID);
  }

  public void setAuthorizedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AUTHORIZED_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case OBJECT:
      if (value == null) {
        unsetObject();
      } else {
        setObject((AbacActor)value);
      }
      break;

    case SUBJECT:
      if (value == null) {
        unsetSubject();
      } else {
        setSubject((AbacActor)value);
      }
      break;

    case ACTION:
      if (value == null) {
        unsetAction();
      } else {
        setAction((AbacAction)value);
      }
      break;

    case TEAM_ID:
      if (value == null) {
        unsetTeamId();
      } else {
        setTeamId((String)value);
      }
      break;

    case AUTHORIZED:
      if (value == null) {
        unsetAuthorized();
      } else {
        setAuthorized((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case OBJECT:
      return getObject();

    case SUBJECT:
      return getSubject();

    case ACTION:
      return getAction();

    case TEAM_ID:
      return getTeamId();

    case AUTHORIZED:
      return isAuthorized();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case OBJECT:
      return isSetObject();
    case SUBJECT:
      return isSetSubject();
    case ACTION:
      return isSetAction();
    case TEAM_ID:
      return isSetTeamId();
    case AUTHORIZED:
      return isSetAuthorized();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AbacResolution)
      return this.equals((AbacResolution)that);
    return false;
  }

  public boolean equals(AbacResolution that) {
    if (that == null)
      return false;

    boolean this_present_object = true && this.isSetObject();
    boolean that_present_object = true && that.isSetObject();
    if (this_present_object || that_present_object) {
      if (!(this_present_object && that_present_object))
        return false;
      if (!this.object.equals(that.object))
        return false;
    }

    boolean this_present_subject = true && this.isSetSubject();
    boolean that_present_subject = true && that.isSetSubject();
    if (this_present_subject || that_present_subject) {
      if (!(this_present_subject && that_present_subject))
        return false;
      if (!this.subject.equals(that.subject))
        return false;
    }

    boolean this_present_action = true && this.isSetAction();
    boolean that_present_action = true && that.isSetAction();
    if (this_present_action || that_present_action) {
      if (!(this_present_action && that_present_action))
        return false;
      if (!this.action.equals(that.action))
        return false;
    }

    boolean this_present_teamId = true && this.isSetTeamId();
    boolean that_present_teamId = true && that.isSetTeamId();
    if (this_present_teamId || that_present_teamId) {
      if (!(this_present_teamId && that_present_teamId))
        return false;
      if (!this.teamId.equals(that.teamId))
        return false;
    }

    boolean this_present_authorized = true;
    boolean that_present_authorized = true;
    if (this_present_authorized || that_present_authorized) {
      if (!(this_present_authorized && that_present_authorized))
        return false;
      if (this.authorized != that.authorized)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_object = true && (isSetObject());
    list.add(present_object);
    if (present_object)
      list.add(object);

    boolean present_subject = true && (isSetSubject());
    list.add(present_subject);
    if (present_subject)
      list.add(subject);

    boolean present_action = true && (isSetAction());
    list.add(present_action);
    if (present_action)
      list.add(action.getValue());

    boolean present_teamId = true && (isSetTeamId());
    list.add(present_teamId);
    if (present_teamId)
      list.add(teamId);

    boolean present_authorized = true;
    list.add(present_authorized);
    if (present_authorized)
      list.add(authorized);

    return list.hashCode();
  }

  @Override
  public int compareTo(AbacResolution other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetObject()).compareTo(other.isSetObject());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetObject()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.object, other.object);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubject()).compareTo(other.isSetSubject());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubject()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subject, other.subject);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAction()).compareTo(other.isSetAction());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAction()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.action, other.action);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTeamId()).compareTo(other.isSetTeamId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeamId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teamId, other.teamId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuthorized()).compareTo(other.isSetAuthorized());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuthorized()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authorized, other.authorized);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AbacResolution(");
    boolean first = true;

    sb.append("object:");
    if (this.object == null) {
      sb.append("null");
    } else {
      sb.append(this.object);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("subject:");
    if (this.subject == null) {
      sb.append("null");
    } else {
      sb.append(this.subject);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("action:");
    if (this.action == null) {
      sb.append("null");
    } else {
      sb.append(this.action);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("teamId:");
    if (this.teamId == null) {
      sb.append("null");
    } else {
      sb.append(this.teamId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("authorized:");
    sb.append(this.authorized);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (object != null) {
      object.validate();
    }
    if (subject != null) {
      subject.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AbacResolutionStandardSchemeFactory implements SchemeFactory {
    public AbacResolutionStandardScheme getScheme() {
      return new AbacResolutionStandardScheme();
    }
  }

  private static class AbacResolutionStandardScheme extends StandardScheme<AbacResolution> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AbacResolution struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // OBJECT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.object = new AbacActor();
              struct.object.read(iprot);
              struct.setObjectIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SUBJECT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.subject = new AbacActor();
              struct.subject.read(iprot);
              struct.setSubjectIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ACTION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.action = com.wi.director.thrift.v1.abac.AbacAction.findByValue(iprot.readI32());
              struct.setActionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TEAM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.teamId = iprot.readString();
              struct.setTeamIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // AUTHORIZED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.authorized = iprot.readBool();
              struct.setAuthorizedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AbacResolution struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.object != null) {
        oprot.writeFieldBegin(OBJECT_FIELD_DESC);
        struct.object.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.subject != null) {
        oprot.writeFieldBegin(SUBJECT_FIELD_DESC);
        struct.subject.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.action != null) {
        oprot.writeFieldBegin(ACTION_FIELD_DESC);
        oprot.writeI32(struct.action.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.teamId != null) {
        oprot.writeFieldBegin(TEAM_ID_FIELD_DESC);
        oprot.writeString(struct.teamId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(AUTHORIZED_FIELD_DESC);
      oprot.writeBool(struct.authorized);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

}

