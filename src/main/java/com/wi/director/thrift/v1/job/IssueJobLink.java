/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wi.director.thrift.v1.job;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * Represent an issue whose src points to an element in this job. <br>
 * Note: when adding fields, remember to add corresponding
 * field in <a href="job_event.html#Struct_IssueLinkOp">IssueLinkOp</a>
 */
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class IssueJobLink implements org.apache.thrift.TBase<IssueJobLink, IssueJobLink._Fields>, java.io.Serializable, Cloneable, Comparable<IssueJobLink> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("IssueJobLink");

  private static final org.apache.thrift.protocol.TField ISSUE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("issueId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SRC_PTR_FIELD_DESC = new org.apache.thrift.protocol.TField("srcPtr", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField MEMBER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("memberIds", org.apache.thrift.protocol.TType.SET, (short)3);
  private static final org.apache.thrift.protocol.TField ISSUE_TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("issueTitle", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ISSUE_CREATOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("issueCreatorId", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField ISSUE_CREATED_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("issueCreatedAt", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField LOOKUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lookupId", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField PRIORITY_FIELD_DESC = new org.apache.thrift.protocol.TField("priority", org.apache.thrift.protocol.TType.STRUCT, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new IssueJobLinkStandardSchemeFactory());
  }

  public String issueId; // required
  /**
   * Points to the job element the issue was created from
   */
  public com.wi.director.thrift.v1.messaging.JobPtr srcPtr; // required
  /**
   * Lists the users who belong to this issue. NOTE: this is not used by mobile and events
   */
  public Set<String> memberIds; // required
  /**
   * Name of the issue
   */
  public String issueTitle; // required
  /**
   * UserId of the creator
   */
  public String issueCreatorId; // required
  /**
   * CreatedAt timestamp of the issue
   */
  public long issueCreatedAt; // required
  /**
   * human readable identifier
   */
  public String lookupId; // optional
  /**
   * priority of the issue
   */
  public PriorityLevel priority; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ISSUE_ID((short)1, "issueId"),
    /**
     * Points to the job element the issue was created from
     */
    SRC_PTR((short)2, "srcPtr"),
    /**
     * Lists the users who belong to this issue. NOTE: this is not used by mobile and events
     */
    MEMBER_IDS((short)3, "memberIds"),
    /**
     * Name of the issue
     */
    ISSUE_TITLE((short)4, "issueTitle"),
    /**
     * UserId of the creator
     */
    ISSUE_CREATOR_ID((short)5, "issueCreatorId"),
    /**
     * CreatedAt timestamp of the issue
     */
    ISSUE_CREATED_AT((short)6, "issueCreatedAt"),
    /**
     * human readable identifier
     */
    LOOKUP_ID((short)7, "lookupId"),
    /**
     * priority of the issue
     */
    PRIORITY((short)8, "priority");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ISSUE_ID
          return ISSUE_ID;
        case 2: // SRC_PTR
          return SRC_PTR;
        case 3: // MEMBER_IDS
          return MEMBER_IDS;
        case 4: // ISSUE_TITLE
          return ISSUE_TITLE;
        case 5: // ISSUE_CREATOR_ID
          return ISSUE_CREATOR_ID;
        case 6: // ISSUE_CREATED_AT
          return ISSUE_CREATED_AT;
        case 7: // LOOKUP_ID
          return LOOKUP_ID;
        case 8: // PRIORITY
          return PRIORITY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ISSUECREATEDAT_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.LOOKUP_ID,_Fields.PRIORITY};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ISSUE_ID, new org.apache.thrift.meta_data.FieldMetaData("issueId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SRC_PTR, new org.apache.thrift.meta_data.FieldMetaData("srcPtr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.messaging.JobPtr.class)));
    tmpMap.put(_Fields.MEMBER_IDS, new org.apache.thrift.meta_data.FieldMetaData("memberIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.ISSUE_TITLE, new org.apache.thrift.meta_data.FieldMetaData("issueTitle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ISSUE_CREATOR_ID, new org.apache.thrift.meta_data.FieldMetaData("issueCreatorId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ISSUE_CREATED_AT, new org.apache.thrift.meta_data.FieldMetaData("issueCreatedAt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LOOKUP_ID, new org.apache.thrift.meta_data.FieldMetaData("lookupId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRIORITY, new org.apache.thrift.meta_data.FieldMetaData("priority", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PriorityLevel.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(IssueJobLink.class, metaDataMap);
  }

  public IssueJobLink() {
  }

  public IssueJobLink(
    String issueId,
    com.wi.director.thrift.v1.messaging.JobPtr srcPtr,
    Set<String> memberIds,
    String issueTitle,
    String issueCreatorId,
    long issueCreatedAt)
  {
    this();
    this.issueId = issueId;
    this.srcPtr = srcPtr;
    this.memberIds = memberIds;
    this.issueTitle = issueTitle;
    this.issueCreatorId = issueCreatorId;
    this.issueCreatedAt = issueCreatedAt;
    setIssueCreatedAtIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public IssueJobLink(IssueJobLink other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetIssueId()) {
      this.issueId = other.issueId;
    }
    if (other.isSetSrcPtr()) {
      this.srcPtr = new com.wi.director.thrift.v1.messaging.JobPtr(other.srcPtr);
    }
    if (other.isSetMemberIds()) {
      Set<String> __this__memberIds = new HashSet<String>(other.memberIds);
      this.memberIds = __this__memberIds;
    }
    if (other.isSetIssueTitle()) {
      this.issueTitle = other.issueTitle;
    }
    if (other.isSetIssueCreatorId()) {
      this.issueCreatorId = other.issueCreatorId;
    }
    this.issueCreatedAt = other.issueCreatedAt;
    if (other.isSetLookupId()) {
      this.lookupId = other.lookupId;
    }
    if (other.isSetPriority()) {
      this.priority = new PriorityLevel(other.priority);
    }
  }

  public IssueJobLink deepCopy() {
    return new IssueJobLink(this);
  }

  @Override
  public void clear() {
    this.issueId = null;
    this.srcPtr = null;
    this.memberIds = null;
    this.issueTitle = null;
    this.issueCreatorId = null;
    setIssueCreatedAtIsSet(false);
    this.issueCreatedAt = 0;
    this.lookupId = null;
    this.priority = null;
  }

  public String getIssueId() {
    return this.issueId;
  }

  public IssueJobLink setIssueId(String issueId) {
    this.issueId = issueId;
    return this;
  }

  public void unsetIssueId() {
    this.issueId = null;
  }

  /** Returns true if field issueId is set (has been assigned a value) and false otherwise */
  public boolean isSetIssueId() {
    return this.issueId != null;
  }

  public void setIssueIdIsSet(boolean value) {
    if (!value) {
      this.issueId = null;
    }
  }

  /**
   * Points to the job element the issue was created from
   */
  public com.wi.director.thrift.v1.messaging.JobPtr getSrcPtr() {
    return this.srcPtr;
  }

  /**
   * Points to the job element the issue was created from
   */
  public IssueJobLink setSrcPtr(com.wi.director.thrift.v1.messaging.JobPtr srcPtr) {
    this.srcPtr = srcPtr;
    return this;
  }

  public void unsetSrcPtr() {
    this.srcPtr = null;
  }

  /** Returns true if field srcPtr is set (has been assigned a value) and false otherwise */
  public boolean isSetSrcPtr() {
    return this.srcPtr != null;
  }

  public void setSrcPtrIsSet(boolean value) {
    if (!value) {
      this.srcPtr = null;
    }
  }

  public int getMemberIdsSize() {
    return (this.memberIds == null) ? 0 : this.memberIds.size();
  }

  public java.util.Iterator<String> getMemberIdsIterator() {
    return (this.memberIds == null) ? null : this.memberIds.iterator();
  }

  public void addToMemberIds(String elem) {
    if (this.memberIds == null) {
      this.memberIds = new HashSet<String>();
    }
    this.memberIds.add(elem);
  }

  /**
   * Lists the users who belong to this issue. NOTE: this is not used by mobile and events
   */
  public Set<String> getMemberIds() {
    return this.memberIds;
  }

  /**
   * Lists the users who belong to this issue. NOTE: this is not used by mobile and events
   */
  public IssueJobLink setMemberIds(Set<String> memberIds) {
    this.memberIds = memberIds;
    return this;
  }

  public void unsetMemberIds() {
    this.memberIds = null;
  }

  /** Returns true if field memberIds is set (has been assigned a value) and false otherwise */
  public boolean isSetMemberIds() {
    return this.memberIds != null;
  }

  public void setMemberIdsIsSet(boolean value) {
    if (!value) {
      this.memberIds = null;
    }
  }

  /**
   * Name of the issue
   */
  public String getIssueTitle() {
    return this.issueTitle;
  }

  /**
   * Name of the issue
   */
  public IssueJobLink setIssueTitle(String issueTitle) {
    this.issueTitle = issueTitle;
    return this;
  }

  public void unsetIssueTitle() {
    this.issueTitle = null;
  }

  /** Returns true if field issueTitle is set (has been assigned a value) and false otherwise */
  public boolean isSetIssueTitle() {
    return this.issueTitle != null;
  }

  public void setIssueTitleIsSet(boolean value) {
    if (!value) {
      this.issueTitle = null;
    }
  }

  /**
   * UserId of the creator
   */
  public String getIssueCreatorId() {
    return this.issueCreatorId;
  }

  /**
   * UserId of the creator
   */
  public IssueJobLink setIssueCreatorId(String issueCreatorId) {
    this.issueCreatorId = issueCreatorId;
    return this;
  }

  public void unsetIssueCreatorId() {
    this.issueCreatorId = null;
  }

  /** Returns true if field issueCreatorId is set (has been assigned a value) and false otherwise */
  public boolean isSetIssueCreatorId() {
    return this.issueCreatorId != null;
  }

  public void setIssueCreatorIdIsSet(boolean value) {
    if (!value) {
      this.issueCreatorId = null;
    }
  }

  /**
   * CreatedAt timestamp of the issue
   */
  public long getIssueCreatedAt() {
    return this.issueCreatedAt;
  }

  /**
   * CreatedAt timestamp of the issue
   */
  public IssueJobLink setIssueCreatedAt(long issueCreatedAt) {
    this.issueCreatedAt = issueCreatedAt;
    setIssueCreatedAtIsSet(true);
    return this;
  }

  public void unsetIssueCreatedAt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISSUECREATEDAT_ISSET_ID);
  }

  /** Returns true if field issueCreatedAt is set (has been assigned a value) and false otherwise */
  public boolean isSetIssueCreatedAt() {
    return EncodingUtils.testBit(__isset_bitfield, __ISSUECREATEDAT_ISSET_ID);
  }

  public void setIssueCreatedAtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISSUECREATEDAT_ISSET_ID, value);
  }

  /**
   * human readable identifier
   */
  public String getLookupId() {
    return this.lookupId;
  }

  /**
   * human readable identifier
   */
  public IssueJobLink setLookupId(String lookupId) {
    this.lookupId = lookupId;
    return this;
  }

  public void unsetLookupId() {
    this.lookupId = null;
  }

  /** Returns true if field lookupId is set (has been assigned a value) and false otherwise */
  public boolean isSetLookupId() {
    return this.lookupId != null;
  }

  public void setLookupIdIsSet(boolean value) {
    if (!value) {
      this.lookupId = null;
    }
  }

  /**
   * priority of the issue
   */
  public PriorityLevel getPriority() {
    return this.priority;
  }

  /**
   * priority of the issue
   */
  public IssueJobLink setPriority(PriorityLevel priority) {
    this.priority = priority;
    return this;
  }

  public void unsetPriority() {
    this.priority = null;
  }

  /** Returns true if field priority is set (has been assigned a value) and false otherwise */
  public boolean isSetPriority() {
    return this.priority != null;
  }

  public void setPriorityIsSet(boolean value) {
    if (!value) {
      this.priority = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ISSUE_ID:
      if (value == null) {
        unsetIssueId();
      } else {
        setIssueId((String)value);
      }
      break;

    case SRC_PTR:
      if (value == null) {
        unsetSrcPtr();
      } else {
        setSrcPtr((com.wi.director.thrift.v1.messaging.JobPtr)value);
      }
      break;

    case MEMBER_IDS:
      if (value == null) {
        unsetMemberIds();
      } else {
        setMemberIds((Set<String>)value);
      }
      break;

    case ISSUE_TITLE:
      if (value == null) {
        unsetIssueTitle();
      } else {
        setIssueTitle((String)value);
      }
      break;

    case ISSUE_CREATOR_ID:
      if (value == null) {
        unsetIssueCreatorId();
      } else {
        setIssueCreatorId((String)value);
      }
      break;

    case ISSUE_CREATED_AT:
      if (value == null) {
        unsetIssueCreatedAt();
      } else {
        setIssueCreatedAt((Long)value);
      }
      break;

    case LOOKUP_ID:
      if (value == null) {
        unsetLookupId();
      } else {
        setLookupId((String)value);
      }
      break;

    case PRIORITY:
      if (value == null) {
        unsetPriority();
      } else {
        setPriority((PriorityLevel)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ISSUE_ID:
      return getIssueId();

    case SRC_PTR:
      return getSrcPtr();

    case MEMBER_IDS:
      return getMemberIds();

    case ISSUE_TITLE:
      return getIssueTitle();

    case ISSUE_CREATOR_ID:
      return getIssueCreatorId();

    case ISSUE_CREATED_AT:
      return getIssueCreatedAt();

    case LOOKUP_ID:
      return getLookupId();

    case PRIORITY:
      return getPriority();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ISSUE_ID:
      return isSetIssueId();
    case SRC_PTR:
      return isSetSrcPtr();
    case MEMBER_IDS:
      return isSetMemberIds();
    case ISSUE_TITLE:
      return isSetIssueTitle();
    case ISSUE_CREATOR_ID:
      return isSetIssueCreatorId();
    case ISSUE_CREATED_AT:
      return isSetIssueCreatedAt();
    case LOOKUP_ID:
      return isSetLookupId();
    case PRIORITY:
      return isSetPriority();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof IssueJobLink)
      return this.equals((IssueJobLink)that);
    return false;
  }

  public boolean equals(IssueJobLink that) {
    if (that == null)
      return false;

    boolean this_present_issueId = true && this.isSetIssueId();
    boolean that_present_issueId = true && that.isSetIssueId();
    if (this_present_issueId || that_present_issueId) {
      if (!(this_present_issueId && that_present_issueId))
        return false;
      if (!this.issueId.equals(that.issueId))
        return false;
    }

    boolean this_present_srcPtr = true && this.isSetSrcPtr();
    boolean that_present_srcPtr = true && that.isSetSrcPtr();
    if (this_present_srcPtr || that_present_srcPtr) {
      if (!(this_present_srcPtr && that_present_srcPtr))
        return false;
      if (!this.srcPtr.equals(that.srcPtr))
        return false;
    }

    boolean this_present_memberIds = true && this.isSetMemberIds();
    boolean that_present_memberIds = true && that.isSetMemberIds();
    if (this_present_memberIds || that_present_memberIds) {
      if (!(this_present_memberIds && that_present_memberIds))
        return false;
      if (!this.memberIds.equals(that.memberIds))
        return false;
    }

    boolean this_present_issueTitle = true && this.isSetIssueTitle();
    boolean that_present_issueTitle = true && that.isSetIssueTitle();
    if (this_present_issueTitle || that_present_issueTitle) {
      if (!(this_present_issueTitle && that_present_issueTitle))
        return false;
      if (!this.issueTitle.equals(that.issueTitle))
        return false;
    }

    boolean this_present_issueCreatorId = true && this.isSetIssueCreatorId();
    boolean that_present_issueCreatorId = true && that.isSetIssueCreatorId();
    if (this_present_issueCreatorId || that_present_issueCreatorId) {
      if (!(this_present_issueCreatorId && that_present_issueCreatorId))
        return false;
      if (!this.issueCreatorId.equals(that.issueCreatorId))
        return false;
    }

    boolean this_present_issueCreatedAt = true;
    boolean that_present_issueCreatedAt = true;
    if (this_present_issueCreatedAt || that_present_issueCreatedAt) {
      if (!(this_present_issueCreatedAt && that_present_issueCreatedAt))
        return false;
      if (this.issueCreatedAt != that.issueCreatedAt)
        return false;
    }

    boolean this_present_lookupId = true && this.isSetLookupId();
    boolean that_present_lookupId = true && that.isSetLookupId();
    if (this_present_lookupId || that_present_lookupId) {
      if (!(this_present_lookupId && that_present_lookupId))
        return false;
      if (!this.lookupId.equals(that.lookupId))
        return false;
    }

    boolean this_present_priority = true && this.isSetPriority();
    boolean that_present_priority = true && that.isSetPriority();
    if (this_present_priority || that_present_priority) {
      if (!(this_present_priority && that_present_priority))
        return false;
      if (!this.priority.equals(that.priority))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_issueId = true && (isSetIssueId());
    list.add(present_issueId);
    if (present_issueId)
      list.add(issueId);

    boolean present_srcPtr = true && (isSetSrcPtr());
    list.add(present_srcPtr);
    if (present_srcPtr)
      list.add(srcPtr);

    boolean present_memberIds = true && (isSetMemberIds());
    list.add(present_memberIds);
    if (present_memberIds)
      list.add(memberIds);

    boolean present_issueTitle = true && (isSetIssueTitle());
    list.add(present_issueTitle);
    if (present_issueTitle)
      list.add(issueTitle);

    boolean present_issueCreatorId = true && (isSetIssueCreatorId());
    list.add(present_issueCreatorId);
    if (present_issueCreatorId)
      list.add(issueCreatorId);

    boolean present_issueCreatedAt = true;
    list.add(present_issueCreatedAt);
    if (present_issueCreatedAt)
      list.add(issueCreatedAt);

    boolean present_lookupId = true && (isSetLookupId());
    list.add(present_lookupId);
    if (present_lookupId)
      list.add(lookupId);

    boolean present_priority = true && (isSetPriority());
    list.add(present_priority);
    if (present_priority)
      list.add(priority);

    return list.hashCode();
  }

  @Override
  public int compareTo(IssueJobLink other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetIssueId()).compareTo(other.isSetIssueId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIssueId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.issueId, other.issueId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSrcPtr()).compareTo(other.isSetSrcPtr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSrcPtr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.srcPtr, other.srcPtr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMemberIds()).compareTo(other.isSetMemberIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemberIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memberIds, other.memberIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIssueTitle()).compareTo(other.isSetIssueTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIssueTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.issueTitle, other.issueTitle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIssueCreatorId()).compareTo(other.isSetIssueCreatorId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIssueCreatorId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.issueCreatorId, other.issueCreatorId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIssueCreatedAt()).compareTo(other.isSetIssueCreatedAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIssueCreatedAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.issueCreatedAt, other.issueCreatedAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLookupId()).compareTo(other.isSetLookupId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLookupId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lookupId, other.lookupId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPriority()).compareTo(other.isSetPriority());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPriority()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priority, other.priority);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("IssueJobLink(");
    boolean first = true;

    sb.append("issueId:");
    if (this.issueId == null) {
      sb.append("null");
    } else {
      sb.append(this.issueId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("srcPtr:");
    if (this.srcPtr == null) {
      sb.append("null");
    } else {
      sb.append(this.srcPtr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("memberIds:");
    if (this.memberIds == null) {
      sb.append("null");
    } else {
      sb.append(this.memberIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("issueTitle:");
    if (this.issueTitle == null) {
      sb.append("null");
    } else {
      sb.append(this.issueTitle);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("issueCreatorId:");
    if (this.issueCreatorId == null) {
      sb.append("null");
    } else {
      sb.append(this.issueCreatorId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("issueCreatedAt:");
    sb.append(this.issueCreatedAt);
    first = false;
    if (isSetLookupId()) {
      if (!first) sb.append(", ");
      sb.append("lookupId:");
      if (this.lookupId == null) {
        sb.append("null");
      } else {
        sb.append(this.lookupId);
      }
      first = false;
    }
    if (isSetPriority()) {
      if (!first) sb.append(", ");
      sb.append("priority:");
      if (this.priority == null) {
        sb.append("null");
      } else {
        sb.append(this.priority);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (srcPtr != null) {
      srcPtr.validate();
    }
    if (priority != null) {
      priority.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class IssueJobLinkStandardSchemeFactory implements SchemeFactory {
    public IssueJobLinkStandardScheme getScheme() {
      return new IssueJobLinkStandardScheme();
    }
  }

  private static class IssueJobLinkStandardScheme extends StandardScheme<IssueJobLink> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, IssueJobLink struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ISSUE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.issueId = iprot.readString();
              struct.setIssueIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SRC_PTR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.srcPtr = new com.wi.director.thrift.v1.messaging.JobPtr();
              struct.srcPtr.read(iprot);
              struct.setSrcPtrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MEMBER_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set74 = iprot.readSetBegin();
                struct.memberIds = new HashSet<String>(2*_set74.size);
                String _elem75;
                for (int _i76 = 0; _i76 < _set74.size; ++_i76)
                {
                  _elem75 = iprot.readString();
                  struct.memberIds.add(_elem75);
                }
                iprot.readSetEnd();
              }
              struct.setMemberIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ISSUE_TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.issueTitle = iprot.readString();
              struct.setIssueTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ISSUE_CREATOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.issueCreatorId = iprot.readString();
              struct.setIssueCreatorIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ISSUE_CREATED_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.issueCreatedAt = iprot.readI64();
              struct.setIssueCreatedAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // LOOKUP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lookupId = iprot.readString();
              struct.setLookupIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PRIORITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.priority = new PriorityLevel();
              struct.priority.read(iprot);
              struct.setPriorityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, IssueJobLink struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.issueId != null) {
        oprot.writeFieldBegin(ISSUE_ID_FIELD_DESC);
        oprot.writeString(struct.issueId);
        oprot.writeFieldEnd();
      }
      if (struct.srcPtr != null) {
        oprot.writeFieldBegin(SRC_PTR_FIELD_DESC);
        struct.srcPtr.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.memberIds != null) {
        oprot.writeFieldBegin(MEMBER_IDS_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.memberIds.size()));
          for (String _iter77 : struct.memberIds)
          {
            oprot.writeString(_iter77);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.issueTitle != null) {
        oprot.writeFieldBegin(ISSUE_TITLE_FIELD_DESC);
        oprot.writeString(struct.issueTitle);
        oprot.writeFieldEnd();
      }
      if (struct.issueCreatorId != null) {
        oprot.writeFieldBegin(ISSUE_CREATOR_ID_FIELD_DESC);
        oprot.writeString(struct.issueCreatorId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ISSUE_CREATED_AT_FIELD_DESC);
      oprot.writeI64(struct.issueCreatedAt);
      oprot.writeFieldEnd();
      if (struct.lookupId != null) {
        if (struct.isSetLookupId()) {
          oprot.writeFieldBegin(LOOKUP_ID_FIELD_DESC);
          oprot.writeString(struct.lookupId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.priority != null) {
        if (struct.isSetPriority()) {
          oprot.writeFieldBegin(PRIORITY_FIELD_DESC);
          struct.priority.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

}

