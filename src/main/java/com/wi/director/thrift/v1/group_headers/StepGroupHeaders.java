/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wi.director.thrift.v1.group_headers;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * Step group header contains the set of headers for a step group
 */
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class StepGroupHeaders implements org.apache.thrift.TBase<StepGroupHeaders, StepGroupHeaders._Fields>, java.io.Serializable, Cloneable, Comparable<StepGroupHeaders> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StepGroupHeaders");

  private static final org.apache.thrift.protocol.TField CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField("category", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField EQUIPMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("equipment", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField NOTICES_FIELD_DESC = new org.apache.thrift.protocol.TField("notices", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField CONDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("condition", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CATEGORY_DIFF_FIELD_DESC = new org.apache.thrift.protocol.TField("categoryDiff", org.apache.thrift.protocol.TType.STRUCT, (short)100);
  private static final org.apache.thrift.protocol.TField CONDITION_DIFF_FIELD_DESC = new org.apache.thrift.protocol.TField("conditionDiff", org.apache.thrift.protocol.TType.STRUCT, (short)101);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new StepGroupHeadersStandardSchemeFactory());
  }

  public StepGroupCategory category; // optional
  public List<EquipmentIcon> equipment; // optional
  public List<NoticeHeader> notices; // optional
  public String condition; // optional
  public CategoryDiff categoryDiff; // optional
  public com.wi.director.thrift.v1.diff.StringDiff conditionDiff; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CATEGORY((short)1, "category"),
    EQUIPMENT((short)2, "equipment"),
    NOTICES((short)3, "notices"),
    CONDITION((short)4, "condition"),
    CATEGORY_DIFF((short)100, "categoryDiff"),
    CONDITION_DIFF((short)101, "conditionDiff");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CATEGORY
          return CATEGORY;
        case 2: // EQUIPMENT
          return EQUIPMENT;
        case 3: // NOTICES
          return NOTICES;
        case 4: // CONDITION
          return CONDITION;
        case 100: // CATEGORY_DIFF
          return CATEGORY_DIFF;
        case 101: // CONDITION_DIFF
          return CONDITION_DIFF;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.CATEGORY,_Fields.EQUIPMENT,_Fields.NOTICES,_Fields.CONDITION,_Fields.CATEGORY_DIFF,_Fields.CONDITION_DIFF};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CATEGORY, new org.apache.thrift.meta_data.FieldMetaData("category", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StepGroupCategory.class)));
    tmpMap.put(_Fields.EQUIPMENT, new org.apache.thrift.meta_data.FieldMetaData("equipment", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EquipmentIcon.class))));
    tmpMap.put(_Fields.NOTICES, new org.apache.thrift.meta_data.FieldMetaData("notices", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NoticeHeader.class))));
    tmpMap.put(_Fields.CONDITION, new org.apache.thrift.meta_data.FieldMetaData("condition", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CATEGORY_DIFF, new org.apache.thrift.meta_data.FieldMetaData("categoryDiff", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CategoryDiff.class)));
    tmpMap.put(_Fields.CONDITION_DIFF, new org.apache.thrift.meta_data.FieldMetaData("conditionDiff", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.diff.StringDiff.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StepGroupHeaders.class, metaDataMap);
  }

  public StepGroupHeaders() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StepGroupHeaders(StepGroupHeaders other) {
    if (other.isSetCategory()) {
      this.category = new StepGroupCategory(other.category);
    }
    if (other.isSetEquipment()) {
      List<EquipmentIcon> __this__equipment = new ArrayList<EquipmentIcon>(other.equipment.size());
      for (EquipmentIcon other_element : other.equipment) {
        __this__equipment.add(new EquipmentIcon(other_element));
      }
      this.equipment = __this__equipment;
    }
    if (other.isSetNotices()) {
      List<NoticeHeader> __this__notices = new ArrayList<NoticeHeader>(other.notices.size());
      for (NoticeHeader other_element : other.notices) {
        __this__notices.add(new NoticeHeader(other_element));
      }
      this.notices = __this__notices;
    }
    if (other.isSetCondition()) {
      this.condition = other.condition;
    }
    if (other.isSetCategoryDiff()) {
      this.categoryDiff = new CategoryDiff(other.categoryDiff);
    }
    if (other.isSetConditionDiff()) {
      this.conditionDiff = new com.wi.director.thrift.v1.diff.StringDiff(other.conditionDiff);
    }
  }

  public StepGroupHeaders deepCopy() {
    return new StepGroupHeaders(this);
  }

  @Override
  public void clear() {
    this.category = null;
    this.equipment = null;
    this.notices = null;
    this.condition = null;
    this.categoryDiff = null;
    this.conditionDiff = null;
  }

  public StepGroupCategory getCategory() {
    return this.category;
  }

  public StepGroupHeaders setCategory(StepGroupCategory category) {
    this.category = category;
    return this;
  }

  public void unsetCategory() {
    this.category = null;
  }

  /** Returns true if field category is set (has been assigned a value) and false otherwise */
  public boolean isSetCategory() {
    return this.category != null;
  }

  public void setCategoryIsSet(boolean value) {
    if (!value) {
      this.category = null;
    }
  }

  public int getEquipmentSize() {
    return (this.equipment == null) ? 0 : this.equipment.size();
  }

  public java.util.Iterator<EquipmentIcon> getEquipmentIterator() {
    return (this.equipment == null) ? null : this.equipment.iterator();
  }

  public void addToEquipment(EquipmentIcon elem) {
    if (this.equipment == null) {
      this.equipment = new ArrayList<EquipmentIcon>();
    }
    this.equipment.add(elem);
  }

  public List<EquipmentIcon> getEquipment() {
    return this.equipment;
  }

  public StepGroupHeaders setEquipment(List<EquipmentIcon> equipment) {
    this.equipment = equipment;
    return this;
  }

  public void unsetEquipment() {
    this.equipment = null;
  }

  /** Returns true if field equipment is set (has been assigned a value) and false otherwise */
  public boolean isSetEquipment() {
    return this.equipment != null;
  }

  public void setEquipmentIsSet(boolean value) {
    if (!value) {
      this.equipment = null;
    }
  }

  public int getNoticesSize() {
    return (this.notices == null) ? 0 : this.notices.size();
  }

  public java.util.Iterator<NoticeHeader> getNoticesIterator() {
    return (this.notices == null) ? null : this.notices.iterator();
  }

  public void addToNotices(NoticeHeader elem) {
    if (this.notices == null) {
      this.notices = new ArrayList<NoticeHeader>();
    }
    this.notices.add(elem);
  }

  public List<NoticeHeader> getNotices() {
    return this.notices;
  }

  public StepGroupHeaders setNotices(List<NoticeHeader> notices) {
    this.notices = notices;
    return this;
  }

  public void unsetNotices() {
    this.notices = null;
  }

  /** Returns true if field notices is set (has been assigned a value) and false otherwise */
  public boolean isSetNotices() {
    return this.notices != null;
  }

  public void setNoticesIsSet(boolean value) {
    if (!value) {
      this.notices = null;
    }
  }

  public String getCondition() {
    return this.condition;
  }

  public StepGroupHeaders setCondition(String condition) {
    this.condition = condition;
    return this;
  }

  public void unsetCondition() {
    this.condition = null;
  }

  /** Returns true if field condition is set (has been assigned a value) and false otherwise */
  public boolean isSetCondition() {
    return this.condition != null;
  }

  public void setConditionIsSet(boolean value) {
    if (!value) {
      this.condition = null;
    }
  }

  public CategoryDiff getCategoryDiff() {
    return this.categoryDiff;
  }

  public StepGroupHeaders setCategoryDiff(CategoryDiff categoryDiff) {
    this.categoryDiff = categoryDiff;
    return this;
  }

  public void unsetCategoryDiff() {
    this.categoryDiff = null;
  }

  /** Returns true if field categoryDiff is set (has been assigned a value) and false otherwise */
  public boolean isSetCategoryDiff() {
    return this.categoryDiff != null;
  }

  public void setCategoryDiffIsSet(boolean value) {
    if (!value) {
      this.categoryDiff = null;
    }
  }

  public com.wi.director.thrift.v1.diff.StringDiff getConditionDiff() {
    return this.conditionDiff;
  }

  public StepGroupHeaders setConditionDiff(com.wi.director.thrift.v1.diff.StringDiff conditionDiff) {
    this.conditionDiff = conditionDiff;
    return this;
  }

  public void unsetConditionDiff() {
    this.conditionDiff = null;
  }

  /** Returns true if field conditionDiff is set (has been assigned a value) and false otherwise */
  public boolean isSetConditionDiff() {
    return this.conditionDiff != null;
  }

  public void setConditionDiffIsSet(boolean value) {
    if (!value) {
      this.conditionDiff = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CATEGORY:
      if (value == null) {
        unsetCategory();
      } else {
        setCategory((StepGroupCategory)value);
      }
      break;

    case EQUIPMENT:
      if (value == null) {
        unsetEquipment();
      } else {
        setEquipment((List<EquipmentIcon>)value);
      }
      break;

    case NOTICES:
      if (value == null) {
        unsetNotices();
      } else {
        setNotices((List<NoticeHeader>)value);
      }
      break;

    case CONDITION:
      if (value == null) {
        unsetCondition();
      } else {
        setCondition((String)value);
      }
      break;

    case CATEGORY_DIFF:
      if (value == null) {
        unsetCategoryDiff();
      } else {
        setCategoryDiff((CategoryDiff)value);
      }
      break;

    case CONDITION_DIFF:
      if (value == null) {
        unsetConditionDiff();
      } else {
        setConditionDiff((com.wi.director.thrift.v1.diff.StringDiff)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CATEGORY:
      return getCategory();

    case EQUIPMENT:
      return getEquipment();

    case NOTICES:
      return getNotices();

    case CONDITION:
      return getCondition();

    case CATEGORY_DIFF:
      return getCategoryDiff();

    case CONDITION_DIFF:
      return getConditionDiff();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CATEGORY:
      return isSetCategory();
    case EQUIPMENT:
      return isSetEquipment();
    case NOTICES:
      return isSetNotices();
    case CONDITION:
      return isSetCondition();
    case CATEGORY_DIFF:
      return isSetCategoryDiff();
    case CONDITION_DIFF:
      return isSetConditionDiff();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof StepGroupHeaders)
      return this.equals((StepGroupHeaders)that);
    return false;
  }

  public boolean equals(StepGroupHeaders that) {
    if (that == null)
      return false;

    boolean this_present_category = true && this.isSetCategory();
    boolean that_present_category = true && that.isSetCategory();
    if (this_present_category || that_present_category) {
      if (!(this_present_category && that_present_category))
        return false;
      if (!this.category.equals(that.category))
        return false;
    }

    boolean this_present_equipment = true && this.isSetEquipment();
    boolean that_present_equipment = true && that.isSetEquipment();
    if (this_present_equipment || that_present_equipment) {
      if (!(this_present_equipment && that_present_equipment))
        return false;
      if (!this.equipment.equals(that.equipment))
        return false;
    }

    boolean this_present_notices = true && this.isSetNotices();
    boolean that_present_notices = true && that.isSetNotices();
    if (this_present_notices || that_present_notices) {
      if (!(this_present_notices && that_present_notices))
        return false;
      if (!this.notices.equals(that.notices))
        return false;
    }

    boolean this_present_condition = true && this.isSetCondition();
    boolean that_present_condition = true && that.isSetCondition();
    if (this_present_condition || that_present_condition) {
      if (!(this_present_condition && that_present_condition))
        return false;
      if (!this.condition.equals(that.condition))
        return false;
    }

    boolean this_present_categoryDiff = true && this.isSetCategoryDiff();
    boolean that_present_categoryDiff = true && that.isSetCategoryDiff();
    if (this_present_categoryDiff || that_present_categoryDiff) {
      if (!(this_present_categoryDiff && that_present_categoryDiff))
        return false;
      if (!this.categoryDiff.equals(that.categoryDiff))
        return false;
    }

    boolean this_present_conditionDiff = true && this.isSetConditionDiff();
    boolean that_present_conditionDiff = true && that.isSetConditionDiff();
    if (this_present_conditionDiff || that_present_conditionDiff) {
      if (!(this_present_conditionDiff && that_present_conditionDiff))
        return false;
      if (!this.conditionDiff.equals(that.conditionDiff))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_category = true && (isSetCategory());
    list.add(present_category);
    if (present_category)
      list.add(category);

    boolean present_equipment = true && (isSetEquipment());
    list.add(present_equipment);
    if (present_equipment)
      list.add(equipment);

    boolean present_notices = true && (isSetNotices());
    list.add(present_notices);
    if (present_notices)
      list.add(notices);

    boolean present_condition = true && (isSetCondition());
    list.add(present_condition);
    if (present_condition)
      list.add(condition);

    boolean present_categoryDiff = true && (isSetCategoryDiff());
    list.add(present_categoryDiff);
    if (present_categoryDiff)
      list.add(categoryDiff);

    boolean present_conditionDiff = true && (isSetConditionDiff());
    list.add(present_conditionDiff);
    if (present_conditionDiff)
      list.add(conditionDiff);

    return list.hashCode();
  }

  @Override
  public int compareTo(StepGroupHeaders other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCategory()).compareTo(other.isSetCategory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCategory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.category, other.category);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEquipment()).compareTo(other.isSetEquipment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEquipment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.equipment, other.equipment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNotices()).compareTo(other.isSetNotices());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotices()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notices, other.notices);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCondition()).compareTo(other.isSetCondition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCondition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.condition, other.condition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCategoryDiff()).compareTo(other.isSetCategoryDiff());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCategoryDiff()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.categoryDiff, other.categoryDiff);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConditionDiff()).compareTo(other.isSetConditionDiff());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConditionDiff()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.conditionDiff, other.conditionDiff);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("StepGroupHeaders(");
    boolean first = true;

    if (isSetCategory()) {
      sb.append("category:");
      if (this.category == null) {
        sb.append("null");
      } else {
        sb.append(this.category);
      }
      first = false;
    }
    if (isSetEquipment()) {
      if (!first) sb.append(", ");
      sb.append("equipment:");
      if (this.equipment == null) {
        sb.append("null");
      } else {
        sb.append(this.equipment);
      }
      first = false;
    }
    if (isSetNotices()) {
      if (!first) sb.append(", ");
      sb.append("notices:");
      if (this.notices == null) {
        sb.append("null");
      } else {
        sb.append(this.notices);
      }
      first = false;
    }
    if (isSetCondition()) {
      if (!first) sb.append(", ");
      sb.append("condition:");
      if (this.condition == null) {
        sb.append("null");
      } else {
        sb.append(this.condition);
      }
      first = false;
    }
    if (isSetCategoryDiff()) {
      if (!first) sb.append(", ");
      sb.append("categoryDiff:");
      if (this.categoryDiff == null) {
        sb.append("null");
      } else {
        sb.append(this.categoryDiff);
      }
      first = false;
    }
    if (isSetConditionDiff()) {
      if (!first) sb.append(", ");
      sb.append("conditionDiff:");
      if (this.conditionDiff == null) {
        sb.append("null");
      } else {
        sb.append(this.conditionDiff);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (category != null) {
      category.validate();
    }
    if (categoryDiff != null) {
      categoryDiff.validate();
    }
    if (conditionDiff != null) {
      conditionDiff.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StepGroupHeadersStandardSchemeFactory implements SchemeFactory {
    public StepGroupHeadersStandardScheme getScheme() {
      return new StepGroupHeadersStandardScheme();
    }
  }

  private static class StepGroupHeadersStandardScheme extends StandardScheme<StepGroupHeaders> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, StepGroupHeaders struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CATEGORY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.category = new StepGroupCategory();
              struct.category.read(iprot);
              struct.setCategoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // EQUIPMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.equipment = new ArrayList<EquipmentIcon>(_list0.size);
                EquipmentIcon _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new EquipmentIcon();
                  _elem1.read(iprot);
                  struct.equipment.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setEquipmentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NOTICES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.notices = new ArrayList<NoticeHeader>(_list3.size);
                NoticeHeader _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = new NoticeHeader();
                  _elem4.read(iprot);
                  struct.notices.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setNoticesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CONDITION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.condition = iprot.readString();
              struct.setConditionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 100: // CATEGORY_DIFF
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.categoryDiff = new CategoryDiff();
              struct.categoryDiff.read(iprot);
              struct.setCategoryDiffIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 101: // CONDITION_DIFF
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.conditionDiff = new com.wi.director.thrift.v1.diff.StringDiff();
              struct.conditionDiff.read(iprot);
              struct.setConditionDiffIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, StepGroupHeaders struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.category != null) {
        if (struct.isSetCategory()) {
          oprot.writeFieldBegin(CATEGORY_FIELD_DESC);
          struct.category.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.equipment != null) {
        if (struct.isSetEquipment()) {
          oprot.writeFieldBegin(EQUIPMENT_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.equipment.size()));
            for (EquipmentIcon _iter6 : struct.equipment)
            {
              _iter6.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.notices != null) {
        if (struct.isSetNotices()) {
          oprot.writeFieldBegin(NOTICES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.notices.size()));
            for (NoticeHeader _iter7 : struct.notices)
            {
              _iter7.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.condition != null) {
        if (struct.isSetCondition()) {
          oprot.writeFieldBegin(CONDITION_FIELD_DESC);
          oprot.writeString(struct.condition);
          oprot.writeFieldEnd();
        }
      }
      if (struct.categoryDiff != null) {
        if (struct.isSetCategoryDiff()) {
          oprot.writeFieldBegin(CATEGORY_DIFF_FIELD_DESC);
          struct.categoryDiff.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.conditionDiff != null) {
        if (struct.isSetConditionDiff()) {
          oprot.writeFieldBegin(CONDITION_DIFF_FIELD_DESC);
          struct.conditionDiff.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

}

