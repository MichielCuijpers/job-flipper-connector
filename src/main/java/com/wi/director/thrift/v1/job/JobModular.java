/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wi.director.thrift.v1.job;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class JobModular implements org.apache.thrift.TBase<JobModular, JobModular._Fields>, java.io.Serializable, Cloneable, Comparable<JobModular> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("JobModular");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField JOB_TEMPLATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("jobTemplateId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField JOB_TEMPLATE_INTERNAL_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("jobTemplateInternalVersion", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField TEAM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("teamId", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField COMPLETED_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("completedAt", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField REASON_COMPLETED_FIELD_DESC = new org.apache.thrift.protocol.TField("reasonCompleted", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField CREATED_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("createdAt", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField UPDATED_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("updatedAt", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField IS_PREVIEW_FIELD_DESC = new org.apache.thrift.protocol.TField("isPreview", org.apache.thrift.protocol.TType.BOOL, (short)10);
  private static final org.apache.thrift.protocol.TField DOCUMENT_EMAIL_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("documentEmailAddress", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField PLANNED_START_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("plannedStartAt", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField STARTED_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("startedAt", org.apache.thrift.protocol.TType.I64, (short)13);
  private static final org.apache.thrift.protocol.TField CREATOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("creatorId", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField METADATA_BY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("metadataById", org.apache.thrift.protocol.TType.MAP, (short)15);
  private static final org.apache.thrift.protocol.TField MESH_ENABLED_FIELD_DESC = new org.apache.thrift.protocol.TField("meshEnabled", org.apache.thrift.protocol.TType.BOOL, (short)16);
  private static final org.apache.thrift.protocol.TField RECURRING_RULE_FIELD_DESC = new org.apache.thrift.protocol.TField("recurringRule", org.apache.thrift.protocol.TType.STRUCT, (short)17);
  private static final org.apache.thrift.protocol.TField RECURRED_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("recurredInfo", org.apache.thrift.protocol.TType.STRUCT, (short)18);
  private static final org.apache.thrift.protocol.TField SCHEDULE_FIELD_DESC = new org.apache.thrift.protocol.TField("schedule", org.apache.thrift.protocol.TType.STRUCT, (short)19);
  private static final org.apache.thrift.protocol.TField START_AUTO_FIELD_DESC = new org.apache.thrift.protocol.TField("startAuto", org.apache.thrift.protocol.TType.BOOL, (short)20);
  private static final org.apache.thrift.protocol.TField JOB_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("jobType", org.apache.thrift.protocol.TType.I32, (short)21);
  private static final org.apache.thrift.protocol.TField USING_EVENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("usingEvents", org.apache.thrift.protocol.TType.BOOL, (short)22);
  private static final org.apache.thrift.protocol.TField SRC_FIELD_DESC = new org.apache.thrift.protocol.TField("src", org.apache.thrift.protocol.TType.STRUCT, (short)23);
  private static final org.apache.thrift.protocol.TField LOOKUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lookupId", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField PRIORITY_FIELD_DESC = new org.apache.thrift.protocol.TField("priority", org.apache.thrift.protocol.TType.STRUCT, (short)25);
  private static final org.apache.thrift.protocol.TField ARCHIVED_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("archivedAt", org.apache.thrift.protocol.TType.I64, (short)26);
  private static final org.apache.thrift.protocol.TField LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("location", org.apache.thrift.protocol.TType.STRING, (short)27);
  private static final org.apache.thrift.protocol.TField PLANNED_START_JOB_ROLE_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("plannedStartJobRoleIds", org.apache.thrift.protocol.TType.LIST, (short)28);
  private static final org.apache.thrift.protocol.TField TEAM_FIELD_DESC = new org.apache.thrift.protocol.TField("team", org.apache.thrift.protocol.TType.STRUCT, (short)101);
  private static final org.apache.thrift.protocol.TField JOB_TEMPLATE_FIELD_DESC = new org.apache.thrift.protocol.TField("jobTemplate", org.apache.thrift.protocol.TType.STRUCT, (short)102);
  private static final org.apache.thrift.protocol.TField ROOT_HEADERS_FIELD_DESC = new org.apache.thrift.protocol.TField("rootHeaders", org.apache.thrift.protocol.TType.STRUCT, (short)103);
  private static final org.apache.thrift.protocol.TField STEP_GROUP_FIELD_DESC = new org.apache.thrift.protocol.TField("stepGroup", org.apache.thrift.protocol.TType.STRUCT, (short)104);
  private static final org.apache.thrift.protocol.TField DOCUMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("documents", org.apache.thrift.protocol.TType.LIST, (short)105);
  private static final org.apache.thrift.protocol.TField JOB_USERS_FIELD_DESC = new org.apache.thrift.protocol.TField("jobUsers", org.apache.thrift.protocol.TType.LIST, (short)106);
  private static final org.apache.thrift.protocol.TField STATS_FIELD_DESC = new org.apache.thrift.protocol.TField("stats", org.apache.thrift.protocol.TType.STRUCT, (short)107);
  private static final org.apache.thrift.protocol.TField ACTIVITY_FIELD_DESC = new org.apache.thrift.protocol.TField("activity", org.apache.thrift.protocol.TType.STRUCT, (short)108);
  private static final org.apache.thrift.protocol.TField TEMPLATES_FIELD_DESC = new org.apache.thrift.protocol.TField("templates", org.apache.thrift.protocol.TType.LIST, (short)109);
  private static final org.apache.thrift.protocol.TField CREATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("creator", org.apache.thrift.protocol.TType.STRUCT, (short)110);
  private static final org.apache.thrift.protocol.TField ROLES_FIELD_DESC = new org.apache.thrift.protocol.TField("roles", org.apache.thrift.protocol.TType.LIST, (short)111);
  private static final org.apache.thrift.protocol.TField JOB_DOCUMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("jobDocuments", org.apache.thrift.protocol.TType.LIST, (short)112);
  private static final org.apache.thrift.protocol.TField PERMISSIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("permissions", org.apache.thrift.protocol.TType.STRUCT, (short)113);
  private static final org.apache.thrift.protocol.TField MESSAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("messages", org.apache.thrift.protocol.TType.LIST, (short)114);
  private static final org.apache.thrift.protocol.TField SNIPPETS_FIELD_DESC = new org.apache.thrift.protocol.TField("snippets", org.apache.thrift.protocol.TType.LIST, (short)115);
  private static final org.apache.thrift.protocol.TField ISSUES_FIELD_DESC = new org.apache.thrift.protocol.TField("issues", org.apache.thrift.protocol.TType.LIST, (short)116);
  private static final org.apache.thrift.protocol.TField DEVIATION_COUNTS_FIELD_DESC = new org.apache.thrift.protocol.TField("deviationCounts", org.apache.thrift.protocol.TType.MAP, (short)117);
  private static final org.apache.thrift.protocol.TField DEVIATIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("deviations", org.apache.thrift.protocol.TType.MAP, (short)118);
  private static final org.apache.thrift.protocol.TField ATTRIBUTES_FIELD_DESC = new org.apache.thrift.protocol.TField("attributes", org.apache.thrift.protocol.TType.LIST, (short)119);
  private static final org.apache.thrift.protocol.TField REFERENCES_FIELD_DESC = new org.apache.thrift.protocol.TField("references", org.apache.thrift.protocol.TType.MAP, (short)125);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new JobModularStandardSchemeFactory());
  }

  public String id; // required
  public String title; // required
  public String jobTemplateId; // required
  public int jobTemplateInternalVersion; // required
  public String teamId; // required
  public long completedAt; // required
  public String reasonCompleted; // required
  public long createdAt; // required
  public long updatedAt; // required
  public boolean isPreview; // required
  public String documentEmailAddress; // required
  public long plannedStartAt; // required
  public long startedAt; // required
  public String creatorId; // required
  public Map<String,com.wi.director.thrift.v1.metadata.MetadataEntry> metadataById; // required
  public boolean meshEnabled; // required
  public JobRecurringRule recurringRule; // optional
  public RecurredJobInfo recurredInfo; // optional
  public com.wi.director.thrift.v1.schedule.Schedule schedule; // optional
  public boolean startAuto; // optional
  /**
   * 
   * @see JobType
   */
  public JobType jobType; // required
  public boolean usingEvents; // required
  /**
   * If JobType is Issue, optionally specify a source of the issue. <br>
   * If job is an instance started from an AdHoc (on-demand) job, specify the source job. <br>
   * Currently, only accepting references down to the detail of a step/group. <br>
   */
  public com.wi.director.thrift.v1.messaging.JobPtr src; // optional
  /**
   * This field will be populated with a human readable globally unique
   * identifier. This idenfitier will have the format
   * <Job|Issue>-<number> (current)
   * <team_domain>-<j|i>-<number> (legacy)
   */
  public String lookupId; // optional
  public PriorityLevel priority; // optional
  public long archivedAt; // required
  public String location; // optional
  /**
   * If JobType is AdHoc, this must be a non-empty, valid job role id list for
   * the user starting an ad hoc job to be assigned the following roles.
   * This is in addition to the roles already assigned to this user during planning.
   */
  public List<String> plannedStartJobRoleIds; // optional
  public com.wi.director.thrift.v1.team.TeamModular team; // optional
  public com.wi.director.thrift.v1.jobtemplate.JobTemplateModular jobTemplate; // optional
  public com.wi.director.thrift.v1.group_headers.StepGroupHeaders rootHeaders; // optional
  public com.wi.director.thrift.v1.step.BaseStep stepGroup; // optional
  public List<com.wi.director.thrift.v1.document.Document> documents; // optional
  public List<JobUser> jobUsers; // optional
  public JobStats stats; // optional
  public JobActivity activity; // optional
  public List<com.wi.director.thrift.v1.jobtemplate.JobTemplateModular> templates; // optional
  public com.wi.director.thrift.v1.user.User creator; // optional
  public List<com.wi.director.thrift.v1.jobrole.JobRole> roles; // optional
  public List<JobDocument> jobDocuments; // optional
  public com.wi.director.thrift.v1.jobrole.JobPermissions permissions; // optional
  public List<com.wi.director.thrift.v1.messaging.Message> messages; // optional
  public List<ExecutionSnippet> snippets; // optional
  public List<IssueJobLink> issues; // optional
  public Map<JobDeviationType,Integer> deviationCounts; // optional
  public Map<JobDeviationType,List<JobDeviationRef>> deviations; // optional
  public List<com.wi.director.thrift.v1.abac.AbacAttribute> attributes; // optional
  public Map<com.parsable.thrift.v1.reference.RefSource,Set<String>> references; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    TITLE((short)2, "title"),
    JOB_TEMPLATE_ID((short)3, "jobTemplateId"),
    JOB_TEMPLATE_INTERNAL_VERSION((short)4, "jobTemplateInternalVersion"),
    TEAM_ID((short)5, "teamId"),
    COMPLETED_AT((short)6, "completedAt"),
    REASON_COMPLETED((short)7, "reasonCompleted"),
    CREATED_AT((short)8, "createdAt"),
    UPDATED_AT((short)9, "updatedAt"),
    IS_PREVIEW((short)10, "isPreview"),
    DOCUMENT_EMAIL_ADDRESS((short)11, "documentEmailAddress"),
    PLANNED_START_AT((short)12, "plannedStartAt"),
    STARTED_AT((short)13, "startedAt"),
    CREATOR_ID((short)14, "creatorId"),
    METADATA_BY_ID((short)15, "metadataById"),
    MESH_ENABLED((short)16, "meshEnabled"),
    RECURRING_RULE((short)17, "recurringRule"),
    RECURRED_INFO((short)18, "recurredInfo"),
    SCHEDULE((short)19, "schedule"),
    START_AUTO((short)20, "startAuto"),
    /**
     * 
     * @see JobType
     */
    JOB_TYPE((short)21, "jobType"),
    USING_EVENTS((short)22, "usingEvents"),
    /**
     * If JobType is Issue, optionally specify a source of the issue. <br>
     * If job is an instance started from an AdHoc (on-demand) job, specify the source job. <br>
     * Currently, only accepting references down to the detail of a step/group. <br>
     */
    SRC((short)23, "src"),
    /**
     * This field will be populated with a human readable globally unique
     * identifier. This idenfitier will have the format
     * <Job|Issue>-<number> (current)
     * <team_domain>-<j|i>-<number> (legacy)
     */
    LOOKUP_ID((short)24, "lookupId"),
    PRIORITY((short)25, "priority"),
    ARCHIVED_AT((short)26, "archivedAt"),
    LOCATION((short)27, "location"),
    /**
     * If JobType is AdHoc, this must be a non-empty, valid job role id list for
     * the user starting an ad hoc job to be assigned the following roles.
     * This is in addition to the roles already assigned to this user during planning.
     */
    PLANNED_START_JOB_ROLE_IDS((short)28, "plannedStartJobRoleIds"),
    TEAM((short)101, "team"),
    JOB_TEMPLATE((short)102, "jobTemplate"),
    ROOT_HEADERS((short)103, "rootHeaders"),
    STEP_GROUP((short)104, "stepGroup"),
    DOCUMENTS((short)105, "documents"),
    JOB_USERS((short)106, "jobUsers"),
    STATS((short)107, "stats"),
    ACTIVITY((short)108, "activity"),
    TEMPLATES((short)109, "templates"),
    CREATOR((short)110, "creator"),
    ROLES((short)111, "roles"),
    JOB_DOCUMENTS((short)112, "jobDocuments"),
    PERMISSIONS((short)113, "permissions"),
    MESSAGES((short)114, "messages"),
    SNIPPETS((short)115, "snippets"),
    ISSUES((short)116, "issues"),
    DEVIATION_COUNTS((short)117, "deviationCounts"),
    DEVIATIONS((short)118, "deviations"),
    ATTRIBUTES((short)119, "attributes"),
    REFERENCES((short)125, "references");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // TITLE
          return TITLE;
        case 3: // JOB_TEMPLATE_ID
          return JOB_TEMPLATE_ID;
        case 4: // JOB_TEMPLATE_INTERNAL_VERSION
          return JOB_TEMPLATE_INTERNAL_VERSION;
        case 5: // TEAM_ID
          return TEAM_ID;
        case 6: // COMPLETED_AT
          return COMPLETED_AT;
        case 7: // REASON_COMPLETED
          return REASON_COMPLETED;
        case 8: // CREATED_AT
          return CREATED_AT;
        case 9: // UPDATED_AT
          return UPDATED_AT;
        case 10: // IS_PREVIEW
          return IS_PREVIEW;
        case 11: // DOCUMENT_EMAIL_ADDRESS
          return DOCUMENT_EMAIL_ADDRESS;
        case 12: // PLANNED_START_AT
          return PLANNED_START_AT;
        case 13: // STARTED_AT
          return STARTED_AT;
        case 14: // CREATOR_ID
          return CREATOR_ID;
        case 15: // METADATA_BY_ID
          return METADATA_BY_ID;
        case 16: // MESH_ENABLED
          return MESH_ENABLED;
        case 17: // RECURRING_RULE
          return RECURRING_RULE;
        case 18: // RECURRED_INFO
          return RECURRED_INFO;
        case 19: // SCHEDULE
          return SCHEDULE;
        case 20: // START_AUTO
          return START_AUTO;
        case 21: // JOB_TYPE
          return JOB_TYPE;
        case 22: // USING_EVENTS
          return USING_EVENTS;
        case 23: // SRC
          return SRC;
        case 24: // LOOKUP_ID
          return LOOKUP_ID;
        case 25: // PRIORITY
          return PRIORITY;
        case 26: // ARCHIVED_AT
          return ARCHIVED_AT;
        case 27: // LOCATION
          return LOCATION;
        case 28: // PLANNED_START_JOB_ROLE_IDS
          return PLANNED_START_JOB_ROLE_IDS;
        case 101: // TEAM
          return TEAM;
        case 102: // JOB_TEMPLATE
          return JOB_TEMPLATE;
        case 103: // ROOT_HEADERS
          return ROOT_HEADERS;
        case 104: // STEP_GROUP
          return STEP_GROUP;
        case 105: // DOCUMENTS
          return DOCUMENTS;
        case 106: // JOB_USERS
          return JOB_USERS;
        case 107: // STATS
          return STATS;
        case 108: // ACTIVITY
          return ACTIVITY;
        case 109: // TEMPLATES
          return TEMPLATES;
        case 110: // CREATOR
          return CREATOR;
        case 111: // ROLES
          return ROLES;
        case 112: // JOB_DOCUMENTS
          return JOB_DOCUMENTS;
        case 113: // PERMISSIONS
          return PERMISSIONS;
        case 114: // MESSAGES
          return MESSAGES;
        case 115: // SNIPPETS
          return SNIPPETS;
        case 116: // ISSUES
          return ISSUES;
        case 117: // DEVIATION_COUNTS
          return DEVIATION_COUNTS;
        case 118: // DEVIATIONS
          return DEVIATIONS;
        case 119: // ATTRIBUTES
          return ATTRIBUTES;
        case 125: // REFERENCES
          return REFERENCES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __JOBTEMPLATEINTERNALVERSION_ISSET_ID = 0;
  private static final int __COMPLETEDAT_ISSET_ID = 1;
  private static final int __CREATEDAT_ISSET_ID = 2;
  private static final int __UPDATEDAT_ISSET_ID = 3;
  private static final int __ISPREVIEW_ISSET_ID = 4;
  private static final int __PLANNEDSTARTAT_ISSET_ID = 5;
  private static final int __STARTEDAT_ISSET_ID = 6;
  private static final int __MESHENABLED_ISSET_ID = 7;
  private static final int __STARTAUTO_ISSET_ID = 8;
  private static final int __USINGEVENTS_ISSET_ID = 9;
  private static final int __ARCHIVEDAT_ISSET_ID = 10;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.RECURRING_RULE,_Fields.RECURRED_INFO,_Fields.SCHEDULE,_Fields.START_AUTO,_Fields.SRC,_Fields.LOOKUP_ID,_Fields.PRIORITY,_Fields.LOCATION,_Fields.PLANNED_START_JOB_ROLE_IDS,_Fields.TEAM,_Fields.JOB_TEMPLATE,_Fields.ROOT_HEADERS,_Fields.STEP_GROUP,_Fields.DOCUMENTS,_Fields.JOB_USERS,_Fields.STATS,_Fields.ACTIVITY,_Fields.TEMPLATES,_Fields.CREATOR,_Fields.ROLES,_Fields.JOB_DOCUMENTS,_Fields.PERMISSIONS,_Fields.MESSAGES,_Fields.SNIPPETS,_Fields.ISSUES,_Fields.DEVIATION_COUNTS,_Fields.DEVIATIONS,_Fields.ATTRIBUTES,_Fields.REFERENCES};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.JOB_TEMPLATE_ID, new org.apache.thrift.meta_data.FieldMetaData("jobTemplateId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.JOB_TEMPLATE_INTERNAL_VERSION, new org.apache.thrift.meta_data.FieldMetaData("jobTemplateInternalVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TEAM_ID, new org.apache.thrift.meta_data.FieldMetaData("teamId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMPLETED_AT, new org.apache.thrift.meta_data.FieldMetaData("completedAt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.REASON_COMPLETED, new org.apache.thrift.meta_data.FieldMetaData("reasonCompleted", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATED_AT, new org.apache.thrift.meta_data.FieldMetaData("createdAt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.UPDATED_AT, new org.apache.thrift.meta_data.FieldMetaData("updatedAt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.IS_PREVIEW, new org.apache.thrift.meta_data.FieldMetaData("isPreview", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DOCUMENT_EMAIL_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("documentEmailAddress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLANNED_START_AT, new org.apache.thrift.meta_data.FieldMetaData("plannedStartAt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.STARTED_AT, new org.apache.thrift.meta_data.FieldMetaData("startedAt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CREATOR_ID, new org.apache.thrift.meta_data.FieldMetaData("creatorId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.METADATA_BY_ID, new org.apache.thrift.meta_data.FieldMetaData("metadataById", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.metadata.MetadataEntry.class))));
    tmpMap.put(_Fields.MESH_ENABLED, new org.apache.thrift.meta_data.FieldMetaData("meshEnabled", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.RECURRING_RULE, new org.apache.thrift.meta_data.FieldMetaData("recurringRule", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JobRecurringRule.class)));
    tmpMap.put(_Fields.RECURRED_INFO, new org.apache.thrift.meta_data.FieldMetaData("recurredInfo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RecurredJobInfo.class)));
    tmpMap.put(_Fields.SCHEDULE, new org.apache.thrift.meta_data.FieldMetaData("schedule", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.schedule.Schedule.class)));
    tmpMap.put(_Fields.START_AUTO, new org.apache.thrift.meta_data.FieldMetaData("startAuto", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.JOB_TYPE, new org.apache.thrift.meta_data.FieldMetaData("jobType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, JobType.class)));
    tmpMap.put(_Fields.USING_EVENTS, new org.apache.thrift.meta_data.FieldMetaData("usingEvents", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SRC, new org.apache.thrift.meta_data.FieldMetaData("src", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.messaging.JobPtr.class)));
    tmpMap.put(_Fields.LOOKUP_ID, new org.apache.thrift.meta_data.FieldMetaData("lookupId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRIORITY, new org.apache.thrift.meta_data.FieldMetaData("priority", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PriorityLevel.class)));
    tmpMap.put(_Fields.ARCHIVED_AT, new org.apache.thrift.meta_data.FieldMetaData("archivedAt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LOCATION, new org.apache.thrift.meta_data.FieldMetaData("location", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLANNED_START_JOB_ROLE_IDS, new org.apache.thrift.meta_data.FieldMetaData("plannedStartJobRoleIds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.TEAM, new org.apache.thrift.meta_data.FieldMetaData("team", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.team.TeamModular.class)));
    tmpMap.put(_Fields.JOB_TEMPLATE, new org.apache.thrift.meta_data.FieldMetaData("jobTemplate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.jobtemplate.JobTemplateModular.class)));
    tmpMap.put(_Fields.ROOT_HEADERS, new org.apache.thrift.meta_data.FieldMetaData("rootHeaders", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.group_headers.StepGroupHeaders.class)));
    tmpMap.put(_Fields.STEP_GROUP, new org.apache.thrift.meta_data.FieldMetaData("stepGroup", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.step.BaseStep.class)));
    tmpMap.put(_Fields.DOCUMENTS, new org.apache.thrift.meta_data.FieldMetaData("documents", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.document.Document.class))));
    tmpMap.put(_Fields.JOB_USERS, new org.apache.thrift.meta_data.FieldMetaData("jobUsers", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JobUser.class))));
    tmpMap.put(_Fields.STATS, new org.apache.thrift.meta_data.FieldMetaData("stats", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JobStats.class)));
    tmpMap.put(_Fields.ACTIVITY, new org.apache.thrift.meta_data.FieldMetaData("activity", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JobActivity.class)));
    tmpMap.put(_Fields.TEMPLATES, new org.apache.thrift.meta_data.FieldMetaData("templates", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.jobtemplate.JobTemplateModular.class))));
    tmpMap.put(_Fields.CREATOR, new org.apache.thrift.meta_data.FieldMetaData("creator", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.user.User.class)));
    tmpMap.put(_Fields.ROLES, new org.apache.thrift.meta_data.FieldMetaData("roles", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.jobrole.JobRole.class))));
    tmpMap.put(_Fields.JOB_DOCUMENTS, new org.apache.thrift.meta_data.FieldMetaData("jobDocuments", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JobDocument.class))));
    tmpMap.put(_Fields.PERMISSIONS, new org.apache.thrift.meta_data.FieldMetaData("permissions", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.jobrole.JobPermissions.class)));
    tmpMap.put(_Fields.MESSAGES, new org.apache.thrift.meta_data.FieldMetaData("messages", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.messaging.Message.class))));
    tmpMap.put(_Fields.SNIPPETS, new org.apache.thrift.meta_data.FieldMetaData("snippets", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ExecutionSnippet.class))));
    tmpMap.put(_Fields.ISSUES, new org.apache.thrift.meta_data.FieldMetaData("issues", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IssueJobLink.class))));
    tmpMap.put(_Fields.DEVIATION_COUNTS, new org.apache.thrift.meta_data.FieldMetaData("deviationCounts", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, JobDeviationType.class), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.DEVIATIONS, new org.apache.thrift.meta_data.FieldMetaData("deviations", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, JobDeviationType.class), 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JobDeviationRef.class)))));
    tmpMap.put(_Fields.ATTRIBUTES, new org.apache.thrift.meta_data.FieldMetaData("attributes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.abac.AbacAttribute.class))));
    tmpMap.put(_Fields.REFERENCES, new org.apache.thrift.meta_data.FieldMetaData("references", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.parsable.thrift.v1.reference.RefSource.class), 
            new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(JobModular.class, metaDataMap);
  }

  public JobModular() {
  }

  public JobModular(
    String id,
    String title,
    String jobTemplateId,
    int jobTemplateInternalVersion,
    String teamId,
    long completedAt,
    String reasonCompleted,
    long createdAt,
    long updatedAt,
    boolean isPreview,
    String documentEmailAddress,
    long plannedStartAt,
    long startedAt,
    String creatorId,
    Map<String,com.wi.director.thrift.v1.metadata.MetadataEntry> metadataById,
    boolean meshEnabled,
    JobType jobType,
    boolean usingEvents,
    long archivedAt)
  {
    this();
    this.id = id;
    this.title = title;
    this.jobTemplateId = jobTemplateId;
    this.jobTemplateInternalVersion = jobTemplateInternalVersion;
    setJobTemplateInternalVersionIsSet(true);
    this.teamId = teamId;
    this.completedAt = completedAt;
    setCompletedAtIsSet(true);
    this.reasonCompleted = reasonCompleted;
    this.createdAt = createdAt;
    setCreatedAtIsSet(true);
    this.updatedAt = updatedAt;
    setUpdatedAtIsSet(true);
    this.isPreview = isPreview;
    setIsPreviewIsSet(true);
    this.documentEmailAddress = documentEmailAddress;
    this.plannedStartAt = plannedStartAt;
    setPlannedStartAtIsSet(true);
    this.startedAt = startedAt;
    setStartedAtIsSet(true);
    this.creatorId = creatorId;
    this.metadataById = metadataById;
    this.meshEnabled = meshEnabled;
    setMeshEnabledIsSet(true);
    this.jobType = jobType;
    this.usingEvents = usingEvents;
    setUsingEventsIsSet(true);
    this.archivedAt = archivedAt;
    setArchivedAtIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public JobModular(JobModular other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    if (other.isSetJobTemplateId()) {
      this.jobTemplateId = other.jobTemplateId;
    }
    this.jobTemplateInternalVersion = other.jobTemplateInternalVersion;
    if (other.isSetTeamId()) {
      this.teamId = other.teamId;
    }
    this.completedAt = other.completedAt;
    if (other.isSetReasonCompleted()) {
      this.reasonCompleted = other.reasonCompleted;
    }
    this.createdAt = other.createdAt;
    this.updatedAt = other.updatedAt;
    this.isPreview = other.isPreview;
    if (other.isSetDocumentEmailAddress()) {
      this.documentEmailAddress = other.documentEmailAddress;
    }
    this.plannedStartAt = other.plannedStartAt;
    this.startedAt = other.startedAt;
    if (other.isSetCreatorId()) {
      this.creatorId = other.creatorId;
    }
    if (other.isSetMetadataById()) {
      Map<String,com.wi.director.thrift.v1.metadata.MetadataEntry> __this__metadataById = new HashMap<String,com.wi.director.thrift.v1.metadata.MetadataEntry>(other.metadataById.size());
      for (Map.Entry<String, com.wi.director.thrift.v1.metadata.MetadataEntry> other_element : other.metadataById.entrySet()) {

        String other_element_key = other_element.getKey();
        com.wi.director.thrift.v1.metadata.MetadataEntry other_element_value = other_element.getValue();

        String __this__metadataById_copy_key = other_element_key;

        com.wi.director.thrift.v1.metadata.MetadataEntry __this__metadataById_copy_value = new com.wi.director.thrift.v1.metadata.MetadataEntry(other_element_value);

        __this__metadataById.put(__this__metadataById_copy_key, __this__metadataById_copy_value);
      }
      this.metadataById = __this__metadataById;
    }
    this.meshEnabled = other.meshEnabled;
    if (other.isSetRecurringRule()) {
      this.recurringRule = new JobRecurringRule(other.recurringRule);
    }
    if (other.isSetRecurredInfo()) {
      this.recurredInfo = new RecurredJobInfo(other.recurredInfo);
    }
    if (other.isSetSchedule()) {
      this.schedule = new com.wi.director.thrift.v1.schedule.Schedule(other.schedule);
    }
    this.startAuto = other.startAuto;
    if (other.isSetJobType()) {
      this.jobType = other.jobType;
    }
    this.usingEvents = other.usingEvents;
    if (other.isSetSrc()) {
      this.src = new com.wi.director.thrift.v1.messaging.JobPtr(other.src);
    }
    if (other.isSetLookupId()) {
      this.lookupId = other.lookupId;
    }
    if (other.isSetPriority()) {
      this.priority = new PriorityLevel(other.priority);
    }
    this.archivedAt = other.archivedAt;
    if (other.isSetLocation()) {
      this.location = other.location;
    }
    if (other.isSetPlannedStartJobRoleIds()) {
      List<String> __this__plannedStartJobRoleIds = new ArrayList<String>(other.plannedStartJobRoleIds);
      this.plannedStartJobRoleIds = __this__plannedStartJobRoleIds;
    }
    if (other.isSetTeam()) {
      this.team = new com.wi.director.thrift.v1.team.TeamModular(other.team);
    }
    if (other.isSetJobTemplate()) {
      this.jobTemplate = new com.wi.director.thrift.v1.jobtemplate.JobTemplateModular(other.jobTemplate);
    }
    if (other.isSetRootHeaders()) {
      this.rootHeaders = new com.wi.director.thrift.v1.group_headers.StepGroupHeaders(other.rootHeaders);
    }
    if (other.isSetStepGroup()) {
      this.stepGroup = new com.wi.director.thrift.v1.step.BaseStep(other.stepGroup);
    }
    if (other.isSetDocuments()) {
      List<com.wi.director.thrift.v1.document.Document> __this__documents = new ArrayList<com.wi.director.thrift.v1.document.Document>(other.documents.size());
      for (com.wi.director.thrift.v1.document.Document other_element : other.documents) {
        __this__documents.add(new com.wi.director.thrift.v1.document.Document(other_element));
      }
      this.documents = __this__documents;
    }
    if (other.isSetJobUsers()) {
      List<JobUser> __this__jobUsers = new ArrayList<JobUser>(other.jobUsers.size());
      for (JobUser other_element : other.jobUsers) {
        __this__jobUsers.add(new JobUser(other_element));
      }
      this.jobUsers = __this__jobUsers;
    }
    if (other.isSetStats()) {
      this.stats = new JobStats(other.stats);
    }
    if (other.isSetActivity()) {
      this.activity = new JobActivity(other.activity);
    }
    if (other.isSetTemplates()) {
      List<com.wi.director.thrift.v1.jobtemplate.JobTemplateModular> __this__templates = new ArrayList<com.wi.director.thrift.v1.jobtemplate.JobTemplateModular>(other.templates.size());
      for (com.wi.director.thrift.v1.jobtemplate.JobTemplateModular other_element : other.templates) {
        __this__templates.add(new com.wi.director.thrift.v1.jobtemplate.JobTemplateModular(other_element));
      }
      this.templates = __this__templates;
    }
    if (other.isSetCreator()) {
      this.creator = new com.wi.director.thrift.v1.user.User(other.creator);
    }
    if (other.isSetRoles()) {
      List<com.wi.director.thrift.v1.jobrole.JobRole> __this__roles = new ArrayList<com.wi.director.thrift.v1.jobrole.JobRole>(other.roles.size());
      for (com.wi.director.thrift.v1.jobrole.JobRole other_element : other.roles) {
        __this__roles.add(new com.wi.director.thrift.v1.jobrole.JobRole(other_element));
      }
      this.roles = __this__roles;
    }
    if (other.isSetJobDocuments()) {
      List<JobDocument> __this__jobDocuments = new ArrayList<JobDocument>(other.jobDocuments.size());
      for (JobDocument other_element : other.jobDocuments) {
        __this__jobDocuments.add(new JobDocument(other_element));
      }
      this.jobDocuments = __this__jobDocuments;
    }
    if (other.isSetPermissions()) {
      this.permissions = new com.wi.director.thrift.v1.jobrole.JobPermissions(other.permissions);
    }
    if (other.isSetMessages()) {
      List<com.wi.director.thrift.v1.messaging.Message> __this__messages = new ArrayList<com.wi.director.thrift.v1.messaging.Message>(other.messages.size());
      for (com.wi.director.thrift.v1.messaging.Message other_element : other.messages) {
        __this__messages.add(new com.wi.director.thrift.v1.messaging.Message(other_element));
      }
      this.messages = __this__messages;
    }
    if (other.isSetSnippets()) {
      List<ExecutionSnippet> __this__snippets = new ArrayList<ExecutionSnippet>(other.snippets.size());
      for (ExecutionSnippet other_element : other.snippets) {
        __this__snippets.add(new ExecutionSnippet(other_element));
      }
      this.snippets = __this__snippets;
    }
    if (other.isSetIssues()) {
      List<IssueJobLink> __this__issues = new ArrayList<IssueJobLink>(other.issues.size());
      for (IssueJobLink other_element : other.issues) {
        __this__issues.add(new IssueJobLink(other_element));
      }
      this.issues = __this__issues;
    }
    if (other.isSetDeviationCounts()) {
      Map<JobDeviationType,Integer> __this__deviationCounts = new HashMap<JobDeviationType,Integer>(other.deviationCounts.size());
      for (Map.Entry<JobDeviationType, Integer> other_element : other.deviationCounts.entrySet()) {

        JobDeviationType other_element_key = other_element.getKey();
        Integer other_element_value = other_element.getValue();

        JobDeviationType __this__deviationCounts_copy_key = other_element_key;

        Integer __this__deviationCounts_copy_value = other_element_value;

        __this__deviationCounts.put(__this__deviationCounts_copy_key, __this__deviationCounts_copy_value);
      }
      this.deviationCounts = __this__deviationCounts;
    }
    if (other.isSetDeviations()) {
      Map<JobDeviationType,List<JobDeviationRef>> __this__deviations = new HashMap<JobDeviationType,List<JobDeviationRef>>(other.deviations.size());
      for (Map.Entry<JobDeviationType, List<JobDeviationRef>> other_element : other.deviations.entrySet()) {

        JobDeviationType other_element_key = other_element.getKey();
        List<JobDeviationRef> other_element_value = other_element.getValue();

        JobDeviationType __this__deviations_copy_key = other_element_key;

        List<JobDeviationRef> __this__deviations_copy_value = new ArrayList<JobDeviationRef>(other_element_value.size());
        for (JobDeviationRef other_element_value_element : other_element_value) {
          __this__deviations_copy_value.add(new JobDeviationRef(other_element_value_element));
        }

        __this__deviations.put(__this__deviations_copy_key, __this__deviations_copy_value);
      }
      this.deviations = __this__deviations;
    }
    if (other.isSetAttributes()) {
      List<com.wi.director.thrift.v1.abac.AbacAttribute> __this__attributes = new ArrayList<com.wi.director.thrift.v1.abac.AbacAttribute>(other.attributes.size());
      for (com.wi.director.thrift.v1.abac.AbacAttribute other_element : other.attributes) {
        __this__attributes.add(new com.wi.director.thrift.v1.abac.AbacAttribute(other_element));
      }
      this.attributes = __this__attributes;
    }
    if (other.isSetReferences()) {
      Map<com.parsable.thrift.v1.reference.RefSource,Set<String>> __this__references = new HashMap<com.parsable.thrift.v1.reference.RefSource,Set<String>>(other.references.size());
      for (Map.Entry<com.parsable.thrift.v1.reference.RefSource, Set<String>> other_element : other.references.entrySet()) {

        com.parsable.thrift.v1.reference.RefSource other_element_key = other_element.getKey();
        Set<String> other_element_value = other_element.getValue();

        com.parsable.thrift.v1.reference.RefSource __this__references_copy_key = other_element_key;

        Set<String> __this__references_copy_value = new HashSet<String>(other_element_value);

        __this__references.put(__this__references_copy_key, __this__references_copy_value);
      }
      this.references = __this__references;
    }
  }

  public JobModular deepCopy() {
    return new JobModular(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.title = null;
    this.jobTemplateId = null;
    setJobTemplateInternalVersionIsSet(false);
    this.jobTemplateInternalVersion = 0;
    this.teamId = null;
    setCompletedAtIsSet(false);
    this.completedAt = 0;
    this.reasonCompleted = null;
    setCreatedAtIsSet(false);
    this.createdAt = 0;
    setUpdatedAtIsSet(false);
    this.updatedAt = 0;
    setIsPreviewIsSet(false);
    this.isPreview = false;
    this.documentEmailAddress = null;
    setPlannedStartAtIsSet(false);
    this.plannedStartAt = 0;
    setStartedAtIsSet(false);
    this.startedAt = 0;
    this.creatorId = null;
    this.metadataById = null;
    setMeshEnabledIsSet(false);
    this.meshEnabled = false;
    this.recurringRule = null;
    this.recurredInfo = null;
    this.schedule = null;
    setStartAutoIsSet(false);
    this.startAuto = false;
    this.jobType = null;
    setUsingEventsIsSet(false);
    this.usingEvents = false;
    this.src = null;
    this.lookupId = null;
    this.priority = null;
    setArchivedAtIsSet(false);
    this.archivedAt = 0;
    this.location = null;
    this.plannedStartJobRoleIds = null;
    this.team = null;
    this.jobTemplate = null;
    this.rootHeaders = null;
    this.stepGroup = null;
    this.documents = null;
    this.jobUsers = null;
    this.stats = null;
    this.activity = null;
    this.templates = null;
    this.creator = null;
    this.roles = null;
    this.jobDocuments = null;
    this.permissions = null;
    this.messages = null;
    this.snippets = null;
    this.issues = null;
    this.deviationCounts = null;
    this.deviations = null;
    this.attributes = null;
    this.references = null;
  }

  public String getId() {
    return this.id;
  }

  public JobModular setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public String getTitle() {
    return this.title;
  }

  public JobModular setTitle(String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public String getJobTemplateId() {
    return this.jobTemplateId;
  }

  public JobModular setJobTemplateId(String jobTemplateId) {
    this.jobTemplateId = jobTemplateId;
    return this;
  }

  public void unsetJobTemplateId() {
    this.jobTemplateId = null;
  }

  /** Returns true if field jobTemplateId is set (has been assigned a value) and false otherwise */
  public boolean isSetJobTemplateId() {
    return this.jobTemplateId != null;
  }

  public void setJobTemplateIdIsSet(boolean value) {
    if (!value) {
      this.jobTemplateId = null;
    }
  }

  public int getJobTemplateInternalVersion() {
    return this.jobTemplateInternalVersion;
  }

  public JobModular setJobTemplateInternalVersion(int jobTemplateInternalVersion) {
    this.jobTemplateInternalVersion = jobTemplateInternalVersion;
    setJobTemplateInternalVersionIsSet(true);
    return this;
  }

  public void unsetJobTemplateInternalVersion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __JOBTEMPLATEINTERNALVERSION_ISSET_ID);
  }

  /** Returns true if field jobTemplateInternalVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetJobTemplateInternalVersion() {
    return EncodingUtils.testBit(__isset_bitfield, __JOBTEMPLATEINTERNALVERSION_ISSET_ID);
  }

  public void setJobTemplateInternalVersionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __JOBTEMPLATEINTERNALVERSION_ISSET_ID, value);
  }

  public String getTeamId() {
    return this.teamId;
  }

  public JobModular setTeamId(String teamId) {
    this.teamId = teamId;
    return this;
  }

  public void unsetTeamId() {
    this.teamId = null;
  }

  /** Returns true if field teamId is set (has been assigned a value) and false otherwise */
  public boolean isSetTeamId() {
    return this.teamId != null;
  }

  public void setTeamIdIsSet(boolean value) {
    if (!value) {
      this.teamId = null;
    }
  }

  public long getCompletedAt() {
    return this.completedAt;
  }

  public JobModular setCompletedAt(long completedAt) {
    this.completedAt = completedAt;
    setCompletedAtIsSet(true);
    return this;
  }

  public void unsetCompletedAt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMPLETEDAT_ISSET_ID);
  }

  /** Returns true if field completedAt is set (has been assigned a value) and false otherwise */
  public boolean isSetCompletedAt() {
    return EncodingUtils.testBit(__isset_bitfield, __COMPLETEDAT_ISSET_ID);
  }

  public void setCompletedAtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMPLETEDAT_ISSET_ID, value);
  }

  public String getReasonCompleted() {
    return this.reasonCompleted;
  }

  public JobModular setReasonCompleted(String reasonCompleted) {
    this.reasonCompleted = reasonCompleted;
    return this;
  }

  public void unsetReasonCompleted() {
    this.reasonCompleted = null;
  }

  /** Returns true if field reasonCompleted is set (has been assigned a value) and false otherwise */
  public boolean isSetReasonCompleted() {
    return this.reasonCompleted != null;
  }

  public void setReasonCompletedIsSet(boolean value) {
    if (!value) {
      this.reasonCompleted = null;
    }
  }

  public long getCreatedAt() {
    return this.createdAt;
  }

  public JobModular setCreatedAt(long createdAt) {
    this.createdAt = createdAt;
    setCreatedAtIsSet(true);
    return this;
  }

  public void unsetCreatedAt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATEDAT_ISSET_ID);
  }

  /** Returns true if field createdAt is set (has been assigned a value) and false otherwise */
  public boolean isSetCreatedAt() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATEDAT_ISSET_ID);
  }

  public void setCreatedAtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATEDAT_ISSET_ID, value);
  }

  public long getUpdatedAt() {
    return this.updatedAt;
  }

  public JobModular setUpdatedAt(long updatedAt) {
    this.updatedAt = updatedAt;
    setUpdatedAtIsSet(true);
    return this;
  }

  public void unsetUpdatedAt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPDATEDAT_ISSET_ID);
  }

  /** Returns true if field updatedAt is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdatedAt() {
    return EncodingUtils.testBit(__isset_bitfield, __UPDATEDAT_ISSET_ID);
  }

  public void setUpdatedAtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPDATEDAT_ISSET_ID, value);
  }

  public boolean isIsPreview() {
    return this.isPreview;
  }

  public JobModular setIsPreview(boolean isPreview) {
    this.isPreview = isPreview;
    setIsPreviewIsSet(true);
    return this;
  }

  public void unsetIsPreview() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISPREVIEW_ISSET_ID);
  }

  /** Returns true if field isPreview is set (has been assigned a value) and false otherwise */
  public boolean isSetIsPreview() {
    return EncodingUtils.testBit(__isset_bitfield, __ISPREVIEW_ISSET_ID);
  }

  public void setIsPreviewIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISPREVIEW_ISSET_ID, value);
  }

  public String getDocumentEmailAddress() {
    return this.documentEmailAddress;
  }

  public JobModular setDocumentEmailAddress(String documentEmailAddress) {
    this.documentEmailAddress = documentEmailAddress;
    return this;
  }

  public void unsetDocumentEmailAddress() {
    this.documentEmailAddress = null;
  }

  /** Returns true if field documentEmailAddress is set (has been assigned a value) and false otherwise */
  public boolean isSetDocumentEmailAddress() {
    return this.documentEmailAddress != null;
  }

  public void setDocumentEmailAddressIsSet(boolean value) {
    if (!value) {
      this.documentEmailAddress = null;
    }
  }

  public long getPlannedStartAt() {
    return this.plannedStartAt;
  }

  public JobModular setPlannedStartAt(long plannedStartAt) {
    this.plannedStartAt = plannedStartAt;
    setPlannedStartAtIsSet(true);
    return this;
  }

  public void unsetPlannedStartAt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PLANNEDSTARTAT_ISSET_ID);
  }

  /** Returns true if field plannedStartAt is set (has been assigned a value) and false otherwise */
  public boolean isSetPlannedStartAt() {
    return EncodingUtils.testBit(__isset_bitfield, __PLANNEDSTARTAT_ISSET_ID);
  }

  public void setPlannedStartAtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PLANNEDSTARTAT_ISSET_ID, value);
  }

  public long getStartedAt() {
    return this.startedAt;
  }

  public JobModular setStartedAt(long startedAt) {
    this.startedAt = startedAt;
    setStartedAtIsSet(true);
    return this;
  }

  public void unsetStartedAt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTEDAT_ISSET_ID);
  }

  /** Returns true if field startedAt is set (has been assigned a value) and false otherwise */
  public boolean isSetStartedAt() {
    return EncodingUtils.testBit(__isset_bitfield, __STARTEDAT_ISSET_ID);
  }

  public void setStartedAtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTEDAT_ISSET_ID, value);
  }

  public String getCreatorId() {
    return this.creatorId;
  }

  public JobModular setCreatorId(String creatorId) {
    this.creatorId = creatorId;
    return this;
  }

  public void unsetCreatorId() {
    this.creatorId = null;
  }

  /** Returns true if field creatorId is set (has been assigned a value) and false otherwise */
  public boolean isSetCreatorId() {
    return this.creatorId != null;
  }

  public void setCreatorIdIsSet(boolean value) {
    if (!value) {
      this.creatorId = null;
    }
  }

  public int getMetadataByIdSize() {
    return (this.metadataById == null) ? 0 : this.metadataById.size();
  }

  public void putToMetadataById(String key, com.wi.director.thrift.v1.metadata.MetadataEntry val) {
    if (this.metadataById == null) {
      this.metadataById = new HashMap<String,com.wi.director.thrift.v1.metadata.MetadataEntry>();
    }
    this.metadataById.put(key, val);
  }

  public Map<String,com.wi.director.thrift.v1.metadata.MetadataEntry> getMetadataById() {
    return this.metadataById;
  }

  public JobModular setMetadataById(Map<String,com.wi.director.thrift.v1.metadata.MetadataEntry> metadataById) {
    this.metadataById = metadataById;
    return this;
  }

  public void unsetMetadataById() {
    this.metadataById = null;
  }

  /** Returns true if field metadataById is set (has been assigned a value) and false otherwise */
  public boolean isSetMetadataById() {
    return this.metadataById != null;
  }

  public void setMetadataByIdIsSet(boolean value) {
    if (!value) {
      this.metadataById = null;
    }
  }

  public boolean isMeshEnabled() {
    return this.meshEnabled;
  }

  public JobModular setMeshEnabled(boolean meshEnabled) {
    this.meshEnabled = meshEnabled;
    setMeshEnabledIsSet(true);
    return this;
  }

  public void unsetMeshEnabled() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MESHENABLED_ISSET_ID);
  }

  /** Returns true if field meshEnabled is set (has been assigned a value) and false otherwise */
  public boolean isSetMeshEnabled() {
    return EncodingUtils.testBit(__isset_bitfield, __MESHENABLED_ISSET_ID);
  }

  public void setMeshEnabledIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MESHENABLED_ISSET_ID, value);
  }

  public JobRecurringRule getRecurringRule() {
    return this.recurringRule;
  }

  public JobModular setRecurringRule(JobRecurringRule recurringRule) {
    this.recurringRule = recurringRule;
    return this;
  }

  public void unsetRecurringRule() {
    this.recurringRule = null;
  }

  /** Returns true if field recurringRule is set (has been assigned a value) and false otherwise */
  public boolean isSetRecurringRule() {
    return this.recurringRule != null;
  }

  public void setRecurringRuleIsSet(boolean value) {
    if (!value) {
      this.recurringRule = null;
    }
  }

  public RecurredJobInfo getRecurredInfo() {
    return this.recurredInfo;
  }

  public JobModular setRecurredInfo(RecurredJobInfo recurredInfo) {
    this.recurredInfo = recurredInfo;
    return this;
  }

  public void unsetRecurredInfo() {
    this.recurredInfo = null;
  }

  /** Returns true if field recurredInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetRecurredInfo() {
    return this.recurredInfo != null;
  }

  public void setRecurredInfoIsSet(boolean value) {
    if (!value) {
      this.recurredInfo = null;
    }
  }

  public com.wi.director.thrift.v1.schedule.Schedule getSchedule() {
    return this.schedule;
  }

  public JobModular setSchedule(com.wi.director.thrift.v1.schedule.Schedule schedule) {
    this.schedule = schedule;
    return this;
  }

  public void unsetSchedule() {
    this.schedule = null;
  }

  /** Returns true if field schedule is set (has been assigned a value) and false otherwise */
  public boolean isSetSchedule() {
    return this.schedule != null;
  }

  public void setScheduleIsSet(boolean value) {
    if (!value) {
      this.schedule = null;
    }
  }

  public boolean isStartAuto() {
    return this.startAuto;
  }

  public JobModular setStartAuto(boolean startAuto) {
    this.startAuto = startAuto;
    setStartAutoIsSet(true);
    return this;
  }

  public void unsetStartAuto() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTAUTO_ISSET_ID);
  }

  /** Returns true if field startAuto is set (has been assigned a value) and false otherwise */
  public boolean isSetStartAuto() {
    return EncodingUtils.testBit(__isset_bitfield, __STARTAUTO_ISSET_ID);
  }

  public void setStartAutoIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTAUTO_ISSET_ID, value);
  }

  /**
   * 
   * @see JobType
   */
  public JobType getJobType() {
    return this.jobType;
  }

  /**
   * 
   * @see JobType
   */
  public JobModular setJobType(JobType jobType) {
    this.jobType = jobType;
    return this;
  }

  public void unsetJobType() {
    this.jobType = null;
  }

  /** Returns true if field jobType is set (has been assigned a value) and false otherwise */
  public boolean isSetJobType() {
    return this.jobType != null;
  }

  public void setJobTypeIsSet(boolean value) {
    if (!value) {
      this.jobType = null;
    }
  }

  public boolean isUsingEvents() {
    return this.usingEvents;
  }

  public JobModular setUsingEvents(boolean usingEvents) {
    this.usingEvents = usingEvents;
    setUsingEventsIsSet(true);
    return this;
  }

  public void unsetUsingEvents() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USINGEVENTS_ISSET_ID);
  }

  /** Returns true if field usingEvents is set (has been assigned a value) and false otherwise */
  public boolean isSetUsingEvents() {
    return EncodingUtils.testBit(__isset_bitfield, __USINGEVENTS_ISSET_ID);
  }

  public void setUsingEventsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USINGEVENTS_ISSET_ID, value);
  }

  /**
   * If JobType is Issue, optionally specify a source of the issue. <br>
   * If job is an instance started from an AdHoc (on-demand) job, specify the source job. <br>
   * Currently, only accepting references down to the detail of a step/group. <br>
   */
  public com.wi.director.thrift.v1.messaging.JobPtr getSrc() {
    return this.src;
  }

  /**
   * If JobType is Issue, optionally specify a source of the issue. <br>
   * If job is an instance started from an AdHoc (on-demand) job, specify the source job. <br>
   * Currently, only accepting references down to the detail of a step/group. <br>
   */
  public JobModular setSrc(com.wi.director.thrift.v1.messaging.JobPtr src) {
    this.src = src;
    return this;
  }

  public void unsetSrc() {
    this.src = null;
  }

  /** Returns true if field src is set (has been assigned a value) and false otherwise */
  public boolean isSetSrc() {
    return this.src != null;
  }

  public void setSrcIsSet(boolean value) {
    if (!value) {
      this.src = null;
    }
  }

  /**
   * This field will be populated with a human readable globally unique
   * identifier. This idenfitier will have the format
   * <Job|Issue>-<number> (current)
   * <team_domain>-<j|i>-<number> (legacy)
   */
  public String getLookupId() {
    return this.lookupId;
  }

  /**
   * This field will be populated with a human readable globally unique
   * identifier. This idenfitier will have the format
   * <Job|Issue>-<number> (current)
   * <team_domain>-<j|i>-<number> (legacy)
   */
  public JobModular setLookupId(String lookupId) {
    this.lookupId = lookupId;
    return this;
  }

  public void unsetLookupId() {
    this.lookupId = null;
  }

  /** Returns true if field lookupId is set (has been assigned a value) and false otherwise */
  public boolean isSetLookupId() {
    return this.lookupId != null;
  }

  public void setLookupIdIsSet(boolean value) {
    if (!value) {
      this.lookupId = null;
    }
  }

  public PriorityLevel getPriority() {
    return this.priority;
  }

  public JobModular setPriority(PriorityLevel priority) {
    this.priority = priority;
    return this;
  }

  public void unsetPriority() {
    this.priority = null;
  }

  /** Returns true if field priority is set (has been assigned a value) and false otherwise */
  public boolean isSetPriority() {
    return this.priority != null;
  }

  public void setPriorityIsSet(boolean value) {
    if (!value) {
      this.priority = null;
    }
  }

  public long getArchivedAt() {
    return this.archivedAt;
  }

  public JobModular setArchivedAt(long archivedAt) {
    this.archivedAt = archivedAt;
    setArchivedAtIsSet(true);
    return this;
  }

  public void unsetArchivedAt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ARCHIVEDAT_ISSET_ID);
  }

  /** Returns true if field archivedAt is set (has been assigned a value) and false otherwise */
  public boolean isSetArchivedAt() {
    return EncodingUtils.testBit(__isset_bitfield, __ARCHIVEDAT_ISSET_ID);
  }

  public void setArchivedAtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ARCHIVEDAT_ISSET_ID, value);
  }

  public String getLocation() {
    return this.location;
  }

  public JobModular setLocation(String location) {
    this.location = location;
    return this;
  }

  public void unsetLocation() {
    this.location = null;
  }

  /** Returns true if field location is set (has been assigned a value) and false otherwise */
  public boolean isSetLocation() {
    return this.location != null;
  }

  public void setLocationIsSet(boolean value) {
    if (!value) {
      this.location = null;
    }
  }

  public int getPlannedStartJobRoleIdsSize() {
    return (this.plannedStartJobRoleIds == null) ? 0 : this.plannedStartJobRoleIds.size();
  }

  public java.util.Iterator<String> getPlannedStartJobRoleIdsIterator() {
    return (this.plannedStartJobRoleIds == null) ? null : this.plannedStartJobRoleIds.iterator();
  }

  public void addToPlannedStartJobRoleIds(String elem) {
    if (this.plannedStartJobRoleIds == null) {
      this.plannedStartJobRoleIds = new ArrayList<String>();
    }
    this.plannedStartJobRoleIds.add(elem);
  }

  /**
   * If JobType is AdHoc, this must be a non-empty, valid job role id list for
   * the user starting an ad hoc job to be assigned the following roles.
   * This is in addition to the roles already assigned to this user during planning.
   */
  public List<String> getPlannedStartJobRoleIds() {
    return this.plannedStartJobRoleIds;
  }

  /**
   * If JobType is AdHoc, this must be a non-empty, valid job role id list for
   * the user starting an ad hoc job to be assigned the following roles.
   * This is in addition to the roles already assigned to this user during planning.
   */
  public JobModular setPlannedStartJobRoleIds(List<String> plannedStartJobRoleIds) {
    this.plannedStartJobRoleIds = plannedStartJobRoleIds;
    return this;
  }

  public void unsetPlannedStartJobRoleIds() {
    this.plannedStartJobRoleIds = null;
  }

  /** Returns true if field plannedStartJobRoleIds is set (has been assigned a value) and false otherwise */
  public boolean isSetPlannedStartJobRoleIds() {
    return this.plannedStartJobRoleIds != null;
  }

  public void setPlannedStartJobRoleIdsIsSet(boolean value) {
    if (!value) {
      this.plannedStartJobRoleIds = null;
    }
  }

  public com.wi.director.thrift.v1.team.TeamModular getTeam() {
    return this.team;
  }

  public JobModular setTeam(com.wi.director.thrift.v1.team.TeamModular team) {
    this.team = team;
    return this;
  }

  public void unsetTeam() {
    this.team = null;
  }

  /** Returns true if field team is set (has been assigned a value) and false otherwise */
  public boolean isSetTeam() {
    return this.team != null;
  }

  public void setTeamIsSet(boolean value) {
    if (!value) {
      this.team = null;
    }
  }

  public com.wi.director.thrift.v1.jobtemplate.JobTemplateModular getJobTemplate() {
    return this.jobTemplate;
  }

  public JobModular setJobTemplate(com.wi.director.thrift.v1.jobtemplate.JobTemplateModular jobTemplate) {
    this.jobTemplate = jobTemplate;
    return this;
  }

  public void unsetJobTemplate() {
    this.jobTemplate = null;
  }

  /** Returns true if field jobTemplate is set (has been assigned a value) and false otherwise */
  public boolean isSetJobTemplate() {
    return this.jobTemplate != null;
  }

  public void setJobTemplateIsSet(boolean value) {
    if (!value) {
      this.jobTemplate = null;
    }
  }

  public com.wi.director.thrift.v1.group_headers.StepGroupHeaders getRootHeaders() {
    return this.rootHeaders;
  }

  public JobModular setRootHeaders(com.wi.director.thrift.v1.group_headers.StepGroupHeaders rootHeaders) {
    this.rootHeaders = rootHeaders;
    return this;
  }

  public void unsetRootHeaders() {
    this.rootHeaders = null;
  }

  /** Returns true if field rootHeaders is set (has been assigned a value) and false otherwise */
  public boolean isSetRootHeaders() {
    return this.rootHeaders != null;
  }

  public void setRootHeadersIsSet(boolean value) {
    if (!value) {
      this.rootHeaders = null;
    }
  }

  public com.wi.director.thrift.v1.step.BaseStep getStepGroup() {
    return this.stepGroup;
  }

  public JobModular setStepGroup(com.wi.director.thrift.v1.step.BaseStep stepGroup) {
    this.stepGroup = stepGroup;
    return this;
  }

  public void unsetStepGroup() {
    this.stepGroup = null;
  }

  /** Returns true if field stepGroup is set (has been assigned a value) and false otherwise */
  public boolean isSetStepGroup() {
    return this.stepGroup != null;
  }

  public void setStepGroupIsSet(boolean value) {
    if (!value) {
      this.stepGroup = null;
    }
  }

  public int getDocumentsSize() {
    return (this.documents == null) ? 0 : this.documents.size();
  }

  public java.util.Iterator<com.wi.director.thrift.v1.document.Document> getDocumentsIterator() {
    return (this.documents == null) ? null : this.documents.iterator();
  }

  public void addToDocuments(com.wi.director.thrift.v1.document.Document elem) {
    if (this.documents == null) {
      this.documents = new ArrayList<com.wi.director.thrift.v1.document.Document>();
    }
    this.documents.add(elem);
  }

  public List<com.wi.director.thrift.v1.document.Document> getDocuments() {
    return this.documents;
  }

  public JobModular setDocuments(List<com.wi.director.thrift.v1.document.Document> documents) {
    this.documents = documents;
    return this;
  }

  public void unsetDocuments() {
    this.documents = null;
  }

  /** Returns true if field documents is set (has been assigned a value) and false otherwise */
  public boolean isSetDocuments() {
    return this.documents != null;
  }

  public void setDocumentsIsSet(boolean value) {
    if (!value) {
      this.documents = null;
    }
  }

  public int getJobUsersSize() {
    return (this.jobUsers == null) ? 0 : this.jobUsers.size();
  }

  public java.util.Iterator<JobUser> getJobUsersIterator() {
    return (this.jobUsers == null) ? null : this.jobUsers.iterator();
  }

  public void addToJobUsers(JobUser elem) {
    if (this.jobUsers == null) {
      this.jobUsers = new ArrayList<JobUser>();
    }
    this.jobUsers.add(elem);
  }

  public List<JobUser> getJobUsers() {
    return this.jobUsers;
  }

  public JobModular setJobUsers(List<JobUser> jobUsers) {
    this.jobUsers = jobUsers;
    return this;
  }

  public void unsetJobUsers() {
    this.jobUsers = null;
  }

  /** Returns true if field jobUsers is set (has been assigned a value) and false otherwise */
  public boolean isSetJobUsers() {
    return this.jobUsers != null;
  }

  public void setJobUsersIsSet(boolean value) {
    if (!value) {
      this.jobUsers = null;
    }
  }

  public JobStats getStats() {
    return this.stats;
  }

  public JobModular setStats(JobStats stats) {
    this.stats = stats;
    return this;
  }

  public void unsetStats() {
    this.stats = null;
  }

  /** Returns true if field stats is set (has been assigned a value) and false otherwise */
  public boolean isSetStats() {
    return this.stats != null;
  }

  public void setStatsIsSet(boolean value) {
    if (!value) {
      this.stats = null;
    }
  }

  public JobActivity getActivity() {
    return this.activity;
  }

  public JobModular setActivity(JobActivity activity) {
    this.activity = activity;
    return this;
  }

  public void unsetActivity() {
    this.activity = null;
  }

  /** Returns true if field activity is set (has been assigned a value) and false otherwise */
  public boolean isSetActivity() {
    return this.activity != null;
  }

  public void setActivityIsSet(boolean value) {
    if (!value) {
      this.activity = null;
    }
  }

  public int getTemplatesSize() {
    return (this.templates == null) ? 0 : this.templates.size();
  }

  public java.util.Iterator<com.wi.director.thrift.v1.jobtemplate.JobTemplateModular> getTemplatesIterator() {
    return (this.templates == null) ? null : this.templates.iterator();
  }

  public void addToTemplates(com.wi.director.thrift.v1.jobtemplate.JobTemplateModular elem) {
    if (this.templates == null) {
      this.templates = new ArrayList<com.wi.director.thrift.v1.jobtemplate.JobTemplateModular>();
    }
    this.templates.add(elem);
  }

  public List<com.wi.director.thrift.v1.jobtemplate.JobTemplateModular> getTemplates() {
    return this.templates;
  }

  public JobModular setTemplates(List<com.wi.director.thrift.v1.jobtemplate.JobTemplateModular> templates) {
    this.templates = templates;
    return this;
  }

  public void unsetTemplates() {
    this.templates = null;
  }

  /** Returns true if field templates is set (has been assigned a value) and false otherwise */
  public boolean isSetTemplates() {
    return this.templates != null;
  }

  public void setTemplatesIsSet(boolean value) {
    if (!value) {
      this.templates = null;
    }
  }

  public com.wi.director.thrift.v1.user.User getCreator() {
    return this.creator;
  }

  public JobModular setCreator(com.wi.director.thrift.v1.user.User creator) {
    this.creator = creator;
    return this;
  }

  public void unsetCreator() {
    this.creator = null;
  }

  /** Returns true if field creator is set (has been assigned a value) and false otherwise */
  public boolean isSetCreator() {
    return this.creator != null;
  }

  public void setCreatorIsSet(boolean value) {
    if (!value) {
      this.creator = null;
    }
  }

  public int getRolesSize() {
    return (this.roles == null) ? 0 : this.roles.size();
  }

  public java.util.Iterator<com.wi.director.thrift.v1.jobrole.JobRole> getRolesIterator() {
    return (this.roles == null) ? null : this.roles.iterator();
  }

  public void addToRoles(com.wi.director.thrift.v1.jobrole.JobRole elem) {
    if (this.roles == null) {
      this.roles = new ArrayList<com.wi.director.thrift.v1.jobrole.JobRole>();
    }
    this.roles.add(elem);
  }

  public List<com.wi.director.thrift.v1.jobrole.JobRole> getRoles() {
    return this.roles;
  }

  public JobModular setRoles(List<com.wi.director.thrift.v1.jobrole.JobRole> roles) {
    this.roles = roles;
    return this;
  }

  public void unsetRoles() {
    this.roles = null;
  }

  /** Returns true if field roles is set (has been assigned a value) and false otherwise */
  public boolean isSetRoles() {
    return this.roles != null;
  }

  public void setRolesIsSet(boolean value) {
    if (!value) {
      this.roles = null;
    }
  }

  public int getJobDocumentsSize() {
    return (this.jobDocuments == null) ? 0 : this.jobDocuments.size();
  }

  public java.util.Iterator<JobDocument> getJobDocumentsIterator() {
    return (this.jobDocuments == null) ? null : this.jobDocuments.iterator();
  }

  public void addToJobDocuments(JobDocument elem) {
    if (this.jobDocuments == null) {
      this.jobDocuments = new ArrayList<JobDocument>();
    }
    this.jobDocuments.add(elem);
  }

  public List<JobDocument> getJobDocuments() {
    return this.jobDocuments;
  }

  public JobModular setJobDocuments(List<JobDocument> jobDocuments) {
    this.jobDocuments = jobDocuments;
    return this;
  }

  public void unsetJobDocuments() {
    this.jobDocuments = null;
  }

  /** Returns true if field jobDocuments is set (has been assigned a value) and false otherwise */
  public boolean isSetJobDocuments() {
    return this.jobDocuments != null;
  }

  public void setJobDocumentsIsSet(boolean value) {
    if (!value) {
      this.jobDocuments = null;
    }
  }

  public com.wi.director.thrift.v1.jobrole.JobPermissions getPermissions() {
    return this.permissions;
  }

  public JobModular setPermissions(com.wi.director.thrift.v1.jobrole.JobPermissions permissions) {
    this.permissions = permissions;
    return this;
  }

  public void unsetPermissions() {
    this.permissions = null;
  }

  /** Returns true if field permissions is set (has been assigned a value) and false otherwise */
  public boolean isSetPermissions() {
    return this.permissions != null;
  }

  public void setPermissionsIsSet(boolean value) {
    if (!value) {
      this.permissions = null;
    }
  }

  public int getMessagesSize() {
    return (this.messages == null) ? 0 : this.messages.size();
  }

  public java.util.Iterator<com.wi.director.thrift.v1.messaging.Message> getMessagesIterator() {
    return (this.messages == null) ? null : this.messages.iterator();
  }

  public void addToMessages(com.wi.director.thrift.v1.messaging.Message elem) {
    if (this.messages == null) {
      this.messages = new ArrayList<com.wi.director.thrift.v1.messaging.Message>();
    }
    this.messages.add(elem);
  }

  public List<com.wi.director.thrift.v1.messaging.Message> getMessages() {
    return this.messages;
  }

  public JobModular setMessages(List<com.wi.director.thrift.v1.messaging.Message> messages) {
    this.messages = messages;
    return this;
  }

  public void unsetMessages() {
    this.messages = null;
  }

  /** Returns true if field messages is set (has been assigned a value) and false otherwise */
  public boolean isSetMessages() {
    return this.messages != null;
  }

  public void setMessagesIsSet(boolean value) {
    if (!value) {
      this.messages = null;
    }
  }

  public int getSnippetsSize() {
    return (this.snippets == null) ? 0 : this.snippets.size();
  }

  public java.util.Iterator<ExecutionSnippet> getSnippetsIterator() {
    return (this.snippets == null) ? null : this.snippets.iterator();
  }

  public void addToSnippets(ExecutionSnippet elem) {
    if (this.snippets == null) {
      this.snippets = new ArrayList<ExecutionSnippet>();
    }
    this.snippets.add(elem);
  }

  public List<ExecutionSnippet> getSnippets() {
    return this.snippets;
  }

  public JobModular setSnippets(List<ExecutionSnippet> snippets) {
    this.snippets = snippets;
    return this;
  }

  public void unsetSnippets() {
    this.snippets = null;
  }

  /** Returns true if field snippets is set (has been assigned a value) and false otherwise */
  public boolean isSetSnippets() {
    return this.snippets != null;
  }

  public void setSnippetsIsSet(boolean value) {
    if (!value) {
      this.snippets = null;
    }
  }

  public int getIssuesSize() {
    return (this.issues == null) ? 0 : this.issues.size();
  }

  public java.util.Iterator<IssueJobLink> getIssuesIterator() {
    return (this.issues == null) ? null : this.issues.iterator();
  }

  public void addToIssues(IssueJobLink elem) {
    if (this.issues == null) {
      this.issues = new ArrayList<IssueJobLink>();
    }
    this.issues.add(elem);
  }

  public List<IssueJobLink> getIssues() {
    return this.issues;
  }

  public JobModular setIssues(List<IssueJobLink> issues) {
    this.issues = issues;
    return this;
  }

  public void unsetIssues() {
    this.issues = null;
  }

  /** Returns true if field issues is set (has been assigned a value) and false otherwise */
  public boolean isSetIssues() {
    return this.issues != null;
  }

  public void setIssuesIsSet(boolean value) {
    if (!value) {
      this.issues = null;
    }
  }

  public int getDeviationCountsSize() {
    return (this.deviationCounts == null) ? 0 : this.deviationCounts.size();
  }

  public void putToDeviationCounts(JobDeviationType key, int val) {
    if (this.deviationCounts == null) {
      this.deviationCounts = new HashMap<JobDeviationType,Integer>();
    }
    this.deviationCounts.put(key, val);
  }

  public Map<JobDeviationType,Integer> getDeviationCounts() {
    return this.deviationCounts;
  }

  public JobModular setDeviationCounts(Map<JobDeviationType,Integer> deviationCounts) {
    this.deviationCounts = deviationCounts;
    return this;
  }

  public void unsetDeviationCounts() {
    this.deviationCounts = null;
  }

  /** Returns true if field deviationCounts is set (has been assigned a value) and false otherwise */
  public boolean isSetDeviationCounts() {
    return this.deviationCounts != null;
  }

  public void setDeviationCountsIsSet(boolean value) {
    if (!value) {
      this.deviationCounts = null;
    }
  }

  public int getDeviationsSize() {
    return (this.deviations == null) ? 0 : this.deviations.size();
  }

  public void putToDeviations(JobDeviationType key, List<JobDeviationRef> val) {
    if (this.deviations == null) {
      this.deviations = new HashMap<JobDeviationType,List<JobDeviationRef>>();
    }
    this.deviations.put(key, val);
  }

  public Map<JobDeviationType,List<JobDeviationRef>> getDeviations() {
    return this.deviations;
  }

  public JobModular setDeviations(Map<JobDeviationType,List<JobDeviationRef>> deviations) {
    this.deviations = deviations;
    return this;
  }

  public void unsetDeviations() {
    this.deviations = null;
  }

  /** Returns true if field deviations is set (has been assigned a value) and false otherwise */
  public boolean isSetDeviations() {
    return this.deviations != null;
  }

  public void setDeviationsIsSet(boolean value) {
    if (!value) {
      this.deviations = null;
    }
  }

  public int getAttributesSize() {
    return (this.attributes == null) ? 0 : this.attributes.size();
  }

  public java.util.Iterator<com.wi.director.thrift.v1.abac.AbacAttribute> getAttributesIterator() {
    return (this.attributes == null) ? null : this.attributes.iterator();
  }

  public void addToAttributes(com.wi.director.thrift.v1.abac.AbacAttribute elem) {
    if (this.attributes == null) {
      this.attributes = new ArrayList<com.wi.director.thrift.v1.abac.AbacAttribute>();
    }
    this.attributes.add(elem);
  }

  public List<com.wi.director.thrift.v1.abac.AbacAttribute> getAttributes() {
    return this.attributes;
  }

  public JobModular setAttributes(List<com.wi.director.thrift.v1.abac.AbacAttribute> attributes) {
    this.attributes = attributes;
    return this;
  }

  public void unsetAttributes() {
    this.attributes = null;
  }

  /** Returns true if field attributes is set (has been assigned a value) and false otherwise */
  public boolean isSetAttributes() {
    return this.attributes != null;
  }

  public void setAttributesIsSet(boolean value) {
    if (!value) {
      this.attributes = null;
    }
  }

  public int getReferencesSize() {
    return (this.references == null) ? 0 : this.references.size();
  }

  public void putToReferences(com.parsable.thrift.v1.reference.RefSource key, Set<String> val) {
    if (this.references == null) {
      this.references = new HashMap<com.parsable.thrift.v1.reference.RefSource,Set<String>>();
    }
    this.references.put(key, val);
  }

  public Map<com.parsable.thrift.v1.reference.RefSource,Set<String>> getReferences() {
    return this.references;
  }

  public JobModular setReferences(Map<com.parsable.thrift.v1.reference.RefSource,Set<String>> references) {
    this.references = references;
    return this;
  }

  public void unsetReferences() {
    this.references = null;
  }

  /** Returns true if field references is set (has been assigned a value) and false otherwise */
  public boolean isSetReferences() {
    return this.references != null;
  }

  public void setReferencesIsSet(boolean value) {
    if (!value) {
      this.references = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((String)value);
      }
      break;

    case JOB_TEMPLATE_ID:
      if (value == null) {
        unsetJobTemplateId();
      } else {
        setJobTemplateId((String)value);
      }
      break;

    case JOB_TEMPLATE_INTERNAL_VERSION:
      if (value == null) {
        unsetJobTemplateInternalVersion();
      } else {
        setJobTemplateInternalVersion((Integer)value);
      }
      break;

    case TEAM_ID:
      if (value == null) {
        unsetTeamId();
      } else {
        setTeamId((String)value);
      }
      break;

    case COMPLETED_AT:
      if (value == null) {
        unsetCompletedAt();
      } else {
        setCompletedAt((Long)value);
      }
      break;

    case REASON_COMPLETED:
      if (value == null) {
        unsetReasonCompleted();
      } else {
        setReasonCompleted((String)value);
      }
      break;

    case CREATED_AT:
      if (value == null) {
        unsetCreatedAt();
      } else {
        setCreatedAt((Long)value);
      }
      break;

    case UPDATED_AT:
      if (value == null) {
        unsetUpdatedAt();
      } else {
        setUpdatedAt((Long)value);
      }
      break;

    case IS_PREVIEW:
      if (value == null) {
        unsetIsPreview();
      } else {
        setIsPreview((Boolean)value);
      }
      break;

    case DOCUMENT_EMAIL_ADDRESS:
      if (value == null) {
        unsetDocumentEmailAddress();
      } else {
        setDocumentEmailAddress((String)value);
      }
      break;

    case PLANNED_START_AT:
      if (value == null) {
        unsetPlannedStartAt();
      } else {
        setPlannedStartAt((Long)value);
      }
      break;

    case STARTED_AT:
      if (value == null) {
        unsetStartedAt();
      } else {
        setStartedAt((Long)value);
      }
      break;

    case CREATOR_ID:
      if (value == null) {
        unsetCreatorId();
      } else {
        setCreatorId((String)value);
      }
      break;

    case METADATA_BY_ID:
      if (value == null) {
        unsetMetadataById();
      } else {
        setMetadataById((Map<String,com.wi.director.thrift.v1.metadata.MetadataEntry>)value);
      }
      break;

    case MESH_ENABLED:
      if (value == null) {
        unsetMeshEnabled();
      } else {
        setMeshEnabled((Boolean)value);
      }
      break;

    case RECURRING_RULE:
      if (value == null) {
        unsetRecurringRule();
      } else {
        setRecurringRule((JobRecurringRule)value);
      }
      break;

    case RECURRED_INFO:
      if (value == null) {
        unsetRecurredInfo();
      } else {
        setRecurredInfo((RecurredJobInfo)value);
      }
      break;

    case SCHEDULE:
      if (value == null) {
        unsetSchedule();
      } else {
        setSchedule((com.wi.director.thrift.v1.schedule.Schedule)value);
      }
      break;

    case START_AUTO:
      if (value == null) {
        unsetStartAuto();
      } else {
        setStartAuto((Boolean)value);
      }
      break;

    case JOB_TYPE:
      if (value == null) {
        unsetJobType();
      } else {
        setJobType((JobType)value);
      }
      break;

    case USING_EVENTS:
      if (value == null) {
        unsetUsingEvents();
      } else {
        setUsingEvents((Boolean)value);
      }
      break;

    case SRC:
      if (value == null) {
        unsetSrc();
      } else {
        setSrc((com.wi.director.thrift.v1.messaging.JobPtr)value);
      }
      break;

    case LOOKUP_ID:
      if (value == null) {
        unsetLookupId();
      } else {
        setLookupId((String)value);
      }
      break;

    case PRIORITY:
      if (value == null) {
        unsetPriority();
      } else {
        setPriority((PriorityLevel)value);
      }
      break;

    case ARCHIVED_AT:
      if (value == null) {
        unsetArchivedAt();
      } else {
        setArchivedAt((Long)value);
      }
      break;

    case LOCATION:
      if (value == null) {
        unsetLocation();
      } else {
        setLocation((String)value);
      }
      break;

    case PLANNED_START_JOB_ROLE_IDS:
      if (value == null) {
        unsetPlannedStartJobRoleIds();
      } else {
        setPlannedStartJobRoleIds((List<String>)value);
      }
      break;

    case TEAM:
      if (value == null) {
        unsetTeam();
      } else {
        setTeam((com.wi.director.thrift.v1.team.TeamModular)value);
      }
      break;

    case JOB_TEMPLATE:
      if (value == null) {
        unsetJobTemplate();
      } else {
        setJobTemplate((com.wi.director.thrift.v1.jobtemplate.JobTemplateModular)value);
      }
      break;

    case ROOT_HEADERS:
      if (value == null) {
        unsetRootHeaders();
      } else {
        setRootHeaders((com.wi.director.thrift.v1.group_headers.StepGroupHeaders)value);
      }
      break;

    case STEP_GROUP:
      if (value == null) {
        unsetStepGroup();
      } else {
        setStepGroup((com.wi.director.thrift.v1.step.BaseStep)value);
      }
      break;

    case DOCUMENTS:
      if (value == null) {
        unsetDocuments();
      } else {
        setDocuments((List<com.wi.director.thrift.v1.document.Document>)value);
      }
      break;

    case JOB_USERS:
      if (value == null) {
        unsetJobUsers();
      } else {
        setJobUsers((List<JobUser>)value);
      }
      break;

    case STATS:
      if (value == null) {
        unsetStats();
      } else {
        setStats((JobStats)value);
      }
      break;

    case ACTIVITY:
      if (value == null) {
        unsetActivity();
      } else {
        setActivity((JobActivity)value);
      }
      break;

    case TEMPLATES:
      if (value == null) {
        unsetTemplates();
      } else {
        setTemplates((List<com.wi.director.thrift.v1.jobtemplate.JobTemplateModular>)value);
      }
      break;

    case CREATOR:
      if (value == null) {
        unsetCreator();
      } else {
        setCreator((com.wi.director.thrift.v1.user.User)value);
      }
      break;

    case ROLES:
      if (value == null) {
        unsetRoles();
      } else {
        setRoles((List<com.wi.director.thrift.v1.jobrole.JobRole>)value);
      }
      break;

    case JOB_DOCUMENTS:
      if (value == null) {
        unsetJobDocuments();
      } else {
        setJobDocuments((List<JobDocument>)value);
      }
      break;

    case PERMISSIONS:
      if (value == null) {
        unsetPermissions();
      } else {
        setPermissions((com.wi.director.thrift.v1.jobrole.JobPermissions)value);
      }
      break;

    case MESSAGES:
      if (value == null) {
        unsetMessages();
      } else {
        setMessages((List<com.wi.director.thrift.v1.messaging.Message>)value);
      }
      break;

    case SNIPPETS:
      if (value == null) {
        unsetSnippets();
      } else {
        setSnippets((List<ExecutionSnippet>)value);
      }
      break;

    case ISSUES:
      if (value == null) {
        unsetIssues();
      } else {
        setIssues((List<IssueJobLink>)value);
      }
      break;

    case DEVIATION_COUNTS:
      if (value == null) {
        unsetDeviationCounts();
      } else {
        setDeviationCounts((Map<JobDeviationType,Integer>)value);
      }
      break;

    case DEVIATIONS:
      if (value == null) {
        unsetDeviations();
      } else {
        setDeviations((Map<JobDeviationType,List<JobDeviationRef>>)value);
      }
      break;

    case ATTRIBUTES:
      if (value == null) {
        unsetAttributes();
      } else {
        setAttributes((List<com.wi.director.thrift.v1.abac.AbacAttribute>)value);
      }
      break;

    case REFERENCES:
      if (value == null) {
        unsetReferences();
      } else {
        setReferences((Map<com.parsable.thrift.v1.reference.RefSource,Set<String>>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case TITLE:
      return getTitle();

    case JOB_TEMPLATE_ID:
      return getJobTemplateId();

    case JOB_TEMPLATE_INTERNAL_VERSION:
      return getJobTemplateInternalVersion();

    case TEAM_ID:
      return getTeamId();

    case COMPLETED_AT:
      return getCompletedAt();

    case REASON_COMPLETED:
      return getReasonCompleted();

    case CREATED_AT:
      return getCreatedAt();

    case UPDATED_AT:
      return getUpdatedAt();

    case IS_PREVIEW:
      return isIsPreview();

    case DOCUMENT_EMAIL_ADDRESS:
      return getDocumentEmailAddress();

    case PLANNED_START_AT:
      return getPlannedStartAt();

    case STARTED_AT:
      return getStartedAt();

    case CREATOR_ID:
      return getCreatorId();

    case METADATA_BY_ID:
      return getMetadataById();

    case MESH_ENABLED:
      return isMeshEnabled();

    case RECURRING_RULE:
      return getRecurringRule();

    case RECURRED_INFO:
      return getRecurredInfo();

    case SCHEDULE:
      return getSchedule();

    case START_AUTO:
      return isStartAuto();

    case JOB_TYPE:
      return getJobType();

    case USING_EVENTS:
      return isUsingEvents();

    case SRC:
      return getSrc();

    case LOOKUP_ID:
      return getLookupId();

    case PRIORITY:
      return getPriority();

    case ARCHIVED_AT:
      return getArchivedAt();

    case LOCATION:
      return getLocation();

    case PLANNED_START_JOB_ROLE_IDS:
      return getPlannedStartJobRoleIds();

    case TEAM:
      return getTeam();

    case JOB_TEMPLATE:
      return getJobTemplate();

    case ROOT_HEADERS:
      return getRootHeaders();

    case STEP_GROUP:
      return getStepGroup();

    case DOCUMENTS:
      return getDocuments();

    case JOB_USERS:
      return getJobUsers();

    case STATS:
      return getStats();

    case ACTIVITY:
      return getActivity();

    case TEMPLATES:
      return getTemplates();

    case CREATOR:
      return getCreator();

    case ROLES:
      return getRoles();

    case JOB_DOCUMENTS:
      return getJobDocuments();

    case PERMISSIONS:
      return getPermissions();

    case MESSAGES:
      return getMessages();

    case SNIPPETS:
      return getSnippets();

    case ISSUES:
      return getIssues();

    case DEVIATION_COUNTS:
      return getDeviationCounts();

    case DEVIATIONS:
      return getDeviations();

    case ATTRIBUTES:
      return getAttributes();

    case REFERENCES:
      return getReferences();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case TITLE:
      return isSetTitle();
    case JOB_TEMPLATE_ID:
      return isSetJobTemplateId();
    case JOB_TEMPLATE_INTERNAL_VERSION:
      return isSetJobTemplateInternalVersion();
    case TEAM_ID:
      return isSetTeamId();
    case COMPLETED_AT:
      return isSetCompletedAt();
    case REASON_COMPLETED:
      return isSetReasonCompleted();
    case CREATED_AT:
      return isSetCreatedAt();
    case UPDATED_AT:
      return isSetUpdatedAt();
    case IS_PREVIEW:
      return isSetIsPreview();
    case DOCUMENT_EMAIL_ADDRESS:
      return isSetDocumentEmailAddress();
    case PLANNED_START_AT:
      return isSetPlannedStartAt();
    case STARTED_AT:
      return isSetStartedAt();
    case CREATOR_ID:
      return isSetCreatorId();
    case METADATA_BY_ID:
      return isSetMetadataById();
    case MESH_ENABLED:
      return isSetMeshEnabled();
    case RECURRING_RULE:
      return isSetRecurringRule();
    case RECURRED_INFO:
      return isSetRecurredInfo();
    case SCHEDULE:
      return isSetSchedule();
    case START_AUTO:
      return isSetStartAuto();
    case JOB_TYPE:
      return isSetJobType();
    case USING_EVENTS:
      return isSetUsingEvents();
    case SRC:
      return isSetSrc();
    case LOOKUP_ID:
      return isSetLookupId();
    case PRIORITY:
      return isSetPriority();
    case ARCHIVED_AT:
      return isSetArchivedAt();
    case LOCATION:
      return isSetLocation();
    case PLANNED_START_JOB_ROLE_IDS:
      return isSetPlannedStartJobRoleIds();
    case TEAM:
      return isSetTeam();
    case JOB_TEMPLATE:
      return isSetJobTemplate();
    case ROOT_HEADERS:
      return isSetRootHeaders();
    case STEP_GROUP:
      return isSetStepGroup();
    case DOCUMENTS:
      return isSetDocuments();
    case JOB_USERS:
      return isSetJobUsers();
    case STATS:
      return isSetStats();
    case ACTIVITY:
      return isSetActivity();
    case TEMPLATES:
      return isSetTemplates();
    case CREATOR:
      return isSetCreator();
    case ROLES:
      return isSetRoles();
    case JOB_DOCUMENTS:
      return isSetJobDocuments();
    case PERMISSIONS:
      return isSetPermissions();
    case MESSAGES:
      return isSetMessages();
    case SNIPPETS:
      return isSetSnippets();
    case ISSUES:
      return isSetIssues();
    case DEVIATION_COUNTS:
      return isSetDeviationCounts();
    case DEVIATIONS:
      return isSetDeviations();
    case ATTRIBUTES:
      return isSetAttributes();
    case REFERENCES:
      return isSetReferences();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof JobModular)
      return this.equals((JobModular)that);
    return false;
  }

  public boolean equals(JobModular that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_jobTemplateId = true && this.isSetJobTemplateId();
    boolean that_present_jobTemplateId = true && that.isSetJobTemplateId();
    if (this_present_jobTemplateId || that_present_jobTemplateId) {
      if (!(this_present_jobTemplateId && that_present_jobTemplateId))
        return false;
      if (!this.jobTemplateId.equals(that.jobTemplateId))
        return false;
    }

    boolean this_present_jobTemplateInternalVersion = true;
    boolean that_present_jobTemplateInternalVersion = true;
    if (this_present_jobTemplateInternalVersion || that_present_jobTemplateInternalVersion) {
      if (!(this_present_jobTemplateInternalVersion && that_present_jobTemplateInternalVersion))
        return false;
      if (this.jobTemplateInternalVersion != that.jobTemplateInternalVersion)
        return false;
    }

    boolean this_present_teamId = true && this.isSetTeamId();
    boolean that_present_teamId = true && that.isSetTeamId();
    if (this_present_teamId || that_present_teamId) {
      if (!(this_present_teamId && that_present_teamId))
        return false;
      if (!this.teamId.equals(that.teamId))
        return false;
    }

    boolean this_present_completedAt = true;
    boolean that_present_completedAt = true;
    if (this_present_completedAt || that_present_completedAt) {
      if (!(this_present_completedAt && that_present_completedAt))
        return false;
      if (this.completedAt != that.completedAt)
        return false;
    }

    boolean this_present_reasonCompleted = true && this.isSetReasonCompleted();
    boolean that_present_reasonCompleted = true && that.isSetReasonCompleted();
    if (this_present_reasonCompleted || that_present_reasonCompleted) {
      if (!(this_present_reasonCompleted && that_present_reasonCompleted))
        return false;
      if (!this.reasonCompleted.equals(that.reasonCompleted))
        return false;
    }

    boolean this_present_createdAt = true;
    boolean that_present_createdAt = true;
    if (this_present_createdAt || that_present_createdAt) {
      if (!(this_present_createdAt && that_present_createdAt))
        return false;
      if (this.createdAt != that.createdAt)
        return false;
    }

    boolean this_present_updatedAt = true;
    boolean that_present_updatedAt = true;
    if (this_present_updatedAt || that_present_updatedAt) {
      if (!(this_present_updatedAt && that_present_updatedAt))
        return false;
      if (this.updatedAt != that.updatedAt)
        return false;
    }

    boolean this_present_isPreview = true;
    boolean that_present_isPreview = true;
    if (this_present_isPreview || that_present_isPreview) {
      if (!(this_present_isPreview && that_present_isPreview))
        return false;
      if (this.isPreview != that.isPreview)
        return false;
    }

    boolean this_present_documentEmailAddress = true && this.isSetDocumentEmailAddress();
    boolean that_present_documentEmailAddress = true && that.isSetDocumentEmailAddress();
    if (this_present_documentEmailAddress || that_present_documentEmailAddress) {
      if (!(this_present_documentEmailAddress && that_present_documentEmailAddress))
        return false;
      if (!this.documentEmailAddress.equals(that.documentEmailAddress))
        return false;
    }

    boolean this_present_plannedStartAt = true;
    boolean that_present_plannedStartAt = true;
    if (this_present_plannedStartAt || that_present_plannedStartAt) {
      if (!(this_present_plannedStartAt && that_present_plannedStartAt))
        return false;
      if (this.plannedStartAt != that.plannedStartAt)
        return false;
    }

    boolean this_present_startedAt = true;
    boolean that_present_startedAt = true;
    if (this_present_startedAt || that_present_startedAt) {
      if (!(this_present_startedAt && that_present_startedAt))
        return false;
      if (this.startedAt != that.startedAt)
        return false;
    }

    boolean this_present_creatorId = true && this.isSetCreatorId();
    boolean that_present_creatorId = true && that.isSetCreatorId();
    if (this_present_creatorId || that_present_creatorId) {
      if (!(this_present_creatorId && that_present_creatorId))
        return false;
      if (!this.creatorId.equals(that.creatorId))
        return false;
    }

    boolean this_present_metadataById = true && this.isSetMetadataById();
    boolean that_present_metadataById = true && that.isSetMetadataById();
    if (this_present_metadataById || that_present_metadataById) {
      if (!(this_present_metadataById && that_present_metadataById))
        return false;
      if (!this.metadataById.equals(that.metadataById))
        return false;
    }

    boolean this_present_meshEnabled = true;
    boolean that_present_meshEnabled = true;
    if (this_present_meshEnabled || that_present_meshEnabled) {
      if (!(this_present_meshEnabled && that_present_meshEnabled))
        return false;
      if (this.meshEnabled != that.meshEnabled)
        return false;
    }

    boolean this_present_recurringRule = true && this.isSetRecurringRule();
    boolean that_present_recurringRule = true && that.isSetRecurringRule();
    if (this_present_recurringRule || that_present_recurringRule) {
      if (!(this_present_recurringRule && that_present_recurringRule))
        return false;
      if (!this.recurringRule.equals(that.recurringRule))
        return false;
    }

    boolean this_present_recurredInfo = true && this.isSetRecurredInfo();
    boolean that_present_recurredInfo = true && that.isSetRecurredInfo();
    if (this_present_recurredInfo || that_present_recurredInfo) {
      if (!(this_present_recurredInfo && that_present_recurredInfo))
        return false;
      if (!this.recurredInfo.equals(that.recurredInfo))
        return false;
    }

    boolean this_present_schedule = true && this.isSetSchedule();
    boolean that_present_schedule = true && that.isSetSchedule();
    if (this_present_schedule || that_present_schedule) {
      if (!(this_present_schedule && that_present_schedule))
        return false;
      if (!this.schedule.equals(that.schedule))
        return false;
    }

    boolean this_present_startAuto = true && this.isSetStartAuto();
    boolean that_present_startAuto = true && that.isSetStartAuto();
    if (this_present_startAuto || that_present_startAuto) {
      if (!(this_present_startAuto && that_present_startAuto))
        return false;
      if (this.startAuto != that.startAuto)
        return false;
    }

    boolean this_present_jobType = true && this.isSetJobType();
    boolean that_present_jobType = true && that.isSetJobType();
    if (this_present_jobType || that_present_jobType) {
      if (!(this_present_jobType && that_present_jobType))
        return false;
      if (!this.jobType.equals(that.jobType))
        return false;
    }

    boolean this_present_usingEvents = true;
    boolean that_present_usingEvents = true;
    if (this_present_usingEvents || that_present_usingEvents) {
      if (!(this_present_usingEvents && that_present_usingEvents))
        return false;
      if (this.usingEvents != that.usingEvents)
        return false;
    }

    boolean this_present_src = true && this.isSetSrc();
    boolean that_present_src = true && that.isSetSrc();
    if (this_present_src || that_present_src) {
      if (!(this_present_src && that_present_src))
        return false;
      if (!this.src.equals(that.src))
        return false;
    }

    boolean this_present_lookupId = true && this.isSetLookupId();
    boolean that_present_lookupId = true && that.isSetLookupId();
    if (this_present_lookupId || that_present_lookupId) {
      if (!(this_present_lookupId && that_present_lookupId))
        return false;
      if (!this.lookupId.equals(that.lookupId))
        return false;
    }

    boolean this_present_priority = true && this.isSetPriority();
    boolean that_present_priority = true && that.isSetPriority();
    if (this_present_priority || that_present_priority) {
      if (!(this_present_priority && that_present_priority))
        return false;
      if (!this.priority.equals(that.priority))
        return false;
    }

    boolean this_present_archivedAt = true;
    boolean that_present_archivedAt = true;
    if (this_present_archivedAt || that_present_archivedAt) {
      if (!(this_present_archivedAt && that_present_archivedAt))
        return false;
      if (this.archivedAt != that.archivedAt)
        return false;
    }

    boolean this_present_location = true && this.isSetLocation();
    boolean that_present_location = true && that.isSetLocation();
    if (this_present_location || that_present_location) {
      if (!(this_present_location && that_present_location))
        return false;
      if (!this.location.equals(that.location))
        return false;
    }

    boolean this_present_plannedStartJobRoleIds = true && this.isSetPlannedStartJobRoleIds();
    boolean that_present_plannedStartJobRoleIds = true && that.isSetPlannedStartJobRoleIds();
    if (this_present_plannedStartJobRoleIds || that_present_plannedStartJobRoleIds) {
      if (!(this_present_plannedStartJobRoleIds && that_present_plannedStartJobRoleIds))
        return false;
      if (!this.plannedStartJobRoleIds.equals(that.plannedStartJobRoleIds))
        return false;
    }

    boolean this_present_team = true && this.isSetTeam();
    boolean that_present_team = true && that.isSetTeam();
    if (this_present_team || that_present_team) {
      if (!(this_present_team && that_present_team))
        return false;
      if (!this.team.equals(that.team))
        return false;
    }

    boolean this_present_jobTemplate = true && this.isSetJobTemplate();
    boolean that_present_jobTemplate = true && that.isSetJobTemplate();
    if (this_present_jobTemplate || that_present_jobTemplate) {
      if (!(this_present_jobTemplate && that_present_jobTemplate))
        return false;
      if (!this.jobTemplate.equals(that.jobTemplate))
        return false;
    }

    boolean this_present_rootHeaders = true && this.isSetRootHeaders();
    boolean that_present_rootHeaders = true && that.isSetRootHeaders();
    if (this_present_rootHeaders || that_present_rootHeaders) {
      if (!(this_present_rootHeaders && that_present_rootHeaders))
        return false;
      if (!this.rootHeaders.equals(that.rootHeaders))
        return false;
    }

    boolean this_present_stepGroup = true && this.isSetStepGroup();
    boolean that_present_stepGroup = true && that.isSetStepGroup();
    if (this_present_stepGroup || that_present_stepGroup) {
      if (!(this_present_stepGroup && that_present_stepGroup))
        return false;
      if (!this.stepGroup.equals(that.stepGroup))
        return false;
    }

    boolean this_present_documents = true && this.isSetDocuments();
    boolean that_present_documents = true && that.isSetDocuments();
    if (this_present_documents || that_present_documents) {
      if (!(this_present_documents && that_present_documents))
        return false;
      if (!this.documents.equals(that.documents))
        return false;
    }

    boolean this_present_jobUsers = true && this.isSetJobUsers();
    boolean that_present_jobUsers = true && that.isSetJobUsers();
    if (this_present_jobUsers || that_present_jobUsers) {
      if (!(this_present_jobUsers && that_present_jobUsers))
        return false;
      if (!this.jobUsers.equals(that.jobUsers))
        return false;
    }

    boolean this_present_stats = true && this.isSetStats();
    boolean that_present_stats = true && that.isSetStats();
    if (this_present_stats || that_present_stats) {
      if (!(this_present_stats && that_present_stats))
        return false;
      if (!this.stats.equals(that.stats))
        return false;
    }

    boolean this_present_activity = true && this.isSetActivity();
    boolean that_present_activity = true && that.isSetActivity();
    if (this_present_activity || that_present_activity) {
      if (!(this_present_activity && that_present_activity))
        return false;
      if (!this.activity.equals(that.activity))
        return false;
    }

    boolean this_present_templates = true && this.isSetTemplates();
    boolean that_present_templates = true && that.isSetTemplates();
    if (this_present_templates || that_present_templates) {
      if (!(this_present_templates && that_present_templates))
        return false;
      if (!this.templates.equals(that.templates))
        return false;
    }

    boolean this_present_creator = true && this.isSetCreator();
    boolean that_present_creator = true && that.isSetCreator();
    if (this_present_creator || that_present_creator) {
      if (!(this_present_creator && that_present_creator))
        return false;
      if (!this.creator.equals(that.creator))
        return false;
    }

    boolean this_present_roles = true && this.isSetRoles();
    boolean that_present_roles = true && that.isSetRoles();
    if (this_present_roles || that_present_roles) {
      if (!(this_present_roles && that_present_roles))
        return false;
      if (!this.roles.equals(that.roles))
        return false;
    }

    boolean this_present_jobDocuments = true && this.isSetJobDocuments();
    boolean that_present_jobDocuments = true && that.isSetJobDocuments();
    if (this_present_jobDocuments || that_present_jobDocuments) {
      if (!(this_present_jobDocuments && that_present_jobDocuments))
        return false;
      if (!this.jobDocuments.equals(that.jobDocuments))
        return false;
    }

    boolean this_present_permissions = true && this.isSetPermissions();
    boolean that_present_permissions = true && that.isSetPermissions();
    if (this_present_permissions || that_present_permissions) {
      if (!(this_present_permissions && that_present_permissions))
        return false;
      if (!this.permissions.equals(that.permissions))
        return false;
    }

    boolean this_present_messages = true && this.isSetMessages();
    boolean that_present_messages = true && that.isSetMessages();
    if (this_present_messages || that_present_messages) {
      if (!(this_present_messages && that_present_messages))
        return false;
      if (!this.messages.equals(that.messages))
        return false;
    }

    boolean this_present_snippets = true && this.isSetSnippets();
    boolean that_present_snippets = true && that.isSetSnippets();
    if (this_present_snippets || that_present_snippets) {
      if (!(this_present_snippets && that_present_snippets))
        return false;
      if (!this.snippets.equals(that.snippets))
        return false;
    }

    boolean this_present_issues = true && this.isSetIssues();
    boolean that_present_issues = true && that.isSetIssues();
    if (this_present_issues || that_present_issues) {
      if (!(this_present_issues && that_present_issues))
        return false;
      if (!this.issues.equals(that.issues))
        return false;
    }

    boolean this_present_deviationCounts = true && this.isSetDeviationCounts();
    boolean that_present_deviationCounts = true && that.isSetDeviationCounts();
    if (this_present_deviationCounts || that_present_deviationCounts) {
      if (!(this_present_deviationCounts && that_present_deviationCounts))
        return false;
      if (!this.deviationCounts.equals(that.deviationCounts))
        return false;
    }

    boolean this_present_deviations = true && this.isSetDeviations();
    boolean that_present_deviations = true && that.isSetDeviations();
    if (this_present_deviations || that_present_deviations) {
      if (!(this_present_deviations && that_present_deviations))
        return false;
      if (!this.deviations.equals(that.deviations))
        return false;
    }

    boolean this_present_attributes = true && this.isSetAttributes();
    boolean that_present_attributes = true && that.isSetAttributes();
    if (this_present_attributes || that_present_attributes) {
      if (!(this_present_attributes && that_present_attributes))
        return false;
      if (!this.attributes.equals(that.attributes))
        return false;
    }

    boolean this_present_references = true && this.isSetReferences();
    boolean that_present_references = true && that.isSetReferences();
    if (this_present_references || that_present_references) {
      if (!(this_present_references && that_present_references))
        return false;
      if (!this.references.equals(that.references))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_title = true && (isSetTitle());
    list.add(present_title);
    if (present_title)
      list.add(title);

    boolean present_jobTemplateId = true && (isSetJobTemplateId());
    list.add(present_jobTemplateId);
    if (present_jobTemplateId)
      list.add(jobTemplateId);

    boolean present_jobTemplateInternalVersion = true;
    list.add(present_jobTemplateInternalVersion);
    if (present_jobTemplateInternalVersion)
      list.add(jobTemplateInternalVersion);

    boolean present_teamId = true && (isSetTeamId());
    list.add(present_teamId);
    if (present_teamId)
      list.add(teamId);

    boolean present_completedAt = true;
    list.add(present_completedAt);
    if (present_completedAt)
      list.add(completedAt);

    boolean present_reasonCompleted = true && (isSetReasonCompleted());
    list.add(present_reasonCompleted);
    if (present_reasonCompleted)
      list.add(reasonCompleted);

    boolean present_createdAt = true;
    list.add(present_createdAt);
    if (present_createdAt)
      list.add(createdAt);

    boolean present_updatedAt = true;
    list.add(present_updatedAt);
    if (present_updatedAt)
      list.add(updatedAt);

    boolean present_isPreview = true;
    list.add(present_isPreview);
    if (present_isPreview)
      list.add(isPreview);

    boolean present_documentEmailAddress = true && (isSetDocumentEmailAddress());
    list.add(present_documentEmailAddress);
    if (present_documentEmailAddress)
      list.add(documentEmailAddress);

    boolean present_plannedStartAt = true;
    list.add(present_plannedStartAt);
    if (present_plannedStartAt)
      list.add(plannedStartAt);

    boolean present_startedAt = true;
    list.add(present_startedAt);
    if (present_startedAt)
      list.add(startedAt);

    boolean present_creatorId = true && (isSetCreatorId());
    list.add(present_creatorId);
    if (present_creatorId)
      list.add(creatorId);

    boolean present_metadataById = true && (isSetMetadataById());
    list.add(present_metadataById);
    if (present_metadataById)
      list.add(metadataById);

    boolean present_meshEnabled = true;
    list.add(present_meshEnabled);
    if (present_meshEnabled)
      list.add(meshEnabled);

    boolean present_recurringRule = true && (isSetRecurringRule());
    list.add(present_recurringRule);
    if (present_recurringRule)
      list.add(recurringRule);

    boolean present_recurredInfo = true && (isSetRecurredInfo());
    list.add(present_recurredInfo);
    if (present_recurredInfo)
      list.add(recurredInfo);

    boolean present_schedule = true && (isSetSchedule());
    list.add(present_schedule);
    if (present_schedule)
      list.add(schedule);

    boolean present_startAuto = true && (isSetStartAuto());
    list.add(present_startAuto);
    if (present_startAuto)
      list.add(startAuto);

    boolean present_jobType = true && (isSetJobType());
    list.add(present_jobType);
    if (present_jobType)
      list.add(jobType.getValue());

    boolean present_usingEvents = true;
    list.add(present_usingEvents);
    if (present_usingEvents)
      list.add(usingEvents);

    boolean present_src = true && (isSetSrc());
    list.add(present_src);
    if (present_src)
      list.add(src);

    boolean present_lookupId = true && (isSetLookupId());
    list.add(present_lookupId);
    if (present_lookupId)
      list.add(lookupId);

    boolean present_priority = true && (isSetPriority());
    list.add(present_priority);
    if (present_priority)
      list.add(priority);

    boolean present_archivedAt = true;
    list.add(present_archivedAt);
    if (present_archivedAt)
      list.add(archivedAt);

    boolean present_location = true && (isSetLocation());
    list.add(present_location);
    if (present_location)
      list.add(location);

    boolean present_plannedStartJobRoleIds = true && (isSetPlannedStartJobRoleIds());
    list.add(present_plannedStartJobRoleIds);
    if (present_plannedStartJobRoleIds)
      list.add(plannedStartJobRoleIds);

    boolean present_team = true && (isSetTeam());
    list.add(present_team);
    if (present_team)
      list.add(team);

    boolean present_jobTemplate = true && (isSetJobTemplate());
    list.add(present_jobTemplate);
    if (present_jobTemplate)
      list.add(jobTemplate);

    boolean present_rootHeaders = true && (isSetRootHeaders());
    list.add(present_rootHeaders);
    if (present_rootHeaders)
      list.add(rootHeaders);

    boolean present_stepGroup = true && (isSetStepGroup());
    list.add(present_stepGroup);
    if (present_stepGroup)
      list.add(stepGroup);

    boolean present_documents = true && (isSetDocuments());
    list.add(present_documents);
    if (present_documents)
      list.add(documents);

    boolean present_jobUsers = true && (isSetJobUsers());
    list.add(present_jobUsers);
    if (present_jobUsers)
      list.add(jobUsers);

    boolean present_stats = true && (isSetStats());
    list.add(present_stats);
    if (present_stats)
      list.add(stats);

    boolean present_activity = true && (isSetActivity());
    list.add(present_activity);
    if (present_activity)
      list.add(activity);

    boolean present_templates = true && (isSetTemplates());
    list.add(present_templates);
    if (present_templates)
      list.add(templates);

    boolean present_creator = true && (isSetCreator());
    list.add(present_creator);
    if (present_creator)
      list.add(creator);

    boolean present_roles = true && (isSetRoles());
    list.add(present_roles);
    if (present_roles)
      list.add(roles);

    boolean present_jobDocuments = true && (isSetJobDocuments());
    list.add(present_jobDocuments);
    if (present_jobDocuments)
      list.add(jobDocuments);

    boolean present_permissions = true && (isSetPermissions());
    list.add(present_permissions);
    if (present_permissions)
      list.add(permissions);

    boolean present_messages = true && (isSetMessages());
    list.add(present_messages);
    if (present_messages)
      list.add(messages);

    boolean present_snippets = true && (isSetSnippets());
    list.add(present_snippets);
    if (present_snippets)
      list.add(snippets);

    boolean present_issues = true && (isSetIssues());
    list.add(present_issues);
    if (present_issues)
      list.add(issues);

    boolean present_deviationCounts = true && (isSetDeviationCounts());
    list.add(present_deviationCounts);
    if (present_deviationCounts)
      list.add(deviationCounts);

    boolean present_deviations = true && (isSetDeviations());
    list.add(present_deviations);
    if (present_deviations)
      list.add(deviations);

    boolean present_attributes = true && (isSetAttributes());
    list.add(present_attributes);
    if (present_attributes)
      list.add(attributes);

    boolean present_references = true && (isSetReferences());
    list.add(present_references);
    if (present_references)
      list.add(references);

    return list.hashCode();
  }

  @Override
  public int compareTo(JobModular other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTitle()).compareTo(other.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJobTemplateId()).compareTo(other.isSetJobTemplateId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJobTemplateId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobTemplateId, other.jobTemplateId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJobTemplateInternalVersion()).compareTo(other.isSetJobTemplateInternalVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJobTemplateInternalVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobTemplateInternalVersion, other.jobTemplateInternalVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTeamId()).compareTo(other.isSetTeamId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeamId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teamId, other.teamId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompletedAt()).compareTo(other.isSetCompletedAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompletedAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.completedAt, other.completedAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReasonCompleted()).compareTo(other.isSetReasonCompleted());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReasonCompleted()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reasonCompleted, other.reasonCompleted);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreatedAt()).compareTo(other.isSetCreatedAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreatedAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createdAt, other.createdAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdatedAt()).compareTo(other.isSetUpdatedAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdatedAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updatedAt, other.updatedAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsPreview()).compareTo(other.isSetIsPreview());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsPreview()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isPreview, other.isPreview);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDocumentEmailAddress()).compareTo(other.isSetDocumentEmailAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDocumentEmailAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.documentEmailAddress, other.documentEmailAddress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlannedStartAt()).compareTo(other.isSetPlannedStartAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlannedStartAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.plannedStartAt, other.plannedStartAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartedAt()).compareTo(other.isSetStartedAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartedAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startedAt, other.startedAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreatorId()).compareTo(other.isSetCreatorId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreatorId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creatorId, other.creatorId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMetadataById()).compareTo(other.isSetMetadataById());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMetadataById()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metadataById, other.metadataById);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMeshEnabled()).compareTo(other.isSetMeshEnabled());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMeshEnabled()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.meshEnabled, other.meshEnabled);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecurringRule()).compareTo(other.isSetRecurringRule());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecurringRule()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recurringRule, other.recurringRule);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecurredInfo()).compareTo(other.isSetRecurredInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecurredInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recurredInfo, other.recurredInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSchedule()).compareTo(other.isSetSchedule());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSchedule()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schedule, other.schedule);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartAuto()).compareTo(other.isSetStartAuto());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartAuto()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startAuto, other.startAuto);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJobType()).compareTo(other.isSetJobType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJobType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobType, other.jobType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUsingEvents()).compareTo(other.isSetUsingEvents());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsingEvents()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.usingEvents, other.usingEvents);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSrc()).compareTo(other.isSetSrc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSrc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src, other.src);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLookupId()).compareTo(other.isSetLookupId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLookupId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lookupId, other.lookupId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPriority()).compareTo(other.isSetPriority());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPriority()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priority, other.priority);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArchivedAt()).compareTo(other.isSetArchivedAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArchivedAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.archivedAt, other.archivedAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocation()).compareTo(other.isSetLocation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.location, other.location);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlannedStartJobRoleIds()).compareTo(other.isSetPlannedStartJobRoleIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlannedStartJobRoleIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.plannedStartJobRoleIds, other.plannedStartJobRoleIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTeam()).compareTo(other.isSetTeam());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeam()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.team, other.team);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJobTemplate()).compareTo(other.isSetJobTemplate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJobTemplate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobTemplate, other.jobTemplate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRootHeaders()).compareTo(other.isSetRootHeaders());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRootHeaders()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rootHeaders, other.rootHeaders);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStepGroup()).compareTo(other.isSetStepGroup());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStepGroup()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stepGroup, other.stepGroup);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDocuments()).compareTo(other.isSetDocuments());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDocuments()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.documents, other.documents);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJobUsers()).compareTo(other.isSetJobUsers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJobUsers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobUsers, other.jobUsers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStats()).compareTo(other.isSetStats());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStats()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stats, other.stats);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActivity()).compareTo(other.isSetActivity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActivity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activity, other.activity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTemplates()).compareTo(other.isSetTemplates());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTemplates()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.templates, other.templates);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreator()).compareTo(other.isSetCreator());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreator()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creator, other.creator);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRoles()).compareTo(other.isSetRoles());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRoles()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roles, other.roles);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJobDocuments()).compareTo(other.isSetJobDocuments());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJobDocuments()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobDocuments, other.jobDocuments);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPermissions()).compareTo(other.isSetPermissions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPermissions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.permissions, other.permissions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMessages()).compareTo(other.isSetMessages());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessages()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messages, other.messages);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSnippets()).compareTo(other.isSetSnippets());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSnippets()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.snippets, other.snippets);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIssues()).compareTo(other.isSetIssues());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIssues()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.issues, other.issues);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeviationCounts()).compareTo(other.isSetDeviationCounts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeviationCounts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviationCounts, other.deviationCounts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeviations()).compareTo(other.isSetDeviations());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeviations()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviations, other.deviations);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAttributes()).compareTo(other.isSetAttributes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAttributes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attributes, other.attributes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReferences()).compareTo(other.isSetReferences());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReferences()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.references, other.references);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("JobModular(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("title:");
    if (this.title == null) {
      sb.append("null");
    } else {
      sb.append(this.title);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("jobTemplateId:");
    if (this.jobTemplateId == null) {
      sb.append("null");
    } else {
      sb.append(this.jobTemplateId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("jobTemplateInternalVersion:");
    sb.append(this.jobTemplateInternalVersion);
    first = false;
    if (!first) sb.append(", ");
    sb.append("teamId:");
    if (this.teamId == null) {
      sb.append("null");
    } else {
      sb.append(this.teamId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("completedAt:");
    sb.append(this.completedAt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("reasonCompleted:");
    if (this.reasonCompleted == null) {
      sb.append("null");
    } else {
      sb.append(this.reasonCompleted);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createdAt:");
    sb.append(this.createdAt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updatedAt:");
    sb.append(this.updatedAt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isPreview:");
    sb.append(this.isPreview);
    first = false;
    if (!first) sb.append(", ");
    sb.append("documentEmailAddress:");
    if (this.documentEmailAddress == null) {
      sb.append("null");
    } else {
      sb.append(this.documentEmailAddress);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("plannedStartAt:");
    sb.append(this.plannedStartAt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("startedAt:");
    sb.append(this.startedAt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("creatorId:");
    if (this.creatorId == null) {
      sb.append("null");
    } else {
      sb.append(this.creatorId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("metadataById:");
    if (this.metadataById == null) {
      sb.append("null");
    } else {
      sb.append(this.metadataById);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("meshEnabled:");
    sb.append(this.meshEnabled);
    first = false;
    if (isSetRecurringRule()) {
      if (!first) sb.append(", ");
      sb.append("recurringRule:");
      if (this.recurringRule == null) {
        sb.append("null");
      } else {
        sb.append(this.recurringRule);
      }
      first = false;
    }
    if (isSetRecurredInfo()) {
      if (!first) sb.append(", ");
      sb.append("recurredInfo:");
      if (this.recurredInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.recurredInfo);
      }
      first = false;
    }
    if (isSetSchedule()) {
      if (!first) sb.append(", ");
      sb.append("schedule:");
      if (this.schedule == null) {
        sb.append("null");
      } else {
        sb.append(this.schedule);
      }
      first = false;
    }
    if (isSetStartAuto()) {
      if (!first) sb.append(", ");
      sb.append("startAuto:");
      sb.append(this.startAuto);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("jobType:");
    if (this.jobType == null) {
      sb.append("null");
    } else {
      sb.append(this.jobType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("usingEvents:");
    sb.append(this.usingEvents);
    first = false;
    if (isSetSrc()) {
      if (!first) sb.append(", ");
      sb.append("src:");
      if (this.src == null) {
        sb.append("null");
      } else {
        sb.append(this.src);
      }
      first = false;
    }
    if (isSetLookupId()) {
      if (!first) sb.append(", ");
      sb.append("lookupId:");
      if (this.lookupId == null) {
        sb.append("null");
      } else {
        sb.append(this.lookupId);
      }
      first = false;
    }
    if (isSetPriority()) {
      if (!first) sb.append(", ");
      sb.append("priority:");
      if (this.priority == null) {
        sb.append("null");
      } else {
        sb.append(this.priority);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("archivedAt:");
    sb.append(this.archivedAt);
    first = false;
    if (isSetLocation()) {
      if (!first) sb.append(", ");
      sb.append("location:");
      if (this.location == null) {
        sb.append("null");
      } else {
        sb.append(this.location);
      }
      first = false;
    }
    if (isSetPlannedStartJobRoleIds()) {
      if (!first) sb.append(", ");
      sb.append("plannedStartJobRoleIds:");
      if (this.plannedStartJobRoleIds == null) {
        sb.append("null");
      } else {
        sb.append(this.plannedStartJobRoleIds);
      }
      first = false;
    }
    if (isSetTeam()) {
      if (!first) sb.append(", ");
      sb.append("team:");
      if (this.team == null) {
        sb.append("null");
      } else {
        sb.append(this.team);
      }
      first = false;
    }
    if (isSetJobTemplate()) {
      if (!first) sb.append(", ");
      sb.append("jobTemplate:");
      if (this.jobTemplate == null) {
        sb.append("null");
      } else {
        sb.append(this.jobTemplate);
      }
      first = false;
    }
    if (isSetRootHeaders()) {
      if (!first) sb.append(", ");
      sb.append("rootHeaders:");
      if (this.rootHeaders == null) {
        sb.append("null");
      } else {
        sb.append(this.rootHeaders);
      }
      first = false;
    }
    if (isSetStepGroup()) {
      if (!first) sb.append(", ");
      sb.append("stepGroup:");
      if (this.stepGroup == null) {
        sb.append("null");
      } else {
        sb.append(this.stepGroup);
      }
      first = false;
    }
    if (isSetDocuments()) {
      if (!first) sb.append(", ");
      sb.append("documents:");
      if (this.documents == null) {
        sb.append("null");
      } else {
        sb.append(this.documents);
      }
      first = false;
    }
    if (isSetJobUsers()) {
      if (!first) sb.append(", ");
      sb.append("jobUsers:");
      if (this.jobUsers == null) {
        sb.append("null");
      } else {
        sb.append(this.jobUsers);
      }
      first = false;
    }
    if (isSetStats()) {
      if (!first) sb.append(", ");
      sb.append("stats:");
      if (this.stats == null) {
        sb.append("null");
      } else {
        sb.append(this.stats);
      }
      first = false;
    }
    if (isSetActivity()) {
      if (!first) sb.append(", ");
      sb.append("activity:");
      if (this.activity == null) {
        sb.append("null");
      } else {
        sb.append(this.activity);
      }
      first = false;
    }
    if (isSetTemplates()) {
      if (!first) sb.append(", ");
      sb.append("templates:");
      if (this.templates == null) {
        sb.append("null");
      } else {
        sb.append(this.templates);
      }
      first = false;
    }
    if (isSetCreator()) {
      if (!first) sb.append(", ");
      sb.append("creator:");
      if (this.creator == null) {
        sb.append("null");
      } else {
        sb.append(this.creator);
      }
      first = false;
    }
    if (isSetRoles()) {
      if (!first) sb.append(", ");
      sb.append("roles:");
      if (this.roles == null) {
        sb.append("null");
      } else {
        sb.append(this.roles);
      }
      first = false;
    }
    if (isSetJobDocuments()) {
      if (!first) sb.append(", ");
      sb.append("jobDocuments:");
      if (this.jobDocuments == null) {
        sb.append("null");
      } else {
        sb.append(this.jobDocuments);
      }
      first = false;
    }
    if (isSetPermissions()) {
      if (!first) sb.append(", ");
      sb.append("permissions:");
      if (this.permissions == null) {
        sb.append("null");
      } else {
        sb.append(this.permissions);
      }
      first = false;
    }
    if (isSetMessages()) {
      if (!first) sb.append(", ");
      sb.append("messages:");
      if (this.messages == null) {
        sb.append("null");
      } else {
        sb.append(this.messages);
      }
      first = false;
    }
    if (isSetSnippets()) {
      if (!first) sb.append(", ");
      sb.append("snippets:");
      if (this.snippets == null) {
        sb.append("null");
      } else {
        sb.append(this.snippets);
      }
      first = false;
    }
    if (isSetIssues()) {
      if (!first) sb.append(", ");
      sb.append("issues:");
      if (this.issues == null) {
        sb.append("null");
      } else {
        sb.append(this.issues);
      }
      first = false;
    }
    if (isSetDeviationCounts()) {
      if (!first) sb.append(", ");
      sb.append("deviationCounts:");
      if (this.deviationCounts == null) {
        sb.append("null");
      } else {
        sb.append(this.deviationCounts);
      }
      first = false;
    }
    if (isSetDeviations()) {
      if (!first) sb.append(", ");
      sb.append("deviations:");
      if (this.deviations == null) {
        sb.append("null");
      } else {
        sb.append(this.deviations);
      }
      first = false;
    }
    if (isSetAttributes()) {
      if (!first) sb.append(", ");
      sb.append("attributes:");
      if (this.attributes == null) {
        sb.append("null");
      } else {
        sb.append(this.attributes);
      }
      first = false;
    }
    if (isSetReferences()) {
      if (!first) sb.append(", ");
      sb.append("references:");
      if (this.references == null) {
        sb.append("null");
      } else {
        sb.append(this.references);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (recurringRule != null) {
      recurringRule.validate();
    }
    if (recurredInfo != null) {
      recurredInfo.validate();
    }
    if (schedule != null) {
      schedule.validate();
    }
    if (src != null) {
      src.validate();
    }
    if (priority != null) {
      priority.validate();
    }
    if (team != null) {
      team.validate();
    }
    if (jobTemplate != null) {
      jobTemplate.validate();
    }
    if (rootHeaders != null) {
      rootHeaders.validate();
    }
    if (stepGroup != null) {
      stepGroup.validate();
    }
    if (stats != null) {
      stats.validate();
    }
    if (activity != null) {
      activity.validate();
    }
    if (creator != null) {
      creator.validate();
    }
    if (permissions != null) {
      permissions.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class JobModularStandardSchemeFactory implements SchemeFactory {
    public JobModularStandardScheme getScheme() {
      return new JobModularStandardScheme();
    }
  }

  private static class JobModularStandardScheme extends StandardScheme<JobModular> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, JobModular struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // JOB_TEMPLATE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.jobTemplateId = iprot.readString();
              struct.setJobTemplateIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // JOB_TEMPLATE_INTERNAL_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.jobTemplateInternalVersion = iprot.readI32();
              struct.setJobTemplateInternalVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TEAM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.teamId = iprot.readString();
              struct.setTeamIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // COMPLETED_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.completedAt = iprot.readI64();
              struct.setCompletedAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // REASON_COMPLETED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reasonCompleted = iprot.readString();
              struct.setReasonCompletedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CREATED_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createdAt = iprot.readI64();
              struct.setCreatedAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // UPDATED_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.updatedAt = iprot.readI64();
              struct.setUpdatedAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // IS_PREVIEW
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isPreview = iprot.readBool();
              struct.setIsPreviewIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // DOCUMENT_EMAIL_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.documentEmailAddress = iprot.readString();
              struct.setDocumentEmailAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // PLANNED_START_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.plannedStartAt = iprot.readI64();
              struct.setPlannedStartAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // STARTED_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.startedAt = iprot.readI64();
              struct.setStartedAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // CREATOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.creatorId = iprot.readString();
              struct.setCreatorIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // METADATA_BY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map78 = iprot.readMapBegin();
                struct.metadataById = new HashMap<String,com.wi.director.thrift.v1.metadata.MetadataEntry>(2*_map78.size);
                String _key79;
                com.wi.director.thrift.v1.metadata.MetadataEntry _val80;
                for (int _i81 = 0; _i81 < _map78.size; ++_i81)
                {
                  _key79 = iprot.readString();
                  _val80 = new com.wi.director.thrift.v1.metadata.MetadataEntry();
                  _val80.read(iprot);
                  struct.metadataById.put(_key79, _val80);
                }
                iprot.readMapEnd();
              }
              struct.setMetadataByIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // MESH_ENABLED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.meshEnabled = iprot.readBool();
              struct.setMeshEnabledIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // RECURRING_RULE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.recurringRule = new JobRecurringRule();
              struct.recurringRule.read(iprot);
              struct.setRecurringRuleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // RECURRED_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.recurredInfo = new RecurredJobInfo();
              struct.recurredInfo.read(iprot);
              struct.setRecurredInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // SCHEDULE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.schedule = new com.wi.director.thrift.v1.schedule.Schedule();
              struct.schedule.read(iprot);
              struct.setScheduleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // START_AUTO
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.startAuto = iprot.readBool();
              struct.setStartAutoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // JOB_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.jobType = com.wi.director.thrift.v1.job.JobType.findByValue(iprot.readI32());
              struct.setJobTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // USING_EVENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.usingEvents = iprot.readBool();
              struct.setUsingEventsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // SRC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.src = new com.wi.director.thrift.v1.messaging.JobPtr();
              struct.src.read(iprot);
              struct.setSrcIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // LOOKUP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lookupId = iprot.readString();
              struct.setLookupIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // PRIORITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.priority = new PriorityLevel();
              struct.priority.read(iprot);
              struct.setPriorityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // ARCHIVED_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.archivedAt = iprot.readI64();
              struct.setArchivedAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // LOCATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.location = iprot.readString();
              struct.setLocationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // PLANNED_START_JOB_ROLE_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list82 = iprot.readListBegin();
                struct.plannedStartJobRoleIds = new ArrayList<String>(_list82.size);
                String _elem83;
                for (int _i84 = 0; _i84 < _list82.size; ++_i84)
                {
                  _elem83 = iprot.readString();
                  struct.plannedStartJobRoleIds.add(_elem83);
                }
                iprot.readListEnd();
              }
              struct.setPlannedStartJobRoleIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 101: // TEAM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.team = new com.wi.director.thrift.v1.team.TeamModular();
              struct.team.read(iprot);
              struct.setTeamIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 102: // JOB_TEMPLATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.jobTemplate = new com.wi.director.thrift.v1.jobtemplate.JobTemplateModular();
              struct.jobTemplate.read(iprot);
              struct.setJobTemplateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 103: // ROOT_HEADERS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.rootHeaders = new com.wi.director.thrift.v1.group_headers.StepGroupHeaders();
              struct.rootHeaders.read(iprot);
              struct.setRootHeadersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 104: // STEP_GROUP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.stepGroup = new com.wi.director.thrift.v1.step.BaseStep();
              struct.stepGroup.read(iprot);
              struct.setStepGroupIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 105: // DOCUMENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list85 = iprot.readListBegin();
                struct.documents = new ArrayList<com.wi.director.thrift.v1.document.Document>(_list85.size);
                com.wi.director.thrift.v1.document.Document _elem86;
                for (int _i87 = 0; _i87 < _list85.size; ++_i87)
                {
                  _elem86 = new com.wi.director.thrift.v1.document.Document();
                  _elem86.read(iprot);
                  struct.documents.add(_elem86);
                }
                iprot.readListEnd();
              }
              struct.setDocumentsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 106: // JOB_USERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list88 = iprot.readListBegin();
                struct.jobUsers = new ArrayList<JobUser>(_list88.size);
                JobUser _elem89;
                for (int _i90 = 0; _i90 < _list88.size; ++_i90)
                {
                  _elem89 = new JobUser();
                  _elem89.read(iprot);
                  struct.jobUsers.add(_elem89);
                }
                iprot.readListEnd();
              }
              struct.setJobUsersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 107: // STATS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.stats = new JobStats();
              struct.stats.read(iprot);
              struct.setStatsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 108: // ACTIVITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.activity = new JobActivity();
              struct.activity.read(iprot);
              struct.setActivityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 109: // TEMPLATES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list91 = iprot.readListBegin();
                struct.templates = new ArrayList<com.wi.director.thrift.v1.jobtemplate.JobTemplateModular>(_list91.size);
                com.wi.director.thrift.v1.jobtemplate.JobTemplateModular _elem92;
                for (int _i93 = 0; _i93 < _list91.size; ++_i93)
                {
                  _elem92 = new com.wi.director.thrift.v1.jobtemplate.JobTemplateModular();
                  _elem92.read(iprot);
                  struct.templates.add(_elem92);
                }
                iprot.readListEnd();
              }
              struct.setTemplatesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 110: // CREATOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.creator = new com.wi.director.thrift.v1.user.User();
              struct.creator.read(iprot);
              struct.setCreatorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 111: // ROLES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list94 = iprot.readListBegin();
                struct.roles = new ArrayList<com.wi.director.thrift.v1.jobrole.JobRole>(_list94.size);
                com.wi.director.thrift.v1.jobrole.JobRole _elem95;
                for (int _i96 = 0; _i96 < _list94.size; ++_i96)
                {
                  _elem95 = new com.wi.director.thrift.v1.jobrole.JobRole();
                  _elem95.read(iprot);
                  struct.roles.add(_elem95);
                }
                iprot.readListEnd();
              }
              struct.setRolesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 112: // JOB_DOCUMENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list97 = iprot.readListBegin();
                struct.jobDocuments = new ArrayList<JobDocument>(_list97.size);
                JobDocument _elem98;
                for (int _i99 = 0; _i99 < _list97.size; ++_i99)
                {
                  _elem98 = new JobDocument();
                  _elem98.read(iprot);
                  struct.jobDocuments.add(_elem98);
                }
                iprot.readListEnd();
              }
              struct.setJobDocumentsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 113: // PERMISSIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.permissions = new com.wi.director.thrift.v1.jobrole.JobPermissions();
              struct.permissions.read(iprot);
              struct.setPermissionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 114: // MESSAGES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list100 = iprot.readListBegin();
                struct.messages = new ArrayList<com.wi.director.thrift.v1.messaging.Message>(_list100.size);
                com.wi.director.thrift.v1.messaging.Message _elem101;
                for (int _i102 = 0; _i102 < _list100.size; ++_i102)
                {
                  _elem101 = new com.wi.director.thrift.v1.messaging.Message();
                  _elem101.read(iprot);
                  struct.messages.add(_elem101);
                }
                iprot.readListEnd();
              }
              struct.setMessagesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 115: // SNIPPETS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list103 = iprot.readListBegin();
                struct.snippets = new ArrayList<ExecutionSnippet>(_list103.size);
                ExecutionSnippet _elem104;
                for (int _i105 = 0; _i105 < _list103.size; ++_i105)
                {
                  _elem104 = new ExecutionSnippet();
                  _elem104.read(iprot);
                  struct.snippets.add(_elem104);
                }
                iprot.readListEnd();
              }
              struct.setSnippetsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 116: // ISSUES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list106 = iprot.readListBegin();
                struct.issues = new ArrayList<IssueJobLink>(_list106.size);
                IssueJobLink _elem107;
                for (int _i108 = 0; _i108 < _list106.size; ++_i108)
                {
                  _elem107 = new IssueJobLink();
                  _elem107.read(iprot);
                  struct.issues.add(_elem107);
                }
                iprot.readListEnd();
              }
              struct.setIssuesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 117: // DEVIATION_COUNTS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map109 = iprot.readMapBegin();
                struct.deviationCounts = new HashMap<JobDeviationType,Integer>(2*_map109.size);
                JobDeviationType _key110;
                int _val111;
                for (int _i112 = 0; _i112 < _map109.size; ++_i112)
                {
                  _key110 = com.wi.director.thrift.v1.job.JobDeviationType.findByValue(iprot.readI32());
                  _val111 = iprot.readI32();
                  struct.deviationCounts.put(_key110, _val111);
                }
                iprot.readMapEnd();
              }
              struct.setDeviationCountsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 118: // DEVIATIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map113 = iprot.readMapBegin();
                struct.deviations = new HashMap<JobDeviationType,List<JobDeviationRef>>(2*_map113.size);
                JobDeviationType _key114;
                List<JobDeviationRef> _val115;
                for (int _i116 = 0; _i116 < _map113.size; ++_i116)
                {
                  _key114 = com.wi.director.thrift.v1.job.JobDeviationType.findByValue(iprot.readI32());
                  {
                    org.apache.thrift.protocol.TList _list117 = iprot.readListBegin();
                    _val115 = new ArrayList<JobDeviationRef>(_list117.size);
                    JobDeviationRef _elem118;
                    for (int _i119 = 0; _i119 < _list117.size; ++_i119)
                    {
                      _elem118 = new JobDeviationRef();
                      _elem118.read(iprot);
                      _val115.add(_elem118);
                    }
                    iprot.readListEnd();
                  }
                  struct.deviations.put(_key114, _val115);
                }
                iprot.readMapEnd();
              }
              struct.setDeviationsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 119: // ATTRIBUTES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list120 = iprot.readListBegin();
                struct.attributes = new ArrayList<com.wi.director.thrift.v1.abac.AbacAttribute>(_list120.size);
                com.wi.director.thrift.v1.abac.AbacAttribute _elem121;
                for (int _i122 = 0; _i122 < _list120.size; ++_i122)
                {
                  _elem121 = new com.wi.director.thrift.v1.abac.AbacAttribute();
                  _elem121.read(iprot);
                  struct.attributes.add(_elem121);
                }
                iprot.readListEnd();
              }
              struct.setAttributesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 125: // REFERENCES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map123 = iprot.readMapBegin();
                struct.references = new HashMap<com.parsable.thrift.v1.reference.RefSource,Set<String>>(2*_map123.size);
                com.parsable.thrift.v1.reference.RefSource _key124;
                Set<String> _val125;
                for (int _i126 = 0; _i126 < _map123.size; ++_i126)
                {
                  _key124 = com.parsable.thrift.v1.reference.RefSource.findByValue(iprot.readI32());
                  {
                    org.apache.thrift.protocol.TSet _set127 = iprot.readSetBegin();
                    _val125 = new HashSet<String>(2*_set127.size);
                    String _elem128;
                    for (int _i129 = 0; _i129 < _set127.size; ++_i129)
                    {
                      _elem128 = iprot.readString();
                      _val125.add(_elem128);
                    }
                    iprot.readSetEnd();
                  }
                  struct.references.put(_key124, _val125);
                }
                iprot.readMapEnd();
              }
              struct.setReferencesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, JobModular struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.title != null) {
        oprot.writeFieldBegin(TITLE_FIELD_DESC);
        oprot.writeString(struct.title);
        oprot.writeFieldEnd();
      }
      if (struct.jobTemplateId != null) {
        oprot.writeFieldBegin(JOB_TEMPLATE_ID_FIELD_DESC);
        oprot.writeString(struct.jobTemplateId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(JOB_TEMPLATE_INTERNAL_VERSION_FIELD_DESC);
      oprot.writeI32(struct.jobTemplateInternalVersion);
      oprot.writeFieldEnd();
      if (struct.teamId != null) {
        oprot.writeFieldBegin(TEAM_ID_FIELD_DESC);
        oprot.writeString(struct.teamId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(COMPLETED_AT_FIELD_DESC);
      oprot.writeI64(struct.completedAt);
      oprot.writeFieldEnd();
      if (struct.reasonCompleted != null) {
        oprot.writeFieldBegin(REASON_COMPLETED_FIELD_DESC);
        oprot.writeString(struct.reasonCompleted);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATED_AT_FIELD_DESC);
      oprot.writeI64(struct.createdAt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UPDATED_AT_FIELD_DESC);
      oprot.writeI64(struct.updatedAt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_PREVIEW_FIELD_DESC);
      oprot.writeBool(struct.isPreview);
      oprot.writeFieldEnd();
      if (struct.documentEmailAddress != null) {
        oprot.writeFieldBegin(DOCUMENT_EMAIL_ADDRESS_FIELD_DESC);
        oprot.writeString(struct.documentEmailAddress);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PLANNED_START_AT_FIELD_DESC);
      oprot.writeI64(struct.plannedStartAt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STARTED_AT_FIELD_DESC);
      oprot.writeI64(struct.startedAt);
      oprot.writeFieldEnd();
      if (struct.creatorId != null) {
        oprot.writeFieldBegin(CREATOR_ID_FIELD_DESC);
        oprot.writeString(struct.creatorId);
        oprot.writeFieldEnd();
      }
      if (struct.metadataById != null) {
        oprot.writeFieldBegin(METADATA_BY_ID_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.metadataById.size()));
          for (Map.Entry<String, com.wi.director.thrift.v1.metadata.MetadataEntry> _iter130 : struct.metadataById.entrySet())
          {
            oprot.writeString(_iter130.getKey());
            _iter130.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MESH_ENABLED_FIELD_DESC);
      oprot.writeBool(struct.meshEnabled);
      oprot.writeFieldEnd();
      if (struct.recurringRule != null) {
        if (struct.isSetRecurringRule()) {
          oprot.writeFieldBegin(RECURRING_RULE_FIELD_DESC);
          struct.recurringRule.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.recurredInfo != null) {
        if (struct.isSetRecurredInfo()) {
          oprot.writeFieldBegin(RECURRED_INFO_FIELD_DESC);
          struct.recurredInfo.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.schedule != null) {
        if (struct.isSetSchedule()) {
          oprot.writeFieldBegin(SCHEDULE_FIELD_DESC);
          struct.schedule.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetStartAuto()) {
        oprot.writeFieldBegin(START_AUTO_FIELD_DESC);
        oprot.writeBool(struct.startAuto);
        oprot.writeFieldEnd();
      }
      if (struct.jobType != null) {
        oprot.writeFieldBegin(JOB_TYPE_FIELD_DESC);
        oprot.writeI32(struct.jobType.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(USING_EVENTS_FIELD_DESC);
      oprot.writeBool(struct.usingEvents);
      oprot.writeFieldEnd();
      if (struct.src != null) {
        if (struct.isSetSrc()) {
          oprot.writeFieldBegin(SRC_FIELD_DESC);
          struct.src.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.lookupId != null) {
        if (struct.isSetLookupId()) {
          oprot.writeFieldBegin(LOOKUP_ID_FIELD_DESC);
          oprot.writeString(struct.lookupId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.priority != null) {
        if (struct.isSetPriority()) {
          oprot.writeFieldBegin(PRIORITY_FIELD_DESC);
          struct.priority.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(ARCHIVED_AT_FIELD_DESC);
      oprot.writeI64(struct.archivedAt);
      oprot.writeFieldEnd();
      if (struct.location != null) {
        if (struct.isSetLocation()) {
          oprot.writeFieldBegin(LOCATION_FIELD_DESC);
          oprot.writeString(struct.location);
          oprot.writeFieldEnd();
        }
      }
      if (struct.plannedStartJobRoleIds != null) {
        if (struct.isSetPlannedStartJobRoleIds()) {
          oprot.writeFieldBegin(PLANNED_START_JOB_ROLE_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.plannedStartJobRoleIds.size()));
            for (String _iter131 : struct.plannedStartJobRoleIds)
            {
              oprot.writeString(_iter131);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.team != null) {
        if (struct.isSetTeam()) {
          oprot.writeFieldBegin(TEAM_FIELD_DESC);
          struct.team.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.jobTemplate != null) {
        if (struct.isSetJobTemplate()) {
          oprot.writeFieldBegin(JOB_TEMPLATE_FIELD_DESC);
          struct.jobTemplate.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.rootHeaders != null) {
        if (struct.isSetRootHeaders()) {
          oprot.writeFieldBegin(ROOT_HEADERS_FIELD_DESC);
          struct.rootHeaders.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.stepGroup != null) {
        if (struct.isSetStepGroup()) {
          oprot.writeFieldBegin(STEP_GROUP_FIELD_DESC);
          struct.stepGroup.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.documents != null) {
        if (struct.isSetDocuments()) {
          oprot.writeFieldBegin(DOCUMENTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.documents.size()));
            for (com.wi.director.thrift.v1.document.Document _iter132 : struct.documents)
            {
              _iter132.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.jobUsers != null) {
        if (struct.isSetJobUsers()) {
          oprot.writeFieldBegin(JOB_USERS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.jobUsers.size()));
            for (JobUser _iter133 : struct.jobUsers)
            {
              _iter133.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.stats != null) {
        if (struct.isSetStats()) {
          oprot.writeFieldBegin(STATS_FIELD_DESC);
          struct.stats.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.activity != null) {
        if (struct.isSetActivity()) {
          oprot.writeFieldBegin(ACTIVITY_FIELD_DESC);
          struct.activity.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.templates != null) {
        if (struct.isSetTemplates()) {
          oprot.writeFieldBegin(TEMPLATES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.templates.size()));
            for (com.wi.director.thrift.v1.jobtemplate.JobTemplateModular _iter134 : struct.templates)
            {
              _iter134.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.creator != null) {
        if (struct.isSetCreator()) {
          oprot.writeFieldBegin(CREATOR_FIELD_DESC);
          struct.creator.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.roles != null) {
        if (struct.isSetRoles()) {
          oprot.writeFieldBegin(ROLES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.roles.size()));
            for (com.wi.director.thrift.v1.jobrole.JobRole _iter135 : struct.roles)
            {
              _iter135.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.jobDocuments != null) {
        if (struct.isSetJobDocuments()) {
          oprot.writeFieldBegin(JOB_DOCUMENTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.jobDocuments.size()));
            for (JobDocument _iter136 : struct.jobDocuments)
            {
              _iter136.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.permissions != null) {
        if (struct.isSetPermissions()) {
          oprot.writeFieldBegin(PERMISSIONS_FIELD_DESC);
          struct.permissions.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.messages != null) {
        if (struct.isSetMessages()) {
          oprot.writeFieldBegin(MESSAGES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.messages.size()));
            for (com.wi.director.thrift.v1.messaging.Message _iter137 : struct.messages)
            {
              _iter137.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.snippets != null) {
        if (struct.isSetSnippets()) {
          oprot.writeFieldBegin(SNIPPETS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.snippets.size()));
            for (ExecutionSnippet _iter138 : struct.snippets)
            {
              _iter138.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.issues != null) {
        if (struct.isSetIssues()) {
          oprot.writeFieldBegin(ISSUES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.issues.size()));
            for (IssueJobLink _iter139 : struct.issues)
            {
              _iter139.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.deviationCounts != null) {
        if (struct.isSetDeviationCounts()) {
          oprot.writeFieldBegin(DEVIATION_COUNTS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32, struct.deviationCounts.size()));
            for (Map.Entry<JobDeviationType, Integer> _iter140 : struct.deviationCounts.entrySet())
            {
              oprot.writeI32(_iter140.getKey().getValue());
              oprot.writeI32(_iter140.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.deviations != null) {
        if (struct.isSetDeviations()) {
          oprot.writeFieldBegin(DEVIATIONS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.LIST, struct.deviations.size()));
            for (Map.Entry<JobDeviationType, List<JobDeviationRef>> _iter141 : struct.deviations.entrySet())
            {
              oprot.writeI32(_iter141.getKey().getValue());
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter141.getValue().size()));
                for (JobDeviationRef _iter142 : _iter141.getValue())
                {
                  _iter142.write(oprot);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.attributes != null) {
        if (struct.isSetAttributes()) {
          oprot.writeFieldBegin(ATTRIBUTES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.attributes.size()));
            for (com.wi.director.thrift.v1.abac.AbacAttribute _iter143 : struct.attributes)
            {
              _iter143.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.references != null) {
        if (struct.isSetReferences()) {
          oprot.writeFieldBegin(REFERENCES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.SET, struct.references.size()));
            for (Map.Entry<com.parsable.thrift.v1.reference.RefSource, Set<String>> _iter144 : struct.references.entrySet())
            {
              oprot.writeI32(_iter144.getKey().getValue());
              {
                oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, _iter144.getValue().size()));
                for (String _iter145 : _iter144.getValue())
                {
                  oprot.writeString(_iter145);
                }
                oprot.writeSetEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

}

