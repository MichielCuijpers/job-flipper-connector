/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wi.director.thrift.v1.jobtemplate;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * Response type for forceAcquireLock
 */
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class ForceAcquireResponse implements org.apache.thrift.TBase<ForceAcquireResponse, ForceAcquireResponse._Fields>, java.io.Serializable, Cloneable, Comparable<ForceAcquireResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ForceAcquireResponse");

  private static final org.apache.thrift.protocol.TField PREVIOUS_LOCK_FIELD_DESC = new org.apache.thrift.protocol.TField("previousLock", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField CURRENT_LOCK_FIELD_DESC = new org.apache.thrift.protocol.TField("currentLock", org.apache.thrift.protocol.TType.STRUCT, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ForceAcquireResponseStandardSchemeFactory());
  }

  /**
   * broken lock details (may be missing)
   */
  public JobTemplateLock previousLock; // optional
  /**
   * new lock details
   */
  public JobTemplateLock currentLock; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * broken lock details (may be missing)
     */
    PREVIOUS_LOCK((short)1, "previousLock"),
    /**
     * new lock details
     */
    CURRENT_LOCK((short)2, "currentLock");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PREVIOUS_LOCK
          return PREVIOUS_LOCK;
        case 2: // CURRENT_LOCK
          return CURRENT_LOCK;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.PREVIOUS_LOCK};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PREVIOUS_LOCK, new org.apache.thrift.meta_data.FieldMetaData("previousLock", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JobTemplateLock.class)));
    tmpMap.put(_Fields.CURRENT_LOCK, new org.apache.thrift.meta_data.FieldMetaData("currentLock", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JobTemplateLock.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ForceAcquireResponse.class, metaDataMap);
  }

  public ForceAcquireResponse() {
  }

  public ForceAcquireResponse(
    JobTemplateLock currentLock)
  {
    this();
    this.currentLock = currentLock;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ForceAcquireResponse(ForceAcquireResponse other) {
    if (other.isSetPreviousLock()) {
      this.previousLock = new JobTemplateLock(other.previousLock);
    }
    if (other.isSetCurrentLock()) {
      this.currentLock = new JobTemplateLock(other.currentLock);
    }
  }

  public ForceAcquireResponse deepCopy() {
    return new ForceAcquireResponse(this);
  }

  @Override
  public void clear() {
    this.previousLock = null;
    this.currentLock = null;
  }

  /**
   * broken lock details (may be missing)
   */
  public JobTemplateLock getPreviousLock() {
    return this.previousLock;
  }

  /**
   * broken lock details (may be missing)
   */
  public ForceAcquireResponse setPreviousLock(JobTemplateLock previousLock) {
    this.previousLock = previousLock;
    return this;
  }

  public void unsetPreviousLock() {
    this.previousLock = null;
  }

  /** Returns true if field previousLock is set (has been assigned a value) and false otherwise */
  public boolean isSetPreviousLock() {
    return this.previousLock != null;
  }

  public void setPreviousLockIsSet(boolean value) {
    if (!value) {
      this.previousLock = null;
    }
  }

  /**
   * new lock details
   */
  public JobTemplateLock getCurrentLock() {
    return this.currentLock;
  }

  /**
   * new lock details
   */
  public ForceAcquireResponse setCurrentLock(JobTemplateLock currentLock) {
    this.currentLock = currentLock;
    return this;
  }

  public void unsetCurrentLock() {
    this.currentLock = null;
  }

  /** Returns true if field currentLock is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrentLock() {
    return this.currentLock != null;
  }

  public void setCurrentLockIsSet(boolean value) {
    if (!value) {
      this.currentLock = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PREVIOUS_LOCK:
      if (value == null) {
        unsetPreviousLock();
      } else {
        setPreviousLock((JobTemplateLock)value);
      }
      break;

    case CURRENT_LOCK:
      if (value == null) {
        unsetCurrentLock();
      } else {
        setCurrentLock((JobTemplateLock)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PREVIOUS_LOCK:
      return getPreviousLock();

    case CURRENT_LOCK:
      return getCurrentLock();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PREVIOUS_LOCK:
      return isSetPreviousLock();
    case CURRENT_LOCK:
      return isSetCurrentLock();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ForceAcquireResponse)
      return this.equals((ForceAcquireResponse)that);
    return false;
  }

  public boolean equals(ForceAcquireResponse that) {
    if (that == null)
      return false;

    boolean this_present_previousLock = true && this.isSetPreviousLock();
    boolean that_present_previousLock = true && that.isSetPreviousLock();
    if (this_present_previousLock || that_present_previousLock) {
      if (!(this_present_previousLock && that_present_previousLock))
        return false;
      if (!this.previousLock.equals(that.previousLock))
        return false;
    }

    boolean this_present_currentLock = true && this.isSetCurrentLock();
    boolean that_present_currentLock = true && that.isSetCurrentLock();
    if (this_present_currentLock || that_present_currentLock) {
      if (!(this_present_currentLock && that_present_currentLock))
        return false;
      if (!this.currentLock.equals(that.currentLock))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_previousLock = true && (isSetPreviousLock());
    list.add(present_previousLock);
    if (present_previousLock)
      list.add(previousLock);

    boolean present_currentLock = true && (isSetCurrentLock());
    list.add(present_currentLock);
    if (present_currentLock)
      list.add(currentLock);

    return list.hashCode();
  }

  @Override
  public int compareTo(ForceAcquireResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPreviousLock()).compareTo(other.isSetPreviousLock());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPreviousLock()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.previousLock, other.previousLock);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrentLock()).compareTo(other.isSetCurrentLock());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrentLock()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currentLock, other.currentLock);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ForceAcquireResponse(");
    boolean first = true;

    if (isSetPreviousLock()) {
      sb.append("previousLock:");
      if (this.previousLock == null) {
        sb.append("null");
      } else {
        sb.append(this.previousLock);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("currentLock:");
    if (this.currentLock == null) {
      sb.append("null");
    } else {
      sb.append(this.currentLock);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (previousLock != null) {
      previousLock.validate();
    }
    if (currentLock != null) {
      currentLock.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ForceAcquireResponseStandardSchemeFactory implements SchemeFactory {
    public ForceAcquireResponseStandardScheme getScheme() {
      return new ForceAcquireResponseStandardScheme();
    }
  }

  private static class ForceAcquireResponseStandardScheme extends StandardScheme<ForceAcquireResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ForceAcquireResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PREVIOUS_LOCK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.previousLock = new JobTemplateLock();
              struct.previousLock.read(iprot);
              struct.setPreviousLockIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CURRENT_LOCK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.currentLock = new JobTemplateLock();
              struct.currentLock.read(iprot);
              struct.setCurrentLockIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ForceAcquireResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.previousLock != null) {
        if (struct.isSetPreviousLock()) {
          oprot.writeFieldBegin(PREVIOUS_LOCK_FIELD_DESC);
          struct.previousLock.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.currentLock != null) {
        oprot.writeFieldBegin(CURRENT_LOCK_FIELD_DESC);
        struct.currentLock.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

}

