/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wi.director.thrift.v1.job;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class JobDocument implements org.apache.thrift.TBase<JobDocument, JobDocument._Fields>, java.io.Serializable, Cloneable, Comparable<JobDocument> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("JobDocument");

  private static final org.apache.thrift.protocol.TField FROM_TEMPLATE_FIELD_DESC = new org.apache.thrift.protocol.TField("fromTemplate", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField DOCUMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("document", org.apache.thrift.protocol.TType.STRUCT, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new JobDocumentStandardSchemeFactory());
  }

  public boolean fromTemplate; // required
  public com.wi.director.thrift.v1.document.Document document; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FROM_TEMPLATE((short)1, "fromTemplate"),
    DOCUMENT((short)2, "document");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FROM_TEMPLATE
          return FROM_TEMPLATE;
        case 2: // DOCUMENT
          return DOCUMENT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FROMTEMPLATE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FROM_TEMPLATE, new org.apache.thrift.meta_data.FieldMetaData("fromTemplate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DOCUMENT, new org.apache.thrift.meta_data.FieldMetaData("document", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.document.Document.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(JobDocument.class, metaDataMap);
  }

  public JobDocument() {
  }

  public JobDocument(
    boolean fromTemplate,
    com.wi.director.thrift.v1.document.Document document)
  {
    this();
    this.fromTemplate = fromTemplate;
    setFromTemplateIsSet(true);
    this.document = document;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public JobDocument(JobDocument other) {
    __isset_bitfield = other.__isset_bitfield;
    this.fromTemplate = other.fromTemplate;
    if (other.isSetDocument()) {
      this.document = new com.wi.director.thrift.v1.document.Document(other.document);
    }
  }

  public JobDocument deepCopy() {
    return new JobDocument(this);
  }

  @Override
  public void clear() {
    setFromTemplateIsSet(false);
    this.fromTemplate = false;
    this.document = null;
  }

  public boolean isFromTemplate() {
    return this.fromTemplate;
  }

  public JobDocument setFromTemplate(boolean fromTemplate) {
    this.fromTemplate = fromTemplate;
    setFromTemplateIsSet(true);
    return this;
  }

  public void unsetFromTemplate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FROMTEMPLATE_ISSET_ID);
  }

  /** Returns true if field fromTemplate is set (has been assigned a value) and false otherwise */
  public boolean isSetFromTemplate() {
    return EncodingUtils.testBit(__isset_bitfield, __FROMTEMPLATE_ISSET_ID);
  }

  public void setFromTemplateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FROMTEMPLATE_ISSET_ID, value);
  }

  public com.wi.director.thrift.v1.document.Document getDocument() {
    return this.document;
  }

  public JobDocument setDocument(com.wi.director.thrift.v1.document.Document document) {
    this.document = document;
    return this;
  }

  public void unsetDocument() {
    this.document = null;
  }

  /** Returns true if field document is set (has been assigned a value) and false otherwise */
  public boolean isSetDocument() {
    return this.document != null;
  }

  public void setDocumentIsSet(boolean value) {
    if (!value) {
      this.document = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FROM_TEMPLATE:
      if (value == null) {
        unsetFromTemplate();
      } else {
        setFromTemplate((Boolean)value);
      }
      break;

    case DOCUMENT:
      if (value == null) {
        unsetDocument();
      } else {
        setDocument((com.wi.director.thrift.v1.document.Document)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FROM_TEMPLATE:
      return isFromTemplate();

    case DOCUMENT:
      return getDocument();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FROM_TEMPLATE:
      return isSetFromTemplate();
    case DOCUMENT:
      return isSetDocument();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof JobDocument)
      return this.equals((JobDocument)that);
    return false;
  }

  public boolean equals(JobDocument that) {
    if (that == null)
      return false;

    boolean this_present_fromTemplate = true;
    boolean that_present_fromTemplate = true;
    if (this_present_fromTemplate || that_present_fromTemplate) {
      if (!(this_present_fromTemplate && that_present_fromTemplate))
        return false;
      if (this.fromTemplate != that.fromTemplate)
        return false;
    }

    boolean this_present_document = true && this.isSetDocument();
    boolean that_present_document = true && that.isSetDocument();
    if (this_present_document || that_present_document) {
      if (!(this_present_document && that_present_document))
        return false;
      if (!this.document.equals(that.document))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_fromTemplate = true;
    list.add(present_fromTemplate);
    if (present_fromTemplate)
      list.add(fromTemplate);

    boolean present_document = true && (isSetDocument());
    list.add(present_document);
    if (present_document)
      list.add(document);

    return list.hashCode();
  }

  @Override
  public int compareTo(JobDocument other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetFromTemplate()).compareTo(other.isSetFromTemplate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFromTemplate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromTemplate, other.fromTemplate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDocument()).compareTo(other.isSetDocument());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDocument()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.document, other.document);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("JobDocument(");
    boolean first = true;

    sb.append("fromTemplate:");
    sb.append(this.fromTemplate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("document:");
    if (this.document == null) {
      sb.append("null");
    } else {
      sb.append(this.document);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (document != null) {
      document.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class JobDocumentStandardSchemeFactory implements SchemeFactory {
    public JobDocumentStandardScheme getScheme() {
      return new JobDocumentStandardScheme();
    }
  }

  private static class JobDocumentStandardScheme extends StandardScheme<JobDocument> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, JobDocument struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FROM_TEMPLATE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.fromTemplate = iprot.readBool();
              struct.setFromTemplateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DOCUMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.document = new com.wi.director.thrift.v1.document.Document();
              struct.document.read(iprot);
              struct.setDocumentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, JobDocument struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(FROM_TEMPLATE_FIELD_DESC);
      oprot.writeBool(struct.fromTemplate);
      oprot.writeFieldEnd();
      if (struct.document != null) {
        oprot.writeFieldBegin(DOCUMENT_FIELD_DESC);
        struct.document.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

}

