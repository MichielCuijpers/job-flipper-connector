/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wi.director.thrift.v1.team;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * Configuration parameters for a team
 */
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class TeamConfig implements org.apache.thrift.TBase<TeamConfig, TeamConfig._Fields>, java.io.Serializable, Cloneable, Comparable<TeamConfig> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TeamConfig");

  private static final org.apache.thrift.protocol.TField REQUIRE_REVIEW_FLOW_FIELD_DESC = new org.apache.thrift.protocol.TField("requireReviewFlow", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField SHOW_STEP_HIERARCHY_POS_FIELD_DESC = new org.apache.thrift.protocol.TField("showStepHierarchyPos", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField DEFAULT_LOCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("defaultLocale", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField REQUIRE_TEMPLATE_SET_REVIEW_FLOW_FIELD_DESC = new org.apache.thrift.protocol.TField("requireTemplateSetReviewFlow", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField BACKEND_PDF_GEN_FIELD_DESC = new org.apache.thrift.protocol.TField("backendPdfGen", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField USE_WEB_SOCKET_FIELD_DESC = new org.apache.thrift.protocol.TField("useWebSocket", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField EMAIL_SENDER_OVERRIDE_FIELD_DESC = new org.apache.thrift.protocol.TField("emailSenderOverride", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField ENABLE_OBSERVER_ROLE_FIELD_DESC = new org.apache.thrift.protocol.TField("enableObserverRole", org.apache.thrift.protocol.TType.BOOL, (short)8);
  private static final org.apache.thrift.protocol.TField ENABLE_TEMPLATE_DIFFS_FIELD_DESC = new org.apache.thrift.protocol.TField("enableTemplateDiffs", org.apache.thrift.protocol.TType.BOOL, (short)9);
  private static final org.apache.thrift.protocol.TField ENABLE_TEMPLATE_VIEWS_FIELD_DESC = new org.apache.thrift.protocol.TField("enableTemplateViews", org.apache.thrift.protocol.TType.BOOL, (short)10);
  private static final org.apache.thrift.protocol.TField PROXY_REGION_FIELD_DESC = new org.apache.thrift.protocol.TField("proxyRegion", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField USE_PARSABLE_CAMERA_FIELD_DESC = new org.apache.thrift.protocol.TField("useParsableCamera", org.apache.thrift.protocol.TType.BOOL, (short)12);
  private static final org.apache.thrift.protocol.TField PREVIEW_PDF_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("previewPdfUrl", org.apache.thrift.protocol.TType.STRING, (short)13);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TeamConfigStandardSchemeFactory());
  }

  public boolean requireReviewFlow; // required
  public boolean showStepHierarchyPos; // optional
  public String defaultLocale; // optional
  public boolean requireTemplateSetReviewFlow; // required
  public boolean backendPdfGen; // required
  public boolean useWebSocket; // required
  public String emailSenderOverride; // optional
  public boolean enableObserverRole; // required
  public boolean enableTemplateDiffs; // optional
  public boolean enableTemplateViews; // optional
  public String proxyRegion; // optional
  public boolean useParsableCamera; // optional
  public String previewPdfUrl; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    REQUIRE_REVIEW_FLOW((short)1, "requireReviewFlow"),
    SHOW_STEP_HIERARCHY_POS((short)2, "showStepHierarchyPos"),
    DEFAULT_LOCALE((short)3, "defaultLocale"),
    REQUIRE_TEMPLATE_SET_REVIEW_FLOW((short)4, "requireTemplateSetReviewFlow"),
    BACKEND_PDF_GEN((short)5, "backendPdfGen"),
    USE_WEB_SOCKET((short)6, "useWebSocket"),
    EMAIL_SENDER_OVERRIDE((short)7, "emailSenderOverride"),
    ENABLE_OBSERVER_ROLE((short)8, "enableObserverRole"),
    ENABLE_TEMPLATE_DIFFS((short)9, "enableTemplateDiffs"),
    ENABLE_TEMPLATE_VIEWS((short)10, "enableTemplateViews"),
    PROXY_REGION((short)11, "proxyRegion"),
    USE_PARSABLE_CAMERA((short)12, "useParsableCamera"),
    PREVIEW_PDF_URL((short)13, "previewPdfUrl");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // REQUIRE_REVIEW_FLOW
          return REQUIRE_REVIEW_FLOW;
        case 2: // SHOW_STEP_HIERARCHY_POS
          return SHOW_STEP_HIERARCHY_POS;
        case 3: // DEFAULT_LOCALE
          return DEFAULT_LOCALE;
        case 4: // REQUIRE_TEMPLATE_SET_REVIEW_FLOW
          return REQUIRE_TEMPLATE_SET_REVIEW_FLOW;
        case 5: // BACKEND_PDF_GEN
          return BACKEND_PDF_GEN;
        case 6: // USE_WEB_SOCKET
          return USE_WEB_SOCKET;
        case 7: // EMAIL_SENDER_OVERRIDE
          return EMAIL_SENDER_OVERRIDE;
        case 8: // ENABLE_OBSERVER_ROLE
          return ENABLE_OBSERVER_ROLE;
        case 9: // ENABLE_TEMPLATE_DIFFS
          return ENABLE_TEMPLATE_DIFFS;
        case 10: // ENABLE_TEMPLATE_VIEWS
          return ENABLE_TEMPLATE_VIEWS;
        case 11: // PROXY_REGION
          return PROXY_REGION;
        case 12: // USE_PARSABLE_CAMERA
          return USE_PARSABLE_CAMERA;
        case 13: // PREVIEW_PDF_URL
          return PREVIEW_PDF_URL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __REQUIREREVIEWFLOW_ISSET_ID = 0;
  private static final int __SHOWSTEPHIERARCHYPOS_ISSET_ID = 1;
  private static final int __REQUIRETEMPLATESETREVIEWFLOW_ISSET_ID = 2;
  private static final int __BACKENDPDFGEN_ISSET_ID = 3;
  private static final int __USEWEBSOCKET_ISSET_ID = 4;
  private static final int __ENABLEOBSERVERROLE_ISSET_ID = 5;
  private static final int __ENABLETEMPLATEDIFFS_ISSET_ID = 6;
  private static final int __ENABLETEMPLATEVIEWS_ISSET_ID = 7;
  private static final int __USEPARSABLECAMERA_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.SHOW_STEP_HIERARCHY_POS,_Fields.DEFAULT_LOCALE,_Fields.EMAIL_SENDER_OVERRIDE,_Fields.ENABLE_TEMPLATE_DIFFS,_Fields.ENABLE_TEMPLATE_VIEWS,_Fields.PROXY_REGION,_Fields.USE_PARSABLE_CAMERA,_Fields.PREVIEW_PDF_URL};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.REQUIRE_REVIEW_FLOW, new org.apache.thrift.meta_data.FieldMetaData("requireReviewFlow", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SHOW_STEP_HIERARCHY_POS, new org.apache.thrift.meta_data.FieldMetaData("showStepHierarchyPos", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DEFAULT_LOCALE, new org.apache.thrift.meta_data.FieldMetaData("defaultLocale", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REQUIRE_TEMPLATE_SET_REVIEW_FLOW, new org.apache.thrift.meta_data.FieldMetaData("requireTemplateSetReviewFlow", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.BACKEND_PDF_GEN, new org.apache.thrift.meta_data.FieldMetaData("backendPdfGen", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.USE_WEB_SOCKET, new org.apache.thrift.meta_data.FieldMetaData("useWebSocket", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.EMAIL_SENDER_OVERRIDE, new org.apache.thrift.meta_data.FieldMetaData("emailSenderOverride", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ENABLE_OBSERVER_ROLE, new org.apache.thrift.meta_data.FieldMetaData("enableObserverRole", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ENABLE_TEMPLATE_DIFFS, new org.apache.thrift.meta_data.FieldMetaData("enableTemplateDiffs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ENABLE_TEMPLATE_VIEWS, new org.apache.thrift.meta_data.FieldMetaData("enableTemplateViews", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PROXY_REGION, new org.apache.thrift.meta_data.FieldMetaData("proxyRegion", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USE_PARSABLE_CAMERA, new org.apache.thrift.meta_data.FieldMetaData("useParsableCamera", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PREVIEW_PDF_URL, new org.apache.thrift.meta_data.FieldMetaData("previewPdfUrl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TeamConfig.class, metaDataMap);
  }

  public TeamConfig() {
    this.requireReviewFlow = false;

    this.requireTemplateSetReviewFlow = false;

    this.backendPdfGen = true;

    this.useWebSocket = true;

    this.enableObserverRole = false;

  }

  public TeamConfig(
    boolean requireReviewFlow,
    boolean requireTemplateSetReviewFlow,
    boolean backendPdfGen,
    boolean useWebSocket,
    boolean enableObserverRole)
  {
    this();
    this.requireReviewFlow = requireReviewFlow;
    setRequireReviewFlowIsSet(true);
    this.requireTemplateSetReviewFlow = requireTemplateSetReviewFlow;
    setRequireTemplateSetReviewFlowIsSet(true);
    this.backendPdfGen = backendPdfGen;
    setBackendPdfGenIsSet(true);
    this.useWebSocket = useWebSocket;
    setUseWebSocketIsSet(true);
    this.enableObserverRole = enableObserverRole;
    setEnableObserverRoleIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TeamConfig(TeamConfig other) {
    __isset_bitfield = other.__isset_bitfield;
    this.requireReviewFlow = other.requireReviewFlow;
    this.showStepHierarchyPos = other.showStepHierarchyPos;
    if (other.isSetDefaultLocale()) {
      this.defaultLocale = other.defaultLocale;
    }
    this.requireTemplateSetReviewFlow = other.requireTemplateSetReviewFlow;
    this.backendPdfGen = other.backendPdfGen;
    this.useWebSocket = other.useWebSocket;
    if (other.isSetEmailSenderOverride()) {
      this.emailSenderOverride = other.emailSenderOverride;
    }
    this.enableObserverRole = other.enableObserverRole;
    this.enableTemplateDiffs = other.enableTemplateDiffs;
    this.enableTemplateViews = other.enableTemplateViews;
    if (other.isSetProxyRegion()) {
      this.proxyRegion = other.proxyRegion;
    }
    this.useParsableCamera = other.useParsableCamera;
    if (other.isSetPreviewPdfUrl()) {
      this.previewPdfUrl = other.previewPdfUrl;
    }
  }

  public TeamConfig deepCopy() {
    return new TeamConfig(this);
  }

  @Override
  public void clear() {
    this.requireReviewFlow = false;

    setShowStepHierarchyPosIsSet(false);
    this.showStepHierarchyPos = false;
    this.defaultLocale = null;
    this.requireTemplateSetReviewFlow = false;

    this.backendPdfGen = true;

    this.useWebSocket = true;

    this.emailSenderOverride = null;
    this.enableObserverRole = false;

    setEnableTemplateDiffsIsSet(false);
    this.enableTemplateDiffs = false;
    setEnableTemplateViewsIsSet(false);
    this.enableTemplateViews = false;
    this.proxyRegion = null;
    setUseParsableCameraIsSet(false);
    this.useParsableCamera = false;
    this.previewPdfUrl = null;
  }

  public boolean isRequireReviewFlow() {
    return this.requireReviewFlow;
  }

  public TeamConfig setRequireReviewFlow(boolean requireReviewFlow) {
    this.requireReviewFlow = requireReviewFlow;
    setRequireReviewFlowIsSet(true);
    return this;
  }

  public void unsetRequireReviewFlow() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUIREREVIEWFLOW_ISSET_ID);
  }

  /** Returns true if field requireReviewFlow is set (has been assigned a value) and false otherwise */
  public boolean isSetRequireReviewFlow() {
    return EncodingUtils.testBit(__isset_bitfield, __REQUIREREVIEWFLOW_ISSET_ID);
  }

  public void setRequireReviewFlowIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUIREREVIEWFLOW_ISSET_ID, value);
  }

  public boolean isShowStepHierarchyPos() {
    return this.showStepHierarchyPos;
  }

  public TeamConfig setShowStepHierarchyPos(boolean showStepHierarchyPos) {
    this.showStepHierarchyPos = showStepHierarchyPos;
    setShowStepHierarchyPosIsSet(true);
    return this;
  }

  public void unsetShowStepHierarchyPos() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHOWSTEPHIERARCHYPOS_ISSET_ID);
  }

  /** Returns true if field showStepHierarchyPos is set (has been assigned a value) and false otherwise */
  public boolean isSetShowStepHierarchyPos() {
    return EncodingUtils.testBit(__isset_bitfield, __SHOWSTEPHIERARCHYPOS_ISSET_ID);
  }

  public void setShowStepHierarchyPosIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHOWSTEPHIERARCHYPOS_ISSET_ID, value);
  }

  public String getDefaultLocale() {
    return this.defaultLocale;
  }

  public TeamConfig setDefaultLocale(String defaultLocale) {
    this.defaultLocale = defaultLocale;
    return this;
  }

  public void unsetDefaultLocale() {
    this.defaultLocale = null;
  }

  /** Returns true if field defaultLocale is set (has been assigned a value) and false otherwise */
  public boolean isSetDefaultLocale() {
    return this.defaultLocale != null;
  }

  public void setDefaultLocaleIsSet(boolean value) {
    if (!value) {
      this.defaultLocale = null;
    }
  }

  public boolean isRequireTemplateSetReviewFlow() {
    return this.requireTemplateSetReviewFlow;
  }

  public TeamConfig setRequireTemplateSetReviewFlow(boolean requireTemplateSetReviewFlow) {
    this.requireTemplateSetReviewFlow = requireTemplateSetReviewFlow;
    setRequireTemplateSetReviewFlowIsSet(true);
    return this;
  }

  public void unsetRequireTemplateSetReviewFlow() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUIRETEMPLATESETREVIEWFLOW_ISSET_ID);
  }

  /** Returns true if field requireTemplateSetReviewFlow is set (has been assigned a value) and false otherwise */
  public boolean isSetRequireTemplateSetReviewFlow() {
    return EncodingUtils.testBit(__isset_bitfield, __REQUIRETEMPLATESETREVIEWFLOW_ISSET_ID);
  }

  public void setRequireTemplateSetReviewFlowIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUIRETEMPLATESETREVIEWFLOW_ISSET_ID, value);
  }

  public boolean isBackendPdfGen() {
    return this.backendPdfGen;
  }

  public TeamConfig setBackendPdfGen(boolean backendPdfGen) {
    this.backendPdfGen = backendPdfGen;
    setBackendPdfGenIsSet(true);
    return this;
  }

  public void unsetBackendPdfGen() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BACKENDPDFGEN_ISSET_ID);
  }

  /** Returns true if field backendPdfGen is set (has been assigned a value) and false otherwise */
  public boolean isSetBackendPdfGen() {
    return EncodingUtils.testBit(__isset_bitfield, __BACKENDPDFGEN_ISSET_ID);
  }

  public void setBackendPdfGenIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BACKENDPDFGEN_ISSET_ID, value);
  }

  public boolean isUseWebSocket() {
    return this.useWebSocket;
  }

  public TeamConfig setUseWebSocket(boolean useWebSocket) {
    this.useWebSocket = useWebSocket;
    setUseWebSocketIsSet(true);
    return this;
  }

  public void unsetUseWebSocket() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USEWEBSOCKET_ISSET_ID);
  }

  /** Returns true if field useWebSocket is set (has been assigned a value) and false otherwise */
  public boolean isSetUseWebSocket() {
    return EncodingUtils.testBit(__isset_bitfield, __USEWEBSOCKET_ISSET_ID);
  }

  public void setUseWebSocketIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USEWEBSOCKET_ISSET_ID, value);
  }

  public String getEmailSenderOverride() {
    return this.emailSenderOverride;
  }

  public TeamConfig setEmailSenderOverride(String emailSenderOverride) {
    this.emailSenderOverride = emailSenderOverride;
    return this;
  }

  public void unsetEmailSenderOverride() {
    this.emailSenderOverride = null;
  }

  /** Returns true if field emailSenderOverride is set (has been assigned a value) and false otherwise */
  public boolean isSetEmailSenderOverride() {
    return this.emailSenderOverride != null;
  }

  public void setEmailSenderOverrideIsSet(boolean value) {
    if (!value) {
      this.emailSenderOverride = null;
    }
  }

  public boolean isEnableObserverRole() {
    return this.enableObserverRole;
  }

  public TeamConfig setEnableObserverRole(boolean enableObserverRole) {
    this.enableObserverRole = enableObserverRole;
    setEnableObserverRoleIsSet(true);
    return this;
  }

  public void unsetEnableObserverRole() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENABLEOBSERVERROLE_ISSET_ID);
  }

  /** Returns true if field enableObserverRole is set (has been assigned a value) and false otherwise */
  public boolean isSetEnableObserverRole() {
    return EncodingUtils.testBit(__isset_bitfield, __ENABLEOBSERVERROLE_ISSET_ID);
  }

  public void setEnableObserverRoleIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENABLEOBSERVERROLE_ISSET_ID, value);
  }

  public boolean isEnableTemplateDiffs() {
    return this.enableTemplateDiffs;
  }

  public TeamConfig setEnableTemplateDiffs(boolean enableTemplateDiffs) {
    this.enableTemplateDiffs = enableTemplateDiffs;
    setEnableTemplateDiffsIsSet(true);
    return this;
  }

  public void unsetEnableTemplateDiffs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENABLETEMPLATEDIFFS_ISSET_ID);
  }

  /** Returns true if field enableTemplateDiffs is set (has been assigned a value) and false otherwise */
  public boolean isSetEnableTemplateDiffs() {
    return EncodingUtils.testBit(__isset_bitfield, __ENABLETEMPLATEDIFFS_ISSET_ID);
  }

  public void setEnableTemplateDiffsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENABLETEMPLATEDIFFS_ISSET_ID, value);
  }

  public boolean isEnableTemplateViews() {
    return this.enableTemplateViews;
  }

  public TeamConfig setEnableTemplateViews(boolean enableTemplateViews) {
    this.enableTemplateViews = enableTemplateViews;
    setEnableTemplateViewsIsSet(true);
    return this;
  }

  public void unsetEnableTemplateViews() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENABLETEMPLATEVIEWS_ISSET_ID);
  }

  /** Returns true if field enableTemplateViews is set (has been assigned a value) and false otherwise */
  public boolean isSetEnableTemplateViews() {
    return EncodingUtils.testBit(__isset_bitfield, __ENABLETEMPLATEVIEWS_ISSET_ID);
  }

  public void setEnableTemplateViewsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENABLETEMPLATEVIEWS_ISSET_ID, value);
  }

  public String getProxyRegion() {
    return this.proxyRegion;
  }

  public TeamConfig setProxyRegion(String proxyRegion) {
    this.proxyRegion = proxyRegion;
    return this;
  }

  public void unsetProxyRegion() {
    this.proxyRegion = null;
  }

  /** Returns true if field proxyRegion is set (has been assigned a value) and false otherwise */
  public boolean isSetProxyRegion() {
    return this.proxyRegion != null;
  }

  public void setProxyRegionIsSet(boolean value) {
    if (!value) {
      this.proxyRegion = null;
    }
  }

  public boolean isUseParsableCamera() {
    return this.useParsableCamera;
  }

  public TeamConfig setUseParsableCamera(boolean useParsableCamera) {
    this.useParsableCamera = useParsableCamera;
    setUseParsableCameraIsSet(true);
    return this;
  }

  public void unsetUseParsableCamera() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USEPARSABLECAMERA_ISSET_ID);
  }

  /** Returns true if field useParsableCamera is set (has been assigned a value) and false otherwise */
  public boolean isSetUseParsableCamera() {
    return EncodingUtils.testBit(__isset_bitfield, __USEPARSABLECAMERA_ISSET_ID);
  }

  public void setUseParsableCameraIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USEPARSABLECAMERA_ISSET_ID, value);
  }

  public String getPreviewPdfUrl() {
    return this.previewPdfUrl;
  }

  public TeamConfig setPreviewPdfUrl(String previewPdfUrl) {
    this.previewPdfUrl = previewPdfUrl;
    return this;
  }

  public void unsetPreviewPdfUrl() {
    this.previewPdfUrl = null;
  }

  /** Returns true if field previewPdfUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetPreviewPdfUrl() {
    return this.previewPdfUrl != null;
  }

  public void setPreviewPdfUrlIsSet(boolean value) {
    if (!value) {
      this.previewPdfUrl = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case REQUIRE_REVIEW_FLOW:
      if (value == null) {
        unsetRequireReviewFlow();
      } else {
        setRequireReviewFlow((Boolean)value);
      }
      break;

    case SHOW_STEP_HIERARCHY_POS:
      if (value == null) {
        unsetShowStepHierarchyPos();
      } else {
        setShowStepHierarchyPos((Boolean)value);
      }
      break;

    case DEFAULT_LOCALE:
      if (value == null) {
        unsetDefaultLocale();
      } else {
        setDefaultLocale((String)value);
      }
      break;

    case REQUIRE_TEMPLATE_SET_REVIEW_FLOW:
      if (value == null) {
        unsetRequireTemplateSetReviewFlow();
      } else {
        setRequireTemplateSetReviewFlow((Boolean)value);
      }
      break;

    case BACKEND_PDF_GEN:
      if (value == null) {
        unsetBackendPdfGen();
      } else {
        setBackendPdfGen((Boolean)value);
      }
      break;

    case USE_WEB_SOCKET:
      if (value == null) {
        unsetUseWebSocket();
      } else {
        setUseWebSocket((Boolean)value);
      }
      break;

    case EMAIL_SENDER_OVERRIDE:
      if (value == null) {
        unsetEmailSenderOverride();
      } else {
        setEmailSenderOverride((String)value);
      }
      break;

    case ENABLE_OBSERVER_ROLE:
      if (value == null) {
        unsetEnableObserverRole();
      } else {
        setEnableObserverRole((Boolean)value);
      }
      break;

    case ENABLE_TEMPLATE_DIFFS:
      if (value == null) {
        unsetEnableTemplateDiffs();
      } else {
        setEnableTemplateDiffs((Boolean)value);
      }
      break;

    case ENABLE_TEMPLATE_VIEWS:
      if (value == null) {
        unsetEnableTemplateViews();
      } else {
        setEnableTemplateViews((Boolean)value);
      }
      break;

    case PROXY_REGION:
      if (value == null) {
        unsetProxyRegion();
      } else {
        setProxyRegion((String)value);
      }
      break;

    case USE_PARSABLE_CAMERA:
      if (value == null) {
        unsetUseParsableCamera();
      } else {
        setUseParsableCamera((Boolean)value);
      }
      break;

    case PREVIEW_PDF_URL:
      if (value == null) {
        unsetPreviewPdfUrl();
      } else {
        setPreviewPdfUrl((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case REQUIRE_REVIEW_FLOW:
      return isRequireReviewFlow();

    case SHOW_STEP_HIERARCHY_POS:
      return isShowStepHierarchyPos();

    case DEFAULT_LOCALE:
      return getDefaultLocale();

    case REQUIRE_TEMPLATE_SET_REVIEW_FLOW:
      return isRequireTemplateSetReviewFlow();

    case BACKEND_PDF_GEN:
      return isBackendPdfGen();

    case USE_WEB_SOCKET:
      return isUseWebSocket();

    case EMAIL_SENDER_OVERRIDE:
      return getEmailSenderOverride();

    case ENABLE_OBSERVER_ROLE:
      return isEnableObserverRole();

    case ENABLE_TEMPLATE_DIFFS:
      return isEnableTemplateDiffs();

    case ENABLE_TEMPLATE_VIEWS:
      return isEnableTemplateViews();

    case PROXY_REGION:
      return getProxyRegion();

    case USE_PARSABLE_CAMERA:
      return isUseParsableCamera();

    case PREVIEW_PDF_URL:
      return getPreviewPdfUrl();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case REQUIRE_REVIEW_FLOW:
      return isSetRequireReviewFlow();
    case SHOW_STEP_HIERARCHY_POS:
      return isSetShowStepHierarchyPos();
    case DEFAULT_LOCALE:
      return isSetDefaultLocale();
    case REQUIRE_TEMPLATE_SET_REVIEW_FLOW:
      return isSetRequireTemplateSetReviewFlow();
    case BACKEND_PDF_GEN:
      return isSetBackendPdfGen();
    case USE_WEB_SOCKET:
      return isSetUseWebSocket();
    case EMAIL_SENDER_OVERRIDE:
      return isSetEmailSenderOverride();
    case ENABLE_OBSERVER_ROLE:
      return isSetEnableObserverRole();
    case ENABLE_TEMPLATE_DIFFS:
      return isSetEnableTemplateDiffs();
    case ENABLE_TEMPLATE_VIEWS:
      return isSetEnableTemplateViews();
    case PROXY_REGION:
      return isSetProxyRegion();
    case USE_PARSABLE_CAMERA:
      return isSetUseParsableCamera();
    case PREVIEW_PDF_URL:
      return isSetPreviewPdfUrl();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TeamConfig)
      return this.equals((TeamConfig)that);
    return false;
  }

  public boolean equals(TeamConfig that) {
    if (that == null)
      return false;

    boolean this_present_requireReviewFlow = true;
    boolean that_present_requireReviewFlow = true;
    if (this_present_requireReviewFlow || that_present_requireReviewFlow) {
      if (!(this_present_requireReviewFlow && that_present_requireReviewFlow))
        return false;
      if (this.requireReviewFlow != that.requireReviewFlow)
        return false;
    }

    boolean this_present_showStepHierarchyPos = true && this.isSetShowStepHierarchyPos();
    boolean that_present_showStepHierarchyPos = true && that.isSetShowStepHierarchyPos();
    if (this_present_showStepHierarchyPos || that_present_showStepHierarchyPos) {
      if (!(this_present_showStepHierarchyPos && that_present_showStepHierarchyPos))
        return false;
      if (this.showStepHierarchyPos != that.showStepHierarchyPos)
        return false;
    }

    boolean this_present_defaultLocale = true && this.isSetDefaultLocale();
    boolean that_present_defaultLocale = true && that.isSetDefaultLocale();
    if (this_present_defaultLocale || that_present_defaultLocale) {
      if (!(this_present_defaultLocale && that_present_defaultLocale))
        return false;
      if (!this.defaultLocale.equals(that.defaultLocale))
        return false;
    }

    boolean this_present_requireTemplateSetReviewFlow = true;
    boolean that_present_requireTemplateSetReviewFlow = true;
    if (this_present_requireTemplateSetReviewFlow || that_present_requireTemplateSetReviewFlow) {
      if (!(this_present_requireTemplateSetReviewFlow && that_present_requireTemplateSetReviewFlow))
        return false;
      if (this.requireTemplateSetReviewFlow != that.requireTemplateSetReviewFlow)
        return false;
    }

    boolean this_present_backendPdfGen = true;
    boolean that_present_backendPdfGen = true;
    if (this_present_backendPdfGen || that_present_backendPdfGen) {
      if (!(this_present_backendPdfGen && that_present_backendPdfGen))
        return false;
      if (this.backendPdfGen != that.backendPdfGen)
        return false;
    }

    boolean this_present_useWebSocket = true;
    boolean that_present_useWebSocket = true;
    if (this_present_useWebSocket || that_present_useWebSocket) {
      if (!(this_present_useWebSocket && that_present_useWebSocket))
        return false;
      if (this.useWebSocket != that.useWebSocket)
        return false;
    }

    boolean this_present_emailSenderOverride = true && this.isSetEmailSenderOverride();
    boolean that_present_emailSenderOverride = true && that.isSetEmailSenderOverride();
    if (this_present_emailSenderOverride || that_present_emailSenderOverride) {
      if (!(this_present_emailSenderOverride && that_present_emailSenderOverride))
        return false;
      if (!this.emailSenderOverride.equals(that.emailSenderOverride))
        return false;
    }

    boolean this_present_enableObserverRole = true;
    boolean that_present_enableObserverRole = true;
    if (this_present_enableObserverRole || that_present_enableObserverRole) {
      if (!(this_present_enableObserverRole && that_present_enableObserverRole))
        return false;
      if (this.enableObserverRole != that.enableObserverRole)
        return false;
    }

    boolean this_present_enableTemplateDiffs = true && this.isSetEnableTemplateDiffs();
    boolean that_present_enableTemplateDiffs = true && that.isSetEnableTemplateDiffs();
    if (this_present_enableTemplateDiffs || that_present_enableTemplateDiffs) {
      if (!(this_present_enableTemplateDiffs && that_present_enableTemplateDiffs))
        return false;
      if (this.enableTemplateDiffs != that.enableTemplateDiffs)
        return false;
    }

    boolean this_present_enableTemplateViews = true && this.isSetEnableTemplateViews();
    boolean that_present_enableTemplateViews = true && that.isSetEnableTemplateViews();
    if (this_present_enableTemplateViews || that_present_enableTemplateViews) {
      if (!(this_present_enableTemplateViews && that_present_enableTemplateViews))
        return false;
      if (this.enableTemplateViews != that.enableTemplateViews)
        return false;
    }

    boolean this_present_proxyRegion = true && this.isSetProxyRegion();
    boolean that_present_proxyRegion = true && that.isSetProxyRegion();
    if (this_present_proxyRegion || that_present_proxyRegion) {
      if (!(this_present_proxyRegion && that_present_proxyRegion))
        return false;
      if (!this.proxyRegion.equals(that.proxyRegion))
        return false;
    }

    boolean this_present_useParsableCamera = true && this.isSetUseParsableCamera();
    boolean that_present_useParsableCamera = true && that.isSetUseParsableCamera();
    if (this_present_useParsableCamera || that_present_useParsableCamera) {
      if (!(this_present_useParsableCamera && that_present_useParsableCamera))
        return false;
      if (this.useParsableCamera != that.useParsableCamera)
        return false;
    }

    boolean this_present_previewPdfUrl = true && this.isSetPreviewPdfUrl();
    boolean that_present_previewPdfUrl = true && that.isSetPreviewPdfUrl();
    if (this_present_previewPdfUrl || that_present_previewPdfUrl) {
      if (!(this_present_previewPdfUrl && that_present_previewPdfUrl))
        return false;
      if (!this.previewPdfUrl.equals(that.previewPdfUrl))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_requireReviewFlow = true;
    list.add(present_requireReviewFlow);
    if (present_requireReviewFlow)
      list.add(requireReviewFlow);

    boolean present_showStepHierarchyPos = true && (isSetShowStepHierarchyPos());
    list.add(present_showStepHierarchyPos);
    if (present_showStepHierarchyPos)
      list.add(showStepHierarchyPos);

    boolean present_defaultLocale = true && (isSetDefaultLocale());
    list.add(present_defaultLocale);
    if (present_defaultLocale)
      list.add(defaultLocale);

    boolean present_requireTemplateSetReviewFlow = true;
    list.add(present_requireTemplateSetReviewFlow);
    if (present_requireTemplateSetReviewFlow)
      list.add(requireTemplateSetReviewFlow);

    boolean present_backendPdfGen = true;
    list.add(present_backendPdfGen);
    if (present_backendPdfGen)
      list.add(backendPdfGen);

    boolean present_useWebSocket = true;
    list.add(present_useWebSocket);
    if (present_useWebSocket)
      list.add(useWebSocket);

    boolean present_emailSenderOverride = true && (isSetEmailSenderOverride());
    list.add(present_emailSenderOverride);
    if (present_emailSenderOverride)
      list.add(emailSenderOverride);

    boolean present_enableObserverRole = true;
    list.add(present_enableObserverRole);
    if (present_enableObserverRole)
      list.add(enableObserverRole);

    boolean present_enableTemplateDiffs = true && (isSetEnableTemplateDiffs());
    list.add(present_enableTemplateDiffs);
    if (present_enableTemplateDiffs)
      list.add(enableTemplateDiffs);

    boolean present_enableTemplateViews = true && (isSetEnableTemplateViews());
    list.add(present_enableTemplateViews);
    if (present_enableTemplateViews)
      list.add(enableTemplateViews);

    boolean present_proxyRegion = true && (isSetProxyRegion());
    list.add(present_proxyRegion);
    if (present_proxyRegion)
      list.add(proxyRegion);

    boolean present_useParsableCamera = true && (isSetUseParsableCamera());
    list.add(present_useParsableCamera);
    if (present_useParsableCamera)
      list.add(useParsableCamera);

    boolean present_previewPdfUrl = true && (isSetPreviewPdfUrl());
    list.add(present_previewPdfUrl);
    if (present_previewPdfUrl)
      list.add(previewPdfUrl);

    return list.hashCode();
  }

  @Override
  public int compareTo(TeamConfig other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetRequireReviewFlow()).compareTo(other.isSetRequireReviewFlow());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequireReviewFlow()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requireReviewFlow, other.requireReviewFlow);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShowStepHierarchyPos()).compareTo(other.isSetShowStepHierarchyPos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShowStepHierarchyPos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.showStepHierarchyPos, other.showStepHierarchyPos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDefaultLocale()).compareTo(other.isSetDefaultLocale());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDefaultLocale()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.defaultLocale, other.defaultLocale);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequireTemplateSetReviewFlow()).compareTo(other.isSetRequireTemplateSetReviewFlow());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequireTemplateSetReviewFlow()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requireTemplateSetReviewFlow, other.requireTemplateSetReviewFlow);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBackendPdfGen()).compareTo(other.isSetBackendPdfGen());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBackendPdfGen()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.backendPdfGen, other.backendPdfGen);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUseWebSocket()).compareTo(other.isSetUseWebSocket());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUseWebSocket()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.useWebSocket, other.useWebSocket);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEmailSenderOverride()).compareTo(other.isSetEmailSenderOverride());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmailSenderOverride()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.emailSenderOverride, other.emailSenderOverride);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEnableObserverRole()).compareTo(other.isSetEnableObserverRole());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnableObserverRole()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enableObserverRole, other.enableObserverRole);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEnableTemplateDiffs()).compareTo(other.isSetEnableTemplateDiffs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnableTemplateDiffs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enableTemplateDiffs, other.enableTemplateDiffs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEnableTemplateViews()).compareTo(other.isSetEnableTemplateViews());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnableTemplateViews()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enableTemplateViews, other.enableTemplateViews);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProxyRegion()).compareTo(other.isSetProxyRegion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProxyRegion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.proxyRegion, other.proxyRegion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUseParsableCamera()).compareTo(other.isSetUseParsableCamera());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUseParsableCamera()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.useParsableCamera, other.useParsableCamera);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPreviewPdfUrl()).compareTo(other.isSetPreviewPdfUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPreviewPdfUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.previewPdfUrl, other.previewPdfUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TeamConfig(");
    boolean first = true;

    sb.append("requireReviewFlow:");
    sb.append(this.requireReviewFlow);
    first = false;
    if (isSetShowStepHierarchyPos()) {
      if (!first) sb.append(", ");
      sb.append("showStepHierarchyPos:");
      sb.append(this.showStepHierarchyPos);
      first = false;
    }
    if (isSetDefaultLocale()) {
      if (!first) sb.append(", ");
      sb.append("defaultLocale:");
      if (this.defaultLocale == null) {
        sb.append("null");
      } else {
        sb.append(this.defaultLocale);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("requireTemplateSetReviewFlow:");
    sb.append(this.requireTemplateSetReviewFlow);
    first = false;
    if (!first) sb.append(", ");
    sb.append("backendPdfGen:");
    sb.append(this.backendPdfGen);
    first = false;
    if (!first) sb.append(", ");
    sb.append("useWebSocket:");
    sb.append(this.useWebSocket);
    first = false;
    if (isSetEmailSenderOverride()) {
      if (!first) sb.append(", ");
      sb.append("emailSenderOverride:");
      if (this.emailSenderOverride == null) {
        sb.append("null");
      } else {
        sb.append(this.emailSenderOverride);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("enableObserverRole:");
    sb.append(this.enableObserverRole);
    first = false;
    if (isSetEnableTemplateDiffs()) {
      if (!first) sb.append(", ");
      sb.append("enableTemplateDiffs:");
      sb.append(this.enableTemplateDiffs);
      first = false;
    }
    if (isSetEnableTemplateViews()) {
      if (!first) sb.append(", ");
      sb.append("enableTemplateViews:");
      sb.append(this.enableTemplateViews);
      first = false;
    }
    if (isSetProxyRegion()) {
      if (!first) sb.append(", ");
      sb.append("proxyRegion:");
      if (this.proxyRegion == null) {
        sb.append("null");
      } else {
        sb.append(this.proxyRegion);
      }
      first = false;
    }
    if (isSetUseParsableCamera()) {
      if (!first) sb.append(", ");
      sb.append("useParsableCamera:");
      sb.append(this.useParsableCamera);
      first = false;
    }
    if (isSetPreviewPdfUrl()) {
      if (!first) sb.append(", ");
      sb.append("previewPdfUrl:");
      if (this.previewPdfUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.previewPdfUrl);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TeamConfigStandardSchemeFactory implements SchemeFactory {
    public TeamConfigStandardScheme getScheme() {
      return new TeamConfigStandardScheme();
    }
  }

  private static class TeamConfigStandardScheme extends StandardScheme<TeamConfig> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TeamConfig struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // REQUIRE_REVIEW_FLOW
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.requireReviewFlow = iprot.readBool();
              struct.setRequireReviewFlowIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SHOW_STEP_HIERARCHY_POS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.showStepHierarchyPos = iprot.readBool();
              struct.setShowStepHierarchyPosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DEFAULT_LOCALE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.defaultLocale = iprot.readString();
              struct.setDefaultLocaleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // REQUIRE_TEMPLATE_SET_REVIEW_FLOW
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.requireTemplateSetReviewFlow = iprot.readBool();
              struct.setRequireTemplateSetReviewFlowIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BACKEND_PDF_GEN
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.backendPdfGen = iprot.readBool();
              struct.setBackendPdfGenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // USE_WEB_SOCKET
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.useWebSocket = iprot.readBool();
              struct.setUseWebSocketIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // EMAIL_SENDER_OVERRIDE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.emailSenderOverride = iprot.readString();
              struct.setEmailSenderOverrideIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ENABLE_OBSERVER_ROLE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.enableObserverRole = iprot.readBool();
              struct.setEnableObserverRoleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ENABLE_TEMPLATE_DIFFS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.enableTemplateDiffs = iprot.readBool();
              struct.setEnableTemplateDiffsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ENABLE_TEMPLATE_VIEWS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.enableTemplateViews = iprot.readBool();
              struct.setEnableTemplateViewsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // PROXY_REGION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.proxyRegion = iprot.readString();
              struct.setProxyRegionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // USE_PARSABLE_CAMERA
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.useParsableCamera = iprot.readBool();
              struct.setUseParsableCameraIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // PREVIEW_PDF_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.previewPdfUrl = iprot.readString();
              struct.setPreviewPdfUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TeamConfig struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(REQUIRE_REVIEW_FLOW_FIELD_DESC);
      oprot.writeBool(struct.requireReviewFlow);
      oprot.writeFieldEnd();
      if (struct.isSetShowStepHierarchyPos()) {
        oprot.writeFieldBegin(SHOW_STEP_HIERARCHY_POS_FIELD_DESC);
        oprot.writeBool(struct.showStepHierarchyPos);
        oprot.writeFieldEnd();
      }
      if (struct.defaultLocale != null) {
        if (struct.isSetDefaultLocale()) {
          oprot.writeFieldBegin(DEFAULT_LOCALE_FIELD_DESC);
          oprot.writeString(struct.defaultLocale);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(REQUIRE_TEMPLATE_SET_REVIEW_FLOW_FIELD_DESC);
      oprot.writeBool(struct.requireTemplateSetReviewFlow);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BACKEND_PDF_GEN_FIELD_DESC);
      oprot.writeBool(struct.backendPdfGen);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(USE_WEB_SOCKET_FIELD_DESC);
      oprot.writeBool(struct.useWebSocket);
      oprot.writeFieldEnd();
      if (struct.emailSenderOverride != null) {
        if (struct.isSetEmailSenderOverride()) {
          oprot.writeFieldBegin(EMAIL_SENDER_OVERRIDE_FIELD_DESC);
          oprot.writeString(struct.emailSenderOverride);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(ENABLE_OBSERVER_ROLE_FIELD_DESC);
      oprot.writeBool(struct.enableObserverRole);
      oprot.writeFieldEnd();
      if (struct.isSetEnableTemplateDiffs()) {
        oprot.writeFieldBegin(ENABLE_TEMPLATE_DIFFS_FIELD_DESC);
        oprot.writeBool(struct.enableTemplateDiffs);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEnableTemplateViews()) {
        oprot.writeFieldBegin(ENABLE_TEMPLATE_VIEWS_FIELD_DESC);
        oprot.writeBool(struct.enableTemplateViews);
        oprot.writeFieldEnd();
      }
      if (struct.proxyRegion != null) {
        if (struct.isSetProxyRegion()) {
          oprot.writeFieldBegin(PROXY_REGION_FIELD_DESC);
          oprot.writeString(struct.proxyRegion);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetUseParsableCamera()) {
        oprot.writeFieldBegin(USE_PARSABLE_CAMERA_FIELD_DESC);
        oprot.writeBool(struct.useParsableCamera);
        oprot.writeFieldEnd();
      }
      if (struct.previewPdfUrl != null) {
        if (struct.isSetPreviewPdfUrl()) {
          oprot.writeFieldBegin(PREVIEW_PDF_URL_FIELD_DESC);
          oprot.writeString(struct.previewPdfUrl);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

}

