/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wi.director.thrift.v1.job;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * Execution data for a step group
 */
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class StepGroupExecutionData implements org.apache.thrift.TBase<StepGroupExecutionData, StepGroupExecutionData._Fields>, java.io.Serializable, Cloneable, Comparable<StepGroupExecutionData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StepGroupExecutionData");

  private static final org.apache.thrift.protocol.TField STEP_GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("stepGroupId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField JOB_BASE_STEP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("jobBaseStepId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CONDITIONAL_IS_YES_FIELD_DESC = new org.apache.thrift.protocol.TField("conditionalIsYes", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField CONDITIONAL_LAST_UPDATED_BY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("conditionalLastUpdatedById", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CONDITIONAL_LAST_UPDATED_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("conditionalLastUpdatedAt", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField SEQ_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("seqId", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField IS_NOT_APPLICABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("isNotApplicable", org.apache.thrift.protocol.TType.BOOL, (short)8);
  private static final org.apache.thrift.protocol.TField IS_NOT_APPLICABLE_LAST_UPDATED_BY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("isNotApplicableLastUpdatedById", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField IS_NOT_APPLICABLE_LAST_UPDATED_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("isNotApplicableLastUpdatedAt", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField DEVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceId", org.apache.thrift.protocol.TType.STRING, (short)1000);
  private static final org.apache.thrift.protocol.TField DEVICE_SEQ_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceSeqId", org.apache.thrift.protocol.TType.I64, (short)1001);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new StepGroupExecutionDataStandardSchemeFactory());
  }

  public String stepGroupId; // required
  public String jobBaseStepId; // required
  public boolean conditionalIsYes; // optional
  public String conditionalLastUpdatedById; // optional
  public long conditionalLastUpdatedAt; // optional
  public long seqId; // required
  public boolean isNotApplicable; // optional
  public String isNotApplicableLastUpdatedById; // optional
  public long isNotApplicableLastUpdatedAt; // optional
  /**
   * For Mesh
   */
  public String deviceId; // optional
  public long deviceSeqId; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STEP_GROUP_ID((short)1, "stepGroupId"),
    JOB_BASE_STEP_ID((short)2, "jobBaseStepId"),
    CONDITIONAL_IS_YES((short)3, "conditionalIsYes"),
    CONDITIONAL_LAST_UPDATED_BY_ID((short)4, "conditionalLastUpdatedById"),
    CONDITIONAL_LAST_UPDATED_AT((short)5, "conditionalLastUpdatedAt"),
    SEQ_ID((short)6, "seqId"),
    IS_NOT_APPLICABLE((short)8, "isNotApplicable"),
    IS_NOT_APPLICABLE_LAST_UPDATED_BY_ID((short)9, "isNotApplicableLastUpdatedById"),
    IS_NOT_APPLICABLE_LAST_UPDATED_AT((short)10, "isNotApplicableLastUpdatedAt"),
    /**
     * For Mesh
     */
    DEVICE_ID((short)1000, "deviceId"),
    DEVICE_SEQ_ID((short)1001, "deviceSeqId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STEP_GROUP_ID
          return STEP_GROUP_ID;
        case 2: // JOB_BASE_STEP_ID
          return JOB_BASE_STEP_ID;
        case 3: // CONDITIONAL_IS_YES
          return CONDITIONAL_IS_YES;
        case 4: // CONDITIONAL_LAST_UPDATED_BY_ID
          return CONDITIONAL_LAST_UPDATED_BY_ID;
        case 5: // CONDITIONAL_LAST_UPDATED_AT
          return CONDITIONAL_LAST_UPDATED_AT;
        case 6: // SEQ_ID
          return SEQ_ID;
        case 8: // IS_NOT_APPLICABLE
          return IS_NOT_APPLICABLE;
        case 9: // IS_NOT_APPLICABLE_LAST_UPDATED_BY_ID
          return IS_NOT_APPLICABLE_LAST_UPDATED_BY_ID;
        case 10: // IS_NOT_APPLICABLE_LAST_UPDATED_AT
          return IS_NOT_APPLICABLE_LAST_UPDATED_AT;
        case 1000: // DEVICE_ID
          return DEVICE_ID;
        case 1001: // DEVICE_SEQ_ID
          return DEVICE_SEQ_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CONDITIONALISYES_ISSET_ID = 0;
  private static final int __CONDITIONALLASTUPDATEDAT_ISSET_ID = 1;
  private static final int __SEQID_ISSET_ID = 2;
  private static final int __ISNOTAPPLICABLE_ISSET_ID = 3;
  private static final int __ISNOTAPPLICABLELASTUPDATEDAT_ISSET_ID = 4;
  private static final int __DEVICESEQID_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.CONDITIONAL_IS_YES,_Fields.CONDITIONAL_LAST_UPDATED_BY_ID,_Fields.CONDITIONAL_LAST_UPDATED_AT,_Fields.IS_NOT_APPLICABLE,_Fields.IS_NOT_APPLICABLE_LAST_UPDATED_BY_ID,_Fields.IS_NOT_APPLICABLE_LAST_UPDATED_AT,_Fields.DEVICE_ID,_Fields.DEVICE_SEQ_ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STEP_GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("stepGroupId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.JOB_BASE_STEP_ID, new org.apache.thrift.meta_data.FieldMetaData("jobBaseStepId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONDITIONAL_IS_YES, new org.apache.thrift.meta_data.FieldMetaData("conditionalIsYes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CONDITIONAL_LAST_UPDATED_BY_ID, new org.apache.thrift.meta_data.FieldMetaData("conditionalLastUpdatedById", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONDITIONAL_LAST_UPDATED_AT, new org.apache.thrift.meta_data.FieldMetaData("conditionalLastUpdatedAt", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SEQ_ID, new org.apache.thrift.meta_data.FieldMetaData("seqId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.IS_NOT_APPLICABLE, new org.apache.thrift.meta_data.FieldMetaData("isNotApplicable", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_NOT_APPLICABLE_LAST_UPDATED_BY_ID, new org.apache.thrift.meta_data.FieldMetaData("isNotApplicableLastUpdatedById", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_NOT_APPLICABLE_LAST_UPDATED_AT, new org.apache.thrift.meta_data.FieldMetaData("isNotApplicableLastUpdatedAt", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DEVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("deviceId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEVICE_SEQ_ID, new org.apache.thrift.meta_data.FieldMetaData("deviceSeqId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StepGroupExecutionData.class, metaDataMap);
  }

  public StepGroupExecutionData() {
  }

  public StepGroupExecutionData(
    String stepGroupId,
    String jobBaseStepId,
    long seqId)
  {
    this();
    this.stepGroupId = stepGroupId;
    this.jobBaseStepId = jobBaseStepId;
    this.seqId = seqId;
    setSeqIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StepGroupExecutionData(StepGroupExecutionData other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetStepGroupId()) {
      this.stepGroupId = other.stepGroupId;
    }
    if (other.isSetJobBaseStepId()) {
      this.jobBaseStepId = other.jobBaseStepId;
    }
    this.conditionalIsYes = other.conditionalIsYes;
    if (other.isSetConditionalLastUpdatedById()) {
      this.conditionalLastUpdatedById = other.conditionalLastUpdatedById;
    }
    this.conditionalLastUpdatedAt = other.conditionalLastUpdatedAt;
    this.seqId = other.seqId;
    this.isNotApplicable = other.isNotApplicable;
    if (other.isSetIsNotApplicableLastUpdatedById()) {
      this.isNotApplicableLastUpdatedById = other.isNotApplicableLastUpdatedById;
    }
    this.isNotApplicableLastUpdatedAt = other.isNotApplicableLastUpdatedAt;
    if (other.isSetDeviceId()) {
      this.deviceId = other.deviceId;
    }
    this.deviceSeqId = other.deviceSeqId;
  }

  public StepGroupExecutionData deepCopy() {
    return new StepGroupExecutionData(this);
  }

  @Override
  public void clear() {
    this.stepGroupId = null;
    this.jobBaseStepId = null;
    setConditionalIsYesIsSet(false);
    this.conditionalIsYes = false;
    this.conditionalLastUpdatedById = null;
    setConditionalLastUpdatedAtIsSet(false);
    this.conditionalLastUpdatedAt = 0;
    setSeqIdIsSet(false);
    this.seqId = 0;
    setIsNotApplicableIsSet(false);
    this.isNotApplicable = false;
    this.isNotApplicableLastUpdatedById = null;
    setIsNotApplicableLastUpdatedAtIsSet(false);
    this.isNotApplicableLastUpdatedAt = 0;
    this.deviceId = null;
    setDeviceSeqIdIsSet(false);
    this.deviceSeqId = 0;
  }

  public String getStepGroupId() {
    return this.stepGroupId;
  }

  public StepGroupExecutionData setStepGroupId(String stepGroupId) {
    this.stepGroupId = stepGroupId;
    return this;
  }

  public void unsetStepGroupId() {
    this.stepGroupId = null;
  }

  /** Returns true if field stepGroupId is set (has been assigned a value) and false otherwise */
  public boolean isSetStepGroupId() {
    return this.stepGroupId != null;
  }

  public void setStepGroupIdIsSet(boolean value) {
    if (!value) {
      this.stepGroupId = null;
    }
  }

  public String getJobBaseStepId() {
    return this.jobBaseStepId;
  }

  public StepGroupExecutionData setJobBaseStepId(String jobBaseStepId) {
    this.jobBaseStepId = jobBaseStepId;
    return this;
  }

  public void unsetJobBaseStepId() {
    this.jobBaseStepId = null;
  }

  /** Returns true if field jobBaseStepId is set (has been assigned a value) and false otherwise */
  public boolean isSetJobBaseStepId() {
    return this.jobBaseStepId != null;
  }

  public void setJobBaseStepIdIsSet(boolean value) {
    if (!value) {
      this.jobBaseStepId = null;
    }
  }

  public boolean isConditionalIsYes() {
    return this.conditionalIsYes;
  }

  public StepGroupExecutionData setConditionalIsYes(boolean conditionalIsYes) {
    this.conditionalIsYes = conditionalIsYes;
    setConditionalIsYesIsSet(true);
    return this;
  }

  public void unsetConditionalIsYes() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONDITIONALISYES_ISSET_ID);
  }

  /** Returns true if field conditionalIsYes is set (has been assigned a value) and false otherwise */
  public boolean isSetConditionalIsYes() {
    return EncodingUtils.testBit(__isset_bitfield, __CONDITIONALISYES_ISSET_ID);
  }

  public void setConditionalIsYesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONDITIONALISYES_ISSET_ID, value);
  }

  public String getConditionalLastUpdatedById() {
    return this.conditionalLastUpdatedById;
  }

  public StepGroupExecutionData setConditionalLastUpdatedById(String conditionalLastUpdatedById) {
    this.conditionalLastUpdatedById = conditionalLastUpdatedById;
    return this;
  }

  public void unsetConditionalLastUpdatedById() {
    this.conditionalLastUpdatedById = null;
  }

  /** Returns true if field conditionalLastUpdatedById is set (has been assigned a value) and false otherwise */
  public boolean isSetConditionalLastUpdatedById() {
    return this.conditionalLastUpdatedById != null;
  }

  public void setConditionalLastUpdatedByIdIsSet(boolean value) {
    if (!value) {
      this.conditionalLastUpdatedById = null;
    }
  }

  public long getConditionalLastUpdatedAt() {
    return this.conditionalLastUpdatedAt;
  }

  public StepGroupExecutionData setConditionalLastUpdatedAt(long conditionalLastUpdatedAt) {
    this.conditionalLastUpdatedAt = conditionalLastUpdatedAt;
    setConditionalLastUpdatedAtIsSet(true);
    return this;
  }

  public void unsetConditionalLastUpdatedAt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONDITIONALLASTUPDATEDAT_ISSET_ID);
  }

  /** Returns true if field conditionalLastUpdatedAt is set (has been assigned a value) and false otherwise */
  public boolean isSetConditionalLastUpdatedAt() {
    return EncodingUtils.testBit(__isset_bitfield, __CONDITIONALLASTUPDATEDAT_ISSET_ID);
  }

  public void setConditionalLastUpdatedAtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONDITIONALLASTUPDATEDAT_ISSET_ID, value);
  }

  public long getSeqId() {
    return this.seqId;
  }

  public StepGroupExecutionData setSeqId(long seqId) {
    this.seqId = seqId;
    setSeqIdIsSet(true);
    return this;
  }

  public void unsetSeqId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEQID_ISSET_ID);
  }

  /** Returns true if field seqId is set (has been assigned a value) and false otherwise */
  public boolean isSetSeqId() {
    return EncodingUtils.testBit(__isset_bitfield, __SEQID_ISSET_ID);
  }

  public void setSeqIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEQID_ISSET_ID, value);
  }

  public boolean isIsNotApplicable() {
    return this.isNotApplicable;
  }

  public StepGroupExecutionData setIsNotApplicable(boolean isNotApplicable) {
    this.isNotApplicable = isNotApplicable;
    setIsNotApplicableIsSet(true);
    return this;
  }

  public void unsetIsNotApplicable() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISNOTAPPLICABLE_ISSET_ID);
  }

  /** Returns true if field isNotApplicable is set (has been assigned a value) and false otherwise */
  public boolean isSetIsNotApplicable() {
    return EncodingUtils.testBit(__isset_bitfield, __ISNOTAPPLICABLE_ISSET_ID);
  }

  public void setIsNotApplicableIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISNOTAPPLICABLE_ISSET_ID, value);
  }

  public String getIsNotApplicableLastUpdatedById() {
    return this.isNotApplicableLastUpdatedById;
  }

  public StepGroupExecutionData setIsNotApplicableLastUpdatedById(String isNotApplicableLastUpdatedById) {
    this.isNotApplicableLastUpdatedById = isNotApplicableLastUpdatedById;
    return this;
  }

  public void unsetIsNotApplicableLastUpdatedById() {
    this.isNotApplicableLastUpdatedById = null;
  }

  /** Returns true if field isNotApplicableLastUpdatedById is set (has been assigned a value) and false otherwise */
  public boolean isSetIsNotApplicableLastUpdatedById() {
    return this.isNotApplicableLastUpdatedById != null;
  }

  public void setIsNotApplicableLastUpdatedByIdIsSet(boolean value) {
    if (!value) {
      this.isNotApplicableLastUpdatedById = null;
    }
  }

  public long getIsNotApplicableLastUpdatedAt() {
    return this.isNotApplicableLastUpdatedAt;
  }

  public StepGroupExecutionData setIsNotApplicableLastUpdatedAt(long isNotApplicableLastUpdatedAt) {
    this.isNotApplicableLastUpdatedAt = isNotApplicableLastUpdatedAt;
    setIsNotApplicableLastUpdatedAtIsSet(true);
    return this;
  }

  public void unsetIsNotApplicableLastUpdatedAt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISNOTAPPLICABLELASTUPDATEDAT_ISSET_ID);
  }

  /** Returns true if field isNotApplicableLastUpdatedAt is set (has been assigned a value) and false otherwise */
  public boolean isSetIsNotApplicableLastUpdatedAt() {
    return EncodingUtils.testBit(__isset_bitfield, __ISNOTAPPLICABLELASTUPDATEDAT_ISSET_ID);
  }

  public void setIsNotApplicableLastUpdatedAtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISNOTAPPLICABLELASTUPDATEDAT_ISSET_ID, value);
  }

  /**
   * For Mesh
   */
  public String getDeviceId() {
    return this.deviceId;
  }

  /**
   * For Mesh
   */
  public StepGroupExecutionData setDeviceId(String deviceId) {
    this.deviceId = deviceId;
    return this;
  }

  public void unsetDeviceId() {
    this.deviceId = null;
  }

  /** Returns true if field deviceId is set (has been assigned a value) and false otherwise */
  public boolean isSetDeviceId() {
    return this.deviceId != null;
  }

  public void setDeviceIdIsSet(boolean value) {
    if (!value) {
      this.deviceId = null;
    }
  }

  public long getDeviceSeqId() {
    return this.deviceSeqId;
  }

  public StepGroupExecutionData setDeviceSeqId(long deviceSeqId) {
    this.deviceSeqId = deviceSeqId;
    setDeviceSeqIdIsSet(true);
    return this;
  }

  public void unsetDeviceSeqId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEVICESEQID_ISSET_ID);
  }

  /** Returns true if field deviceSeqId is set (has been assigned a value) and false otherwise */
  public boolean isSetDeviceSeqId() {
    return EncodingUtils.testBit(__isset_bitfield, __DEVICESEQID_ISSET_ID);
  }

  public void setDeviceSeqIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEVICESEQID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STEP_GROUP_ID:
      if (value == null) {
        unsetStepGroupId();
      } else {
        setStepGroupId((String)value);
      }
      break;

    case JOB_BASE_STEP_ID:
      if (value == null) {
        unsetJobBaseStepId();
      } else {
        setJobBaseStepId((String)value);
      }
      break;

    case CONDITIONAL_IS_YES:
      if (value == null) {
        unsetConditionalIsYes();
      } else {
        setConditionalIsYes((Boolean)value);
      }
      break;

    case CONDITIONAL_LAST_UPDATED_BY_ID:
      if (value == null) {
        unsetConditionalLastUpdatedById();
      } else {
        setConditionalLastUpdatedById((String)value);
      }
      break;

    case CONDITIONAL_LAST_UPDATED_AT:
      if (value == null) {
        unsetConditionalLastUpdatedAt();
      } else {
        setConditionalLastUpdatedAt((Long)value);
      }
      break;

    case SEQ_ID:
      if (value == null) {
        unsetSeqId();
      } else {
        setSeqId((Long)value);
      }
      break;

    case IS_NOT_APPLICABLE:
      if (value == null) {
        unsetIsNotApplicable();
      } else {
        setIsNotApplicable((Boolean)value);
      }
      break;

    case IS_NOT_APPLICABLE_LAST_UPDATED_BY_ID:
      if (value == null) {
        unsetIsNotApplicableLastUpdatedById();
      } else {
        setIsNotApplicableLastUpdatedById((String)value);
      }
      break;

    case IS_NOT_APPLICABLE_LAST_UPDATED_AT:
      if (value == null) {
        unsetIsNotApplicableLastUpdatedAt();
      } else {
        setIsNotApplicableLastUpdatedAt((Long)value);
      }
      break;

    case DEVICE_ID:
      if (value == null) {
        unsetDeviceId();
      } else {
        setDeviceId((String)value);
      }
      break;

    case DEVICE_SEQ_ID:
      if (value == null) {
        unsetDeviceSeqId();
      } else {
        setDeviceSeqId((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STEP_GROUP_ID:
      return getStepGroupId();

    case JOB_BASE_STEP_ID:
      return getJobBaseStepId();

    case CONDITIONAL_IS_YES:
      return isConditionalIsYes();

    case CONDITIONAL_LAST_UPDATED_BY_ID:
      return getConditionalLastUpdatedById();

    case CONDITIONAL_LAST_UPDATED_AT:
      return getConditionalLastUpdatedAt();

    case SEQ_ID:
      return getSeqId();

    case IS_NOT_APPLICABLE:
      return isIsNotApplicable();

    case IS_NOT_APPLICABLE_LAST_UPDATED_BY_ID:
      return getIsNotApplicableLastUpdatedById();

    case IS_NOT_APPLICABLE_LAST_UPDATED_AT:
      return getIsNotApplicableLastUpdatedAt();

    case DEVICE_ID:
      return getDeviceId();

    case DEVICE_SEQ_ID:
      return getDeviceSeqId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STEP_GROUP_ID:
      return isSetStepGroupId();
    case JOB_BASE_STEP_ID:
      return isSetJobBaseStepId();
    case CONDITIONAL_IS_YES:
      return isSetConditionalIsYes();
    case CONDITIONAL_LAST_UPDATED_BY_ID:
      return isSetConditionalLastUpdatedById();
    case CONDITIONAL_LAST_UPDATED_AT:
      return isSetConditionalLastUpdatedAt();
    case SEQ_ID:
      return isSetSeqId();
    case IS_NOT_APPLICABLE:
      return isSetIsNotApplicable();
    case IS_NOT_APPLICABLE_LAST_UPDATED_BY_ID:
      return isSetIsNotApplicableLastUpdatedById();
    case IS_NOT_APPLICABLE_LAST_UPDATED_AT:
      return isSetIsNotApplicableLastUpdatedAt();
    case DEVICE_ID:
      return isSetDeviceId();
    case DEVICE_SEQ_ID:
      return isSetDeviceSeqId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof StepGroupExecutionData)
      return this.equals((StepGroupExecutionData)that);
    return false;
  }

  public boolean equals(StepGroupExecutionData that) {
    if (that == null)
      return false;

    boolean this_present_stepGroupId = true && this.isSetStepGroupId();
    boolean that_present_stepGroupId = true && that.isSetStepGroupId();
    if (this_present_stepGroupId || that_present_stepGroupId) {
      if (!(this_present_stepGroupId && that_present_stepGroupId))
        return false;
      if (!this.stepGroupId.equals(that.stepGroupId))
        return false;
    }

    boolean this_present_jobBaseStepId = true && this.isSetJobBaseStepId();
    boolean that_present_jobBaseStepId = true && that.isSetJobBaseStepId();
    if (this_present_jobBaseStepId || that_present_jobBaseStepId) {
      if (!(this_present_jobBaseStepId && that_present_jobBaseStepId))
        return false;
      if (!this.jobBaseStepId.equals(that.jobBaseStepId))
        return false;
    }

    boolean this_present_conditionalIsYes = true && this.isSetConditionalIsYes();
    boolean that_present_conditionalIsYes = true && that.isSetConditionalIsYes();
    if (this_present_conditionalIsYes || that_present_conditionalIsYes) {
      if (!(this_present_conditionalIsYes && that_present_conditionalIsYes))
        return false;
      if (this.conditionalIsYes != that.conditionalIsYes)
        return false;
    }

    boolean this_present_conditionalLastUpdatedById = true && this.isSetConditionalLastUpdatedById();
    boolean that_present_conditionalLastUpdatedById = true && that.isSetConditionalLastUpdatedById();
    if (this_present_conditionalLastUpdatedById || that_present_conditionalLastUpdatedById) {
      if (!(this_present_conditionalLastUpdatedById && that_present_conditionalLastUpdatedById))
        return false;
      if (!this.conditionalLastUpdatedById.equals(that.conditionalLastUpdatedById))
        return false;
    }

    boolean this_present_conditionalLastUpdatedAt = true && this.isSetConditionalLastUpdatedAt();
    boolean that_present_conditionalLastUpdatedAt = true && that.isSetConditionalLastUpdatedAt();
    if (this_present_conditionalLastUpdatedAt || that_present_conditionalLastUpdatedAt) {
      if (!(this_present_conditionalLastUpdatedAt && that_present_conditionalLastUpdatedAt))
        return false;
      if (this.conditionalLastUpdatedAt != that.conditionalLastUpdatedAt)
        return false;
    }

    boolean this_present_seqId = true;
    boolean that_present_seqId = true;
    if (this_present_seqId || that_present_seqId) {
      if (!(this_present_seqId && that_present_seqId))
        return false;
      if (this.seqId != that.seqId)
        return false;
    }

    boolean this_present_isNotApplicable = true && this.isSetIsNotApplicable();
    boolean that_present_isNotApplicable = true && that.isSetIsNotApplicable();
    if (this_present_isNotApplicable || that_present_isNotApplicable) {
      if (!(this_present_isNotApplicable && that_present_isNotApplicable))
        return false;
      if (this.isNotApplicable != that.isNotApplicable)
        return false;
    }

    boolean this_present_isNotApplicableLastUpdatedById = true && this.isSetIsNotApplicableLastUpdatedById();
    boolean that_present_isNotApplicableLastUpdatedById = true && that.isSetIsNotApplicableLastUpdatedById();
    if (this_present_isNotApplicableLastUpdatedById || that_present_isNotApplicableLastUpdatedById) {
      if (!(this_present_isNotApplicableLastUpdatedById && that_present_isNotApplicableLastUpdatedById))
        return false;
      if (!this.isNotApplicableLastUpdatedById.equals(that.isNotApplicableLastUpdatedById))
        return false;
    }

    boolean this_present_isNotApplicableLastUpdatedAt = true && this.isSetIsNotApplicableLastUpdatedAt();
    boolean that_present_isNotApplicableLastUpdatedAt = true && that.isSetIsNotApplicableLastUpdatedAt();
    if (this_present_isNotApplicableLastUpdatedAt || that_present_isNotApplicableLastUpdatedAt) {
      if (!(this_present_isNotApplicableLastUpdatedAt && that_present_isNotApplicableLastUpdatedAt))
        return false;
      if (this.isNotApplicableLastUpdatedAt != that.isNotApplicableLastUpdatedAt)
        return false;
    }

    boolean this_present_deviceId = true && this.isSetDeviceId();
    boolean that_present_deviceId = true && that.isSetDeviceId();
    if (this_present_deviceId || that_present_deviceId) {
      if (!(this_present_deviceId && that_present_deviceId))
        return false;
      if (!this.deviceId.equals(that.deviceId))
        return false;
    }

    boolean this_present_deviceSeqId = true && this.isSetDeviceSeqId();
    boolean that_present_deviceSeqId = true && that.isSetDeviceSeqId();
    if (this_present_deviceSeqId || that_present_deviceSeqId) {
      if (!(this_present_deviceSeqId && that_present_deviceSeqId))
        return false;
      if (this.deviceSeqId != that.deviceSeqId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_stepGroupId = true && (isSetStepGroupId());
    list.add(present_stepGroupId);
    if (present_stepGroupId)
      list.add(stepGroupId);

    boolean present_jobBaseStepId = true && (isSetJobBaseStepId());
    list.add(present_jobBaseStepId);
    if (present_jobBaseStepId)
      list.add(jobBaseStepId);

    boolean present_conditionalIsYes = true && (isSetConditionalIsYes());
    list.add(present_conditionalIsYes);
    if (present_conditionalIsYes)
      list.add(conditionalIsYes);

    boolean present_conditionalLastUpdatedById = true && (isSetConditionalLastUpdatedById());
    list.add(present_conditionalLastUpdatedById);
    if (present_conditionalLastUpdatedById)
      list.add(conditionalLastUpdatedById);

    boolean present_conditionalLastUpdatedAt = true && (isSetConditionalLastUpdatedAt());
    list.add(present_conditionalLastUpdatedAt);
    if (present_conditionalLastUpdatedAt)
      list.add(conditionalLastUpdatedAt);

    boolean present_seqId = true;
    list.add(present_seqId);
    if (present_seqId)
      list.add(seqId);

    boolean present_isNotApplicable = true && (isSetIsNotApplicable());
    list.add(present_isNotApplicable);
    if (present_isNotApplicable)
      list.add(isNotApplicable);

    boolean present_isNotApplicableLastUpdatedById = true && (isSetIsNotApplicableLastUpdatedById());
    list.add(present_isNotApplicableLastUpdatedById);
    if (present_isNotApplicableLastUpdatedById)
      list.add(isNotApplicableLastUpdatedById);

    boolean present_isNotApplicableLastUpdatedAt = true && (isSetIsNotApplicableLastUpdatedAt());
    list.add(present_isNotApplicableLastUpdatedAt);
    if (present_isNotApplicableLastUpdatedAt)
      list.add(isNotApplicableLastUpdatedAt);

    boolean present_deviceId = true && (isSetDeviceId());
    list.add(present_deviceId);
    if (present_deviceId)
      list.add(deviceId);

    boolean present_deviceSeqId = true && (isSetDeviceSeqId());
    list.add(present_deviceSeqId);
    if (present_deviceSeqId)
      list.add(deviceSeqId);

    return list.hashCode();
  }

  @Override
  public int compareTo(StepGroupExecutionData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetStepGroupId()).compareTo(other.isSetStepGroupId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStepGroupId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stepGroupId, other.stepGroupId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJobBaseStepId()).compareTo(other.isSetJobBaseStepId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJobBaseStepId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobBaseStepId, other.jobBaseStepId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConditionalIsYes()).compareTo(other.isSetConditionalIsYes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConditionalIsYes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.conditionalIsYes, other.conditionalIsYes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConditionalLastUpdatedById()).compareTo(other.isSetConditionalLastUpdatedById());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConditionalLastUpdatedById()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.conditionalLastUpdatedById, other.conditionalLastUpdatedById);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConditionalLastUpdatedAt()).compareTo(other.isSetConditionalLastUpdatedAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConditionalLastUpdatedAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.conditionalLastUpdatedAt, other.conditionalLastUpdatedAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSeqId()).compareTo(other.isSetSeqId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSeqId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.seqId, other.seqId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsNotApplicable()).compareTo(other.isSetIsNotApplicable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsNotApplicable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isNotApplicable, other.isNotApplicable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsNotApplicableLastUpdatedById()).compareTo(other.isSetIsNotApplicableLastUpdatedById());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsNotApplicableLastUpdatedById()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isNotApplicableLastUpdatedById, other.isNotApplicableLastUpdatedById);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsNotApplicableLastUpdatedAt()).compareTo(other.isSetIsNotApplicableLastUpdatedAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsNotApplicableLastUpdatedAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isNotApplicableLastUpdatedAt, other.isNotApplicableLastUpdatedAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeviceId()).compareTo(other.isSetDeviceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeviceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceId, other.deviceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeviceSeqId()).compareTo(other.isSetDeviceSeqId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeviceSeqId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceSeqId, other.deviceSeqId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("StepGroupExecutionData(");
    boolean first = true;

    sb.append("stepGroupId:");
    if (this.stepGroupId == null) {
      sb.append("null");
    } else {
      sb.append(this.stepGroupId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("jobBaseStepId:");
    if (this.jobBaseStepId == null) {
      sb.append("null");
    } else {
      sb.append(this.jobBaseStepId);
    }
    first = false;
    if (isSetConditionalIsYes()) {
      if (!first) sb.append(", ");
      sb.append("conditionalIsYes:");
      sb.append(this.conditionalIsYes);
      first = false;
    }
    if (isSetConditionalLastUpdatedById()) {
      if (!first) sb.append(", ");
      sb.append("conditionalLastUpdatedById:");
      if (this.conditionalLastUpdatedById == null) {
        sb.append("null");
      } else {
        sb.append(this.conditionalLastUpdatedById);
      }
      first = false;
    }
    if (isSetConditionalLastUpdatedAt()) {
      if (!first) sb.append(", ");
      sb.append("conditionalLastUpdatedAt:");
      sb.append(this.conditionalLastUpdatedAt);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("seqId:");
    sb.append(this.seqId);
    first = false;
    if (isSetIsNotApplicable()) {
      if (!first) sb.append(", ");
      sb.append("isNotApplicable:");
      sb.append(this.isNotApplicable);
      first = false;
    }
    if (isSetIsNotApplicableLastUpdatedById()) {
      if (!first) sb.append(", ");
      sb.append("isNotApplicableLastUpdatedById:");
      if (this.isNotApplicableLastUpdatedById == null) {
        sb.append("null");
      } else {
        sb.append(this.isNotApplicableLastUpdatedById);
      }
      first = false;
    }
    if (isSetIsNotApplicableLastUpdatedAt()) {
      if (!first) sb.append(", ");
      sb.append("isNotApplicableLastUpdatedAt:");
      sb.append(this.isNotApplicableLastUpdatedAt);
      first = false;
    }
    if (isSetDeviceId()) {
      if (!first) sb.append(", ");
      sb.append("deviceId:");
      if (this.deviceId == null) {
        sb.append("null");
      } else {
        sb.append(this.deviceId);
      }
      first = false;
    }
    if (isSetDeviceSeqId()) {
      if (!first) sb.append(", ");
      sb.append("deviceSeqId:");
      sb.append(this.deviceSeqId);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StepGroupExecutionDataStandardSchemeFactory implements SchemeFactory {
    public StepGroupExecutionDataStandardScheme getScheme() {
      return new StepGroupExecutionDataStandardScheme();
    }
  }

  private static class StepGroupExecutionDataStandardScheme extends StandardScheme<StepGroupExecutionData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, StepGroupExecutionData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STEP_GROUP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stepGroupId = iprot.readString();
              struct.setStepGroupIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // JOB_BASE_STEP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.jobBaseStepId = iprot.readString();
              struct.setJobBaseStepIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CONDITIONAL_IS_YES
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.conditionalIsYes = iprot.readBool();
              struct.setConditionalIsYesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CONDITIONAL_LAST_UPDATED_BY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.conditionalLastUpdatedById = iprot.readString();
              struct.setConditionalLastUpdatedByIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CONDITIONAL_LAST_UPDATED_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.conditionalLastUpdatedAt = iprot.readI64();
              struct.setConditionalLastUpdatedAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SEQ_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.seqId = iprot.readI64();
              struct.setSeqIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // IS_NOT_APPLICABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isNotApplicable = iprot.readBool();
              struct.setIsNotApplicableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // IS_NOT_APPLICABLE_LAST_UPDATED_BY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.isNotApplicableLastUpdatedById = iprot.readString();
              struct.setIsNotApplicableLastUpdatedByIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // IS_NOT_APPLICABLE_LAST_UPDATED_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.isNotApplicableLastUpdatedAt = iprot.readI64();
              struct.setIsNotApplicableLastUpdatedAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 1000: // DEVICE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deviceId = iprot.readString();
              struct.setDeviceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 1001: // DEVICE_SEQ_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.deviceSeqId = iprot.readI64();
              struct.setDeviceSeqIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, StepGroupExecutionData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.stepGroupId != null) {
        oprot.writeFieldBegin(STEP_GROUP_ID_FIELD_DESC);
        oprot.writeString(struct.stepGroupId);
        oprot.writeFieldEnd();
      }
      if (struct.jobBaseStepId != null) {
        oprot.writeFieldBegin(JOB_BASE_STEP_ID_FIELD_DESC);
        oprot.writeString(struct.jobBaseStepId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetConditionalIsYes()) {
        oprot.writeFieldBegin(CONDITIONAL_IS_YES_FIELD_DESC);
        oprot.writeBool(struct.conditionalIsYes);
        oprot.writeFieldEnd();
      }
      if (struct.conditionalLastUpdatedById != null) {
        if (struct.isSetConditionalLastUpdatedById()) {
          oprot.writeFieldBegin(CONDITIONAL_LAST_UPDATED_BY_ID_FIELD_DESC);
          oprot.writeString(struct.conditionalLastUpdatedById);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetConditionalLastUpdatedAt()) {
        oprot.writeFieldBegin(CONDITIONAL_LAST_UPDATED_AT_FIELD_DESC);
        oprot.writeI64(struct.conditionalLastUpdatedAt);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SEQ_ID_FIELD_DESC);
      oprot.writeI64(struct.seqId);
      oprot.writeFieldEnd();
      if (struct.isSetIsNotApplicable()) {
        oprot.writeFieldBegin(IS_NOT_APPLICABLE_FIELD_DESC);
        oprot.writeBool(struct.isNotApplicable);
        oprot.writeFieldEnd();
      }
      if (struct.isNotApplicableLastUpdatedById != null) {
        if (struct.isSetIsNotApplicableLastUpdatedById()) {
          oprot.writeFieldBegin(IS_NOT_APPLICABLE_LAST_UPDATED_BY_ID_FIELD_DESC);
          oprot.writeString(struct.isNotApplicableLastUpdatedById);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIsNotApplicableLastUpdatedAt()) {
        oprot.writeFieldBegin(IS_NOT_APPLICABLE_LAST_UPDATED_AT_FIELD_DESC);
        oprot.writeI64(struct.isNotApplicableLastUpdatedAt);
        oprot.writeFieldEnd();
      }
      if (struct.deviceId != null) {
        if (struct.isSetDeviceId()) {
          oprot.writeFieldBegin(DEVICE_ID_FIELD_DESC);
          oprot.writeString(struct.deviceId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDeviceSeqId()) {
        oprot.writeFieldBegin(DEVICE_SEQ_ID_FIELD_DESC);
        oprot.writeI64(struct.deviceSeqId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

}

