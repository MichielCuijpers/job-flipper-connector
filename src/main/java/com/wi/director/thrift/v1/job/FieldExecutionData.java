/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wi.director.thrift.v1.job;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * Execution data for a particular input field
 */
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class FieldExecutionData implements org.apache.thrift.TBase<FieldExecutionData, FieldExecutionData._Fields>, java.io.Serializable, Cloneable, Comparable<FieldExecutionData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FieldExecutionData");

  private static final org.apache.thrift.protocol.TField FIELD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fieldId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SEQ_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("seqId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField EXEC_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("execData", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField LAST_UPDATED_BY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lastUpdatedById", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField LAST_UPDATED_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("lastUpdatedAt", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField DOCUMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("document", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField IS_NOT_APPLICABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("isNotApplicable", org.apache.thrift.protocol.TType.BOOL, (short)7);
  private static final org.apache.thrift.protocol.TField IS_NOT_APPLICABLE_LAST_UPDATED_BY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("isNotApplicableLastUpdatedById", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField IS_NOT_APPLICABLE_LAST_UPDATED_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("isNotApplicableLastUpdatedAt", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField DEVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceId", org.apache.thrift.protocol.TType.STRING, (short)1000);
  private static final org.apache.thrift.protocol.TField DEVICE_SEQ_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceSeqId", org.apache.thrift.protocol.TType.I64, (short)1001);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FieldExecutionDataStandardSchemeFactory());
  }

  public String fieldId; // required
  public long seqId; // required
  public com.wi.director.thrift.v1.field_data.ExecutionData execData; // optional
  public String lastUpdatedById; // optional
  public long lastUpdatedAt; // optional
  public com.wi.director.thrift.v1.document.Document document; // optional
  public boolean isNotApplicable; // optional
  public String isNotApplicableLastUpdatedById; // optional
  public long isNotApplicableLastUpdatedAt; // optional
  /**
   * For Mesh
   */
  public String deviceId; // optional
  public long deviceSeqId; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FIELD_ID((short)1, "fieldId"),
    SEQ_ID((short)2, "seqId"),
    EXEC_DATA((short)3, "execData"),
    LAST_UPDATED_BY_ID((short)4, "lastUpdatedById"),
    LAST_UPDATED_AT((short)5, "lastUpdatedAt"),
    DOCUMENT((short)6, "document"),
    IS_NOT_APPLICABLE((short)7, "isNotApplicable"),
    IS_NOT_APPLICABLE_LAST_UPDATED_BY_ID((short)8, "isNotApplicableLastUpdatedById"),
    IS_NOT_APPLICABLE_LAST_UPDATED_AT((short)9, "isNotApplicableLastUpdatedAt"),
    /**
     * For Mesh
     */
    DEVICE_ID((short)1000, "deviceId"),
    DEVICE_SEQ_ID((short)1001, "deviceSeqId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FIELD_ID
          return FIELD_ID;
        case 2: // SEQ_ID
          return SEQ_ID;
        case 3: // EXEC_DATA
          return EXEC_DATA;
        case 4: // LAST_UPDATED_BY_ID
          return LAST_UPDATED_BY_ID;
        case 5: // LAST_UPDATED_AT
          return LAST_UPDATED_AT;
        case 6: // DOCUMENT
          return DOCUMENT;
        case 7: // IS_NOT_APPLICABLE
          return IS_NOT_APPLICABLE;
        case 8: // IS_NOT_APPLICABLE_LAST_UPDATED_BY_ID
          return IS_NOT_APPLICABLE_LAST_UPDATED_BY_ID;
        case 9: // IS_NOT_APPLICABLE_LAST_UPDATED_AT
          return IS_NOT_APPLICABLE_LAST_UPDATED_AT;
        case 1000: // DEVICE_ID
          return DEVICE_ID;
        case 1001: // DEVICE_SEQ_ID
          return DEVICE_SEQ_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SEQID_ISSET_ID = 0;
  private static final int __LASTUPDATEDAT_ISSET_ID = 1;
  private static final int __ISNOTAPPLICABLE_ISSET_ID = 2;
  private static final int __ISNOTAPPLICABLELASTUPDATEDAT_ISSET_ID = 3;
  private static final int __DEVICESEQID_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.EXEC_DATA,_Fields.LAST_UPDATED_BY_ID,_Fields.LAST_UPDATED_AT,_Fields.DOCUMENT,_Fields.IS_NOT_APPLICABLE,_Fields.IS_NOT_APPLICABLE_LAST_UPDATED_BY_ID,_Fields.IS_NOT_APPLICABLE_LAST_UPDATED_AT,_Fields.DEVICE_ID,_Fields.DEVICE_SEQ_ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FIELD_ID, new org.apache.thrift.meta_data.FieldMetaData("fieldId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SEQ_ID, new org.apache.thrift.meta_data.FieldMetaData("seqId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.EXEC_DATA, new org.apache.thrift.meta_data.FieldMetaData("execData", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.field_data.ExecutionData.class)));
    tmpMap.put(_Fields.LAST_UPDATED_BY_ID, new org.apache.thrift.meta_data.FieldMetaData("lastUpdatedById", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_UPDATED_AT, new org.apache.thrift.meta_data.FieldMetaData("lastUpdatedAt", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DOCUMENT, new org.apache.thrift.meta_data.FieldMetaData("document", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.document.Document.class)));
    tmpMap.put(_Fields.IS_NOT_APPLICABLE, new org.apache.thrift.meta_data.FieldMetaData("isNotApplicable", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_NOT_APPLICABLE_LAST_UPDATED_BY_ID, new org.apache.thrift.meta_data.FieldMetaData("isNotApplicableLastUpdatedById", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_NOT_APPLICABLE_LAST_UPDATED_AT, new org.apache.thrift.meta_data.FieldMetaData("isNotApplicableLastUpdatedAt", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DEVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("deviceId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEVICE_SEQ_ID, new org.apache.thrift.meta_data.FieldMetaData("deviceSeqId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FieldExecutionData.class, metaDataMap);
  }

  public FieldExecutionData() {
  }

  public FieldExecutionData(
    String fieldId,
    long seqId)
  {
    this();
    this.fieldId = fieldId;
    this.seqId = seqId;
    setSeqIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FieldExecutionData(FieldExecutionData other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetFieldId()) {
      this.fieldId = other.fieldId;
    }
    this.seqId = other.seqId;
    if (other.isSetExecData()) {
      this.execData = new com.wi.director.thrift.v1.field_data.ExecutionData(other.execData);
    }
    if (other.isSetLastUpdatedById()) {
      this.lastUpdatedById = other.lastUpdatedById;
    }
    this.lastUpdatedAt = other.lastUpdatedAt;
    if (other.isSetDocument()) {
      this.document = new com.wi.director.thrift.v1.document.Document(other.document);
    }
    this.isNotApplicable = other.isNotApplicable;
    if (other.isSetIsNotApplicableLastUpdatedById()) {
      this.isNotApplicableLastUpdatedById = other.isNotApplicableLastUpdatedById;
    }
    this.isNotApplicableLastUpdatedAt = other.isNotApplicableLastUpdatedAt;
    if (other.isSetDeviceId()) {
      this.deviceId = other.deviceId;
    }
    this.deviceSeqId = other.deviceSeqId;
  }

  public FieldExecutionData deepCopy() {
    return new FieldExecutionData(this);
  }

  @Override
  public void clear() {
    this.fieldId = null;
    setSeqIdIsSet(false);
    this.seqId = 0;
    this.execData = null;
    this.lastUpdatedById = null;
    setLastUpdatedAtIsSet(false);
    this.lastUpdatedAt = 0;
    this.document = null;
    setIsNotApplicableIsSet(false);
    this.isNotApplicable = false;
    this.isNotApplicableLastUpdatedById = null;
    setIsNotApplicableLastUpdatedAtIsSet(false);
    this.isNotApplicableLastUpdatedAt = 0;
    this.deviceId = null;
    setDeviceSeqIdIsSet(false);
    this.deviceSeqId = 0;
  }

  public String getFieldId() {
    return this.fieldId;
  }

  public FieldExecutionData setFieldId(String fieldId) {
    this.fieldId = fieldId;
    return this;
  }

  public void unsetFieldId() {
    this.fieldId = null;
  }

  /** Returns true if field fieldId is set (has been assigned a value) and false otherwise */
  public boolean isSetFieldId() {
    return this.fieldId != null;
  }

  public void setFieldIdIsSet(boolean value) {
    if (!value) {
      this.fieldId = null;
    }
  }

  public long getSeqId() {
    return this.seqId;
  }

  public FieldExecutionData setSeqId(long seqId) {
    this.seqId = seqId;
    setSeqIdIsSet(true);
    return this;
  }

  public void unsetSeqId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEQID_ISSET_ID);
  }

  /** Returns true if field seqId is set (has been assigned a value) and false otherwise */
  public boolean isSetSeqId() {
    return EncodingUtils.testBit(__isset_bitfield, __SEQID_ISSET_ID);
  }

  public void setSeqIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEQID_ISSET_ID, value);
  }

  public com.wi.director.thrift.v1.field_data.ExecutionData getExecData() {
    return this.execData;
  }

  public FieldExecutionData setExecData(com.wi.director.thrift.v1.field_data.ExecutionData execData) {
    this.execData = execData;
    return this;
  }

  public void unsetExecData() {
    this.execData = null;
  }

  /** Returns true if field execData is set (has been assigned a value) and false otherwise */
  public boolean isSetExecData() {
    return this.execData != null;
  }

  public void setExecDataIsSet(boolean value) {
    if (!value) {
      this.execData = null;
    }
  }

  public String getLastUpdatedById() {
    return this.lastUpdatedById;
  }

  public FieldExecutionData setLastUpdatedById(String lastUpdatedById) {
    this.lastUpdatedById = lastUpdatedById;
    return this;
  }

  public void unsetLastUpdatedById() {
    this.lastUpdatedById = null;
  }

  /** Returns true if field lastUpdatedById is set (has been assigned a value) and false otherwise */
  public boolean isSetLastUpdatedById() {
    return this.lastUpdatedById != null;
  }

  public void setLastUpdatedByIdIsSet(boolean value) {
    if (!value) {
      this.lastUpdatedById = null;
    }
  }

  public long getLastUpdatedAt() {
    return this.lastUpdatedAt;
  }

  public FieldExecutionData setLastUpdatedAt(long lastUpdatedAt) {
    this.lastUpdatedAt = lastUpdatedAt;
    setLastUpdatedAtIsSet(true);
    return this;
  }

  public void unsetLastUpdatedAt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTUPDATEDAT_ISSET_ID);
  }

  /** Returns true if field lastUpdatedAt is set (has been assigned a value) and false otherwise */
  public boolean isSetLastUpdatedAt() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTUPDATEDAT_ISSET_ID);
  }

  public void setLastUpdatedAtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTUPDATEDAT_ISSET_ID, value);
  }

  public com.wi.director.thrift.v1.document.Document getDocument() {
    return this.document;
  }

  public FieldExecutionData setDocument(com.wi.director.thrift.v1.document.Document document) {
    this.document = document;
    return this;
  }

  public void unsetDocument() {
    this.document = null;
  }

  /** Returns true if field document is set (has been assigned a value) and false otherwise */
  public boolean isSetDocument() {
    return this.document != null;
  }

  public void setDocumentIsSet(boolean value) {
    if (!value) {
      this.document = null;
    }
  }

  public boolean isIsNotApplicable() {
    return this.isNotApplicable;
  }

  public FieldExecutionData setIsNotApplicable(boolean isNotApplicable) {
    this.isNotApplicable = isNotApplicable;
    setIsNotApplicableIsSet(true);
    return this;
  }

  public void unsetIsNotApplicable() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISNOTAPPLICABLE_ISSET_ID);
  }

  /** Returns true if field isNotApplicable is set (has been assigned a value) and false otherwise */
  public boolean isSetIsNotApplicable() {
    return EncodingUtils.testBit(__isset_bitfield, __ISNOTAPPLICABLE_ISSET_ID);
  }

  public void setIsNotApplicableIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISNOTAPPLICABLE_ISSET_ID, value);
  }

  public String getIsNotApplicableLastUpdatedById() {
    return this.isNotApplicableLastUpdatedById;
  }

  public FieldExecutionData setIsNotApplicableLastUpdatedById(String isNotApplicableLastUpdatedById) {
    this.isNotApplicableLastUpdatedById = isNotApplicableLastUpdatedById;
    return this;
  }

  public void unsetIsNotApplicableLastUpdatedById() {
    this.isNotApplicableLastUpdatedById = null;
  }

  /** Returns true if field isNotApplicableLastUpdatedById is set (has been assigned a value) and false otherwise */
  public boolean isSetIsNotApplicableLastUpdatedById() {
    return this.isNotApplicableLastUpdatedById != null;
  }

  public void setIsNotApplicableLastUpdatedByIdIsSet(boolean value) {
    if (!value) {
      this.isNotApplicableLastUpdatedById = null;
    }
  }

  public long getIsNotApplicableLastUpdatedAt() {
    return this.isNotApplicableLastUpdatedAt;
  }

  public FieldExecutionData setIsNotApplicableLastUpdatedAt(long isNotApplicableLastUpdatedAt) {
    this.isNotApplicableLastUpdatedAt = isNotApplicableLastUpdatedAt;
    setIsNotApplicableLastUpdatedAtIsSet(true);
    return this;
  }

  public void unsetIsNotApplicableLastUpdatedAt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISNOTAPPLICABLELASTUPDATEDAT_ISSET_ID);
  }

  /** Returns true if field isNotApplicableLastUpdatedAt is set (has been assigned a value) and false otherwise */
  public boolean isSetIsNotApplicableLastUpdatedAt() {
    return EncodingUtils.testBit(__isset_bitfield, __ISNOTAPPLICABLELASTUPDATEDAT_ISSET_ID);
  }

  public void setIsNotApplicableLastUpdatedAtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISNOTAPPLICABLELASTUPDATEDAT_ISSET_ID, value);
  }

  /**
   * For Mesh
   */
  public String getDeviceId() {
    return this.deviceId;
  }

  /**
   * For Mesh
   */
  public FieldExecutionData setDeviceId(String deviceId) {
    this.deviceId = deviceId;
    return this;
  }

  public void unsetDeviceId() {
    this.deviceId = null;
  }

  /** Returns true if field deviceId is set (has been assigned a value) and false otherwise */
  public boolean isSetDeviceId() {
    return this.deviceId != null;
  }

  public void setDeviceIdIsSet(boolean value) {
    if (!value) {
      this.deviceId = null;
    }
  }

  public long getDeviceSeqId() {
    return this.deviceSeqId;
  }

  public FieldExecutionData setDeviceSeqId(long deviceSeqId) {
    this.deviceSeqId = deviceSeqId;
    setDeviceSeqIdIsSet(true);
    return this;
  }

  public void unsetDeviceSeqId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEVICESEQID_ISSET_ID);
  }

  /** Returns true if field deviceSeqId is set (has been assigned a value) and false otherwise */
  public boolean isSetDeviceSeqId() {
    return EncodingUtils.testBit(__isset_bitfield, __DEVICESEQID_ISSET_ID);
  }

  public void setDeviceSeqIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEVICESEQID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FIELD_ID:
      if (value == null) {
        unsetFieldId();
      } else {
        setFieldId((String)value);
      }
      break;

    case SEQ_ID:
      if (value == null) {
        unsetSeqId();
      } else {
        setSeqId((Long)value);
      }
      break;

    case EXEC_DATA:
      if (value == null) {
        unsetExecData();
      } else {
        setExecData((com.wi.director.thrift.v1.field_data.ExecutionData)value);
      }
      break;

    case LAST_UPDATED_BY_ID:
      if (value == null) {
        unsetLastUpdatedById();
      } else {
        setLastUpdatedById((String)value);
      }
      break;

    case LAST_UPDATED_AT:
      if (value == null) {
        unsetLastUpdatedAt();
      } else {
        setLastUpdatedAt((Long)value);
      }
      break;

    case DOCUMENT:
      if (value == null) {
        unsetDocument();
      } else {
        setDocument((com.wi.director.thrift.v1.document.Document)value);
      }
      break;

    case IS_NOT_APPLICABLE:
      if (value == null) {
        unsetIsNotApplicable();
      } else {
        setIsNotApplicable((Boolean)value);
      }
      break;

    case IS_NOT_APPLICABLE_LAST_UPDATED_BY_ID:
      if (value == null) {
        unsetIsNotApplicableLastUpdatedById();
      } else {
        setIsNotApplicableLastUpdatedById((String)value);
      }
      break;

    case IS_NOT_APPLICABLE_LAST_UPDATED_AT:
      if (value == null) {
        unsetIsNotApplicableLastUpdatedAt();
      } else {
        setIsNotApplicableLastUpdatedAt((Long)value);
      }
      break;

    case DEVICE_ID:
      if (value == null) {
        unsetDeviceId();
      } else {
        setDeviceId((String)value);
      }
      break;

    case DEVICE_SEQ_ID:
      if (value == null) {
        unsetDeviceSeqId();
      } else {
        setDeviceSeqId((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FIELD_ID:
      return getFieldId();

    case SEQ_ID:
      return getSeqId();

    case EXEC_DATA:
      return getExecData();

    case LAST_UPDATED_BY_ID:
      return getLastUpdatedById();

    case LAST_UPDATED_AT:
      return getLastUpdatedAt();

    case DOCUMENT:
      return getDocument();

    case IS_NOT_APPLICABLE:
      return isIsNotApplicable();

    case IS_NOT_APPLICABLE_LAST_UPDATED_BY_ID:
      return getIsNotApplicableLastUpdatedById();

    case IS_NOT_APPLICABLE_LAST_UPDATED_AT:
      return getIsNotApplicableLastUpdatedAt();

    case DEVICE_ID:
      return getDeviceId();

    case DEVICE_SEQ_ID:
      return getDeviceSeqId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FIELD_ID:
      return isSetFieldId();
    case SEQ_ID:
      return isSetSeqId();
    case EXEC_DATA:
      return isSetExecData();
    case LAST_UPDATED_BY_ID:
      return isSetLastUpdatedById();
    case LAST_UPDATED_AT:
      return isSetLastUpdatedAt();
    case DOCUMENT:
      return isSetDocument();
    case IS_NOT_APPLICABLE:
      return isSetIsNotApplicable();
    case IS_NOT_APPLICABLE_LAST_UPDATED_BY_ID:
      return isSetIsNotApplicableLastUpdatedById();
    case IS_NOT_APPLICABLE_LAST_UPDATED_AT:
      return isSetIsNotApplicableLastUpdatedAt();
    case DEVICE_ID:
      return isSetDeviceId();
    case DEVICE_SEQ_ID:
      return isSetDeviceSeqId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FieldExecutionData)
      return this.equals((FieldExecutionData)that);
    return false;
  }

  public boolean equals(FieldExecutionData that) {
    if (that == null)
      return false;

    boolean this_present_fieldId = true && this.isSetFieldId();
    boolean that_present_fieldId = true && that.isSetFieldId();
    if (this_present_fieldId || that_present_fieldId) {
      if (!(this_present_fieldId && that_present_fieldId))
        return false;
      if (!this.fieldId.equals(that.fieldId))
        return false;
    }

    boolean this_present_seqId = true;
    boolean that_present_seqId = true;
    if (this_present_seqId || that_present_seqId) {
      if (!(this_present_seqId && that_present_seqId))
        return false;
      if (this.seqId != that.seqId)
        return false;
    }

    boolean this_present_execData = true && this.isSetExecData();
    boolean that_present_execData = true && that.isSetExecData();
    if (this_present_execData || that_present_execData) {
      if (!(this_present_execData && that_present_execData))
        return false;
      if (!this.execData.equals(that.execData))
        return false;
    }

    boolean this_present_lastUpdatedById = true && this.isSetLastUpdatedById();
    boolean that_present_lastUpdatedById = true && that.isSetLastUpdatedById();
    if (this_present_lastUpdatedById || that_present_lastUpdatedById) {
      if (!(this_present_lastUpdatedById && that_present_lastUpdatedById))
        return false;
      if (!this.lastUpdatedById.equals(that.lastUpdatedById))
        return false;
    }

    boolean this_present_lastUpdatedAt = true && this.isSetLastUpdatedAt();
    boolean that_present_lastUpdatedAt = true && that.isSetLastUpdatedAt();
    if (this_present_lastUpdatedAt || that_present_lastUpdatedAt) {
      if (!(this_present_lastUpdatedAt && that_present_lastUpdatedAt))
        return false;
      if (this.lastUpdatedAt != that.lastUpdatedAt)
        return false;
    }

    boolean this_present_document = true && this.isSetDocument();
    boolean that_present_document = true && that.isSetDocument();
    if (this_present_document || that_present_document) {
      if (!(this_present_document && that_present_document))
        return false;
      if (!this.document.equals(that.document))
        return false;
    }

    boolean this_present_isNotApplicable = true && this.isSetIsNotApplicable();
    boolean that_present_isNotApplicable = true && that.isSetIsNotApplicable();
    if (this_present_isNotApplicable || that_present_isNotApplicable) {
      if (!(this_present_isNotApplicable && that_present_isNotApplicable))
        return false;
      if (this.isNotApplicable != that.isNotApplicable)
        return false;
    }

    boolean this_present_isNotApplicableLastUpdatedById = true && this.isSetIsNotApplicableLastUpdatedById();
    boolean that_present_isNotApplicableLastUpdatedById = true && that.isSetIsNotApplicableLastUpdatedById();
    if (this_present_isNotApplicableLastUpdatedById || that_present_isNotApplicableLastUpdatedById) {
      if (!(this_present_isNotApplicableLastUpdatedById && that_present_isNotApplicableLastUpdatedById))
        return false;
      if (!this.isNotApplicableLastUpdatedById.equals(that.isNotApplicableLastUpdatedById))
        return false;
    }

    boolean this_present_isNotApplicableLastUpdatedAt = true && this.isSetIsNotApplicableLastUpdatedAt();
    boolean that_present_isNotApplicableLastUpdatedAt = true && that.isSetIsNotApplicableLastUpdatedAt();
    if (this_present_isNotApplicableLastUpdatedAt || that_present_isNotApplicableLastUpdatedAt) {
      if (!(this_present_isNotApplicableLastUpdatedAt && that_present_isNotApplicableLastUpdatedAt))
        return false;
      if (this.isNotApplicableLastUpdatedAt != that.isNotApplicableLastUpdatedAt)
        return false;
    }

    boolean this_present_deviceId = true && this.isSetDeviceId();
    boolean that_present_deviceId = true && that.isSetDeviceId();
    if (this_present_deviceId || that_present_deviceId) {
      if (!(this_present_deviceId && that_present_deviceId))
        return false;
      if (!this.deviceId.equals(that.deviceId))
        return false;
    }

    boolean this_present_deviceSeqId = true && this.isSetDeviceSeqId();
    boolean that_present_deviceSeqId = true && that.isSetDeviceSeqId();
    if (this_present_deviceSeqId || that_present_deviceSeqId) {
      if (!(this_present_deviceSeqId && that_present_deviceSeqId))
        return false;
      if (this.deviceSeqId != that.deviceSeqId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_fieldId = true && (isSetFieldId());
    list.add(present_fieldId);
    if (present_fieldId)
      list.add(fieldId);

    boolean present_seqId = true;
    list.add(present_seqId);
    if (present_seqId)
      list.add(seqId);

    boolean present_execData = true && (isSetExecData());
    list.add(present_execData);
    if (present_execData)
      list.add(execData);

    boolean present_lastUpdatedById = true && (isSetLastUpdatedById());
    list.add(present_lastUpdatedById);
    if (present_lastUpdatedById)
      list.add(lastUpdatedById);

    boolean present_lastUpdatedAt = true && (isSetLastUpdatedAt());
    list.add(present_lastUpdatedAt);
    if (present_lastUpdatedAt)
      list.add(lastUpdatedAt);

    boolean present_document = true && (isSetDocument());
    list.add(present_document);
    if (present_document)
      list.add(document);

    boolean present_isNotApplicable = true && (isSetIsNotApplicable());
    list.add(present_isNotApplicable);
    if (present_isNotApplicable)
      list.add(isNotApplicable);

    boolean present_isNotApplicableLastUpdatedById = true && (isSetIsNotApplicableLastUpdatedById());
    list.add(present_isNotApplicableLastUpdatedById);
    if (present_isNotApplicableLastUpdatedById)
      list.add(isNotApplicableLastUpdatedById);

    boolean present_isNotApplicableLastUpdatedAt = true && (isSetIsNotApplicableLastUpdatedAt());
    list.add(present_isNotApplicableLastUpdatedAt);
    if (present_isNotApplicableLastUpdatedAt)
      list.add(isNotApplicableLastUpdatedAt);

    boolean present_deviceId = true && (isSetDeviceId());
    list.add(present_deviceId);
    if (present_deviceId)
      list.add(deviceId);

    boolean present_deviceSeqId = true && (isSetDeviceSeqId());
    list.add(present_deviceSeqId);
    if (present_deviceSeqId)
      list.add(deviceSeqId);

    return list.hashCode();
  }

  @Override
  public int compareTo(FieldExecutionData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetFieldId()).compareTo(other.isSetFieldId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFieldId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fieldId, other.fieldId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSeqId()).compareTo(other.isSetSeqId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSeqId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.seqId, other.seqId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExecData()).compareTo(other.isSetExecData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.execData, other.execData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastUpdatedById()).compareTo(other.isSetLastUpdatedById());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastUpdatedById()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastUpdatedById, other.lastUpdatedById);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastUpdatedAt()).compareTo(other.isSetLastUpdatedAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastUpdatedAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastUpdatedAt, other.lastUpdatedAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDocument()).compareTo(other.isSetDocument());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDocument()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.document, other.document);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsNotApplicable()).compareTo(other.isSetIsNotApplicable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsNotApplicable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isNotApplicable, other.isNotApplicable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsNotApplicableLastUpdatedById()).compareTo(other.isSetIsNotApplicableLastUpdatedById());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsNotApplicableLastUpdatedById()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isNotApplicableLastUpdatedById, other.isNotApplicableLastUpdatedById);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsNotApplicableLastUpdatedAt()).compareTo(other.isSetIsNotApplicableLastUpdatedAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsNotApplicableLastUpdatedAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isNotApplicableLastUpdatedAt, other.isNotApplicableLastUpdatedAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeviceId()).compareTo(other.isSetDeviceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeviceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceId, other.deviceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeviceSeqId()).compareTo(other.isSetDeviceSeqId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeviceSeqId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceSeqId, other.deviceSeqId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FieldExecutionData(");
    boolean first = true;

    sb.append("fieldId:");
    if (this.fieldId == null) {
      sb.append("null");
    } else {
      sb.append(this.fieldId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("seqId:");
    sb.append(this.seqId);
    first = false;
    if (isSetExecData()) {
      if (!first) sb.append(", ");
      sb.append("execData:");
      if (this.execData == null) {
        sb.append("null");
      } else {
        sb.append(this.execData);
      }
      first = false;
    }
    if (isSetLastUpdatedById()) {
      if (!first) sb.append(", ");
      sb.append("lastUpdatedById:");
      if (this.lastUpdatedById == null) {
        sb.append("null");
      } else {
        sb.append(this.lastUpdatedById);
      }
      first = false;
    }
    if (isSetLastUpdatedAt()) {
      if (!first) sb.append(", ");
      sb.append("lastUpdatedAt:");
      sb.append(this.lastUpdatedAt);
      first = false;
    }
    if (isSetDocument()) {
      if (!first) sb.append(", ");
      sb.append("document:");
      if (this.document == null) {
        sb.append("null");
      } else {
        sb.append(this.document);
      }
      first = false;
    }
    if (isSetIsNotApplicable()) {
      if (!first) sb.append(", ");
      sb.append("isNotApplicable:");
      sb.append(this.isNotApplicable);
      first = false;
    }
    if (isSetIsNotApplicableLastUpdatedById()) {
      if (!first) sb.append(", ");
      sb.append("isNotApplicableLastUpdatedById:");
      if (this.isNotApplicableLastUpdatedById == null) {
        sb.append("null");
      } else {
        sb.append(this.isNotApplicableLastUpdatedById);
      }
      first = false;
    }
    if (isSetIsNotApplicableLastUpdatedAt()) {
      if (!first) sb.append(", ");
      sb.append("isNotApplicableLastUpdatedAt:");
      sb.append(this.isNotApplicableLastUpdatedAt);
      first = false;
    }
    if (isSetDeviceId()) {
      if (!first) sb.append(", ");
      sb.append("deviceId:");
      if (this.deviceId == null) {
        sb.append("null");
      } else {
        sb.append(this.deviceId);
      }
      first = false;
    }
    if (isSetDeviceSeqId()) {
      if (!first) sb.append(", ");
      sb.append("deviceSeqId:");
      sb.append(this.deviceSeqId);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (document != null) {
      document.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FieldExecutionDataStandardSchemeFactory implements SchemeFactory {
    public FieldExecutionDataStandardScheme getScheme() {
      return new FieldExecutionDataStandardScheme();
    }
  }

  private static class FieldExecutionDataStandardScheme extends StandardScheme<FieldExecutionData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FieldExecutionData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FIELD_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fieldId = iprot.readString();
              struct.setFieldIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SEQ_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.seqId = iprot.readI64();
              struct.setSeqIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EXEC_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.execData = new com.wi.director.thrift.v1.field_data.ExecutionData();
              struct.execData.read(iprot);
              struct.setExecDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LAST_UPDATED_BY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastUpdatedById = iprot.readString();
              struct.setLastUpdatedByIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LAST_UPDATED_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastUpdatedAt = iprot.readI64();
              struct.setLastUpdatedAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DOCUMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.document = new com.wi.director.thrift.v1.document.Document();
              struct.document.read(iprot);
              struct.setDocumentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // IS_NOT_APPLICABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isNotApplicable = iprot.readBool();
              struct.setIsNotApplicableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // IS_NOT_APPLICABLE_LAST_UPDATED_BY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.isNotApplicableLastUpdatedById = iprot.readString();
              struct.setIsNotApplicableLastUpdatedByIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // IS_NOT_APPLICABLE_LAST_UPDATED_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.isNotApplicableLastUpdatedAt = iprot.readI64();
              struct.setIsNotApplicableLastUpdatedAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 1000: // DEVICE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deviceId = iprot.readString();
              struct.setDeviceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 1001: // DEVICE_SEQ_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.deviceSeqId = iprot.readI64();
              struct.setDeviceSeqIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FieldExecutionData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.fieldId != null) {
        oprot.writeFieldBegin(FIELD_ID_FIELD_DESC);
        oprot.writeString(struct.fieldId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SEQ_ID_FIELD_DESC);
      oprot.writeI64(struct.seqId);
      oprot.writeFieldEnd();
      if (struct.execData != null) {
        if (struct.isSetExecData()) {
          oprot.writeFieldBegin(EXEC_DATA_FIELD_DESC);
          struct.execData.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.lastUpdatedById != null) {
        if (struct.isSetLastUpdatedById()) {
          oprot.writeFieldBegin(LAST_UPDATED_BY_ID_FIELD_DESC);
          oprot.writeString(struct.lastUpdatedById);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetLastUpdatedAt()) {
        oprot.writeFieldBegin(LAST_UPDATED_AT_FIELD_DESC);
        oprot.writeI64(struct.lastUpdatedAt);
        oprot.writeFieldEnd();
      }
      if (struct.document != null) {
        if (struct.isSetDocument()) {
          oprot.writeFieldBegin(DOCUMENT_FIELD_DESC);
          struct.document.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIsNotApplicable()) {
        oprot.writeFieldBegin(IS_NOT_APPLICABLE_FIELD_DESC);
        oprot.writeBool(struct.isNotApplicable);
        oprot.writeFieldEnd();
      }
      if (struct.isNotApplicableLastUpdatedById != null) {
        if (struct.isSetIsNotApplicableLastUpdatedById()) {
          oprot.writeFieldBegin(IS_NOT_APPLICABLE_LAST_UPDATED_BY_ID_FIELD_DESC);
          oprot.writeString(struct.isNotApplicableLastUpdatedById);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIsNotApplicableLastUpdatedAt()) {
        oprot.writeFieldBegin(IS_NOT_APPLICABLE_LAST_UPDATED_AT_FIELD_DESC);
        oprot.writeI64(struct.isNotApplicableLastUpdatedAt);
        oprot.writeFieldEnd();
      }
      if (struct.deviceId != null) {
        if (struct.isSetDeviceId()) {
          oprot.writeFieldBegin(DEVICE_ID_FIELD_DESC);
          oprot.writeString(struct.deviceId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDeviceSeqId()) {
        oprot.writeFieldBegin(DEVICE_SEQ_ID_FIELD_DESC);
        oprot.writeI64(struct.deviceSeqId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

}

