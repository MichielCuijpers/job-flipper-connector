/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wi.director.thrift.v1.group_headers;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class IconDiff implements org.apache.thrift.TBase<IconDiff, IconDiff._Fields>, java.io.Serializable, Cloneable, Comparable<IconDiff> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("IconDiff");

  private static final org.apache.thrift.protocol.TField LATEST_CHANGE_FIELD_DESC = new org.apache.thrift.protocol.TField("latestChange", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField OTHER_ICON_FIELD_DESC = new org.apache.thrift.protocol.TField("otherIcon", org.apache.thrift.protocol.TType.STRUCT, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new IconDiffStandardSchemeFactory());
  }

  public com.wi.director.thrift.v1.diff.Change latestChange; // required
  public NoticeIcon otherIcon; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LATEST_CHANGE((short)1, "latestChange"),
    OTHER_ICON((short)10, "otherIcon");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LATEST_CHANGE
          return LATEST_CHANGE;
        case 10: // OTHER_ICON
          return OTHER_ICON;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.OTHER_ICON};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LATEST_CHANGE, new org.apache.thrift.meta_data.FieldMetaData("latestChange", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.diff.Change.class)));
    tmpMap.put(_Fields.OTHER_ICON, new org.apache.thrift.meta_data.FieldMetaData("otherIcon", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NoticeIcon.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(IconDiff.class, metaDataMap);
  }

  public IconDiff() {
  }

  public IconDiff(
    com.wi.director.thrift.v1.diff.Change latestChange)
  {
    this();
    this.latestChange = latestChange;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public IconDiff(IconDiff other) {
    if (other.isSetLatestChange()) {
      this.latestChange = new com.wi.director.thrift.v1.diff.Change(other.latestChange);
    }
    if (other.isSetOtherIcon()) {
      this.otherIcon = new NoticeIcon(other.otherIcon);
    }
  }

  public IconDiff deepCopy() {
    return new IconDiff(this);
  }

  @Override
  public void clear() {
    this.latestChange = null;
    this.otherIcon = null;
  }

  public com.wi.director.thrift.v1.diff.Change getLatestChange() {
    return this.latestChange;
  }

  public IconDiff setLatestChange(com.wi.director.thrift.v1.diff.Change latestChange) {
    this.latestChange = latestChange;
    return this;
  }

  public void unsetLatestChange() {
    this.latestChange = null;
  }

  /** Returns true if field latestChange is set (has been assigned a value) and false otherwise */
  public boolean isSetLatestChange() {
    return this.latestChange != null;
  }

  public void setLatestChangeIsSet(boolean value) {
    if (!value) {
      this.latestChange = null;
    }
  }

  public NoticeIcon getOtherIcon() {
    return this.otherIcon;
  }

  public IconDiff setOtherIcon(NoticeIcon otherIcon) {
    this.otherIcon = otherIcon;
    return this;
  }

  public void unsetOtherIcon() {
    this.otherIcon = null;
  }

  /** Returns true if field otherIcon is set (has been assigned a value) and false otherwise */
  public boolean isSetOtherIcon() {
    return this.otherIcon != null;
  }

  public void setOtherIconIsSet(boolean value) {
    if (!value) {
      this.otherIcon = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LATEST_CHANGE:
      if (value == null) {
        unsetLatestChange();
      } else {
        setLatestChange((com.wi.director.thrift.v1.diff.Change)value);
      }
      break;

    case OTHER_ICON:
      if (value == null) {
        unsetOtherIcon();
      } else {
        setOtherIcon((NoticeIcon)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LATEST_CHANGE:
      return getLatestChange();

    case OTHER_ICON:
      return getOtherIcon();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LATEST_CHANGE:
      return isSetLatestChange();
    case OTHER_ICON:
      return isSetOtherIcon();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof IconDiff)
      return this.equals((IconDiff)that);
    return false;
  }

  public boolean equals(IconDiff that) {
    if (that == null)
      return false;

    boolean this_present_latestChange = true && this.isSetLatestChange();
    boolean that_present_latestChange = true && that.isSetLatestChange();
    if (this_present_latestChange || that_present_latestChange) {
      if (!(this_present_latestChange && that_present_latestChange))
        return false;
      if (!this.latestChange.equals(that.latestChange))
        return false;
    }

    boolean this_present_otherIcon = true && this.isSetOtherIcon();
    boolean that_present_otherIcon = true && that.isSetOtherIcon();
    if (this_present_otherIcon || that_present_otherIcon) {
      if (!(this_present_otherIcon && that_present_otherIcon))
        return false;
      if (!this.otherIcon.equals(that.otherIcon))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_latestChange = true && (isSetLatestChange());
    list.add(present_latestChange);
    if (present_latestChange)
      list.add(latestChange);

    boolean present_otherIcon = true && (isSetOtherIcon());
    list.add(present_otherIcon);
    if (present_otherIcon)
      list.add(otherIcon);

    return list.hashCode();
  }

  @Override
  public int compareTo(IconDiff other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetLatestChange()).compareTo(other.isSetLatestChange());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLatestChange()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.latestChange, other.latestChange);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOtherIcon()).compareTo(other.isSetOtherIcon());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOtherIcon()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.otherIcon, other.otherIcon);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("IconDiff(");
    boolean first = true;

    sb.append("latestChange:");
    if (this.latestChange == null) {
      sb.append("null");
    } else {
      sb.append(this.latestChange);
    }
    first = false;
    if (isSetOtherIcon()) {
      if (!first) sb.append(", ");
      sb.append("otherIcon:");
      if (this.otherIcon == null) {
        sb.append("null");
      } else {
        sb.append(this.otherIcon);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (latestChange != null) {
      latestChange.validate();
    }
    if (otherIcon != null) {
      otherIcon.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class IconDiffStandardSchemeFactory implements SchemeFactory {
    public IconDiffStandardScheme getScheme() {
      return new IconDiffStandardScheme();
    }
  }

  private static class IconDiffStandardScheme extends StandardScheme<IconDiff> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, IconDiff struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LATEST_CHANGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.latestChange = new com.wi.director.thrift.v1.diff.Change();
              struct.latestChange.read(iprot);
              struct.setLatestChangeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // OTHER_ICON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.otherIcon = new NoticeIcon();
              struct.otherIcon.read(iprot);
              struct.setOtherIconIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, IconDiff struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.latestChange != null) {
        oprot.writeFieldBegin(LATEST_CHANGE_FIELD_DESC);
        struct.latestChange.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.otherIcon != null) {
        if (struct.isSetOtherIcon()) {
          oprot.writeFieldBegin(OTHER_ICON_FIELD_DESC);
          struct.otherIcon.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

}

