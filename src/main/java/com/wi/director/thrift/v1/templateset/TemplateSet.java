/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wi.director.thrift.v1.templateset;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class TemplateSet implements org.apache.thrift.TBase<TemplateSet, TemplateSet._Fields>, java.io.Serializable, Cloneable, Comparable<TemplateSet> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TemplateSet");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField INTERNAL_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("internalVersion", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField PUBLIC_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("publicVersion", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField DESCRIP_FIELD_DESC = new org.apache.thrift.protocol.TField("descrip", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField TEAM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("teamId", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField LAST_AUTHORED_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("lastAuthoredAt", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField PUBLISHED_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("publishedAt", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField ARCHIVED_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("archivedAt", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField LAST_AUTHOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lastAuthorId", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField LOCK_FIELD_DESC = new org.apache.thrift.protocol.TField("lock", org.apache.thrift.protocol.TType.STRUCT, (short)12);
  private static final org.apache.thrift.protocol.TField PUBLISHED_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("publishedVersion", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField TYP_FIELD_DESC = new org.apache.thrift.protocol.TField("typ", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField TEAM_FIELD_DESC = new org.apache.thrift.protocol.TField("team", org.apache.thrift.protocol.TType.STRUCT, (short)101);
  private static final org.apache.thrift.protocol.TField LAST_PUBLISHED_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("lastPublishedAt", org.apache.thrift.protocol.TType.I64, (short)102);
  private static final org.apache.thrift.protocol.TField LAST_AUTHOR_FIELD_DESC = new org.apache.thrift.protocol.TField("lastAuthor", org.apache.thrift.protocol.TType.STRUCT, (short)103);
  private static final org.apache.thrift.protocol.TField TEMPLATES_FIELD_DESC = new org.apache.thrift.protocol.TField("templates", org.apache.thrift.protocol.TType.LIST, (short)104);
  private static final org.apache.thrift.protocol.TField COUNTS_FIELD_DESC = new org.apache.thrift.protocol.TField("counts", org.apache.thrift.protocol.TType.STRUCT, (short)105);
  private static final org.apache.thrift.protocol.TField TEMPLATE_TAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("templateTags", org.apache.thrift.protocol.TType.LIST, (short)106);
  private static final org.apache.thrift.protocol.TField LAST_PUBLISHED_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("lastPublishedVersion", org.apache.thrift.protocol.TType.I32, (short)107);
  private static final org.apache.thrift.protocol.TField LAST_MODIFIED_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("lastModifiedAt", org.apache.thrift.protocol.TType.I64, (short)108);
  private static final org.apache.thrift.protocol.TField ATTRIBUTES_FIELD_DESC = new org.apache.thrift.protocol.TField("attributes", org.apache.thrift.protocol.TType.LIST, (short)109);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TemplateSetStandardSchemeFactory());
  }

  public String id; // required
  /**
   * Only increments when <a href="#Fn_TemplateSetService_update">update</a> is called.
   */
  public int internalVersion; // required
  /**
   * Increment logic for <code>publicVersion</code>:<br><br>
   * Normal team flow:<br>
   * 1. A new template set is created with <a href="#Fn_TemplateSetService_create">create</a>, initially <code>publicVersion=0</code> and <code>status=Unpublished</code>.<br>
   * 2. <code>publicVersion</code> increments by 1 from latest published <code>publicVersion</code> when <a href="#Fn_TemplateSetService_publish">publish</a> is called, and <code>status=Published</code>.<br>
   * 3. When a new edit is made with <a href="#Fn_TemplateSetService_update">update</a> on either published or unpublished template set, a new entry is created with <code>publicVersion=0</code> and <code>status=Unpublished</code>.<br>
   * 4. Repeat from step 2) or 3).<br><br>
   * Review team flow:<br>
   * 1. A new template set is created with <a href="#Fn_TemplateSetService_create">create</a>, initially <code>publicVersion=0</code> and <code>status=Unpublished</code>.<br>
   * 2. <code>publicVersion</code> increments by 1 from max <code>publicVersion</code> when <a href="#Fn_TemplateSetService_beginReview">beginReview</a> is called, and <code>status=InReview</code>. <code>publicVersion</code> does not change if this <code>internalVersion</code> has already been reviewed before, i.e., <code>publicVersion != 0</code>.<br>
   * 3. <a href="#Fn_TemplateSetService_endReview">endReview</a> must be called next to close review, making <code>status=Unpublished</code>.<br>
   * 4. A specific <code>publicVersion</code> must be used to call <a href="#Fn_TemplateSetService_publishVersion">publishVersion</a> and make <code>status=Published</code>.<br>
   * 5. When a new edit is made with <a href="#Fn_TemplateSetService_update">update</a> on either published or unpublished template set, a new entry is created with <code>publicVersion=0</code> and <code>status=Unpublished</code>.<br>
   * 6. Repeat from step 2) or 5).
   */
  public int publicVersion; // required
  public String title; // required
  public String descrip; // required
  /**
   * 
   * @see com.wi.director.thrift.v1.jobtemplate.JobTemplateStatus
   */
  public com.wi.director.thrift.v1.jobtemplate.JobTemplateStatus status; // required
  public String teamId; // required
  public long lastAuthoredAt; // required
  public long publishedAt; // required
  public long archivedAt; // required
  public String lastAuthorId; // required
  /**
   * Status of lock by another user. Internal authoring lock
   */
  public com.wi.director.thrift.v1.jobtemplate.JobTemplateLock lock; // optional
  /**
   * Only increments when <a href="#Fn_TemplateSetService_publish">publish</a> or <a href="#Fn_TemplateSetService_publishVersion">publishVersion</a> is called.
   * Is the same as <code>publicVersion</code> for normal teams, and only increments on publish for review teams.
   * Is 0 for all template sets with <code>status!=Published</code>.
   */
  public int publishedVersion; // required
  /**
   * 
   * @see com.wi.director.thrift.v1.jobtemplate.TemplateType
   */
  public com.wi.director.thrift.v1.jobtemplate.TemplateType typ; // required
  public com.wi.director.thrift.v1.team.TeamModular team; // optional
  /**
   * last published time for this template set. 0 if not published
   */
  public long lastPublishedAt; // optional
  public com.wi.director.thrift.v1.user.UserModular lastAuthor; // optional
  public List<com.wi.director.thrift.v1.jobtemplate.JobTemplateModular> templates; // optional
  public TemplateSetCounts counts; // optional
  public List<com.wi.director.thrift.v1.jobtemplate.TemplateTag> templateTags; // optional
  /**
   * last published version (public version) for this template set. 0 if not published
   */
  public int lastPublishedVersion; // optional
  /**
   * Bumps up on edit, status change, archive
   */
  public long lastModifiedAt; // optional
  public List<com.wi.director.thrift.v1.abac.AbacAttribute> attributes; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    /**
     * Only increments when <a href="#Fn_TemplateSetService_update">update</a> is called.
     */
    INTERNAL_VERSION((short)2, "internalVersion"),
    /**
     * Increment logic for <code>publicVersion</code>:<br><br>
     * Normal team flow:<br>
     * 1. A new template set is created with <a href="#Fn_TemplateSetService_create">create</a>, initially <code>publicVersion=0</code> and <code>status=Unpublished</code>.<br>
     * 2. <code>publicVersion</code> increments by 1 from latest published <code>publicVersion</code> when <a href="#Fn_TemplateSetService_publish">publish</a> is called, and <code>status=Published</code>.<br>
     * 3. When a new edit is made with <a href="#Fn_TemplateSetService_update">update</a> on either published or unpublished template set, a new entry is created with <code>publicVersion=0</code> and <code>status=Unpublished</code>.<br>
     * 4. Repeat from step 2) or 3).<br><br>
     * Review team flow:<br>
     * 1. A new template set is created with <a href="#Fn_TemplateSetService_create">create</a>, initially <code>publicVersion=0</code> and <code>status=Unpublished</code>.<br>
     * 2. <code>publicVersion</code> increments by 1 from max <code>publicVersion</code> when <a href="#Fn_TemplateSetService_beginReview">beginReview</a> is called, and <code>status=InReview</code>. <code>publicVersion</code> does not change if this <code>internalVersion</code> has already been reviewed before, i.e., <code>publicVersion != 0</code>.<br>
     * 3. <a href="#Fn_TemplateSetService_endReview">endReview</a> must be called next to close review, making <code>status=Unpublished</code>.<br>
     * 4. A specific <code>publicVersion</code> must be used to call <a href="#Fn_TemplateSetService_publishVersion">publishVersion</a> and make <code>status=Published</code>.<br>
     * 5. When a new edit is made with <a href="#Fn_TemplateSetService_update">update</a> on either published or unpublished template set, a new entry is created with <code>publicVersion=0</code> and <code>status=Unpublished</code>.<br>
     * 6. Repeat from step 2) or 5).
     */
    PUBLIC_VERSION((short)3, "publicVersion"),
    TITLE((short)4, "title"),
    DESCRIP((short)5, "descrip"),
    /**
     * 
     * @see com.wi.director.thrift.v1.jobtemplate.JobTemplateStatus
     */
    STATUS((short)6, "status"),
    TEAM_ID((short)7, "teamId"),
    LAST_AUTHORED_AT((short)8, "lastAuthoredAt"),
    PUBLISHED_AT((short)9, "publishedAt"),
    ARCHIVED_AT((short)10, "archivedAt"),
    LAST_AUTHOR_ID((short)11, "lastAuthorId"),
    /**
     * Status of lock by another user. Internal authoring lock
     */
    LOCK((short)12, "lock"),
    /**
     * Only increments when <a href="#Fn_TemplateSetService_publish">publish</a> or <a href="#Fn_TemplateSetService_publishVersion">publishVersion</a> is called.
     * Is the same as <code>publicVersion</code> for normal teams, and only increments on publish for review teams.
     * Is 0 for all template sets with <code>status!=Published</code>.
     */
    PUBLISHED_VERSION((short)13, "publishedVersion"),
    /**
     * 
     * @see com.wi.director.thrift.v1.jobtemplate.TemplateType
     */
    TYP((short)14, "typ"),
    TEAM((short)101, "team"),
    /**
     * last published time for this template set. 0 if not published
     */
    LAST_PUBLISHED_AT((short)102, "lastPublishedAt"),
    LAST_AUTHOR((short)103, "lastAuthor"),
    TEMPLATES((short)104, "templates"),
    COUNTS((short)105, "counts"),
    TEMPLATE_TAGS((short)106, "templateTags"),
    /**
     * last published version (public version) for this template set. 0 if not published
     */
    LAST_PUBLISHED_VERSION((short)107, "lastPublishedVersion"),
    /**
     * Bumps up on edit, status change, archive
     */
    LAST_MODIFIED_AT((short)108, "lastModifiedAt"),
    ATTRIBUTES((short)109, "attributes");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // INTERNAL_VERSION
          return INTERNAL_VERSION;
        case 3: // PUBLIC_VERSION
          return PUBLIC_VERSION;
        case 4: // TITLE
          return TITLE;
        case 5: // DESCRIP
          return DESCRIP;
        case 6: // STATUS
          return STATUS;
        case 7: // TEAM_ID
          return TEAM_ID;
        case 8: // LAST_AUTHORED_AT
          return LAST_AUTHORED_AT;
        case 9: // PUBLISHED_AT
          return PUBLISHED_AT;
        case 10: // ARCHIVED_AT
          return ARCHIVED_AT;
        case 11: // LAST_AUTHOR_ID
          return LAST_AUTHOR_ID;
        case 12: // LOCK
          return LOCK;
        case 13: // PUBLISHED_VERSION
          return PUBLISHED_VERSION;
        case 14: // TYP
          return TYP;
        case 101: // TEAM
          return TEAM;
        case 102: // LAST_PUBLISHED_AT
          return LAST_PUBLISHED_AT;
        case 103: // LAST_AUTHOR
          return LAST_AUTHOR;
        case 104: // TEMPLATES
          return TEMPLATES;
        case 105: // COUNTS
          return COUNTS;
        case 106: // TEMPLATE_TAGS
          return TEMPLATE_TAGS;
        case 107: // LAST_PUBLISHED_VERSION
          return LAST_PUBLISHED_VERSION;
        case 108: // LAST_MODIFIED_AT
          return LAST_MODIFIED_AT;
        case 109: // ATTRIBUTES
          return ATTRIBUTES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __INTERNALVERSION_ISSET_ID = 0;
  private static final int __PUBLICVERSION_ISSET_ID = 1;
  private static final int __LASTAUTHOREDAT_ISSET_ID = 2;
  private static final int __PUBLISHEDAT_ISSET_ID = 3;
  private static final int __ARCHIVEDAT_ISSET_ID = 4;
  private static final int __PUBLISHEDVERSION_ISSET_ID = 5;
  private static final int __LASTPUBLISHEDAT_ISSET_ID = 6;
  private static final int __LASTPUBLISHEDVERSION_ISSET_ID = 7;
  private static final int __LASTMODIFIEDAT_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.LOCK,_Fields.TEAM,_Fields.LAST_PUBLISHED_AT,_Fields.LAST_AUTHOR,_Fields.TEMPLATES,_Fields.COUNTS,_Fields.TEMPLATE_TAGS,_Fields.LAST_PUBLISHED_VERSION,_Fields.LAST_MODIFIED_AT,_Fields.ATTRIBUTES};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INTERNAL_VERSION, new org.apache.thrift.meta_data.FieldMetaData("internalVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PUBLIC_VERSION, new org.apache.thrift.meta_data.FieldMetaData("publicVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRIP, new org.apache.thrift.meta_data.FieldMetaData("descrip", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.wi.director.thrift.v1.jobtemplate.JobTemplateStatus.class)));
    tmpMap.put(_Fields.TEAM_ID, new org.apache.thrift.meta_data.FieldMetaData("teamId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_AUTHORED_AT, new org.apache.thrift.meta_data.FieldMetaData("lastAuthoredAt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PUBLISHED_AT, new org.apache.thrift.meta_data.FieldMetaData("publishedAt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ARCHIVED_AT, new org.apache.thrift.meta_data.FieldMetaData("archivedAt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LAST_AUTHOR_ID, new org.apache.thrift.meta_data.FieldMetaData("lastAuthorId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOCK, new org.apache.thrift.meta_data.FieldMetaData("lock", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.jobtemplate.JobTemplateLock.class)));
    tmpMap.put(_Fields.PUBLISHED_VERSION, new org.apache.thrift.meta_data.FieldMetaData("publishedVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TYP, new org.apache.thrift.meta_data.FieldMetaData("typ", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.wi.director.thrift.v1.jobtemplate.TemplateType.class)));
    tmpMap.put(_Fields.TEAM, new org.apache.thrift.meta_data.FieldMetaData("team", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.team.TeamModular.class)));
    tmpMap.put(_Fields.LAST_PUBLISHED_AT, new org.apache.thrift.meta_data.FieldMetaData("lastPublishedAt", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LAST_AUTHOR, new org.apache.thrift.meta_data.FieldMetaData("lastAuthor", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.user.UserModular.class)));
    tmpMap.put(_Fields.TEMPLATES, new org.apache.thrift.meta_data.FieldMetaData("templates", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.jobtemplate.JobTemplateModular.class))));
    tmpMap.put(_Fields.COUNTS, new org.apache.thrift.meta_data.FieldMetaData("counts", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TemplateSetCounts.class)));
    tmpMap.put(_Fields.TEMPLATE_TAGS, new org.apache.thrift.meta_data.FieldMetaData("templateTags", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.jobtemplate.TemplateTag.class))));
    tmpMap.put(_Fields.LAST_PUBLISHED_VERSION, new org.apache.thrift.meta_data.FieldMetaData("lastPublishedVersion", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LAST_MODIFIED_AT, new org.apache.thrift.meta_data.FieldMetaData("lastModifiedAt", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ATTRIBUTES, new org.apache.thrift.meta_data.FieldMetaData("attributes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.abac.AbacAttribute.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TemplateSet.class, metaDataMap);
  }

  public TemplateSet() {
  }

  public TemplateSet(
    String id,
    int internalVersion,
    int publicVersion,
    String title,
    String descrip,
    com.wi.director.thrift.v1.jobtemplate.JobTemplateStatus status,
    String teamId,
    long lastAuthoredAt,
    long publishedAt,
    long archivedAt,
    String lastAuthorId,
    int publishedVersion,
    com.wi.director.thrift.v1.jobtemplate.TemplateType typ)
  {
    this();
    this.id = id;
    this.internalVersion = internalVersion;
    setInternalVersionIsSet(true);
    this.publicVersion = publicVersion;
    setPublicVersionIsSet(true);
    this.title = title;
    this.descrip = descrip;
    this.status = status;
    this.teamId = teamId;
    this.lastAuthoredAt = lastAuthoredAt;
    setLastAuthoredAtIsSet(true);
    this.publishedAt = publishedAt;
    setPublishedAtIsSet(true);
    this.archivedAt = archivedAt;
    setArchivedAtIsSet(true);
    this.lastAuthorId = lastAuthorId;
    this.publishedVersion = publishedVersion;
    setPublishedVersionIsSet(true);
    this.typ = typ;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TemplateSet(TemplateSet other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = other.id;
    }
    this.internalVersion = other.internalVersion;
    this.publicVersion = other.publicVersion;
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    if (other.isSetDescrip()) {
      this.descrip = other.descrip;
    }
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    if (other.isSetTeamId()) {
      this.teamId = other.teamId;
    }
    this.lastAuthoredAt = other.lastAuthoredAt;
    this.publishedAt = other.publishedAt;
    this.archivedAt = other.archivedAt;
    if (other.isSetLastAuthorId()) {
      this.lastAuthorId = other.lastAuthorId;
    }
    if (other.isSetLock()) {
      this.lock = new com.wi.director.thrift.v1.jobtemplate.JobTemplateLock(other.lock);
    }
    this.publishedVersion = other.publishedVersion;
    if (other.isSetTyp()) {
      this.typ = other.typ;
    }
    if (other.isSetTeam()) {
      this.team = new com.wi.director.thrift.v1.team.TeamModular(other.team);
    }
    this.lastPublishedAt = other.lastPublishedAt;
    if (other.isSetLastAuthor()) {
      this.lastAuthor = new com.wi.director.thrift.v1.user.UserModular(other.lastAuthor);
    }
    if (other.isSetTemplates()) {
      List<com.wi.director.thrift.v1.jobtemplate.JobTemplateModular> __this__templates = new ArrayList<com.wi.director.thrift.v1.jobtemplate.JobTemplateModular>(other.templates.size());
      for (com.wi.director.thrift.v1.jobtemplate.JobTemplateModular other_element : other.templates) {
        __this__templates.add(new com.wi.director.thrift.v1.jobtemplate.JobTemplateModular(other_element));
      }
      this.templates = __this__templates;
    }
    if (other.isSetCounts()) {
      this.counts = new TemplateSetCounts(other.counts);
    }
    if (other.isSetTemplateTags()) {
      List<com.wi.director.thrift.v1.jobtemplate.TemplateTag> __this__templateTags = new ArrayList<com.wi.director.thrift.v1.jobtemplate.TemplateTag>(other.templateTags.size());
      for (com.wi.director.thrift.v1.jobtemplate.TemplateTag other_element : other.templateTags) {
        __this__templateTags.add(new com.wi.director.thrift.v1.jobtemplate.TemplateTag(other_element));
      }
      this.templateTags = __this__templateTags;
    }
    this.lastPublishedVersion = other.lastPublishedVersion;
    this.lastModifiedAt = other.lastModifiedAt;
    if (other.isSetAttributes()) {
      List<com.wi.director.thrift.v1.abac.AbacAttribute> __this__attributes = new ArrayList<com.wi.director.thrift.v1.abac.AbacAttribute>(other.attributes.size());
      for (com.wi.director.thrift.v1.abac.AbacAttribute other_element : other.attributes) {
        __this__attributes.add(new com.wi.director.thrift.v1.abac.AbacAttribute(other_element));
      }
      this.attributes = __this__attributes;
    }
  }

  public TemplateSet deepCopy() {
    return new TemplateSet(this);
  }

  @Override
  public void clear() {
    this.id = null;
    setInternalVersionIsSet(false);
    this.internalVersion = 0;
    setPublicVersionIsSet(false);
    this.publicVersion = 0;
    this.title = null;
    this.descrip = null;
    this.status = null;
    this.teamId = null;
    setLastAuthoredAtIsSet(false);
    this.lastAuthoredAt = 0;
    setPublishedAtIsSet(false);
    this.publishedAt = 0;
    setArchivedAtIsSet(false);
    this.archivedAt = 0;
    this.lastAuthorId = null;
    this.lock = null;
    setPublishedVersionIsSet(false);
    this.publishedVersion = 0;
    this.typ = null;
    this.team = null;
    setLastPublishedAtIsSet(false);
    this.lastPublishedAt = 0;
    this.lastAuthor = null;
    this.templates = null;
    this.counts = null;
    this.templateTags = null;
    setLastPublishedVersionIsSet(false);
    this.lastPublishedVersion = 0;
    setLastModifiedAtIsSet(false);
    this.lastModifiedAt = 0;
    this.attributes = null;
  }

  public String getId() {
    return this.id;
  }

  public TemplateSet setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  /**
   * Only increments when <a href="#Fn_TemplateSetService_update">update</a> is called.
   */
  public int getInternalVersion() {
    return this.internalVersion;
  }

  /**
   * Only increments when <a href="#Fn_TemplateSetService_update">update</a> is called.
   */
  public TemplateSet setInternalVersion(int internalVersion) {
    this.internalVersion = internalVersion;
    setInternalVersionIsSet(true);
    return this;
  }

  public void unsetInternalVersion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INTERNALVERSION_ISSET_ID);
  }

  /** Returns true if field internalVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetInternalVersion() {
    return EncodingUtils.testBit(__isset_bitfield, __INTERNALVERSION_ISSET_ID);
  }

  public void setInternalVersionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INTERNALVERSION_ISSET_ID, value);
  }

  /**
   * Increment logic for <code>publicVersion</code>:<br><br>
   * Normal team flow:<br>
   * 1. A new template set is created with <a href="#Fn_TemplateSetService_create">create</a>, initially <code>publicVersion=0</code> and <code>status=Unpublished</code>.<br>
   * 2. <code>publicVersion</code> increments by 1 from latest published <code>publicVersion</code> when <a href="#Fn_TemplateSetService_publish">publish</a> is called, and <code>status=Published</code>.<br>
   * 3. When a new edit is made with <a href="#Fn_TemplateSetService_update">update</a> on either published or unpublished template set, a new entry is created with <code>publicVersion=0</code> and <code>status=Unpublished</code>.<br>
   * 4. Repeat from step 2) or 3).<br><br>
   * Review team flow:<br>
   * 1. A new template set is created with <a href="#Fn_TemplateSetService_create">create</a>, initially <code>publicVersion=0</code> and <code>status=Unpublished</code>.<br>
   * 2. <code>publicVersion</code> increments by 1 from max <code>publicVersion</code> when <a href="#Fn_TemplateSetService_beginReview">beginReview</a> is called, and <code>status=InReview</code>. <code>publicVersion</code> does not change if this <code>internalVersion</code> has already been reviewed before, i.e., <code>publicVersion != 0</code>.<br>
   * 3. <a href="#Fn_TemplateSetService_endReview">endReview</a> must be called next to close review, making <code>status=Unpublished</code>.<br>
   * 4. A specific <code>publicVersion</code> must be used to call <a href="#Fn_TemplateSetService_publishVersion">publishVersion</a> and make <code>status=Published</code>.<br>
   * 5. When a new edit is made with <a href="#Fn_TemplateSetService_update">update</a> on either published or unpublished template set, a new entry is created with <code>publicVersion=0</code> and <code>status=Unpublished</code>.<br>
   * 6. Repeat from step 2) or 5).
   */
  public int getPublicVersion() {
    return this.publicVersion;
  }

  /**
   * Increment logic for <code>publicVersion</code>:<br><br>
   * Normal team flow:<br>
   * 1. A new template set is created with <a href="#Fn_TemplateSetService_create">create</a>, initially <code>publicVersion=0</code> and <code>status=Unpublished</code>.<br>
   * 2. <code>publicVersion</code> increments by 1 from latest published <code>publicVersion</code> when <a href="#Fn_TemplateSetService_publish">publish</a> is called, and <code>status=Published</code>.<br>
   * 3. When a new edit is made with <a href="#Fn_TemplateSetService_update">update</a> on either published or unpublished template set, a new entry is created with <code>publicVersion=0</code> and <code>status=Unpublished</code>.<br>
   * 4. Repeat from step 2) or 3).<br><br>
   * Review team flow:<br>
   * 1. A new template set is created with <a href="#Fn_TemplateSetService_create">create</a>, initially <code>publicVersion=0</code> and <code>status=Unpublished</code>.<br>
   * 2. <code>publicVersion</code> increments by 1 from max <code>publicVersion</code> when <a href="#Fn_TemplateSetService_beginReview">beginReview</a> is called, and <code>status=InReview</code>. <code>publicVersion</code> does not change if this <code>internalVersion</code> has already been reviewed before, i.e., <code>publicVersion != 0</code>.<br>
   * 3. <a href="#Fn_TemplateSetService_endReview">endReview</a> must be called next to close review, making <code>status=Unpublished</code>.<br>
   * 4. A specific <code>publicVersion</code> must be used to call <a href="#Fn_TemplateSetService_publishVersion">publishVersion</a> and make <code>status=Published</code>.<br>
   * 5. When a new edit is made with <a href="#Fn_TemplateSetService_update">update</a> on either published or unpublished template set, a new entry is created with <code>publicVersion=0</code> and <code>status=Unpublished</code>.<br>
   * 6. Repeat from step 2) or 5).
   */
  public TemplateSet setPublicVersion(int publicVersion) {
    this.publicVersion = publicVersion;
    setPublicVersionIsSet(true);
    return this;
  }

  public void unsetPublicVersion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PUBLICVERSION_ISSET_ID);
  }

  /** Returns true if field publicVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetPublicVersion() {
    return EncodingUtils.testBit(__isset_bitfield, __PUBLICVERSION_ISSET_ID);
  }

  public void setPublicVersionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PUBLICVERSION_ISSET_ID, value);
  }

  public String getTitle() {
    return this.title;
  }

  public TemplateSet setTitle(String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public String getDescrip() {
    return this.descrip;
  }

  public TemplateSet setDescrip(String descrip) {
    this.descrip = descrip;
    return this;
  }

  public void unsetDescrip() {
    this.descrip = null;
  }

  /** Returns true if field descrip is set (has been assigned a value) and false otherwise */
  public boolean isSetDescrip() {
    return this.descrip != null;
  }

  public void setDescripIsSet(boolean value) {
    if (!value) {
      this.descrip = null;
    }
  }

  /**
   * 
   * @see com.wi.director.thrift.v1.jobtemplate.JobTemplateStatus
   */
  public com.wi.director.thrift.v1.jobtemplate.JobTemplateStatus getStatus() {
    return this.status;
  }

  /**
   * 
   * @see com.wi.director.thrift.v1.jobtemplate.JobTemplateStatus
   */
  public TemplateSet setStatus(com.wi.director.thrift.v1.jobtemplate.JobTemplateStatus status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public String getTeamId() {
    return this.teamId;
  }

  public TemplateSet setTeamId(String teamId) {
    this.teamId = teamId;
    return this;
  }

  public void unsetTeamId() {
    this.teamId = null;
  }

  /** Returns true if field teamId is set (has been assigned a value) and false otherwise */
  public boolean isSetTeamId() {
    return this.teamId != null;
  }

  public void setTeamIdIsSet(boolean value) {
    if (!value) {
      this.teamId = null;
    }
  }

  public long getLastAuthoredAt() {
    return this.lastAuthoredAt;
  }

  public TemplateSet setLastAuthoredAt(long lastAuthoredAt) {
    this.lastAuthoredAt = lastAuthoredAt;
    setLastAuthoredAtIsSet(true);
    return this;
  }

  public void unsetLastAuthoredAt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTAUTHOREDAT_ISSET_ID);
  }

  /** Returns true if field lastAuthoredAt is set (has been assigned a value) and false otherwise */
  public boolean isSetLastAuthoredAt() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTAUTHOREDAT_ISSET_ID);
  }

  public void setLastAuthoredAtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTAUTHOREDAT_ISSET_ID, value);
  }

  public long getPublishedAt() {
    return this.publishedAt;
  }

  public TemplateSet setPublishedAt(long publishedAt) {
    this.publishedAt = publishedAt;
    setPublishedAtIsSet(true);
    return this;
  }

  public void unsetPublishedAt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PUBLISHEDAT_ISSET_ID);
  }

  /** Returns true if field publishedAt is set (has been assigned a value) and false otherwise */
  public boolean isSetPublishedAt() {
    return EncodingUtils.testBit(__isset_bitfield, __PUBLISHEDAT_ISSET_ID);
  }

  public void setPublishedAtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PUBLISHEDAT_ISSET_ID, value);
  }

  public long getArchivedAt() {
    return this.archivedAt;
  }

  public TemplateSet setArchivedAt(long archivedAt) {
    this.archivedAt = archivedAt;
    setArchivedAtIsSet(true);
    return this;
  }

  public void unsetArchivedAt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ARCHIVEDAT_ISSET_ID);
  }

  /** Returns true if field archivedAt is set (has been assigned a value) and false otherwise */
  public boolean isSetArchivedAt() {
    return EncodingUtils.testBit(__isset_bitfield, __ARCHIVEDAT_ISSET_ID);
  }

  public void setArchivedAtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ARCHIVEDAT_ISSET_ID, value);
  }

  public String getLastAuthorId() {
    return this.lastAuthorId;
  }

  public TemplateSet setLastAuthorId(String lastAuthorId) {
    this.lastAuthorId = lastAuthorId;
    return this;
  }

  public void unsetLastAuthorId() {
    this.lastAuthorId = null;
  }

  /** Returns true if field lastAuthorId is set (has been assigned a value) and false otherwise */
  public boolean isSetLastAuthorId() {
    return this.lastAuthorId != null;
  }

  public void setLastAuthorIdIsSet(boolean value) {
    if (!value) {
      this.lastAuthorId = null;
    }
  }

  /**
   * Status of lock by another user. Internal authoring lock
   */
  public com.wi.director.thrift.v1.jobtemplate.JobTemplateLock getLock() {
    return this.lock;
  }

  /**
   * Status of lock by another user. Internal authoring lock
   */
  public TemplateSet setLock(com.wi.director.thrift.v1.jobtemplate.JobTemplateLock lock) {
    this.lock = lock;
    return this;
  }

  public void unsetLock() {
    this.lock = null;
  }

  /** Returns true if field lock is set (has been assigned a value) and false otherwise */
  public boolean isSetLock() {
    return this.lock != null;
  }

  public void setLockIsSet(boolean value) {
    if (!value) {
      this.lock = null;
    }
  }

  /**
   * Only increments when <a href="#Fn_TemplateSetService_publish">publish</a> or <a href="#Fn_TemplateSetService_publishVersion">publishVersion</a> is called.
   * Is the same as <code>publicVersion</code> for normal teams, and only increments on publish for review teams.
   * Is 0 for all template sets with <code>status!=Published</code>.
   */
  public int getPublishedVersion() {
    return this.publishedVersion;
  }

  /**
   * Only increments when <a href="#Fn_TemplateSetService_publish">publish</a> or <a href="#Fn_TemplateSetService_publishVersion">publishVersion</a> is called.
   * Is the same as <code>publicVersion</code> for normal teams, and only increments on publish for review teams.
   * Is 0 for all template sets with <code>status!=Published</code>.
   */
  public TemplateSet setPublishedVersion(int publishedVersion) {
    this.publishedVersion = publishedVersion;
    setPublishedVersionIsSet(true);
    return this;
  }

  public void unsetPublishedVersion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PUBLISHEDVERSION_ISSET_ID);
  }

  /** Returns true if field publishedVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetPublishedVersion() {
    return EncodingUtils.testBit(__isset_bitfield, __PUBLISHEDVERSION_ISSET_ID);
  }

  public void setPublishedVersionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PUBLISHEDVERSION_ISSET_ID, value);
  }

  /**
   * 
   * @see com.wi.director.thrift.v1.jobtemplate.TemplateType
   */
  public com.wi.director.thrift.v1.jobtemplate.TemplateType getTyp() {
    return this.typ;
  }

  /**
   * 
   * @see com.wi.director.thrift.v1.jobtemplate.TemplateType
   */
  public TemplateSet setTyp(com.wi.director.thrift.v1.jobtemplate.TemplateType typ) {
    this.typ = typ;
    return this;
  }

  public void unsetTyp() {
    this.typ = null;
  }

  /** Returns true if field typ is set (has been assigned a value) and false otherwise */
  public boolean isSetTyp() {
    return this.typ != null;
  }

  public void setTypIsSet(boolean value) {
    if (!value) {
      this.typ = null;
    }
  }

  public com.wi.director.thrift.v1.team.TeamModular getTeam() {
    return this.team;
  }

  public TemplateSet setTeam(com.wi.director.thrift.v1.team.TeamModular team) {
    this.team = team;
    return this;
  }

  public void unsetTeam() {
    this.team = null;
  }

  /** Returns true if field team is set (has been assigned a value) and false otherwise */
  public boolean isSetTeam() {
    return this.team != null;
  }

  public void setTeamIsSet(boolean value) {
    if (!value) {
      this.team = null;
    }
  }

  /**
   * last published time for this template set. 0 if not published
   */
  public long getLastPublishedAt() {
    return this.lastPublishedAt;
  }

  /**
   * last published time for this template set. 0 if not published
   */
  public TemplateSet setLastPublishedAt(long lastPublishedAt) {
    this.lastPublishedAt = lastPublishedAt;
    setLastPublishedAtIsSet(true);
    return this;
  }

  public void unsetLastPublishedAt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTPUBLISHEDAT_ISSET_ID);
  }

  /** Returns true if field lastPublishedAt is set (has been assigned a value) and false otherwise */
  public boolean isSetLastPublishedAt() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTPUBLISHEDAT_ISSET_ID);
  }

  public void setLastPublishedAtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTPUBLISHEDAT_ISSET_ID, value);
  }

  public com.wi.director.thrift.v1.user.UserModular getLastAuthor() {
    return this.lastAuthor;
  }

  public TemplateSet setLastAuthor(com.wi.director.thrift.v1.user.UserModular lastAuthor) {
    this.lastAuthor = lastAuthor;
    return this;
  }

  public void unsetLastAuthor() {
    this.lastAuthor = null;
  }

  /** Returns true if field lastAuthor is set (has been assigned a value) and false otherwise */
  public boolean isSetLastAuthor() {
    return this.lastAuthor != null;
  }

  public void setLastAuthorIsSet(boolean value) {
    if (!value) {
      this.lastAuthor = null;
    }
  }

  public int getTemplatesSize() {
    return (this.templates == null) ? 0 : this.templates.size();
  }

  public java.util.Iterator<com.wi.director.thrift.v1.jobtemplate.JobTemplateModular> getTemplatesIterator() {
    return (this.templates == null) ? null : this.templates.iterator();
  }

  public void addToTemplates(com.wi.director.thrift.v1.jobtemplate.JobTemplateModular elem) {
    if (this.templates == null) {
      this.templates = new ArrayList<com.wi.director.thrift.v1.jobtemplate.JobTemplateModular>();
    }
    this.templates.add(elem);
  }

  public List<com.wi.director.thrift.v1.jobtemplate.JobTemplateModular> getTemplates() {
    return this.templates;
  }

  public TemplateSet setTemplates(List<com.wi.director.thrift.v1.jobtemplate.JobTemplateModular> templates) {
    this.templates = templates;
    return this;
  }

  public void unsetTemplates() {
    this.templates = null;
  }

  /** Returns true if field templates is set (has been assigned a value) and false otherwise */
  public boolean isSetTemplates() {
    return this.templates != null;
  }

  public void setTemplatesIsSet(boolean value) {
    if (!value) {
      this.templates = null;
    }
  }

  public TemplateSetCounts getCounts() {
    return this.counts;
  }

  public TemplateSet setCounts(TemplateSetCounts counts) {
    this.counts = counts;
    return this;
  }

  public void unsetCounts() {
    this.counts = null;
  }

  /** Returns true if field counts is set (has been assigned a value) and false otherwise */
  public boolean isSetCounts() {
    return this.counts != null;
  }

  public void setCountsIsSet(boolean value) {
    if (!value) {
      this.counts = null;
    }
  }

  public int getTemplateTagsSize() {
    return (this.templateTags == null) ? 0 : this.templateTags.size();
  }

  public java.util.Iterator<com.wi.director.thrift.v1.jobtemplate.TemplateTag> getTemplateTagsIterator() {
    return (this.templateTags == null) ? null : this.templateTags.iterator();
  }

  public void addToTemplateTags(com.wi.director.thrift.v1.jobtemplate.TemplateTag elem) {
    if (this.templateTags == null) {
      this.templateTags = new ArrayList<com.wi.director.thrift.v1.jobtemplate.TemplateTag>();
    }
    this.templateTags.add(elem);
  }

  public List<com.wi.director.thrift.v1.jobtemplate.TemplateTag> getTemplateTags() {
    return this.templateTags;
  }

  public TemplateSet setTemplateTags(List<com.wi.director.thrift.v1.jobtemplate.TemplateTag> templateTags) {
    this.templateTags = templateTags;
    return this;
  }

  public void unsetTemplateTags() {
    this.templateTags = null;
  }

  /** Returns true if field templateTags is set (has been assigned a value) and false otherwise */
  public boolean isSetTemplateTags() {
    return this.templateTags != null;
  }

  public void setTemplateTagsIsSet(boolean value) {
    if (!value) {
      this.templateTags = null;
    }
  }

  /**
   * last published version (public version) for this template set. 0 if not published
   */
  public int getLastPublishedVersion() {
    return this.lastPublishedVersion;
  }

  /**
   * last published version (public version) for this template set. 0 if not published
   */
  public TemplateSet setLastPublishedVersion(int lastPublishedVersion) {
    this.lastPublishedVersion = lastPublishedVersion;
    setLastPublishedVersionIsSet(true);
    return this;
  }

  public void unsetLastPublishedVersion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTPUBLISHEDVERSION_ISSET_ID);
  }

  /** Returns true if field lastPublishedVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetLastPublishedVersion() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTPUBLISHEDVERSION_ISSET_ID);
  }

  public void setLastPublishedVersionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTPUBLISHEDVERSION_ISSET_ID, value);
  }

  /**
   * Bumps up on edit, status change, archive
   */
  public long getLastModifiedAt() {
    return this.lastModifiedAt;
  }

  /**
   * Bumps up on edit, status change, archive
   */
  public TemplateSet setLastModifiedAt(long lastModifiedAt) {
    this.lastModifiedAt = lastModifiedAt;
    setLastModifiedAtIsSet(true);
    return this;
  }

  public void unsetLastModifiedAt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTMODIFIEDAT_ISSET_ID);
  }

  /** Returns true if field lastModifiedAt is set (has been assigned a value) and false otherwise */
  public boolean isSetLastModifiedAt() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTMODIFIEDAT_ISSET_ID);
  }

  public void setLastModifiedAtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTMODIFIEDAT_ISSET_ID, value);
  }

  public int getAttributesSize() {
    return (this.attributes == null) ? 0 : this.attributes.size();
  }

  public java.util.Iterator<com.wi.director.thrift.v1.abac.AbacAttribute> getAttributesIterator() {
    return (this.attributes == null) ? null : this.attributes.iterator();
  }

  public void addToAttributes(com.wi.director.thrift.v1.abac.AbacAttribute elem) {
    if (this.attributes == null) {
      this.attributes = new ArrayList<com.wi.director.thrift.v1.abac.AbacAttribute>();
    }
    this.attributes.add(elem);
  }

  public List<com.wi.director.thrift.v1.abac.AbacAttribute> getAttributes() {
    return this.attributes;
  }

  public TemplateSet setAttributes(List<com.wi.director.thrift.v1.abac.AbacAttribute> attributes) {
    this.attributes = attributes;
    return this;
  }

  public void unsetAttributes() {
    this.attributes = null;
  }

  /** Returns true if field attributes is set (has been assigned a value) and false otherwise */
  public boolean isSetAttributes() {
    return this.attributes != null;
  }

  public void setAttributesIsSet(boolean value) {
    if (!value) {
      this.attributes = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case INTERNAL_VERSION:
      if (value == null) {
        unsetInternalVersion();
      } else {
        setInternalVersion((Integer)value);
      }
      break;

    case PUBLIC_VERSION:
      if (value == null) {
        unsetPublicVersion();
      } else {
        setPublicVersion((Integer)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((String)value);
      }
      break;

    case DESCRIP:
      if (value == null) {
        unsetDescrip();
      } else {
        setDescrip((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((com.wi.director.thrift.v1.jobtemplate.JobTemplateStatus)value);
      }
      break;

    case TEAM_ID:
      if (value == null) {
        unsetTeamId();
      } else {
        setTeamId((String)value);
      }
      break;

    case LAST_AUTHORED_AT:
      if (value == null) {
        unsetLastAuthoredAt();
      } else {
        setLastAuthoredAt((Long)value);
      }
      break;

    case PUBLISHED_AT:
      if (value == null) {
        unsetPublishedAt();
      } else {
        setPublishedAt((Long)value);
      }
      break;

    case ARCHIVED_AT:
      if (value == null) {
        unsetArchivedAt();
      } else {
        setArchivedAt((Long)value);
      }
      break;

    case LAST_AUTHOR_ID:
      if (value == null) {
        unsetLastAuthorId();
      } else {
        setLastAuthorId((String)value);
      }
      break;

    case LOCK:
      if (value == null) {
        unsetLock();
      } else {
        setLock((com.wi.director.thrift.v1.jobtemplate.JobTemplateLock)value);
      }
      break;

    case PUBLISHED_VERSION:
      if (value == null) {
        unsetPublishedVersion();
      } else {
        setPublishedVersion((Integer)value);
      }
      break;

    case TYP:
      if (value == null) {
        unsetTyp();
      } else {
        setTyp((com.wi.director.thrift.v1.jobtemplate.TemplateType)value);
      }
      break;

    case TEAM:
      if (value == null) {
        unsetTeam();
      } else {
        setTeam((com.wi.director.thrift.v1.team.TeamModular)value);
      }
      break;

    case LAST_PUBLISHED_AT:
      if (value == null) {
        unsetLastPublishedAt();
      } else {
        setLastPublishedAt((Long)value);
      }
      break;

    case LAST_AUTHOR:
      if (value == null) {
        unsetLastAuthor();
      } else {
        setLastAuthor((com.wi.director.thrift.v1.user.UserModular)value);
      }
      break;

    case TEMPLATES:
      if (value == null) {
        unsetTemplates();
      } else {
        setTemplates((List<com.wi.director.thrift.v1.jobtemplate.JobTemplateModular>)value);
      }
      break;

    case COUNTS:
      if (value == null) {
        unsetCounts();
      } else {
        setCounts((TemplateSetCounts)value);
      }
      break;

    case TEMPLATE_TAGS:
      if (value == null) {
        unsetTemplateTags();
      } else {
        setTemplateTags((List<com.wi.director.thrift.v1.jobtemplate.TemplateTag>)value);
      }
      break;

    case LAST_PUBLISHED_VERSION:
      if (value == null) {
        unsetLastPublishedVersion();
      } else {
        setLastPublishedVersion((Integer)value);
      }
      break;

    case LAST_MODIFIED_AT:
      if (value == null) {
        unsetLastModifiedAt();
      } else {
        setLastModifiedAt((Long)value);
      }
      break;

    case ATTRIBUTES:
      if (value == null) {
        unsetAttributes();
      } else {
        setAttributes((List<com.wi.director.thrift.v1.abac.AbacAttribute>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case INTERNAL_VERSION:
      return getInternalVersion();

    case PUBLIC_VERSION:
      return getPublicVersion();

    case TITLE:
      return getTitle();

    case DESCRIP:
      return getDescrip();

    case STATUS:
      return getStatus();

    case TEAM_ID:
      return getTeamId();

    case LAST_AUTHORED_AT:
      return getLastAuthoredAt();

    case PUBLISHED_AT:
      return getPublishedAt();

    case ARCHIVED_AT:
      return getArchivedAt();

    case LAST_AUTHOR_ID:
      return getLastAuthorId();

    case LOCK:
      return getLock();

    case PUBLISHED_VERSION:
      return getPublishedVersion();

    case TYP:
      return getTyp();

    case TEAM:
      return getTeam();

    case LAST_PUBLISHED_AT:
      return getLastPublishedAt();

    case LAST_AUTHOR:
      return getLastAuthor();

    case TEMPLATES:
      return getTemplates();

    case COUNTS:
      return getCounts();

    case TEMPLATE_TAGS:
      return getTemplateTags();

    case LAST_PUBLISHED_VERSION:
      return getLastPublishedVersion();

    case LAST_MODIFIED_AT:
      return getLastModifiedAt();

    case ATTRIBUTES:
      return getAttributes();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case INTERNAL_VERSION:
      return isSetInternalVersion();
    case PUBLIC_VERSION:
      return isSetPublicVersion();
    case TITLE:
      return isSetTitle();
    case DESCRIP:
      return isSetDescrip();
    case STATUS:
      return isSetStatus();
    case TEAM_ID:
      return isSetTeamId();
    case LAST_AUTHORED_AT:
      return isSetLastAuthoredAt();
    case PUBLISHED_AT:
      return isSetPublishedAt();
    case ARCHIVED_AT:
      return isSetArchivedAt();
    case LAST_AUTHOR_ID:
      return isSetLastAuthorId();
    case LOCK:
      return isSetLock();
    case PUBLISHED_VERSION:
      return isSetPublishedVersion();
    case TYP:
      return isSetTyp();
    case TEAM:
      return isSetTeam();
    case LAST_PUBLISHED_AT:
      return isSetLastPublishedAt();
    case LAST_AUTHOR:
      return isSetLastAuthor();
    case TEMPLATES:
      return isSetTemplates();
    case COUNTS:
      return isSetCounts();
    case TEMPLATE_TAGS:
      return isSetTemplateTags();
    case LAST_PUBLISHED_VERSION:
      return isSetLastPublishedVersion();
    case LAST_MODIFIED_AT:
      return isSetLastModifiedAt();
    case ATTRIBUTES:
      return isSetAttributes();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TemplateSet)
      return this.equals((TemplateSet)that);
    return false;
  }

  public boolean equals(TemplateSet that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_internalVersion = true;
    boolean that_present_internalVersion = true;
    if (this_present_internalVersion || that_present_internalVersion) {
      if (!(this_present_internalVersion && that_present_internalVersion))
        return false;
      if (this.internalVersion != that.internalVersion)
        return false;
    }

    boolean this_present_publicVersion = true;
    boolean that_present_publicVersion = true;
    if (this_present_publicVersion || that_present_publicVersion) {
      if (!(this_present_publicVersion && that_present_publicVersion))
        return false;
      if (this.publicVersion != that.publicVersion)
        return false;
    }

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_descrip = true && this.isSetDescrip();
    boolean that_present_descrip = true && that.isSetDescrip();
    if (this_present_descrip || that_present_descrip) {
      if (!(this_present_descrip && that_present_descrip))
        return false;
      if (!this.descrip.equals(that.descrip))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_teamId = true && this.isSetTeamId();
    boolean that_present_teamId = true && that.isSetTeamId();
    if (this_present_teamId || that_present_teamId) {
      if (!(this_present_teamId && that_present_teamId))
        return false;
      if (!this.teamId.equals(that.teamId))
        return false;
    }

    boolean this_present_lastAuthoredAt = true;
    boolean that_present_lastAuthoredAt = true;
    if (this_present_lastAuthoredAt || that_present_lastAuthoredAt) {
      if (!(this_present_lastAuthoredAt && that_present_lastAuthoredAt))
        return false;
      if (this.lastAuthoredAt != that.lastAuthoredAt)
        return false;
    }

    boolean this_present_publishedAt = true;
    boolean that_present_publishedAt = true;
    if (this_present_publishedAt || that_present_publishedAt) {
      if (!(this_present_publishedAt && that_present_publishedAt))
        return false;
      if (this.publishedAt != that.publishedAt)
        return false;
    }

    boolean this_present_archivedAt = true;
    boolean that_present_archivedAt = true;
    if (this_present_archivedAt || that_present_archivedAt) {
      if (!(this_present_archivedAt && that_present_archivedAt))
        return false;
      if (this.archivedAt != that.archivedAt)
        return false;
    }

    boolean this_present_lastAuthorId = true && this.isSetLastAuthorId();
    boolean that_present_lastAuthorId = true && that.isSetLastAuthorId();
    if (this_present_lastAuthorId || that_present_lastAuthorId) {
      if (!(this_present_lastAuthorId && that_present_lastAuthorId))
        return false;
      if (!this.lastAuthorId.equals(that.lastAuthorId))
        return false;
    }

    boolean this_present_lock = true && this.isSetLock();
    boolean that_present_lock = true && that.isSetLock();
    if (this_present_lock || that_present_lock) {
      if (!(this_present_lock && that_present_lock))
        return false;
      if (!this.lock.equals(that.lock))
        return false;
    }

    boolean this_present_publishedVersion = true;
    boolean that_present_publishedVersion = true;
    if (this_present_publishedVersion || that_present_publishedVersion) {
      if (!(this_present_publishedVersion && that_present_publishedVersion))
        return false;
      if (this.publishedVersion != that.publishedVersion)
        return false;
    }

    boolean this_present_typ = true && this.isSetTyp();
    boolean that_present_typ = true && that.isSetTyp();
    if (this_present_typ || that_present_typ) {
      if (!(this_present_typ && that_present_typ))
        return false;
      if (!this.typ.equals(that.typ))
        return false;
    }

    boolean this_present_team = true && this.isSetTeam();
    boolean that_present_team = true && that.isSetTeam();
    if (this_present_team || that_present_team) {
      if (!(this_present_team && that_present_team))
        return false;
      if (!this.team.equals(that.team))
        return false;
    }

    boolean this_present_lastPublishedAt = true && this.isSetLastPublishedAt();
    boolean that_present_lastPublishedAt = true && that.isSetLastPublishedAt();
    if (this_present_lastPublishedAt || that_present_lastPublishedAt) {
      if (!(this_present_lastPublishedAt && that_present_lastPublishedAt))
        return false;
      if (this.lastPublishedAt != that.lastPublishedAt)
        return false;
    }

    boolean this_present_lastAuthor = true && this.isSetLastAuthor();
    boolean that_present_lastAuthor = true && that.isSetLastAuthor();
    if (this_present_lastAuthor || that_present_lastAuthor) {
      if (!(this_present_lastAuthor && that_present_lastAuthor))
        return false;
      if (!this.lastAuthor.equals(that.lastAuthor))
        return false;
    }

    boolean this_present_templates = true && this.isSetTemplates();
    boolean that_present_templates = true && that.isSetTemplates();
    if (this_present_templates || that_present_templates) {
      if (!(this_present_templates && that_present_templates))
        return false;
      if (!this.templates.equals(that.templates))
        return false;
    }

    boolean this_present_counts = true && this.isSetCounts();
    boolean that_present_counts = true && that.isSetCounts();
    if (this_present_counts || that_present_counts) {
      if (!(this_present_counts && that_present_counts))
        return false;
      if (!this.counts.equals(that.counts))
        return false;
    }

    boolean this_present_templateTags = true && this.isSetTemplateTags();
    boolean that_present_templateTags = true && that.isSetTemplateTags();
    if (this_present_templateTags || that_present_templateTags) {
      if (!(this_present_templateTags && that_present_templateTags))
        return false;
      if (!this.templateTags.equals(that.templateTags))
        return false;
    }

    boolean this_present_lastPublishedVersion = true && this.isSetLastPublishedVersion();
    boolean that_present_lastPublishedVersion = true && that.isSetLastPublishedVersion();
    if (this_present_lastPublishedVersion || that_present_lastPublishedVersion) {
      if (!(this_present_lastPublishedVersion && that_present_lastPublishedVersion))
        return false;
      if (this.lastPublishedVersion != that.lastPublishedVersion)
        return false;
    }

    boolean this_present_lastModifiedAt = true && this.isSetLastModifiedAt();
    boolean that_present_lastModifiedAt = true && that.isSetLastModifiedAt();
    if (this_present_lastModifiedAt || that_present_lastModifiedAt) {
      if (!(this_present_lastModifiedAt && that_present_lastModifiedAt))
        return false;
      if (this.lastModifiedAt != that.lastModifiedAt)
        return false;
    }

    boolean this_present_attributes = true && this.isSetAttributes();
    boolean that_present_attributes = true && that.isSetAttributes();
    if (this_present_attributes || that_present_attributes) {
      if (!(this_present_attributes && that_present_attributes))
        return false;
      if (!this.attributes.equals(that.attributes))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_internalVersion = true;
    list.add(present_internalVersion);
    if (present_internalVersion)
      list.add(internalVersion);

    boolean present_publicVersion = true;
    list.add(present_publicVersion);
    if (present_publicVersion)
      list.add(publicVersion);

    boolean present_title = true && (isSetTitle());
    list.add(present_title);
    if (present_title)
      list.add(title);

    boolean present_descrip = true && (isSetDescrip());
    list.add(present_descrip);
    if (present_descrip)
      list.add(descrip);

    boolean present_status = true && (isSetStatus());
    list.add(present_status);
    if (present_status)
      list.add(status.getValue());

    boolean present_teamId = true && (isSetTeamId());
    list.add(present_teamId);
    if (present_teamId)
      list.add(teamId);

    boolean present_lastAuthoredAt = true;
    list.add(present_lastAuthoredAt);
    if (present_lastAuthoredAt)
      list.add(lastAuthoredAt);

    boolean present_publishedAt = true;
    list.add(present_publishedAt);
    if (present_publishedAt)
      list.add(publishedAt);

    boolean present_archivedAt = true;
    list.add(present_archivedAt);
    if (present_archivedAt)
      list.add(archivedAt);

    boolean present_lastAuthorId = true && (isSetLastAuthorId());
    list.add(present_lastAuthorId);
    if (present_lastAuthorId)
      list.add(lastAuthorId);

    boolean present_lock = true && (isSetLock());
    list.add(present_lock);
    if (present_lock)
      list.add(lock);

    boolean present_publishedVersion = true;
    list.add(present_publishedVersion);
    if (present_publishedVersion)
      list.add(publishedVersion);

    boolean present_typ = true && (isSetTyp());
    list.add(present_typ);
    if (present_typ)
      list.add(typ.getValue());

    boolean present_team = true && (isSetTeam());
    list.add(present_team);
    if (present_team)
      list.add(team);

    boolean present_lastPublishedAt = true && (isSetLastPublishedAt());
    list.add(present_lastPublishedAt);
    if (present_lastPublishedAt)
      list.add(lastPublishedAt);

    boolean present_lastAuthor = true && (isSetLastAuthor());
    list.add(present_lastAuthor);
    if (present_lastAuthor)
      list.add(lastAuthor);

    boolean present_templates = true && (isSetTemplates());
    list.add(present_templates);
    if (present_templates)
      list.add(templates);

    boolean present_counts = true && (isSetCounts());
    list.add(present_counts);
    if (present_counts)
      list.add(counts);

    boolean present_templateTags = true && (isSetTemplateTags());
    list.add(present_templateTags);
    if (present_templateTags)
      list.add(templateTags);

    boolean present_lastPublishedVersion = true && (isSetLastPublishedVersion());
    list.add(present_lastPublishedVersion);
    if (present_lastPublishedVersion)
      list.add(lastPublishedVersion);

    boolean present_lastModifiedAt = true && (isSetLastModifiedAt());
    list.add(present_lastModifiedAt);
    if (present_lastModifiedAt)
      list.add(lastModifiedAt);

    boolean present_attributes = true && (isSetAttributes());
    list.add(present_attributes);
    if (present_attributes)
      list.add(attributes);

    return list.hashCode();
  }

  @Override
  public int compareTo(TemplateSet other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInternalVersion()).compareTo(other.isSetInternalVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInternalVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.internalVersion, other.internalVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPublicVersion()).compareTo(other.isSetPublicVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPublicVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.publicVersion, other.publicVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTitle()).compareTo(other.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescrip()).compareTo(other.isSetDescrip());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescrip()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.descrip, other.descrip);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTeamId()).compareTo(other.isSetTeamId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeamId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teamId, other.teamId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastAuthoredAt()).compareTo(other.isSetLastAuthoredAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastAuthoredAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastAuthoredAt, other.lastAuthoredAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPublishedAt()).compareTo(other.isSetPublishedAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPublishedAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.publishedAt, other.publishedAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArchivedAt()).compareTo(other.isSetArchivedAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArchivedAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.archivedAt, other.archivedAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastAuthorId()).compareTo(other.isSetLastAuthorId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastAuthorId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastAuthorId, other.lastAuthorId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLock()).compareTo(other.isSetLock());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLock()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lock, other.lock);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPublishedVersion()).compareTo(other.isSetPublishedVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPublishedVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.publishedVersion, other.publishedVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTyp()).compareTo(other.isSetTyp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTyp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.typ, other.typ);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTeam()).compareTo(other.isSetTeam());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeam()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.team, other.team);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastPublishedAt()).compareTo(other.isSetLastPublishedAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastPublishedAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastPublishedAt, other.lastPublishedAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastAuthor()).compareTo(other.isSetLastAuthor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastAuthor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastAuthor, other.lastAuthor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTemplates()).compareTo(other.isSetTemplates());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTemplates()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.templates, other.templates);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCounts()).compareTo(other.isSetCounts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCounts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.counts, other.counts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTemplateTags()).compareTo(other.isSetTemplateTags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTemplateTags()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.templateTags, other.templateTags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastPublishedVersion()).compareTo(other.isSetLastPublishedVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastPublishedVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastPublishedVersion, other.lastPublishedVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastModifiedAt()).compareTo(other.isSetLastModifiedAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastModifiedAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastModifiedAt, other.lastModifiedAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAttributes()).compareTo(other.isSetAttributes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAttributes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attributes, other.attributes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TemplateSet(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("internalVersion:");
    sb.append(this.internalVersion);
    first = false;
    if (!first) sb.append(", ");
    sb.append("publicVersion:");
    sb.append(this.publicVersion);
    first = false;
    if (!first) sb.append(", ");
    sb.append("title:");
    if (this.title == null) {
      sb.append("null");
    } else {
      sb.append(this.title);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("descrip:");
    if (this.descrip == null) {
      sb.append("null");
    } else {
      sb.append(this.descrip);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("teamId:");
    if (this.teamId == null) {
      sb.append("null");
    } else {
      sb.append(this.teamId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastAuthoredAt:");
    sb.append(this.lastAuthoredAt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("publishedAt:");
    sb.append(this.publishedAt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("archivedAt:");
    sb.append(this.archivedAt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastAuthorId:");
    if (this.lastAuthorId == null) {
      sb.append("null");
    } else {
      sb.append(this.lastAuthorId);
    }
    first = false;
    if (isSetLock()) {
      if (!first) sb.append(", ");
      sb.append("lock:");
      if (this.lock == null) {
        sb.append("null");
      } else {
        sb.append(this.lock);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("publishedVersion:");
    sb.append(this.publishedVersion);
    first = false;
    if (!first) sb.append(", ");
    sb.append("typ:");
    if (this.typ == null) {
      sb.append("null");
    } else {
      sb.append(this.typ);
    }
    first = false;
    if (isSetTeam()) {
      if (!first) sb.append(", ");
      sb.append("team:");
      if (this.team == null) {
        sb.append("null");
      } else {
        sb.append(this.team);
      }
      first = false;
    }
    if (isSetLastPublishedAt()) {
      if (!first) sb.append(", ");
      sb.append("lastPublishedAt:");
      sb.append(this.lastPublishedAt);
      first = false;
    }
    if (isSetLastAuthor()) {
      if (!first) sb.append(", ");
      sb.append("lastAuthor:");
      if (this.lastAuthor == null) {
        sb.append("null");
      } else {
        sb.append(this.lastAuthor);
      }
      first = false;
    }
    if (isSetTemplates()) {
      if (!first) sb.append(", ");
      sb.append("templates:");
      if (this.templates == null) {
        sb.append("null");
      } else {
        sb.append(this.templates);
      }
      first = false;
    }
    if (isSetCounts()) {
      if (!first) sb.append(", ");
      sb.append("counts:");
      if (this.counts == null) {
        sb.append("null");
      } else {
        sb.append(this.counts);
      }
      first = false;
    }
    if (isSetTemplateTags()) {
      if (!first) sb.append(", ");
      sb.append("templateTags:");
      if (this.templateTags == null) {
        sb.append("null");
      } else {
        sb.append(this.templateTags);
      }
      first = false;
    }
    if (isSetLastPublishedVersion()) {
      if (!first) sb.append(", ");
      sb.append("lastPublishedVersion:");
      sb.append(this.lastPublishedVersion);
      first = false;
    }
    if (isSetLastModifiedAt()) {
      if (!first) sb.append(", ");
      sb.append("lastModifiedAt:");
      sb.append(this.lastModifiedAt);
      first = false;
    }
    if (isSetAttributes()) {
      if (!first) sb.append(", ");
      sb.append("attributes:");
      if (this.attributes == null) {
        sb.append("null");
      } else {
        sb.append(this.attributes);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (lock != null) {
      lock.validate();
    }
    if (team != null) {
      team.validate();
    }
    if (lastAuthor != null) {
      lastAuthor.validate();
    }
    if (counts != null) {
      counts.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TemplateSetStandardSchemeFactory implements SchemeFactory {
    public TemplateSetStandardScheme getScheme() {
      return new TemplateSetStandardScheme();
    }
  }

  private static class TemplateSetStandardScheme extends StandardScheme<TemplateSet> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TemplateSet struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // INTERNAL_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.internalVersion = iprot.readI32();
              struct.setInternalVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PUBLIC_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.publicVersion = iprot.readI32();
              struct.setPublicVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DESCRIP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.descrip = iprot.readString();
              struct.setDescripIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = com.wi.director.thrift.v1.jobtemplate.JobTemplateStatus.findByValue(iprot.readI32());
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TEAM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.teamId = iprot.readString();
              struct.setTeamIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // LAST_AUTHORED_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastAuthoredAt = iprot.readI64();
              struct.setLastAuthoredAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PUBLISHED_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.publishedAt = iprot.readI64();
              struct.setPublishedAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ARCHIVED_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.archivedAt = iprot.readI64();
              struct.setArchivedAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // LAST_AUTHOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastAuthorId = iprot.readString();
              struct.setLastAuthorIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // LOCK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.lock = new com.wi.director.thrift.v1.jobtemplate.JobTemplateLock();
              struct.lock.read(iprot);
              struct.setLockIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // PUBLISHED_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.publishedVersion = iprot.readI32();
              struct.setPublishedVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // TYP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.typ = com.wi.director.thrift.v1.jobtemplate.TemplateType.findByValue(iprot.readI32());
              struct.setTypIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 101: // TEAM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.team = new com.wi.director.thrift.v1.team.TeamModular();
              struct.team.read(iprot);
              struct.setTeamIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 102: // LAST_PUBLISHED_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastPublishedAt = iprot.readI64();
              struct.setLastPublishedAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 103: // LAST_AUTHOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.lastAuthor = new com.wi.director.thrift.v1.user.UserModular();
              struct.lastAuthor.read(iprot);
              struct.setLastAuthorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 104: // TEMPLATES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.templates = new ArrayList<com.wi.director.thrift.v1.jobtemplate.JobTemplateModular>(_list0.size);
                com.wi.director.thrift.v1.jobtemplate.JobTemplateModular _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new com.wi.director.thrift.v1.jobtemplate.JobTemplateModular();
                  _elem1.read(iprot);
                  struct.templates.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setTemplatesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 105: // COUNTS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.counts = new TemplateSetCounts();
              struct.counts.read(iprot);
              struct.setCountsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 106: // TEMPLATE_TAGS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.templateTags = new ArrayList<com.wi.director.thrift.v1.jobtemplate.TemplateTag>(_list3.size);
                com.wi.director.thrift.v1.jobtemplate.TemplateTag _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = new com.wi.director.thrift.v1.jobtemplate.TemplateTag();
                  _elem4.read(iprot);
                  struct.templateTags.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setTemplateTagsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 107: // LAST_PUBLISHED_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.lastPublishedVersion = iprot.readI32();
              struct.setLastPublishedVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 108: // LAST_MODIFIED_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastModifiedAt = iprot.readI64();
              struct.setLastModifiedAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 109: // ATTRIBUTES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                struct.attributes = new ArrayList<com.wi.director.thrift.v1.abac.AbacAttribute>(_list6.size);
                com.wi.director.thrift.v1.abac.AbacAttribute _elem7;
                for (int _i8 = 0; _i8 < _list6.size; ++_i8)
                {
                  _elem7 = new com.wi.director.thrift.v1.abac.AbacAttribute();
                  _elem7.read(iprot);
                  struct.attributes.add(_elem7);
                }
                iprot.readListEnd();
              }
              struct.setAttributesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TemplateSet struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(INTERNAL_VERSION_FIELD_DESC);
      oprot.writeI32(struct.internalVersion);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PUBLIC_VERSION_FIELD_DESC);
      oprot.writeI32(struct.publicVersion);
      oprot.writeFieldEnd();
      if (struct.title != null) {
        oprot.writeFieldBegin(TITLE_FIELD_DESC);
        oprot.writeString(struct.title);
        oprot.writeFieldEnd();
      }
      if (struct.descrip != null) {
        oprot.writeFieldBegin(DESCRIP_FIELD_DESC);
        oprot.writeString(struct.descrip);
        oprot.writeFieldEnd();
      }
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeI32(struct.status.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.teamId != null) {
        oprot.writeFieldBegin(TEAM_ID_FIELD_DESC);
        oprot.writeString(struct.teamId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LAST_AUTHORED_AT_FIELD_DESC);
      oprot.writeI64(struct.lastAuthoredAt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PUBLISHED_AT_FIELD_DESC);
      oprot.writeI64(struct.publishedAt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ARCHIVED_AT_FIELD_DESC);
      oprot.writeI64(struct.archivedAt);
      oprot.writeFieldEnd();
      if (struct.lastAuthorId != null) {
        oprot.writeFieldBegin(LAST_AUTHOR_ID_FIELD_DESC);
        oprot.writeString(struct.lastAuthorId);
        oprot.writeFieldEnd();
      }
      if (struct.lock != null) {
        if (struct.isSetLock()) {
          oprot.writeFieldBegin(LOCK_FIELD_DESC);
          struct.lock.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(PUBLISHED_VERSION_FIELD_DESC);
      oprot.writeI32(struct.publishedVersion);
      oprot.writeFieldEnd();
      if (struct.typ != null) {
        oprot.writeFieldBegin(TYP_FIELD_DESC);
        oprot.writeI32(struct.typ.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.team != null) {
        if (struct.isSetTeam()) {
          oprot.writeFieldBegin(TEAM_FIELD_DESC);
          struct.team.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetLastPublishedAt()) {
        oprot.writeFieldBegin(LAST_PUBLISHED_AT_FIELD_DESC);
        oprot.writeI64(struct.lastPublishedAt);
        oprot.writeFieldEnd();
      }
      if (struct.lastAuthor != null) {
        if (struct.isSetLastAuthor()) {
          oprot.writeFieldBegin(LAST_AUTHOR_FIELD_DESC);
          struct.lastAuthor.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.templates != null) {
        if (struct.isSetTemplates()) {
          oprot.writeFieldBegin(TEMPLATES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.templates.size()));
            for (com.wi.director.thrift.v1.jobtemplate.JobTemplateModular _iter9 : struct.templates)
            {
              _iter9.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.counts != null) {
        if (struct.isSetCounts()) {
          oprot.writeFieldBegin(COUNTS_FIELD_DESC);
          struct.counts.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.templateTags != null) {
        if (struct.isSetTemplateTags()) {
          oprot.writeFieldBegin(TEMPLATE_TAGS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.templateTags.size()));
            for (com.wi.director.thrift.v1.jobtemplate.TemplateTag _iter10 : struct.templateTags)
            {
              _iter10.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetLastPublishedVersion()) {
        oprot.writeFieldBegin(LAST_PUBLISHED_VERSION_FIELD_DESC);
        oprot.writeI32(struct.lastPublishedVersion);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLastModifiedAt()) {
        oprot.writeFieldBegin(LAST_MODIFIED_AT_FIELD_DESC);
        oprot.writeI64(struct.lastModifiedAt);
        oprot.writeFieldEnd();
      }
      if (struct.attributes != null) {
        if (struct.isSetAttributes()) {
          oprot.writeFieldBegin(ATTRIBUTES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.attributes.size()));
            for (com.wi.director.thrift.v1.abac.AbacAttribute _iter11 : struct.attributes)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

}

