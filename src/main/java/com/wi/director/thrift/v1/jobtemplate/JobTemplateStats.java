/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wi.director.thrift.v1.jobtemplate;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class JobTemplateStats implements org.apache.thrift.TBase<JobTemplateStats, JobTemplateStats._Fields>, java.io.Serializable, Cloneable, Comparable<JobTemplateStats> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("JobTemplateStats");

  private static final org.apache.thrift.protocol.TField COMPLETED_JOBS_FIELD_DESC = new org.apache.thrift.protocol.TField("completedJobs", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ACTIVE_JOBS_FIELD_DESC = new org.apache.thrift.protocol.TField("activeJobs", org.apache.thrift.protocol.TType.I32, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new JobTemplateStatsStandardSchemeFactory());
  }

  public int completedJobs; // required
  public int activeJobs; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COMPLETED_JOBS((short)1, "completedJobs"),
    ACTIVE_JOBS((short)2, "activeJobs");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COMPLETED_JOBS
          return COMPLETED_JOBS;
        case 2: // ACTIVE_JOBS
          return ACTIVE_JOBS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __COMPLETEDJOBS_ISSET_ID = 0;
  private static final int __ACTIVEJOBS_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COMPLETED_JOBS, new org.apache.thrift.meta_data.FieldMetaData("completedJobs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACTIVE_JOBS, new org.apache.thrift.meta_data.FieldMetaData("activeJobs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(JobTemplateStats.class, metaDataMap);
  }

  public JobTemplateStats() {
  }

  public JobTemplateStats(
    int completedJobs,
    int activeJobs)
  {
    this();
    this.completedJobs = completedJobs;
    setCompletedJobsIsSet(true);
    this.activeJobs = activeJobs;
    setActiveJobsIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public JobTemplateStats(JobTemplateStats other) {
    __isset_bitfield = other.__isset_bitfield;
    this.completedJobs = other.completedJobs;
    this.activeJobs = other.activeJobs;
  }

  public JobTemplateStats deepCopy() {
    return new JobTemplateStats(this);
  }

  @Override
  public void clear() {
    setCompletedJobsIsSet(false);
    this.completedJobs = 0;
    setActiveJobsIsSet(false);
    this.activeJobs = 0;
  }

  public int getCompletedJobs() {
    return this.completedJobs;
  }

  public JobTemplateStats setCompletedJobs(int completedJobs) {
    this.completedJobs = completedJobs;
    setCompletedJobsIsSet(true);
    return this;
  }

  public void unsetCompletedJobs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMPLETEDJOBS_ISSET_ID);
  }

  /** Returns true if field completedJobs is set (has been assigned a value) and false otherwise */
  public boolean isSetCompletedJobs() {
    return EncodingUtils.testBit(__isset_bitfield, __COMPLETEDJOBS_ISSET_ID);
  }

  public void setCompletedJobsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMPLETEDJOBS_ISSET_ID, value);
  }

  public int getActiveJobs() {
    return this.activeJobs;
  }

  public JobTemplateStats setActiveJobs(int activeJobs) {
    this.activeJobs = activeJobs;
    setActiveJobsIsSet(true);
    return this;
  }

  public void unsetActiveJobs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTIVEJOBS_ISSET_ID);
  }

  /** Returns true if field activeJobs is set (has been assigned a value) and false otherwise */
  public boolean isSetActiveJobs() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTIVEJOBS_ISSET_ID);
  }

  public void setActiveJobsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTIVEJOBS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case COMPLETED_JOBS:
      if (value == null) {
        unsetCompletedJobs();
      } else {
        setCompletedJobs((Integer)value);
      }
      break;

    case ACTIVE_JOBS:
      if (value == null) {
        unsetActiveJobs();
      } else {
        setActiveJobs((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case COMPLETED_JOBS:
      return getCompletedJobs();

    case ACTIVE_JOBS:
      return getActiveJobs();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case COMPLETED_JOBS:
      return isSetCompletedJobs();
    case ACTIVE_JOBS:
      return isSetActiveJobs();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof JobTemplateStats)
      return this.equals((JobTemplateStats)that);
    return false;
  }

  public boolean equals(JobTemplateStats that) {
    if (that == null)
      return false;

    boolean this_present_completedJobs = true;
    boolean that_present_completedJobs = true;
    if (this_present_completedJobs || that_present_completedJobs) {
      if (!(this_present_completedJobs && that_present_completedJobs))
        return false;
      if (this.completedJobs != that.completedJobs)
        return false;
    }

    boolean this_present_activeJobs = true;
    boolean that_present_activeJobs = true;
    if (this_present_activeJobs || that_present_activeJobs) {
      if (!(this_present_activeJobs && that_present_activeJobs))
        return false;
      if (this.activeJobs != that.activeJobs)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_completedJobs = true;
    list.add(present_completedJobs);
    if (present_completedJobs)
      list.add(completedJobs);

    boolean present_activeJobs = true;
    list.add(present_activeJobs);
    if (present_activeJobs)
      list.add(activeJobs);

    return list.hashCode();
  }

  @Override
  public int compareTo(JobTemplateStats other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCompletedJobs()).compareTo(other.isSetCompletedJobs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompletedJobs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.completedJobs, other.completedJobs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActiveJobs()).compareTo(other.isSetActiveJobs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActiveJobs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activeJobs, other.activeJobs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("JobTemplateStats(");
    boolean first = true;

    sb.append("completedJobs:");
    sb.append(this.completedJobs);
    first = false;
    if (!first) sb.append(", ");
    sb.append("activeJobs:");
    sb.append(this.activeJobs);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class JobTemplateStatsStandardSchemeFactory implements SchemeFactory {
    public JobTemplateStatsStandardScheme getScheme() {
      return new JobTemplateStatsStandardScheme();
    }
  }

  private static class JobTemplateStatsStandardScheme extends StandardScheme<JobTemplateStats> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, JobTemplateStats struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COMPLETED_JOBS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.completedJobs = iprot.readI32();
              struct.setCompletedJobsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ACTIVE_JOBS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.activeJobs = iprot.readI32();
              struct.setActiveJobsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, JobTemplateStats struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(COMPLETED_JOBS_FIELD_DESC);
      oprot.writeI32(struct.completedJobs);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACTIVE_JOBS_FIELD_DESC);
      oprot.writeI32(struct.activeJobs);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

}

