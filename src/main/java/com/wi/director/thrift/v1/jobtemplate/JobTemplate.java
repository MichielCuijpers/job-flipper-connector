/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wi.director.thrift.v1.jobtemplate;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * Fields of a JobTemplate
 */
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class JobTemplate implements org.apache.thrift.TBase<JobTemplate, JobTemplate._Fields>, java.io.Serializable, Cloneable, Comparable<JobTemplate> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("JobTemplate");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField PUBLIC_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("publicVersion", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField STEP_GROUP_FIELD_DESC = new org.apache.thrift.protocol.TField("stepGroup", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField DESCRIP_FIELD_DESC = new org.apache.thrift.protocol.TField("descrip", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField TEAM_FIELD_DESC = new org.apache.thrift.protocol.TField("team", org.apache.thrift.protocol.TType.STRUCT, (short)8);
  private static final org.apache.thrift.protocol.TField METADATA_ENTRY_FIELD_DESC = new org.apache.thrift.protocol.TField("metadataEntry", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField UNSUPPORTEDDOCUMENT_EMAIL_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("UNSUPPORTEDdocumentEmailAddress", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField DOCUMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("documents", org.apache.thrift.protocol.TType.LIST, (short)11);
  private static final org.apache.thrift.protocol.TField ARCHIVED_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("archivedAt", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField LAST_AUTHOR_FIELD_DESC = new org.apache.thrift.protocol.TField("lastAuthor", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField SYSTEM_FIELD_DESC = new org.apache.thrift.protocol.TField("system", org.apache.thrift.protocol.TType.BOOL, (short)14);
  private static final org.apache.thrift.protocol.TField LOCKED_FIELD_DESC = new org.apache.thrift.protocol.TField("locked", org.apache.thrift.protocol.TType.STRUCT, (short)15);
  private static final org.apache.thrift.protocol.TField LAST_AUTHORED_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("lastAuthoredAt", org.apache.thrift.protocol.TType.I64, (short)16);
  private static final org.apache.thrift.protocol.TField PUBLISHED_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("publishedAt", org.apache.thrift.protocol.TType.I64, (short)17);
  private static final org.apache.thrift.protocol.TField LAST_PUBLISHED_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("lastPublishedAt", org.apache.thrift.protocol.TType.I64, (short)18);
  private static final org.apache.thrift.protocol.TField TEMPLATE_TAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("templateTags", org.apache.thrift.protocol.TType.LIST, (short)19);
  private static final org.apache.thrift.protocol.TField METADATA_BY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("metadataById", org.apache.thrift.protocol.TType.MAP, (short)20);
  private static final org.apache.thrift.protocol.TField PUBLISHED_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("publishedVersion", org.apache.thrift.protocol.TType.I32, (short)21);
  private static final org.apache.thrift.protocol.TField TYP_FIELD_DESC = new org.apache.thrift.protocol.TField("typ", org.apache.thrift.protocol.TType.I32, (short)22);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new JobTemplateStandardSchemeFactory());
  }

  public String id; // required
  /**
   * The name of a Job Template
   */
  public String title; // required
  /**
   * Only increments when <a href="#Fn_JobTemplateService_update">update</a> is called.
   */
  public int version; // required
  /**
   * Increment logic for <code>publicVersion</code>:<br><br>
   * Normal team flow:<br>
   * 1. A new job template is created with <a href="#Fn_JobTemplateService_create">create</a>, initially <code>publicVersion=0</code> and <code>status=Unpublished</code>.<br>
   * 2. <code>publicVersion</code> increments by 1 from latest published <code>publicVersion</code> when <a href="#Fn_JobTemplateService_publish">publish</a> is called, and <code>status=Published</code>.<br>
   * 3. When a new edit is made with <a href="#Fn_JobTemplateService_update">update</a> on either published or unpublished job template, a new entry is created with <code>publicVersion=0</code> and <code>status=Unpublished</code>.<br>
   * 4. Repeat from step 2) or 3).<br><br>
   * Review team flow:<br>
   * 1. A new job template is created with <a href="#Fn_JobTemplateService_create">create</a>, initially <code>publicVersion=0</code> and <code>status=Unpublished</code>.<br>
   * 2. <code>publicVersion</code> increments by 1 from max <code>publicVersion</code> when <a href="#Fn_JobTemplateService_beginReview">beginReview</a> is called, and <code>status=InReview</code>. <code>publicVersion</code> does not change if this <code>internalVersion</code> has already been reviewed before, i.e., <code>publicVersion != 0</code>.<br>
   * 3. <a href="#Fn_JobTemplateService_endReview">endReview</a> must be called next to close review, making <code>status=Unpublished</code>.<br>
   * 4. A specific <code>publicVersion</code> must be used to call <a href="#Fn_JobTemplateService_publishVersion">publishVersion</a> and make <code>status=Published</code>.<br>
   * 5. When a new edit is made with <a href="#Fn_JobTemplateService_update">update</a> on either published or unpublished job template, a new entry is created with <code>publicVersion=0</code> and <code>status=Unpublished</code>.<br>
   * 6. Repeat from step 2) or 5).
   */
  public int publicVersion; // required
  /**
   * The top step group of the job template's step hierarchy
   */
  public com.wi.director.thrift.v1.step.BaseStep stepGroup; // required
  /**
   * Status of the job template
   */
  public String status; // required
  /**
   * Details about the job
   */
  public String descrip; // required
  public com.wi.director.thrift.v1.team.Team team; // required
  public List<com.wi.director.thrift.v1.metadata.MetadataEntry> metadataEntry; // optional
  /**
   * UNSUPPORTED Email address for this particular job template
   */
  public String UNSUPPORTEDdocumentEmailAddress; // required
  /**
   * List of documents for this job template
   */
  public List<com.wi.director.thrift.v1.document.Document> documents; // required
  /**
   * Unix timestamp of when the job template was archived. 0 means the job template is not archived.
   * An archived job template cannot be edited or used to create a job
   */
  public long archivedAt; // required
  /**
   * The id of the last user to modify this template version
   */
  public String lastAuthor; // required
  /**
   * System template, cannot be modified
   */
  public boolean system; // required
  /**
   * Internal authoring lock
   */
  public JobTemplateLock locked; // optional
  /**
   * Unix timestamp of authored time for this edit
   */
  public long lastAuthoredAt; // required
  /**
   * Unix timestamp of publish time for this edit. 0 if not published
   */
  public long publishedAt; // required
  /**
   * DEPRECATED Bumps up on Create/Publish/InReview/Reject, 0 if no such event has occurred. Note that this field is wrongly named.
   */
  public long lastPublishedAt; // required
  /**
   * List of tags
   */
  public List<TemplateTag> templateTags; // required
  /**
   * Replaces metadataEntry
   */
  public Map<String,com.wi.director.thrift.v1.metadata.MetadataEntry> metadataById; // required
  /**
   * Only increments when <a href="#Fn_JobTemplateService_publish">publish</a> or <a href="#Fn_JobTemplateService_publishVersion">publishVersion</a> is called.
   * Is the same as <code>publicVersion</code> for normal teams, and only increments on publish for review teams.
   * Is 0 for all job templates with <code>status!=Published</code>.
   */
  public int publishedVersion; // required
  /**
   * 
   * @see TemplateType
   */
  public TemplateType typ; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    /**
     * The name of a Job Template
     */
    TITLE((short)2, "title"),
    /**
     * Only increments when <a href="#Fn_JobTemplateService_update">update</a> is called.
     */
    VERSION((short)3, "version"),
    /**
     * Increment logic for <code>publicVersion</code>:<br><br>
     * Normal team flow:<br>
     * 1. A new job template is created with <a href="#Fn_JobTemplateService_create">create</a>, initially <code>publicVersion=0</code> and <code>status=Unpublished</code>.<br>
     * 2. <code>publicVersion</code> increments by 1 from latest published <code>publicVersion</code> when <a href="#Fn_JobTemplateService_publish">publish</a> is called, and <code>status=Published</code>.<br>
     * 3. When a new edit is made with <a href="#Fn_JobTemplateService_update">update</a> on either published or unpublished job template, a new entry is created with <code>publicVersion=0</code> and <code>status=Unpublished</code>.<br>
     * 4. Repeat from step 2) or 3).<br><br>
     * Review team flow:<br>
     * 1. A new job template is created with <a href="#Fn_JobTemplateService_create">create</a>, initially <code>publicVersion=0</code> and <code>status=Unpublished</code>.<br>
     * 2. <code>publicVersion</code> increments by 1 from max <code>publicVersion</code> when <a href="#Fn_JobTemplateService_beginReview">beginReview</a> is called, and <code>status=InReview</code>. <code>publicVersion</code> does not change if this <code>internalVersion</code> has already been reviewed before, i.e., <code>publicVersion != 0</code>.<br>
     * 3. <a href="#Fn_JobTemplateService_endReview">endReview</a> must be called next to close review, making <code>status=Unpublished</code>.<br>
     * 4. A specific <code>publicVersion</code> must be used to call <a href="#Fn_JobTemplateService_publishVersion">publishVersion</a> and make <code>status=Published</code>.<br>
     * 5. When a new edit is made with <a href="#Fn_JobTemplateService_update">update</a> on either published or unpublished job template, a new entry is created with <code>publicVersion=0</code> and <code>status=Unpublished</code>.<br>
     * 6. Repeat from step 2) or 5).
     */
    PUBLIC_VERSION((short)4, "publicVersion"),
    /**
     * The top step group of the job template's step hierarchy
     */
    STEP_GROUP((short)5, "stepGroup"),
    /**
     * Status of the job template
     */
    STATUS((short)6, "status"),
    /**
     * Details about the job
     */
    DESCRIP((short)7, "descrip"),
    TEAM((short)8, "team"),
    METADATA_ENTRY((short)9, "metadataEntry"),
    /**
     * UNSUPPORTED Email address for this particular job template
     */
    UNSUPPORTEDDOCUMENT_EMAIL_ADDRESS((short)10, "UNSUPPORTEDdocumentEmailAddress"),
    /**
     * List of documents for this job template
     */
    DOCUMENTS((short)11, "documents"),
    /**
     * Unix timestamp of when the job template was archived. 0 means the job template is not archived.
     * An archived job template cannot be edited or used to create a job
     */
    ARCHIVED_AT((short)12, "archivedAt"),
    /**
     * The id of the last user to modify this template version
     */
    LAST_AUTHOR((short)13, "lastAuthor"),
    /**
     * System template, cannot be modified
     */
    SYSTEM((short)14, "system"),
    /**
     * Internal authoring lock
     */
    LOCKED((short)15, "locked"),
    /**
     * Unix timestamp of authored time for this edit
     */
    LAST_AUTHORED_AT((short)16, "lastAuthoredAt"),
    /**
     * Unix timestamp of publish time for this edit. 0 if not published
     */
    PUBLISHED_AT((short)17, "publishedAt"),
    /**
     * DEPRECATED Bumps up on Create/Publish/InReview/Reject, 0 if no such event has occurred. Note that this field is wrongly named.
     */
    LAST_PUBLISHED_AT((short)18, "lastPublishedAt"),
    /**
     * List of tags
     */
    TEMPLATE_TAGS((short)19, "templateTags"),
    /**
     * Replaces metadataEntry
     */
    METADATA_BY_ID((short)20, "metadataById"),
    /**
     * Only increments when <a href="#Fn_JobTemplateService_publish">publish</a> or <a href="#Fn_JobTemplateService_publishVersion">publishVersion</a> is called.
     * Is the same as <code>publicVersion</code> for normal teams, and only increments on publish for review teams.
     * Is 0 for all job templates with <code>status!=Published</code>.
     */
    PUBLISHED_VERSION((short)21, "publishedVersion"),
    /**
     * 
     * @see TemplateType
     */
    TYP((short)22, "typ");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // TITLE
          return TITLE;
        case 3: // VERSION
          return VERSION;
        case 4: // PUBLIC_VERSION
          return PUBLIC_VERSION;
        case 5: // STEP_GROUP
          return STEP_GROUP;
        case 6: // STATUS
          return STATUS;
        case 7: // DESCRIP
          return DESCRIP;
        case 8: // TEAM
          return TEAM;
        case 9: // METADATA_ENTRY
          return METADATA_ENTRY;
        case 10: // UNSUPPORTEDDOCUMENT_EMAIL_ADDRESS
          return UNSUPPORTEDDOCUMENT_EMAIL_ADDRESS;
        case 11: // DOCUMENTS
          return DOCUMENTS;
        case 12: // ARCHIVED_AT
          return ARCHIVED_AT;
        case 13: // LAST_AUTHOR
          return LAST_AUTHOR;
        case 14: // SYSTEM
          return SYSTEM;
        case 15: // LOCKED
          return LOCKED;
        case 16: // LAST_AUTHORED_AT
          return LAST_AUTHORED_AT;
        case 17: // PUBLISHED_AT
          return PUBLISHED_AT;
        case 18: // LAST_PUBLISHED_AT
          return LAST_PUBLISHED_AT;
        case 19: // TEMPLATE_TAGS
          return TEMPLATE_TAGS;
        case 20: // METADATA_BY_ID
          return METADATA_BY_ID;
        case 21: // PUBLISHED_VERSION
          return PUBLISHED_VERSION;
        case 22: // TYP
          return TYP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __VERSION_ISSET_ID = 0;
  private static final int __PUBLICVERSION_ISSET_ID = 1;
  private static final int __ARCHIVEDAT_ISSET_ID = 2;
  private static final int __SYSTEM_ISSET_ID = 3;
  private static final int __LASTAUTHOREDAT_ISSET_ID = 4;
  private static final int __PUBLISHEDAT_ISSET_ID = 5;
  private static final int __LASTPUBLISHEDAT_ISSET_ID = 6;
  private static final int __PUBLISHEDVERSION_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.METADATA_ENTRY,_Fields.LOCKED};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PUBLIC_VERSION, new org.apache.thrift.meta_data.FieldMetaData("publicVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STEP_GROUP, new org.apache.thrift.meta_data.FieldMetaData("stepGroup", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.step.BaseStep.class)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRIP, new org.apache.thrift.meta_data.FieldMetaData("descrip", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TEAM, new org.apache.thrift.meta_data.FieldMetaData("team", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.team.Team.class)));
    tmpMap.put(_Fields.METADATA_ENTRY, new org.apache.thrift.meta_data.FieldMetaData("metadataEntry", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.metadata.MetadataEntry.class))));
    tmpMap.put(_Fields.UNSUPPORTEDDOCUMENT_EMAIL_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("UNSUPPORTEDdocumentEmailAddress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DOCUMENTS, new org.apache.thrift.meta_data.FieldMetaData("documents", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.document.Document.class))));
    tmpMap.put(_Fields.ARCHIVED_AT, new org.apache.thrift.meta_data.FieldMetaData("archivedAt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LAST_AUTHOR, new org.apache.thrift.meta_data.FieldMetaData("lastAuthor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SYSTEM, new org.apache.thrift.meta_data.FieldMetaData("system", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.LOCKED, new org.apache.thrift.meta_data.FieldMetaData("locked", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JobTemplateLock.class)));
    tmpMap.put(_Fields.LAST_AUTHORED_AT, new org.apache.thrift.meta_data.FieldMetaData("lastAuthoredAt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PUBLISHED_AT, new org.apache.thrift.meta_data.FieldMetaData("publishedAt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LAST_PUBLISHED_AT, new org.apache.thrift.meta_data.FieldMetaData("lastPublishedAt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TEMPLATE_TAGS, new org.apache.thrift.meta_data.FieldMetaData("templateTags", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TemplateTag.class))));
    tmpMap.put(_Fields.METADATA_BY_ID, new org.apache.thrift.meta_data.FieldMetaData("metadataById", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.metadata.MetadataEntry.class))));
    tmpMap.put(_Fields.PUBLISHED_VERSION, new org.apache.thrift.meta_data.FieldMetaData("publishedVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TYP, new org.apache.thrift.meta_data.FieldMetaData("typ", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TemplateType.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(JobTemplate.class, metaDataMap);
  }

  public JobTemplate() {
  }

  public JobTemplate(
    String id,
    String title,
    int version,
    int publicVersion,
    com.wi.director.thrift.v1.step.BaseStep stepGroup,
    String status,
    String descrip,
    com.wi.director.thrift.v1.team.Team team,
    String UNSUPPORTEDdocumentEmailAddress,
    List<com.wi.director.thrift.v1.document.Document> documents,
    long archivedAt,
    String lastAuthor,
    boolean system,
    long lastAuthoredAt,
    long publishedAt,
    long lastPublishedAt,
    List<TemplateTag> templateTags,
    Map<String,com.wi.director.thrift.v1.metadata.MetadataEntry> metadataById,
    int publishedVersion,
    TemplateType typ)
  {
    this();
    this.id = id;
    this.title = title;
    this.version = version;
    setVersionIsSet(true);
    this.publicVersion = publicVersion;
    setPublicVersionIsSet(true);
    this.stepGroup = stepGroup;
    this.status = status;
    this.descrip = descrip;
    this.team = team;
    this.UNSUPPORTEDdocumentEmailAddress = UNSUPPORTEDdocumentEmailAddress;
    this.documents = documents;
    this.archivedAt = archivedAt;
    setArchivedAtIsSet(true);
    this.lastAuthor = lastAuthor;
    this.system = system;
    setSystemIsSet(true);
    this.lastAuthoredAt = lastAuthoredAt;
    setLastAuthoredAtIsSet(true);
    this.publishedAt = publishedAt;
    setPublishedAtIsSet(true);
    this.lastPublishedAt = lastPublishedAt;
    setLastPublishedAtIsSet(true);
    this.templateTags = templateTags;
    this.metadataById = metadataById;
    this.publishedVersion = publishedVersion;
    setPublishedVersionIsSet(true);
    this.typ = typ;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public JobTemplate(JobTemplate other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    this.version = other.version;
    this.publicVersion = other.publicVersion;
    if (other.isSetStepGroup()) {
      this.stepGroup = new com.wi.director.thrift.v1.step.BaseStep(other.stepGroup);
    }
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    if (other.isSetDescrip()) {
      this.descrip = other.descrip;
    }
    if (other.isSetTeam()) {
      this.team = new com.wi.director.thrift.v1.team.Team(other.team);
    }
    if (other.isSetMetadataEntry()) {
      List<com.wi.director.thrift.v1.metadata.MetadataEntry> __this__metadataEntry = new ArrayList<com.wi.director.thrift.v1.metadata.MetadataEntry>(other.metadataEntry.size());
      for (com.wi.director.thrift.v1.metadata.MetadataEntry other_element : other.metadataEntry) {
        __this__metadataEntry.add(new com.wi.director.thrift.v1.metadata.MetadataEntry(other_element));
      }
      this.metadataEntry = __this__metadataEntry;
    }
    if (other.isSetUNSUPPORTEDdocumentEmailAddress()) {
      this.UNSUPPORTEDdocumentEmailAddress = other.UNSUPPORTEDdocumentEmailAddress;
    }
    if (other.isSetDocuments()) {
      List<com.wi.director.thrift.v1.document.Document> __this__documents = new ArrayList<com.wi.director.thrift.v1.document.Document>(other.documents.size());
      for (com.wi.director.thrift.v1.document.Document other_element : other.documents) {
        __this__documents.add(new com.wi.director.thrift.v1.document.Document(other_element));
      }
      this.documents = __this__documents;
    }
    this.archivedAt = other.archivedAt;
    if (other.isSetLastAuthor()) {
      this.lastAuthor = other.lastAuthor;
    }
    this.system = other.system;
    if (other.isSetLocked()) {
      this.locked = new JobTemplateLock(other.locked);
    }
    this.lastAuthoredAt = other.lastAuthoredAt;
    this.publishedAt = other.publishedAt;
    this.lastPublishedAt = other.lastPublishedAt;
    if (other.isSetTemplateTags()) {
      List<TemplateTag> __this__templateTags = new ArrayList<TemplateTag>(other.templateTags.size());
      for (TemplateTag other_element : other.templateTags) {
        __this__templateTags.add(new TemplateTag(other_element));
      }
      this.templateTags = __this__templateTags;
    }
    if (other.isSetMetadataById()) {
      Map<String,com.wi.director.thrift.v1.metadata.MetadataEntry> __this__metadataById = new HashMap<String,com.wi.director.thrift.v1.metadata.MetadataEntry>(other.metadataById.size());
      for (Map.Entry<String, com.wi.director.thrift.v1.metadata.MetadataEntry> other_element : other.metadataById.entrySet()) {

        String other_element_key = other_element.getKey();
        com.wi.director.thrift.v1.metadata.MetadataEntry other_element_value = other_element.getValue();

        String __this__metadataById_copy_key = other_element_key;

        com.wi.director.thrift.v1.metadata.MetadataEntry __this__metadataById_copy_value = new com.wi.director.thrift.v1.metadata.MetadataEntry(other_element_value);

        __this__metadataById.put(__this__metadataById_copy_key, __this__metadataById_copy_value);
      }
      this.metadataById = __this__metadataById;
    }
    this.publishedVersion = other.publishedVersion;
    if (other.isSetTyp()) {
      this.typ = other.typ;
    }
  }

  public JobTemplate deepCopy() {
    return new JobTemplate(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.title = null;
    setVersionIsSet(false);
    this.version = 0;
    setPublicVersionIsSet(false);
    this.publicVersion = 0;
    this.stepGroup = null;
    this.status = null;
    this.descrip = null;
    this.team = null;
    this.metadataEntry = null;
    this.UNSUPPORTEDdocumentEmailAddress = null;
    this.documents = null;
    setArchivedAtIsSet(false);
    this.archivedAt = 0;
    this.lastAuthor = null;
    setSystemIsSet(false);
    this.system = false;
    this.locked = null;
    setLastAuthoredAtIsSet(false);
    this.lastAuthoredAt = 0;
    setPublishedAtIsSet(false);
    this.publishedAt = 0;
    setLastPublishedAtIsSet(false);
    this.lastPublishedAt = 0;
    this.templateTags = null;
    this.metadataById = null;
    setPublishedVersionIsSet(false);
    this.publishedVersion = 0;
    this.typ = null;
  }

  public String getId() {
    return this.id;
  }

  public JobTemplate setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  /**
   * The name of a Job Template
   */
  public String getTitle() {
    return this.title;
  }

  /**
   * The name of a Job Template
   */
  public JobTemplate setTitle(String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  /**
   * Only increments when <a href="#Fn_JobTemplateService_update">update</a> is called.
   */
  public int getVersion() {
    return this.version;
  }

  /**
   * Only increments when <a href="#Fn_JobTemplateService_update">update</a> is called.
   */
  public JobTemplate setVersion(int version) {
    this.version = version;
    setVersionIsSet(true);
    return this;
  }

  public void unsetVersion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return EncodingUtils.testBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  public void setVersionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERSION_ISSET_ID, value);
  }

  /**
   * Increment logic for <code>publicVersion</code>:<br><br>
   * Normal team flow:<br>
   * 1. A new job template is created with <a href="#Fn_JobTemplateService_create">create</a>, initially <code>publicVersion=0</code> and <code>status=Unpublished</code>.<br>
   * 2. <code>publicVersion</code> increments by 1 from latest published <code>publicVersion</code> when <a href="#Fn_JobTemplateService_publish">publish</a> is called, and <code>status=Published</code>.<br>
   * 3. When a new edit is made with <a href="#Fn_JobTemplateService_update">update</a> on either published or unpublished job template, a new entry is created with <code>publicVersion=0</code> and <code>status=Unpublished</code>.<br>
   * 4. Repeat from step 2) or 3).<br><br>
   * Review team flow:<br>
   * 1. A new job template is created with <a href="#Fn_JobTemplateService_create">create</a>, initially <code>publicVersion=0</code> and <code>status=Unpublished</code>.<br>
   * 2. <code>publicVersion</code> increments by 1 from max <code>publicVersion</code> when <a href="#Fn_JobTemplateService_beginReview">beginReview</a> is called, and <code>status=InReview</code>. <code>publicVersion</code> does not change if this <code>internalVersion</code> has already been reviewed before, i.e., <code>publicVersion != 0</code>.<br>
   * 3. <a href="#Fn_JobTemplateService_endReview">endReview</a> must be called next to close review, making <code>status=Unpublished</code>.<br>
   * 4. A specific <code>publicVersion</code> must be used to call <a href="#Fn_JobTemplateService_publishVersion">publishVersion</a> and make <code>status=Published</code>.<br>
   * 5. When a new edit is made with <a href="#Fn_JobTemplateService_update">update</a> on either published or unpublished job template, a new entry is created with <code>publicVersion=0</code> and <code>status=Unpublished</code>.<br>
   * 6. Repeat from step 2) or 5).
   */
  public int getPublicVersion() {
    return this.publicVersion;
  }

  /**
   * Increment logic for <code>publicVersion</code>:<br><br>
   * Normal team flow:<br>
   * 1. A new job template is created with <a href="#Fn_JobTemplateService_create">create</a>, initially <code>publicVersion=0</code> and <code>status=Unpublished</code>.<br>
   * 2. <code>publicVersion</code> increments by 1 from latest published <code>publicVersion</code> when <a href="#Fn_JobTemplateService_publish">publish</a> is called, and <code>status=Published</code>.<br>
   * 3. When a new edit is made with <a href="#Fn_JobTemplateService_update">update</a> on either published or unpublished job template, a new entry is created with <code>publicVersion=0</code> and <code>status=Unpublished</code>.<br>
   * 4. Repeat from step 2) or 3).<br><br>
   * Review team flow:<br>
   * 1. A new job template is created with <a href="#Fn_JobTemplateService_create">create</a>, initially <code>publicVersion=0</code> and <code>status=Unpublished</code>.<br>
   * 2. <code>publicVersion</code> increments by 1 from max <code>publicVersion</code> when <a href="#Fn_JobTemplateService_beginReview">beginReview</a> is called, and <code>status=InReview</code>. <code>publicVersion</code> does not change if this <code>internalVersion</code> has already been reviewed before, i.e., <code>publicVersion != 0</code>.<br>
   * 3. <a href="#Fn_JobTemplateService_endReview">endReview</a> must be called next to close review, making <code>status=Unpublished</code>.<br>
   * 4. A specific <code>publicVersion</code> must be used to call <a href="#Fn_JobTemplateService_publishVersion">publishVersion</a> and make <code>status=Published</code>.<br>
   * 5. When a new edit is made with <a href="#Fn_JobTemplateService_update">update</a> on either published or unpublished job template, a new entry is created with <code>publicVersion=0</code> and <code>status=Unpublished</code>.<br>
   * 6. Repeat from step 2) or 5).
   */
  public JobTemplate setPublicVersion(int publicVersion) {
    this.publicVersion = publicVersion;
    setPublicVersionIsSet(true);
    return this;
  }

  public void unsetPublicVersion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PUBLICVERSION_ISSET_ID);
  }

  /** Returns true if field publicVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetPublicVersion() {
    return EncodingUtils.testBit(__isset_bitfield, __PUBLICVERSION_ISSET_ID);
  }

  public void setPublicVersionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PUBLICVERSION_ISSET_ID, value);
  }

  /**
   * The top step group of the job template's step hierarchy
   */
  public com.wi.director.thrift.v1.step.BaseStep getStepGroup() {
    return this.stepGroup;
  }

  /**
   * The top step group of the job template's step hierarchy
   */
  public JobTemplate setStepGroup(com.wi.director.thrift.v1.step.BaseStep stepGroup) {
    this.stepGroup = stepGroup;
    return this;
  }

  public void unsetStepGroup() {
    this.stepGroup = null;
  }

  /** Returns true if field stepGroup is set (has been assigned a value) and false otherwise */
  public boolean isSetStepGroup() {
    return this.stepGroup != null;
  }

  public void setStepGroupIsSet(boolean value) {
    if (!value) {
      this.stepGroup = null;
    }
  }

  /**
   * Status of the job template
   */
  public String getStatus() {
    return this.status;
  }

  /**
   * Status of the job template
   */
  public JobTemplate setStatus(String status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  /**
   * Details about the job
   */
  public String getDescrip() {
    return this.descrip;
  }

  /**
   * Details about the job
   */
  public JobTemplate setDescrip(String descrip) {
    this.descrip = descrip;
    return this;
  }

  public void unsetDescrip() {
    this.descrip = null;
  }

  /** Returns true if field descrip is set (has been assigned a value) and false otherwise */
  public boolean isSetDescrip() {
    return this.descrip != null;
  }

  public void setDescripIsSet(boolean value) {
    if (!value) {
      this.descrip = null;
    }
  }

  public com.wi.director.thrift.v1.team.Team getTeam() {
    return this.team;
  }

  public JobTemplate setTeam(com.wi.director.thrift.v1.team.Team team) {
    this.team = team;
    return this;
  }

  public void unsetTeam() {
    this.team = null;
  }

  /** Returns true if field team is set (has been assigned a value) and false otherwise */
  public boolean isSetTeam() {
    return this.team != null;
  }

  public void setTeamIsSet(boolean value) {
    if (!value) {
      this.team = null;
    }
  }

  public int getMetadataEntrySize() {
    return (this.metadataEntry == null) ? 0 : this.metadataEntry.size();
  }

  public java.util.Iterator<com.wi.director.thrift.v1.metadata.MetadataEntry> getMetadataEntryIterator() {
    return (this.metadataEntry == null) ? null : this.metadataEntry.iterator();
  }

  public void addToMetadataEntry(com.wi.director.thrift.v1.metadata.MetadataEntry elem) {
    if (this.metadataEntry == null) {
      this.metadataEntry = new ArrayList<com.wi.director.thrift.v1.metadata.MetadataEntry>();
    }
    this.metadataEntry.add(elem);
  }

  public List<com.wi.director.thrift.v1.metadata.MetadataEntry> getMetadataEntry() {
    return this.metadataEntry;
  }

  public JobTemplate setMetadataEntry(List<com.wi.director.thrift.v1.metadata.MetadataEntry> metadataEntry) {
    this.metadataEntry = metadataEntry;
    return this;
  }

  public void unsetMetadataEntry() {
    this.metadataEntry = null;
  }

  /** Returns true if field metadataEntry is set (has been assigned a value) and false otherwise */
  public boolean isSetMetadataEntry() {
    return this.metadataEntry != null;
  }

  public void setMetadataEntryIsSet(boolean value) {
    if (!value) {
      this.metadataEntry = null;
    }
  }

  /**
   * UNSUPPORTED Email address for this particular job template
   */
  public String getUNSUPPORTEDdocumentEmailAddress() {
    return this.UNSUPPORTEDdocumentEmailAddress;
  }

  /**
   * UNSUPPORTED Email address for this particular job template
   */
  public JobTemplate setUNSUPPORTEDdocumentEmailAddress(String UNSUPPORTEDdocumentEmailAddress) {
    this.UNSUPPORTEDdocumentEmailAddress = UNSUPPORTEDdocumentEmailAddress;
    return this;
  }

  public void unsetUNSUPPORTEDdocumentEmailAddress() {
    this.UNSUPPORTEDdocumentEmailAddress = null;
  }

  /** Returns true if field UNSUPPORTEDdocumentEmailAddress is set (has been assigned a value) and false otherwise */
  public boolean isSetUNSUPPORTEDdocumentEmailAddress() {
    return this.UNSUPPORTEDdocumentEmailAddress != null;
  }

  public void setUNSUPPORTEDdocumentEmailAddressIsSet(boolean value) {
    if (!value) {
      this.UNSUPPORTEDdocumentEmailAddress = null;
    }
  }

  public int getDocumentsSize() {
    return (this.documents == null) ? 0 : this.documents.size();
  }

  public java.util.Iterator<com.wi.director.thrift.v1.document.Document> getDocumentsIterator() {
    return (this.documents == null) ? null : this.documents.iterator();
  }

  public void addToDocuments(com.wi.director.thrift.v1.document.Document elem) {
    if (this.documents == null) {
      this.documents = new ArrayList<com.wi.director.thrift.v1.document.Document>();
    }
    this.documents.add(elem);
  }

  /**
   * List of documents for this job template
   */
  public List<com.wi.director.thrift.v1.document.Document> getDocuments() {
    return this.documents;
  }

  /**
   * List of documents for this job template
   */
  public JobTemplate setDocuments(List<com.wi.director.thrift.v1.document.Document> documents) {
    this.documents = documents;
    return this;
  }

  public void unsetDocuments() {
    this.documents = null;
  }

  /** Returns true if field documents is set (has been assigned a value) and false otherwise */
  public boolean isSetDocuments() {
    return this.documents != null;
  }

  public void setDocumentsIsSet(boolean value) {
    if (!value) {
      this.documents = null;
    }
  }

  /**
   * Unix timestamp of when the job template was archived. 0 means the job template is not archived.
   * An archived job template cannot be edited or used to create a job
   */
  public long getArchivedAt() {
    return this.archivedAt;
  }

  /**
   * Unix timestamp of when the job template was archived. 0 means the job template is not archived.
   * An archived job template cannot be edited or used to create a job
   */
  public JobTemplate setArchivedAt(long archivedAt) {
    this.archivedAt = archivedAt;
    setArchivedAtIsSet(true);
    return this;
  }

  public void unsetArchivedAt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ARCHIVEDAT_ISSET_ID);
  }

  /** Returns true if field archivedAt is set (has been assigned a value) and false otherwise */
  public boolean isSetArchivedAt() {
    return EncodingUtils.testBit(__isset_bitfield, __ARCHIVEDAT_ISSET_ID);
  }

  public void setArchivedAtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ARCHIVEDAT_ISSET_ID, value);
  }

  /**
   * The id of the last user to modify this template version
   */
  public String getLastAuthor() {
    return this.lastAuthor;
  }

  /**
   * The id of the last user to modify this template version
   */
  public JobTemplate setLastAuthor(String lastAuthor) {
    this.lastAuthor = lastAuthor;
    return this;
  }

  public void unsetLastAuthor() {
    this.lastAuthor = null;
  }

  /** Returns true if field lastAuthor is set (has been assigned a value) and false otherwise */
  public boolean isSetLastAuthor() {
    return this.lastAuthor != null;
  }

  public void setLastAuthorIsSet(boolean value) {
    if (!value) {
      this.lastAuthor = null;
    }
  }

  /**
   * System template, cannot be modified
   */
  public boolean isSystem() {
    return this.system;
  }

  /**
   * System template, cannot be modified
   */
  public JobTemplate setSystem(boolean system) {
    this.system = system;
    setSystemIsSet(true);
    return this;
  }

  public void unsetSystem() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SYSTEM_ISSET_ID);
  }

  /** Returns true if field system is set (has been assigned a value) and false otherwise */
  public boolean isSetSystem() {
    return EncodingUtils.testBit(__isset_bitfield, __SYSTEM_ISSET_ID);
  }

  public void setSystemIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SYSTEM_ISSET_ID, value);
  }

  /**
   * Internal authoring lock
   */
  public JobTemplateLock getLocked() {
    return this.locked;
  }

  /**
   * Internal authoring lock
   */
  public JobTemplate setLocked(JobTemplateLock locked) {
    this.locked = locked;
    return this;
  }

  public void unsetLocked() {
    this.locked = null;
  }

  /** Returns true if field locked is set (has been assigned a value) and false otherwise */
  public boolean isSetLocked() {
    return this.locked != null;
  }

  public void setLockedIsSet(boolean value) {
    if (!value) {
      this.locked = null;
    }
  }

  /**
   * Unix timestamp of authored time for this edit
   */
  public long getLastAuthoredAt() {
    return this.lastAuthoredAt;
  }

  /**
   * Unix timestamp of authored time for this edit
   */
  public JobTemplate setLastAuthoredAt(long lastAuthoredAt) {
    this.lastAuthoredAt = lastAuthoredAt;
    setLastAuthoredAtIsSet(true);
    return this;
  }

  public void unsetLastAuthoredAt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTAUTHOREDAT_ISSET_ID);
  }

  /** Returns true if field lastAuthoredAt is set (has been assigned a value) and false otherwise */
  public boolean isSetLastAuthoredAt() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTAUTHOREDAT_ISSET_ID);
  }

  public void setLastAuthoredAtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTAUTHOREDAT_ISSET_ID, value);
  }

  /**
   * Unix timestamp of publish time for this edit. 0 if not published
   */
  public long getPublishedAt() {
    return this.publishedAt;
  }

  /**
   * Unix timestamp of publish time for this edit. 0 if not published
   */
  public JobTemplate setPublishedAt(long publishedAt) {
    this.publishedAt = publishedAt;
    setPublishedAtIsSet(true);
    return this;
  }

  public void unsetPublishedAt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PUBLISHEDAT_ISSET_ID);
  }

  /** Returns true if field publishedAt is set (has been assigned a value) and false otherwise */
  public boolean isSetPublishedAt() {
    return EncodingUtils.testBit(__isset_bitfield, __PUBLISHEDAT_ISSET_ID);
  }

  public void setPublishedAtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PUBLISHEDAT_ISSET_ID, value);
  }

  /**
   * DEPRECATED Bumps up on Create/Publish/InReview/Reject, 0 if no such event has occurred. Note that this field is wrongly named.
   */
  public long getLastPublishedAt() {
    return this.lastPublishedAt;
  }

  /**
   * DEPRECATED Bumps up on Create/Publish/InReview/Reject, 0 if no such event has occurred. Note that this field is wrongly named.
   */
  public JobTemplate setLastPublishedAt(long lastPublishedAt) {
    this.lastPublishedAt = lastPublishedAt;
    setLastPublishedAtIsSet(true);
    return this;
  }

  public void unsetLastPublishedAt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTPUBLISHEDAT_ISSET_ID);
  }

  /** Returns true if field lastPublishedAt is set (has been assigned a value) and false otherwise */
  public boolean isSetLastPublishedAt() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTPUBLISHEDAT_ISSET_ID);
  }

  public void setLastPublishedAtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTPUBLISHEDAT_ISSET_ID, value);
  }

  public int getTemplateTagsSize() {
    return (this.templateTags == null) ? 0 : this.templateTags.size();
  }

  public java.util.Iterator<TemplateTag> getTemplateTagsIterator() {
    return (this.templateTags == null) ? null : this.templateTags.iterator();
  }

  public void addToTemplateTags(TemplateTag elem) {
    if (this.templateTags == null) {
      this.templateTags = new ArrayList<TemplateTag>();
    }
    this.templateTags.add(elem);
  }

  /**
   * List of tags
   */
  public List<TemplateTag> getTemplateTags() {
    return this.templateTags;
  }

  /**
   * List of tags
   */
  public JobTemplate setTemplateTags(List<TemplateTag> templateTags) {
    this.templateTags = templateTags;
    return this;
  }

  public void unsetTemplateTags() {
    this.templateTags = null;
  }

  /** Returns true if field templateTags is set (has been assigned a value) and false otherwise */
  public boolean isSetTemplateTags() {
    return this.templateTags != null;
  }

  public void setTemplateTagsIsSet(boolean value) {
    if (!value) {
      this.templateTags = null;
    }
  }

  public int getMetadataByIdSize() {
    return (this.metadataById == null) ? 0 : this.metadataById.size();
  }

  public void putToMetadataById(String key, com.wi.director.thrift.v1.metadata.MetadataEntry val) {
    if (this.metadataById == null) {
      this.metadataById = new HashMap<String,com.wi.director.thrift.v1.metadata.MetadataEntry>();
    }
    this.metadataById.put(key, val);
  }

  /**
   * Replaces metadataEntry
   */
  public Map<String,com.wi.director.thrift.v1.metadata.MetadataEntry> getMetadataById() {
    return this.metadataById;
  }

  /**
   * Replaces metadataEntry
   */
  public JobTemplate setMetadataById(Map<String,com.wi.director.thrift.v1.metadata.MetadataEntry> metadataById) {
    this.metadataById = metadataById;
    return this;
  }

  public void unsetMetadataById() {
    this.metadataById = null;
  }

  /** Returns true if field metadataById is set (has been assigned a value) and false otherwise */
  public boolean isSetMetadataById() {
    return this.metadataById != null;
  }

  public void setMetadataByIdIsSet(boolean value) {
    if (!value) {
      this.metadataById = null;
    }
  }

  /**
   * Only increments when <a href="#Fn_JobTemplateService_publish">publish</a> or <a href="#Fn_JobTemplateService_publishVersion">publishVersion</a> is called.
   * Is the same as <code>publicVersion</code> for normal teams, and only increments on publish for review teams.
   * Is 0 for all job templates with <code>status!=Published</code>.
   */
  public int getPublishedVersion() {
    return this.publishedVersion;
  }

  /**
   * Only increments when <a href="#Fn_JobTemplateService_publish">publish</a> or <a href="#Fn_JobTemplateService_publishVersion">publishVersion</a> is called.
   * Is the same as <code>publicVersion</code> for normal teams, and only increments on publish for review teams.
   * Is 0 for all job templates with <code>status!=Published</code>.
   */
  public JobTemplate setPublishedVersion(int publishedVersion) {
    this.publishedVersion = publishedVersion;
    setPublishedVersionIsSet(true);
    return this;
  }

  public void unsetPublishedVersion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PUBLISHEDVERSION_ISSET_ID);
  }

  /** Returns true if field publishedVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetPublishedVersion() {
    return EncodingUtils.testBit(__isset_bitfield, __PUBLISHEDVERSION_ISSET_ID);
  }

  public void setPublishedVersionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PUBLISHEDVERSION_ISSET_ID, value);
  }

  /**
   * 
   * @see TemplateType
   */
  public TemplateType getTyp() {
    return this.typ;
  }

  /**
   * 
   * @see TemplateType
   */
  public JobTemplate setTyp(TemplateType typ) {
    this.typ = typ;
    return this;
  }

  public void unsetTyp() {
    this.typ = null;
  }

  /** Returns true if field typ is set (has been assigned a value) and false otherwise */
  public boolean isSetTyp() {
    return this.typ != null;
  }

  public void setTypIsSet(boolean value) {
    if (!value) {
      this.typ = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((String)value);
      }
      break;

    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((Integer)value);
      }
      break;

    case PUBLIC_VERSION:
      if (value == null) {
        unsetPublicVersion();
      } else {
        setPublicVersion((Integer)value);
      }
      break;

    case STEP_GROUP:
      if (value == null) {
        unsetStepGroup();
      } else {
        setStepGroup((com.wi.director.thrift.v1.step.BaseStep)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((String)value);
      }
      break;

    case DESCRIP:
      if (value == null) {
        unsetDescrip();
      } else {
        setDescrip((String)value);
      }
      break;

    case TEAM:
      if (value == null) {
        unsetTeam();
      } else {
        setTeam((com.wi.director.thrift.v1.team.Team)value);
      }
      break;

    case METADATA_ENTRY:
      if (value == null) {
        unsetMetadataEntry();
      } else {
        setMetadataEntry((List<com.wi.director.thrift.v1.metadata.MetadataEntry>)value);
      }
      break;

    case UNSUPPORTEDDOCUMENT_EMAIL_ADDRESS:
      if (value == null) {
        unsetUNSUPPORTEDdocumentEmailAddress();
      } else {
        setUNSUPPORTEDdocumentEmailAddress((String)value);
      }
      break;

    case DOCUMENTS:
      if (value == null) {
        unsetDocuments();
      } else {
        setDocuments((List<com.wi.director.thrift.v1.document.Document>)value);
      }
      break;

    case ARCHIVED_AT:
      if (value == null) {
        unsetArchivedAt();
      } else {
        setArchivedAt((Long)value);
      }
      break;

    case LAST_AUTHOR:
      if (value == null) {
        unsetLastAuthor();
      } else {
        setLastAuthor((String)value);
      }
      break;

    case SYSTEM:
      if (value == null) {
        unsetSystem();
      } else {
        setSystem((Boolean)value);
      }
      break;

    case LOCKED:
      if (value == null) {
        unsetLocked();
      } else {
        setLocked((JobTemplateLock)value);
      }
      break;

    case LAST_AUTHORED_AT:
      if (value == null) {
        unsetLastAuthoredAt();
      } else {
        setLastAuthoredAt((Long)value);
      }
      break;

    case PUBLISHED_AT:
      if (value == null) {
        unsetPublishedAt();
      } else {
        setPublishedAt((Long)value);
      }
      break;

    case LAST_PUBLISHED_AT:
      if (value == null) {
        unsetLastPublishedAt();
      } else {
        setLastPublishedAt((Long)value);
      }
      break;

    case TEMPLATE_TAGS:
      if (value == null) {
        unsetTemplateTags();
      } else {
        setTemplateTags((List<TemplateTag>)value);
      }
      break;

    case METADATA_BY_ID:
      if (value == null) {
        unsetMetadataById();
      } else {
        setMetadataById((Map<String,com.wi.director.thrift.v1.metadata.MetadataEntry>)value);
      }
      break;

    case PUBLISHED_VERSION:
      if (value == null) {
        unsetPublishedVersion();
      } else {
        setPublishedVersion((Integer)value);
      }
      break;

    case TYP:
      if (value == null) {
        unsetTyp();
      } else {
        setTyp((TemplateType)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case TITLE:
      return getTitle();

    case VERSION:
      return getVersion();

    case PUBLIC_VERSION:
      return getPublicVersion();

    case STEP_GROUP:
      return getStepGroup();

    case STATUS:
      return getStatus();

    case DESCRIP:
      return getDescrip();

    case TEAM:
      return getTeam();

    case METADATA_ENTRY:
      return getMetadataEntry();

    case UNSUPPORTEDDOCUMENT_EMAIL_ADDRESS:
      return getUNSUPPORTEDdocumentEmailAddress();

    case DOCUMENTS:
      return getDocuments();

    case ARCHIVED_AT:
      return getArchivedAt();

    case LAST_AUTHOR:
      return getLastAuthor();

    case SYSTEM:
      return isSystem();

    case LOCKED:
      return getLocked();

    case LAST_AUTHORED_AT:
      return getLastAuthoredAt();

    case PUBLISHED_AT:
      return getPublishedAt();

    case LAST_PUBLISHED_AT:
      return getLastPublishedAt();

    case TEMPLATE_TAGS:
      return getTemplateTags();

    case METADATA_BY_ID:
      return getMetadataById();

    case PUBLISHED_VERSION:
      return getPublishedVersion();

    case TYP:
      return getTyp();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case TITLE:
      return isSetTitle();
    case VERSION:
      return isSetVersion();
    case PUBLIC_VERSION:
      return isSetPublicVersion();
    case STEP_GROUP:
      return isSetStepGroup();
    case STATUS:
      return isSetStatus();
    case DESCRIP:
      return isSetDescrip();
    case TEAM:
      return isSetTeam();
    case METADATA_ENTRY:
      return isSetMetadataEntry();
    case UNSUPPORTEDDOCUMENT_EMAIL_ADDRESS:
      return isSetUNSUPPORTEDdocumentEmailAddress();
    case DOCUMENTS:
      return isSetDocuments();
    case ARCHIVED_AT:
      return isSetArchivedAt();
    case LAST_AUTHOR:
      return isSetLastAuthor();
    case SYSTEM:
      return isSetSystem();
    case LOCKED:
      return isSetLocked();
    case LAST_AUTHORED_AT:
      return isSetLastAuthoredAt();
    case PUBLISHED_AT:
      return isSetPublishedAt();
    case LAST_PUBLISHED_AT:
      return isSetLastPublishedAt();
    case TEMPLATE_TAGS:
      return isSetTemplateTags();
    case METADATA_BY_ID:
      return isSetMetadataById();
    case PUBLISHED_VERSION:
      return isSetPublishedVersion();
    case TYP:
      return isSetTyp();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof JobTemplate)
      return this.equals((JobTemplate)that);
    return false;
  }

  public boolean equals(JobTemplate that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_version = true;
    boolean that_present_version = true;
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (this.version != that.version)
        return false;
    }

    boolean this_present_publicVersion = true;
    boolean that_present_publicVersion = true;
    if (this_present_publicVersion || that_present_publicVersion) {
      if (!(this_present_publicVersion && that_present_publicVersion))
        return false;
      if (this.publicVersion != that.publicVersion)
        return false;
    }

    boolean this_present_stepGroup = true && this.isSetStepGroup();
    boolean that_present_stepGroup = true && that.isSetStepGroup();
    if (this_present_stepGroup || that_present_stepGroup) {
      if (!(this_present_stepGroup && that_present_stepGroup))
        return false;
      if (!this.stepGroup.equals(that.stepGroup))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_descrip = true && this.isSetDescrip();
    boolean that_present_descrip = true && that.isSetDescrip();
    if (this_present_descrip || that_present_descrip) {
      if (!(this_present_descrip && that_present_descrip))
        return false;
      if (!this.descrip.equals(that.descrip))
        return false;
    }

    boolean this_present_team = true && this.isSetTeam();
    boolean that_present_team = true && that.isSetTeam();
    if (this_present_team || that_present_team) {
      if (!(this_present_team && that_present_team))
        return false;
      if (!this.team.equals(that.team))
        return false;
    }

    boolean this_present_metadataEntry = true && this.isSetMetadataEntry();
    boolean that_present_metadataEntry = true && that.isSetMetadataEntry();
    if (this_present_metadataEntry || that_present_metadataEntry) {
      if (!(this_present_metadataEntry && that_present_metadataEntry))
        return false;
      if (!this.metadataEntry.equals(that.metadataEntry))
        return false;
    }

    boolean this_present_UNSUPPORTEDdocumentEmailAddress = true && this.isSetUNSUPPORTEDdocumentEmailAddress();
    boolean that_present_UNSUPPORTEDdocumentEmailAddress = true && that.isSetUNSUPPORTEDdocumentEmailAddress();
    if (this_present_UNSUPPORTEDdocumentEmailAddress || that_present_UNSUPPORTEDdocumentEmailAddress) {
      if (!(this_present_UNSUPPORTEDdocumentEmailAddress && that_present_UNSUPPORTEDdocumentEmailAddress))
        return false;
      if (!this.UNSUPPORTEDdocumentEmailAddress.equals(that.UNSUPPORTEDdocumentEmailAddress))
        return false;
    }

    boolean this_present_documents = true && this.isSetDocuments();
    boolean that_present_documents = true && that.isSetDocuments();
    if (this_present_documents || that_present_documents) {
      if (!(this_present_documents && that_present_documents))
        return false;
      if (!this.documents.equals(that.documents))
        return false;
    }

    boolean this_present_archivedAt = true;
    boolean that_present_archivedAt = true;
    if (this_present_archivedAt || that_present_archivedAt) {
      if (!(this_present_archivedAt && that_present_archivedAt))
        return false;
      if (this.archivedAt != that.archivedAt)
        return false;
    }

    boolean this_present_lastAuthor = true && this.isSetLastAuthor();
    boolean that_present_lastAuthor = true && that.isSetLastAuthor();
    if (this_present_lastAuthor || that_present_lastAuthor) {
      if (!(this_present_lastAuthor && that_present_lastAuthor))
        return false;
      if (!this.lastAuthor.equals(that.lastAuthor))
        return false;
    }

    boolean this_present_system = true;
    boolean that_present_system = true;
    if (this_present_system || that_present_system) {
      if (!(this_present_system && that_present_system))
        return false;
      if (this.system != that.system)
        return false;
    }

    boolean this_present_locked = true && this.isSetLocked();
    boolean that_present_locked = true && that.isSetLocked();
    if (this_present_locked || that_present_locked) {
      if (!(this_present_locked && that_present_locked))
        return false;
      if (!this.locked.equals(that.locked))
        return false;
    }

    boolean this_present_lastAuthoredAt = true;
    boolean that_present_lastAuthoredAt = true;
    if (this_present_lastAuthoredAt || that_present_lastAuthoredAt) {
      if (!(this_present_lastAuthoredAt && that_present_lastAuthoredAt))
        return false;
      if (this.lastAuthoredAt != that.lastAuthoredAt)
        return false;
    }

    boolean this_present_publishedAt = true;
    boolean that_present_publishedAt = true;
    if (this_present_publishedAt || that_present_publishedAt) {
      if (!(this_present_publishedAt && that_present_publishedAt))
        return false;
      if (this.publishedAt != that.publishedAt)
        return false;
    }

    boolean this_present_lastPublishedAt = true;
    boolean that_present_lastPublishedAt = true;
    if (this_present_lastPublishedAt || that_present_lastPublishedAt) {
      if (!(this_present_lastPublishedAt && that_present_lastPublishedAt))
        return false;
      if (this.lastPublishedAt != that.lastPublishedAt)
        return false;
    }

    boolean this_present_templateTags = true && this.isSetTemplateTags();
    boolean that_present_templateTags = true && that.isSetTemplateTags();
    if (this_present_templateTags || that_present_templateTags) {
      if (!(this_present_templateTags && that_present_templateTags))
        return false;
      if (!this.templateTags.equals(that.templateTags))
        return false;
    }

    boolean this_present_metadataById = true && this.isSetMetadataById();
    boolean that_present_metadataById = true && that.isSetMetadataById();
    if (this_present_metadataById || that_present_metadataById) {
      if (!(this_present_metadataById && that_present_metadataById))
        return false;
      if (!this.metadataById.equals(that.metadataById))
        return false;
    }

    boolean this_present_publishedVersion = true;
    boolean that_present_publishedVersion = true;
    if (this_present_publishedVersion || that_present_publishedVersion) {
      if (!(this_present_publishedVersion && that_present_publishedVersion))
        return false;
      if (this.publishedVersion != that.publishedVersion)
        return false;
    }

    boolean this_present_typ = true && this.isSetTyp();
    boolean that_present_typ = true && that.isSetTyp();
    if (this_present_typ || that_present_typ) {
      if (!(this_present_typ && that_present_typ))
        return false;
      if (!this.typ.equals(that.typ))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_title = true && (isSetTitle());
    list.add(present_title);
    if (present_title)
      list.add(title);

    boolean present_version = true;
    list.add(present_version);
    if (present_version)
      list.add(version);

    boolean present_publicVersion = true;
    list.add(present_publicVersion);
    if (present_publicVersion)
      list.add(publicVersion);

    boolean present_stepGroup = true && (isSetStepGroup());
    list.add(present_stepGroup);
    if (present_stepGroup)
      list.add(stepGroup);

    boolean present_status = true && (isSetStatus());
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_descrip = true && (isSetDescrip());
    list.add(present_descrip);
    if (present_descrip)
      list.add(descrip);

    boolean present_team = true && (isSetTeam());
    list.add(present_team);
    if (present_team)
      list.add(team);

    boolean present_metadataEntry = true && (isSetMetadataEntry());
    list.add(present_metadataEntry);
    if (present_metadataEntry)
      list.add(metadataEntry);

    boolean present_UNSUPPORTEDdocumentEmailAddress = true && (isSetUNSUPPORTEDdocumentEmailAddress());
    list.add(present_UNSUPPORTEDdocumentEmailAddress);
    if (present_UNSUPPORTEDdocumentEmailAddress)
      list.add(UNSUPPORTEDdocumentEmailAddress);

    boolean present_documents = true && (isSetDocuments());
    list.add(present_documents);
    if (present_documents)
      list.add(documents);

    boolean present_archivedAt = true;
    list.add(present_archivedAt);
    if (present_archivedAt)
      list.add(archivedAt);

    boolean present_lastAuthor = true && (isSetLastAuthor());
    list.add(present_lastAuthor);
    if (present_lastAuthor)
      list.add(lastAuthor);

    boolean present_system = true;
    list.add(present_system);
    if (present_system)
      list.add(system);

    boolean present_locked = true && (isSetLocked());
    list.add(present_locked);
    if (present_locked)
      list.add(locked);

    boolean present_lastAuthoredAt = true;
    list.add(present_lastAuthoredAt);
    if (present_lastAuthoredAt)
      list.add(lastAuthoredAt);

    boolean present_publishedAt = true;
    list.add(present_publishedAt);
    if (present_publishedAt)
      list.add(publishedAt);

    boolean present_lastPublishedAt = true;
    list.add(present_lastPublishedAt);
    if (present_lastPublishedAt)
      list.add(lastPublishedAt);

    boolean present_templateTags = true && (isSetTemplateTags());
    list.add(present_templateTags);
    if (present_templateTags)
      list.add(templateTags);

    boolean present_metadataById = true && (isSetMetadataById());
    list.add(present_metadataById);
    if (present_metadataById)
      list.add(metadataById);

    boolean present_publishedVersion = true;
    list.add(present_publishedVersion);
    if (present_publishedVersion)
      list.add(publishedVersion);

    boolean present_typ = true && (isSetTyp());
    list.add(present_typ);
    if (present_typ)
      list.add(typ.getValue());

    return list.hashCode();
  }

  @Override
  public int compareTo(JobTemplate other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTitle()).compareTo(other.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVersion()).compareTo(other.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPublicVersion()).compareTo(other.isSetPublicVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPublicVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.publicVersion, other.publicVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStepGroup()).compareTo(other.isSetStepGroup());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStepGroup()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stepGroup, other.stepGroup);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescrip()).compareTo(other.isSetDescrip());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescrip()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.descrip, other.descrip);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTeam()).compareTo(other.isSetTeam());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeam()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.team, other.team);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMetadataEntry()).compareTo(other.isSetMetadataEntry());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMetadataEntry()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metadataEntry, other.metadataEntry);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUNSUPPORTEDdocumentEmailAddress()).compareTo(other.isSetUNSUPPORTEDdocumentEmailAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUNSUPPORTEDdocumentEmailAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.UNSUPPORTEDdocumentEmailAddress, other.UNSUPPORTEDdocumentEmailAddress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDocuments()).compareTo(other.isSetDocuments());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDocuments()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.documents, other.documents);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArchivedAt()).compareTo(other.isSetArchivedAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArchivedAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.archivedAt, other.archivedAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastAuthor()).compareTo(other.isSetLastAuthor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastAuthor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastAuthor, other.lastAuthor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSystem()).compareTo(other.isSetSystem());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSystem()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.system, other.system);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocked()).compareTo(other.isSetLocked());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocked()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locked, other.locked);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastAuthoredAt()).compareTo(other.isSetLastAuthoredAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastAuthoredAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastAuthoredAt, other.lastAuthoredAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPublishedAt()).compareTo(other.isSetPublishedAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPublishedAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.publishedAt, other.publishedAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastPublishedAt()).compareTo(other.isSetLastPublishedAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastPublishedAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastPublishedAt, other.lastPublishedAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTemplateTags()).compareTo(other.isSetTemplateTags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTemplateTags()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.templateTags, other.templateTags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMetadataById()).compareTo(other.isSetMetadataById());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMetadataById()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metadataById, other.metadataById);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPublishedVersion()).compareTo(other.isSetPublishedVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPublishedVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.publishedVersion, other.publishedVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTyp()).compareTo(other.isSetTyp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTyp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.typ, other.typ);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("JobTemplate(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("title:");
    if (this.title == null) {
      sb.append("null");
    } else {
      sb.append(this.title);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("version:");
    sb.append(this.version);
    first = false;
    if (!first) sb.append(", ");
    sb.append("publicVersion:");
    sb.append(this.publicVersion);
    first = false;
    if (!first) sb.append(", ");
    sb.append("stepGroup:");
    if (this.stepGroup == null) {
      sb.append("null");
    } else {
      sb.append(this.stepGroup);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("descrip:");
    if (this.descrip == null) {
      sb.append("null");
    } else {
      sb.append(this.descrip);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("team:");
    if (this.team == null) {
      sb.append("null");
    } else {
      sb.append(this.team);
    }
    first = false;
    if (isSetMetadataEntry()) {
      if (!first) sb.append(", ");
      sb.append("metadataEntry:");
      if (this.metadataEntry == null) {
        sb.append("null");
      } else {
        sb.append(this.metadataEntry);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("UNSUPPORTEDdocumentEmailAddress:");
    if (this.UNSUPPORTEDdocumentEmailAddress == null) {
      sb.append("null");
    } else {
      sb.append(this.UNSUPPORTEDdocumentEmailAddress);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("documents:");
    if (this.documents == null) {
      sb.append("null");
    } else {
      sb.append(this.documents);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("archivedAt:");
    sb.append(this.archivedAt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastAuthor:");
    if (this.lastAuthor == null) {
      sb.append("null");
    } else {
      sb.append(this.lastAuthor);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("system:");
    sb.append(this.system);
    first = false;
    if (isSetLocked()) {
      if (!first) sb.append(", ");
      sb.append("locked:");
      if (this.locked == null) {
        sb.append("null");
      } else {
        sb.append(this.locked);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("lastAuthoredAt:");
    sb.append(this.lastAuthoredAt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("publishedAt:");
    sb.append(this.publishedAt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastPublishedAt:");
    sb.append(this.lastPublishedAt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("templateTags:");
    if (this.templateTags == null) {
      sb.append("null");
    } else {
      sb.append(this.templateTags);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("metadataById:");
    if (this.metadataById == null) {
      sb.append("null");
    } else {
      sb.append(this.metadataById);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("publishedVersion:");
    sb.append(this.publishedVersion);
    first = false;
    if (!first) sb.append(", ");
    sb.append("typ:");
    if (this.typ == null) {
      sb.append("null");
    } else {
      sb.append(this.typ);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (stepGroup != null) {
      stepGroup.validate();
    }
    if (team != null) {
      team.validate();
    }
    if (locked != null) {
      locked.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class JobTemplateStandardSchemeFactory implements SchemeFactory {
    public JobTemplateStandardScheme getScheme() {
      return new JobTemplateStandardScheme();
    }
  }

  private static class JobTemplateStandardScheme extends StandardScheme<JobTemplate> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, JobTemplate struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.version = iprot.readI32();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PUBLIC_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.publicVersion = iprot.readI32();
              struct.setPublicVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // STEP_GROUP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.stepGroup = new com.wi.director.thrift.v1.step.BaseStep();
              struct.stepGroup.read(iprot);
              struct.setStepGroupIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.status = iprot.readString();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DESCRIP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.descrip = iprot.readString();
              struct.setDescripIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TEAM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.team = new com.wi.director.thrift.v1.team.Team();
              struct.team.read(iprot);
              struct.setTeamIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // METADATA_ENTRY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list4 = iprot.readListBegin();
                struct.metadataEntry = new ArrayList<com.wi.director.thrift.v1.metadata.MetadataEntry>(_list4.size);
                com.wi.director.thrift.v1.metadata.MetadataEntry _elem5;
                for (int _i6 = 0; _i6 < _list4.size; ++_i6)
                {
                  _elem5 = new com.wi.director.thrift.v1.metadata.MetadataEntry();
                  _elem5.read(iprot);
                  struct.metadataEntry.add(_elem5);
                }
                iprot.readListEnd();
              }
              struct.setMetadataEntryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // UNSUPPORTEDDOCUMENT_EMAIL_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.UNSUPPORTEDdocumentEmailAddress = iprot.readString();
              struct.setUNSUPPORTEDdocumentEmailAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // DOCUMENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list7 = iprot.readListBegin();
                struct.documents = new ArrayList<com.wi.director.thrift.v1.document.Document>(_list7.size);
                com.wi.director.thrift.v1.document.Document _elem8;
                for (int _i9 = 0; _i9 < _list7.size; ++_i9)
                {
                  _elem8 = new com.wi.director.thrift.v1.document.Document();
                  _elem8.read(iprot);
                  struct.documents.add(_elem8);
                }
                iprot.readListEnd();
              }
              struct.setDocumentsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // ARCHIVED_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.archivedAt = iprot.readI64();
              struct.setArchivedAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // LAST_AUTHOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastAuthor = iprot.readString();
              struct.setLastAuthorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // SYSTEM
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.system = iprot.readBool();
              struct.setSystemIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // LOCKED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.locked = new JobTemplateLock();
              struct.locked.read(iprot);
              struct.setLockedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // LAST_AUTHORED_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastAuthoredAt = iprot.readI64();
              struct.setLastAuthoredAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // PUBLISHED_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.publishedAt = iprot.readI64();
              struct.setPublishedAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // LAST_PUBLISHED_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastPublishedAt = iprot.readI64();
              struct.setLastPublishedAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // TEMPLATE_TAGS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list10 = iprot.readListBegin();
                struct.templateTags = new ArrayList<TemplateTag>(_list10.size);
                TemplateTag _elem11;
                for (int _i12 = 0; _i12 < _list10.size; ++_i12)
                {
                  _elem11 = new TemplateTag();
                  _elem11.read(iprot);
                  struct.templateTags.add(_elem11);
                }
                iprot.readListEnd();
              }
              struct.setTemplateTagsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // METADATA_BY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map13 = iprot.readMapBegin();
                struct.metadataById = new HashMap<String,com.wi.director.thrift.v1.metadata.MetadataEntry>(2*_map13.size);
                String _key14;
                com.wi.director.thrift.v1.metadata.MetadataEntry _val15;
                for (int _i16 = 0; _i16 < _map13.size; ++_i16)
                {
                  _key14 = iprot.readString();
                  _val15 = new com.wi.director.thrift.v1.metadata.MetadataEntry();
                  _val15.read(iprot);
                  struct.metadataById.put(_key14, _val15);
                }
                iprot.readMapEnd();
              }
              struct.setMetadataByIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // PUBLISHED_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.publishedVersion = iprot.readI32();
              struct.setPublishedVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // TYP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.typ = com.wi.director.thrift.v1.jobtemplate.TemplateType.findByValue(iprot.readI32());
              struct.setTypIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, JobTemplate struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.title != null) {
        oprot.writeFieldBegin(TITLE_FIELD_DESC);
        oprot.writeString(struct.title);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(VERSION_FIELD_DESC);
      oprot.writeI32(struct.version);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PUBLIC_VERSION_FIELD_DESC);
      oprot.writeI32(struct.publicVersion);
      oprot.writeFieldEnd();
      if (struct.stepGroup != null) {
        oprot.writeFieldBegin(STEP_GROUP_FIELD_DESC);
        struct.stepGroup.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeString(struct.status);
        oprot.writeFieldEnd();
      }
      if (struct.descrip != null) {
        oprot.writeFieldBegin(DESCRIP_FIELD_DESC);
        oprot.writeString(struct.descrip);
        oprot.writeFieldEnd();
      }
      if (struct.team != null) {
        oprot.writeFieldBegin(TEAM_FIELD_DESC);
        struct.team.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.metadataEntry != null) {
        if (struct.isSetMetadataEntry()) {
          oprot.writeFieldBegin(METADATA_ENTRY_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.metadataEntry.size()));
            for (com.wi.director.thrift.v1.metadata.MetadataEntry _iter17 : struct.metadataEntry)
            {
              _iter17.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.UNSUPPORTEDdocumentEmailAddress != null) {
        oprot.writeFieldBegin(UNSUPPORTEDDOCUMENT_EMAIL_ADDRESS_FIELD_DESC);
        oprot.writeString(struct.UNSUPPORTEDdocumentEmailAddress);
        oprot.writeFieldEnd();
      }
      if (struct.documents != null) {
        oprot.writeFieldBegin(DOCUMENTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.documents.size()));
          for (com.wi.director.thrift.v1.document.Document _iter18 : struct.documents)
          {
            _iter18.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ARCHIVED_AT_FIELD_DESC);
      oprot.writeI64(struct.archivedAt);
      oprot.writeFieldEnd();
      if (struct.lastAuthor != null) {
        oprot.writeFieldBegin(LAST_AUTHOR_FIELD_DESC);
        oprot.writeString(struct.lastAuthor);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SYSTEM_FIELD_DESC);
      oprot.writeBool(struct.system);
      oprot.writeFieldEnd();
      if (struct.locked != null) {
        if (struct.isSetLocked()) {
          oprot.writeFieldBegin(LOCKED_FIELD_DESC);
          struct.locked.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(LAST_AUTHORED_AT_FIELD_DESC);
      oprot.writeI64(struct.lastAuthoredAt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PUBLISHED_AT_FIELD_DESC);
      oprot.writeI64(struct.publishedAt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LAST_PUBLISHED_AT_FIELD_DESC);
      oprot.writeI64(struct.lastPublishedAt);
      oprot.writeFieldEnd();
      if (struct.templateTags != null) {
        oprot.writeFieldBegin(TEMPLATE_TAGS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.templateTags.size()));
          for (TemplateTag _iter19 : struct.templateTags)
          {
            _iter19.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.metadataById != null) {
        oprot.writeFieldBegin(METADATA_BY_ID_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.metadataById.size()));
          for (Map.Entry<String, com.wi.director.thrift.v1.metadata.MetadataEntry> _iter20 : struct.metadataById.entrySet())
          {
            oprot.writeString(_iter20.getKey());
            _iter20.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PUBLISHED_VERSION_FIELD_DESC);
      oprot.writeI32(struct.publishedVersion);
      oprot.writeFieldEnd();
      if (struct.typ != null) {
        oprot.writeFieldBegin(TYP_FIELD_DESC);
        oprot.writeI32(struct.typ.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

}

