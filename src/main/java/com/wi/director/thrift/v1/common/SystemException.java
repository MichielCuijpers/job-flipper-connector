/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wi.director.thrift.v1.common;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * The SystemException type is returned as the 'throws' type for most
 * service endpoints, as well as certain endpoints which can explicitly
 * return it.
 */
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class SystemException extends TException implements org.apache.thrift.TBase<SystemException, SystemException._Fields>, java.io.Serializable, Cloneable, Comparable<SystemException> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SystemException");

  private static final org.apache.thrift.protocol.TField ERROR_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("errorCode", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField LOCALIZED_MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("localizedMessage", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SLUG_FIELD_DESC = new org.apache.thrift.protocol.TField("slug", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField RQ_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("rqId", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField ERROR_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("errorKey", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SystemExceptionStandardSchemeFactory());
  }

  /**
   * the nature of the error
   * 
   * @see ErrorCode
   */
  public ErrorCode errorCode; // required
  /**
   * an English string describing the error condition
   */
  public String message; // required
  /**
   * if the request set the Accept-Language header to include a
   * supported language, then this field will (in the future) have a
   * localized error string in that language.
   */
  public String localizedMessage; // required
  /**
   * a unique key corresponding to the error condition for client-side localization
   */
  public String slug; // required
  /**
   * the server request ID, where available. Useful for enquiring about confusing responses with support
   */
  public String rqId; // required
  /**
   * optional string that differentiates different client dialog popups for the same type of error
   */
  public String errorKey; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * the nature of the error
     * 
     * @see ErrorCode
     */
    ERROR_CODE((short)1, "errorCode"),
    /**
     * an English string describing the error condition
     */
    MESSAGE((short)2, "message"),
    /**
     * if the request set the Accept-Language header to include a
     * supported language, then this field will (in the future) have a
     * localized error string in that language.
     */
    LOCALIZED_MESSAGE((short)3, "localizedMessage"),
    /**
     * a unique key corresponding to the error condition for client-side localization
     */
    SLUG((short)4, "slug"),
    /**
     * the server request ID, where available. Useful for enquiring about confusing responses with support
     */
    RQ_ID((short)5, "rqId"),
    /**
     * optional string that differentiates different client dialog popups for the same type of error
     */
    ERROR_KEY((short)6, "errorKey");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ERROR_CODE
          return ERROR_CODE;
        case 2: // MESSAGE
          return MESSAGE;
        case 3: // LOCALIZED_MESSAGE
          return LOCALIZED_MESSAGE;
        case 4: // SLUG
          return SLUG;
        case 5: // RQ_ID
          return RQ_ID;
        case 6: // ERROR_KEY
          return ERROR_KEY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.ERROR_KEY};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ERROR_CODE, new org.apache.thrift.meta_data.FieldMetaData("errorCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ErrorCode.class)));
    tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("message", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOCALIZED_MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("localizedMessage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SLUG, new org.apache.thrift.meta_data.FieldMetaData("slug", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RQ_ID, new org.apache.thrift.meta_data.FieldMetaData("rqId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ERROR_KEY, new org.apache.thrift.meta_data.FieldMetaData("errorKey", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SystemException.class, metaDataMap);
  }

  public SystemException() {
  }

  public SystemException(
    ErrorCode errorCode,
    String message,
    String localizedMessage,
    String slug,
    String rqId)
  {
    this();
    this.errorCode = errorCode;
    this.message = message;
    this.localizedMessage = localizedMessage;
    this.slug = slug;
    this.rqId = rqId;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SystemException(SystemException other) {
    if (other.isSetErrorCode()) {
      this.errorCode = other.errorCode;
    }
    if (other.isSetMessage()) {
      this.message = other.message;
    }
    if (other.isSetLocalizedMessage()) {
      this.localizedMessage = other.localizedMessage;
    }
    if (other.isSetSlug()) {
      this.slug = other.slug;
    }
    if (other.isSetRqId()) {
      this.rqId = other.rqId;
    }
    if (other.isSetErrorKey()) {
      this.errorKey = other.errorKey;
    }
  }

  public SystemException deepCopy() {
    return new SystemException(this);
  }

  @Override
  public void clear() {
    this.errorCode = null;
    this.message = null;
    this.localizedMessage = null;
    this.slug = null;
    this.rqId = null;
    this.errorKey = null;
  }

  /**
   * the nature of the error
   * 
   * @see ErrorCode
   */
  public ErrorCode getErrorCode() {
    return this.errorCode;
  }

  /**
   * the nature of the error
   * 
   * @see ErrorCode
   */
  public SystemException setErrorCode(ErrorCode errorCode) {
    this.errorCode = errorCode;
    return this;
  }

  public void unsetErrorCode() {
    this.errorCode = null;
  }

  /** Returns true if field errorCode is set (has been assigned a value) and false otherwise */
  public boolean isSetErrorCode() {
    return this.errorCode != null;
  }

  public void setErrorCodeIsSet(boolean value) {
    if (!value) {
      this.errorCode = null;
    }
  }

  /**
   * an English string describing the error condition
   */
  public String getMessage() {
    return this.message;
  }

  /**
   * an English string describing the error condition
   */
  public SystemException setMessage(String message) {
    this.message = message;
    return this;
  }

  public void unsetMessage() {
    this.message = null;
  }

  /** Returns true if field message is set (has been assigned a value) and false otherwise */
  public boolean isSetMessage() {
    return this.message != null;
  }

  public void setMessageIsSet(boolean value) {
    if (!value) {
      this.message = null;
    }
  }

  /**
   * if the request set the Accept-Language header to include a
   * supported language, then this field will (in the future) have a
   * localized error string in that language.
   */
  public String getLocalizedMessage() {
    return this.localizedMessage;
  }

  /**
   * if the request set the Accept-Language header to include a
   * supported language, then this field will (in the future) have a
   * localized error string in that language.
   */
  public SystemException setLocalizedMessage(String localizedMessage) {
    this.localizedMessage = localizedMessage;
    return this;
  }

  public void unsetLocalizedMessage() {
    this.localizedMessage = null;
  }

  /** Returns true if field localizedMessage is set (has been assigned a value) and false otherwise */
  public boolean isSetLocalizedMessage() {
    return this.localizedMessage != null;
  }

  public void setLocalizedMessageIsSet(boolean value) {
    if (!value) {
      this.localizedMessage = null;
    }
  }

  /**
   * a unique key corresponding to the error condition for client-side localization
   */
  public String getSlug() {
    return this.slug;
  }

  /**
   * a unique key corresponding to the error condition for client-side localization
   */
  public SystemException setSlug(String slug) {
    this.slug = slug;
    return this;
  }

  public void unsetSlug() {
    this.slug = null;
  }

  /** Returns true if field slug is set (has been assigned a value) and false otherwise */
  public boolean isSetSlug() {
    return this.slug != null;
  }

  public void setSlugIsSet(boolean value) {
    if (!value) {
      this.slug = null;
    }
  }

  /**
   * the server request ID, where available. Useful for enquiring about confusing responses with support
   */
  public String getRqId() {
    return this.rqId;
  }

  /**
   * the server request ID, where available. Useful for enquiring about confusing responses with support
   */
  public SystemException setRqId(String rqId) {
    this.rqId = rqId;
    return this;
  }

  public void unsetRqId() {
    this.rqId = null;
  }

  /** Returns true if field rqId is set (has been assigned a value) and false otherwise */
  public boolean isSetRqId() {
    return this.rqId != null;
  }

  public void setRqIdIsSet(boolean value) {
    if (!value) {
      this.rqId = null;
    }
  }

  /**
   * optional string that differentiates different client dialog popups for the same type of error
   */
  public String getErrorKey() {
    return this.errorKey;
  }

  /**
   * optional string that differentiates different client dialog popups for the same type of error
   */
  public SystemException setErrorKey(String errorKey) {
    this.errorKey = errorKey;
    return this;
  }

  public void unsetErrorKey() {
    this.errorKey = null;
  }

  /** Returns true if field errorKey is set (has been assigned a value) and false otherwise */
  public boolean isSetErrorKey() {
    return this.errorKey != null;
  }

  public void setErrorKeyIsSet(boolean value) {
    if (!value) {
      this.errorKey = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ERROR_CODE:
      if (value == null) {
        unsetErrorCode();
      } else {
        setErrorCode((ErrorCode)value);
      }
      break;

    case MESSAGE:
      if (value == null) {
        unsetMessage();
      } else {
        setMessage((String)value);
      }
      break;

    case LOCALIZED_MESSAGE:
      if (value == null) {
        unsetLocalizedMessage();
      } else {
        setLocalizedMessage((String)value);
      }
      break;

    case SLUG:
      if (value == null) {
        unsetSlug();
      } else {
        setSlug((String)value);
      }
      break;

    case RQ_ID:
      if (value == null) {
        unsetRqId();
      } else {
        setRqId((String)value);
      }
      break;

    case ERROR_KEY:
      if (value == null) {
        unsetErrorKey();
      } else {
        setErrorKey((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ERROR_CODE:
      return getErrorCode();

    case MESSAGE:
      return getMessage();

    case LOCALIZED_MESSAGE:
      return getLocalizedMessage();

    case SLUG:
      return getSlug();

    case RQ_ID:
      return getRqId();

    case ERROR_KEY:
      return getErrorKey();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ERROR_CODE:
      return isSetErrorCode();
    case MESSAGE:
      return isSetMessage();
    case LOCALIZED_MESSAGE:
      return isSetLocalizedMessage();
    case SLUG:
      return isSetSlug();
    case RQ_ID:
      return isSetRqId();
    case ERROR_KEY:
      return isSetErrorKey();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SystemException)
      return this.equals((SystemException)that);
    return false;
  }

  public boolean equals(SystemException that) {
    if (that == null)
      return false;

    boolean this_present_errorCode = true && this.isSetErrorCode();
    boolean that_present_errorCode = true && that.isSetErrorCode();
    if (this_present_errorCode || that_present_errorCode) {
      if (!(this_present_errorCode && that_present_errorCode))
        return false;
      if (!this.errorCode.equals(that.errorCode))
        return false;
    }

    boolean this_present_message = true && this.isSetMessage();
    boolean that_present_message = true && that.isSetMessage();
    if (this_present_message || that_present_message) {
      if (!(this_present_message && that_present_message))
        return false;
      if (!this.message.equals(that.message))
        return false;
    }

    boolean this_present_localizedMessage = true && this.isSetLocalizedMessage();
    boolean that_present_localizedMessage = true && that.isSetLocalizedMessage();
    if (this_present_localizedMessage || that_present_localizedMessage) {
      if (!(this_present_localizedMessage && that_present_localizedMessage))
        return false;
      if (!this.localizedMessage.equals(that.localizedMessage))
        return false;
    }

    boolean this_present_slug = true && this.isSetSlug();
    boolean that_present_slug = true && that.isSetSlug();
    if (this_present_slug || that_present_slug) {
      if (!(this_present_slug && that_present_slug))
        return false;
      if (!this.slug.equals(that.slug))
        return false;
    }

    boolean this_present_rqId = true && this.isSetRqId();
    boolean that_present_rqId = true && that.isSetRqId();
    if (this_present_rqId || that_present_rqId) {
      if (!(this_present_rqId && that_present_rqId))
        return false;
      if (!this.rqId.equals(that.rqId))
        return false;
    }

    boolean this_present_errorKey = true && this.isSetErrorKey();
    boolean that_present_errorKey = true && that.isSetErrorKey();
    if (this_present_errorKey || that_present_errorKey) {
      if (!(this_present_errorKey && that_present_errorKey))
        return false;
      if (!this.errorKey.equals(that.errorKey))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_errorCode = true && (isSetErrorCode());
    list.add(present_errorCode);
    if (present_errorCode)
      list.add(errorCode.getValue());

    boolean present_message = true && (isSetMessage());
    list.add(present_message);
    if (present_message)
      list.add(message);

    boolean present_localizedMessage = true && (isSetLocalizedMessage());
    list.add(present_localizedMessage);
    if (present_localizedMessage)
      list.add(localizedMessage);

    boolean present_slug = true && (isSetSlug());
    list.add(present_slug);
    if (present_slug)
      list.add(slug);

    boolean present_rqId = true && (isSetRqId());
    list.add(present_rqId);
    if (present_rqId)
      list.add(rqId);

    boolean present_errorKey = true && (isSetErrorKey());
    list.add(present_errorKey);
    if (present_errorKey)
      list.add(errorKey);

    return list.hashCode();
  }

  @Override
  public int compareTo(SystemException other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetErrorCode()).compareTo(other.isSetErrorCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrorCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errorCode, other.errorCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMessage()).compareTo(other.isSetMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, other.message);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocalizedMessage()).compareTo(other.isSetLocalizedMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocalizedMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.localizedMessage, other.localizedMessage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSlug()).compareTo(other.isSetSlug());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSlug()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.slug, other.slug);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRqId()).compareTo(other.isSetRqId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRqId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rqId, other.rqId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetErrorKey()).compareTo(other.isSetErrorKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrorKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errorKey, other.errorKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SystemException(");
    boolean first = true;

    sb.append("errorCode:");
    if (this.errorCode == null) {
      sb.append("null");
    } else {
      sb.append(this.errorCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("message:");
    if (this.message == null) {
      sb.append("null");
    } else {
      sb.append(this.message);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("localizedMessage:");
    if (this.localizedMessage == null) {
      sb.append("null");
    } else {
      sb.append(this.localizedMessage);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("slug:");
    if (this.slug == null) {
      sb.append("null");
    } else {
      sb.append(this.slug);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rqId:");
    if (this.rqId == null) {
      sb.append("null");
    } else {
      sb.append(this.rqId);
    }
    first = false;
    if (isSetErrorKey()) {
      if (!first) sb.append(", ");
      sb.append("errorKey:");
      if (this.errorKey == null) {
        sb.append("null");
      } else {
        sb.append(this.errorKey);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SystemExceptionStandardSchemeFactory implements SchemeFactory {
    public SystemExceptionStandardScheme getScheme() {
      return new SystemExceptionStandardScheme();
    }
  }

  private static class SystemExceptionStandardScheme extends StandardScheme<SystemException> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SystemException struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ERROR_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.errorCode = com.wi.director.thrift.v1.common.ErrorCode.findByValue(iprot.readI32());
              struct.setErrorCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.message = iprot.readString();
              struct.setMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LOCALIZED_MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.localizedMessage = iprot.readString();
              struct.setLocalizedMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SLUG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.slug = iprot.readString();
              struct.setSlugIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // RQ_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.rqId = iprot.readString();
              struct.setRqIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ERROR_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.errorKey = iprot.readString();
              struct.setErrorKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SystemException struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.errorCode != null) {
        oprot.writeFieldBegin(ERROR_CODE_FIELD_DESC);
        oprot.writeI32(struct.errorCode.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.message != null) {
        oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
        oprot.writeString(struct.message);
        oprot.writeFieldEnd();
      }
      if (struct.localizedMessage != null) {
        oprot.writeFieldBegin(LOCALIZED_MESSAGE_FIELD_DESC);
        oprot.writeString(struct.localizedMessage);
        oprot.writeFieldEnd();
      }
      if (struct.slug != null) {
        oprot.writeFieldBegin(SLUG_FIELD_DESC);
        oprot.writeString(struct.slug);
        oprot.writeFieldEnd();
      }
      if (struct.rqId != null) {
        oprot.writeFieldBegin(RQ_ID_FIELD_DESC);
        oprot.writeString(struct.rqId);
        oprot.writeFieldEnd();
      }
      if (struct.errorKey != null) {
        if (struct.isSetErrorKey()) {
          oprot.writeFieldBegin(ERROR_KEY_FIELD_DESC);
          oprot.writeString(struct.errorKey);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

}

