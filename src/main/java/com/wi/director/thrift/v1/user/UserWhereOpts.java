/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wi.director.thrift.v1.user;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class UserWhereOpts implements org.apache.thrift.TBase<UserWhereOpts, UserWhereOpts._Fields>, java.io.Serializable, Cloneable, Comparable<UserWhereOpts> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserWhereOpts");

  private static final org.apache.thrift.protocol.TField TEAM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("teamId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TEAM_ROLES_FIELD_DESC = new org.apache.thrift.protocol.TField("teamRoles", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField IS_REMOVED_FIELD_DESC = new org.apache.thrift.protocol.TField("isRemoved", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField TXT_FIELD_DESC = new org.apache.thrift.protocol.TField("txt", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField PAGE_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("pageReq", org.apache.thrift.protocol.TType.STRUCT, (short)20);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UserWhereOptsStandardSchemeFactory());
  }

  public String teamId; // optional
  public List<TeamRole> teamRoles; // optional
  public boolean isRemoved; // optional
  public UserTextSearch txt; // optional
  public com.wi.director.thrift.v1.common.PageReq pageReq; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TEAM_ID((short)1, "teamId"),
    TEAM_ROLES((short)2, "teamRoles"),
    IS_REMOVED((short)3, "isRemoved"),
    TXT((short)4, "txt"),
    PAGE_REQ((short)20, "pageReq");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TEAM_ID
          return TEAM_ID;
        case 2: // TEAM_ROLES
          return TEAM_ROLES;
        case 3: // IS_REMOVED
          return IS_REMOVED;
        case 4: // TXT
          return TXT;
        case 20: // PAGE_REQ
          return PAGE_REQ;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ISREMOVED_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.TEAM_ID,_Fields.TEAM_ROLES,_Fields.IS_REMOVED,_Fields.TXT,_Fields.PAGE_REQ};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TEAM_ID, new org.apache.thrift.meta_data.FieldMetaData("teamId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TEAM_ROLES, new org.apache.thrift.meta_data.FieldMetaData("teamRoles", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TeamRole.class))));
    tmpMap.put(_Fields.IS_REMOVED, new org.apache.thrift.meta_data.FieldMetaData("isRemoved", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TXT, new org.apache.thrift.meta_data.FieldMetaData("txt", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserTextSearch.class)));
    tmpMap.put(_Fields.PAGE_REQ, new org.apache.thrift.meta_data.FieldMetaData("pageReq", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.common.PageReq.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserWhereOpts.class, metaDataMap);
  }

  public UserWhereOpts() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UserWhereOpts(UserWhereOpts other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTeamId()) {
      this.teamId = other.teamId;
    }
    if (other.isSetTeamRoles()) {
      List<TeamRole> __this__teamRoles = new ArrayList<TeamRole>(other.teamRoles.size());
      for (TeamRole other_element : other.teamRoles) {
        __this__teamRoles.add(other_element);
      }
      this.teamRoles = __this__teamRoles;
    }
    this.isRemoved = other.isRemoved;
    if (other.isSetTxt()) {
      this.txt = new UserTextSearch(other.txt);
    }
    if (other.isSetPageReq()) {
      this.pageReq = new com.wi.director.thrift.v1.common.PageReq(other.pageReq);
    }
  }

  public UserWhereOpts deepCopy() {
    return new UserWhereOpts(this);
  }

  @Override
  public void clear() {
    this.teamId = null;
    this.teamRoles = null;
    setIsRemovedIsSet(false);
    this.isRemoved = false;
    this.txt = null;
    this.pageReq = null;
  }

  public String getTeamId() {
    return this.teamId;
  }

  public UserWhereOpts setTeamId(String teamId) {
    this.teamId = teamId;
    return this;
  }

  public void unsetTeamId() {
    this.teamId = null;
  }

  /** Returns true if field teamId is set (has been assigned a value) and false otherwise */
  public boolean isSetTeamId() {
    return this.teamId != null;
  }

  public void setTeamIdIsSet(boolean value) {
    if (!value) {
      this.teamId = null;
    }
  }

  public int getTeamRolesSize() {
    return (this.teamRoles == null) ? 0 : this.teamRoles.size();
  }

  public java.util.Iterator<TeamRole> getTeamRolesIterator() {
    return (this.teamRoles == null) ? null : this.teamRoles.iterator();
  }

  public void addToTeamRoles(TeamRole elem) {
    if (this.teamRoles == null) {
      this.teamRoles = new ArrayList<TeamRole>();
    }
    this.teamRoles.add(elem);
  }

  public List<TeamRole> getTeamRoles() {
    return this.teamRoles;
  }

  public UserWhereOpts setTeamRoles(List<TeamRole> teamRoles) {
    this.teamRoles = teamRoles;
    return this;
  }

  public void unsetTeamRoles() {
    this.teamRoles = null;
  }

  /** Returns true if field teamRoles is set (has been assigned a value) and false otherwise */
  public boolean isSetTeamRoles() {
    return this.teamRoles != null;
  }

  public void setTeamRolesIsSet(boolean value) {
    if (!value) {
      this.teamRoles = null;
    }
  }

  public boolean isIsRemoved() {
    return this.isRemoved;
  }

  public UserWhereOpts setIsRemoved(boolean isRemoved) {
    this.isRemoved = isRemoved;
    setIsRemovedIsSet(true);
    return this;
  }

  public void unsetIsRemoved() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISREMOVED_ISSET_ID);
  }

  /** Returns true if field isRemoved is set (has been assigned a value) and false otherwise */
  public boolean isSetIsRemoved() {
    return EncodingUtils.testBit(__isset_bitfield, __ISREMOVED_ISSET_ID);
  }

  public void setIsRemovedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISREMOVED_ISSET_ID, value);
  }

  public UserTextSearch getTxt() {
    return this.txt;
  }

  public UserWhereOpts setTxt(UserTextSearch txt) {
    this.txt = txt;
    return this;
  }

  public void unsetTxt() {
    this.txt = null;
  }

  /** Returns true if field txt is set (has been assigned a value) and false otherwise */
  public boolean isSetTxt() {
    return this.txt != null;
  }

  public void setTxtIsSet(boolean value) {
    if (!value) {
      this.txt = null;
    }
  }

  public com.wi.director.thrift.v1.common.PageReq getPageReq() {
    return this.pageReq;
  }

  public UserWhereOpts setPageReq(com.wi.director.thrift.v1.common.PageReq pageReq) {
    this.pageReq = pageReq;
    return this;
  }

  public void unsetPageReq() {
    this.pageReq = null;
  }

  /** Returns true if field pageReq is set (has been assigned a value) and false otherwise */
  public boolean isSetPageReq() {
    return this.pageReq != null;
  }

  public void setPageReqIsSet(boolean value) {
    if (!value) {
      this.pageReq = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TEAM_ID:
      if (value == null) {
        unsetTeamId();
      } else {
        setTeamId((String)value);
      }
      break;

    case TEAM_ROLES:
      if (value == null) {
        unsetTeamRoles();
      } else {
        setTeamRoles((List<TeamRole>)value);
      }
      break;

    case IS_REMOVED:
      if (value == null) {
        unsetIsRemoved();
      } else {
        setIsRemoved((Boolean)value);
      }
      break;

    case TXT:
      if (value == null) {
        unsetTxt();
      } else {
        setTxt((UserTextSearch)value);
      }
      break;

    case PAGE_REQ:
      if (value == null) {
        unsetPageReq();
      } else {
        setPageReq((com.wi.director.thrift.v1.common.PageReq)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TEAM_ID:
      return getTeamId();

    case TEAM_ROLES:
      return getTeamRoles();

    case IS_REMOVED:
      return isIsRemoved();

    case TXT:
      return getTxt();

    case PAGE_REQ:
      return getPageReq();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TEAM_ID:
      return isSetTeamId();
    case TEAM_ROLES:
      return isSetTeamRoles();
    case IS_REMOVED:
      return isSetIsRemoved();
    case TXT:
      return isSetTxt();
    case PAGE_REQ:
      return isSetPageReq();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UserWhereOpts)
      return this.equals((UserWhereOpts)that);
    return false;
  }

  public boolean equals(UserWhereOpts that) {
    if (that == null)
      return false;

    boolean this_present_teamId = true && this.isSetTeamId();
    boolean that_present_teamId = true && that.isSetTeamId();
    if (this_present_teamId || that_present_teamId) {
      if (!(this_present_teamId && that_present_teamId))
        return false;
      if (!this.teamId.equals(that.teamId))
        return false;
    }

    boolean this_present_teamRoles = true && this.isSetTeamRoles();
    boolean that_present_teamRoles = true && that.isSetTeamRoles();
    if (this_present_teamRoles || that_present_teamRoles) {
      if (!(this_present_teamRoles && that_present_teamRoles))
        return false;
      if (!this.teamRoles.equals(that.teamRoles))
        return false;
    }

    boolean this_present_isRemoved = true && this.isSetIsRemoved();
    boolean that_present_isRemoved = true && that.isSetIsRemoved();
    if (this_present_isRemoved || that_present_isRemoved) {
      if (!(this_present_isRemoved && that_present_isRemoved))
        return false;
      if (this.isRemoved != that.isRemoved)
        return false;
    }

    boolean this_present_txt = true && this.isSetTxt();
    boolean that_present_txt = true && that.isSetTxt();
    if (this_present_txt || that_present_txt) {
      if (!(this_present_txt && that_present_txt))
        return false;
      if (!this.txt.equals(that.txt))
        return false;
    }

    boolean this_present_pageReq = true && this.isSetPageReq();
    boolean that_present_pageReq = true && that.isSetPageReq();
    if (this_present_pageReq || that_present_pageReq) {
      if (!(this_present_pageReq && that_present_pageReq))
        return false;
      if (!this.pageReq.equals(that.pageReq))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_teamId = true && (isSetTeamId());
    list.add(present_teamId);
    if (present_teamId)
      list.add(teamId);

    boolean present_teamRoles = true && (isSetTeamRoles());
    list.add(present_teamRoles);
    if (present_teamRoles)
      list.add(teamRoles);

    boolean present_isRemoved = true && (isSetIsRemoved());
    list.add(present_isRemoved);
    if (present_isRemoved)
      list.add(isRemoved);

    boolean present_txt = true && (isSetTxt());
    list.add(present_txt);
    if (present_txt)
      list.add(txt);

    boolean present_pageReq = true && (isSetPageReq());
    list.add(present_pageReq);
    if (present_pageReq)
      list.add(pageReq);

    return list.hashCode();
  }

  @Override
  public int compareTo(UserWhereOpts other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTeamId()).compareTo(other.isSetTeamId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeamId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teamId, other.teamId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTeamRoles()).compareTo(other.isSetTeamRoles());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeamRoles()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teamRoles, other.teamRoles);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsRemoved()).compareTo(other.isSetIsRemoved());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsRemoved()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isRemoved, other.isRemoved);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTxt()).compareTo(other.isSetTxt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTxt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.txt, other.txt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPageReq()).compareTo(other.isSetPageReq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPageReq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageReq, other.pageReq);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("UserWhereOpts(");
    boolean first = true;

    if (isSetTeamId()) {
      sb.append("teamId:");
      if (this.teamId == null) {
        sb.append("null");
      } else {
        sb.append(this.teamId);
      }
      first = false;
    }
    if (isSetTeamRoles()) {
      if (!first) sb.append(", ");
      sb.append("teamRoles:");
      if (this.teamRoles == null) {
        sb.append("null");
      } else {
        sb.append(this.teamRoles);
      }
      first = false;
    }
    if (isSetIsRemoved()) {
      if (!first) sb.append(", ");
      sb.append("isRemoved:");
      sb.append(this.isRemoved);
      first = false;
    }
    if (isSetTxt()) {
      if (!first) sb.append(", ");
      sb.append("txt:");
      if (this.txt == null) {
        sb.append("null");
      } else {
        sb.append(this.txt);
      }
      first = false;
    }
    if (isSetPageReq()) {
      if (!first) sb.append(", ");
      sb.append("pageReq:");
      if (this.pageReq == null) {
        sb.append("null");
      } else {
        sb.append(this.pageReq);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (txt != null) {
      txt.validate();
    }
    if (pageReq != null) {
      pageReq.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserWhereOptsStandardSchemeFactory implements SchemeFactory {
    public UserWhereOptsStandardScheme getScheme() {
      return new UserWhereOptsStandardScheme();
    }
  }

  private static class UserWhereOptsStandardScheme extends StandardScheme<UserWhereOpts> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UserWhereOpts struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TEAM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.teamId = iprot.readString();
              struct.setTeamIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TEAM_ROLES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list23 = iprot.readListBegin();
                struct.teamRoles = new ArrayList<TeamRole>(_list23.size);
                TeamRole _elem24;
                for (int _i25 = 0; _i25 < _list23.size; ++_i25)
                {
                  _elem24 = com.wi.director.thrift.v1.user.TeamRole.findByValue(iprot.readI32());
                  struct.teamRoles.add(_elem24);
                }
                iprot.readListEnd();
              }
              struct.setTeamRolesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // IS_REMOVED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isRemoved = iprot.readBool();
              struct.setIsRemovedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.txt = new UserTextSearch();
              struct.txt.read(iprot);
              struct.setTxtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // PAGE_REQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.pageReq = new com.wi.director.thrift.v1.common.PageReq();
              struct.pageReq.read(iprot);
              struct.setPageReqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UserWhereOpts struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.teamId != null) {
        if (struct.isSetTeamId()) {
          oprot.writeFieldBegin(TEAM_ID_FIELD_DESC);
          oprot.writeString(struct.teamId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.teamRoles != null) {
        if (struct.isSetTeamRoles()) {
          oprot.writeFieldBegin(TEAM_ROLES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.teamRoles.size()));
            for (TeamRole _iter26 : struct.teamRoles)
            {
              oprot.writeI32(_iter26.getValue());
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIsRemoved()) {
        oprot.writeFieldBegin(IS_REMOVED_FIELD_DESC);
        oprot.writeBool(struct.isRemoved);
        oprot.writeFieldEnd();
      }
      if (struct.txt != null) {
        if (struct.isSetTxt()) {
          oprot.writeFieldBegin(TXT_FIELD_DESC);
          struct.txt.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.pageReq != null) {
        if (struct.isSetPageReq()) {
          oprot.writeFieldBegin(PAGE_REQ_FIELD_DESC);
          struct.pageReq.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

}

