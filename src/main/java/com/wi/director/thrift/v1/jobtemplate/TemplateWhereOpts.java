/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wi.director.thrift.v1.jobtemplate;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class TemplateWhereOpts implements org.apache.thrift.TBase<TemplateWhereOpts, TemplateWhereOpts._Fields>, java.io.Serializable, Cloneable, Comparable<TemplateWhereOpts> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TemplateWhereOpts");

  private static final org.apache.thrift.protocol.TField TEAM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("teamId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField IS_ARCHIVED_FIELD_DESC = new org.apache.thrift.protocol.TField("isArchived", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField IS_PUBLISHED_FIELD_DESC = new org.apache.thrift.protocol.TField("isPublished", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField TXT_FIELD_DESC = new org.apache.thrift.protocol.TField("txt", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField METADATA_FIELD_DESC = new org.apache.thrift.protocol.TField("metadata", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField AUTHOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("authorId", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField ROOT_CATEGORY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("rootCategoryId", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField MODIFIED_SINCE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("modifiedSinceTime", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField MODIFIED_BEFORE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("modifiedBeforeTime", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField TEMPLATE_TYPES_FIELD_DESC = new org.apache.thrift.protocol.TField("templateTypes", org.apache.thrift.protocol.TType.SET, (short)10);
  private static final org.apache.thrift.protocol.TField PAGE_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("pageReq", org.apache.thrift.protocol.TType.STRUCT, (short)20);
  private static final org.apache.thrift.protocol.TField EXTERNAL_OPTS_FIELD_DESC = new org.apache.thrift.protocol.TField("externalOpts", org.apache.thrift.protocol.TType.STRUCT, (short)30);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TemplateWhereOptsStandardSchemeFactory());
  }

  public String teamId; // required
  public boolean isArchived; // optional
  public boolean isPublished; // optional
  public TemplateTextSearch txt; // optional
  /**
   * See <a href="metadata.html#Struct_MetadataValue">MetadataValue</a> for specific metadata filter criteria
   */
  public List<com.wi.director.thrift.v1.metadata.MetadataEntry> metadata; // optional
  public String authorId; // optional
  public String rootCategoryId; // optional
  public long modifiedSinceTime; // optional
  public long modifiedBeforeTime; // optional
  public Set<TemplateType> templateTypes; // optional
  public com.wi.director.thrift.v1.common.PageReq pageReq; // optional
  public com.wi.director.thrift.v1.common.ExternalOpts externalOpts; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TEAM_ID((short)1, "teamId"),
    IS_ARCHIVED((short)2, "isArchived"),
    IS_PUBLISHED((short)3, "isPublished"),
    TXT((short)4, "txt"),
    /**
     * See <a href="metadata.html#Struct_MetadataValue">MetadataValue</a> for specific metadata filter criteria
     */
    METADATA((short)5, "metadata"),
    AUTHOR_ID((short)6, "authorId"),
    ROOT_CATEGORY_ID((short)7, "rootCategoryId"),
    MODIFIED_SINCE_TIME((short)8, "modifiedSinceTime"),
    MODIFIED_BEFORE_TIME((short)9, "modifiedBeforeTime"),
    TEMPLATE_TYPES((short)10, "templateTypes"),
    PAGE_REQ((short)20, "pageReq"),
    EXTERNAL_OPTS((short)30, "externalOpts");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TEAM_ID
          return TEAM_ID;
        case 2: // IS_ARCHIVED
          return IS_ARCHIVED;
        case 3: // IS_PUBLISHED
          return IS_PUBLISHED;
        case 4: // TXT
          return TXT;
        case 5: // METADATA
          return METADATA;
        case 6: // AUTHOR_ID
          return AUTHOR_ID;
        case 7: // ROOT_CATEGORY_ID
          return ROOT_CATEGORY_ID;
        case 8: // MODIFIED_SINCE_TIME
          return MODIFIED_SINCE_TIME;
        case 9: // MODIFIED_BEFORE_TIME
          return MODIFIED_BEFORE_TIME;
        case 10: // TEMPLATE_TYPES
          return TEMPLATE_TYPES;
        case 20: // PAGE_REQ
          return PAGE_REQ;
        case 30: // EXTERNAL_OPTS
          return EXTERNAL_OPTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ISARCHIVED_ISSET_ID = 0;
  private static final int __ISPUBLISHED_ISSET_ID = 1;
  private static final int __MODIFIEDSINCETIME_ISSET_ID = 2;
  private static final int __MODIFIEDBEFORETIME_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.IS_ARCHIVED,_Fields.IS_PUBLISHED,_Fields.TXT,_Fields.METADATA,_Fields.AUTHOR_ID,_Fields.ROOT_CATEGORY_ID,_Fields.MODIFIED_SINCE_TIME,_Fields.MODIFIED_BEFORE_TIME,_Fields.TEMPLATE_TYPES,_Fields.PAGE_REQ,_Fields.EXTERNAL_OPTS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TEAM_ID, new org.apache.thrift.meta_data.FieldMetaData("teamId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_ARCHIVED, new org.apache.thrift.meta_data.FieldMetaData("isArchived", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_PUBLISHED, new org.apache.thrift.meta_data.FieldMetaData("isPublished", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TXT, new org.apache.thrift.meta_data.FieldMetaData("txt", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TemplateTextSearch.class)));
    tmpMap.put(_Fields.METADATA, new org.apache.thrift.meta_data.FieldMetaData("metadata", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.metadata.MetadataEntry.class))));
    tmpMap.put(_Fields.AUTHOR_ID, new org.apache.thrift.meta_data.FieldMetaData("authorId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ROOT_CATEGORY_ID, new org.apache.thrift.meta_data.FieldMetaData("rootCategoryId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MODIFIED_SINCE_TIME, new org.apache.thrift.meta_data.FieldMetaData("modifiedSinceTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MODIFIED_BEFORE_TIME, new org.apache.thrift.meta_data.FieldMetaData("modifiedBeforeTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TEMPLATE_TYPES, new org.apache.thrift.meta_data.FieldMetaData("templateTypes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TemplateType.class))));
    tmpMap.put(_Fields.PAGE_REQ, new org.apache.thrift.meta_data.FieldMetaData("pageReq", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.common.PageReq.class)));
    tmpMap.put(_Fields.EXTERNAL_OPTS, new org.apache.thrift.meta_data.FieldMetaData("externalOpts", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.common.ExternalOpts.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TemplateWhereOpts.class, metaDataMap);
  }

  public TemplateWhereOpts() {
  }

  public TemplateWhereOpts(
    String teamId)
  {
    this();
    this.teamId = teamId;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TemplateWhereOpts(TemplateWhereOpts other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTeamId()) {
      this.teamId = other.teamId;
    }
    this.isArchived = other.isArchived;
    this.isPublished = other.isPublished;
    if (other.isSetTxt()) {
      this.txt = new TemplateTextSearch(other.txt);
    }
    if (other.isSetMetadata()) {
      List<com.wi.director.thrift.v1.metadata.MetadataEntry> __this__metadata = new ArrayList<com.wi.director.thrift.v1.metadata.MetadataEntry>(other.metadata.size());
      for (com.wi.director.thrift.v1.metadata.MetadataEntry other_element : other.metadata) {
        __this__metadata.add(new com.wi.director.thrift.v1.metadata.MetadataEntry(other_element));
      }
      this.metadata = __this__metadata;
    }
    if (other.isSetAuthorId()) {
      this.authorId = other.authorId;
    }
    if (other.isSetRootCategoryId()) {
      this.rootCategoryId = other.rootCategoryId;
    }
    this.modifiedSinceTime = other.modifiedSinceTime;
    this.modifiedBeforeTime = other.modifiedBeforeTime;
    if (other.isSetTemplateTypes()) {
      Set<TemplateType> __this__templateTypes = new HashSet<TemplateType>(other.templateTypes.size());
      for (TemplateType other_element : other.templateTypes) {
        __this__templateTypes.add(other_element);
      }
      this.templateTypes = __this__templateTypes;
    }
    if (other.isSetPageReq()) {
      this.pageReq = new com.wi.director.thrift.v1.common.PageReq(other.pageReq);
    }
    if (other.isSetExternalOpts()) {
      this.externalOpts = new com.wi.director.thrift.v1.common.ExternalOpts(other.externalOpts);
    }
  }

  public TemplateWhereOpts deepCopy() {
    return new TemplateWhereOpts(this);
  }

  @Override
  public void clear() {
    this.teamId = null;
    setIsArchivedIsSet(false);
    this.isArchived = false;
    setIsPublishedIsSet(false);
    this.isPublished = false;
    this.txt = null;
    this.metadata = null;
    this.authorId = null;
    this.rootCategoryId = null;
    setModifiedSinceTimeIsSet(false);
    this.modifiedSinceTime = 0;
    setModifiedBeforeTimeIsSet(false);
    this.modifiedBeforeTime = 0;
    this.templateTypes = null;
    this.pageReq = null;
    this.externalOpts = null;
  }

  public String getTeamId() {
    return this.teamId;
  }

  public TemplateWhereOpts setTeamId(String teamId) {
    this.teamId = teamId;
    return this;
  }

  public void unsetTeamId() {
    this.teamId = null;
  }

  /** Returns true if field teamId is set (has been assigned a value) and false otherwise */
  public boolean isSetTeamId() {
    return this.teamId != null;
  }

  public void setTeamIdIsSet(boolean value) {
    if (!value) {
      this.teamId = null;
    }
  }

  public boolean isIsArchived() {
    return this.isArchived;
  }

  public TemplateWhereOpts setIsArchived(boolean isArchived) {
    this.isArchived = isArchived;
    setIsArchivedIsSet(true);
    return this;
  }

  public void unsetIsArchived() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISARCHIVED_ISSET_ID);
  }

  /** Returns true if field isArchived is set (has been assigned a value) and false otherwise */
  public boolean isSetIsArchived() {
    return EncodingUtils.testBit(__isset_bitfield, __ISARCHIVED_ISSET_ID);
  }

  public void setIsArchivedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISARCHIVED_ISSET_ID, value);
  }

  public boolean isIsPublished() {
    return this.isPublished;
  }

  public TemplateWhereOpts setIsPublished(boolean isPublished) {
    this.isPublished = isPublished;
    setIsPublishedIsSet(true);
    return this;
  }

  public void unsetIsPublished() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISPUBLISHED_ISSET_ID);
  }

  /** Returns true if field isPublished is set (has been assigned a value) and false otherwise */
  public boolean isSetIsPublished() {
    return EncodingUtils.testBit(__isset_bitfield, __ISPUBLISHED_ISSET_ID);
  }

  public void setIsPublishedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISPUBLISHED_ISSET_ID, value);
  }

  public TemplateTextSearch getTxt() {
    return this.txt;
  }

  public TemplateWhereOpts setTxt(TemplateTextSearch txt) {
    this.txt = txt;
    return this;
  }

  public void unsetTxt() {
    this.txt = null;
  }

  /** Returns true if field txt is set (has been assigned a value) and false otherwise */
  public boolean isSetTxt() {
    return this.txt != null;
  }

  public void setTxtIsSet(boolean value) {
    if (!value) {
      this.txt = null;
    }
  }

  public int getMetadataSize() {
    return (this.metadata == null) ? 0 : this.metadata.size();
  }

  public java.util.Iterator<com.wi.director.thrift.v1.metadata.MetadataEntry> getMetadataIterator() {
    return (this.metadata == null) ? null : this.metadata.iterator();
  }

  public void addToMetadata(com.wi.director.thrift.v1.metadata.MetadataEntry elem) {
    if (this.metadata == null) {
      this.metadata = new ArrayList<com.wi.director.thrift.v1.metadata.MetadataEntry>();
    }
    this.metadata.add(elem);
  }

  /**
   * See <a href="metadata.html#Struct_MetadataValue">MetadataValue</a> for specific metadata filter criteria
   */
  public List<com.wi.director.thrift.v1.metadata.MetadataEntry> getMetadata() {
    return this.metadata;
  }

  /**
   * See <a href="metadata.html#Struct_MetadataValue">MetadataValue</a> for specific metadata filter criteria
   */
  public TemplateWhereOpts setMetadata(List<com.wi.director.thrift.v1.metadata.MetadataEntry> metadata) {
    this.metadata = metadata;
    return this;
  }

  public void unsetMetadata() {
    this.metadata = null;
  }

  /** Returns true if field metadata is set (has been assigned a value) and false otherwise */
  public boolean isSetMetadata() {
    return this.metadata != null;
  }

  public void setMetadataIsSet(boolean value) {
    if (!value) {
      this.metadata = null;
    }
  }

  public String getAuthorId() {
    return this.authorId;
  }

  public TemplateWhereOpts setAuthorId(String authorId) {
    this.authorId = authorId;
    return this;
  }

  public void unsetAuthorId() {
    this.authorId = null;
  }

  /** Returns true if field authorId is set (has been assigned a value) and false otherwise */
  public boolean isSetAuthorId() {
    return this.authorId != null;
  }

  public void setAuthorIdIsSet(boolean value) {
    if (!value) {
      this.authorId = null;
    }
  }

  public String getRootCategoryId() {
    return this.rootCategoryId;
  }

  public TemplateWhereOpts setRootCategoryId(String rootCategoryId) {
    this.rootCategoryId = rootCategoryId;
    return this;
  }

  public void unsetRootCategoryId() {
    this.rootCategoryId = null;
  }

  /** Returns true if field rootCategoryId is set (has been assigned a value) and false otherwise */
  public boolean isSetRootCategoryId() {
    return this.rootCategoryId != null;
  }

  public void setRootCategoryIdIsSet(boolean value) {
    if (!value) {
      this.rootCategoryId = null;
    }
  }

  public long getModifiedSinceTime() {
    return this.modifiedSinceTime;
  }

  public TemplateWhereOpts setModifiedSinceTime(long modifiedSinceTime) {
    this.modifiedSinceTime = modifiedSinceTime;
    setModifiedSinceTimeIsSet(true);
    return this;
  }

  public void unsetModifiedSinceTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MODIFIEDSINCETIME_ISSET_ID);
  }

  /** Returns true if field modifiedSinceTime is set (has been assigned a value) and false otherwise */
  public boolean isSetModifiedSinceTime() {
    return EncodingUtils.testBit(__isset_bitfield, __MODIFIEDSINCETIME_ISSET_ID);
  }

  public void setModifiedSinceTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MODIFIEDSINCETIME_ISSET_ID, value);
  }

  public long getModifiedBeforeTime() {
    return this.modifiedBeforeTime;
  }

  public TemplateWhereOpts setModifiedBeforeTime(long modifiedBeforeTime) {
    this.modifiedBeforeTime = modifiedBeforeTime;
    setModifiedBeforeTimeIsSet(true);
    return this;
  }

  public void unsetModifiedBeforeTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MODIFIEDBEFORETIME_ISSET_ID);
  }

  /** Returns true if field modifiedBeforeTime is set (has been assigned a value) and false otherwise */
  public boolean isSetModifiedBeforeTime() {
    return EncodingUtils.testBit(__isset_bitfield, __MODIFIEDBEFORETIME_ISSET_ID);
  }

  public void setModifiedBeforeTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MODIFIEDBEFORETIME_ISSET_ID, value);
  }

  public int getTemplateTypesSize() {
    return (this.templateTypes == null) ? 0 : this.templateTypes.size();
  }

  public java.util.Iterator<TemplateType> getTemplateTypesIterator() {
    return (this.templateTypes == null) ? null : this.templateTypes.iterator();
  }

  public void addToTemplateTypes(TemplateType elem) {
    if (this.templateTypes == null) {
      this.templateTypes = new HashSet<TemplateType>();
    }
    this.templateTypes.add(elem);
  }

  public Set<TemplateType> getTemplateTypes() {
    return this.templateTypes;
  }

  public TemplateWhereOpts setTemplateTypes(Set<TemplateType> templateTypes) {
    this.templateTypes = templateTypes;
    return this;
  }

  public void unsetTemplateTypes() {
    this.templateTypes = null;
  }

  /** Returns true if field templateTypes is set (has been assigned a value) and false otherwise */
  public boolean isSetTemplateTypes() {
    return this.templateTypes != null;
  }

  public void setTemplateTypesIsSet(boolean value) {
    if (!value) {
      this.templateTypes = null;
    }
  }

  public com.wi.director.thrift.v1.common.PageReq getPageReq() {
    return this.pageReq;
  }

  public TemplateWhereOpts setPageReq(com.wi.director.thrift.v1.common.PageReq pageReq) {
    this.pageReq = pageReq;
    return this;
  }

  public void unsetPageReq() {
    this.pageReq = null;
  }

  /** Returns true if field pageReq is set (has been assigned a value) and false otherwise */
  public boolean isSetPageReq() {
    return this.pageReq != null;
  }

  public void setPageReqIsSet(boolean value) {
    if (!value) {
      this.pageReq = null;
    }
  }

  public com.wi.director.thrift.v1.common.ExternalOpts getExternalOpts() {
    return this.externalOpts;
  }

  public TemplateWhereOpts setExternalOpts(com.wi.director.thrift.v1.common.ExternalOpts externalOpts) {
    this.externalOpts = externalOpts;
    return this;
  }

  public void unsetExternalOpts() {
    this.externalOpts = null;
  }

  /** Returns true if field externalOpts is set (has been assigned a value) and false otherwise */
  public boolean isSetExternalOpts() {
    return this.externalOpts != null;
  }

  public void setExternalOptsIsSet(boolean value) {
    if (!value) {
      this.externalOpts = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TEAM_ID:
      if (value == null) {
        unsetTeamId();
      } else {
        setTeamId((String)value);
      }
      break;

    case IS_ARCHIVED:
      if (value == null) {
        unsetIsArchived();
      } else {
        setIsArchived((Boolean)value);
      }
      break;

    case IS_PUBLISHED:
      if (value == null) {
        unsetIsPublished();
      } else {
        setIsPublished((Boolean)value);
      }
      break;

    case TXT:
      if (value == null) {
        unsetTxt();
      } else {
        setTxt((TemplateTextSearch)value);
      }
      break;

    case METADATA:
      if (value == null) {
        unsetMetadata();
      } else {
        setMetadata((List<com.wi.director.thrift.v1.metadata.MetadataEntry>)value);
      }
      break;

    case AUTHOR_ID:
      if (value == null) {
        unsetAuthorId();
      } else {
        setAuthorId((String)value);
      }
      break;

    case ROOT_CATEGORY_ID:
      if (value == null) {
        unsetRootCategoryId();
      } else {
        setRootCategoryId((String)value);
      }
      break;

    case MODIFIED_SINCE_TIME:
      if (value == null) {
        unsetModifiedSinceTime();
      } else {
        setModifiedSinceTime((Long)value);
      }
      break;

    case MODIFIED_BEFORE_TIME:
      if (value == null) {
        unsetModifiedBeforeTime();
      } else {
        setModifiedBeforeTime((Long)value);
      }
      break;

    case TEMPLATE_TYPES:
      if (value == null) {
        unsetTemplateTypes();
      } else {
        setTemplateTypes((Set<TemplateType>)value);
      }
      break;

    case PAGE_REQ:
      if (value == null) {
        unsetPageReq();
      } else {
        setPageReq((com.wi.director.thrift.v1.common.PageReq)value);
      }
      break;

    case EXTERNAL_OPTS:
      if (value == null) {
        unsetExternalOpts();
      } else {
        setExternalOpts((com.wi.director.thrift.v1.common.ExternalOpts)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TEAM_ID:
      return getTeamId();

    case IS_ARCHIVED:
      return isIsArchived();

    case IS_PUBLISHED:
      return isIsPublished();

    case TXT:
      return getTxt();

    case METADATA:
      return getMetadata();

    case AUTHOR_ID:
      return getAuthorId();

    case ROOT_CATEGORY_ID:
      return getRootCategoryId();

    case MODIFIED_SINCE_TIME:
      return getModifiedSinceTime();

    case MODIFIED_BEFORE_TIME:
      return getModifiedBeforeTime();

    case TEMPLATE_TYPES:
      return getTemplateTypes();

    case PAGE_REQ:
      return getPageReq();

    case EXTERNAL_OPTS:
      return getExternalOpts();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TEAM_ID:
      return isSetTeamId();
    case IS_ARCHIVED:
      return isSetIsArchived();
    case IS_PUBLISHED:
      return isSetIsPublished();
    case TXT:
      return isSetTxt();
    case METADATA:
      return isSetMetadata();
    case AUTHOR_ID:
      return isSetAuthorId();
    case ROOT_CATEGORY_ID:
      return isSetRootCategoryId();
    case MODIFIED_SINCE_TIME:
      return isSetModifiedSinceTime();
    case MODIFIED_BEFORE_TIME:
      return isSetModifiedBeforeTime();
    case TEMPLATE_TYPES:
      return isSetTemplateTypes();
    case PAGE_REQ:
      return isSetPageReq();
    case EXTERNAL_OPTS:
      return isSetExternalOpts();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TemplateWhereOpts)
      return this.equals((TemplateWhereOpts)that);
    return false;
  }

  public boolean equals(TemplateWhereOpts that) {
    if (that == null)
      return false;

    boolean this_present_teamId = true && this.isSetTeamId();
    boolean that_present_teamId = true && that.isSetTeamId();
    if (this_present_teamId || that_present_teamId) {
      if (!(this_present_teamId && that_present_teamId))
        return false;
      if (!this.teamId.equals(that.teamId))
        return false;
    }

    boolean this_present_isArchived = true && this.isSetIsArchived();
    boolean that_present_isArchived = true && that.isSetIsArchived();
    if (this_present_isArchived || that_present_isArchived) {
      if (!(this_present_isArchived && that_present_isArchived))
        return false;
      if (this.isArchived != that.isArchived)
        return false;
    }

    boolean this_present_isPublished = true && this.isSetIsPublished();
    boolean that_present_isPublished = true && that.isSetIsPublished();
    if (this_present_isPublished || that_present_isPublished) {
      if (!(this_present_isPublished && that_present_isPublished))
        return false;
      if (this.isPublished != that.isPublished)
        return false;
    }

    boolean this_present_txt = true && this.isSetTxt();
    boolean that_present_txt = true && that.isSetTxt();
    if (this_present_txt || that_present_txt) {
      if (!(this_present_txt && that_present_txt))
        return false;
      if (!this.txt.equals(that.txt))
        return false;
    }

    boolean this_present_metadata = true && this.isSetMetadata();
    boolean that_present_metadata = true && that.isSetMetadata();
    if (this_present_metadata || that_present_metadata) {
      if (!(this_present_metadata && that_present_metadata))
        return false;
      if (!this.metadata.equals(that.metadata))
        return false;
    }

    boolean this_present_authorId = true && this.isSetAuthorId();
    boolean that_present_authorId = true && that.isSetAuthorId();
    if (this_present_authorId || that_present_authorId) {
      if (!(this_present_authorId && that_present_authorId))
        return false;
      if (!this.authorId.equals(that.authorId))
        return false;
    }

    boolean this_present_rootCategoryId = true && this.isSetRootCategoryId();
    boolean that_present_rootCategoryId = true && that.isSetRootCategoryId();
    if (this_present_rootCategoryId || that_present_rootCategoryId) {
      if (!(this_present_rootCategoryId && that_present_rootCategoryId))
        return false;
      if (!this.rootCategoryId.equals(that.rootCategoryId))
        return false;
    }

    boolean this_present_modifiedSinceTime = true && this.isSetModifiedSinceTime();
    boolean that_present_modifiedSinceTime = true && that.isSetModifiedSinceTime();
    if (this_present_modifiedSinceTime || that_present_modifiedSinceTime) {
      if (!(this_present_modifiedSinceTime && that_present_modifiedSinceTime))
        return false;
      if (this.modifiedSinceTime != that.modifiedSinceTime)
        return false;
    }

    boolean this_present_modifiedBeforeTime = true && this.isSetModifiedBeforeTime();
    boolean that_present_modifiedBeforeTime = true && that.isSetModifiedBeforeTime();
    if (this_present_modifiedBeforeTime || that_present_modifiedBeforeTime) {
      if (!(this_present_modifiedBeforeTime && that_present_modifiedBeforeTime))
        return false;
      if (this.modifiedBeforeTime != that.modifiedBeforeTime)
        return false;
    }

    boolean this_present_templateTypes = true && this.isSetTemplateTypes();
    boolean that_present_templateTypes = true && that.isSetTemplateTypes();
    if (this_present_templateTypes || that_present_templateTypes) {
      if (!(this_present_templateTypes && that_present_templateTypes))
        return false;
      if (!this.templateTypes.equals(that.templateTypes))
        return false;
    }

    boolean this_present_pageReq = true && this.isSetPageReq();
    boolean that_present_pageReq = true && that.isSetPageReq();
    if (this_present_pageReq || that_present_pageReq) {
      if (!(this_present_pageReq && that_present_pageReq))
        return false;
      if (!this.pageReq.equals(that.pageReq))
        return false;
    }

    boolean this_present_externalOpts = true && this.isSetExternalOpts();
    boolean that_present_externalOpts = true && that.isSetExternalOpts();
    if (this_present_externalOpts || that_present_externalOpts) {
      if (!(this_present_externalOpts && that_present_externalOpts))
        return false;
      if (!this.externalOpts.equals(that.externalOpts))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_teamId = true && (isSetTeamId());
    list.add(present_teamId);
    if (present_teamId)
      list.add(teamId);

    boolean present_isArchived = true && (isSetIsArchived());
    list.add(present_isArchived);
    if (present_isArchived)
      list.add(isArchived);

    boolean present_isPublished = true && (isSetIsPublished());
    list.add(present_isPublished);
    if (present_isPublished)
      list.add(isPublished);

    boolean present_txt = true && (isSetTxt());
    list.add(present_txt);
    if (present_txt)
      list.add(txt);

    boolean present_metadata = true && (isSetMetadata());
    list.add(present_metadata);
    if (present_metadata)
      list.add(metadata);

    boolean present_authorId = true && (isSetAuthorId());
    list.add(present_authorId);
    if (present_authorId)
      list.add(authorId);

    boolean present_rootCategoryId = true && (isSetRootCategoryId());
    list.add(present_rootCategoryId);
    if (present_rootCategoryId)
      list.add(rootCategoryId);

    boolean present_modifiedSinceTime = true && (isSetModifiedSinceTime());
    list.add(present_modifiedSinceTime);
    if (present_modifiedSinceTime)
      list.add(modifiedSinceTime);

    boolean present_modifiedBeforeTime = true && (isSetModifiedBeforeTime());
    list.add(present_modifiedBeforeTime);
    if (present_modifiedBeforeTime)
      list.add(modifiedBeforeTime);

    boolean present_templateTypes = true && (isSetTemplateTypes());
    list.add(present_templateTypes);
    if (present_templateTypes)
      list.add(templateTypes);

    boolean present_pageReq = true && (isSetPageReq());
    list.add(present_pageReq);
    if (present_pageReq)
      list.add(pageReq);

    boolean present_externalOpts = true && (isSetExternalOpts());
    list.add(present_externalOpts);
    if (present_externalOpts)
      list.add(externalOpts);

    return list.hashCode();
  }

  @Override
  public int compareTo(TemplateWhereOpts other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTeamId()).compareTo(other.isSetTeamId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeamId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teamId, other.teamId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsArchived()).compareTo(other.isSetIsArchived());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsArchived()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isArchived, other.isArchived);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsPublished()).compareTo(other.isSetIsPublished());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsPublished()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isPublished, other.isPublished);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTxt()).compareTo(other.isSetTxt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTxt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.txt, other.txt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMetadata()).compareTo(other.isSetMetadata());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMetadata()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metadata, other.metadata);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuthorId()).compareTo(other.isSetAuthorId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuthorId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authorId, other.authorId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRootCategoryId()).compareTo(other.isSetRootCategoryId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRootCategoryId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rootCategoryId, other.rootCategoryId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetModifiedSinceTime()).compareTo(other.isSetModifiedSinceTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModifiedSinceTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modifiedSinceTime, other.modifiedSinceTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetModifiedBeforeTime()).compareTo(other.isSetModifiedBeforeTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModifiedBeforeTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modifiedBeforeTime, other.modifiedBeforeTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTemplateTypes()).compareTo(other.isSetTemplateTypes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTemplateTypes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.templateTypes, other.templateTypes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPageReq()).compareTo(other.isSetPageReq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPageReq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageReq, other.pageReq);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExternalOpts()).compareTo(other.isSetExternalOpts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExternalOpts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.externalOpts, other.externalOpts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TemplateWhereOpts(");
    boolean first = true;

    sb.append("teamId:");
    if (this.teamId == null) {
      sb.append("null");
    } else {
      sb.append(this.teamId);
    }
    first = false;
    if (isSetIsArchived()) {
      if (!first) sb.append(", ");
      sb.append("isArchived:");
      sb.append(this.isArchived);
      first = false;
    }
    if (isSetIsPublished()) {
      if (!first) sb.append(", ");
      sb.append("isPublished:");
      sb.append(this.isPublished);
      first = false;
    }
    if (isSetTxt()) {
      if (!first) sb.append(", ");
      sb.append("txt:");
      if (this.txt == null) {
        sb.append("null");
      } else {
        sb.append(this.txt);
      }
      first = false;
    }
    if (isSetMetadata()) {
      if (!first) sb.append(", ");
      sb.append("metadata:");
      if (this.metadata == null) {
        sb.append("null");
      } else {
        sb.append(this.metadata);
      }
      first = false;
    }
    if (isSetAuthorId()) {
      if (!first) sb.append(", ");
      sb.append("authorId:");
      if (this.authorId == null) {
        sb.append("null");
      } else {
        sb.append(this.authorId);
      }
      first = false;
    }
    if (isSetRootCategoryId()) {
      if (!first) sb.append(", ");
      sb.append("rootCategoryId:");
      if (this.rootCategoryId == null) {
        sb.append("null");
      } else {
        sb.append(this.rootCategoryId);
      }
      first = false;
    }
    if (isSetModifiedSinceTime()) {
      if (!first) sb.append(", ");
      sb.append("modifiedSinceTime:");
      sb.append(this.modifiedSinceTime);
      first = false;
    }
    if (isSetModifiedBeforeTime()) {
      if (!first) sb.append(", ");
      sb.append("modifiedBeforeTime:");
      sb.append(this.modifiedBeforeTime);
      first = false;
    }
    if (isSetTemplateTypes()) {
      if (!first) sb.append(", ");
      sb.append("templateTypes:");
      if (this.templateTypes == null) {
        sb.append("null");
      } else {
        sb.append(this.templateTypes);
      }
      first = false;
    }
    if (isSetPageReq()) {
      if (!first) sb.append(", ");
      sb.append("pageReq:");
      if (this.pageReq == null) {
        sb.append("null");
      } else {
        sb.append(this.pageReq);
      }
      first = false;
    }
    if (isSetExternalOpts()) {
      if (!first) sb.append(", ");
      sb.append("externalOpts:");
      if (this.externalOpts == null) {
        sb.append("null");
      } else {
        sb.append(this.externalOpts);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (txt != null) {
      txt.validate();
    }
    if (pageReq != null) {
      pageReq.validate();
    }
    if (externalOpts != null) {
      externalOpts.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TemplateWhereOptsStandardSchemeFactory implements SchemeFactory {
    public TemplateWhereOptsStandardScheme getScheme() {
      return new TemplateWhereOptsStandardScheme();
    }
  }

  private static class TemplateWhereOptsStandardScheme extends StandardScheme<TemplateWhereOpts> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TemplateWhereOpts struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TEAM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.teamId = iprot.readString();
              struct.setTeamIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // IS_ARCHIVED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isArchived = iprot.readBool();
              struct.setIsArchivedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // IS_PUBLISHED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isPublished = iprot.readBool();
              struct.setIsPublishedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.txt = new TemplateTextSearch();
              struct.txt.read(iprot);
              struct.setTxtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // METADATA
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list65 = iprot.readListBegin();
                struct.metadata = new ArrayList<com.wi.director.thrift.v1.metadata.MetadataEntry>(_list65.size);
                com.wi.director.thrift.v1.metadata.MetadataEntry _elem66;
                for (int _i67 = 0; _i67 < _list65.size; ++_i67)
                {
                  _elem66 = new com.wi.director.thrift.v1.metadata.MetadataEntry();
                  _elem66.read(iprot);
                  struct.metadata.add(_elem66);
                }
                iprot.readListEnd();
              }
              struct.setMetadataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // AUTHOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.authorId = iprot.readString();
              struct.setAuthorIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ROOT_CATEGORY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.rootCategoryId = iprot.readString();
              struct.setRootCategoryIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // MODIFIED_SINCE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.modifiedSinceTime = iprot.readI64();
              struct.setModifiedSinceTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // MODIFIED_BEFORE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.modifiedBeforeTime = iprot.readI64();
              struct.setModifiedBeforeTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // TEMPLATE_TYPES
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set68 = iprot.readSetBegin();
                struct.templateTypes = new HashSet<TemplateType>(2*_set68.size);
                TemplateType _elem69;
                for (int _i70 = 0; _i70 < _set68.size; ++_i70)
                {
                  _elem69 = com.wi.director.thrift.v1.jobtemplate.TemplateType.findByValue(iprot.readI32());
                  struct.templateTypes.add(_elem69);
                }
                iprot.readSetEnd();
              }
              struct.setTemplateTypesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // PAGE_REQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.pageReq = new com.wi.director.thrift.v1.common.PageReq();
              struct.pageReq.read(iprot);
              struct.setPageReqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // EXTERNAL_OPTS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.externalOpts = new com.wi.director.thrift.v1.common.ExternalOpts();
              struct.externalOpts.read(iprot);
              struct.setExternalOptsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TemplateWhereOpts struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.teamId != null) {
        oprot.writeFieldBegin(TEAM_ID_FIELD_DESC);
        oprot.writeString(struct.teamId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIsArchived()) {
        oprot.writeFieldBegin(IS_ARCHIVED_FIELD_DESC);
        oprot.writeBool(struct.isArchived);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIsPublished()) {
        oprot.writeFieldBegin(IS_PUBLISHED_FIELD_DESC);
        oprot.writeBool(struct.isPublished);
        oprot.writeFieldEnd();
      }
      if (struct.txt != null) {
        if (struct.isSetTxt()) {
          oprot.writeFieldBegin(TXT_FIELD_DESC);
          struct.txt.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.metadata != null) {
        if (struct.isSetMetadata()) {
          oprot.writeFieldBegin(METADATA_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.metadata.size()));
            for (com.wi.director.thrift.v1.metadata.MetadataEntry _iter71 : struct.metadata)
            {
              _iter71.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.authorId != null) {
        if (struct.isSetAuthorId()) {
          oprot.writeFieldBegin(AUTHOR_ID_FIELD_DESC);
          oprot.writeString(struct.authorId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.rootCategoryId != null) {
        if (struct.isSetRootCategoryId()) {
          oprot.writeFieldBegin(ROOT_CATEGORY_ID_FIELD_DESC);
          oprot.writeString(struct.rootCategoryId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetModifiedSinceTime()) {
        oprot.writeFieldBegin(MODIFIED_SINCE_TIME_FIELD_DESC);
        oprot.writeI64(struct.modifiedSinceTime);
        oprot.writeFieldEnd();
      }
      if (struct.isSetModifiedBeforeTime()) {
        oprot.writeFieldBegin(MODIFIED_BEFORE_TIME_FIELD_DESC);
        oprot.writeI64(struct.modifiedBeforeTime);
        oprot.writeFieldEnd();
      }
      if (struct.templateTypes != null) {
        if (struct.isSetTemplateTypes()) {
          oprot.writeFieldBegin(TEMPLATE_TYPES_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.templateTypes.size()));
            for (TemplateType _iter72 : struct.templateTypes)
            {
              oprot.writeI32(_iter72.getValue());
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.pageReq != null) {
        if (struct.isSetPageReq()) {
          oprot.writeFieldBegin(PAGE_REQ_FIELD_DESC);
          struct.pageReq.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.externalOpts != null) {
        if (struct.isSetExternalOpts()) {
          oprot.writeFieldBegin(EXTERNAL_OPTS_FIELD_DESC);
          struct.externalOpts.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

}

