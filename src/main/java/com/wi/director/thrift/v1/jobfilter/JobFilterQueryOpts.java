/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wi.director.thrift.v1.jobfilter;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class JobFilterQueryOpts implements org.apache.thrift.TBase<JobFilterQueryOpts, JobFilterQueryOpts._Fields>, java.io.Serializable, Cloneable, Comparable<JobFilterQueryOpts> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("JobFilterQueryOpts");

  private static final org.apache.thrift.protocol.TField SELECT_OPTS_FIELD_DESC = new org.apache.thrift.protocol.TField("selectOpts", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField TZ_LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("tzLocation", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TZ_OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("tzOffset", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField PAGE_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("pageReq", org.apache.thrift.protocol.TType.STRUCT, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new JobFilterQueryOptsStandardSchemeFactory());
  }

  /**
   * See <a href="job.html#Struct_JobSelectOpts">JobSelectOpts</a> for job field selection
   */
  public com.wi.director.thrift.v1.job.JobSelectOpts selectOpts; // required
  /**
   * Client IANA time zone location, e.g. "America/Los_Angeles", defaults to "UTC"
   */
  public String tzLocation; // optional
  /**
   * Client time zone offset, in seconds east of UTC; only used when tzLocation is unset
   */
  public long tzOffset; // optional
  /**
   * Further filter search results by job title/unique id
   */
  public String title; // optional
  /**
   * See <a href="common.html#Struct_PageReq">PageReq</a> for page selection
   */
  public com.wi.director.thrift.v1.common.PageReq pageReq; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * See <a href="job.html#Struct_JobSelectOpts">JobSelectOpts</a> for job field selection
     */
    SELECT_OPTS((short)1, "selectOpts"),
    /**
     * Client IANA time zone location, e.g. "America/Los_Angeles", defaults to "UTC"
     */
    TZ_LOCATION((short)2, "tzLocation"),
    /**
     * Client time zone offset, in seconds east of UTC; only used when tzLocation is unset
     */
    TZ_OFFSET((short)3, "tzOffset"),
    /**
     * Further filter search results by job title/unique id
     */
    TITLE((short)4, "title"),
    /**
     * See <a href="common.html#Struct_PageReq">PageReq</a> for page selection
     */
    PAGE_REQ((short)10, "pageReq");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SELECT_OPTS
          return SELECT_OPTS;
        case 2: // TZ_LOCATION
          return TZ_LOCATION;
        case 3: // TZ_OFFSET
          return TZ_OFFSET;
        case 4: // TITLE
          return TITLE;
        case 10: // PAGE_REQ
          return PAGE_REQ;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TZOFFSET_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.TZ_LOCATION,_Fields.TZ_OFFSET,_Fields.TITLE,_Fields.PAGE_REQ};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SELECT_OPTS, new org.apache.thrift.meta_data.FieldMetaData("selectOpts", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.job.JobSelectOpts.class)));
    tmpMap.put(_Fields.TZ_LOCATION, new org.apache.thrift.meta_data.FieldMetaData("tzLocation", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TZ_OFFSET, new org.apache.thrift.meta_data.FieldMetaData("tzOffset", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAGE_REQ, new org.apache.thrift.meta_data.FieldMetaData("pageReq", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.common.PageReq.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(JobFilterQueryOpts.class, metaDataMap);
  }

  public JobFilterQueryOpts() {
  }

  public JobFilterQueryOpts(
    com.wi.director.thrift.v1.job.JobSelectOpts selectOpts)
  {
    this();
    this.selectOpts = selectOpts;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public JobFilterQueryOpts(JobFilterQueryOpts other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetSelectOpts()) {
      this.selectOpts = new com.wi.director.thrift.v1.job.JobSelectOpts(other.selectOpts);
    }
    if (other.isSetTzLocation()) {
      this.tzLocation = other.tzLocation;
    }
    this.tzOffset = other.tzOffset;
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    if (other.isSetPageReq()) {
      this.pageReq = new com.wi.director.thrift.v1.common.PageReq(other.pageReq);
    }
  }

  public JobFilterQueryOpts deepCopy() {
    return new JobFilterQueryOpts(this);
  }

  @Override
  public void clear() {
    this.selectOpts = null;
    this.tzLocation = null;
    setTzOffsetIsSet(false);
    this.tzOffset = 0;
    this.title = null;
    this.pageReq = null;
  }

  /**
   * See <a href="job.html#Struct_JobSelectOpts">JobSelectOpts</a> for job field selection
   */
  public com.wi.director.thrift.v1.job.JobSelectOpts getSelectOpts() {
    return this.selectOpts;
  }

  /**
   * See <a href="job.html#Struct_JobSelectOpts">JobSelectOpts</a> for job field selection
   */
  public JobFilterQueryOpts setSelectOpts(com.wi.director.thrift.v1.job.JobSelectOpts selectOpts) {
    this.selectOpts = selectOpts;
    return this;
  }

  public void unsetSelectOpts() {
    this.selectOpts = null;
  }

  /** Returns true if field selectOpts is set (has been assigned a value) and false otherwise */
  public boolean isSetSelectOpts() {
    return this.selectOpts != null;
  }

  public void setSelectOptsIsSet(boolean value) {
    if (!value) {
      this.selectOpts = null;
    }
  }

  /**
   * Client IANA time zone location, e.g. "America/Los_Angeles", defaults to "UTC"
   */
  public String getTzLocation() {
    return this.tzLocation;
  }

  /**
   * Client IANA time zone location, e.g. "America/Los_Angeles", defaults to "UTC"
   */
  public JobFilterQueryOpts setTzLocation(String tzLocation) {
    this.tzLocation = tzLocation;
    return this;
  }

  public void unsetTzLocation() {
    this.tzLocation = null;
  }

  /** Returns true if field tzLocation is set (has been assigned a value) and false otherwise */
  public boolean isSetTzLocation() {
    return this.tzLocation != null;
  }

  public void setTzLocationIsSet(boolean value) {
    if (!value) {
      this.tzLocation = null;
    }
  }

  /**
   * Client time zone offset, in seconds east of UTC; only used when tzLocation is unset
   */
  public long getTzOffset() {
    return this.tzOffset;
  }

  /**
   * Client time zone offset, in seconds east of UTC; only used when tzLocation is unset
   */
  public JobFilterQueryOpts setTzOffset(long tzOffset) {
    this.tzOffset = tzOffset;
    setTzOffsetIsSet(true);
    return this;
  }

  public void unsetTzOffset() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TZOFFSET_ISSET_ID);
  }

  /** Returns true if field tzOffset is set (has been assigned a value) and false otherwise */
  public boolean isSetTzOffset() {
    return EncodingUtils.testBit(__isset_bitfield, __TZOFFSET_ISSET_ID);
  }

  public void setTzOffsetIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TZOFFSET_ISSET_ID, value);
  }

  /**
   * Further filter search results by job title/unique id
   */
  public String getTitle() {
    return this.title;
  }

  /**
   * Further filter search results by job title/unique id
   */
  public JobFilterQueryOpts setTitle(String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  /**
   * See <a href="common.html#Struct_PageReq">PageReq</a> for page selection
   */
  public com.wi.director.thrift.v1.common.PageReq getPageReq() {
    return this.pageReq;
  }

  /**
   * See <a href="common.html#Struct_PageReq">PageReq</a> for page selection
   */
  public JobFilterQueryOpts setPageReq(com.wi.director.thrift.v1.common.PageReq pageReq) {
    this.pageReq = pageReq;
    return this;
  }

  public void unsetPageReq() {
    this.pageReq = null;
  }

  /** Returns true if field pageReq is set (has been assigned a value) and false otherwise */
  public boolean isSetPageReq() {
    return this.pageReq != null;
  }

  public void setPageReqIsSet(boolean value) {
    if (!value) {
      this.pageReq = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SELECT_OPTS:
      if (value == null) {
        unsetSelectOpts();
      } else {
        setSelectOpts((com.wi.director.thrift.v1.job.JobSelectOpts)value);
      }
      break;

    case TZ_LOCATION:
      if (value == null) {
        unsetTzLocation();
      } else {
        setTzLocation((String)value);
      }
      break;

    case TZ_OFFSET:
      if (value == null) {
        unsetTzOffset();
      } else {
        setTzOffset((Long)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((String)value);
      }
      break;

    case PAGE_REQ:
      if (value == null) {
        unsetPageReq();
      } else {
        setPageReq((com.wi.director.thrift.v1.common.PageReq)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SELECT_OPTS:
      return getSelectOpts();

    case TZ_LOCATION:
      return getTzLocation();

    case TZ_OFFSET:
      return getTzOffset();

    case TITLE:
      return getTitle();

    case PAGE_REQ:
      return getPageReq();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SELECT_OPTS:
      return isSetSelectOpts();
    case TZ_LOCATION:
      return isSetTzLocation();
    case TZ_OFFSET:
      return isSetTzOffset();
    case TITLE:
      return isSetTitle();
    case PAGE_REQ:
      return isSetPageReq();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof JobFilterQueryOpts)
      return this.equals((JobFilterQueryOpts)that);
    return false;
  }

  public boolean equals(JobFilterQueryOpts that) {
    if (that == null)
      return false;

    boolean this_present_selectOpts = true && this.isSetSelectOpts();
    boolean that_present_selectOpts = true && that.isSetSelectOpts();
    if (this_present_selectOpts || that_present_selectOpts) {
      if (!(this_present_selectOpts && that_present_selectOpts))
        return false;
      if (!this.selectOpts.equals(that.selectOpts))
        return false;
    }

    boolean this_present_tzLocation = true && this.isSetTzLocation();
    boolean that_present_tzLocation = true && that.isSetTzLocation();
    if (this_present_tzLocation || that_present_tzLocation) {
      if (!(this_present_tzLocation && that_present_tzLocation))
        return false;
      if (!this.tzLocation.equals(that.tzLocation))
        return false;
    }

    boolean this_present_tzOffset = true && this.isSetTzOffset();
    boolean that_present_tzOffset = true && that.isSetTzOffset();
    if (this_present_tzOffset || that_present_tzOffset) {
      if (!(this_present_tzOffset && that_present_tzOffset))
        return false;
      if (this.tzOffset != that.tzOffset)
        return false;
    }

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_pageReq = true && this.isSetPageReq();
    boolean that_present_pageReq = true && that.isSetPageReq();
    if (this_present_pageReq || that_present_pageReq) {
      if (!(this_present_pageReq && that_present_pageReq))
        return false;
      if (!this.pageReq.equals(that.pageReq))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_selectOpts = true && (isSetSelectOpts());
    list.add(present_selectOpts);
    if (present_selectOpts)
      list.add(selectOpts);

    boolean present_tzLocation = true && (isSetTzLocation());
    list.add(present_tzLocation);
    if (present_tzLocation)
      list.add(tzLocation);

    boolean present_tzOffset = true && (isSetTzOffset());
    list.add(present_tzOffset);
    if (present_tzOffset)
      list.add(tzOffset);

    boolean present_title = true && (isSetTitle());
    list.add(present_title);
    if (present_title)
      list.add(title);

    boolean present_pageReq = true && (isSetPageReq());
    list.add(present_pageReq);
    if (present_pageReq)
      list.add(pageReq);

    return list.hashCode();
  }

  @Override
  public int compareTo(JobFilterQueryOpts other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSelectOpts()).compareTo(other.isSetSelectOpts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSelectOpts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.selectOpts, other.selectOpts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTzLocation()).compareTo(other.isSetTzLocation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTzLocation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tzLocation, other.tzLocation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTzOffset()).compareTo(other.isSetTzOffset());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTzOffset()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tzOffset, other.tzOffset);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTitle()).compareTo(other.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPageReq()).compareTo(other.isSetPageReq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPageReq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageReq, other.pageReq);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("JobFilterQueryOpts(");
    boolean first = true;

    sb.append("selectOpts:");
    if (this.selectOpts == null) {
      sb.append("null");
    } else {
      sb.append(this.selectOpts);
    }
    first = false;
    if (isSetTzLocation()) {
      if (!first) sb.append(", ");
      sb.append("tzLocation:");
      if (this.tzLocation == null) {
        sb.append("null");
      } else {
        sb.append(this.tzLocation);
      }
      first = false;
    }
    if (isSetTzOffset()) {
      if (!first) sb.append(", ");
      sb.append("tzOffset:");
      sb.append(this.tzOffset);
      first = false;
    }
    if (isSetTitle()) {
      if (!first) sb.append(", ");
      sb.append("title:");
      if (this.title == null) {
        sb.append("null");
      } else {
        sb.append(this.title);
      }
      first = false;
    }
    if (isSetPageReq()) {
      if (!first) sb.append(", ");
      sb.append("pageReq:");
      if (this.pageReq == null) {
        sb.append("null");
      } else {
        sb.append(this.pageReq);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (selectOpts != null) {
      selectOpts.validate();
    }
    if (pageReq != null) {
      pageReq.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class JobFilterQueryOptsStandardSchemeFactory implements SchemeFactory {
    public JobFilterQueryOptsStandardScheme getScheme() {
      return new JobFilterQueryOptsStandardScheme();
    }
  }

  private static class JobFilterQueryOptsStandardScheme extends StandardScheme<JobFilterQueryOpts> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, JobFilterQueryOpts struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SELECT_OPTS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.selectOpts = new com.wi.director.thrift.v1.job.JobSelectOpts();
              struct.selectOpts.read(iprot);
              struct.setSelectOptsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TZ_LOCATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tzLocation = iprot.readString();
              struct.setTzLocationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TZ_OFFSET
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.tzOffset = iprot.readI64();
              struct.setTzOffsetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PAGE_REQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.pageReq = new com.wi.director.thrift.v1.common.PageReq();
              struct.pageReq.read(iprot);
              struct.setPageReqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, JobFilterQueryOpts struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.selectOpts != null) {
        oprot.writeFieldBegin(SELECT_OPTS_FIELD_DESC);
        struct.selectOpts.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.tzLocation != null) {
        if (struct.isSetTzLocation()) {
          oprot.writeFieldBegin(TZ_LOCATION_FIELD_DESC);
          oprot.writeString(struct.tzLocation);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTzOffset()) {
        oprot.writeFieldBegin(TZ_OFFSET_FIELD_DESC);
        oprot.writeI64(struct.tzOffset);
        oprot.writeFieldEnd();
      }
      if (struct.title != null) {
        if (struct.isSetTitle()) {
          oprot.writeFieldBegin(TITLE_FIELD_DESC);
          oprot.writeString(struct.title);
          oprot.writeFieldEnd();
        }
      }
      if (struct.pageReq != null) {
        if (struct.isSetPageReq()) {
          oprot.writeFieldBegin(PAGE_REQ_FIELD_DESC);
          struct.pageReq.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

}

