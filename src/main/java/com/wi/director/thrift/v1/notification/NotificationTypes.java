/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wi.director.thrift.v1.notification;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class NotificationTypes implements org.apache.thrift.TBase<NotificationTypes, NotificationTypes._Fields>, java.io.Serializable, Cloneable, Comparable<NotificationTypes> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("NotificationTypes");

  private static final org.apache.thrift.protocol.TField REGULAR_FIELD_DESC = new org.apache.thrift.protocol.TField("regular", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField PUSH_FIELD_DESC = new org.apache.thrift.protocol.TField("push", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("email", org.apache.thrift.protocol.TType.BOOL, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new NotificationTypesStandardSchemeFactory());
  }

  public boolean regular; // optional
  public boolean push; // optional
  public boolean email; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    REGULAR((short)1, "regular"),
    PUSH((short)2, "push"),
    EMAIL((short)3, "email");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // REGULAR
          return REGULAR;
        case 2: // PUSH
          return PUSH;
        case 3: // EMAIL
          return EMAIL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __REGULAR_ISSET_ID = 0;
  private static final int __PUSH_ISSET_ID = 1;
  private static final int __EMAIL_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.REGULAR,_Fields.PUSH,_Fields.EMAIL};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.REGULAR, new org.apache.thrift.meta_data.FieldMetaData("regular", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PUSH, new org.apache.thrift.meta_data.FieldMetaData("push", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.EMAIL, new org.apache.thrift.meta_data.FieldMetaData("email", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(NotificationTypes.class, metaDataMap);
  }

  public NotificationTypes() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public NotificationTypes(NotificationTypes other) {
    __isset_bitfield = other.__isset_bitfield;
    this.regular = other.regular;
    this.push = other.push;
    this.email = other.email;
  }

  public NotificationTypes deepCopy() {
    return new NotificationTypes(this);
  }

  @Override
  public void clear() {
    setRegularIsSet(false);
    this.regular = false;
    setPushIsSet(false);
    this.push = false;
    setEmailIsSet(false);
    this.email = false;
  }

  public boolean isRegular() {
    return this.regular;
  }

  public NotificationTypes setRegular(boolean regular) {
    this.regular = regular;
    setRegularIsSet(true);
    return this;
  }

  public void unsetRegular() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REGULAR_ISSET_ID);
  }

  /** Returns true if field regular is set (has been assigned a value) and false otherwise */
  public boolean isSetRegular() {
    return EncodingUtils.testBit(__isset_bitfield, __REGULAR_ISSET_ID);
  }

  public void setRegularIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REGULAR_ISSET_ID, value);
  }

  public boolean isPush() {
    return this.push;
  }

  public NotificationTypes setPush(boolean push) {
    this.push = push;
    setPushIsSet(true);
    return this;
  }

  public void unsetPush() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PUSH_ISSET_ID);
  }

  /** Returns true if field push is set (has been assigned a value) and false otherwise */
  public boolean isSetPush() {
    return EncodingUtils.testBit(__isset_bitfield, __PUSH_ISSET_ID);
  }

  public void setPushIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PUSH_ISSET_ID, value);
  }

  public boolean isEmail() {
    return this.email;
  }

  public NotificationTypes setEmail(boolean email) {
    this.email = email;
    setEmailIsSet(true);
    return this;
  }

  public void unsetEmail() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EMAIL_ISSET_ID);
  }

  /** Returns true if field email is set (has been assigned a value) and false otherwise */
  public boolean isSetEmail() {
    return EncodingUtils.testBit(__isset_bitfield, __EMAIL_ISSET_ID);
  }

  public void setEmailIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EMAIL_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case REGULAR:
      if (value == null) {
        unsetRegular();
      } else {
        setRegular((Boolean)value);
      }
      break;

    case PUSH:
      if (value == null) {
        unsetPush();
      } else {
        setPush((Boolean)value);
      }
      break;

    case EMAIL:
      if (value == null) {
        unsetEmail();
      } else {
        setEmail((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case REGULAR:
      return isRegular();

    case PUSH:
      return isPush();

    case EMAIL:
      return isEmail();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case REGULAR:
      return isSetRegular();
    case PUSH:
      return isSetPush();
    case EMAIL:
      return isSetEmail();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof NotificationTypes)
      return this.equals((NotificationTypes)that);
    return false;
  }

  public boolean equals(NotificationTypes that) {
    if (that == null)
      return false;

    boolean this_present_regular = true && this.isSetRegular();
    boolean that_present_regular = true && that.isSetRegular();
    if (this_present_regular || that_present_regular) {
      if (!(this_present_regular && that_present_regular))
        return false;
      if (this.regular != that.regular)
        return false;
    }

    boolean this_present_push = true && this.isSetPush();
    boolean that_present_push = true && that.isSetPush();
    if (this_present_push || that_present_push) {
      if (!(this_present_push && that_present_push))
        return false;
      if (this.push != that.push)
        return false;
    }

    boolean this_present_email = true && this.isSetEmail();
    boolean that_present_email = true && that.isSetEmail();
    if (this_present_email || that_present_email) {
      if (!(this_present_email && that_present_email))
        return false;
      if (this.email != that.email)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_regular = true && (isSetRegular());
    list.add(present_regular);
    if (present_regular)
      list.add(regular);

    boolean present_push = true && (isSetPush());
    list.add(present_push);
    if (present_push)
      list.add(push);

    boolean present_email = true && (isSetEmail());
    list.add(present_email);
    if (present_email)
      list.add(email);

    return list.hashCode();
  }

  @Override
  public int compareTo(NotificationTypes other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetRegular()).compareTo(other.isSetRegular());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegular()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regular, other.regular);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPush()).compareTo(other.isSetPush());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPush()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.push, other.push);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEmail()).compareTo(other.isSetEmail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.email, other.email);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("NotificationTypes(");
    boolean first = true;

    if (isSetRegular()) {
      sb.append("regular:");
      sb.append(this.regular);
      first = false;
    }
    if (isSetPush()) {
      if (!first) sb.append(", ");
      sb.append("push:");
      sb.append(this.push);
      first = false;
    }
    if (isSetEmail()) {
      if (!first) sb.append(", ");
      sb.append("email:");
      sb.append(this.email);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class NotificationTypesStandardSchemeFactory implements SchemeFactory {
    public NotificationTypesStandardScheme getScheme() {
      return new NotificationTypesStandardScheme();
    }
  }

  private static class NotificationTypesStandardScheme extends StandardScheme<NotificationTypes> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, NotificationTypes struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // REGULAR
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.regular = iprot.readBool();
              struct.setRegularIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PUSH
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.push = iprot.readBool();
              struct.setPushIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EMAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.email = iprot.readBool();
              struct.setEmailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, NotificationTypes struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetRegular()) {
        oprot.writeFieldBegin(REGULAR_FIELD_DESC);
        oprot.writeBool(struct.regular);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPush()) {
        oprot.writeFieldBegin(PUSH_FIELD_DESC);
        oprot.writeBool(struct.push);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEmail()) {
        oprot.writeFieldBegin(EMAIL_FIELD_DESC);
        oprot.writeBool(struct.email);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

}

