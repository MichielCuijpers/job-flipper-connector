/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wi.director.thrift.v1.common;


import java.util.Map;
import java.util.HashMap;
import org.apache.thrift.TEnum;

/**
 * The ErrorCode enum is returned in the <tt>SystemException</tt>
 * object thrown or returned by handlers.  This is included here to
 * explain what response codes we return and what they mean.
 */
public enum ErrorCode implements org.apache.thrift.TEnum {
  /**
   * This error is returned if the *request* is invalid: eg, formatted
   * badly, or type errors.
   */
  BAD_REQUEST(400),
  /**
   * This means that no authentication token was passed to a service
   * endpoint which requires authentication. This is also used for invalid
   * username/password submissions
   */
  UNAUTHORIZED(401),
  /**
   * When a user is authenticated and authorized but the resource is unavailable, such as a disabled team.
   */
  FORBIDDEN(403),
  /**
   * This error is intended to mean that the entity you are requesting
   * or attempting to manipulate does not exist or is not visible due to
   * authorization control.  However, it is currently sometimes returned
   * when the system makes an internal query which unexpectedly returns
   * no results.  We are tidying this up.
   */
  NOT_FOUND(404),
  /**
   * This error code usually means that the object you are trying to
   * manipulate is not in the correct state for the intended action.
   * We are going to try and phase this out of our application so its
   * only caused by db errors so its easier to react to.
   */
  PRECONDITION_FAILED(412),
  /**
   * Very similar to the above error, but this one only is caused by
   * our application. There was ambiguity surrounding PRECONDITION_FAILED
   * becasue it was sometimes caused by a db error and sometimes by our
   * application and clients had a hard time knowning how to deal with it.
   */
  WRONG_STATE(413),
  /**
   * This error means that client is trying to do something that's already the case.
   * eg. completing a completed job, etc. Clients are recommended to not surface this
   * error code as an error.
   */
  NOOP(414),
  /**
   * The version of an item specified does not exist
   */
  INVALID_VERSION(420),
  /**
   * The action cannot be performed on the version specified,
   * typically due to it being before a sunrise date for recording data
   * necessary for the action to be performed.
   */
  UNSUPPORTED_VERSION(421),
  /**
   * Job is not active
   */
  JOB_NOT_ACTIVE(422),
  /**
   * user is not  assigned to particular job
   */
  USER_NOT_ASSIGNED_TO_JOB(423),
  /**
   * user doesn't have sufficient permission
   */
  INSUFFICIENT_ROLE_PERMISSIONS(424),
  /**
   * This means you sent the request to the wrong API server.  See
   * the documentation on authentication.LoginResult for how to
   * determine the correct API server for requests.
   */
  INVALID_REGION(430),
  /**
   * A revert action has been refused, typically due to concurrent
   * activity on the item.
   */
  REVERT_DISALLOWED(440),
  /**
   * An action was attempted on an object that required metadata to
   * be set which was not set.
   */
  MISSING_METADATA(472),
  /**
   * An 'addUserToTeam' call was made for a user already on it.
   */
  USER_ALREADY_PART_OF_TEAM(473),
  /**
   * For security, newly created accounts must click the link in the issued
   * email before they can log in.
   */
  ACCOUNT_UNVALIDATED(474),
  /**
   * a 'createTeam' call was made, but the domain specified is already in use or reserved
   */
  TEAM_ALREADY_EXISTS(475),
  /**
   * The user does not have the necessary permissions to carry out the requested action.
   * This can be because they are not a member of the team or job, or because they are
   * lacking the correct role. It can also be becasue they are not admins.
   */
  INSUFFICIENT_PERMISSIONS(476),
  /**
   * an authentication token was passed, but it did not validate successfully
   */
  INVALID_TOKEN(497),
  /**
   * a valid authentication token was passed, but it was too old
   */
  TOKEN_EXPIRED(498),
  /**
   * catch-all for errors missing their own code
   */
  UNKNOWN_ERROR(499),
  /**
   * the system could not complete the operation due to a bug
   */
  INTERNAL_SERVER_ERROR(500),
  /**
   * The server is currently unable to handle the request
   */
  SERVICE_UNAVAILABLE(503),
  /**
   * requested operation was rejected for reasons out of callers control
   */
  NOT_ALLOWED(550),
  /**
   * can't make changes or release without first acquiring a lock
   */
  TEMPLATE_NOT_LOCKED(600),
  /**
   * cannot perform action due to archived resource *
   */
  RESOURCE_ARCHIVED(601);

  private final int value;

  private ErrorCode(int value) {
    this.value = value;
  }

  /**
   * Get the integer value of this enum value, as defined in the Thrift IDL.
   */
  public int getValue() {
    return value;
  }

  /**
   * Find a the enum type by its integer value, as defined in the Thrift IDL.
   * @return null if the value is not found.
   */
  public static ErrorCode findByValue(int value) { 
    switch (value) {
      case 400:
        return BAD_REQUEST;
      case 401:
        return UNAUTHORIZED;
      case 403:
        return FORBIDDEN;
      case 404:
        return NOT_FOUND;
      case 412:
        return PRECONDITION_FAILED;
      case 413:
        return WRONG_STATE;
      case 414:
        return NOOP;
      case 420:
        return INVALID_VERSION;
      case 421:
        return UNSUPPORTED_VERSION;
      case 422:
        return JOB_NOT_ACTIVE;
      case 423:
        return USER_NOT_ASSIGNED_TO_JOB;
      case 424:
        return INSUFFICIENT_ROLE_PERMISSIONS;
      case 430:
        return INVALID_REGION;
      case 440:
        return REVERT_DISALLOWED;
      case 472:
        return MISSING_METADATA;
      case 473:
        return USER_ALREADY_PART_OF_TEAM;
      case 474:
        return ACCOUNT_UNVALIDATED;
      case 475:
        return TEAM_ALREADY_EXISTS;
      case 476:
        return INSUFFICIENT_PERMISSIONS;
      case 497:
        return INVALID_TOKEN;
      case 498:
        return TOKEN_EXPIRED;
      case 499:
        return UNKNOWN_ERROR;
      case 500:
        return INTERNAL_SERVER_ERROR;
      case 503:
        return SERVICE_UNAVAILABLE;
      case 550:
        return NOT_ALLOWED;
      case 600:
        return TEMPLATE_NOT_LOCKED;
      case 601:
        return RESOURCE_ARCHIVED;
      default:
        return null;
    }
  }
}
