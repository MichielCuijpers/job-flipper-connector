/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wi.director.thrift.v1.jobrole;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class StepPermissions implements org.apache.thrift.TBase<StepPermissions, StepPermissions._Fields>, java.io.Serializable, Cloneable, Comparable<StepPermissions> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StepPermissions");

  private static final org.apache.thrift.protocol.TField ADD_AND_DUPLICATE_STEPS_FIELD_DESC = new org.apache.thrift.protocol.TField("addAndDuplicateSteps", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField ADD_AND_DUPLICATE_STEP_GROUPS_FIELD_DESC = new org.apache.thrift.protocol.TField("addAndDuplicateStepGroups", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField MARK_STEPS_NA_FIELD_DESC = new org.apache.thrift.protocol.TField("markStepsNA", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField SEND_FIELD_INPUT_FIELD_DESC = new org.apache.thrift.protocol.TField("sendFieldInput", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField COMPLETE_STEPS_FIELD_DESC = new org.apache.thrift.protocol.TField("completeSteps", org.apache.thrift.protocol.TType.BOOL, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new StepPermissionsStandardSchemeFactory());
  }

  public boolean addAndDuplicateSteps; // required
  public boolean addAndDuplicateStepGroups; // required
  public boolean markStepsNA; // required
  public boolean sendFieldInput; // required
  public boolean completeSteps; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ADD_AND_DUPLICATE_STEPS((short)1, "addAndDuplicateSteps"),
    ADD_AND_DUPLICATE_STEP_GROUPS((short)2, "addAndDuplicateStepGroups"),
    MARK_STEPS_NA((short)3, "markStepsNA"),
    SEND_FIELD_INPUT((short)4, "sendFieldInput"),
    COMPLETE_STEPS((short)5, "completeSteps");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ADD_AND_DUPLICATE_STEPS
          return ADD_AND_DUPLICATE_STEPS;
        case 2: // ADD_AND_DUPLICATE_STEP_GROUPS
          return ADD_AND_DUPLICATE_STEP_GROUPS;
        case 3: // MARK_STEPS_NA
          return MARK_STEPS_NA;
        case 4: // SEND_FIELD_INPUT
          return SEND_FIELD_INPUT;
        case 5: // COMPLETE_STEPS
          return COMPLETE_STEPS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ADDANDDUPLICATESTEPS_ISSET_ID = 0;
  private static final int __ADDANDDUPLICATESTEPGROUPS_ISSET_ID = 1;
  private static final int __MARKSTEPSNA_ISSET_ID = 2;
  private static final int __SENDFIELDINPUT_ISSET_ID = 3;
  private static final int __COMPLETESTEPS_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ADD_AND_DUPLICATE_STEPS, new org.apache.thrift.meta_data.FieldMetaData("addAndDuplicateSteps", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ADD_AND_DUPLICATE_STEP_GROUPS, new org.apache.thrift.meta_data.FieldMetaData("addAndDuplicateStepGroups", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.MARK_STEPS_NA, new org.apache.thrift.meta_data.FieldMetaData("markStepsNA", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SEND_FIELD_INPUT, new org.apache.thrift.meta_data.FieldMetaData("sendFieldInput", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.COMPLETE_STEPS, new org.apache.thrift.meta_data.FieldMetaData("completeSteps", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StepPermissions.class, metaDataMap);
  }

  public StepPermissions() {
  }

  public StepPermissions(
    boolean addAndDuplicateSteps,
    boolean addAndDuplicateStepGroups,
    boolean markStepsNA,
    boolean sendFieldInput,
    boolean completeSteps)
  {
    this();
    this.addAndDuplicateSteps = addAndDuplicateSteps;
    setAddAndDuplicateStepsIsSet(true);
    this.addAndDuplicateStepGroups = addAndDuplicateStepGroups;
    setAddAndDuplicateStepGroupsIsSet(true);
    this.markStepsNA = markStepsNA;
    setMarkStepsNAIsSet(true);
    this.sendFieldInput = sendFieldInput;
    setSendFieldInputIsSet(true);
    this.completeSteps = completeSteps;
    setCompleteStepsIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StepPermissions(StepPermissions other) {
    __isset_bitfield = other.__isset_bitfield;
    this.addAndDuplicateSteps = other.addAndDuplicateSteps;
    this.addAndDuplicateStepGroups = other.addAndDuplicateStepGroups;
    this.markStepsNA = other.markStepsNA;
    this.sendFieldInput = other.sendFieldInput;
    this.completeSteps = other.completeSteps;
  }

  public StepPermissions deepCopy() {
    return new StepPermissions(this);
  }

  @Override
  public void clear() {
    setAddAndDuplicateStepsIsSet(false);
    this.addAndDuplicateSteps = false;
    setAddAndDuplicateStepGroupsIsSet(false);
    this.addAndDuplicateStepGroups = false;
    setMarkStepsNAIsSet(false);
    this.markStepsNA = false;
    setSendFieldInputIsSet(false);
    this.sendFieldInput = false;
    setCompleteStepsIsSet(false);
    this.completeSteps = false;
  }

  public boolean isAddAndDuplicateSteps() {
    return this.addAndDuplicateSteps;
  }

  public StepPermissions setAddAndDuplicateSteps(boolean addAndDuplicateSteps) {
    this.addAndDuplicateSteps = addAndDuplicateSteps;
    setAddAndDuplicateStepsIsSet(true);
    return this;
  }

  public void unsetAddAndDuplicateSteps() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ADDANDDUPLICATESTEPS_ISSET_ID);
  }

  /** Returns true if field addAndDuplicateSteps is set (has been assigned a value) and false otherwise */
  public boolean isSetAddAndDuplicateSteps() {
    return EncodingUtils.testBit(__isset_bitfield, __ADDANDDUPLICATESTEPS_ISSET_ID);
  }

  public void setAddAndDuplicateStepsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ADDANDDUPLICATESTEPS_ISSET_ID, value);
  }

  public boolean isAddAndDuplicateStepGroups() {
    return this.addAndDuplicateStepGroups;
  }

  public StepPermissions setAddAndDuplicateStepGroups(boolean addAndDuplicateStepGroups) {
    this.addAndDuplicateStepGroups = addAndDuplicateStepGroups;
    setAddAndDuplicateStepGroupsIsSet(true);
    return this;
  }

  public void unsetAddAndDuplicateStepGroups() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ADDANDDUPLICATESTEPGROUPS_ISSET_ID);
  }

  /** Returns true if field addAndDuplicateStepGroups is set (has been assigned a value) and false otherwise */
  public boolean isSetAddAndDuplicateStepGroups() {
    return EncodingUtils.testBit(__isset_bitfield, __ADDANDDUPLICATESTEPGROUPS_ISSET_ID);
  }

  public void setAddAndDuplicateStepGroupsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ADDANDDUPLICATESTEPGROUPS_ISSET_ID, value);
  }

  public boolean isMarkStepsNA() {
    return this.markStepsNA;
  }

  public StepPermissions setMarkStepsNA(boolean markStepsNA) {
    this.markStepsNA = markStepsNA;
    setMarkStepsNAIsSet(true);
    return this;
  }

  public void unsetMarkStepsNA() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MARKSTEPSNA_ISSET_ID);
  }

  /** Returns true if field markStepsNA is set (has been assigned a value) and false otherwise */
  public boolean isSetMarkStepsNA() {
    return EncodingUtils.testBit(__isset_bitfield, __MARKSTEPSNA_ISSET_ID);
  }

  public void setMarkStepsNAIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MARKSTEPSNA_ISSET_ID, value);
  }

  public boolean isSendFieldInput() {
    return this.sendFieldInput;
  }

  public StepPermissions setSendFieldInput(boolean sendFieldInput) {
    this.sendFieldInput = sendFieldInput;
    setSendFieldInputIsSet(true);
    return this;
  }

  public void unsetSendFieldInput() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SENDFIELDINPUT_ISSET_ID);
  }

  /** Returns true if field sendFieldInput is set (has been assigned a value) and false otherwise */
  public boolean isSetSendFieldInput() {
    return EncodingUtils.testBit(__isset_bitfield, __SENDFIELDINPUT_ISSET_ID);
  }

  public void setSendFieldInputIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SENDFIELDINPUT_ISSET_ID, value);
  }

  public boolean isCompleteSteps() {
    return this.completeSteps;
  }

  public StepPermissions setCompleteSteps(boolean completeSteps) {
    this.completeSteps = completeSteps;
    setCompleteStepsIsSet(true);
    return this;
  }

  public void unsetCompleteSteps() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMPLETESTEPS_ISSET_ID);
  }

  /** Returns true if field completeSteps is set (has been assigned a value) and false otherwise */
  public boolean isSetCompleteSteps() {
    return EncodingUtils.testBit(__isset_bitfield, __COMPLETESTEPS_ISSET_ID);
  }

  public void setCompleteStepsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMPLETESTEPS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ADD_AND_DUPLICATE_STEPS:
      if (value == null) {
        unsetAddAndDuplicateSteps();
      } else {
        setAddAndDuplicateSteps((Boolean)value);
      }
      break;

    case ADD_AND_DUPLICATE_STEP_GROUPS:
      if (value == null) {
        unsetAddAndDuplicateStepGroups();
      } else {
        setAddAndDuplicateStepGroups((Boolean)value);
      }
      break;

    case MARK_STEPS_NA:
      if (value == null) {
        unsetMarkStepsNA();
      } else {
        setMarkStepsNA((Boolean)value);
      }
      break;

    case SEND_FIELD_INPUT:
      if (value == null) {
        unsetSendFieldInput();
      } else {
        setSendFieldInput((Boolean)value);
      }
      break;

    case COMPLETE_STEPS:
      if (value == null) {
        unsetCompleteSteps();
      } else {
        setCompleteSteps((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ADD_AND_DUPLICATE_STEPS:
      return isAddAndDuplicateSteps();

    case ADD_AND_DUPLICATE_STEP_GROUPS:
      return isAddAndDuplicateStepGroups();

    case MARK_STEPS_NA:
      return isMarkStepsNA();

    case SEND_FIELD_INPUT:
      return isSendFieldInput();

    case COMPLETE_STEPS:
      return isCompleteSteps();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ADD_AND_DUPLICATE_STEPS:
      return isSetAddAndDuplicateSteps();
    case ADD_AND_DUPLICATE_STEP_GROUPS:
      return isSetAddAndDuplicateStepGroups();
    case MARK_STEPS_NA:
      return isSetMarkStepsNA();
    case SEND_FIELD_INPUT:
      return isSetSendFieldInput();
    case COMPLETE_STEPS:
      return isSetCompleteSteps();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof StepPermissions)
      return this.equals((StepPermissions)that);
    return false;
  }

  public boolean equals(StepPermissions that) {
    if (that == null)
      return false;

    boolean this_present_addAndDuplicateSteps = true;
    boolean that_present_addAndDuplicateSteps = true;
    if (this_present_addAndDuplicateSteps || that_present_addAndDuplicateSteps) {
      if (!(this_present_addAndDuplicateSteps && that_present_addAndDuplicateSteps))
        return false;
      if (this.addAndDuplicateSteps != that.addAndDuplicateSteps)
        return false;
    }

    boolean this_present_addAndDuplicateStepGroups = true;
    boolean that_present_addAndDuplicateStepGroups = true;
    if (this_present_addAndDuplicateStepGroups || that_present_addAndDuplicateStepGroups) {
      if (!(this_present_addAndDuplicateStepGroups && that_present_addAndDuplicateStepGroups))
        return false;
      if (this.addAndDuplicateStepGroups != that.addAndDuplicateStepGroups)
        return false;
    }

    boolean this_present_markStepsNA = true;
    boolean that_present_markStepsNA = true;
    if (this_present_markStepsNA || that_present_markStepsNA) {
      if (!(this_present_markStepsNA && that_present_markStepsNA))
        return false;
      if (this.markStepsNA != that.markStepsNA)
        return false;
    }

    boolean this_present_sendFieldInput = true;
    boolean that_present_sendFieldInput = true;
    if (this_present_sendFieldInput || that_present_sendFieldInput) {
      if (!(this_present_sendFieldInput && that_present_sendFieldInput))
        return false;
      if (this.sendFieldInput != that.sendFieldInput)
        return false;
    }

    boolean this_present_completeSteps = true;
    boolean that_present_completeSteps = true;
    if (this_present_completeSteps || that_present_completeSteps) {
      if (!(this_present_completeSteps && that_present_completeSteps))
        return false;
      if (this.completeSteps != that.completeSteps)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_addAndDuplicateSteps = true;
    list.add(present_addAndDuplicateSteps);
    if (present_addAndDuplicateSteps)
      list.add(addAndDuplicateSteps);

    boolean present_addAndDuplicateStepGroups = true;
    list.add(present_addAndDuplicateStepGroups);
    if (present_addAndDuplicateStepGroups)
      list.add(addAndDuplicateStepGroups);

    boolean present_markStepsNA = true;
    list.add(present_markStepsNA);
    if (present_markStepsNA)
      list.add(markStepsNA);

    boolean present_sendFieldInput = true;
    list.add(present_sendFieldInput);
    if (present_sendFieldInput)
      list.add(sendFieldInput);

    boolean present_completeSteps = true;
    list.add(present_completeSteps);
    if (present_completeSteps)
      list.add(completeSteps);

    return list.hashCode();
  }

  @Override
  public int compareTo(StepPermissions other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAddAndDuplicateSteps()).compareTo(other.isSetAddAndDuplicateSteps());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddAndDuplicateSteps()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.addAndDuplicateSteps, other.addAndDuplicateSteps);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAddAndDuplicateStepGroups()).compareTo(other.isSetAddAndDuplicateStepGroups());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddAndDuplicateStepGroups()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.addAndDuplicateStepGroups, other.addAndDuplicateStepGroups);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMarkStepsNA()).compareTo(other.isSetMarkStepsNA());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMarkStepsNA()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.markStepsNA, other.markStepsNA);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSendFieldInput()).compareTo(other.isSetSendFieldInput());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSendFieldInput()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sendFieldInput, other.sendFieldInput);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompleteSteps()).compareTo(other.isSetCompleteSteps());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompleteSteps()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.completeSteps, other.completeSteps);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("StepPermissions(");
    boolean first = true;

    sb.append("addAndDuplicateSteps:");
    sb.append(this.addAndDuplicateSteps);
    first = false;
    if (!first) sb.append(", ");
    sb.append("addAndDuplicateStepGroups:");
    sb.append(this.addAndDuplicateStepGroups);
    first = false;
    if (!first) sb.append(", ");
    sb.append("markStepsNA:");
    sb.append(this.markStepsNA);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sendFieldInput:");
    sb.append(this.sendFieldInput);
    first = false;
    if (!first) sb.append(", ");
    sb.append("completeSteps:");
    sb.append(this.completeSteps);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StepPermissionsStandardSchemeFactory implements SchemeFactory {
    public StepPermissionsStandardScheme getScheme() {
      return new StepPermissionsStandardScheme();
    }
  }

  private static class StepPermissionsStandardScheme extends StandardScheme<StepPermissions> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, StepPermissions struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ADD_AND_DUPLICATE_STEPS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.addAndDuplicateSteps = iprot.readBool();
              struct.setAddAndDuplicateStepsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ADD_AND_DUPLICATE_STEP_GROUPS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.addAndDuplicateStepGroups = iprot.readBool();
              struct.setAddAndDuplicateStepGroupsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MARK_STEPS_NA
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.markStepsNA = iprot.readBool();
              struct.setMarkStepsNAIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SEND_FIELD_INPUT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.sendFieldInput = iprot.readBool();
              struct.setSendFieldInputIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COMPLETE_STEPS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.completeSteps = iprot.readBool();
              struct.setCompleteStepsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, StepPermissions struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ADD_AND_DUPLICATE_STEPS_FIELD_DESC);
      oprot.writeBool(struct.addAndDuplicateSteps);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ADD_AND_DUPLICATE_STEP_GROUPS_FIELD_DESC);
      oprot.writeBool(struct.addAndDuplicateStepGroups);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MARK_STEPS_NA_FIELD_DESC);
      oprot.writeBool(struct.markStepsNA);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SEND_FIELD_INPUT_FIELD_DESC);
      oprot.writeBool(struct.sendFieldInput);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COMPLETE_STEPS_FIELD_DESC);
      oprot.writeBool(struct.completeSteps);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

}

