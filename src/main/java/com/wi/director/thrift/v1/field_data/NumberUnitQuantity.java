/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wi.director.thrift.v1.field_data;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * SI unit quantity / category of measurement
 */
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class NumberUnitQuantity implements org.apache.thrift.TBase<NumberUnitQuantity, NumberUnitQuantity._Fields>, java.io.Serializable, Cloneable, Comparable<NumberUnitQuantity> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("NumberUnitQuantity");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField LOCALIZED_NAME_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("localizedNameMap", org.apache.thrift.protocol.TType.MAP, (short)2);
  private static final org.apache.thrift.protocol.TField UNITS_FIELD_DESC = new org.apache.thrift.protocol.TField("units", org.apache.thrift.protocol.TType.MAP, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new NumberUnitQuantityStandardSchemeFactory());
  }

  public String id; // required
  /**
   * Map of language code (en-US, es-MX etc.) to quantity name
   */
  public Map<String,String> localizedNameMap; // required
  public Map<NumberUnitSystem,List<NumberUnit>> units; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    /**
     * Map of language code (en-US, es-MX etc.) to quantity name
     */
    LOCALIZED_NAME_MAP((short)2, "localizedNameMap"),
    UNITS((short)3, "units");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // LOCALIZED_NAME_MAP
          return LOCALIZED_NAME_MAP;
        case 3: // UNITS
          return UNITS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "UUID")));
    tmpMap.put(_Fields.LOCALIZED_NAME_MAP, new org.apache.thrift.meta_data.FieldMetaData("localizedNameMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.UNITS, new org.apache.thrift.meta_data.FieldMetaData("units", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, NumberUnitSystem.class), 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NumberUnit.class)))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(NumberUnitQuantity.class, metaDataMap);
  }

  public NumberUnitQuantity() {
  }

  public NumberUnitQuantity(
    String id,
    Map<String,String> localizedNameMap,
    Map<NumberUnitSystem,List<NumberUnit>> units)
  {
    this();
    this.id = id;
    this.localizedNameMap = localizedNameMap;
    this.units = units;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public NumberUnitQuantity(NumberUnitQuantity other) {
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetLocalizedNameMap()) {
      Map<String,String> __this__localizedNameMap = new HashMap<String,String>(other.localizedNameMap);
      this.localizedNameMap = __this__localizedNameMap;
    }
    if (other.isSetUnits()) {
      Map<NumberUnitSystem,List<NumberUnit>> __this__units = new HashMap<NumberUnitSystem,List<NumberUnit>>(other.units.size());
      for (Map.Entry<NumberUnitSystem, List<NumberUnit>> other_element : other.units.entrySet()) {

        NumberUnitSystem other_element_key = other_element.getKey();
        List<NumberUnit> other_element_value = other_element.getValue();

        NumberUnitSystem __this__units_copy_key = other_element_key;

        List<NumberUnit> __this__units_copy_value = new ArrayList<NumberUnit>(other_element_value.size());
        for (NumberUnit other_element_value_element : other_element_value) {
          __this__units_copy_value.add(new NumberUnit(other_element_value_element));
        }

        __this__units.put(__this__units_copy_key, __this__units_copy_value);
      }
      this.units = __this__units;
    }
  }

  public NumberUnitQuantity deepCopy() {
    return new NumberUnitQuantity(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.localizedNameMap = null;
    this.units = null;
  }

  public String getId() {
    return this.id;
  }

  public NumberUnitQuantity setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public int getLocalizedNameMapSize() {
    return (this.localizedNameMap == null) ? 0 : this.localizedNameMap.size();
  }

  public void putToLocalizedNameMap(String key, String val) {
    if (this.localizedNameMap == null) {
      this.localizedNameMap = new HashMap<String,String>();
    }
    this.localizedNameMap.put(key, val);
  }

  /**
   * Map of language code (en-US, es-MX etc.) to quantity name
   */
  public Map<String,String> getLocalizedNameMap() {
    return this.localizedNameMap;
  }

  /**
   * Map of language code (en-US, es-MX etc.) to quantity name
   */
  public NumberUnitQuantity setLocalizedNameMap(Map<String,String> localizedNameMap) {
    this.localizedNameMap = localizedNameMap;
    return this;
  }

  public void unsetLocalizedNameMap() {
    this.localizedNameMap = null;
  }

  /** Returns true if field localizedNameMap is set (has been assigned a value) and false otherwise */
  public boolean isSetLocalizedNameMap() {
    return this.localizedNameMap != null;
  }

  public void setLocalizedNameMapIsSet(boolean value) {
    if (!value) {
      this.localizedNameMap = null;
    }
  }

  public int getUnitsSize() {
    return (this.units == null) ? 0 : this.units.size();
  }

  public void putToUnits(NumberUnitSystem key, List<NumberUnit> val) {
    if (this.units == null) {
      this.units = new HashMap<NumberUnitSystem,List<NumberUnit>>();
    }
    this.units.put(key, val);
  }

  public Map<NumberUnitSystem,List<NumberUnit>> getUnits() {
    return this.units;
  }

  public NumberUnitQuantity setUnits(Map<NumberUnitSystem,List<NumberUnit>> units) {
    this.units = units;
    return this;
  }

  public void unsetUnits() {
    this.units = null;
  }

  /** Returns true if field units is set (has been assigned a value) and false otherwise */
  public boolean isSetUnits() {
    return this.units != null;
  }

  public void setUnitsIsSet(boolean value) {
    if (!value) {
      this.units = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case LOCALIZED_NAME_MAP:
      if (value == null) {
        unsetLocalizedNameMap();
      } else {
        setLocalizedNameMap((Map<String,String>)value);
      }
      break;

    case UNITS:
      if (value == null) {
        unsetUnits();
      } else {
        setUnits((Map<NumberUnitSystem,List<NumberUnit>>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case LOCALIZED_NAME_MAP:
      return getLocalizedNameMap();

    case UNITS:
      return getUnits();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case LOCALIZED_NAME_MAP:
      return isSetLocalizedNameMap();
    case UNITS:
      return isSetUnits();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof NumberUnitQuantity)
      return this.equals((NumberUnitQuantity)that);
    return false;
  }

  public boolean equals(NumberUnitQuantity that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_localizedNameMap = true && this.isSetLocalizedNameMap();
    boolean that_present_localizedNameMap = true && that.isSetLocalizedNameMap();
    if (this_present_localizedNameMap || that_present_localizedNameMap) {
      if (!(this_present_localizedNameMap && that_present_localizedNameMap))
        return false;
      if (!this.localizedNameMap.equals(that.localizedNameMap))
        return false;
    }

    boolean this_present_units = true && this.isSetUnits();
    boolean that_present_units = true && that.isSetUnits();
    if (this_present_units || that_present_units) {
      if (!(this_present_units && that_present_units))
        return false;
      if (!this.units.equals(that.units))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_localizedNameMap = true && (isSetLocalizedNameMap());
    list.add(present_localizedNameMap);
    if (present_localizedNameMap)
      list.add(localizedNameMap);

    boolean present_units = true && (isSetUnits());
    list.add(present_units);
    if (present_units)
      list.add(units);

    return list.hashCode();
  }

  @Override
  public int compareTo(NumberUnitQuantity other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocalizedNameMap()).compareTo(other.isSetLocalizedNameMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocalizedNameMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.localizedNameMap, other.localizedNameMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnits()).compareTo(other.isSetUnits());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnits()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.units, other.units);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("NumberUnitQuantity(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("localizedNameMap:");
    if (this.localizedNameMap == null) {
      sb.append("null");
    } else {
      sb.append(this.localizedNameMap);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("units:");
    if (this.units == null) {
      sb.append("null");
    } else {
      sb.append(this.units);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class NumberUnitQuantityStandardSchemeFactory implements SchemeFactory {
    public NumberUnitQuantityStandardScheme getScheme() {
      return new NumberUnitQuantityStandardScheme();
    }
  }

  private static class NumberUnitQuantityStandardScheme extends StandardScheme<NumberUnitQuantity> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, NumberUnitQuantity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LOCALIZED_NAME_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map4 = iprot.readMapBegin();
                struct.localizedNameMap = new HashMap<String,String>(2*_map4.size);
                String _key5;
                String _val6;
                for (int _i7 = 0; _i7 < _map4.size; ++_i7)
                {
                  _key5 = iprot.readString();
                  _val6 = iprot.readString();
                  struct.localizedNameMap.put(_key5, _val6);
                }
                iprot.readMapEnd();
              }
              struct.setLocalizedNameMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // UNITS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map8 = iprot.readMapBegin();
                struct.units = new HashMap<NumberUnitSystem,List<NumberUnit>>(2*_map8.size);
                NumberUnitSystem _key9;
                List<NumberUnit> _val10;
                for (int _i11 = 0; _i11 < _map8.size; ++_i11)
                {
                  _key9 = com.wi.director.thrift.v1.field_data.NumberUnitSystem.findByValue(iprot.readI32());
                  {
                    org.apache.thrift.protocol.TList _list12 = iprot.readListBegin();
                    _val10 = new ArrayList<NumberUnit>(_list12.size);
                    NumberUnit _elem13;
                    for (int _i14 = 0; _i14 < _list12.size; ++_i14)
                    {
                      _elem13 = new NumberUnit();
                      _elem13.read(iprot);
                      _val10.add(_elem13);
                    }
                    iprot.readListEnd();
                  }
                  struct.units.put(_key9, _val10);
                }
                iprot.readMapEnd();
              }
              struct.setUnitsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, NumberUnitQuantity struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.localizedNameMap != null) {
        oprot.writeFieldBegin(LOCALIZED_NAME_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.localizedNameMap.size()));
          for (Map.Entry<String, String> _iter15 : struct.localizedNameMap.entrySet())
          {
            oprot.writeString(_iter15.getKey());
            oprot.writeString(_iter15.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.units != null) {
        oprot.writeFieldBegin(UNITS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.LIST, struct.units.size()));
          for (Map.Entry<NumberUnitSystem, List<NumberUnit>> _iter16 : struct.units.entrySet())
          {
            oprot.writeI32(_iter16.getKey().getValue());
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter16.getValue().size()));
              for (NumberUnit _iter17 : _iter16.getValue())
              {
                _iter17.write(oprot);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

}

