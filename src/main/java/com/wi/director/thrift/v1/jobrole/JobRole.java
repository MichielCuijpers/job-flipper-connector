/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wi.director.thrift.v1.jobrole;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class JobRole implements org.apache.thrift.TBase<JobRole, JobRole._Fields>, java.io.Serializable, Cloneable, Comparable<JobRole> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("JobRole");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TEAM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("teamId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DESCRIP_FIELD_DESC = new org.apache.thrift.protocol.TField("descrip", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ARCHIVED_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("archivedAt", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField SYSTEM_ROLE_FIELD_DESC = new org.apache.thrift.protocol.TField("systemRole", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField SYSTEM_ROLE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("systemRoleType", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField PERMISSIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("permissions", org.apache.thrift.protocol.TType.STRUCT, (short)8);
  private static final org.apache.thrift.protocol.TField RESTRICTION_FIELD_DESC = new org.apache.thrift.protocol.TField("restriction", org.apache.thrift.protocol.TType.STRUCT, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new JobRoleStandardSchemeFactory());
  }

  /**
   * UUID of the job role
   */
  public String id; // required
  /**
   * UUID of the associated team
   */
  public String teamId; // required
  /**
   * Name of the job role
   */
  public String name; // required
  /**
   * Description of the job role
   */
  public String descrip; // required
  /**
   * Unix timestamp of when the role was archived. 0 means the role is not archived.
   */
  public long archivedAt; // required
  /**
   * System job role, cannot be modified
   */
  public boolean systemRole; // required
  /**
   * Kind of system job role (for client-side identification, e.g. for translation)
   * 
   * @see SystemRoleType
   */
  public SystemRoleType systemRoleType; // optional
  public JobPermissions permissions; // optional
  /**
   * Restrictions for this job role
   */
  public JobRoleRestriction restriction; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * UUID of the job role
     */
    ID((short)1, "id"),
    /**
     * UUID of the associated team
     */
    TEAM_ID((short)2, "teamId"),
    /**
     * Name of the job role
     */
    NAME((short)3, "name"),
    /**
     * Description of the job role
     */
    DESCRIP((short)4, "descrip"),
    /**
     * Unix timestamp of when the role was archived. 0 means the role is not archived.
     */
    ARCHIVED_AT((short)5, "archivedAt"),
    /**
     * System job role, cannot be modified
     */
    SYSTEM_ROLE((short)6, "systemRole"),
    /**
     * Kind of system job role (for client-side identification, e.g. for translation)
     * 
     * @see SystemRoleType
     */
    SYSTEM_ROLE_TYPE((short)7, "systemRoleType"),
    PERMISSIONS((short)8, "permissions"),
    /**
     * Restrictions for this job role
     */
    RESTRICTION((short)9, "restriction");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // TEAM_ID
          return TEAM_ID;
        case 3: // NAME
          return NAME;
        case 4: // DESCRIP
          return DESCRIP;
        case 5: // ARCHIVED_AT
          return ARCHIVED_AT;
        case 6: // SYSTEM_ROLE
          return SYSTEM_ROLE;
        case 7: // SYSTEM_ROLE_TYPE
          return SYSTEM_ROLE_TYPE;
        case 8: // PERMISSIONS
          return PERMISSIONS;
        case 9: // RESTRICTION
          return RESTRICTION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ARCHIVEDAT_ISSET_ID = 0;
  private static final int __SYSTEMROLE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.SYSTEM_ROLE_TYPE,_Fields.PERMISSIONS,_Fields.RESTRICTION};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TEAM_ID, new org.apache.thrift.meta_data.FieldMetaData("teamId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRIP, new org.apache.thrift.meta_data.FieldMetaData("descrip", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ARCHIVED_AT, new org.apache.thrift.meta_data.FieldMetaData("archivedAt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SYSTEM_ROLE, new org.apache.thrift.meta_data.FieldMetaData("systemRole", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SYSTEM_ROLE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("systemRoleType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, SystemRoleType.class)));
    tmpMap.put(_Fields.PERMISSIONS, new org.apache.thrift.meta_data.FieldMetaData("permissions", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JobPermissions.class)));
    tmpMap.put(_Fields.RESTRICTION, new org.apache.thrift.meta_data.FieldMetaData("restriction", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JobRoleRestriction.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(JobRole.class, metaDataMap);
  }

  public JobRole() {
  }

  public JobRole(
    String id,
    String teamId,
    String name,
    String descrip,
    long archivedAt,
    boolean systemRole)
  {
    this();
    this.id = id;
    this.teamId = teamId;
    this.name = name;
    this.descrip = descrip;
    this.archivedAt = archivedAt;
    setArchivedAtIsSet(true);
    this.systemRole = systemRole;
    setSystemRoleIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public JobRole(JobRole other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetTeamId()) {
      this.teamId = other.teamId;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetDescrip()) {
      this.descrip = other.descrip;
    }
    this.archivedAt = other.archivedAt;
    this.systemRole = other.systemRole;
    if (other.isSetSystemRoleType()) {
      this.systemRoleType = other.systemRoleType;
    }
    if (other.isSetPermissions()) {
      this.permissions = new JobPermissions(other.permissions);
    }
    if (other.isSetRestriction()) {
      this.restriction = new JobRoleRestriction(other.restriction);
    }
  }

  public JobRole deepCopy() {
    return new JobRole(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.teamId = null;
    this.name = null;
    this.descrip = null;
    setArchivedAtIsSet(false);
    this.archivedAt = 0;
    setSystemRoleIsSet(false);
    this.systemRole = false;
    this.systemRoleType = null;
    this.permissions = null;
    this.restriction = null;
  }

  /**
   * UUID of the job role
   */
  public String getId() {
    return this.id;
  }

  /**
   * UUID of the job role
   */
  public JobRole setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  /**
   * UUID of the associated team
   */
  public String getTeamId() {
    return this.teamId;
  }

  /**
   * UUID of the associated team
   */
  public JobRole setTeamId(String teamId) {
    this.teamId = teamId;
    return this;
  }

  public void unsetTeamId() {
    this.teamId = null;
  }

  /** Returns true if field teamId is set (has been assigned a value) and false otherwise */
  public boolean isSetTeamId() {
    return this.teamId != null;
  }

  public void setTeamIdIsSet(boolean value) {
    if (!value) {
      this.teamId = null;
    }
  }

  /**
   * Name of the job role
   */
  public String getName() {
    return this.name;
  }

  /**
   * Name of the job role
   */
  public JobRole setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  /**
   * Description of the job role
   */
  public String getDescrip() {
    return this.descrip;
  }

  /**
   * Description of the job role
   */
  public JobRole setDescrip(String descrip) {
    this.descrip = descrip;
    return this;
  }

  public void unsetDescrip() {
    this.descrip = null;
  }

  /** Returns true if field descrip is set (has been assigned a value) and false otherwise */
  public boolean isSetDescrip() {
    return this.descrip != null;
  }

  public void setDescripIsSet(boolean value) {
    if (!value) {
      this.descrip = null;
    }
  }

  /**
   * Unix timestamp of when the role was archived. 0 means the role is not archived.
   */
  public long getArchivedAt() {
    return this.archivedAt;
  }

  /**
   * Unix timestamp of when the role was archived. 0 means the role is not archived.
   */
  public JobRole setArchivedAt(long archivedAt) {
    this.archivedAt = archivedAt;
    setArchivedAtIsSet(true);
    return this;
  }

  public void unsetArchivedAt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ARCHIVEDAT_ISSET_ID);
  }

  /** Returns true if field archivedAt is set (has been assigned a value) and false otherwise */
  public boolean isSetArchivedAt() {
    return EncodingUtils.testBit(__isset_bitfield, __ARCHIVEDAT_ISSET_ID);
  }

  public void setArchivedAtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ARCHIVEDAT_ISSET_ID, value);
  }

  /**
   * System job role, cannot be modified
   */
  public boolean isSystemRole() {
    return this.systemRole;
  }

  /**
   * System job role, cannot be modified
   */
  public JobRole setSystemRole(boolean systemRole) {
    this.systemRole = systemRole;
    setSystemRoleIsSet(true);
    return this;
  }

  public void unsetSystemRole() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SYSTEMROLE_ISSET_ID);
  }

  /** Returns true if field systemRole is set (has been assigned a value) and false otherwise */
  public boolean isSetSystemRole() {
    return EncodingUtils.testBit(__isset_bitfield, __SYSTEMROLE_ISSET_ID);
  }

  public void setSystemRoleIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SYSTEMROLE_ISSET_ID, value);
  }

  /**
   * Kind of system job role (for client-side identification, e.g. for translation)
   * 
   * @see SystemRoleType
   */
  public SystemRoleType getSystemRoleType() {
    return this.systemRoleType;
  }

  /**
   * Kind of system job role (for client-side identification, e.g. for translation)
   * 
   * @see SystemRoleType
   */
  public JobRole setSystemRoleType(SystemRoleType systemRoleType) {
    this.systemRoleType = systemRoleType;
    return this;
  }

  public void unsetSystemRoleType() {
    this.systemRoleType = null;
  }

  /** Returns true if field systemRoleType is set (has been assigned a value) and false otherwise */
  public boolean isSetSystemRoleType() {
    return this.systemRoleType != null;
  }

  public void setSystemRoleTypeIsSet(boolean value) {
    if (!value) {
      this.systemRoleType = null;
    }
  }

  public JobPermissions getPermissions() {
    return this.permissions;
  }

  public JobRole setPermissions(JobPermissions permissions) {
    this.permissions = permissions;
    return this;
  }

  public void unsetPermissions() {
    this.permissions = null;
  }

  /** Returns true if field permissions is set (has been assigned a value) and false otherwise */
  public boolean isSetPermissions() {
    return this.permissions != null;
  }

  public void setPermissionsIsSet(boolean value) {
    if (!value) {
      this.permissions = null;
    }
  }

  /**
   * Restrictions for this job role
   */
  public JobRoleRestriction getRestriction() {
    return this.restriction;
  }

  /**
   * Restrictions for this job role
   */
  public JobRole setRestriction(JobRoleRestriction restriction) {
    this.restriction = restriction;
    return this;
  }

  public void unsetRestriction() {
    this.restriction = null;
  }

  /** Returns true if field restriction is set (has been assigned a value) and false otherwise */
  public boolean isSetRestriction() {
    return this.restriction != null;
  }

  public void setRestrictionIsSet(boolean value) {
    if (!value) {
      this.restriction = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case TEAM_ID:
      if (value == null) {
        unsetTeamId();
      } else {
        setTeamId((String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case DESCRIP:
      if (value == null) {
        unsetDescrip();
      } else {
        setDescrip((String)value);
      }
      break;

    case ARCHIVED_AT:
      if (value == null) {
        unsetArchivedAt();
      } else {
        setArchivedAt((Long)value);
      }
      break;

    case SYSTEM_ROLE:
      if (value == null) {
        unsetSystemRole();
      } else {
        setSystemRole((Boolean)value);
      }
      break;

    case SYSTEM_ROLE_TYPE:
      if (value == null) {
        unsetSystemRoleType();
      } else {
        setSystemRoleType((SystemRoleType)value);
      }
      break;

    case PERMISSIONS:
      if (value == null) {
        unsetPermissions();
      } else {
        setPermissions((JobPermissions)value);
      }
      break;

    case RESTRICTION:
      if (value == null) {
        unsetRestriction();
      } else {
        setRestriction((JobRoleRestriction)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case TEAM_ID:
      return getTeamId();

    case NAME:
      return getName();

    case DESCRIP:
      return getDescrip();

    case ARCHIVED_AT:
      return getArchivedAt();

    case SYSTEM_ROLE:
      return isSystemRole();

    case SYSTEM_ROLE_TYPE:
      return getSystemRoleType();

    case PERMISSIONS:
      return getPermissions();

    case RESTRICTION:
      return getRestriction();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case TEAM_ID:
      return isSetTeamId();
    case NAME:
      return isSetName();
    case DESCRIP:
      return isSetDescrip();
    case ARCHIVED_AT:
      return isSetArchivedAt();
    case SYSTEM_ROLE:
      return isSetSystemRole();
    case SYSTEM_ROLE_TYPE:
      return isSetSystemRoleType();
    case PERMISSIONS:
      return isSetPermissions();
    case RESTRICTION:
      return isSetRestriction();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof JobRole)
      return this.equals((JobRole)that);
    return false;
  }

  public boolean equals(JobRole that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_teamId = true && this.isSetTeamId();
    boolean that_present_teamId = true && that.isSetTeamId();
    if (this_present_teamId || that_present_teamId) {
      if (!(this_present_teamId && that_present_teamId))
        return false;
      if (!this.teamId.equals(that.teamId))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_descrip = true && this.isSetDescrip();
    boolean that_present_descrip = true && that.isSetDescrip();
    if (this_present_descrip || that_present_descrip) {
      if (!(this_present_descrip && that_present_descrip))
        return false;
      if (!this.descrip.equals(that.descrip))
        return false;
    }

    boolean this_present_archivedAt = true;
    boolean that_present_archivedAt = true;
    if (this_present_archivedAt || that_present_archivedAt) {
      if (!(this_present_archivedAt && that_present_archivedAt))
        return false;
      if (this.archivedAt != that.archivedAt)
        return false;
    }

    boolean this_present_systemRole = true;
    boolean that_present_systemRole = true;
    if (this_present_systemRole || that_present_systemRole) {
      if (!(this_present_systemRole && that_present_systemRole))
        return false;
      if (this.systemRole != that.systemRole)
        return false;
    }

    boolean this_present_systemRoleType = true && this.isSetSystemRoleType();
    boolean that_present_systemRoleType = true && that.isSetSystemRoleType();
    if (this_present_systemRoleType || that_present_systemRoleType) {
      if (!(this_present_systemRoleType && that_present_systemRoleType))
        return false;
      if (!this.systemRoleType.equals(that.systemRoleType))
        return false;
    }

    boolean this_present_permissions = true && this.isSetPermissions();
    boolean that_present_permissions = true && that.isSetPermissions();
    if (this_present_permissions || that_present_permissions) {
      if (!(this_present_permissions && that_present_permissions))
        return false;
      if (!this.permissions.equals(that.permissions))
        return false;
    }

    boolean this_present_restriction = true && this.isSetRestriction();
    boolean that_present_restriction = true && that.isSetRestriction();
    if (this_present_restriction || that_present_restriction) {
      if (!(this_present_restriction && that_present_restriction))
        return false;
      if (!this.restriction.equals(that.restriction))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_teamId = true && (isSetTeamId());
    list.add(present_teamId);
    if (present_teamId)
      list.add(teamId);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_descrip = true && (isSetDescrip());
    list.add(present_descrip);
    if (present_descrip)
      list.add(descrip);

    boolean present_archivedAt = true;
    list.add(present_archivedAt);
    if (present_archivedAt)
      list.add(archivedAt);

    boolean present_systemRole = true;
    list.add(present_systemRole);
    if (present_systemRole)
      list.add(systemRole);

    boolean present_systemRoleType = true && (isSetSystemRoleType());
    list.add(present_systemRoleType);
    if (present_systemRoleType)
      list.add(systemRoleType.getValue());

    boolean present_permissions = true && (isSetPermissions());
    list.add(present_permissions);
    if (present_permissions)
      list.add(permissions);

    boolean present_restriction = true && (isSetRestriction());
    list.add(present_restriction);
    if (present_restriction)
      list.add(restriction);

    return list.hashCode();
  }

  @Override
  public int compareTo(JobRole other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTeamId()).compareTo(other.isSetTeamId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeamId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teamId, other.teamId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescrip()).compareTo(other.isSetDescrip());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescrip()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.descrip, other.descrip);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArchivedAt()).compareTo(other.isSetArchivedAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArchivedAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.archivedAt, other.archivedAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSystemRole()).compareTo(other.isSetSystemRole());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSystemRole()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.systemRole, other.systemRole);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSystemRoleType()).compareTo(other.isSetSystemRoleType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSystemRoleType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.systemRoleType, other.systemRoleType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPermissions()).compareTo(other.isSetPermissions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPermissions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.permissions, other.permissions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRestriction()).compareTo(other.isSetRestriction());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRestriction()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.restriction, other.restriction);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("JobRole(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("teamId:");
    if (this.teamId == null) {
      sb.append("null");
    } else {
      sb.append(this.teamId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("descrip:");
    if (this.descrip == null) {
      sb.append("null");
    } else {
      sb.append(this.descrip);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("archivedAt:");
    sb.append(this.archivedAt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("systemRole:");
    sb.append(this.systemRole);
    first = false;
    if (isSetSystemRoleType()) {
      if (!first) sb.append(", ");
      sb.append("systemRoleType:");
      if (this.systemRoleType == null) {
        sb.append("null");
      } else {
        sb.append(this.systemRoleType);
      }
      first = false;
    }
    if (isSetPermissions()) {
      if (!first) sb.append(", ");
      sb.append("permissions:");
      if (this.permissions == null) {
        sb.append("null");
      } else {
        sb.append(this.permissions);
      }
      first = false;
    }
    if (isSetRestriction()) {
      if (!first) sb.append(", ");
      sb.append("restriction:");
      if (this.restriction == null) {
        sb.append("null");
      } else {
        sb.append(this.restriction);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (permissions != null) {
      permissions.validate();
    }
    if (restriction != null) {
      restriction.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class JobRoleStandardSchemeFactory implements SchemeFactory {
    public JobRoleStandardScheme getScheme() {
      return new JobRoleStandardScheme();
    }
  }

  private static class JobRoleStandardScheme extends StandardScheme<JobRole> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, JobRole struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TEAM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.teamId = iprot.readString();
              struct.setTeamIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DESCRIP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.descrip = iprot.readString();
              struct.setDescripIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ARCHIVED_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.archivedAt = iprot.readI64();
              struct.setArchivedAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SYSTEM_ROLE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.systemRole = iprot.readBool();
              struct.setSystemRoleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SYSTEM_ROLE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.systemRoleType = com.wi.director.thrift.v1.jobrole.SystemRoleType.findByValue(iprot.readI32());
              struct.setSystemRoleTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PERMISSIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.permissions = new JobPermissions();
              struct.permissions.read(iprot);
              struct.setPermissionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // RESTRICTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.restriction = new JobRoleRestriction();
              struct.restriction.read(iprot);
              struct.setRestrictionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, JobRole struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.teamId != null) {
        oprot.writeFieldBegin(TEAM_ID_FIELD_DESC);
        oprot.writeString(struct.teamId);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.descrip != null) {
        oprot.writeFieldBegin(DESCRIP_FIELD_DESC);
        oprot.writeString(struct.descrip);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ARCHIVED_AT_FIELD_DESC);
      oprot.writeI64(struct.archivedAt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SYSTEM_ROLE_FIELD_DESC);
      oprot.writeBool(struct.systemRole);
      oprot.writeFieldEnd();
      if (struct.systemRoleType != null) {
        if (struct.isSetSystemRoleType()) {
          oprot.writeFieldBegin(SYSTEM_ROLE_TYPE_FIELD_DESC);
          oprot.writeI32(struct.systemRoleType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.permissions != null) {
        if (struct.isSetPermissions()) {
          oprot.writeFieldBegin(PERMISSIONS_FIELD_DESC);
          struct.permissions.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.restriction != null) {
        if (struct.isSetRestriction()) {
          oprot.writeFieldBegin(RESTRICTION_FIELD_DESC);
          struct.restriction.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

}

