/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wi.director.thrift.v1.templateset;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class TemplateSetSelectOpts implements org.apache.thrift.TBase<TemplateSetSelectOpts, TemplateSetSelectOpts._Fields>, java.io.Serializable, Cloneable, Comparable<TemplateSetSelectOpts> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TemplateSetSelectOpts");

  private static final org.apache.thrift.protocol.TField INCLUDE_TEAM_FIELD_DESC = new org.apache.thrift.protocol.TField("includeTeam", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField INCLUDE_LAST_PUBLISHED_FIELD_DESC = new org.apache.thrift.protocol.TField("includeLastPublished", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField INCLUDE_LAST_AUTHOR_FIELD_DESC = new org.apache.thrift.protocol.TField("includeLastAuthor", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField INCLUDE_TEMPLATES_FIELD_DESC = new org.apache.thrift.protocol.TField("includeTemplates", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField INCLUDE_TAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("includeTags", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField INCLUDE_COUNTS_FIELD_DESC = new org.apache.thrift.protocol.TField("includeCounts", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField INCLUDE_LAST_MODIFIED_FIELD_DESC = new org.apache.thrift.protocol.TField("includeLastModified", org.apache.thrift.protocol.TType.BOOL, (short)7);
  private static final org.apache.thrift.protocol.TField INCLUDE_ATTRIBUTES_FIELD_DESC = new org.apache.thrift.protocol.TField("includeAttributes", org.apache.thrift.protocol.TType.BOOL, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TemplateSetSelectOptsStandardSchemeFactory());
  }

  public boolean includeTeam; // required
  /**
   * includes both lastPublishedAt and lastPublishedVersion
   */
  public boolean includeLastPublished; // required
  public boolean includeLastAuthor; // required
  public boolean includeTemplates; // required
  public boolean includeTags; // required
  public boolean includeCounts; // required
  public boolean includeLastModified; // required
  public boolean includeAttributes; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    INCLUDE_TEAM((short)1, "includeTeam"),
    /**
     * includes both lastPublishedAt and lastPublishedVersion
     */
    INCLUDE_LAST_PUBLISHED((short)2, "includeLastPublished"),
    INCLUDE_LAST_AUTHOR((short)3, "includeLastAuthor"),
    INCLUDE_TEMPLATES((short)4, "includeTemplates"),
    INCLUDE_TAGS((short)5, "includeTags"),
    INCLUDE_COUNTS((short)6, "includeCounts"),
    INCLUDE_LAST_MODIFIED((short)7, "includeLastModified"),
    INCLUDE_ATTRIBUTES((short)8, "includeAttributes");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // INCLUDE_TEAM
          return INCLUDE_TEAM;
        case 2: // INCLUDE_LAST_PUBLISHED
          return INCLUDE_LAST_PUBLISHED;
        case 3: // INCLUDE_LAST_AUTHOR
          return INCLUDE_LAST_AUTHOR;
        case 4: // INCLUDE_TEMPLATES
          return INCLUDE_TEMPLATES;
        case 5: // INCLUDE_TAGS
          return INCLUDE_TAGS;
        case 6: // INCLUDE_COUNTS
          return INCLUDE_COUNTS;
        case 7: // INCLUDE_LAST_MODIFIED
          return INCLUDE_LAST_MODIFIED;
        case 8: // INCLUDE_ATTRIBUTES
          return INCLUDE_ATTRIBUTES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __INCLUDETEAM_ISSET_ID = 0;
  private static final int __INCLUDELASTPUBLISHED_ISSET_ID = 1;
  private static final int __INCLUDELASTAUTHOR_ISSET_ID = 2;
  private static final int __INCLUDETEMPLATES_ISSET_ID = 3;
  private static final int __INCLUDETAGS_ISSET_ID = 4;
  private static final int __INCLUDECOUNTS_ISSET_ID = 5;
  private static final int __INCLUDELASTMODIFIED_ISSET_ID = 6;
  private static final int __INCLUDEATTRIBUTES_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INCLUDE_TEAM, new org.apache.thrift.meta_data.FieldMetaData("includeTeam", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.INCLUDE_LAST_PUBLISHED, new org.apache.thrift.meta_data.FieldMetaData("includeLastPublished", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.INCLUDE_LAST_AUTHOR, new org.apache.thrift.meta_data.FieldMetaData("includeLastAuthor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.INCLUDE_TEMPLATES, new org.apache.thrift.meta_data.FieldMetaData("includeTemplates", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.INCLUDE_TAGS, new org.apache.thrift.meta_data.FieldMetaData("includeTags", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.INCLUDE_COUNTS, new org.apache.thrift.meta_data.FieldMetaData("includeCounts", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.INCLUDE_LAST_MODIFIED, new org.apache.thrift.meta_data.FieldMetaData("includeLastModified", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.INCLUDE_ATTRIBUTES, new org.apache.thrift.meta_data.FieldMetaData("includeAttributes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TemplateSetSelectOpts.class, metaDataMap);
  }

  public TemplateSetSelectOpts() {
  }

  public TemplateSetSelectOpts(
    boolean includeTeam,
    boolean includeLastPublished,
    boolean includeLastAuthor,
    boolean includeTemplates,
    boolean includeTags,
    boolean includeCounts,
    boolean includeLastModified,
    boolean includeAttributes)
  {
    this();
    this.includeTeam = includeTeam;
    setIncludeTeamIsSet(true);
    this.includeLastPublished = includeLastPublished;
    setIncludeLastPublishedIsSet(true);
    this.includeLastAuthor = includeLastAuthor;
    setIncludeLastAuthorIsSet(true);
    this.includeTemplates = includeTemplates;
    setIncludeTemplatesIsSet(true);
    this.includeTags = includeTags;
    setIncludeTagsIsSet(true);
    this.includeCounts = includeCounts;
    setIncludeCountsIsSet(true);
    this.includeLastModified = includeLastModified;
    setIncludeLastModifiedIsSet(true);
    this.includeAttributes = includeAttributes;
    setIncludeAttributesIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TemplateSetSelectOpts(TemplateSetSelectOpts other) {
    __isset_bitfield = other.__isset_bitfield;
    this.includeTeam = other.includeTeam;
    this.includeLastPublished = other.includeLastPublished;
    this.includeLastAuthor = other.includeLastAuthor;
    this.includeTemplates = other.includeTemplates;
    this.includeTags = other.includeTags;
    this.includeCounts = other.includeCounts;
    this.includeLastModified = other.includeLastModified;
    this.includeAttributes = other.includeAttributes;
  }

  public TemplateSetSelectOpts deepCopy() {
    return new TemplateSetSelectOpts(this);
  }

  @Override
  public void clear() {
    setIncludeTeamIsSet(false);
    this.includeTeam = false;
    setIncludeLastPublishedIsSet(false);
    this.includeLastPublished = false;
    setIncludeLastAuthorIsSet(false);
    this.includeLastAuthor = false;
    setIncludeTemplatesIsSet(false);
    this.includeTemplates = false;
    setIncludeTagsIsSet(false);
    this.includeTags = false;
    setIncludeCountsIsSet(false);
    this.includeCounts = false;
    setIncludeLastModifiedIsSet(false);
    this.includeLastModified = false;
    setIncludeAttributesIsSet(false);
    this.includeAttributes = false;
  }

  public boolean isIncludeTeam() {
    return this.includeTeam;
  }

  public TemplateSetSelectOpts setIncludeTeam(boolean includeTeam) {
    this.includeTeam = includeTeam;
    setIncludeTeamIsSet(true);
    return this;
  }

  public void unsetIncludeTeam() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INCLUDETEAM_ISSET_ID);
  }

  /** Returns true if field includeTeam is set (has been assigned a value) and false otherwise */
  public boolean isSetIncludeTeam() {
    return EncodingUtils.testBit(__isset_bitfield, __INCLUDETEAM_ISSET_ID);
  }

  public void setIncludeTeamIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INCLUDETEAM_ISSET_ID, value);
  }

  /**
   * includes both lastPublishedAt and lastPublishedVersion
   */
  public boolean isIncludeLastPublished() {
    return this.includeLastPublished;
  }

  /**
   * includes both lastPublishedAt and lastPublishedVersion
   */
  public TemplateSetSelectOpts setIncludeLastPublished(boolean includeLastPublished) {
    this.includeLastPublished = includeLastPublished;
    setIncludeLastPublishedIsSet(true);
    return this;
  }

  public void unsetIncludeLastPublished() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INCLUDELASTPUBLISHED_ISSET_ID);
  }

  /** Returns true if field includeLastPublished is set (has been assigned a value) and false otherwise */
  public boolean isSetIncludeLastPublished() {
    return EncodingUtils.testBit(__isset_bitfield, __INCLUDELASTPUBLISHED_ISSET_ID);
  }

  public void setIncludeLastPublishedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INCLUDELASTPUBLISHED_ISSET_ID, value);
  }

  public boolean isIncludeLastAuthor() {
    return this.includeLastAuthor;
  }

  public TemplateSetSelectOpts setIncludeLastAuthor(boolean includeLastAuthor) {
    this.includeLastAuthor = includeLastAuthor;
    setIncludeLastAuthorIsSet(true);
    return this;
  }

  public void unsetIncludeLastAuthor() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INCLUDELASTAUTHOR_ISSET_ID);
  }

  /** Returns true if field includeLastAuthor is set (has been assigned a value) and false otherwise */
  public boolean isSetIncludeLastAuthor() {
    return EncodingUtils.testBit(__isset_bitfield, __INCLUDELASTAUTHOR_ISSET_ID);
  }

  public void setIncludeLastAuthorIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INCLUDELASTAUTHOR_ISSET_ID, value);
  }

  public boolean isIncludeTemplates() {
    return this.includeTemplates;
  }

  public TemplateSetSelectOpts setIncludeTemplates(boolean includeTemplates) {
    this.includeTemplates = includeTemplates;
    setIncludeTemplatesIsSet(true);
    return this;
  }

  public void unsetIncludeTemplates() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INCLUDETEMPLATES_ISSET_ID);
  }

  /** Returns true if field includeTemplates is set (has been assigned a value) and false otherwise */
  public boolean isSetIncludeTemplates() {
    return EncodingUtils.testBit(__isset_bitfield, __INCLUDETEMPLATES_ISSET_ID);
  }

  public void setIncludeTemplatesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INCLUDETEMPLATES_ISSET_ID, value);
  }

  public boolean isIncludeTags() {
    return this.includeTags;
  }

  public TemplateSetSelectOpts setIncludeTags(boolean includeTags) {
    this.includeTags = includeTags;
    setIncludeTagsIsSet(true);
    return this;
  }

  public void unsetIncludeTags() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INCLUDETAGS_ISSET_ID);
  }

  /** Returns true if field includeTags is set (has been assigned a value) and false otherwise */
  public boolean isSetIncludeTags() {
    return EncodingUtils.testBit(__isset_bitfield, __INCLUDETAGS_ISSET_ID);
  }

  public void setIncludeTagsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INCLUDETAGS_ISSET_ID, value);
  }

  public boolean isIncludeCounts() {
    return this.includeCounts;
  }

  public TemplateSetSelectOpts setIncludeCounts(boolean includeCounts) {
    this.includeCounts = includeCounts;
    setIncludeCountsIsSet(true);
    return this;
  }

  public void unsetIncludeCounts() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INCLUDECOUNTS_ISSET_ID);
  }

  /** Returns true if field includeCounts is set (has been assigned a value) and false otherwise */
  public boolean isSetIncludeCounts() {
    return EncodingUtils.testBit(__isset_bitfield, __INCLUDECOUNTS_ISSET_ID);
  }

  public void setIncludeCountsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INCLUDECOUNTS_ISSET_ID, value);
  }

  public boolean isIncludeLastModified() {
    return this.includeLastModified;
  }

  public TemplateSetSelectOpts setIncludeLastModified(boolean includeLastModified) {
    this.includeLastModified = includeLastModified;
    setIncludeLastModifiedIsSet(true);
    return this;
  }

  public void unsetIncludeLastModified() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INCLUDELASTMODIFIED_ISSET_ID);
  }

  /** Returns true if field includeLastModified is set (has been assigned a value) and false otherwise */
  public boolean isSetIncludeLastModified() {
    return EncodingUtils.testBit(__isset_bitfield, __INCLUDELASTMODIFIED_ISSET_ID);
  }

  public void setIncludeLastModifiedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INCLUDELASTMODIFIED_ISSET_ID, value);
  }

  public boolean isIncludeAttributes() {
    return this.includeAttributes;
  }

  public TemplateSetSelectOpts setIncludeAttributes(boolean includeAttributes) {
    this.includeAttributes = includeAttributes;
    setIncludeAttributesIsSet(true);
    return this;
  }

  public void unsetIncludeAttributes() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INCLUDEATTRIBUTES_ISSET_ID);
  }

  /** Returns true if field includeAttributes is set (has been assigned a value) and false otherwise */
  public boolean isSetIncludeAttributes() {
    return EncodingUtils.testBit(__isset_bitfield, __INCLUDEATTRIBUTES_ISSET_ID);
  }

  public void setIncludeAttributesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INCLUDEATTRIBUTES_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case INCLUDE_TEAM:
      if (value == null) {
        unsetIncludeTeam();
      } else {
        setIncludeTeam((Boolean)value);
      }
      break;

    case INCLUDE_LAST_PUBLISHED:
      if (value == null) {
        unsetIncludeLastPublished();
      } else {
        setIncludeLastPublished((Boolean)value);
      }
      break;

    case INCLUDE_LAST_AUTHOR:
      if (value == null) {
        unsetIncludeLastAuthor();
      } else {
        setIncludeLastAuthor((Boolean)value);
      }
      break;

    case INCLUDE_TEMPLATES:
      if (value == null) {
        unsetIncludeTemplates();
      } else {
        setIncludeTemplates((Boolean)value);
      }
      break;

    case INCLUDE_TAGS:
      if (value == null) {
        unsetIncludeTags();
      } else {
        setIncludeTags((Boolean)value);
      }
      break;

    case INCLUDE_COUNTS:
      if (value == null) {
        unsetIncludeCounts();
      } else {
        setIncludeCounts((Boolean)value);
      }
      break;

    case INCLUDE_LAST_MODIFIED:
      if (value == null) {
        unsetIncludeLastModified();
      } else {
        setIncludeLastModified((Boolean)value);
      }
      break;

    case INCLUDE_ATTRIBUTES:
      if (value == null) {
        unsetIncludeAttributes();
      } else {
        setIncludeAttributes((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case INCLUDE_TEAM:
      return isIncludeTeam();

    case INCLUDE_LAST_PUBLISHED:
      return isIncludeLastPublished();

    case INCLUDE_LAST_AUTHOR:
      return isIncludeLastAuthor();

    case INCLUDE_TEMPLATES:
      return isIncludeTemplates();

    case INCLUDE_TAGS:
      return isIncludeTags();

    case INCLUDE_COUNTS:
      return isIncludeCounts();

    case INCLUDE_LAST_MODIFIED:
      return isIncludeLastModified();

    case INCLUDE_ATTRIBUTES:
      return isIncludeAttributes();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case INCLUDE_TEAM:
      return isSetIncludeTeam();
    case INCLUDE_LAST_PUBLISHED:
      return isSetIncludeLastPublished();
    case INCLUDE_LAST_AUTHOR:
      return isSetIncludeLastAuthor();
    case INCLUDE_TEMPLATES:
      return isSetIncludeTemplates();
    case INCLUDE_TAGS:
      return isSetIncludeTags();
    case INCLUDE_COUNTS:
      return isSetIncludeCounts();
    case INCLUDE_LAST_MODIFIED:
      return isSetIncludeLastModified();
    case INCLUDE_ATTRIBUTES:
      return isSetIncludeAttributes();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TemplateSetSelectOpts)
      return this.equals((TemplateSetSelectOpts)that);
    return false;
  }

  public boolean equals(TemplateSetSelectOpts that) {
    if (that == null)
      return false;

    boolean this_present_includeTeam = true;
    boolean that_present_includeTeam = true;
    if (this_present_includeTeam || that_present_includeTeam) {
      if (!(this_present_includeTeam && that_present_includeTeam))
        return false;
      if (this.includeTeam != that.includeTeam)
        return false;
    }

    boolean this_present_includeLastPublished = true;
    boolean that_present_includeLastPublished = true;
    if (this_present_includeLastPublished || that_present_includeLastPublished) {
      if (!(this_present_includeLastPublished && that_present_includeLastPublished))
        return false;
      if (this.includeLastPublished != that.includeLastPublished)
        return false;
    }

    boolean this_present_includeLastAuthor = true;
    boolean that_present_includeLastAuthor = true;
    if (this_present_includeLastAuthor || that_present_includeLastAuthor) {
      if (!(this_present_includeLastAuthor && that_present_includeLastAuthor))
        return false;
      if (this.includeLastAuthor != that.includeLastAuthor)
        return false;
    }

    boolean this_present_includeTemplates = true;
    boolean that_present_includeTemplates = true;
    if (this_present_includeTemplates || that_present_includeTemplates) {
      if (!(this_present_includeTemplates && that_present_includeTemplates))
        return false;
      if (this.includeTemplates != that.includeTemplates)
        return false;
    }

    boolean this_present_includeTags = true;
    boolean that_present_includeTags = true;
    if (this_present_includeTags || that_present_includeTags) {
      if (!(this_present_includeTags && that_present_includeTags))
        return false;
      if (this.includeTags != that.includeTags)
        return false;
    }

    boolean this_present_includeCounts = true;
    boolean that_present_includeCounts = true;
    if (this_present_includeCounts || that_present_includeCounts) {
      if (!(this_present_includeCounts && that_present_includeCounts))
        return false;
      if (this.includeCounts != that.includeCounts)
        return false;
    }

    boolean this_present_includeLastModified = true;
    boolean that_present_includeLastModified = true;
    if (this_present_includeLastModified || that_present_includeLastModified) {
      if (!(this_present_includeLastModified && that_present_includeLastModified))
        return false;
      if (this.includeLastModified != that.includeLastModified)
        return false;
    }

    boolean this_present_includeAttributes = true;
    boolean that_present_includeAttributes = true;
    if (this_present_includeAttributes || that_present_includeAttributes) {
      if (!(this_present_includeAttributes && that_present_includeAttributes))
        return false;
      if (this.includeAttributes != that.includeAttributes)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_includeTeam = true;
    list.add(present_includeTeam);
    if (present_includeTeam)
      list.add(includeTeam);

    boolean present_includeLastPublished = true;
    list.add(present_includeLastPublished);
    if (present_includeLastPublished)
      list.add(includeLastPublished);

    boolean present_includeLastAuthor = true;
    list.add(present_includeLastAuthor);
    if (present_includeLastAuthor)
      list.add(includeLastAuthor);

    boolean present_includeTemplates = true;
    list.add(present_includeTemplates);
    if (present_includeTemplates)
      list.add(includeTemplates);

    boolean present_includeTags = true;
    list.add(present_includeTags);
    if (present_includeTags)
      list.add(includeTags);

    boolean present_includeCounts = true;
    list.add(present_includeCounts);
    if (present_includeCounts)
      list.add(includeCounts);

    boolean present_includeLastModified = true;
    list.add(present_includeLastModified);
    if (present_includeLastModified)
      list.add(includeLastModified);

    boolean present_includeAttributes = true;
    list.add(present_includeAttributes);
    if (present_includeAttributes)
      list.add(includeAttributes);

    return list.hashCode();
  }

  @Override
  public int compareTo(TemplateSetSelectOpts other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetIncludeTeam()).compareTo(other.isSetIncludeTeam());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIncludeTeam()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.includeTeam, other.includeTeam);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIncludeLastPublished()).compareTo(other.isSetIncludeLastPublished());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIncludeLastPublished()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.includeLastPublished, other.includeLastPublished);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIncludeLastAuthor()).compareTo(other.isSetIncludeLastAuthor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIncludeLastAuthor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.includeLastAuthor, other.includeLastAuthor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIncludeTemplates()).compareTo(other.isSetIncludeTemplates());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIncludeTemplates()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.includeTemplates, other.includeTemplates);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIncludeTags()).compareTo(other.isSetIncludeTags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIncludeTags()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.includeTags, other.includeTags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIncludeCounts()).compareTo(other.isSetIncludeCounts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIncludeCounts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.includeCounts, other.includeCounts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIncludeLastModified()).compareTo(other.isSetIncludeLastModified());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIncludeLastModified()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.includeLastModified, other.includeLastModified);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIncludeAttributes()).compareTo(other.isSetIncludeAttributes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIncludeAttributes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.includeAttributes, other.includeAttributes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TemplateSetSelectOpts(");
    boolean first = true;

    sb.append("includeTeam:");
    sb.append(this.includeTeam);
    first = false;
    if (!first) sb.append(", ");
    sb.append("includeLastPublished:");
    sb.append(this.includeLastPublished);
    first = false;
    if (!first) sb.append(", ");
    sb.append("includeLastAuthor:");
    sb.append(this.includeLastAuthor);
    first = false;
    if (!first) sb.append(", ");
    sb.append("includeTemplates:");
    sb.append(this.includeTemplates);
    first = false;
    if (!first) sb.append(", ");
    sb.append("includeTags:");
    sb.append(this.includeTags);
    first = false;
    if (!first) sb.append(", ");
    sb.append("includeCounts:");
    sb.append(this.includeCounts);
    first = false;
    if (!first) sb.append(", ");
    sb.append("includeLastModified:");
    sb.append(this.includeLastModified);
    first = false;
    if (!first) sb.append(", ");
    sb.append("includeAttributes:");
    sb.append(this.includeAttributes);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TemplateSetSelectOptsStandardSchemeFactory implements SchemeFactory {
    public TemplateSetSelectOptsStandardScheme getScheme() {
      return new TemplateSetSelectOptsStandardScheme();
    }
  }

  private static class TemplateSetSelectOptsStandardScheme extends StandardScheme<TemplateSetSelectOpts> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TemplateSetSelectOpts struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // INCLUDE_TEAM
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.includeTeam = iprot.readBool();
              struct.setIncludeTeamIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // INCLUDE_LAST_PUBLISHED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.includeLastPublished = iprot.readBool();
              struct.setIncludeLastPublishedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // INCLUDE_LAST_AUTHOR
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.includeLastAuthor = iprot.readBool();
              struct.setIncludeLastAuthorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // INCLUDE_TEMPLATES
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.includeTemplates = iprot.readBool();
              struct.setIncludeTemplatesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // INCLUDE_TAGS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.includeTags = iprot.readBool();
              struct.setIncludeTagsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // INCLUDE_COUNTS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.includeCounts = iprot.readBool();
              struct.setIncludeCountsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // INCLUDE_LAST_MODIFIED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.includeLastModified = iprot.readBool();
              struct.setIncludeLastModifiedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // INCLUDE_ATTRIBUTES
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.includeAttributes = iprot.readBool();
              struct.setIncludeAttributesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TemplateSetSelectOpts struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(INCLUDE_TEAM_FIELD_DESC);
      oprot.writeBool(struct.includeTeam);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INCLUDE_LAST_PUBLISHED_FIELD_DESC);
      oprot.writeBool(struct.includeLastPublished);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INCLUDE_LAST_AUTHOR_FIELD_DESC);
      oprot.writeBool(struct.includeLastAuthor);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INCLUDE_TEMPLATES_FIELD_DESC);
      oprot.writeBool(struct.includeTemplates);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INCLUDE_TAGS_FIELD_DESC);
      oprot.writeBool(struct.includeTags);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INCLUDE_COUNTS_FIELD_DESC);
      oprot.writeBool(struct.includeCounts);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INCLUDE_LAST_MODIFIED_FIELD_DESC);
      oprot.writeBool(struct.includeLastModified);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INCLUDE_ATTRIBUTES_FIELD_DESC);
      oprot.writeBool(struct.includeAttributes);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

}

