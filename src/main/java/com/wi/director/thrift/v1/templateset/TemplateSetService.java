/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wi.director.thrift.v1.templateset;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class TemplateSetService {

  public interface Iface {

    /**
     * Query a list of template sets
     * 
     * @param selectOpts
     * @param whereOpts
     * @param order
     */
    public TemplateSetQueryResult query(TemplateSetSelectOpts selectOpts, com.wi.director.thrift.v1.jobtemplate.TemplateWhereOpts whereOpts, List<com.wi.director.thrift.v1.jobtemplate.TemplateOrder> order) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException;

    /**
     * Get a template set
     * 
     * @param selectOpts
     * @param templateSetIds
     */
    public Map<String,TemplateSetFetchResult> fetch(TemplateSetSelectOpts selectOpts, List<String> templateSetIds) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException;

    public TemplateSet create(String teamId, TemplateSetParams params, List<com.wi.director.thrift.v1.abac.AbacAttribute> attributes) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException;

    public TemplateSet update(String templateSetId, int internalVersion, TemplateSetParams params) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException;

    public TemplateSet archive(String templateSetId) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException;

    public TemplateSet unarchive(String templateSetId) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException;

    public TemplateSet publish(String templateSetId) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException;

    /**
     * Get a published TemplateSet. <br><br>If publicVersion is 0, get the currently published version
     * 
     * @param templateSetId
     * @param publicVersion
     */
    public TemplateSet getPublicVersion(String templateSetId, int publicVersion) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException;

    /**
     * Enter review state, which means that editing will be locked until the review process ends; also generates
     * a new public version number which is returned. When configured, this will also call a registered webhook.
     * <br><br>
     * During review state, all operations which add or update content will fail with an error.
     * 
     * @param templateSetId
     */
    public int beginReview(String templateSetId) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException;

    /**
     * Exit review state, release editing lock; returns current public version number.
     * 
     * @param templateSetId
     */
    public int endReview(String templateSetId) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException;

    /**
     * Publish a specified version of the template set; must be called AFTER endReview
     * 
     * @param templateSetId
     * @param publicVersion
     */
    public TemplateSet publishVersion(String templateSetId, int publicVersion) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException;

    public TemplateSet addTemplate(String templateSetId, int internalVersion, String templateId, int position, boolean replace) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException;

    public TemplateSet addTemplateSet(String templateSetId, int internalVersion, String addedSetId, int position) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException;

    /**
     * Move a template to a different position in the template set
     * 
     * @param templateSetId
     * @param internalVersion
     * @param templateId
     * @param oldPosition
     * @param newPosition
     */
    public TemplateSet moveTemplate(String templateSetId, int internalVersion, String templateId, int oldPosition, int newPosition) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException;

    /**
     * Remove a template from the template set
     * 
     * @param templateSetId
     * @param internalVersion
     * @param templateId
     * @param position
     */
    public TemplateSet removeTemplate(String templateSetId, int internalVersion, String templateId, int position) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException;

    /**
     * Set full list of templates on a template set. This replaces the need for consecutive api calls when moving, removing, and adding  templates
     * 
     * @param templateSetId
     * @param internalVersion
     * @param movements
     */
    public TemplateSet setTemplateList(String templateSetId, int internalVersion, List<com.wi.director.thrift.v1.common.ListActions> movements) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException;

    /**
     * Get all of the tags and comments for a template set
     * 
     * @param templateSetId
     */
    public List<com.wi.director.thrift.v1.jobtemplate.TemplateTag> getTags(String templateSetId) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException;

    /**
     * Update the tags on a template set. additions are the tags and comments to be added to the template. Removals are the ids of the tags to be removed from the template.
     * 
     * @param templateSetId
     * @param added
     * @param removedTagIds
     */
    public void updateTags(String templateSetId, List<com.wi.director.thrift.v1.jobtemplate.TemplateTag> added, List<String> removedTagIds) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException;

    /**
     * Start editing the template set
     * Note that this lock is associated with the specific authToken used, not just
     * the user owning that token. The life of the lock is until releaseLock (which
     * should be called when editing is complete), forcible takeover, or implicitly
     * on logout.
     * 
     * Returns the new lock on success.
     * 
     * If the lock is already owned by another token, raises JobTemplateLockFailed with
     * previous lock information.
     * 
     * @param templateSetId
     */
    public com.wi.director.thrift.v1.jobtemplate.JobTemplateLock acquireLock(String templateSetId) throws com.wi.director.thrift.v1.common.SystemException, com.wi.director.thrift.v1.jobtemplate.JobTemplateLockFailed, org.apache.thrift.TException;

    /**
     * Start editing the template, forcibly taking over any existing lock.
     * Note that this lock is associated with the specific authToken used, not just
     * the user owning that token. The life of the lock is until releaseLock (which
     * should be called when editing is complete), forcible takeover, or implicitly
     * on logout.
     * 
     * Returns the new lock in the response structure. If the lock was owned by another
     * token, also returns details of previous lock. This method is intended to be called
     * after acquireLock fails and an explicit user response to forcibly take the lock.
     * 
     * WARNING: this could result in data loss if another user is editing.
     * 
     * @param templateSetId
     */
    public com.wi.director.thrift.v1.jobtemplate.ForceAcquireResponse forceAcquireLock(String templateSetId) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException;

    /**
     * NOHTML
     * 
     * @param templateSetId
     */
    public void releaseLock(String templateSetId) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException;

    /**
     * Query across both templates and template sets.
     * 
     * @param selectOpts
     * @param whereOpts
     * @param order
     */
    public TemplateUnionQueryResult queryCombined(TemplateUnionSelectOpts selectOpts, TemplateUnionWhereOpts whereOpts, List<com.wi.director.thrift.v1.jobtemplate.TemplateOrder> order) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException;

    /**
     * Only returns back templates and sets where either the version or the archivedAt timestamps don't match
     * To figure out if you have the latest versions of the templates inside the template sets, pass those
     * along in the templateArgs
     * 
     * @param selectOpts
     * @param templateArgs
     * @param templateSetArgs
     */
    public TemplateUnionFetchResult fetchUpdated(TemplateUnionSelectOpts selectOpts, List<VersionRef> templateArgs, List<VersionRef> templateSetArgs) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException;

    /**
     * Update a single attribute on a template set
     * return value will always be a list with a single attribute determined by which attribute was updated
     * 
     * param templateSetId: template set to update
     * param attributeId: the AttributeId of the team level attribute to be updated
     * param values: the new AttributeValues to associated with Attribute attributeId on template set templateSetId
     * param behave: determine the behaviour of the endpoint, merge or clobber. Default: clobber
     * 
     * @param templateSetId
     * @param attributeId
     * @param values
     * @param behave
     */
    public List<com.wi.director.thrift.v1.abac.AbacAttribute> updateAttribute(String templateSetId, String attributeId, List<com.wi.director.thrift.v1.abac.AbacAttributeValue> values, com.wi.director.thrift.v1.abac.AttributeUploadBehaviour behave) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public TemplateSetQueryResult query(TemplateSetSelectOpts selectOpts, com.wi.director.thrift.v1.jobtemplate.TemplateWhereOpts whereOpts, List<com.wi.director.thrift.v1.jobtemplate.TemplateOrder> order) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      send_query(selectOpts, whereOpts, order);
      return recv_query();
    }

    public void send_query(TemplateSetSelectOpts selectOpts, com.wi.director.thrift.v1.jobtemplate.TemplateWhereOpts whereOpts, List<com.wi.director.thrift.v1.jobtemplate.TemplateOrder> order) throws org.apache.thrift.TException
    {
      query_args args = new query_args();
      args.setSelectOpts(selectOpts);
      args.setWhereOpts(whereOpts);
      args.setOrder(order);
      sendBase("query", args);
    }

    public TemplateSetQueryResult recv_query() throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      query_result result = new query_result();
      receiveBase(result, "query");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "query failed: unknown result");
    }

    public Map<String,TemplateSetFetchResult> fetch(TemplateSetSelectOpts selectOpts, List<String> templateSetIds) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      send_fetch(selectOpts, templateSetIds);
      return recv_fetch();
    }

    public void send_fetch(TemplateSetSelectOpts selectOpts, List<String> templateSetIds) throws org.apache.thrift.TException
    {
      fetch_args args = new fetch_args();
      args.setSelectOpts(selectOpts);
      args.setTemplateSetIds(templateSetIds);
      sendBase("fetch", args);
    }

    public Map<String,TemplateSetFetchResult> recv_fetch() throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      fetch_result result = new fetch_result();
      receiveBase(result, "fetch");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "fetch failed: unknown result");
    }

    public TemplateSet create(String teamId, TemplateSetParams params, List<com.wi.director.thrift.v1.abac.AbacAttribute> attributes) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      send_create(teamId, params, attributes);
      return recv_create();
    }

    public void send_create(String teamId, TemplateSetParams params, List<com.wi.director.thrift.v1.abac.AbacAttribute> attributes) throws org.apache.thrift.TException
    {
      create_args args = new create_args();
      args.setTeamId(teamId);
      args.setParams(params);
      args.setAttributes(attributes);
      sendBase("create", args);
    }

    public TemplateSet recv_create() throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      create_result result = new create_result();
      receiveBase(result, "create");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "create failed: unknown result");
    }

    public TemplateSet update(String templateSetId, int internalVersion, TemplateSetParams params) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      send_update(templateSetId, internalVersion, params);
      return recv_update();
    }

    public void send_update(String templateSetId, int internalVersion, TemplateSetParams params) throws org.apache.thrift.TException
    {
      update_args args = new update_args();
      args.setTemplateSetId(templateSetId);
      args.setInternalVersion(internalVersion);
      args.setParams(params);
      sendBase("update", args);
    }

    public TemplateSet recv_update() throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      update_result result = new update_result();
      receiveBase(result, "update");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "update failed: unknown result");
    }

    public TemplateSet archive(String templateSetId) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      send_archive(templateSetId);
      return recv_archive();
    }

    public void send_archive(String templateSetId) throws org.apache.thrift.TException
    {
      archive_args args = new archive_args();
      args.setTemplateSetId(templateSetId);
      sendBase("archive", args);
    }

    public TemplateSet recv_archive() throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      archive_result result = new archive_result();
      receiveBase(result, "archive");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "archive failed: unknown result");
    }

    public TemplateSet unarchive(String templateSetId) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      send_unarchive(templateSetId);
      return recv_unarchive();
    }

    public void send_unarchive(String templateSetId) throws org.apache.thrift.TException
    {
      unarchive_args args = new unarchive_args();
      args.setTemplateSetId(templateSetId);
      sendBase("unarchive", args);
    }

    public TemplateSet recv_unarchive() throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      unarchive_result result = new unarchive_result();
      receiveBase(result, "unarchive");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "unarchive failed: unknown result");
    }

    public TemplateSet publish(String templateSetId) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      send_publish(templateSetId);
      return recv_publish();
    }

    public void send_publish(String templateSetId) throws org.apache.thrift.TException
    {
      publish_args args = new publish_args();
      args.setTemplateSetId(templateSetId);
      sendBase("publish", args);
    }

    public TemplateSet recv_publish() throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      publish_result result = new publish_result();
      receiveBase(result, "publish");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "publish failed: unknown result");
    }

    public TemplateSet getPublicVersion(String templateSetId, int publicVersion) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      send_getPublicVersion(templateSetId, publicVersion);
      return recv_getPublicVersion();
    }

    public void send_getPublicVersion(String templateSetId, int publicVersion) throws org.apache.thrift.TException
    {
      getPublicVersion_args args = new getPublicVersion_args();
      args.setTemplateSetId(templateSetId);
      args.setPublicVersion(publicVersion);
      sendBase("getPublicVersion", args);
    }

    public TemplateSet recv_getPublicVersion() throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      getPublicVersion_result result = new getPublicVersion_result();
      receiveBase(result, "getPublicVersion");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPublicVersion failed: unknown result");
    }

    public int beginReview(String templateSetId) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      send_beginReview(templateSetId);
      return recv_beginReview();
    }

    public void send_beginReview(String templateSetId) throws org.apache.thrift.TException
    {
      beginReview_args args = new beginReview_args();
      args.setTemplateSetId(templateSetId);
      sendBase("beginReview", args);
    }

    public int recv_beginReview() throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      beginReview_result result = new beginReview_result();
      receiveBase(result, "beginReview");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "beginReview failed: unknown result");
    }

    public int endReview(String templateSetId) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      send_endReview(templateSetId);
      return recv_endReview();
    }

    public void send_endReview(String templateSetId) throws org.apache.thrift.TException
    {
      endReview_args args = new endReview_args();
      args.setTemplateSetId(templateSetId);
      sendBase("endReview", args);
    }

    public int recv_endReview() throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      endReview_result result = new endReview_result();
      receiveBase(result, "endReview");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "endReview failed: unknown result");
    }

    public TemplateSet publishVersion(String templateSetId, int publicVersion) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      send_publishVersion(templateSetId, publicVersion);
      return recv_publishVersion();
    }

    public void send_publishVersion(String templateSetId, int publicVersion) throws org.apache.thrift.TException
    {
      publishVersion_args args = new publishVersion_args();
      args.setTemplateSetId(templateSetId);
      args.setPublicVersion(publicVersion);
      sendBase("publishVersion", args);
    }

    public TemplateSet recv_publishVersion() throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      publishVersion_result result = new publishVersion_result();
      receiveBase(result, "publishVersion");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "publishVersion failed: unknown result");
    }

    public TemplateSet addTemplate(String templateSetId, int internalVersion, String templateId, int position, boolean replace) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      send_addTemplate(templateSetId, internalVersion, templateId, position, replace);
      return recv_addTemplate();
    }

    public void send_addTemplate(String templateSetId, int internalVersion, String templateId, int position, boolean replace) throws org.apache.thrift.TException
    {
      addTemplate_args args = new addTemplate_args();
      args.setTemplateSetId(templateSetId);
      args.setInternalVersion(internalVersion);
      args.setTemplateId(templateId);
      args.setPosition(position);
      args.setReplace(replace);
      sendBase("addTemplate", args);
    }

    public TemplateSet recv_addTemplate() throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      addTemplate_result result = new addTemplate_result();
      receiveBase(result, "addTemplate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addTemplate failed: unknown result");
    }

    public TemplateSet addTemplateSet(String templateSetId, int internalVersion, String addedSetId, int position) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      send_addTemplateSet(templateSetId, internalVersion, addedSetId, position);
      return recv_addTemplateSet();
    }

    public void send_addTemplateSet(String templateSetId, int internalVersion, String addedSetId, int position) throws org.apache.thrift.TException
    {
      addTemplateSet_args args = new addTemplateSet_args();
      args.setTemplateSetId(templateSetId);
      args.setInternalVersion(internalVersion);
      args.setAddedSetId(addedSetId);
      args.setPosition(position);
      sendBase("addTemplateSet", args);
    }

    public TemplateSet recv_addTemplateSet() throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      addTemplateSet_result result = new addTemplateSet_result();
      receiveBase(result, "addTemplateSet");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addTemplateSet failed: unknown result");
    }

    public TemplateSet moveTemplate(String templateSetId, int internalVersion, String templateId, int oldPosition, int newPosition) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      send_moveTemplate(templateSetId, internalVersion, templateId, oldPosition, newPosition);
      return recv_moveTemplate();
    }

    public void send_moveTemplate(String templateSetId, int internalVersion, String templateId, int oldPosition, int newPosition) throws org.apache.thrift.TException
    {
      moveTemplate_args args = new moveTemplate_args();
      args.setTemplateSetId(templateSetId);
      args.setInternalVersion(internalVersion);
      args.setTemplateId(templateId);
      args.setOldPosition(oldPosition);
      args.setNewPosition(newPosition);
      sendBase("moveTemplate", args);
    }

    public TemplateSet recv_moveTemplate() throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      moveTemplate_result result = new moveTemplate_result();
      receiveBase(result, "moveTemplate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "moveTemplate failed: unknown result");
    }

    public TemplateSet removeTemplate(String templateSetId, int internalVersion, String templateId, int position) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      send_removeTemplate(templateSetId, internalVersion, templateId, position);
      return recv_removeTemplate();
    }

    public void send_removeTemplate(String templateSetId, int internalVersion, String templateId, int position) throws org.apache.thrift.TException
    {
      removeTemplate_args args = new removeTemplate_args();
      args.setTemplateSetId(templateSetId);
      args.setInternalVersion(internalVersion);
      args.setTemplateId(templateId);
      args.setPosition(position);
      sendBase("removeTemplate", args);
    }

    public TemplateSet recv_removeTemplate() throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      removeTemplate_result result = new removeTemplate_result();
      receiveBase(result, "removeTemplate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "removeTemplate failed: unknown result");
    }

    public TemplateSet setTemplateList(String templateSetId, int internalVersion, List<com.wi.director.thrift.v1.common.ListActions> movements) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      send_setTemplateList(templateSetId, internalVersion, movements);
      return recv_setTemplateList();
    }

    public void send_setTemplateList(String templateSetId, int internalVersion, List<com.wi.director.thrift.v1.common.ListActions> movements) throws org.apache.thrift.TException
    {
      setTemplateList_args args = new setTemplateList_args();
      args.setTemplateSetId(templateSetId);
      args.setInternalVersion(internalVersion);
      args.setMovements(movements);
      sendBase("setTemplateList", args);
    }

    public TemplateSet recv_setTemplateList() throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      setTemplateList_result result = new setTemplateList_result();
      receiveBase(result, "setTemplateList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "setTemplateList failed: unknown result");
    }

    public List<com.wi.director.thrift.v1.jobtemplate.TemplateTag> getTags(String templateSetId) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      send_getTags(templateSetId);
      return recv_getTags();
    }

    public void send_getTags(String templateSetId) throws org.apache.thrift.TException
    {
      getTags_args args = new getTags_args();
      args.setTemplateSetId(templateSetId);
      sendBase("getTags", args);
    }

    public List<com.wi.director.thrift.v1.jobtemplate.TemplateTag> recv_getTags() throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      getTags_result result = new getTags_result();
      receiveBase(result, "getTags");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTags failed: unknown result");
    }

    public void updateTags(String templateSetId, List<com.wi.director.thrift.v1.jobtemplate.TemplateTag> added, List<String> removedTagIds) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      send_updateTags(templateSetId, added, removedTagIds);
      recv_updateTags();
    }

    public void send_updateTags(String templateSetId, List<com.wi.director.thrift.v1.jobtemplate.TemplateTag> added, List<String> removedTagIds) throws org.apache.thrift.TException
    {
      updateTags_args args = new updateTags_args();
      args.setTemplateSetId(templateSetId);
      args.setAdded(added);
      args.setRemovedTagIds(removedTagIds);
      sendBase("updateTags", args);
    }

    public void recv_updateTags() throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      updateTags_result result = new updateTags_result();
      receiveBase(result, "updateTags");
      if (result.err != null) {
        throw result.err;
      }
      return;
    }

    public com.wi.director.thrift.v1.jobtemplate.JobTemplateLock acquireLock(String templateSetId) throws com.wi.director.thrift.v1.common.SystemException, com.wi.director.thrift.v1.jobtemplate.JobTemplateLockFailed, org.apache.thrift.TException
    {
      send_acquireLock(templateSetId);
      return recv_acquireLock();
    }

    public void send_acquireLock(String templateSetId) throws org.apache.thrift.TException
    {
      acquireLock_args args = new acquireLock_args();
      args.setTemplateSetId(templateSetId);
      sendBase("acquireLock", args);
    }

    public com.wi.director.thrift.v1.jobtemplate.JobTemplateLock recv_acquireLock() throws com.wi.director.thrift.v1.common.SystemException, com.wi.director.thrift.v1.jobtemplate.JobTemplateLockFailed, org.apache.thrift.TException
    {
      acquireLock_result result = new acquireLock_result();
      receiveBase(result, "acquireLock");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      if (result.failErr != null) {
        throw result.failErr;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "acquireLock failed: unknown result");
    }

    public com.wi.director.thrift.v1.jobtemplate.ForceAcquireResponse forceAcquireLock(String templateSetId) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      send_forceAcquireLock(templateSetId);
      return recv_forceAcquireLock();
    }

    public void send_forceAcquireLock(String templateSetId) throws org.apache.thrift.TException
    {
      forceAcquireLock_args args = new forceAcquireLock_args();
      args.setTemplateSetId(templateSetId);
      sendBase("forceAcquireLock", args);
    }

    public com.wi.director.thrift.v1.jobtemplate.ForceAcquireResponse recv_forceAcquireLock() throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      forceAcquireLock_result result = new forceAcquireLock_result();
      receiveBase(result, "forceAcquireLock");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "forceAcquireLock failed: unknown result");
    }

    public void releaseLock(String templateSetId) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      send_releaseLock(templateSetId);
      recv_releaseLock();
    }

    public void send_releaseLock(String templateSetId) throws org.apache.thrift.TException
    {
      releaseLock_args args = new releaseLock_args();
      args.setTemplateSetId(templateSetId);
      sendBase("releaseLock", args);
    }

    public void recv_releaseLock() throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      releaseLock_result result = new releaseLock_result();
      receiveBase(result, "releaseLock");
      if (result.err != null) {
        throw result.err;
      }
      return;
    }

    public TemplateUnionQueryResult queryCombined(TemplateUnionSelectOpts selectOpts, TemplateUnionWhereOpts whereOpts, List<com.wi.director.thrift.v1.jobtemplate.TemplateOrder> order) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      send_queryCombined(selectOpts, whereOpts, order);
      return recv_queryCombined();
    }

    public void send_queryCombined(TemplateUnionSelectOpts selectOpts, TemplateUnionWhereOpts whereOpts, List<com.wi.director.thrift.v1.jobtemplate.TemplateOrder> order) throws org.apache.thrift.TException
    {
      queryCombined_args args = new queryCombined_args();
      args.setSelectOpts(selectOpts);
      args.setWhereOpts(whereOpts);
      args.setOrder(order);
      sendBase("queryCombined", args);
    }

    public TemplateUnionQueryResult recv_queryCombined() throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      queryCombined_result result = new queryCombined_result();
      receiveBase(result, "queryCombined");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryCombined failed: unknown result");
    }

    public TemplateUnionFetchResult fetchUpdated(TemplateUnionSelectOpts selectOpts, List<VersionRef> templateArgs, List<VersionRef> templateSetArgs) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      send_fetchUpdated(selectOpts, templateArgs, templateSetArgs);
      return recv_fetchUpdated();
    }

    public void send_fetchUpdated(TemplateUnionSelectOpts selectOpts, List<VersionRef> templateArgs, List<VersionRef> templateSetArgs) throws org.apache.thrift.TException
    {
      fetchUpdated_args args = new fetchUpdated_args();
      args.setSelectOpts(selectOpts);
      args.setTemplateArgs(templateArgs);
      args.setTemplateSetArgs(templateSetArgs);
      sendBase("fetchUpdated", args);
    }

    public TemplateUnionFetchResult recv_fetchUpdated() throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      fetchUpdated_result result = new fetchUpdated_result();
      receiveBase(result, "fetchUpdated");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "fetchUpdated failed: unknown result");
    }

    public List<com.wi.director.thrift.v1.abac.AbacAttribute> updateAttribute(String templateSetId, String attributeId, List<com.wi.director.thrift.v1.abac.AbacAttributeValue> values, com.wi.director.thrift.v1.abac.AttributeUploadBehaviour behave) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      send_updateAttribute(templateSetId, attributeId, values, behave);
      return recv_updateAttribute();
    }

    public void send_updateAttribute(String templateSetId, String attributeId, List<com.wi.director.thrift.v1.abac.AbacAttributeValue> values, com.wi.director.thrift.v1.abac.AttributeUploadBehaviour behave) throws org.apache.thrift.TException
    {
      updateAttribute_args args = new updateAttribute_args();
      args.setTemplateSetId(templateSetId);
      args.setAttributeId(attributeId);
      args.setValues(values);
      args.setBehave(behave);
      sendBase("updateAttribute", args);
    }

    public List<com.wi.director.thrift.v1.abac.AbacAttribute> recv_updateAttribute() throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      updateAttribute_result result = new updateAttribute_result();
      receiveBase(result, "updateAttribute");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateAttribute failed: unknown result");
    }

  }
  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("query", new query());
      processMap.put("fetch", new fetch());
      processMap.put("create", new create());
      processMap.put("update", new update());
      processMap.put("archive", new archive());
      processMap.put("unarchive", new unarchive());
      processMap.put("publish", new publish());
      processMap.put("getPublicVersion", new getPublicVersion());
      processMap.put("beginReview", new beginReview());
      processMap.put("endReview", new endReview());
      processMap.put("publishVersion", new publishVersion());
      processMap.put("addTemplate", new addTemplate());
      processMap.put("addTemplateSet", new addTemplateSet());
      processMap.put("moveTemplate", new moveTemplate());
      processMap.put("removeTemplate", new removeTemplate());
      processMap.put("setTemplateList", new setTemplateList());
      processMap.put("getTags", new getTags());
      processMap.put("updateTags", new updateTags());
      processMap.put("acquireLock", new acquireLock());
      processMap.put("forceAcquireLock", new forceAcquireLock());
      processMap.put("releaseLock", new releaseLock());
      processMap.put("queryCombined", new queryCombined());
      processMap.put("fetchUpdated", new fetchUpdated());
      processMap.put("updateAttribute", new updateAttribute());
      return processMap;
    }

    public static class query<I extends Iface> extends org.apache.thrift.ProcessFunction<I, query_args> {
      public query() {
        super("query");
      }

      public query_args getEmptyArgsInstance() {
        return new query_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public query_result getResult(I iface, query_args args) throws org.apache.thrift.TException {
        query_result result = new query_result();
        try {
          result.success = iface.query(args.selectOpts, args.whereOpts, args.order);
        } catch (com.wi.director.thrift.v1.common.SystemException err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class fetch<I extends Iface> extends org.apache.thrift.ProcessFunction<I, fetch_args> {
      public fetch() {
        super("fetch");
      }

      public fetch_args getEmptyArgsInstance() {
        return new fetch_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public fetch_result getResult(I iface, fetch_args args) throws org.apache.thrift.TException {
        fetch_result result = new fetch_result();
        try {
          result.success = iface.fetch(args.selectOpts, args.templateSetIds);
        } catch (com.wi.director.thrift.v1.common.SystemException err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class create<I extends Iface> extends org.apache.thrift.ProcessFunction<I, create_args> {
      public create() {
        super("create");
      }

      public create_args getEmptyArgsInstance() {
        return new create_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public create_result getResult(I iface, create_args args) throws org.apache.thrift.TException {
        create_result result = new create_result();
        try {
          result.success = iface.create(args.teamId, args.params, args.attributes);
        } catch (com.wi.director.thrift.v1.common.SystemException err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class update<I extends Iface> extends org.apache.thrift.ProcessFunction<I, update_args> {
      public update() {
        super("update");
      }

      public update_args getEmptyArgsInstance() {
        return new update_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public update_result getResult(I iface, update_args args) throws org.apache.thrift.TException {
        update_result result = new update_result();
        try {
          result.success = iface.update(args.templateSetId, args.internalVersion, args.params);
        } catch (com.wi.director.thrift.v1.common.SystemException err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class archive<I extends Iface> extends org.apache.thrift.ProcessFunction<I, archive_args> {
      public archive() {
        super("archive");
      }

      public archive_args getEmptyArgsInstance() {
        return new archive_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public archive_result getResult(I iface, archive_args args) throws org.apache.thrift.TException {
        archive_result result = new archive_result();
        try {
          result.success = iface.archive(args.templateSetId);
        } catch (com.wi.director.thrift.v1.common.SystemException err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class unarchive<I extends Iface> extends org.apache.thrift.ProcessFunction<I, unarchive_args> {
      public unarchive() {
        super("unarchive");
      }

      public unarchive_args getEmptyArgsInstance() {
        return new unarchive_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public unarchive_result getResult(I iface, unarchive_args args) throws org.apache.thrift.TException {
        unarchive_result result = new unarchive_result();
        try {
          result.success = iface.unarchive(args.templateSetId);
        } catch (com.wi.director.thrift.v1.common.SystemException err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class publish<I extends Iface> extends org.apache.thrift.ProcessFunction<I, publish_args> {
      public publish() {
        super("publish");
      }

      public publish_args getEmptyArgsInstance() {
        return new publish_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public publish_result getResult(I iface, publish_args args) throws org.apache.thrift.TException {
        publish_result result = new publish_result();
        try {
          result.success = iface.publish(args.templateSetId);
        } catch (com.wi.director.thrift.v1.common.SystemException err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class getPublicVersion<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPublicVersion_args> {
      public getPublicVersion() {
        super("getPublicVersion");
      }

      public getPublicVersion_args getEmptyArgsInstance() {
        return new getPublicVersion_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getPublicVersion_result getResult(I iface, getPublicVersion_args args) throws org.apache.thrift.TException {
        getPublicVersion_result result = new getPublicVersion_result();
        try {
          result.success = iface.getPublicVersion(args.templateSetId, args.publicVersion);
        } catch (com.wi.director.thrift.v1.common.SystemException err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class beginReview<I extends Iface> extends org.apache.thrift.ProcessFunction<I, beginReview_args> {
      public beginReview() {
        super("beginReview");
      }

      public beginReview_args getEmptyArgsInstance() {
        return new beginReview_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public beginReview_result getResult(I iface, beginReview_args args) throws org.apache.thrift.TException {
        beginReview_result result = new beginReview_result();
        try {
          result.success = iface.beginReview(args.templateSetId);
          result.setSuccessIsSet(true);
        } catch (com.wi.director.thrift.v1.common.SystemException err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class endReview<I extends Iface> extends org.apache.thrift.ProcessFunction<I, endReview_args> {
      public endReview() {
        super("endReview");
      }

      public endReview_args getEmptyArgsInstance() {
        return new endReview_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public endReview_result getResult(I iface, endReview_args args) throws org.apache.thrift.TException {
        endReview_result result = new endReview_result();
        try {
          result.success = iface.endReview(args.templateSetId);
          result.setSuccessIsSet(true);
        } catch (com.wi.director.thrift.v1.common.SystemException err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class publishVersion<I extends Iface> extends org.apache.thrift.ProcessFunction<I, publishVersion_args> {
      public publishVersion() {
        super("publishVersion");
      }

      public publishVersion_args getEmptyArgsInstance() {
        return new publishVersion_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public publishVersion_result getResult(I iface, publishVersion_args args) throws org.apache.thrift.TException {
        publishVersion_result result = new publishVersion_result();
        try {
          result.success = iface.publishVersion(args.templateSetId, args.publicVersion);
        } catch (com.wi.director.thrift.v1.common.SystemException err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class addTemplate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addTemplate_args> {
      public addTemplate() {
        super("addTemplate");
      }

      public addTemplate_args getEmptyArgsInstance() {
        return new addTemplate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addTemplate_result getResult(I iface, addTemplate_args args) throws org.apache.thrift.TException {
        addTemplate_result result = new addTemplate_result();
        try {
          result.success = iface.addTemplate(args.templateSetId, args.internalVersion, args.templateId, args.position, args.replace);
        } catch (com.wi.director.thrift.v1.common.SystemException err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class addTemplateSet<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addTemplateSet_args> {
      public addTemplateSet() {
        super("addTemplateSet");
      }

      public addTemplateSet_args getEmptyArgsInstance() {
        return new addTemplateSet_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addTemplateSet_result getResult(I iface, addTemplateSet_args args) throws org.apache.thrift.TException {
        addTemplateSet_result result = new addTemplateSet_result();
        try {
          result.success = iface.addTemplateSet(args.templateSetId, args.internalVersion, args.addedSetId, args.position);
        } catch (com.wi.director.thrift.v1.common.SystemException err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class moveTemplate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, moveTemplate_args> {
      public moveTemplate() {
        super("moveTemplate");
      }

      public moveTemplate_args getEmptyArgsInstance() {
        return new moveTemplate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public moveTemplate_result getResult(I iface, moveTemplate_args args) throws org.apache.thrift.TException {
        moveTemplate_result result = new moveTemplate_result();
        try {
          result.success = iface.moveTemplate(args.templateSetId, args.internalVersion, args.templateId, args.oldPosition, args.newPosition);
        } catch (com.wi.director.thrift.v1.common.SystemException err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class removeTemplate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removeTemplate_args> {
      public removeTemplate() {
        super("removeTemplate");
      }

      public removeTemplate_args getEmptyArgsInstance() {
        return new removeTemplate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public removeTemplate_result getResult(I iface, removeTemplate_args args) throws org.apache.thrift.TException {
        removeTemplate_result result = new removeTemplate_result();
        try {
          result.success = iface.removeTemplate(args.templateSetId, args.internalVersion, args.templateId, args.position);
        } catch (com.wi.director.thrift.v1.common.SystemException err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class setTemplateList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setTemplateList_args> {
      public setTemplateList() {
        super("setTemplateList");
      }

      public setTemplateList_args getEmptyArgsInstance() {
        return new setTemplateList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setTemplateList_result getResult(I iface, setTemplateList_args args) throws org.apache.thrift.TException {
        setTemplateList_result result = new setTemplateList_result();
        try {
          result.success = iface.setTemplateList(args.templateSetId, args.internalVersion, args.movements);
        } catch (com.wi.director.thrift.v1.common.SystemException err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class getTags<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTags_args> {
      public getTags() {
        super("getTags");
      }

      public getTags_args getEmptyArgsInstance() {
        return new getTags_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTags_result getResult(I iface, getTags_args args) throws org.apache.thrift.TException {
        getTags_result result = new getTags_result();
        try {
          result.success = iface.getTags(args.templateSetId);
        } catch (com.wi.director.thrift.v1.common.SystemException err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class updateTags<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateTags_args> {
      public updateTags() {
        super("updateTags");
      }

      public updateTags_args getEmptyArgsInstance() {
        return new updateTags_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateTags_result getResult(I iface, updateTags_args args) throws org.apache.thrift.TException {
        updateTags_result result = new updateTags_result();
        try {
          iface.updateTags(args.templateSetId, args.added, args.removedTagIds);
        } catch (com.wi.director.thrift.v1.common.SystemException err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class acquireLock<I extends Iface> extends org.apache.thrift.ProcessFunction<I, acquireLock_args> {
      public acquireLock() {
        super("acquireLock");
      }

      public acquireLock_args getEmptyArgsInstance() {
        return new acquireLock_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public acquireLock_result getResult(I iface, acquireLock_args args) throws org.apache.thrift.TException {
        acquireLock_result result = new acquireLock_result();
        try {
          result.success = iface.acquireLock(args.templateSetId);
        } catch (com.wi.director.thrift.v1.common.SystemException err) {
          result.err = err;
        } catch (com.wi.director.thrift.v1.jobtemplate.JobTemplateLockFailed failErr) {
          result.failErr = failErr;
        }
        return result;
      }
    }

    public static class forceAcquireLock<I extends Iface> extends org.apache.thrift.ProcessFunction<I, forceAcquireLock_args> {
      public forceAcquireLock() {
        super("forceAcquireLock");
      }

      public forceAcquireLock_args getEmptyArgsInstance() {
        return new forceAcquireLock_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public forceAcquireLock_result getResult(I iface, forceAcquireLock_args args) throws org.apache.thrift.TException {
        forceAcquireLock_result result = new forceAcquireLock_result();
        try {
          result.success = iface.forceAcquireLock(args.templateSetId);
        } catch (com.wi.director.thrift.v1.common.SystemException err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class releaseLock<I extends Iface> extends org.apache.thrift.ProcessFunction<I, releaseLock_args> {
      public releaseLock() {
        super("releaseLock");
      }

      public releaseLock_args getEmptyArgsInstance() {
        return new releaseLock_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public releaseLock_result getResult(I iface, releaseLock_args args) throws org.apache.thrift.TException {
        releaseLock_result result = new releaseLock_result();
        try {
          iface.releaseLock(args.templateSetId);
        } catch (com.wi.director.thrift.v1.common.SystemException err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class queryCombined<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryCombined_args> {
      public queryCombined() {
        super("queryCombined");
      }

      public queryCombined_args getEmptyArgsInstance() {
        return new queryCombined_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryCombined_result getResult(I iface, queryCombined_args args) throws org.apache.thrift.TException {
        queryCombined_result result = new queryCombined_result();
        try {
          result.success = iface.queryCombined(args.selectOpts, args.whereOpts, args.order);
        } catch (com.wi.director.thrift.v1.common.SystemException err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class fetchUpdated<I extends Iface> extends org.apache.thrift.ProcessFunction<I, fetchUpdated_args> {
      public fetchUpdated() {
        super("fetchUpdated");
      }

      public fetchUpdated_args getEmptyArgsInstance() {
        return new fetchUpdated_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public fetchUpdated_result getResult(I iface, fetchUpdated_args args) throws org.apache.thrift.TException {
        fetchUpdated_result result = new fetchUpdated_result();
        try {
          result.success = iface.fetchUpdated(args.selectOpts, args.templateArgs, args.templateSetArgs);
        } catch (com.wi.director.thrift.v1.common.SystemException err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class updateAttribute<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateAttribute_args> {
      public updateAttribute() {
        super("updateAttribute");
      }

      public updateAttribute_args getEmptyArgsInstance() {
        return new updateAttribute_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateAttribute_result getResult(I iface, updateAttribute_args args) throws org.apache.thrift.TException {
        updateAttribute_result result = new updateAttribute_result();
        try {
          result.success = iface.updateAttribute(args.templateSetId, args.attributeId, args.values, args.behave);
        } catch (com.wi.director.thrift.v1.common.SystemException err) {
          result.err = err;
        }
        return result;
      }
    }

  }

  public static class query_args implements org.apache.thrift.TBase<query_args, query_args._Fields>, java.io.Serializable, Cloneable, Comparable<query_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("query_args");

    private static final org.apache.thrift.protocol.TField SELECT_OPTS_FIELD_DESC = new org.apache.thrift.protocol.TField("selectOpts", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField WHERE_OPTS_FIELD_DESC = new org.apache.thrift.protocol.TField("whereOpts", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("order", org.apache.thrift.protocol.TType.LIST, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new query_argsStandardSchemeFactory());
    }

    public TemplateSetSelectOpts selectOpts; // required
    public com.wi.director.thrift.v1.jobtemplate.TemplateWhereOpts whereOpts; // required
    public List<com.wi.director.thrift.v1.jobtemplate.TemplateOrder> order; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SELECT_OPTS((short)1, "selectOpts"),
      WHERE_OPTS((short)2, "whereOpts"),
      ORDER((short)3, "order");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SELECT_OPTS
            return SELECT_OPTS;
          case 2: // WHERE_OPTS
            return WHERE_OPTS;
          case 3: // ORDER
            return ORDER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SELECT_OPTS, new org.apache.thrift.meta_data.FieldMetaData("selectOpts", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TemplateSetSelectOpts.class)));
      tmpMap.put(_Fields.WHERE_OPTS, new org.apache.thrift.meta_data.FieldMetaData("whereOpts", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.jobtemplate.TemplateWhereOpts.class)));
      tmpMap.put(_Fields.ORDER, new org.apache.thrift.meta_data.FieldMetaData("order", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.jobtemplate.TemplateOrder.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(query_args.class, metaDataMap);
    }

    public query_args() {
    }

    public query_args(
      TemplateSetSelectOpts selectOpts,
      com.wi.director.thrift.v1.jobtemplate.TemplateWhereOpts whereOpts,
      List<com.wi.director.thrift.v1.jobtemplate.TemplateOrder> order)
    {
      this();
      this.selectOpts = selectOpts;
      this.whereOpts = whereOpts;
      this.order = order;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public query_args(query_args other) {
      if (other.isSetSelectOpts()) {
        this.selectOpts = new TemplateSetSelectOpts(other.selectOpts);
      }
      if (other.isSetWhereOpts()) {
        this.whereOpts = new com.wi.director.thrift.v1.jobtemplate.TemplateWhereOpts(other.whereOpts);
      }
      if (other.isSetOrder()) {
        List<com.wi.director.thrift.v1.jobtemplate.TemplateOrder> __this__order = new ArrayList<com.wi.director.thrift.v1.jobtemplate.TemplateOrder>(other.order.size());
        for (com.wi.director.thrift.v1.jobtemplate.TemplateOrder other_element : other.order) {
          __this__order.add(new com.wi.director.thrift.v1.jobtemplate.TemplateOrder(other_element));
        }
        this.order = __this__order;
      }
    }

    public query_args deepCopy() {
      return new query_args(this);
    }

    @Override
    public void clear() {
      this.selectOpts = null;
      this.whereOpts = null;
      this.order = null;
    }

    public TemplateSetSelectOpts getSelectOpts() {
      return this.selectOpts;
    }

    public query_args setSelectOpts(TemplateSetSelectOpts selectOpts) {
      this.selectOpts = selectOpts;
      return this;
    }

    public void unsetSelectOpts() {
      this.selectOpts = null;
    }

    /** Returns true if field selectOpts is set (has been assigned a value) and false otherwise */
    public boolean isSetSelectOpts() {
      return this.selectOpts != null;
    }

    public void setSelectOptsIsSet(boolean value) {
      if (!value) {
        this.selectOpts = null;
      }
    }

    public com.wi.director.thrift.v1.jobtemplate.TemplateWhereOpts getWhereOpts() {
      return this.whereOpts;
    }

    public query_args setWhereOpts(com.wi.director.thrift.v1.jobtemplate.TemplateWhereOpts whereOpts) {
      this.whereOpts = whereOpts;
      return this;
    }

    public void unsetWhereOpts() {
      this.whereOpts = null;
    }

    /** Returns true if field whereOpts is set (has been assigned a value) and false otherwise */
    public boolean isSetWhereOpts() {
      return this.whereOpts != null;
    }

    public void setWhereOptsIsSet(boolean value) {
      if (!value) {
        this.whereOpts = null;
      }
    }

    public int getOrderSize() {
      return (this.order == null) ? 0 : this.order.size();
    }

    public java.util.Iterator<com.wi.director.thrift.v1.jobtemplate.TemplateOrder> getOrderIterator() {
      return (this.order == null) ? null : this.order.iterator();
    }

    public void addToOrder(com.wi.director.thrift.v1.jobtemplate.TemplateOrder elem) {
      if (this.order == null) {
        this.order = new ArrayList<com.wi.director.thrift.v1.jobtemplate.TemplateOrder>();
      }
      this.order.add(elem);
    }

    public List<com.wi.director.thrift.v1.jobtemplate.TemplateOrder> getOrder() {
      return this.order;
    }

    public query_args setOrder(List<com.wi.director.thrift.v1.jobtemplate.TemplateOrder> order) {
      this.order = order;
      return this;
    }

    public void unsetOrder() {
      this.order = null;
    }

    /** Returns true if field order is set (has been assigned a value) and false otherwise */
    public boolean isSetOrder() {
      return this.order != null;
    }

    public void setOrderIsSet(boolean value) {
      if (!value) {
        this.order = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SELECT_OPTS:
        if (value == null) {
          unsetSelectOpts();
        } else {
          setSelectOpts((TemplateSetSelectOpts)value);
        }
        break;

      case WHERE_OPTS:
        if (value == null) {
          unsetWhereOpts();
        } else {
          setWhereOpts((com.wi.director.thrift.v1.jobtemplate.TemplateWhereOpts)value);
        }
        break;

      case ORDER:
        if (value == null) {
          unsetOrder();
        } else {
          setOrder((List<com.wi.director.thrift.v1.jobtemplate.TemplateOrder>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SELECT_OPTS:
        return getSelectOpts();

      case WHERE_OPTS:
        return getWhereOpts();

      case ORDER:
        return getOrder();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SELECT_OPTS:
        return isSetSelectOpts();
      case WHERE_OPTS:
        return isSetWhereOpts();
      case ORDER:
        return isSetOrder();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof query_args)
        return this.equals((query_args)that);
      return false;
    }

    public boolean equals(query_args that) {
      if (that == null)
        return false;

      boolean this_present_selectOpts = true && this.isSetSelectOpts();
      boolean that_present_selectOpts = true && that.isSetSelectOpts();
      if (this_present_selectOpts || that_present_selectOpts) {
        if (!(this_present_selectOpts && that_present_selectOpts))
          return false;
        if (!this.selectOpts.equals(that.selectOpts))
          return false;
      }

      boolean this_present_whereOpts = true && this.isSetWhereOpts();
      boolean that_present_whereOpts = true && that.isSetWhereOpts();
      if (this_present_whereOpts || that_present_whereOpts) {
        if (!(this_present_whereOpts && that_present_whereOpts))
          return false;
        if (!this.whereOpts.equals(that.whereOpts))
          return false;
      }

      boolean this_present_order = true && this.isSetOrder();
      boolean that_present_order = true && that.isSetOrder();
      if (this_present_order || that_present_order) {
        if (!(this_present_order && that_present_order))
          return false;
        if (!this.order.equals(that.order))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_selectOpts = true && (isSetSelectOpts());
      list.add(present_selectOpts);
      if (present_selectOpts)
        list.add(selectOpts);

      boolean present_whereOpts = true && (isSetWhereOpts());
      list.add(present_whereOpts);
      if (present_whereOpts)
        list.add(whereOpts);

      boolean present_order = true && (isSetOrder());
      list.add(present_order);
      if (present_order)
        list.add(order);

      return list.hashCode();
    }

    @Override
    public int compareTo(query_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSelectOpts()).compareTo(other.isSetSelectOpts());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSelectOpts()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.selectOpts, other.selectOpts);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetWhereOpts()).compareTo(other.isSetWhereOpts());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWhereOpts()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.whereOpts, other.whereOpts);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOrder()).compareTo(other.isSetOrder());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrder()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.order, other.order);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("query_args(");
      boolean first = true;

      sb.append("selectOpts:");
      if (this.selectOpts == null) {
        sb.append("null");
      } else {
        sb.append(this.selectOpts);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("whereOpts:");
      if (this.whereOpts == null) {
        sb.append("null");
      } else {
        sb.append(this.whereOpts);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("order:");
      if (this.order == null) {
        sb.append("null");
      } else {
        sb.append(this.order);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (selectOpts != null) {
        selectOpts.validate();
      }
      if (whereOpts != null) {
        whereOpts.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class query_argsStandardSchemeFactory implements SchemeFactory {
      public query_argsStandardScheme getScheme() {
        return new query_argsStandardScheme();
      }
    }

    private static class query_argsStandardScheme extends StandardScheme<query_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, query_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SELECT_OPTS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.selectOpts = new TemplateSetSelectOpts();
                struct.selectOpts.read(iprot);
                struct.setSelectOptsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // WHERE_OPTS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.whereOpts = new com.wi.director.thrift.v1.jobtemplate.TemplateWhereOpts();
                struct.whereOpts.read(iprot);
                struct.setWhereOptsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ORDER
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list30 = iprot.readListBegin();
                  struct.order = new ArrayList<com.wi.director.thrift.v1.jobtemplate.TemplateOrder>(_list30.size);
                  com.wi.director.thrift.v1.jobtemplate.TemplateOrder _elem31;
                  for (int _i32 = 0; _i32 < _list30.size; ++_i32)
                  {
                    _elem31 = new com.wi.director.thrift.v1.jobtemplate.TemplateOrder();
                    _elem31.read(iprot);
                    struct.order.add(_elem31);
                  }
                  iprot.readListEnd();
                }
                struct.setOrderIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, query_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.selectOpts != null) {
          oprot.writeFieldBegin(SELECT_OPTS_FIELD_DESC);
          struct.selectOpts.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.whereOpts != null) {
          oprot.writeFieldBegin(WHERE_OPTS_FIELD_DESC);
          struct.whereOpts.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.order != null) {
          oprot.writeFieldBegin(ORDER_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.order.size()));
            for (com.wi.director.thrift.v1.jobtemplate.TemplateOrder _iter33 : struct.order)
            {
              _iter33.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class query_result implements org.apache.thrift.TBase<query_result, query_result._Fields>, java.io.Serializable, Cloneable, Comparable<query_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("query_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new query_resultStandardSchemeFactory());
    }

    public TemplateSetQueryResult success; // required
    public com.wi.director.thrift.v1.common.SystemException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TemplateSetQueryResult.class)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(query_result.class, metaDataMap);
    }

    public query_result() {
    }

    public query_result(
      TemplateSetQueryResult success,
      com.wi.director.thrift.v1.common.SystemException err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public query_result(query_result other) {
      if (other.isSetSuccess()) {
        this.success = new TemplateSetQueryResult(other.success);
      }
      if (other.isSetErr()) {
        this.err = new com.wi.director.thrift.v1.common.SystemException(other.err);
      }
    }

    public query_result deepCopy() {
      return new query_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public TemplateSetQueryResult getSuccess() {
      return this.success;
    }

    public query_result setSuccess(TemplateSetQueryResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.wi.director.thrift.v1.common.SystemException getErr() {
      return this.err;
    }

    public query_result setErr(com.wi.director.thrift.v1.common.SystemException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TemplateSetQueryResult)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((com.wi.director.thrift.v1.common.SystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof query_result)
        return this.equals((query_result)that);
      return false;
    }

    public boolean equals(query_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(query_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("query_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class query_resultStandardSchemeFactory implements SchemeFactory {
      public query_resultStandardScheme getScheme() {
        return new query_resultStandardScheme();
      }
    }

    private static class query_resultStandardScheme extends StandardScheme<query_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, query_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TemplateSetQueryResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new com.wi.director.thrift.v1.common.SystemException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, query_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class fetch_args implements org.apache.thrift.TBase<fetch_args, fetch_args._Fields>, java.io.Serializable, Cloneable, Comparable<fetch_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fetch_args");

    private static final org.apache.thrift.protocol.TField SELECT_OPTS_FIELD_DESC = new org.apache.thrift.protocol.TField("selectOpts", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TEMPLATE_SET_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("templateSetIds", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new fetch_argsStandardSchemeFactory());
    }

    public TemplateSetSelectOpts selectOpts; // required
    public List<String> templateSetIds; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SELECT_OPTS((short)1, "selectOpts"),
      TEMPLATE_SET_IDS((short)2, "templateSetIds");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SELECT_OPTS
            return SELECT_OPTS;
          case 2: // TEMPLATE_SET_IDS
            return TEMPLATE_SET_IDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SELECT_OPTS, new org.apache.thrift.meta_data.FieldMetaData("selectOpts", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TemplateSetSelectOpts.class)));
      tmpMap.put(_Fields.TEMPLATE_SET_IDS, new org.apache.thrift.meta_data.FieldMetaData("templateSetIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fetch_args.class, metaDataMap);
    }

    public fetch_args() {
    }

    public fetch_args(
      TemplateSetSelectOpts selectOpts,
      List<String> templateSetIds)
    {
      this();
      this.selectOpts = selectOpts;
      this.templateSetIds = templateSetIds;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fetch_args(fetch_args other) {
      if (other.isSetSelectOpts()) {
        this.selectOpts = new TemplateSetSelectOpts(other.selectOpts);
      }
      if (other.isSetTemplateSetIds()) {
        List<String> __this__templateSetIds = new ArrayList<String>(other.templateSetIds);
        this.templateSetIds = __this__templateSetIds;
      }
    }

    public fetch_args deepCopy() {
      return new fetch_args(this);
    }

    @Override
    public void clear() {
      this.selectOpts = null;
      this.templateSetIds = null;
    }

    public TemplateSetSelectOpts getSelectOpts() {
      return this.selectOpts;
    }

    public fetch_args setSelectOpts(TemplateSetSelectOpts selectOpts) {
      this.selectOpts = selectOpts;
      return this;
    }

    public void unsetSelectOpts() {
      this.selectOpts = null;
    }

    /** Returns true if field selectOpts is set (has been assigned a value) and false otherwise */
    public boolean isSetSelectOpts() {
      return this.selectOpts != null;
    }

    public void setSelectOptsIsSet(boolean value) {
      if (!value) {
        this.selectOpts = null;
      }
    }

    public int getTemplateSetIdsSize() {
      return (this.templateSetIds == null) ? 0 : this.templateSetIds.size();
    }

    public java.util.Iterator<String> getTemplateSetIdsIterator() {
      return (this.templateSetIds == null) ? null : this.templateSetIds.iterator();
    }

    public void addToTemplateSetIds(String elem) {
      if (this.templateSetIds == null) {
        this.templateSetIds = new ArrayList<String>();
      }
      this.templateSetIds.add(elem);
    }

    public List<String> getTemplateSetIds() {
      return this.templateSetIds;
    }

    public fetch_args setTemplateSetIds(List<String> templateSetIds) {
      this.templateSetIds = templateSetIds;
      return this;
    }

    public void unsetTemplateSetIds() {
      this.templateSetIds = null;
    }

    /** Returns true if field templateSetIds is set (has been assigned a value) and false otherwise */
    public boolean isSetTemplateSetIds() {
      return this.templateSetIds != null;
    }

    public void setTemplateSetIdsIsSet(boolean value) {
      if (!value) {
        this.templateSetIds = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SELECT_OPTS:
        if (value == null) {
          unsetSelectOpts();
        } else {
          setSelectOpts((TemplateSetSelectOpts)value);
        }
        break;

      case TEMPLATE_SET_IDS:
        if (value == null) {
          unsetTemplateSetIds();
        } else {
          setTemplateSetIds((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SELECT_OPTS:
        return getSelectOpts();

      case TEMPLATE_SET_IDS:
        return getTemplateSetIds();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SELECT_OPTS:
        return isSetSelectOpts();
      case TEMPLATE_SET_IDS:
        return isSetTemplateSetIds();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof fetch_args)
        return this.equals((fetch_args)that);
      return false;
    }

    public boolean equals(fetch_args that) {
      if (that == null)
        return false;

      boolean this_present_selectOpts = true && this.isSetSelectOpts();
      boolean that_present_selectOpts = true && that.isSetSelectOpts();
      if (this_present_selectOpts || that_present_selectOpts) {
        if (!(this_present_selectOpts && that_present_selectOpts))
          return false;
        if (!this.selectOpts.equals(that.selectOpts))
          return false;
      }

      boolean this_present_templateSetIds = true && this.isSetTemplateSetIds();
      boolean that_present_templateSetIds = true && that.isSetTemplateSetIds();
      if (this_present_templateSetIds || that_present_templateSetIds) {
        if (!(this_present_templateSetIds && that_present_templateSetIds))
          return false;
        if (!this.templateSetIds.equals(that.templateSetIds))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_selectOpts = true && (isSetSelectOpts());
      list.add(present_selectOpts);
      if (present_selectOpts)
        list.add(selectOpts);

      boolean present_templateSetIds = true && (isSetTemplateSetIds());
      list.add(present_templateSetIds);
      if (present_templateSetIds)
        list.add(templateSetIds);

      return list.hashCode();
    }

    @Override
    public int compareTo(fetch_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSelectOpts()).compareTo(other.isSetSelectOpts());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSelectOpts()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.selectOpts, other.selectOpts);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTemplateSetIds()).compareTo(other.isSetTemplateSetIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTemplateSetIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.templateSetIds, other.templateSetIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("fetch_args(");
      boolean first = true;

      sb.append("selectOpts:");
      if (this.selectOpts == null) {
        sb.append("null");
      } else {
        sb.append(this.selectOpts);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("templateSetIds:");
      if (this.templateSetIds == null) {
        sb.append("null");
      } else {
        sb.append(this.templateSetIds);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (selectOpts != null) {
        selectOpts.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fetch_argsStandardSchemeFactory implements SchemeFactory {
      public fetch_argsStandardScheme getScheme() {
        return new fetch_argsStandardScheme();
      }
    }

    private static class fetch_argsStandardScheme extends StandardScheme<fetch_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fetch_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SELECT_OPTS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.selectOpts = new TemplateSetSelectOpts();
                struct.selectOpts.read(iprot);
                struct.setSelectOptsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TEMPLATE_SET_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list34 = iprot.readListBegin();
                  struct.templateSetIds = new ArrayList<String>(_list34.size);
                  String _elem35;
                  for (int _i36 = 0; _i36 < _list34.size; ++_i36)
                  {
                    _elem35 = iprot.readString();
                    struct.templateSetIds.add(_elem35);
                  }
                  iprot.readListEnd();
                }
                struct.setTemplateSetIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fetch_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.selectOpts != null) {
          oprot.writeFieldBegin(SELECT_OPTS_FIELD_DESC);
          struct.selectOpts.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.templateSetIds != null) {
          oprot.writeFieldBegin(TEMPLATE_SET_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.templateSetIds.size()));
            for (String _iter37 : struct.templateSetIds)
            {
              oprot.writeString(_iter37);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class fetch_result implements org.apache.thrift.TBase<fetch_result, fetch_result._Fields>, java.io.Serializable, Cloneable, Comparable<fetch_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fetch_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new fetch_resultStandardSchemeFactory());
    }

    public Map<String,TemplateSetFetchResult> success; // required
    public com.wi.director.thrift.v1.common.SystemException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TemplateSetFetchResult.class))));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fetch_result.class, metaDataMap);
    }

    public fetch_result() {
    }

    public fetch_result(
      Map<String,TemplateSetFetchResult> success,
      com.wi.director.thrift.v1.common.SystemException err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fetch_result(fetch_result other) {
      if (other.isSetSuccess()) {
        Map<String,TemplateSetFetchResult> __this__success = new HashMap<String,TemplateSetFetchResult>(other.success.size());
        for (Map.Entry<String, TemplateSetFetchResult> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          TemplateSetFetchResult other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          TemplateSetFetchResult __this__success_copy_value = new TemplateSetFetchResult(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
      if (other.isSetErr()) {
        this.err = new com.wi.director.thrift.v1.common.SystemException(other.err);
      }
    }

    public fetch_result deepCopy() {
      return new fetch_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, TemplateSetFetchResult val) {
      if (this.success == null) {
        this.success = new HashMap<String,TemplateSetFetchResult>();
      }
      this.success.put(key, val);
    }

    public Map<String,TemplateSetFetchResult> getSuccess() {
      return this.success;
    }

    public fetch_result setSuccess(Map<String,TemplateSetFetchResult> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.wi.director.thrift.v1.common.SystemException getErr() {
      return this.err;
    }

    public fetch_result setErr(com.wi.director.thrift.v1.common.SystemException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,TemplateSetFetchResult>)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((com.wi.director.thrift.v1.common.SystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof fetch_result)
        return this.equals((fetch_result)that);
      return false;
    }

    public boolean equals(fetch_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(fetch_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("fetch_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fetch_resultStandardSchemeFactory implements SchemeFactory {
      public fetch_resultStandardScheme getScheme() {
        return new fetch_resultStandardScheme();
      }
    }

    private static class fetch_resultStandardScheme extends StandardScheme<fetch_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fetch_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map38 = iprot.readMapBegin();
                  struct.success = new HashMap<String,TemplateSetFetchResult>(2*_map38.size);
                  String _key39;
                  TemplateSetFetchResult _val40;
                  for (int _i41 = 0; _i41 < _map38.size; ++_i41)
                  {
                    _key39 = iprot.readString();
                    _val40 = new TemplateSetFetchResult();
                    _val40.read(iprot);
                    struct.success.put(_key39, _val40);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new com.wi.director.thrift.v1.common.SystemException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fetch_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Map.Entry<String, TemplateSetFetchResult> _iter42 : struct.success.entrySet())
            {
              oprot.writeString(_iter42.getKey());
              _iter42.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class create_args implements org.apache.thrift.TBase<create_args, create_args._Fields>, java.io.Serializable, Cloneable, Comparable<create_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("create_args");

    private static final org.apache.thrift.protocol.TField TEAM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("teamId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ATTRIBUTES_FIELD_DESC = new org.apache.thrift.protocol.TField("attributes", org.apache.thrift.protocol.TType.LIST, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new create_argsStandardSchemeFactory());
    }

    public String teamId; // required
    public TemplateSetParams params; // required
    public List<com.wi.director.thrift.v1.abac.AbacAttribute> attributes; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TEAM_ID((short)1, "teamId"),
      PARAMS((short)2, "params"),
      ATTRIBUTES((short)3, "attributes");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TEAM_ID
            return TEAM_ID;
          case 2: // PARAMS
            return PARAMS;
          case 3: // ATTRIBUTES
            return ATTRIBUTES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TEAM_ID, new org.apache.thrift.meta_data.FieldMetaData("teamId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TemplateSetParams.class)));
      tmpMap.put(_Fields.ATTRIBUTES, new org.apache.thrift.meta_data.FieldMetaData("attributes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.abac.AbacAttribute.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(create_args.class, metaDataMap);
    }

    public create_args() {
    }

    public create_args(
      String teamId,
      TemplateSetParams params,
      List<com.wi.director.thrift.v1.abac.AbacAttribute> attributes)
    {
      this();
      this.teamId = teamId;
      this.params = params;
      this.attributes = attributes;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public create_args(create_args other) {
      if (other.isSetTeamId()) {
        this.teamId = other.teamId;
      }
      if (other.isSetParams()) {
        this.params = new TemplateSetParams(other.params);
      }
      if (other.isSetAttributes()) {
        List<com.wi.director.thrift.v1.abac.AbacAttribute> __this__attributes = new ArrayList<com.wi.director.thrift.v1.abac.AbacAttribute>(other.attributes.size());
        for (com.wi.director.thrift.v1.abac.AbacAttribute other_element : other.attributes) {
          __this__attributes.add(new com.wi.director.thrift.v1.abac.AbacAttribute(other_element));
        }
        this.attributes = __this__attributes;
      }
    }

    public create_args deepCopy() {
      return new create_args(this);
    }

    @Override
    public void clear() {
      this.teamId = null;
      this.params = null;
      this.attributes = null;
    }

    public String getTeamId() {
      return this.teamId;
    }

    public create_args setTeamId(String teamId) {
      this.teamId = teamId;
      return this;
    }

    public void unsetTeamId() {
      this.teamId = null;
    }

    /** Returns true if field teamId is set (has been assigned a value) and false otherwise */
    public boolean isSetTeamId() {
      return this.teamId != null;
    }

    public void setTeamIdIsSet(boolean value) {
      if (!value) {
        this.teamId = null;
      }
    }

    public TemplateSetParams getParams() {
      return this.params;
    }

    public create_args setParams(TemplateSetParams params) {
      this.params = params;
      return this;
    }

    public void unsetParams() {
      this.params = null;
    }

    /** Returns true if field params is set (has been assigned a value) and false otherwise */
    public boolean isSetParams() {
      return this.params != null;
    }

    public void setParamsIsSet(boolean value) {
      if (!value) {
        this.params = null;
      }
    }

    public int getAttributesSize() {
      return (this.attributes == null) ? 0 : this.attributes.size();
    }

    public java.util.Iterator<com.wi.director.thrift.v1.abac.AbacAttribute> getAttributesIterator() {
      return (this.attributes == null) ? null : this.attributes.iterator();
    }

    public void addToAttributes(com.wi.director.thrift.v1.abac.AbacAttribute elem) {
      if (this.attributes == null) {
        this.attributes = new ArrayList<com.wi.director.thrift.v1.abac.AbacAttribute>();
      }
      this.attributes.add(elem);
    }

    public List<com.wi.director.thrift.v1.abac.AbacAttribute> getAttributes() {
      return this.attributes;
    }

    public create_args setAttributes(List<com.wi.director.thrift.v1.abac.AbacAttribute> attributes) {
      this.attributes = attributes;
      return this;
    }

    public void unsetAttributes() {
      this.attributes = null;
    }

    /** Returns true if field attributes is set (has been assigned a value) and false otherwise */
    public boolean isSetAttributes() {
      return this.attributes != null;
    }

    public void setAttributesIsSet(boolean value) {
      if (!value) {
        this.attributes = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TEAM_ID:
        if (value == null) {
          unsetTeamId();
        } else {
          setTeamId((String)value);
        }
        break;

      case PARAMS:
        if (value == null) {
          unsetParams();
        } else {
          setParams((TemplateSetParams)value);
        }
        break;

      case ATTRIBUTES:
        if (value == null) {
          unsetAttributes();
        } else {
          setAttributes((List<com.wi.director.thrift.v1.abac.AbacAttribute>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TEAM_ID:
        return getTeamId();

      case PARAMS:
        return getParams();

      case ATTRIBUTES:
        return getAttributes();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TEAM_ID:
        return isSetTeamId();
      case PARAMS:
        return isSetParams();
      case ATTRIBUTES:
        return isSetAttributes();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof create_args)
        return this.equals((create_args)that);
      return false;
    }

    public boolean equals(create_args that) {
      if (that == null)
        return false;

      boolean this_present_teamId = true && this.isSetTeamId();
      boolean that_present_teamId = true && that.isSetTeamId();
      if (this_present_teamId || that_present_teamId) {
        if (!(this_present_teamId && that_present_teamId))
          return false;
        if (!this.teamId.equals(that.teamId))
          return false;
      }

      boolean this_present_params = true && this.isSetParams();
      boolean that_present_params = true && that.isSetParams();
      if (this_present_params || that_present_params) {
        if (!(this_present_params && that_present_params))
          return false;
        if (!this.params.equals(that.params))
          return false;
      }

      boolean this_present_attributes = true && this.isSetAttributes();
      boolean that_present_attributes = true && that.isSetAttributes();
      if (this_present_attributes || that_present_attributes) {
        if (!(this_present_attributes && that_present_attributes))
          return false;
        if (!this.attributes.equals(that.attributes))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_teamId = true && (isSetTeamId());
      list.add(present_teamId);
      if (present_teamId)
        list.add(teamId);

      boolean present_params = true && (isSetParams());
      list.add(present_params);
      if (present_params)
        list.add(params);

      boolean present_attributes = true && (isSetAttributes());
      list.add(present_attributes);
      if (present_attributes)
        list.add(attributes);

      return list.hashCode();
    }

    @Override
    public int compareTo(create_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTeamId()).compareTo(other.isSetTeamId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTeamId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teamId, other.teamId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParams()).compareTo(other.isSetParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, other.params);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAttributes()).compareTo(other.isSetAttributes());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttributes()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attributes, other.attributes);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("create_args(");
      boolean first = true;

      sb.append("teamId:");
      if (this.teamId == null) {
        sb.append("null");
      } else {
        sb.append(this.teamId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("params:");
      if (this.params == null) {
        sb.append("null");
      } else {
        sb.append(this.params);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("attributes:");
      if (this.attributes == null) {
        sb.append("null");
      } else {
        sb.append(this.attributes);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (params != null) {
        params.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class create_argsStandardSchemeFactory implements SchemeFactory {
      public create_argsStandardScheme getScheme() {
        return new create_argsStandardScheme();
      }
    }

    private static class create_argsStandardScheme extends StandardScheme<create_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, create_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TEAM_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.teamId = iprot.readString();
                struct.setTeamIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.params = new TemplateSetParams();
                struct.params.read(iprot);
                struct.setParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ATTRIBUTES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list43 = iprot.readListBegin();
                  struct.attributes = new ArrayList<com.wi.director.thrift.v1.abac.AbacAttribute>(_list43.size);
                  com.wi.director.thrift.v1.abac.AbacAttribute _elem44;
                  for (int _i45 = 0; _i45 < _list43.size; ++_i45)
                  {
                    _elem44 = new com.wi.director.thrift.v1.abac.AbacAttribute();
                    _elem44.read(iprot);
                    struct.attributes.add(_elem44);
                  }
                  iprot.readListEnd();
                }
                struct.setAttributesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, create_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.teamId != null) {
          oprot.writeFieldBegin(TEAM_ID_FIELD_DESC);
          oprot.writeString(struct.teamId);
          oprot.writeFieldEnd();
        }
        if (struct.params != null) {
          oprot.writeFieldBegin(PARAMS_FIELD_DESC);
          struct.params.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.attributes != null) {
          oprot.writeFieldBegin(ATTRIBUTES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.attributes.size()));
            for (com.wi.director.thrift.v1.abac.AbacAttribute _iter46 : struct.attributes)
            {
              _iter46.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class create_result implements org.apache.thrift.TBase<create_result, create_result._Fields>, java.io.Serializable, Cloneable, Comparable<create_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("create_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new create_resultStandardSchemeFactory());
    }

    public TemplateSet success; // required
    public com.wi.director.thrift.v1.common.SystemException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TemplateSet.class)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(create_result.class, metaDataMap);
    }

    public create_result() {
    }

    public create_result(
      TemplateSet success,
      com.wi.director.thrift.v1.common.SystemException err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public create_result(create_result other) {
      if (other.isSetSuccess()) {
        this.success = new TemplateSet(other.success);
      }
      if (other.isSetErr()) {
        this.err = new com.wi.director.thrift.v1.common.SystemException(other.err);
      }
    }

    public create_result deepCopy() {
      return new create_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public TemplateSet getSuccess() {
      return this.success;
    }

    public create_result setSuccess(TemplateSet success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.wi.director.thrift.v1.common.SystemException getErr() {
      return this.err;
    }

    public create_result setErr(com.wi.director.thrift.v1.common.SystemException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TemplateSet)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((com.wi.director.thrift.v1.common.SystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof create_result)
        return this.equals((create_result)that);
      return false;
    }

    public boolean equals(create_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(create_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("create_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class create_resultStandardSchemeFactory implements SchemeFactory {
      public create_resultStandardScheme getScheme() {
        return new create_resultStandardScheme();
      }
    }

    private static class create_resultStandardScheme extends StandardScheme<create_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, create_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TemplateSet();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new com.wi.director.thrift.v1.common.SystemException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, create_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class update_args implements org.apache.thrift.TBase<update_args, update_args._Fields>, java.io.Serializable, Cloneable, Comparable<update_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("update_args");

    private static final org.apache.thrift.protocol.TField TEMPLATE_SET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("templateSetId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField INTERNAL_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("internalVersion", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new update_argsStandardSchemeFactory());
    }

    public String templateSetId; // required
    public int internalVersion; // required
    public TemplateSetParams params; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TEMPLATE_SET_ID((short)1, "templateSetId"),
      INTERNAL_VERSION((short)2, "internalVersion"),
      PARAMS((short)3, "params");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TEMPLATE_SET_ID
            return TEMPLATE_SET_ID;
          case 2: // INTERNAL_VERSION
            return INTERNAL_VERSION;
          case 3: // PARAMS
            return PARAMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __INTERNALVERSION_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TEMPLATE_SET_ID, new org.apache.thrift.meta_data.FieldMetaData("templateSetId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.INTERNAL_VERSION, new org.apache.thrift.meta_data.FieldMetaData("internalVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TemplateSetParams.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(update_args.class, metaDataMap);
    }

    public update_args() {
    }

    public update_args(
      String templateSetId,
      int internalVersion,
      TemplateSetParams params)
    {
      this();
      this.templateSetId = templateSetId;
      this.internalVersion = internalVersion;
      setInternalVersionIsSet(true);
      this.params = params;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public update_args(update_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetTemplateSetId()) {
        this.templateSetId = other.templateSetId;
      }
      this.internalVersion = other.internalVersion;
      if (other.isSetParams()) {
        this.params = new TemplateSetParams(other.params);
      }
    }

    public update_args deepCopy() {
      return new update_args(this);
    }

    @Override
    public void clear() {
      this.templateSetId = null;
      setInternalVersionIsSet(false);
      this.internalVersion = 0;
      this.params = null;
    }

    public String getTemplateSetId() {
      return this.templateSetId;
    }

    public update_args setTemplateSetId(String templateSetId) {
      this.templateSetId = templateSetId;
      return this;
    }

    public void unsetTemplateSetId() {
      this.templateSetId = null;
    }

    /** Returns true if field templateSetId is set (has been assigned a value) and false otherwise */
    public boolean isSetTemplateSetId() {
      return this.templateSetId != null;
    }

    public void setTemplateSetIdIsSet(boolean value) {
      if (!value) {
        this.templateSetId = null;
      }
    }

    public int getInternalVersion() {
      return this.internalVersion;
    }

    public update_args setInternalVersion(int internalVersion) {
      this.internalVersion = internalVersion;
      setInternalVersionIsSet(true);
      return this;
    }

    public void unsetInternalVersion() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INTERNALVERSION_ISSET_ID);
    }

    /** Returns true if field internalVersion is set (has been assigned a value) and false otherwise */
    public boolean isSetInternalVersion() {
      return EncodingUtils.testBit(__isset_bitfield, __INTERNALVERSION_ISSET_ID);
    }

    public void setInternalVersionIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INTERNALVERSION_ISSET_ID, value);
    }

    public TemplateSetParams getParams() {
      return this.params;
    }

    public update_args setParams(TemplateSetParams params) {
      this.params = params;
      return this;
    }

    public void unsetParams() {
      this.params = null;
    }

    /** Returns true if field params is set (has been assigned a value) and false otherwise */
    public boolean isSetParams() {
      return this.params != null;
    }

    public void setParamsIsSet(boolean value) {
      if (!value) {
        this.params = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TEMPLATE_SET_ID:
        if (value == null) {
          unsetTemplateSetId();
        } else {
          setTemplateSetId((String)value);
        }
        break;

      case INTERNAL_VERSION:
        if (value == null) {
          unsetInternalVersion();
        } else {
          setInternalVersion((Integer)value);
        }
        break;

      case PARAMS:
        if (value == null) {
          unsetParams();
        } else {
          setParams((TemplateSetParams)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TEMPLATE_SET_ID:
        return getTemplateSetId();

      case INTERNAL_VERSION:
        return getInternalVersion();

      case PARAMS:
        return getParams();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TEMPLATE_SET_ID:
        return isSetTemplateSetId();
      case INTERNAL_VERSION:
        return isSetInternalVersion();
      case PARAMS:
        return isSetParams();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof update_args)
        return this.equals((update_args)that);
      return false;
    }

    public boolean equals(update_args that) {
      if (that == null)
        return false;

      boolean this_present_templateSetId = true && this.isSetTemplateSetId();
      boolean that_present_templateSetId = true && that.isSetTemplateSetId();
      if (this_present_templateSetId || that_present_templateSetId) {
        if (!(this_present_templateSetId && that_present_templateSetId))
          return false;
        if (!this.templateSetId.equals(that.templateSetId))
          return false;
      }

      boolean this_present_internalVersion = true;
      boolean that_present_internalVersion = true;
      if (this_present_internalVersion || that_present_internalVersion) {
        if (!(this_present_internalVersion && that_present_internalVersion))
          return false;
        if (this.internalVersion != that.internalVersion)
          return false;
      }

      boolean this_present_params = true && this.isSetParams();
      boolean that_present_params = true && that.isSetParams();
      if (this_present_params || that_present_params) {
        if (!(this_present_params && that_present_params))
          return false;
        if (!this.params.equals(that.params))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_templateSetId = true && (isSetTemplateSetId());
      list.add(present_templateSetId);
      if (present_templateSetId)
        list.add(templateSetId);

      boolean present_internalVersion = true;
      list.add(present_internalVersion);
      if (present_internalVersion)
        list.add(internalVersion);

      boolean present_params = true && (isSetParams());
      list.add(present_params);
      if (present_params)
        list.add(params);

      return list.hashCode();
    }

    @Override
    public int compareTo(update_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTemplateSetId()).compareTo(other.isSetTemplateSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTemplateSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.templateSetId, other.templateSetId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetInternalVersion()).compareTo(other.isSetInternalVersion());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInternalVersion()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.internalVersion, other.internalVersion);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParams()).compareTo(other.isSetParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, other.params);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("update_args(");
      boolean first = true;

      sb.append("templateSetId:");
      if (this.templateSetId == null) {
        sb.append("null");
      } else {
        sb.append(this.templateSetId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("internalVersion:");
      sb.append(this.internalVersion);
      first = false;
      if (!first) sb.append(", ");
      sb.append("params:");
      if (this.params == null) {
        sb.append("null");
      } else {
        sb.append(this.params);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (params != null) {
        params.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class update_argsStandardSchemeFactory implements SchemeFactory {
      public update_argsStandardScheme getScheme() {
        return new update_argsStandardScheme();
      }
    }

    private static class update_argsStandardScheme extends StandardScheme<update_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, update_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TEMPLATE_SET_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.templateSetId = iprot.readString();
                struct.setTemplateSetIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // INTERNAL_VERSION
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.internalVersion = iprot.readI32();
                struct.setInternalVersionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.params = new TemplateSetParams();
                struct.params.read(iprot);
                struct.setParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, update_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.templateSetId != null) {
          oprot.writeFieldBegin(TEMPLATE_SET_ID_FIELD_DESC);
          oprot.writeString(struct.templateSetId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(INTERNAL_VERSION_FIELD_DESC);
        oprot.writeI32(struct.internalVersion);
        oprot.writeFieldEnd();
        if (struct.params != null) {
          oprot.writeFieldBegin(PARAMS_FIELD_DESC);
          struct.params.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class update_result implements org.apache.thrift.TBase<update_result, update_result._Fields>, java.io.Serializable, Cloneable, Comparable<update_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("update_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new update_resultStandardSchemeFactory());
    }

    public TemplateSet success; // required
    public com.wi.director.thrift.v1.common.SystemException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TemplateSet.class)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(update_result.class, metaDataMap);
    }

    public update_result() {
    }

    public update_result(
      TemplateSet success,
      com.wi.director.thrift.v1.common.SystemException err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public update_result(update_result other) {
      if (other.isSetSuccess()) {
        this.success = new TemplateSet(other.success);
      }
      if (other.isSetErr()) {
        this.err = new com.wi.director.thrift.v1.common.SystemException(other.err);
      }
    }

    public update_result deepCopy() {
      return new update_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public TemplateSet getSuccess() {
      return this.success;
    }

    public update_result setSuccess(TemplateSet success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.wi.director.thrift.v1.common.SystemException getErr() {
      return this.err;
    }

    public update_result setErr(com.wi.director.thrift.v1.common.SystemException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TemplateSet)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((com.wi.director.thrift.v1.common.SystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof update_result)
        return this.equals((update_result)that);
      return false;
    }

    public boolean equals(update_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(update_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("update_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class update_resultStandardSchemeFactory implements SchemeFactory {
      public update_resultStandardScheme getScheme() {
        return new update_resultStandardScheme();
      }
    }

    private static class update_resultStandardScheme extends StandardScheme<update_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, update_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TemplateSet();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new com.wi.director.thrift.v1.common.SystemException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, update_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class archive_args implements org.apache.thrift.TBase<archive_args, archive_args._Fields>, java.io.Serializable, Cloneable, Comparable<archive_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("archive_args");

    private static final org.apache.thrift.protocol.TField TEMPLATE_SET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("templateSetId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new archive_argsStandardSchemeFactory());
    }

    public String templateSetId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TEMPLATE_SET_ID((short)1, "templateSetId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TEMPLATE_SET_ID
            return TEMPLATE_SET_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TEMPLATE_SET_ID, new org.apache.thrift.meta_data.FieldMetaData("templateSetId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(archive_args.class, metaDataMap);
    }

    public archive_args() {
    }

    public archive_args(
      String templateSetId)
    {
      this();
      this.templateSetId = templateSetId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public archive_args(archive_args other) {
      if (other.isSetTemplateSetId()) {
        this.templateSetId = other.templateSetId;
      }
    }

    public archive_args deepCopy() {
      return new archive_args(this);
    }

    @Override
    public void clear() {
      this.templateSetId = null;
    }

    public String getTemplateSetId() {
      return this.templateSetId;
    }

    public archive_args setTemplateSetId(String templateSetId) {
      this.templateSetId = templateSetId;
      return this;
    }

    public void unsetTemplateSetId() {
      this.templateSetId = null;
    }

    /** Returns true if field templateSetId is set (has been assigned a value) and false otherwise */
    public boolean isSetTemplateSetId() {
      return this.templateSetId != null;
    }

    public void setTemplateSetIdIsSet(boolean value) {
      if (!value) {
        this.templateSetId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TEMPLATE_SET_ID:
        if (value == null) {
          unsetTemplateSetId();
        } else {
          setTemplateSetId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TEMPLATE_SET_ID:
        return getTemplateSetId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TEMPLATE_SET_ID:
        return isSetTemplateSetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof archive_args)
        return this.equals((archive_args)that);
      return false;
    }

    public boolean equals(archive_args that) {
      if (that == null)
        return false;

      boolean this_present_templateSetId = true && this.isSetTemplateSetId();
      boolean that_present_templateSetId = true && that.isSetTemplateSetId();
      if (this_present_templateSetId || that_present_templateSetId) {
        if (!(this_present_templateSetId && that_present_templateSetId))
          return false;
        if (!this.templateSetId.equals(that.templateSetId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_templateSetId = true && (isSetTemplateSetId());
      list.add(present_templateSetId);
      if (present_templateSetId)
        list.add(templateSetId);

      return list.hashCode();
    }

    @Override
    public int compareTo(archive_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTemplateSetId()).compareTo(other.isSetTemplateSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTemplateSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.templateSetId, other.templateSetId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("archive_args(");
      boolean first = true;

      sb.append("templateSetId:");
      if (this.templateSetId == null) {
        sb.append("null");
      } else {
        sb.append(this.templateSetId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class archive_argsStandardSchemeFactory implements SchemeFactory {
      public archive_argsStandardScheme getScheme() {
        return new archive_argsStandardScheme();
      }
    }

    private static class archive_argsStandardScheme extends StandardScheme<archive_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, archive_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TEMPLATE_SET_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.templateSetId = iprot.readString();
                struct.setTemplateSetIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, archive_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.templateSetId != null) {
          oprot.writeFieldBegin(TEMPLATE_SET_ID_FIELD_DESC);
          oprot.writeString(struct.templateSetId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class archive_result implements org.apache.thrift.TBase<archive_result, archive_result._Fields>, java.io.Serializable, Cloneable, Comparable<archive_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("archive_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new archive_resultStandardSchemeFactory());
    }

    public TemplateSet success; // required
    public com.wi.director.thrift.v1.common.SystemException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TemplateSet.class)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(archive_result.class, metaDataMap);
    }

    public archive_result() {
    }

    public archive_result(
      TemplateSet success,
      com.wi.director.thrift.v1.common.SystemException err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public archive_result(archive_result other) {
      if (other.isSetSuccess()) {
        this.success = new TemplateSet(other.success);
      }
      if (other.isSetErr()) {
        this.err = new com.wi.director.thrift.v1.common.SystemException(other.err);
      }
    }

    public archive_result deepCopy() {
      return new archive_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public TemplateSet getSuccess() {
      return this.success;
    }

    public archive_result setSuccess(TemplateSet success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.wi.director.thrift.v1.common.SystemException getErr() {
      return this.err;
    }

    public archive_result setErr(com.wi.director.thrift.v1.common.SystemException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TemplateSet)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((com.wi.director.thrift.v1.common.SystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof archive_result)
        return this.equals((archive_result)that);
      return false;
    }

    public boolean equals(archive_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(archive_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("archive_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class archive_resultStandardSchemeFactory implements SchemeFactory {
      public archive_resultStandardScheme getScheme() {
        return new archive_resultStandardScheme();
      }
    }

    private static class archive_resultStandardScheme extends StandardScheme<archive_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, archive_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TemplateSet();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new com.wi.director.thrift.v1.common.SystemException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, archive_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class unarchive_args implements org.apache.thrift.TBase<unarchive_args, unarchive_args._Fields>, java.io.Serializable, Cloneable, Comparable<unarchive_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("unarchive_args");

    private static final org.apache.thrift.protocol.TField TEMPLATE_SET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("templateSetId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new unarchive_argsStandardSchemeFactory());
    }

    public String templateSetId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TEMPLATE_SET_ID((short)1, "templateSetId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TEMPLATE_SET_ID
            return TEMPLATE_SET_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TEMPLATE_SET_ID, new org.apache.thrift.meta_data.FieldMetaData("templateSetId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(unarchive_args.class, metaDataMap);
    }

    public unarchive_args() {
    }

    public unarchive_args(
      String templateSetId)
    {
      this();
      this.templateSetId = templateSetId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public unarchive_args(unarchive_args other) {
      if (other.isSetTemplateSetId()) {
        this.templateSetId = other.templateSetId;
      }
    }

    public unarchive_args deepCopy() {
      return new unarchive_args(this);
    }

    @Override
    public void clear() {
      this.templateSetId = null;
    }

    public String getTemplateSetId() {
      return this.templateSetId;
    }

    public unarchive_args setTemplateSetId(String templateSetId) {
      this.templateSetId = templateSetId;
      return this;
    }

    public void unsetTemplateSetId() {
      this.templateSetId = null;
    }

    /** Returns true if field templateSetId is set (has been assigned a value) and false otherwise */
    public boolean isSetTemplateSetId() {
      return this.templateSetId != null;
    }

    public void setTemplateSetIdIsSet(boolean value) {
      if (!value) {
        this.templateSetId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TEMPLATE_SET_ID:
        if (value == null) {
          unsetTemplateSetId();
        } else {
          setTemplateSetId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TEMPLATE_SET_ID:
        return getTemplateSetId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TEMPLATE_SET_ID:
        return isSetTemplateSetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof unarchive_args)
        return this.equals((unarchive_args)that);
      return false;
    }

    public boolean equals(unarchive_args that) {
      if (that == null)
        return false;

      boolean this_present_templateSetId = true && this.isSetTemplateSetId();
      boolean that_present_templateSetId = true && that.isSetTemplateSetId();
      if (this_present_templateSetId || that_present_templateSetId) {
        if (!(this_present_templateSetId && that_present_templateSetId))
          return false;
        if (!this.templateSetId.equals(that.templateSetId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_templateSetId = true && (isSetTemplateSetId());
      list.add(present_templateSetId);
      if (present_templateSetId)
        list.add(templateSetId);

      return list.hashCode();
    }

    @Override
    public int compareTo(unarchive_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTemplateSetId()).compareTo(other.isSetTemplateSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTemplateSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.templateSetId, other.templateSetId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("unarchive_args(");
      boolean first = true;

      sb.append("templateSetId:");
      if (this.templateSetId == null) {
        sb.append("null");
      } else {
        sb.append(this.templateSetId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class unarchive_argsStandardSchemeFactory implements SchemeFactory {
      public unarchive_argsStandardScheme getScheme() {
        return new unarchive_argsStandardScheme();
      }
    }

    private static class unarchive_argsStandardScheme extends StandardScheme<unarchive_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, unarchive_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TEMPLATE_SET_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.templateSetId = iprot.readString();
                struct.setTemplateSetIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, unarchive_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.templateSetId != null) {
          oprot.writeFieldBegin(TEMPLATE_SET_ID_FIELD_DESC);
          oprot.writeString(struct.templateSetId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class unarchive_result implements org.apache.thrift.TBase<unarchive_result, unarchive_result._Fields>, java.io.Serializable, Cloneable, Comparable<unarchive_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("unarchive_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new unarchive_resultStandardSchemeFactory());
    }

    public TemplateSet success; // required
    public com.wi.director.thrift.v1.common.SystemException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TemplateSet.class)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(unarchive_result.class, metaDataMap);
    }

    public unarchive_result() {
    }

    public unarchive_result(
      TemplateSet success,
      com.wi.director.thrift.v1.common.SystemException err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public unarchive_result(unarchive_result other) {
      if (other.isSetSuccess()) {
        this.success = new TemplateSet(other.success);
      }
      if (other.isSetErr()) {
        this.err = new com.wi.director.thrift.v1.common.SystemException(other.err);
      }
    }

    public unarchive_result deepCopy() {
      return new unarchive_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public TemplateSet getSuccess() {
      return this.success;
    }

    public unarchive_result setSuccess(TemplateSet success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.wi.director.thrift.v1.common.SystemException getErr() {
      return this.err;
    }

    public unarchive_result setErr(com.wi.director.thrift.v1.common.SystemException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TemplateSet)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((com.wi.director.thrift.v1.common.SystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof unarchive_result)
        return this.equals((unarchive_result)that);
      return false;
    }

    public boolean equals(unarchive_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(unarchive_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("unarchive_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class unarchive_resultStandardSchemeFactory implements SchemeFactory {
      public unarchive_resultStandardScheme getScheme() {
        return new unarchive_resultStandardScheme();
      }
    }

    private static class unarchive_resultStandardScheme extends StandardScheme<unarchive_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, unarchive_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TemplateSet();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new com.wi.director.thrift.v1.common.SystemException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, unarchive_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class publish_args implements org.apache.thrift.TBase<publish_args, publish_args._Fields>, java.io.Serializable, Cloneable, Comparable<publish_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("publish_args");

    private static final org.apache.thrift.protocol.TField TEMPLATE_SET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("templateSetId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new publish_argsStandardSchemeFactory());
    }

    public String templateSetId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TEMPLATE_SET_ID((short)1, "templateSetId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TEMPLATE_SET_ID
            return TEMPLATE_SET_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TEMPLATE_SET_ID, new org.apache.thrift.meta_data.FieldMetaData("templateSetId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(publish_args.class, metaDataMap);
    }

    public publish_args() {
    }

    public publish_args(
      String templateSetId)
    {
      this();
      this.templateSetId = templateSetId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public publish_args(publish_args other) {
      if (other.isSetTemplateSetId()) {
        this.templateSetId = other.templateSetId;
      }
    }

    public publish_args deepCopy() {
      return new publish_args(this);
    }

    @Override
    public void clear() {
      this.templateSetId = null;
    }

    public String getTemplateSetId() {
      return this.templateSetId;
    }

    public publish_args setTemplateSetId(String templateSetId) {
      this.templateSetId = templateSetId;
      return this;
    }

    public void unsetTemplateSetId() {
      this.templateSetId = null;
    }

    /** Returns true if field templateSetId is set (has been assigned a value) and false otherwise */
    public boolean isSetTemplateSetId() {
      return this.templateSetId != null;
    }

    public void setTemplateSetIdIsSet(boolean value) {
      if (!value) {
        this.templateSetId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TEMPLATE_SET_ID:
        if (value == null) {
          unsetTemplateSetId();
        } else {
          setTemplateSetId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TEMPLATE_SET_ID:
        return getTemplateSetId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TEMPLATE_SET_ID:
        return isSetTemplateSetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof publish_args)
        return this.equals((publish_args)that);
      return false;
    }

    public boolean equals(publish_args that) {
      if (that == null)
        return false;

      boolean this_present_templateSetId = true && this.isSetTemplateSetId();
      boolean that_present_templateSetId = true && that.isSetTemplateSetId();
      if (this_present_templateSetId || that_present_templateSetId) {
        if (!(this_present_templateSetId && that_present_templateSetId))
          return false;
        if (!this.templateSetId.equals(that.templateSetId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_templateSetId = true && (isSetTemplateSetId());
      list.add(present_templateSetId);
      if (present_templateSetId)
        list.add(templateSetId);

      return list.hashCode();
    }

    @Override
    public int compareTo(publish_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTemplateSetId()).compareTo(other.isSetTemplateSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTemplateSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.templateSetId, other.templateSetId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("publish_args(");
      boolean first = true;

      sb.append("templateSetId:");
      if (this.templateSetId == null) {
        sb.append("null");
      } else {
        sb.append(this.templateSetId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class publish_argsStandardSchemeFactory implements SchemeFactory {
      public publish_argsStandardScheme getScheme() {
        return new publish_argsStandardScheme();
      }
    }

    private static class publish_argsStandardScheme extends StandardScheme<publish_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, publish_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TEMPLATE_SET_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.templateSetId = iprot.readString();
                struct.setTemplateSetIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, publish_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.templateSetId != null) {
          oprot.writeFieldBegin(TEMPLATE_SET_ID_FIELD_DESC);
          oprot.writeString(struct.templateSetId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class publish_result implements org.apache.thrift.TBase<publish_result, publish_result._Fields>, java.io.Serializable, Cloneable, Comparable<publish_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("publish_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new publish_resultStandardSchemeFactory());
    }

    public TemplateSet success; // required
    public com.wi.director.thrift.v1.common.SystemException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TemplateSet.class)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(publish_result.class, metaDataMap);
    }

    public publish_result() {
    }

    public publish_result(
      TemplateSet success,
      com.wi.director.thrift.v1.common.SystemException err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public publish_result(publish_result other) {
      if (other.isSetSuccess()) {
        this.success = new TemplateSet(other.success);
      }
      if (other.isSetErr()) {
        this.err = new com.wi.director.thrift.v1.common.SystemException(other.err);
      }
    }

    public publish_result deepCopy() {
      return new publish_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public TemplateSet getSuccess() {
      return this.success;
    }

    public publish_result setSuccess(TemplateSet success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.wi.director.thrift.v1.common.SystemException getErr() {
      return this.err;
    }

    public publish_result setErr(com.wi.director.thrift.v1.common.SystemException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TemplateSet)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((com.wi.director.thrift.v1.common.SystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof publish_result)
        return this.equals((publish_result)that);
      return false;
    }

    public boolean equals(publish_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(publish_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("publish_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class publish_resultStandardSchemeFactory implements SchemeFactory {
      public publish_resultStandardScheme getScheme() {
        return new publish_resultStandardScheme();
      }
    }

    private static class publish_resultStandardScheme extends StandardScheme<publish_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, publish_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TemplateSet();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new com.wi.director.thrift.v1.common.SystemException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, publish_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class getPublicVersion_args implements org.apache.thrift.TBase<getPublicVersion_args, getPublicVersion_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPublicVersion_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPublicVersion_args");

    private static final org.apache.thrift.protocol.TField TEMPLATE_SET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("templateSetId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PUBLIC_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("publicVersion", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPublicVersion_argsStandardSchemeFactory());
    }

    public String templateSetId; // required
    public int publicVersion; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TEMPLATE_SET_ID((short)1, "templateSetId"),
      PUBLIC_VERSION((short)2, "publicVersion");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TEMPLATE_SET_ID
            return TEMPLATE_SET_ID;
          case 2: // PUBLIC_VERSION
            return PUBLIC_VERSION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PUBLICVERSION_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TEMPLATE_SET_ID, new org.apache.thrift.meta_data.FieldMetaData("templateSetId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PUBLIC_VERSION, new org.apache.thrift.meta_data.FieldMetaData("publicVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPublicVersion_args.class, metaDataMap);
    }

    public getPublicVersion_args() {
    }

    public getPublicVersion_args(
      String templateSetId,
      int publicVersion)
    {
      this();
      this.templateSetId = templateSetId;
      this.publicVersion = publicVersion;
      setPublicVersionIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPublicVersion_args(getPublicVersion_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetTemplateSetId()) {
        this.templateSetId = other.templateSetId;
      }
      this.publicVersion = other.publicVersion;
    }

    public getPublicVersion_args deepCopy() {
      return new getPublicVersion_args(this);
    }

    @Override
    public void clear() {
      this.templateSetId = null;
      setPublicVersionIsSet(false);
      this.publicVersion = 0;
    }

    public String getTemplateSetId() {
      return this.templateSetId;
    }

    public getPublicVersion_args setTemplateSetId(String templateSetId) {
      this.templateSetId = templateSetId;
      return this;
    }

    public void unsetTemplateSetId() {
      this.templateSetId = null;
    }

    /** Returns true if field templateSetId is set (has been assigned a value) and false otherwise */
    public boolean isSetTemplateSetId() {
      return this.templateSetId != null;
    }

    public void setTemplateSetIdIsSet(boolean value) {
      if (!value) {
        this.templateSetId = null;
      }
    }

    public int getPublicVersion() {
      return this.publicVersion;
    }

    public getPublicVersion_args setPublicVersion(int publicVersion) {
      this.publicVersion = publicVersion;
      setPublicVersionIsSet(true);
      return this;
    }

    public void unsetPublicVersion() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PUBLICVERSION_ISSET_ID);
    }

    /** Returns true if field publicVersion is set (has been assigned a value) and false otherwise */
    public boolean isSetPublicVersion() {
      return EncodingUtils.testBit(__isset_bitfield, __PUBLICVERSION_ISSET_ID);
    }

    public void setPublicVersionIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PUBLICVERSION_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TEMPLATE_SET_ID:
        if (value == null) {
          unsetTemplateSetId();
        } else {
          setTemplateSetId((String)value);
        }
        break;

      case PUBLIC_VERSION:
        if (value == null) {
          unsetPublicVersion();
        } else {
          setPublicVersion((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TEMPLATE_SET_ID:
        return getTemplateSetId();

      case PUBLIC_VERSION:
        return getPublicVersion();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TEMPLATE_SET_ID:
        return isSetTemplateSetId();
      case PUBLIC_VERSION:
        return isSetPublicVersion();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPublicVersion_args)
        return this.equals((getPublicVersion_args)that);
      return false;
    }

    public boolean equals(getPublicVersion_args that) {
      if (that == null)
        return false;

      boolean this_present_templateSetId = true && this.isSetTemplateSetId();
      boolean that_present_templateSetId = true && that.isSetTemplateSetId();
      if (this_present_templateSetId || that_present_templateSetId) {
        if (!(this_present_templateSetId && that_present_templateSetId))
          return false;
        if (!this.templateSetId.equals(that.templateSetId))
          return false;
      }

      boolean this_present_publicVersion = true;
      boolean that_present_publicVersion = true;
      if (this_present_publicVersion || that_present_publicVersion) {
        if (!(this_present_publicVersion && that_present_publicVersion))
          return false;
        if (this.publicVersion != that.publicVersion)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_templateSetId = true && (isSetTemplateSetId());
      list.add(present_templateSetId);
      if (present_templateSetId)
        list.add(templateSetId);

      boolean present_publicVersion = true;
      list.add(present_publicVersion);
      if (present_publicVersion)
        list.add(publicVersion);

      return list.hashCode();
    }

    @Override
    public int compareTo(getPublicVersion_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTemplateSetId()).compareTo(other.isSetTemplateSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTemplateSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.templateSetId, other.templateSetId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPublicVersion()).compareTo(other.isSetPublicVersion());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPublicVersion()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.publicVersion, other.publicVersion);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPublicVersion_args(");
      boolean first = true;

      sb.append("templateSetId:");
      if (this.templateSetId == null) {
        sb.append("null");
      } else {
        sb.append(this.templateSetId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("publicVersion:");
      sb.append(this.publicVersion);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPublicVersion_argsStandardSchemeFactory implements SchemeFactory {
      public getPublicVersion_argsStandardScheme getScheme() {
        return new getPublicVersion_argsStandardScheme();
      }
    }

    private static class getPublicVersion_argsStandardScheme extends StandardScheme<getPublicVersion_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPublicVersion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TEMPLATE_SET_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.templateSetId = iprot.readString();
                struct.setTemplateSetIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PUBLIC_VERSION
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.publicVersion = iprot.readI32();
                struct.setPublicVersionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPublicVersion_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.templateSetId != null) {
          oprot.writeFieldBegin(TEMPLATE_SET_ID_FIELD_DESC);
          oprot.writeString(struct.templateSetId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PUBLIC_VERSION_FIELD_DESC);
        oprot.writeI32(struct.publicVersion);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class getPublicVersion_result implements org.apache.thrift.TBase<getPublicVersion_result, getPublicVersion_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPublicVersion_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPublicVersion_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPublicVersion_resultStandardSchemeFactory());
    }

    public TemplateSet success; // required
    public com.wi.director.thrift.v1.common.SystemException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TemplateSet.class)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPublicVersion_result.class, metaDataMap);
    }

    public getPublicVersion_result() {
    }

    public getPublicVersion_result(
      TemplateSet success,
      com.wi.director.thrift.v1.common.SystemException err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPublicVersion_result(getPublicVersion_result other) {
      if (other.isSetSuccess()) {
        this.success = new TemplateSet(other.success);
      }
      if (other.isSetErr()) {
        this.err = new com.wi.director.thrift.v1.common.SystemException(other.err);
      }
    }

    public getPublicVersion_result deepCopy() {
      return new getPublicVersion_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public TemplateSet getSuccess() {
      return this.success;
    }

    public getPublicVersion_result setSuccess(TemplateSet success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.wi.director.thrift.v1.common.SystemException getErr() {
      return this.err;
    }

    public getPublicVersion_result setErr(com.wi.director.thrift.v1.common.SystemException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TemplateSet)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((com.wi.director.thrift.v1.common.SystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPublicVersion_result)
        return this.equals((getPublicVersion_result)that);
      return false;
    }

    public boolean equals(getPublicVersion_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(getPublicVersion_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPublicVersion_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPublicVersion_resultStandardSchemeFactory implements SchemeFactory {
      public getPublicVersion_resultStandardScheme getScheme() {
        return new getPublicVersion_resultStandardScheme();
      }
    }

    private static class getPublicVersion_resultStandardScheme extends StandardScheme<getPublicVersion_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPublicVersion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TemplateSet();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new com.wi.director.thrift.v1.common.SystemException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPublicVersion_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class beginReview_args implements org.apache.thrift.TBase<beginReview_args, beginReview_args._Fields>, java.io.Serializable, Cloneable, Comparable<beginReview_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("beginReview_args");

    private static final org.apache.thrift.protocol.TField TEMPLATE_SET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("templateSetId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new beginReview_argsStandardSchemeFactory());
    }

    public String templateSetId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TEMPLATE_SET_ID((short)1, "templateSetId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TEMPLATE_SET_ID
            return TEMPLATE_SET_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TEMPLATE_SET_ID, new org.apache.thrift.meta_data.FieldMetaData("templateSetId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(beginReview_args.class, metaDataMap);
    }

    public beginReview_args() {
    }

    public beginReview_args(
      String templateSetId)
    {
      this();
      this.templateSetId = templateSetId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public beginReview_args(beginReview_args other) {
      if (other.isSetTemplateSetId()) {
        this.templateSetId = other.templateSetId;
      }
    }

    public beginReview_args deepCopy() {
      return new beginReview_args(this);
    }

    @Override
    public void clear() {
      this.templateSetId = null;
    }

    public String getTemplateSetId() {
      return this.templateSetId;
    }

    public beginReview_args setTemplateSetId(String templateSetId) {
      this.templateSetId = templateSetId;
      return this;
    }

    public void unsetTemplateSetId() {
      this.templateSetId = null;
    }

    /** Returns true if field templateSetId is set (has been assigned a value) and false otherwise */
    public boolean isSetTemplateSetId() {
      return this.templateSetId != null;
    }

    public void setTemplateSetIdIsSet(boolean value) {
      if (!value) {
        this.templateSetId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TEMPLATE_SET_ID:
        if (value == null) {
          unsetTemplateSetId();
        } else {
          setTemplateSetId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TEMPLATE_SET_ID:
        return getTemplateSetId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TEMPLATE_SET_ID:
        return isSetTemplateSetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof beginReview_args)
        return this.equals((beginReview_args)that);
      return false;
    }

    public boolean equals(beginReview_args that) {
      if (that == null)
        return false;

      boolean this_present_templateSetId = true && this.isSetTemplateSetId();
      boolean that_present_templateSetId = true && that.isSetTemplateSetId();
      if (this_present_templateSetId || that_present_templateSetId) {
        if (!(this_present_templateSetId && that_present_templateSetId))
          return false;
        if (!this.templateSetId.equals(that.templateSetId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_templateSetId = true && (isSetTemplateSetId());
      list.add(present_templateSetId);
      if (present_templateSetId)
        list.add(templateSetId);

      return list.hashCode();
    }

    @Override
    public int compareTo(beginReview_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTemplateSetId()).compareTo(other.isSetTemplateSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTemplateSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.templateSetId, other.templateSetId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("beginReview_args(");
      boolean first = true;

      sb.append("templateSetId:");
      if (this.templateSetId == null) {
        sb.append("null");
      } else {
        sb.append(this.templateSetId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class beginReview_argsStandardSchemeFactory implements SchemeFactory {
      public beginReview_argsStandardScheme getScheme() {
        return new beginReview_argsStandardScheme();
      }
    }

    private static class beginReview_argsStandardScheme extends StandardScheme<beginReview_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, beginReview_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TEMPLATE_SET_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.templateSetId = iprot.readString();
                struct.setTemplateSetIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, beginReview_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.templateSetId != null) {
          oprot.writeFieldBegin(TEMPLATE_SET_ID_FIELD_DESC);
          oprot.writeString(struct.templateSetId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class beginReview_result implements org.apache.thrift.TBase<beginReview_result, beginReview_result._Fields>, java.io.Serializable, Cloneable, Comparable<beginReview_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("beginReview_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new beginReview_resultStandardSchemeFactory());
    }

    public int success; // required
    public com.wi.director.thrift.v1.common.SystemException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(beginReview_result.class, metaDataMap);
    }

    public beginReview_result() {
    }

    public beginReview_result(
      int success,
      com.wi.director.thrift.v1.common.SystemException err)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public beginReview_result(beginReview_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetErr()) {
        this.err = new com.wi.director.thrift.v1.common.SystemException(other.err);
      }
    }

    public beginReview_result deepCopy() {
      return new beginReview_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.err = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public beginReview_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.wi.director.thrift.v1.common.SystemException getErr() {
      return this.err;
    }

    public beginReview_result setErr(com.wi.director.thrift.v1.common.SystemException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((com.wi.director.thrift.v1.common.SystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof beginReview_result)
        return this.equals((beginReview_result)that);
      return false;
    }

    public boolean equals(beginReview_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(beginReview_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("beginReview_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class beginReview_resultStandardSchemeFactory implements SchemeFactory {
      public beginReview_resultStandardScheme getScheme() {
        return new beginReview_resultStandardScheme();
      }
    }

    private static class beginReview_resultStandardScheme extends StandardScheme<beginReview_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, beginReview_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new com.wi.director.thrift.v1.common.SystemException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, beginReview_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class endReview_args implements org.apache.thrift.TBase<endReview_args, endReview_args._Fields>, java.io.Serializable, Cloneable, Comparable<endReview_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("endReview_args");

    private static final org.apache.thrift.protocol.TField TEMPLATE_SET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("templateSetId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new endReview_argsStandardSchemeFactory());
    }

    public String templateSetId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TEMPLATE_SET_ID((short)1, "templateSetId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TEMPLATE_SET_ID
            return TEMPLATE_SET_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TEMPLATE_SET_ID, new org.apache.thrift.meta_data.FieldMetaData("templateSetId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(endReview_args.class, metaDataMap);
    }

    public endReview_args() {
    }

    public endReview_args(
      String templateSetId)
    {
      this();
      this.templateSetId = templateSetId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public endReview_args(endReview_args other) {
      if (other.isSetTemplateSetId()) {
        this.templateSetId = other.templateSetId;
      }
    }

    public endReview_args deepCopy() {
      return new endReview_args(this);
    }

    @Override
    public void clear() {
      this.templateSetId = null;
    }

    public String getTemplateSetId() {
      return this.templateSetId;
    }

    public endReview_args setTemplateSetId(String templateSetId) {
      this.templateSetId = templateSetId;
      return this;
    }

    public void unsetTemplateSetId() {
      this.templateSetId = null;
    }

    /** Returns true if field templateSetId is set (has been assigned a value) and false otherwise */
    public boolean isSetTemplateSetId() {
      return this.templateSetId != null;
    }

    public void setTemplateSetIdIsSet(boolean value) {
      if (!value) {
        this.templateSetId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TEMPLATE_SET_ID:
        if (value == null) {
          unsetTemplateSetId();
        } else {
          setTemplateSetId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TEMPLATE_SET_ID:
        return getTemplateSetId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TEMPLATE_SET_ID:
        return isSetTemplateSetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof endReview_args)
        return this.equals((endReview_args)that);
      return false;
    }

    public boolean equals(endReview_args that) {
      if (that == null)
        return false;

      boolean this_present_templateSetId = true && this.isSetTemplateSetId();
      boolean that_present_templateSetId = true && that.isSetTemplateSetId();
      if (this_present_templateSetId || that_present_templateSetId) {
        if (!(this_present_templateSetId && that_present_templateSetId))
          return false;
        if (!this.templateSetId.equals(that.templateSetId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_templateSetId = true && (isSetTemplateSetId());
      list.add(present_templateSetId);
      if (present_templateSetId)
        list.add(templateSetId);

      return list.hashCode();
    }

    @Override
    public int compareTo(endReview_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTemplateSetId()).compareTo(other.isSetTemplateSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTemplateSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.templateSetId, other.templateSetId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("endReview_args(");
      boolean first = true;

      sb.append("templateSetId:");
      if (this.templateSetId == null) {
        sb.append("null");
      } else {
        sb.append(this.templateSetId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class endReview_argsStandardSchemeFactory implements SchemeFactory {
      public endReview_argsStandardScheme getScheme() {
        return new endReview_argsStandardScheme();
      }
    }

    private static class endReview_argsStandardScheme extends StandardScheme<endReview_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, endReview_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TEMPLATE_SET_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.templateSetId = iprot.readString();
                struct.setTemplateSetIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, endReview_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.templateSetId != null) {
          oprot.writeFieldBegin(TEMPLATE_SET_ID_FIELD_DESC);
          oprot.writeString(struct.templateSetId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class endReview_result implements org.apache.thrift.TBase<endReview_result, endReview_result._Fields>, java.io.Serializable, Cloneable, Comparable<endReview_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("endReview_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new endReview_resultStandardSchemeFactory());
    }

    public int success; // required
    public com.wi.director.thrift.v1.common.SystemException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(endReview_result.class, metaDataMap);
    }

    public endReview_result() {
    }

    public endReview_result(
      int success,
      com.wi.director.thrift.v1.common.SystemException err)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public endReview_result(endReview_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetErr()) {
        this.err = new com.wi.director.thrift.v1.common.SystemException(other.err);
      }
    }

    public endReview_result deepCopy() {
      return new endReview_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.err = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public endReview_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.wi.director.thrift.v1.common.SystemException getErr() {
      return this.err;
    }

    public endReview_result setErr(com.wi.director.thrift.v1.common.SystemException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((com.wi.director.thrift.v1.common.SystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof endReview_result)
        return this.equals((endReview_result)that);
      return false;
    }

    public boolean equals(endReview_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(endReview_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("endReview_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class endReview_resultStandardSchemeFactory implements SchemeFactory {
      public endReview_resultStandardScheme getScheme() {
        return new endReview_resultStandardScheme();
      }
    }

    private static class endReview_resultStandardScheme extends StandardScheme<endReview_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, endReview_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new com.wi.director.thrift.v1.common.SystemException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, endReview_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class publishVersion_args implements org.apache.thrift.TBase<publishVersion_args, publishVersion_args._Fields>, java.io.Serializable, Cloneable, Comparable<publishVersion_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("publishVersion_args");

    private static final org.apache.thrift.protocol.TField TEMPLATE_SET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("templateSetId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PUBLIC_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("publicVersion", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new publishVersion_argsStandardSchemeFactory());
    }

    public String templateSetId; // required
    public int publicVersion; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TEMPLATE_SET_ID((short)1, "templateSetId"),
      PUBLIC_VERSION((short)2, "publicVersion");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TEMPLATE_SET_ID
            return TEMPLATE_SET_ID;
          case 2: // PUBLIC_VERSION
            return PUBLIC_VERSION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PUBLICVERSION_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TEMPLATE_SET_ID, new org.apache.thrift.meta_data.FieldMetaData("templateSetId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PUBLIC_VERSION, new org.apache.thrift.meta_data.FieldMetaData("publicVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(publishVersion_args.class, metaDataMap);
    }

    public publishVersion_args() {
    }

    public publishVersion_args(
      String templateSetId,
      int publicVersion)
    {
      this();
      this.templateSetId = templateSetId;
      this.publicVersion = publicVersion;
      setPublicVersionIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public publishVersion_args(publishVersion_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetTemplateSetId()) {
        this.templateSetId = other.templateSetId;
      }
      this.publicVersion = other.publicVersion;
    }

    public publishVersion_args deepCopy() {
      return new publishVersion_args(this);
    }

    @Override
    public void clear() {
      this.templateSetId = null;
      setPublicVersionIsSet(false);
      this.publicVersion = 0;
    }

    public String getTemplateSetId() {
      return this.templateSetId;
    }

    public publishVersion_args setTemplateSetId(String templateSetId) {
      this.templateSetId = templateSetId;
      return this;
    }

    public void unsetTemplateSetId() {
      this.templateSetId = null;
    }

    /** Returns true if field templateSetId is set (has been assigned a value) and false otherwise */
    public boolean isSetTemplateSetId() {
      return this.templateSetId != null;
    }

    public void setTemplateSetIdIsSet(boolean value) {
      if (!value) {
        this.templateSetId = null;
      }
    }

    public int getPublicVersion() {
      return this.publicVersion;
    }

    public publishVersion_args setPublicVersion(int publicVersion) {
      this.publicVersion = publicVersion;
      setPublicVersionIsSet(true);
      return this;
    }

    public void unsetPublicVersion() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PUBLICVERSION_ISSET_ID);
    }

    /** Returns true if field publicVersion is set (has been assigned a value) and false otherwise */
    public boolean isSetPublicVersion() {
      return EncodingUtils.testBit(__isset_bitfield, __PUBLICVERSION_ISSET_ID);
    }

    public void setPublicVersionIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PUBLICVERSION_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TEMPLATE_SET_ID:
        if (value == null) {
          unsetTemplateSetId();
        } else {
          setTemplateSetId((String)value);
        }
        break;

      case PUBLIC_VERSION:
        if (value == null) {
          unsetPublicVersion();
        } else {
          setPublicVersion((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TEMPLATE_SET_ID:
        return getTemplateSetId();

      case PUBLIC_VERSION:
        return getPublicVersion();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TEMPLATE_SET_ID:
        return isSetTemplateSetId();
      case PUBLIC_VERSION:
        return isSetPublicVersion();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof publishVersion_args)
        return this.equals((publishVersion_args)that);
      return false;
    }

    public boolean equals(publishVersion_args that) {
      if (that == null)
        return false;

      boolean this_present_templateSetId = true && this.isSetTemplateSetId();
      boolean that_present_templateSetId = true && that.isSetTemplateSetId();
      if (this_present_templateSetId || that_present_templateSetId) {
        if (!(this_present_templateSetId && that_present_templateSetId))
          return false;
        if (!this.templateSetId.equals(that.templateSetId))
          return false;
      }

      boolean this_present_publicVersion = true;
      boolean that_present_publicVersion = true;
      if (this_present_publicVersion || that_present_publicVersion) {
        if (!(this_present_publicVersion && that_present_publicVersion))
          return false;
        if (this.publicVersion != that.publicVersion)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_templateSetId = true && (isSetTemplateSetId());
      list.add(present_templateSetId);
      if (present_templateSetId)
        list.add(templateSetId);

      boolean present_publicVersion = true;
      list.add(present_publicVersion);
      if (present_publicVersion)
        list.add(publicVersion);

      return list.hashCode();
    }

    @Override
    public int compareTo(publishVersion_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTemplateSetId()).compareTo(other.isSetTemplateSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTemplateSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.templateSetId, other.templateSetId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPublicVersion()).compareTo(other.isSetPublicVersion());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPublicVersion()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.publicVersion, other.publicVersion);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("publishVersion_args(");
      boolean first = true;

      sb.append("templateSetId:");
      if (this.templateSetId == null) {
        sb.append("null");
      } else {
        sb.append(this.templateSetId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("publicVersion:");
      sb.append(this.publicVersion);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class publishVersion_argsStandardSchemeFactory implements SchemeFactory {
      public publishVersion_argsStandardScheme getScheme() {
        return new publishVersion_argsStandardScheme();
      }
    }

    private static class publishVersion_argsStandardScheme extends StandardScheme<publishVersion_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, publishVersion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TEMPLATE_SET_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.templateSetId = iprot.readString();
                struct.setTemplateSetIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PUBLIC_VERSION
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.publicVersion = iprot.readI32();
                struct.setPublicVersionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, publishVersion_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.templateSetId != null) {
          oprot.writeFieldBegin(TEMPLATE_SET_ID_FIELD_DESC);
          oprot.writeString(struct.templateSetId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PUBLIC_VERSION_FIELD_DESC);
        oprot.writeI32(struct.publicVersion);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class publishVersion_result implements org.apache.thrift.TBase<publishVersion_result, publishVersion_result._Fields>, java.io.Serializable, Cloneable, Comparable<publishVersion_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("publishVersion_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new publishVersion_resultStandardSchemeFactory());
    }

    public TemplateSet success; // required
    public com.wi.director.thrift.v1.common.SystemException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TemplateSet.class)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(publishVersion_result.class, metaDataMap);
    }

    public publishVersion_result() {
    }

    public publishVersion_result(
      TemplateSet success,
      com.wi.director.thrift.v1.common.SystemException err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public publishVersion_result(publishVersion_result other) {
      if (other.isSetSuccess()) {
        this.success = new TemplateSet(other.success);
      }
      if (other.isSetErr()) {
        this.err = new com.wi.director.thrift.v1.common.SystemException(other.err);
      }
    }

    public publishVersion_result deepCopy() {
      return new publishVersion_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public TemplateSet getSuccess() {
      return this.success;
    }

    public publishVersion_result setSuccess(TemplateSet success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.wi.director.thrift.v1.common.SystemException getErr() {
      return this.err;
    }

    public publishVersion_result setErr(com.wi.director.thrift.v1.common.SystemException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TemplateSet)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((com.wi.director.thrift.v1.common.SystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof publishVersion_result)
        return this.equals((publishVersion_result)that);
      return false;
    }

    public boolean equals(publishVersion_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(publishVersion_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("publishVersion_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class publishVersion_resultStandardSchemeFactory implements SchemeFactory {
      public publishVersion_resultStandardScheme getScheme() {
        return new publishVersion_resultStandardScheme();
      }
    }

    private static class publishVersion_resultStandardScheme extends StandardScheme<publishVersion_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, publishVersion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TemplateSet();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new com.wi.director.thrift.v1.common.SystemException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, publishVersion_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class addTemplate_args implements org.apache.thrift.TBase<addTemplate_args, addTemplate_args._Fields>, java.io.Serializable, Cloneable, Comparable<addTemplate_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addTemplate_args");

    private static final org.apache.thrift.protocol.TField TEMPLATE_SET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("templateSetId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField INTERNAL_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("internalVersion", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField TEMPLATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("templateId", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField POSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("position", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField REPLACE_FIELD_DESC = new org.apache.thrift.protocol.TField("replace", org.apache.thrift.protocol.TType.BOOL, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addTemplate_argsStandardSchemeFactory());
    }

    public String templateSetId; // required
    public int internalVersion; // required
    public String templateId; // required
    public int position; // required
    public boolean replace; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TEMPLATE_SET_ID((short)1, "templateSetId"),
      INTERNAL_VERSION((short)2, "internalVersion"),
      TEMPLATE_ID((short)3, "templateId"),
      POSITION((short)4, "position"),
      REPLACE((short)5, "replace");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TEMPLATE_SET_ID
            return TEMPLATE_SET_ID;
          case 2: // INTERNAL_VERSION
            return INTERNAL_VERSION;
          case 3: // TEMPLATE_ID
            return TEMPLATE_ID;
          case 4: // POSITION
            return POSITION;
          case 5: // REPLACE
            return REPLACE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __INTERNALVERSION_ISSET_ID = 0;
    private static final int __POSITION_ISSET_ID = 1;
    private static final int __REPLACE_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TEMPLATE_SET_ID, new org.apache.thrift.meta_data.FieldMetaData("templateSetId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.INTERNAL_VERSION, new org.apache.thrift.meta_data.FieldMetaData("internalVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TEMPLATE_ID, new org.apache.thrift.meta_data.FieldMetaData("templateId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.POSITION, new org.apache.thrift.meta_data.FieldMetaData("position", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.REPLACE, new org.apache.thrift.meta_data.FieldMetaData("replace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addTemplate_args.class, metaDataMap);
    }

    public addTemplate_args() {
    }

    public addTemplate_args(
      String templateSetId,
      int internalVersion,
      String templateId,
      int position,
      boolean replace)
    {
      this();
      this.templateSetId = templateSetId;
      this.internalVersion = internalVersion;
      setInternalVersionIsSet(true);
      this.templateId = templateId;
      this.position = position;
      setPositionIsSet(true);
      this.replace = replace;
      setReplaceIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addTemplate_args(addTemplate_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetTemplateSetId()) {
        this.templateSetId = other.templateSetId;
      }
      this.internalVersion = other.internalVersion;
      if (other.isSetTemplateId()) {
        this.templateId = other.templateId;
      }
      this.position = other.position;
      this.replace = other.replace;
    }

    public addTemplate_args deepCopy() {
      return new addTemplate_args(this);
    }

    @Override
    public void clear() {
      this.templateSetId = null;
      setInternalVersionIsSet(false);
      this.internalVersion = 0;
      this.templateId = null;
      setPositionIsSet(false);
      this.position = 0;
      setReplaceIsSet(false);
      this.replace = false;
    }

    public String getTemplateSetId() {
      return this.templateSetId;
    }

    public addTemplate_args setTemplateSetId(String templateSetId) {
      this.templateSetId = templateSetId;
      return this;
    }

    public void unsetTemplateSetId() {
      this.templateSetId = null;
    }

    /** Returns true if field templateSetId is set (has been assigned a value) and false otherwise */
    public boolean isSetTemplateSetId() {
      return this.templateSetId != null;
    }

    public void setTemplateSetIdIsSet(boolean value) {
      if (!value) {
        this.templateSetId = null;
      }
    }

    public int getInternalVersion() {
      return this.internalVersion;
    }

    public addTemplate_args setInternalVersion(int internalVersion) {
      this.internalVersion = internalVersion;
      setInternalVersionIsSet(true);
      return this;
    }

    public void unsetInternalVersion() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INTERNALVERSION_ISSET_ID);
    }

    /** Returns true if field internalVersion is set (has been assigned a value) and false otherwise */
    public boolean isSetInternalVersion() {
      return EncodingUtils.testBit(__isset_bitfield, __INTERNALVERSION_ISSET_ID);
    }

    public void setInternalVersionIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INTERNALVERSION_ISSET_ID, value);
    }

    public String getTemplateId() {
      return this.templateId;
    }

    public addTemplate_args setTemplateId(String templateId) {
      this.templateId = templateId;
      return this;
    }

    public void unsetTemplateId() {
      this.templateId = null;
    }

    /** Returns true if field templateId is set (has been assigned a value) and false otherwise */
    public boolean isSetTemplateId() {
      return this.templateId != null;
    }

    public void setTemplateIdIsSet(boolean value) {
      if (!value) {
        this.templateId = null;
      }
    }

    public int getPosition() {
      return this.position;
    }

    public addTemplate_args setPosition(int position) {
      this.position = position;
      setPositionIsSet(true);
      return this;
    }

    public void unsetPosition() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POSITION_ISSET_ID);
    }

    /** Returns true if field position is set (has been assigned a value) and false otherwise */
    public boolean isSetPosition() {
      return EncodingUtils.testBit(__isset_bitfield, __POSITION_ISSET_ID);
    }

    public void setPositionIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POSITION_ISSET_ID, value);
    }

    public boolean isReplace() {
      return this.replace;
    }

    public addTemplate_args setReplace(boolean replace) {
      this.replace = replace;
      setReplaceIsSet(true);
      return this;
    }

    public void unsetReplace() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPLACE_ISSET_ID);
    }

    /** Returns true if field replace is set (has been assigned a value) and false otherwise */
    public boolean isSetReplace() {
      return EncodingUtils.testBit(__isset_bitfield, __REPLACE_ISSET_ID);
    }

    public void setReplaceIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPLACE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TEMPLATE_SET_ID:
        if (value == null) {
          unsetTemplateSetId();
        } else {
          setTemplateSetId((String)value);
        }
        break;

      case INTERNAL_VERSION:
        if (value == null) {
          unsetInternalVersion();
        } else {
          setInternalVersion((Integer)value);
        }
        break;

      case TEMPLATE_ID:
        if (value == null) {
          unsetTemplateId();
        } else {
          setTemplateId((String)value);
        }
        break;

      case POSITION:
        if (value == null) {
          unsetPosition();
        } else {
          setPosition((Integer)value);
        }
        break;

      case REPLACE:
        if (value == null) {
          unsetReplace();
        } else {
          setReplace((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TEMPLATE_SET_ID:
        return getTemplateSetId();

      case INTERNAL_VERSION:
        return getInternalVersion();

      case TEMPLATE_ID:
        return getTemplateId();

      case POSITION:
        return getPosition();

      case REPLACE:
        return isReplace();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TEMPLATE_SET_ID:
        return isSetTemplateSetId();
      case INTERNAL_VERSION:
        return isSetInternalVersion();
      case TEMPLATE_ID:
        return isSetTemplateId();
      case POSITION:
        return isSetPosition();
      case REPLACE:
        return isSetReplace();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addTemplate_args)
        return this.equals((addTemplate_args)that);
      return false;
    }

    public boolean equals(addTemplate_args that) {
      if (that == null)
        return false;

      boolean this_present_templateSetId = true && this.isSetTemplateSetId();
      boolean that_present_templateSetId = true && that.isSetTemplateSetId();
      if (this_present_templateSetId || that_present_templateSetId) {
        if (!(this_present_templateSetId && that_present_templateSetId))
          return false;
        if (!this.templateSetId.equals(that.templateSetId))
          return false;
      }

      boolean this_present_internalVersion = true;
      boolean that_present_internalVersion = true;
      if (this_present_internalVersion || that_present_internalVersion) {
        if (!(this_present_internalVersion && that_present_internalVersion))
          return false;
        if (this.internalVersion != that.internalVersion)
          return false;
      }

      boolean this_present_templateId = true && this.isSetTemplateId();
      boolean that_present_templateId = true && that.isSetTemplateId();
      if (this_present_templateId || that_present_templateId) {
        if (!(this_present_templateId && that_present_templateId))
          return false;
        if (!this.templateId.equals(that.templateId))
          return false;
      }

      boolean this_present_position = true;
      boolean that_present_position = true;
      if (this_present_position || that_present_position) {
        if (!(this_present_position && that_present_position))
          return false;
        if (this.position != that.position)
          return false;
      }

      boolean this_present_replace = true;
      boolean that_present_replace = true;
      if (this_present_replace || that_present_replace) {
        if (!(this_present_replace && that_present_replace))
          return false;
        if (this.replace != that.replace)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_templateSetId = true && (isSetTemplateSetId());
      list.add(present_templateSetId);
      if (present_templateSetId)
        list.add(templateSetId);

      boolean present_internalVersion = true;
      list.add(present_internalVersion);
      if (present_internalVersion)
        list.add(internalVersion);

      boolean present_templateId = true && (isSetTemplateId());
      list.add(present_templateId);
      if (present_templateId)
        list.add(templateId);

      boolean present_position = true;
      list.add(present_position);
      if (present_position)
        list.add(position);

      boolean present_replace = true;
      list.add(present_replace);
      if (present_replace)
        list.add(replace);

      return list.hashCode();
    }

    @Override
    public int compareTo(addTemplate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTemplateSetId()).compareTo(other.isSetTemplateSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTemplateSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.templateSetId, other.templateSetId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetInternalVersion()).compareTo(other.isSetInternalVersion());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInternalVersion()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.internalVersion, other.internalVersion);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTemplateId()).compareTo(other.isSetTemplateId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTemplateId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.templateId, other.templateId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPosition()).compareTo(other.isSetPosition());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPosition()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.position, other.position);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReplace()).compareTo(other.isSetReplace());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReplace()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.replace, other.replace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addTemplate_args(");
      boolean first = true;

      sb.append("templateSetId:");
      if (this.templateSetId == null) {
        sb.append("null");
      } else {
        sb.append(this.templateSetId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("internalVersion:");
      sb.append(this.internalVersion);
      first = false;
      if (!first) sb.append(", ");
      sb.append("templateId:");
      if (this.templateId == null) {
        sb.append("null");
      } else {
        sb.append(this.templateId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("position:");
      sb.append(this.position);
      first = false;
      if (!first) sb.append(", ");
      sb.append("replace:");
      sb.append(this.replace);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addTemplate_argsStandardSchemeFactory implements SchemeFactory {
      public addTemplate_argsStandardScheme getScheme() {
        return new addTemplate_argsStandardScheme();
      }
    }

    private static class addTemplate_argsStandardScheme extends StandardScheme<addTemplate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addTemplate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TEMPLATE_SET_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.templateSetId = iprot.readString();
                struct.setTemplateSetIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // INTERNAL_VERSION
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.internalVersion = iprot.readI32();
                struct.setInternalVersionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TEMPLATE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.templateId = iprot.readString();
                struct.setTemplateIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // POSITION
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.position = iprot.readI32();
                struct.setPositionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // REPLACE
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.replace = iprot.readBool();
                struct.setReplaceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addTemplate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.templateSetId != null) {
          oprot.writeFieldBegin(TEMPLATE_SET_ID_FIELD_DESC);
          oprot.writeString(struct.templateSetId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(INTERNAL_VERSION_FIELD_DESC);
        oprot.writeI32(struct.internalVersion);
        oprot.writeFieldEnd();
        if (struct.templateId != null) {
          oprot.writeFieldBegin(TEMPLATE_ID_FIELD_DESC);
          oprot.writeString(struct.templateId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(POSITION_FIELD_DESC);
        oprot.writeI32(struct.position);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(REPLACE_FIELD_DESC);
        oprot.writeBool(struct.replace);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class addTemplate_result implements org.apache.thrift.TBase<addTemplate_result, addTemplate_result._Fields>, java.io.Serializable, Cloneable, Comparable<addTemplate_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addTemplate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addTemplate_resultStandardSchemeFactory());
    }

    public TemplateSet success; // required
    public com.wi.director.thrift.v1.common.SystemException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TemplateSet.class)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addTemplate_result.class, metaDataMap);
    }

    public addTemplate_result() {
    }

    public addTemplate_result(
      TemplateSet success,
      com.wi.director.thrift.v1.common.SystemException err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addTemplate_result(addTemplate_result other) {
      if (other.isSetSuccess()) {
        this.success = new TemplateSet(other.success);
      }
      if (other.isSetErr()) {
        this.err = new com.wi.director.thrift.v1.common.SystemException(other.err);
      }
    }

    public addTemplate_result deepCopy() {
      return new addTemplate_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public TemplateSet getSuccess() {
      return this.success;
    }

    public addTemplate_result setSuccess(TemplateSet success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.wi.director.thrift.v1.common.SystemException getErr() {
      return this.err;
    }

    public addTemplate_result setErr(com.wi.director.thrift.v1.common.SystemException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TemplateSet)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((com.wi.director.thrift.v1.common.SystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addTemplate_result)
        return this.equals((addTemplate_result)that);
      return false;
    }

    public boolean equals(addTemplate_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(addTemplate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addTemplate_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addTemplate_resultStandardSchemeFactory implements SchemeFactory {
      public addTemplate_resultStandardScheme getScheme() {
        return new addTemplate_resultStandardScheme();
      }
    }

    private static class addTemplate_resultStandardScheme extends StandardScheme<addTemplate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addTemplate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TemplateSet();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new com.wi.director.thrift.v1.common.SystemException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addTemplate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class addTemplateSet_args implements org.apache.thrift.TBase<addTemplateSet_args, addTemplateSet_args._Fields>, java.io.Serializable, Cloneable, Comparable<addTemplateSet_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addTemplateSet_args");

    private static final org.apache.thrift.protocol.TField TEMPLATE_SET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("templateSetId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField INTERNAL_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("internalVersion", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField ADDED_SET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("addedSetId", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField POSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("position", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addTemplateSet_argsStandardSchemeFactory());
    }

    public String templateSetId; // required
    public int internalVersion; // required
    public String addedSetId; // required
    public int position; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TEMPLATE_SET_ID((short)1, "templateSetId"),
      INTERNAL_VERSION((short)2, "internalVersion"),
      ADDED_SET_ID((short)3, "addedSetId"),
      POSITION((short)4, "position");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TEMPLATE_SET_ID
            return TEMPLATE_SET_ID;
          case 2: // INTERNAL_VERSION
            return INTERNAL_VERSION;
          case 3: // ADDED_SET_ID
            return ADDED_SET_ID;
          case 4: // POSITION
            return POSITION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __INTERNALVERSION_ISSET_ID = 0;
    private static final int __POSITION_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TEMPLATE_SET_ID, new org.apache.thrift.meta_data.FieldMetaData("templateSetId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.INTERNAL_VERSION, new org.apache.thrift.meta_data.FieldMetaData("internalVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ADDED_SET_ID, new org.apache.thrift.meta_data.FieldMetaData("addedSetId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.POSITION, new org.apache.thrift.meta_data.FieldMetaData("position", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addTemplateSet_args.class, metaDataMap);
    }

    public addTemplateSet_args() {
    }

    public addTemplateSet_args(
      String templateSetId,
      int internalVersion,
      String addedSetId,
      int position)
    {
      this();
      this.templateSetId = templateSetId;
      this.internalVersion = internalVersion;
      setInternalVersionIsSet(true);
      this.addedSetId = addedSetId;
      this.position = position;
      setPositionIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addTemplateSet_args(addTemplateSet_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetTemplateSetId()) {
        this.templateSetId = other.templateSetId;
      }
      this.internalVersion = other.internalVersion;
      if (other.isSetAddedSetId()) {
        this.addedSetId = other.addedSetId;
      }
      this.position = other.position;
    }

    public addTemplateSet_args deepCopy() {
      return new addTemplateSet_args(this);
    }

    @Override
    public void clear() {
      this.templateSetId = null;
      setInternalVersionIsSet(false);
      this.internalVersion = 0;
      this.addedSetId = null;
      setPositionIsSet(false);
      this.position = 0;
    }

    public String getTemplateSetId() {
      return this.templateSetId;
    }

    public addTemplateSet_args setTemplateSetId(String templateSetId) {
      this.templateSetId = templateSetId;
      return this;
    }

    public void unsetTemplateSetId() {
      this.templateSetId = null;
    }

    /** Returns true if field templateSetId is set (has been assigned a value) and false otherwise */
    public boolean isSetTemplateSetId() {
      return this.templateSetId != null;
    }

    public void setTemplateSetIdIsSet(boolean value) {
      if (!value) {
        this.templateSetId = null;
      }
    }

    public int getInternalVersion() {
      return this.internalVersion;
    }

    public addTemplateSet_args setInternalVersion(int internalVersion) {
      this.internalVersion = internalVersion;
      setInternalVersionIsSet(true);
      return this;
    }

    public void unsetInternalVersion() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INTERNALVERSION_ISSET_ID);
    }

    /** Returns true if field internalVersion is set (has been assigned a value) and false otherwise */
    public boolean isSetInternalVersion() {
      return EncodingUtils.testBit(__isset_bitfield, __INTERNALVERSION_ISSET_ID);
    }

    public void setInternalVersionIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INTERNALVERSION_ISSET_ID, value);
    }

    public String getAddedSetId() {
      return this.addedSetId;
    }

    public addTemplateSet_args setAddedSetId(String addedSetId) {
      this.addedSetId = addedSetId;
      return this;
    }

    public void unsetAddedSetId() {
      this.addedSetId = null;
    }

    /** Returns true if field addedSetId is set (has been assigned a value) and false otherwise */
    public boolean isSetAddedSetId() {
      return this.addedSetId != null;
    }

    public void setAddedSetIdIsSet(boolean value) {
      if (!value) {
        this.addedSetId = null;
      }
    }

    public int getPosition() {
      return this.position;
    }

    public addTemplateSet_args setPosition(int position) {
      this.position = position;
      setPositionIsSet(true);
      return this;
    }

    public void unsetPosition() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POSITION_ISSET_ID);
    }

    /** Returns true if field position is set (has been assigned a value) and false otherwise */
    public boolean isSetPosition() {
      return EncodingUtils.testBit(__isset_bitfield, __POSITION_ISSET_ID);
    }

    public void setPositionIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POSITION_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TEMPLATE_SET_ID:
        if (value == null) {
          unsetTemplateSetId();
        } else {
          setTemplateSetId((String)value);
        }
        break;

      case INTERNAL_VERSION:
        if (value == null) {
          unsetInternalVersion();
        } else {
          setInternalVersion((Integer)value);
        }
        break;

      case ADDED_SET_ID:
        if (value == null) {
          unsetAddedSetId();
        } else {
          setAddedSetId((String)value);
        }
        break;

      case POSITION:
        if (value == null) {
          unsetPosition();
        } else {
          setPosition((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TEMPLATE_SET_ID:
        return getTemplateSetId();

      case INTERNAL_VERSION:
        return getInternalVersion();

      case ADDED_SET_ID:
        return getAddedSetId();

      case POSITION:
        return getPosition();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TEMPLATE_SET_ID:
        return isSetTemplateSetId();
      case INTERNAL_VERSION:
        return isSetInternalVersion();
      case ADDED_SET_ID:
        return isSetAddedSetId();
      case POSITION:
        return isSetPosition();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addTemplateSet_args)
        return this.equals((addTemplateSet_args)that);
      return false;
    }

    public boolean equals(addTemplateSet_args that) {
      if (that == null)
        return false;

      boolean this_present_templateSetId = true && this.isSetTemplateSetId();
      boolean that_present_templateSetId = true && that.isSetTemplateSetId();
      if (this_present_templateSetId || that_present_templateSetId) {
        if (!(this_present_templateSetId && that_present_templateSetId))
          return false;
        if (!this.templateSetId.equals(that.templateSetId))
          return false;
      }

      boolean this_present_internalVersion = true;
      boolean that_present_internalVersion = true;
      if (this_present_internalVersion || that_present_internalVersion) {
        if (!(this_present_internalVersion && that_present_internalVersion))
          return false;
        if (this.internalVersion != that.internalVersion)
          return false;
      }

      boolean this_present_addedSetId = true && this.isSetAddedSetId();
      boolean that_present_addedSetId = true && that.isSetAddedSetId();
      if (this_present_addedSetId || that_present_addedSetId) {
        if (!(this_present_addedSetId && that_present_addedSetId))
          return false;
        if (!this.addedSetId.equals(that.addedSetId))
          return false;
      }

      boolean this_present_position = true;
      boolean that_present_position = true;
      if (this_present_position || that_present_position) {
        if (!(this_present_position && that_present_position))
          return false;
        if (this.position != that.position)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_templateSetId = true && (isSetTemplateSetId());
      list.add(present_templateSetId);
      if (present_templateSetId)
        list.add(templateSetId);

      boolean present_internalVersion = true;
      list.add(present_internalVersion);
      if (present_internalVersion)
        list.add(internalVersion);

      boolean present_addedSetId = true && (isSetAddedSetId());
      list.add(present_addedSetId);
      if (present_addedSetId)
        list.add(addedSetId);

      boolean present_position = true;
      list.add(present_position);
      if (present_position)
        list.add(position);

      return list.hashCode();
    }

    @Override
    public int compareTo(addTemplateSet_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTemplateSetId()).compareTo(other.isSetTemplateSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTemplateSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.templateSetId, other.templateSetId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetInternalVersion()).compareTo(other.isSetInternalVersion());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInternalVersion()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.internalVersion, other.internalVersion);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAddedSetId()).compareTo(other.isSetAddedSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAddedSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.addedSetId, other.addedSetId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPosition()).compareTo(other.isSetPosition());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPosition()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.position, other.position);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addTemplateSet_args(");
      boolean first = true;

      sb.append("templateSetId:");
      if (this.templateSetId == null) {
        sb.append("null");
      } else {
        sb.append(this.templateSetId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("internalVersion:");
      sb.append(this.internalVersion);
      first = false;
      if (!first) sb.append(", ");
      sb.append("addedSetId:");
      if (this.addedSetId == null) {
        sb.append("null");
      } else {
        sb.append(this.addedSetId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("position:");
      sb.append(this.position);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addTemplateSet_argsStandardSchemeFactory implements SchemeFactory {
      public addTemplateSet_argsStandardScheme getScheme() {
        return new addTemplateSet_argsStandardScheme();
      }
    }

    private static class addTemplateSet_argsStandardScheme extends StandardScheme<addTemplateSet_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addTemplateSet_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TEMPLATE_SET_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.templateSetId = iprot.readString();
                struct.setTemplateSetIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // INTERNAL_VERSION
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.internalVersion = iprot.readI32();
                struct.setInternalVersionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ADDED_SET_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.addedSetId = iprot.readString();
                struct.setAddedSetIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // POSITION
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.position = iprot.readI32();
                struct.setPositionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addTemplateSet_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.templateSetId != null) {
          oprot.writeFieldBegin(TEMPLATE_SET_ID_FIELD_DESC);
          oprot.writeString(struct.templateSetId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(INTERNAL_VERSION_FIELD_DESC);
        oprot.writeI32(struct.internalVersion);
        oprot.writeFieldEnd();
        if (struct.addedSetId != null) {
          oprot.writeFieldBegin(ADDED_SET_ID_FIELD_DESC);
          oprot.writeString(struct.addedSetId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(POSITION_FIELD_DESC);
        oprot.writeI32(struct.position);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class addTemplateSet_result implements org.apache.thrift.TBase<addTemplateSet_result, addTemplateSet_result._Fields>, java.io.Serializable, Cloneable, Comparable<addTemplateSet_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addTemplateSet_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addTemplateSet_resultStandardSchemeFactory());
    }

    public TemplateSet success; // required
    public com.wi.director.thrift.v1.common.SystemException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TemplateSet.class)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addTemplateSet_result.class, metaDataMap);
    }

    public addTemplateSet_result() {
    }

    public addTemplateSet_result(
      TemplateSet success,
      com.wi.director.thrift.v1.common.SystemException err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addTemplateSet_result(addTemplateSet_result other) {
      if (other.isSetSuccess()) {
        this.success = new TemplateSet(other.success);
      }
      if (other.isSetErr()) {
        this.err = new com.wi.director.thrift.v1.common.SystemException(other.err);
      }
    }

    public addTemplateSet_result deepCopy() {
      return new addTemplateSet_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public TemplateSet getSuccess() {
      return this.success;
    }

    public addTemplateSet_result setSuccess(TemplateSet success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.wi.director.thrift.v1.common.SystemException getErr() {
      return this.err;
    }

    public addTemplateSet_result setErr(com.wi.director.thrift.v1.common.SystemException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TemplateSet)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((com.wi.director.thrift.v1.common.SystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addTemplateSet_result)
        return this.equals((addTemplateSet_result)that);
      return false;
    }

    public boolean equals(addTemplateSet_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(addTemplateSet_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addTemplateSet_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addTemplateSet_resultStandardSchemeFactory implements SchemeFactory {
      public addTemplateSet_resultStandardScheme getScheme() {
        return new addTemplateSet_resultStandardScheme();
      }
    }

    private static class addTemplateSet_resultStandardScheme extends StandardScheme<addTemplateSet_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addTemplateSet_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TemplateSet();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new com.wi.director.thrift.v1.common.SystemException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addTemplateSet_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class moveTemplate_args implements org.apache.thrift.TBase<moveTemplate_args, moveTemplate_args._Fields>, java.io.Serializable, Cloneable, Comparable<moveTemplate_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("moveTemplate_args");

    private static final org.apache.thrift.protocol.TField TEMPLATE_SET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("templateSetId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField INTERNAL_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("internalVersion", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField TEMPLATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("templateId", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField OLD_POSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("oldPosition", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField NEW_POSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("newPosition", org.apache.thrift.protocol.TType.I32, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new moveTemplate_argsStandardSchemeFactory());
    }

    public String templateSetId; // required
    public int internalVersion; // required
    public String templateId; // required
    public int oldPosition; // required
    public int newPosition; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TEMPLATE_SET_ID((short)1, "templateSetId"),
      INTERNAL_VERSION((short)2, "internalVersion"),
      TEMPLATE_ID((short)3, "templateId"),
      OLD_POSITION((short)4, "oldPosition"),
      NEW_POSITION((short)5, "newPosition");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TEMPLATE_SET_ID
            return TEMPLATE_SET_ID;
          case 2: // INTERNAL_VERSION
            return INTERNAL_VERSION;
          case 3: // TEMPLATE_ID
            return TEMPLATE_ID;
          case 4: // OLD_POSITION
            return OLD_POSITION;
          case 5: // NEW_POSITION
            return NEW_POSITION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __INTERNALVERSION_ISSET_ID = 0;
    private static final int __OLDPOSITION_ISSET_ID = 1;
    private static final int __NEWPOSITION_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TEMPLATE_SET_ID, new org.apache.thrift.meta_data.FieldMetaData("templateSetId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.INTERNAL_VERSION, new org.apache.thrift.meta_data.FieldMetaData("internalVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TEMPLATE_ID, new org.apache.thrift.meta_data.FieldMetaData("templateId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OLD_POSITION, new org.apache.thrift.meta_data.FieldMetaData("oldPosition", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.NEW_POSITION, new org.apache.thrift.meta_data.FieldMetaData("newPosition", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(moveTemplate_args.class, metaDataMap);
    }

    public moveTemplate_args() {
    }

    public moveTemplate_args(
      String templateSetId,
      int internalVersion,
      String templateId,
      int oldPosition,
      int newPosition)
    {
      this();
      this.templateSetId = templateSetId;
      this.internalVersion = internalVersion;
      setInternalVersionIsSet(true);
      this.templateId = templateId;
      this.oldPosition = oldPosition;
      setOldPositionIsSet(true);
      this.newPosition = newPosition;
      setNewPositionIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public moveTemplate_args(moveTemplate_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetTemplateSetId()) {
        this.templateSetId = other.templateSetId;
      }
      this.internalVersion = other.internalVersion;
      if (other.isSetTemplateId()) {
        this.templateId = other.templateId;
      }
      this.oldPosition = other.oldPosition;
      this.newPosition = other.newPosition;
    }

    public moveTemplate_args deepCopy() {
      return new moveTemplate_args(this);
    }

    @Override
    public void clear() {
      this.templateSetId = null;
      setInternalVersionIsSet(false);
      this.internalVersion = 0;
      this.templateId = null;
      setOldPositionIsSet(false);
      this.oldPosition = 0;
      setNewPositionIsSet(false);
      this.newPosition = 0;
    }

    public String getTemplateSetId() {
      return this.templateSetId;
    }

    public moveTemplate_args setTemplateSetId(String templateSetId) {
      this.templateSetId = templateSetId;
      return this;
    }

    public void unsetTemplateSetId() {
      this.templateSetId = null;
    }

    /** Returns true if field templateSetId is set (has been assigned a value) and false otherwise */
    public boolean isSetTemplateSetId() {
      return this.templateSetId != null;
    }

    public void setTemplateSetIdIsSet(boolean value) {
      if (!value) {
        this.templateSetId = null;
      }
    }

    public int getInternalVersion() {
      return this.internalVersion;
    }

    public moveTemplate_args setInternalVersion(int internalVersion) {
      this.internalVersion = internalVersion;
      setInternalVersionIsSet(true);
      return this;
    }

    public void unsetInternalVersion() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INTERNALVERSION_ISSET_ID);
    }

    /** Returns true if field internalVersion is set (has been assigned a value) and false otherwise */
    public boolean isSetInternalVersion() {
      return EncodingUtils.testBit(__isset_bitfield, __INTERNALVERSION_ISSET_ID);
    }

    public void setInternalVersionIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INTERNALVERSION_ISSET_ID, value);
    }

    public String getTemplateId() {
      return this.templateId;
    }

    public moveTemplate_args setTemplateId(String templateId) {
      this.templateId = templateId;
      return this;
    }

    public void unsetTemplateId() {
      this.templateId = null;
    }

    /** Returns true if field templateId is set (has been assigned a value) and false otherwise */
    public boolean isSetTemplateId() {
      return this.templateId != null;
    }

    public void setTemplateIdIsSet(boolean value) {
      if (!value) {
        this.templateId = null;
      }
    }

    public int getOldPosition() {
      return this.oldPosition;
    }

    public moveTemplate_args setOldPosition(int oldPosition) {
      this.oldPosition = oldPosition;
      setOldPositionIsSet(true);
      return this;
    }

    public void unsetOldPosition() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OLDPOSITION_ISSET_ID);
    }

    /** Returns true if field oldPosition is set (has been assigned a value) and false otherwise */
    public boolean isSetOldPosition() {
      return EncodingUtils.testBit(__isset_bitfield, __OLDPOSITION_ISSET_ID);
    }

    public void setOldPositionIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OLDPOSITION_ISSET_ID, value);
    }

    public int getNewPosition() {
      return this.newPosition;
    }

    public moveTemplate_args setNewPosition(int newPosition) {
      this.newPosition = newPosition;
      setNewPositionIsSet(true);
      return this;
    }

    public void unsetNewPosition() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NEWPOSITION_ISSET_ID);
    }

    /** Returns true if field newPosition is set (has been assigned a value) and false otherwise */
    public boolean isSetNewPosition() {
      return EncodingUtils.testBit(__isset_bitfield, __NEWPOSITION_ISSET_ID);
    }

    public void setNewPositionIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NEWPOSITION_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TEMPLATE_SET_ID:
        if (value == null) {
          unsetTemplateSetId();
        } else {
          setTemplateSetId((String)value);
        }
        break;

      case INTERNAL_VERSION:
        if (value == null) {
          unsetInternalVersion();
        } else {
          setInternalVersion((Integer)value);
        }
        break;

      case TEMPLATE_ID:
        if (value == null) {
          unsetTemplateId();
        } else {
          setTemplateId((String)value);
        }
        break;

      case OLD_POSITION:
        if (value == null) {
          unsetOldPosition();
        } else {
          setOldPosition((Integer)value);
        }
        break;

      case NEW_POSITION:
        if (value == null) {
          unsetNewPosition();
        } else {
          setNewPosition((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TEMPLATE_SET_ID:
        return getTemplateSetId();

      case INTERNAL_VERSION:
        return getInternalVersion();

      case TEMPLATE_ID:
        return getTemplateId();

      case OLD_POSITION:
        return getOldPosition();

      case NEW_POSITION:
        return getNewPosition();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TEMPLATE_SET_ID:
        return isSetTemplateSetId();
      case INTERNAL_VERSION:
        return isSetInternalVersion();
      case TEMPLATE_ID:
        return isSetTemplateId();
      case OLD_POSITION:
        return isSetOldPosition();
      case NEW_POSITION:
        return isSetNewPosition();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof moveTemplate_args)
        return this.equals((moveTemplate_args)that);
      return false;
    }

    public boolean equals(moveTemplate_args that) {
      if (that == null)
        return false;

      boolean this_present_templateSetId = true && this.isSetTemplateSetId();
      boolean that_present_templateSetId = true && that.isSetTemplateSetId();
      if (this_present_templateSetId || that_present_templateSetId) {
        if (!(this_present_templateSetId && that_present_templateSetId))
          return false;
        if (!this.templateSetId.equals(that.templateSetId))
          return false;
      }

      boolean this_present_internalVersion = true;
      boolean that_present_internalVersion = true;
      if (this_present_internalVersion || that_present_internalVersion) {
        if (!(this_present_internalVersion && that_present_internalVersion))
          return false;
        if (this.internalVersion != that.internalVersion)
          return false;
      }

      boolean this_present_templateId = true && this.isSetTemplateId();
      boolean that_present_templateId = true && that.isSetTemplateId();
      if (this_present_templateId || that_present_templateId) {
        if (!(this_present_templateId && that_present_templateId))
          return false;
        if (!this.templateId.equals(that.templateId))
          return false;
      }

      boolean this_present_oldPosition = true;
      boolean that_present_oldPosition = true;
      if (this_present_oldPosition || that_present_oldPosition) {
        if (!(this_present_oldPosition && that_present_oldPosition))
          return false;
        if (this.oldPosition != that.oldPosition)
          return false;
      }

      boolean this_present_newPosition = true;
      boolean that_present_newPosition = true;
      if (this_present_newPosition || that_present_newPosition) {
        if (!(this_present_newPosition && that_present_newPosition))
          return false;
        if (this.newPosition != that.newPosition)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_templateSetId = true && (isSetTemplateSetId());
      list.add(present_templateSetId);
      if (present_templateSetId)
        list.add(templateSetId);

      boolean present_internalVersion = true;
      list.add(present_internalVersion);
      if (present_internalVersion)
        list.add(internalVersion);

      boolean present_templateId = true && (isSetTemplateId());
      list.add(present_templateId);
      if (present_templateId)
        list.add(templateId);

      boolean present_oldPosition = true;
      list.add(present_oldPosition);
      if (present_oldPosition)
        list.add(oldPosition);

      boolean present_newPosition = true;
      list.add(present_newPosition);
      if (present_newPosition)
        list.add(newPosition);

      return list.hashCode();
    }

    @Override
    public int compareTo(moveTemplate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTemplateSetId()).compareTo(other.isSetTemplateSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTemplateSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.templateSetId, other.templateSetId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetInternalVersion()).compareTo(other.isSetInternalVersion());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInternalVersion()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.internalVersion, other.internalVersion);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTemplateId()).compareTo(other.isSetTemplateId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTemplateId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.templateId, other.templateId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOldPosition()).compareTo(other.isSetOldPosition());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOldPosition()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oldPosition, other.oldPosition);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNewPosition()).compareTo(other.isSetNewPosition());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNewPosition()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newPosition, other.newPosition);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("moveTemplate_args(");
      boolean first = true;

      sb.append("templateSetId:");
      if (this.templateSetId == null) {
        sb.append("null");
      } else {
        sb.append(this.templateSetId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("internalVersion:");
      sb.append(this.internalVersion);
      first = false;
      if (!first) sb.append(", ");
      sb.append("templateId:");
      if (this.templateId == null) {
        sb.append("null");
      } else {
        sb.append(this.templateId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("oldPosition:");
      sb.append(this.oldPosition);
      first = false;
      if (!first) sb.append(", ");
      sb.append("newPosition:");
      sb.append(this.newPosition);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class moveTemplate_argsStandardSchemeFactory implements SchemeFactory {
      public moveTemplate_argsStandardScheme getScheme() {
        return new moveTemplate_argsStandardScheme();
      }
    }

    private static class moveTemplate_argsStandardScheme extends StandardScheme<moveTemplate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, moveTemplate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TEMPLATE_SET_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.templateSetId = iprot.readString();
                struct.setTemplateSetIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // INTERNAL_VERSION
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.internalVersion = iprot.readI32();
                struct.setInternalVersionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TEMPLATE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.templateId = iprot.readString();
                struct.setTemplateIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // OLD_POSITION
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.oldPosition = iprot.readI32();
                struct.setOldPositionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // NEW_POSITION
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.newPosition = iprot.readI32();
                struct.setNewPositionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, moveTemplate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.templateSetId != null) {
          oprot.writeFieldBegin(TEMPLATE_SET_ID_FIELD_DESC);
          oprot.writeString(struct.templateSetId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(INTERNAL_VERSION_FIELD_DESC);
        oprot.writeI32(struct.internalVersion);
        oprot.writeFieldEnd();
        if (struct.templateId != null) {
          oprot.writeFieldBegin(TEMPLATE_ID_FIELD_DESC);
          oprot.writeString(struct.templateId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(OLD_POSITION_FIELD_DESC);
        oprot.writeI32(struct.oldPosition);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(NEW_POSITION_FIELD_DESC);
        oprot.writeI32(struct.newPosition);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class moveTemplate_result implements org.apache.thrift.TBase<moveTemplate_result, moveTemplate_result._Fields>, java.io.Serializable, Cloneable, Comparable<moveTemplate_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("moveTemplate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new moveTemplate_resultStandardSchemeFactory());
    }

    public TemplateSet success; // required
    public com.wi.director.thrift.v1.common.SystemException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TemplateSet.class)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(moveTemplate_result.class, metaDataMap);
    }

    public moveTemplate_result() {
    }

    public moveTemplate_result(
      TemplateSet success,
      com.wi.director.thrift.v1.common.SystemException err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public moveTemplate_result(moveTemplate_result other) {
      if (other.isSetSuccess()) {
        this.success = new TemplateSet(other.success);
      }
      if (other.isSetErr()) {
        this.err = new com.wi.director.thrift.v1.common.SystemException(other.err);
      }
    }

    public moveTemplate_result deepCopy() {
      return new moveTemplate_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public TemplateSet getSuccess() {
      return this.success;
    }

    public moveTemplate_result setSuccess(TemplateSet success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.wi.director.thrift.v1.common.SystemException getErr() {
      return this.err;
    }

    public moveTemplate_result setErr(com.wi.director.thrift.v1.common.SystemException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TemplateSet)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((com.wi.director.thrift.v1.common.SystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof moveTemplate_result)
        return this.equals((moveTemplate_result)that);
      return false;
    }

    public boolean equals(moveTemplate_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(moveTemplate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("moveTemplate_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class moveTemplate_resultStandardSchemeFactory implements SchemeFactory {
      public moveTemplate_resultStandardScheme getScheme() {
        return new moveTemplate_resultStandardScheme();
      }
    }

    private static class moveTemplate_resultStandardScheme extends StandardScheme<moveTemplate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, moveTemplate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TemplateSet();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new com.wi.director.thrift.v1.common.SystemException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, moveTemplate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class removeTemplate_args implements org.apache.thrift.TBase<removeTemplate_args, removeTemplate_args._Fields>, java.io.Serializable, Cloneable, Comparable<removeTemplate_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeTemplate_args");

    private static final org.apache.thrift.protocol.TField TEMPLATE_SET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("templateSetId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField INTERNAL_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("internalVersion", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField TEMPLATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("templateId", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField POSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("position", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeTemplate_argsStandardSchemeFactory());
    }

    public String templateSetId; // required
    public int internalVersion; // required
    public String templateId; // required
    public int position; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TEMPLATE_SET_ID((short)1, "templateSetId"),
      INTERNAL_VERSION((short)2, "internalVersion"),
      TEMPLATE_ID((short)3, "templateId"),
      POSITION((short)4, "position");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TEMPLATE_SET_ID
            return TEMPLATE_SET_ID;
          case 2: // INTERNAL_VERSION
            return INTERNAL_VERSION;
          case 3: // TEMPLATE_ID
            return TEMPLATE_ID;
          case 4: // POSITION
            return POSITION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __INTERNALVERSION_ISSET_ID = 0;
    private static final int __POSITION_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TEMPLATE_SET_ID, new org.apache.thrift.meta_data.FieldMetaData("templateSetId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.INTERNAL_VERSION, new org.apache.thrift.meta_data.FieldMetaData("internalVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TEMPLATE_ID, new org.apache.thrift.meta_data.FieldMetaData("templateId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.POSITION, new org.apache.thrift.meta_data.FieldMetaData("position", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeTemplate_args.class, metaDataMap);
    }

    public removeTemplate_args() {
    }

    public removeTemplate_args(
      String templateSetId,
      int internalVersion,
      String templateId,
      int position)
    {
      this();
      this.templateSetId = templateSetId;
      this.internalVersion = internalVersion;
      setInternalVersionIsSet(true);
      this.templateId = templateId;
      this.position = position;
      setPositionIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeTemplate_args(removeTemplate_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetTemplateSetId()) {
        this.templateSetId = other.templateSetId;
      }
      this.internalVersion = other.internalVersion;
      if (other.isSetTemplateId()) {
        this.templateId = other.templateId;
      }
      this.position = other.position;
    }

    public removeTemplate_args deepCopy() {
      return new removeTemplate_args(this);
    }

    @Override
    public void clear() {
      this.templateSetId = null;
      setInternalVersionIsSet(false);
      this.internalVersion = 0;
      this.templateId = null;
      setPositionIsSet(false);
      this.position = 0;
    }

    public String getTemplateSetId() {
      return this.templateSetId;
    }

    public removeTemplate_args setTemplateSetId(String templateSetId) {
      this.templateSetId = templateSetId;
      return this;
    }

    public void unsetTemplateSetId() {
      this.templateSetId = null;
    }

    /** Returns true if field templateSetId is set (has been assigned a value) and false otherwise */
    public boolean isSetTemplateSetId() {
      return this.templateSetId != null;
    }

    public void setTemplateSetIdIsSet(boolean value) {
      if (!value) {
        this.templateSetId = null;
      }
    }

    public int getInternalVersion() {
      return this.internalVersion;
    }

    public removeTemplate_args setInternalVersion(int internalVersion) {
      this.internalVersion = internalVersion;
      setInternalVersionIsSet(true);
      return this;
    }

    public void unsetInternalVersion() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INTERNALVERSION_ISSET_ID);
    }

    /** Returns true if field internalVersion is set (has been assigned a value) and false otherwise */
    public boolean isSetInternalVersion() {
      return EncodingUtils.testBit(__isset_bitfield, __INTERNALVERSION_ISSET_ID);
    }

    public void setInternalVersionIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INTERNALVERSION_ISSET_ID, value);
    }

    public String getTemplateId() {
      return this.templateId;
    }

    public removeTemplate_args setTemplateId(String templateId) {
      this.templateId = templateId;
      return this;
    }

    public void unsetTemplateId() {
      this.templateId = null;
    }

    /** Returns true if field templateId is set (has been assigned a value) and false otherwise */
    public boolean isSetTemplateId() {
      return this.templateId != null;
    }

    public void setTemplateIdIsSet(boolean value) {
      if (!value) {
        this.templateId = null;
      }
    }

    public int getPosition() {
      return this.position;
    }

    public removeTemplate_args setPosition(int position) {
      this.position = position;
      setPositionIsSet(true);
      return this;
    }

    public void unsetPosition() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POSITION_ISSET_ID);
    }

    /** Returns true if field position is set (has been assigned a value) and false otherwise */
    public boolean isSetPosition() {
      return EncodingUtils.testBit(__isset_bitfield, __POSITION_ISSET_ID);
    }

    public void setPositionIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POSITION_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TEMPLATE_SET_ID:
        if (value == null) {
          unsetTemplateSetId();
        } else {
          setTemplateSetId((String)value);
        }
        break;

      case INTERNAL_VERSION:
        if (value == null) {
          unsetInternalVersion();
        } else {
          setInternalVersion((Integer)value);
        }
        break;

      case TEMPLATE_ID:
        if (value == null) {
          unsetTemplateId();
        } else {
          setTemplateId((String)value);
        }
        break;

      case POSITION:
        if (value == null) {
          unsetPosition();
        } else {
          setPosition((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TEMPLATE_SET_ID:
        return getTemplateSetId();

      case INTERNAL_VERSION:
        return getInternalVersion();

      case TEMPLATE_ID:
        return getTemplateId();

      case POSITION:
        return getPosition();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TEMPLATE_SET_ID:
        return isSetTemplateSetId();
      case INTERNAL_VERSION:
        return isSetInternalVersion();
      case TEMPLATE_ID:
        return isSetTemplateId();
      case POSITION:
        return isSetPosition();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeTemplate_args)
        return this.equals((removeTemplate_args)that);
      return false;
    }

    public boolean equals(removeTemplate_args that) {
      if (that == null)
        return false;

      boolean this_present_templateSetId = true && this.isSetTemplateSetId();
      boolean that_present_templateSetId = true && that.isSetTemplateSetId();
      if (this_present_templateSetId || that_present_templateSetId) {
        if (!(this_present_templateSetId && that_present_templateSetId))
          return false;
        if (!this.templateSetId.equals(that.templateSetId))
          return false;
      }

      boolean this_present_internalVersion = true;
      boolean that_present_internalVersion = true;
      if (this_present_internalVersion || that_present_internalVersion) {
        if (!(this_present_internalVersion && that_present_internalVersion))
          return false;
        if (this.internalVersion != that.internalVersion)
          return false;
      }

      boolean this_present_templateId = true && this.isSetTemplateId();
      boolean that_present_templateId = true && that.isSetTemplateId();
      if (this_present_templateId || that_present_templateId) {
        if (!(this_present_templateId && that_present_templateId))
          return false;
        if (!this.templateId.equals(that.templateId))
          return false;
      }

      boolean this_present_position = true;
      boolean that_present_position = true;
      if (this_present_position || that_present_position) {
        if (!(this_present_position && that_present_position))
          return false;
        if (this.position != that.position)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_templateSetId = true && (isSetTemplateSetId());
      list.add(present_templateSetId);
      if (present_templateSetId)
        list.add(templateSetId);

      boolean present_internalVersion = true;
      list.add(present_internalVersion);
      if (present_internalVersion)
        list.add(internalVersion);

      boolean present_templateId = true && (isSetTemplateId());
      list.add(present_templateId);
      if (present_templateId)
        list.add(templateId);

      boolean present_position = true;
      list.add(present_position);
      if (present_position)
        list.add(position);

      return list.hashCode();
    }

    @Override
    public int compareTo(removeTemplate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTemplateSetId()).compareTo(other.isSetTemplateSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTemplateSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.templateSetId, other.templateSetId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetInternalVersion()).compareTo(other.isSetInternalVersion());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInternalVersion()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.internalVersion, other.internalVersion);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTemplateId()).compareTo(other.isSetTemplateId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTemplateId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.templateId, other.templateId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPosition()).compareTo(other.isSetPosition());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPosition()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.position, other.position);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeTemplate_args(");
      boolean first = true;

      sb.append("templateSetId:");
      if (this.templateSetId == null) {
        sb.append("null");
      } else {
        sb.append(this.templateSetId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("internalVersion:");
      sb.append(this.internalVersion);
      first = false;
      if (!first) sb.append(", ");
      sb.append("templateId:");
      if (this.templateId == null) {
        sb.append("null");
      } else {
        sb.append(this.templateId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("position:");
      sb.append(this.position);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeTemplate_argsStandardSchemeFactory implements SchemeFactory {
      public removeTemplate_argsStandardScheme getScheme() {
        return new removeTemplate_argsStandardScheme();
      }
    }

    private static class removeTemplate_argsStandardScheme extends StandardScheme<removeTemplate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeTemplate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TEMPLATE_SET_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.templateSetId = iprot.readString();
                struct.setTemplateSetIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // INTERNAL_VERSION
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.internalVersion = iprot.readI32();
                struct.setInternalVersionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TEMPLATE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.templateId = iprot.readString();
                struct.setTemplateIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // POSITION
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.position = iprot.readI32();
                struct.setPositionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeTemplate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.templateSetId != null) {
          oprot.writeFieldBegin(TEMPLATE_SET_ID_FIELD_DESC);
          oprot.writeString(struct.templateSetId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(INTERNAL_VERSION_FIELD_DESC);
        oprot.writeI32(struct.internalVersion);
        oprot.writeFieldEnd();
        if (struct.templateId != null) {
          oprot.writeFieldBegin(TEMPLATE_ID_FIELD_DESC);
          oprot.writeString(struct.templateId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(POSITION_FIELD_DESC);
        oprot.writeI32(struct.position);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class removeTemplate_result implements org.apache.thrift.TBase<removeTemplate_result, removeTemplate_result._Fields>, java.io.Serializable, Cloneable, Comparable<removeTemplate_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeTemplate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeTemplate_resultStandardSchemeFactory());
    }

    public TemplateSet success; // required
    public com.wi.director.thrift.v1.common.SystemException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TemplateSet.class)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeTemplate_result.class, metaDataMap);
    }

    public removeTemplate_result() {
    }

    public removeTemplate_result(
      TemplateSet success,
      com.wi.director.thrift.v1.common.SystemException err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeTemplate_result(removeTemplate_result other) {
      if (other.isSetSuccess()) {
        this.success = new TemplateSet(other.success);
      }
      if (other.isSetErr()) {
        this.err = new com.wi.director.thrift.v1.common.SystemException(other.err);
      }
    }

    public removeTemplate_result deepCopy() {
      return new removeTemplate_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public TemplateSet getSuccess() {
      return this.success;
    }

    public removeTemplate_result setSuccess(TemplateSet success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.wi.director.thrift.v1.common.SystemException getErr() {
      return this.err;
    }

    public removeTemplate_result setErr(com.wi.director.thrift.v1.common.SystemException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TemplateSet)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((com.wi.director.thrift.v1.common.SystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeTemplate_result)
        return this.equals((removeTemplate_result)that);
      return false;
    }

    public boolean equals(removeTemplate_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(removeTemplate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeTemplate_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeTemplate_resultStandardSchemeFactory implements SchemeFactory {
      public removeTemplate_resultStandardScheme getScheme() {
        return new removeTemplate_resultStandardScheme();
      }
    }

    private static class removeTemplate_resultStandardScheme extends StandardScheme<removeTemplate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeTemplate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TemplateSet();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new com.wi.director.thrift.v1.common.SystemException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeTemplate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class setTemplateList_args implements org.apache.thrift.TBase<setTemplateList_args, setTemplateList_args._Fields>, java.io.Serializable, Cloneable, Comparable<setTemplateList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setTemplateList_args");

    private static final org.apache.thrift.protocol.TField TEMPLATE_SET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("templateSetId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField INTERNAL_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("internalVersion", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField MOVEMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("movements", org.apache.thrift.protocol.TType.LIST, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setTemplateList_argsStandardSchemeFactory());
    }

    public String templateSetId; // required
    public int internalVersion; // required
    public List<com.wi.director.thrift.v1.common.ListActions> movements; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TEMPLATE_SET_ID((short)1, "templateSetId"),
      INTERNAL_VERSION((short)2, "internalVersion"),
      MOVEMENTS((short)3, "movements");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TEMPLATE_SET_ID
            return TEMPLATE_SET_ID;
          case 2: // INTERNAL_VERSION
            return INTERNAL_VERSION;
          case 3: // MOVEMENTS
            return MOVEMENTS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __INTERNALVERSION_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TEMPLATE_SET_ID, new org.apache.thrift.meta_data.FieldMetaData("templateSetId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.INTERNAL_VERSION, new org.apache.thrift.meta_data.FieldMetaData("internalVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.MOVEMENTS, new org.apache.thrift.meta_data.FieldMetaData("movements", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.common.ListActions.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setTemplateList_args.class, metaDataMap);
    }

    public setTemplateList_args() {
    }

    public setTemplateList_args(
      String templateSetId,
      int internalVersion,
      List<com.wi.director.thrift.v1.common.ListActions> movements)
    {
      this();
      this.templateSetId = templateSetId;
      this.internalVersion = internalVersion;
      setInternalVersionIsSet(true);
      this.movements = movements;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setTemplateList_args(setTemplateList_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetTemplateSetId()) {
        this.templateSetId = other.templateSetId;
      }
      this.internalVersion = other.internalVersion;
      if (other.isSetMovements()) {
        List<com.wi.director.thrift.v1.common.ListActions> __this__movements = new ArrayList<com.wi.director.thrift.v1.common.ListActions>(other.movements.size());
        for (com.wi.director.thrift.v1.common.ListActions other_element : other.movements) {
          __this__movements.add(new com.wi.director.thrift.v1.common.ListActions(other_element));
        }
        this.movements = __this__movements;
      }
    }

    public setTemplateList_args deepCopy() {
      return new setTemplateList_args(this);
    }

    @Override
    public void clear() {
      this.templateSetId = null;
      setInternalVersionIsSet(false);
      this.internalVersion = 0;
      this.movements = null;
    }

    public String getTemplateSetId() {
      return this.templateSetId;
    }

    public setTemplateList_args setTemplateSetId(String templateSetId) {
      this.templateSetId = templateSetId;
      return this;
    }

    public void unsetTemplateSetId() {
      this.templateSetId = null;
    }

    /** Returns true if field templateSetId is set (has been assigned a value) and false otherwise */
    public boolean isSetTemplateSetId() {
      return this.templateSetId != null;
    }

    public void setTemplateSetIdIsSet(boolean value) {
      if (!value) {
        this.templateSetId = null;
      }
    }

    public int getInternalVersion() {
      return this.internalVersion;
    }

    public setTemplateList_args setInternalVersion(int internalVersion) {
      this.internalVersion = internalVersion;
      setInternalVersionIsSet(true);
      return this;
    }

    public void unsetInternalVersion() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INTERNALVERSION_ISSET_ID);
    }

    /** Returns true if field internalVersion is set (has been assigned a value) and false otherwise */
    public boolean isSetInternalVersion() {
      return EncodingUtils.testBit(__isset_bitfield, __INTERNALVERSION_ISSET_ID);
    }

    public void setInternalVersionIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INTERNALVERSION_ISSET_ID, value);
    }

    public int getMovementsSize() {
      return (this.movements == null) ? 0 : this.movements.size();
    }

    public java.util.Iterator<com.wi.director.thrift.v1.common.ListActions> getMovementsIterator() {
      return (this.movements == null) ? null : this.movements.iterator();
    }

    public void addToMovements(com.wi.director.thrift.v1.common.ListActions elem) {
      if (this.movements == null) {
        this.movements = new ArrayList<com.wi.director.thrift.v1.common.ListActions>();
      }
      this.movements.add(elem);
    }

    public List<com.wi.director.thrift.v1.common.ListActions> getMovements() {
      return this.movements;
    }

    public setTemplateList_args setMovements(List<com.wi.director.thrift.v1.common.ListActions> movements) {
      this.movements = movements;
      return this;
    }

    public void unsetMovements() {
      this.movements = null;
    }

    /** Returns true if field movements is set (has been assigned a value) and false otherwise */
    public boolean isSetMovements() {
      return this.movements != null;
    }

    public void setMovementsIsSet(boolean value) {
      if (!value) {
        this.movements = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TEMPLATE_SET_ID:
        if (value == null) {
          unsetTemplateSetId();
        } else {
          setTemplateSetId((String)value);
        }
        break;

      case INTERNAL_VERSION:
        if (value == null) {
          unsetInternalVersion();
        } else {
          setInternalVersion((Integer)value);
        }
        break;

      case MOVEMENTS:
        if (value == null) {
          unsetMovements();
        } else {
          setMovements((List<com.wi.director.thrift.v1.common.ListActions>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TEMPLATE_SET_ID:
        return getTemplateSetId();

      case INTERNAL_VERSION:
        return getInternalVersion();

      case MOVEMENTS:
        return getMovements();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TEMPLATE_SET_ID:
        return isSetTemplateSetId();
      case INTERNAL_VERSION:
        return isSetInternalVersion();
      case MOVEMENTS:
        return isSetMovements();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setTemplateList_args)
        return this.equals((setTemplateList_args)that);
      return false;
    }

    public boolean equals(setTemplateList_args that) {
      if (that == null)
        return false;

      boolean this_present_templateSetId = true && this.isSetTemplateSetId();
      boolean that_present_templateSetId = true && that.isSetTemplateSetId();
      if (this_present_templateSetId || that_present_templateSetId) {
        if (!(this_present_templateSetId && that_present_templateSetId))
          return false;
        if (!this.templateSetId.equals(that.templateSetId))
          return false;
      }

      boolean this_present_internalVersion = true;
      boolean that_present_internalVersion = true;
      if (this_present_internalVersion || that_present_internalVersion) {
        if (!(this_present_internalVersion && that_present_internalVersion))
          return false;
        if (this.internalVersion != that.internalVersion)
          return false;
      }

      boolean this_present_movements = true && this.isSetMovements();
      boolean that_present_movements = true && that.isSetMovements();
      if (this_present_movements || that_present_movements) {
        if (!(this_present_movements && that_present_movements))
          return false;
        if (!this.movements.equals(that.movements))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_templateSetId = true && (isSetTemplateSetId());
      list.add(present_templateSetId);
      if (present_templateSetId)
        list.add(templateSetId);

      boolean present_internalVersion = true;
      list.add(present_internalVersion);
      if (present_internalVersion)
        list.add(internalVersion);

      boolean present_movements = true && (isSetMovements());
      list.add(present_movements);
      if (present_movements)
        list.add(movements);

      return list.hashCode();
    }

    @Override
    public int compareTo(setTemplateList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTemplateSetId()).compareTo(other.isSetTemplateSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTemplateSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.templateSetId, other.templateSetId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetInternalVersion()).compareTo(other.isSetInternalVersion());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInternalVersion()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.internalVersion, other.internalVersion);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMovements()).compareTo(other.isSetMovements());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMovements()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.movements, other.movements);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setTemplateList_args(");
      boolean first = true;

      sb.append("templateSetId:");
      if (this.templateSetId == null) {
        sb.append("null");
      } else {
        sb.append(this.templateSetId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("internalVersion:");
      sb.append(this.internalVersion);
      first = false;
      if (!first) sb.append(", ");
      sb.append("movements:");
      if (this.movements == null) {
        sb.append("null");
      } else {
        sb.append(this.movements);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setTemplateList_argsStandardSchemeFactory implements SchemeFactory {
      public setTemplateList_argsStandardScheme getScheme() {
        return new setTemplateList_argsStandardScheme();
      }
    }

    private static class setTemplateList_argsStandardScheme extends StandardScheme<setTemplateList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setTemplateList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TEMPLATE_SET_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.templateSetId = iprot.readString();
                struct.setTemplateSetIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // INTERNAL_VERSION
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.internalVersion = iprot.readI32();
                struct.setInternalVersionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MOVEMENTS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list47 = iprot.readListBegin();
                  struct.movements = new ArrayList<com.wi.director.thrift.v1.common.ListActions>(_list47.size);
                  com.wi.director.thrift.v1.common.ListActions _elem48;
                  for (int _i49 = 0; _i49 < _list47.size; ++_i49)
                  {
                    _elem48 = new com.wi.director.thrift.v1.common.ListActions();
                    _elem48.read(iprot);
                    struct.movements.add(_elem48);
                  }
                  iprot.readListEnd();
                }
                struct.setMovementsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setTemplateList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.templateSetId != null) {
          oprot.writeFieldBegin(TEMPLATE_SET_ID_FIELD_DESC);
          oprot.writeString(struct.templateSetId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(INTERNAL_VERSION_FIELD_DESC);
        oprot.writeI32(struct.internalVersion);
        oprot.writeFieldEnd();
        if (struct.movements != null) {
          oprot.writeFieldBegin(MOVEMENTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.movements.size()));
            for (com.wi.director.thrift.v1.common.ListActions _iter50 : struct.movements)
            {
              _iter50.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class setTemplateList_result implements org.apache.thrift.TBase<setTemplateList_result, setTemplateList_result._Fields>, java.io.Serializable, Cloneable, Comparable<setTemplateList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setTemplateList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setTemplateList_resultStandardSchemeFactory());
    }

    public TemplateSet success; // required
    public com.wi.director.thrift.v1.common.SystemException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TemplateSet.class)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setTemplateList_result.class, metaDataMap);
    }

    public setTemplateList_result() {
    }

    public setTemplateList_result(
      TemplateSet success,
      com.wi.director.thrift.v1.common.SystemException err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setTemplateList_result(setTemplateList_result other) {
      if (other.isSetSuccess()) {
        this.success = new TemplateSet(other.success);
      }
      if (other.isSetErr()) {
        this.err = new com.wi.director.thrift.v1.common.SystemException(other.err);
      }
    }

    public setTemplateList_result deepCopy() {
      return new setTemplateList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public TemplateSet getSuccess() {
      return this.success;
    }

    public setTemplateList_result setSuccess(TemplateSet success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.wi.director.thrift.v1.common.SystemException getErr() {
      return this.err;
    }

    public setTemplateList_result setErr(com.wi.director.thrift.v1.common.SystemException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TemplateSet)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((com.wi.director.thrift.v1.common.SystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setTemplateList_result)
        return this.equals((setTemplateList_result)that);
      return false;
    }

    public boolean equals(setTemplateList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(setTemplateList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setTemplateList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setTemplateList_resultStandardSchemeFactory implements SchemeFactory {
      public setTemplateList_resultStandardScheme getScheme() {
        return new setTemplateList_resultStandardScheme();
      }
    }

    private static class setTemplateList_resultStandardScheme extends StandardScheme<setTemplateList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setTemplateList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TemplateSet();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new com.wi.director.thrift.v1.common.SystemException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setTemplateList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class getTags_args implements org.apache.thrift.TBase<getTags_args, getTags_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTags_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTags_args");

    private static final org.apache.thrift.protocol.TField TEMPLATE_SET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("templateSetId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTags_argsStandardSchemeFactory());
    }

    public String templateSetId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TEMPLATE_SET_ID((short)1, "templateSetId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TEMPLATE_SET_ID
            return TEMPLATE_SET_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TEMPLATE_SET_ID, new org.apache.thrift.meta_data.FieldMetaData("templateSetId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTags_args.class, metaDataMap);
    }

    public getTags_args() {
    }

    public getTags_args(
      String templateSetId)
    {
      this();
      this.templateSetId = templateSetId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTags_args(getTags_args other) {
      if (other.isSetTemplateSetId()) {
        this.templateSetId = other.templateSetId;
      }
    }

    public getTags_args deepCopy() {
      return new getTags_args(this);
    }

    @Override
    public void clear() {
      this.templateSetId = null;
    }

    public String getTemplateSetId() {
      return this.templateSetId;
    }

    public getTags_args setTemplateSetId(String templateSetId) {
      this.templateSetId = templateSetId;
      return this;
    }

    public void unsetTemplateSetId() {
      this.templateSetId = null;
    }

    /** Returns true if field templateSetId is set (has been assigned a value) and false otherwise */
    public boolean isSetTemplateSetId() {
      return this.templateSetId != null;
    }

    public void setTemplateSetIdIsSet(boolean value) {
      if (!value) {
        this.templateSetId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TEMPLATE_SET_ID:
        if (value == null) {
          unsetTemplateSetId();
        } else {
          setTemplateSetId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TEMPLATE_SET_ID:
        return getTemplateSetId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TEMPLATE_SET_ID:
        return isSetTemplateSetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTags_args)
        return this.equals((getTags_args)that);
      return false;
    }

    public boolean equals(getTags_args that) {
      if (that == null)
        return false;

      boolean this_present_templateSetId = true && this.isSetTemplateSetId();
      boolean that_present_templateSetId = true && that.isSetTemplateSetId();
      if (this_present_templateSetId || that_present_templateSetId) {
        if (!(this_present_templateSetId && that_present_templateSetId))
          return false;
        if (!this.templateSetId.equals(that.templateSetId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_templateSetId = true && (isSetTemplateSetId());
      list.add(present_templateSetId);
      if (present_templateSetId)
        list.add(templateSetId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTags_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTemplateSetId()).compareTo(other.isSetTemplateSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTemplateSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.templateSetId, other.templateSetId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTags_args(");
      boolean first = true;

      sb.append("templateSetId:");
      if (this.templateSetId == null) {
        sb.append("null");
      } else {
        sb.append(this.templateSetId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTags_argsStandardSchemeFactory implements SchemeFactory {
      public getTags_argsStandardScheme getScheme() {
        return new getTags_argsStandardScheme();
      }
    }

    private static class getTags_argsStandardScheme extends StandardScheme<getTags_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTags_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TEMPLATE_SET_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.templateSetId = iprot.readString();
                struct.setTemplateSetIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTags_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.templateSetId != null) {
          oprot.writeFieldBegin(TEMPLATE_SET_ID_FIELD_DESC);
          oprot.writeString(struct.templateSetId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class getTags_result implements org.apache.thrift.TBase<getTags_result, getTags_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTags_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTags_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTags_resultStandardSchemeFactory());
    }

    public List<com.wi.director.thrift.v1.jobtemplate.TemplateTag> success; // required
    public com.wi.director.thrift.v1.common.SystemException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.jobtemplate.TemplateTag.class))));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTags_result.class, metaDataMap);
    }

    public getTags_result() {
    }

    public getTags_result(
      List<com.wi.director.thrift.v1.jobtemplate.TemplateTag> success,
      com.wi.director.thrift.v1.common.SystemException err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTags_result(getTags_result other) {
      if (other.isSetSuccess()) {
        List<com.wi.director.thrift.v1.jobtemplate.TemplateTag> __this__success = new ArrayList<com.wi.director.thrift.v1.jobtemplate.TemplateTag>(other.success.size());
        for (com.wi.director.thrift.v1.jobtemplate.TemplateTag other_element : other.success) {
          __this__success.add(new com.wi.director.thrift.v1.jobtemplate.TemplateTag(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetErr()) {
        this.err = new com.wi.director.thrift.v1.common.SystemException(other.err);
      }
    }

    public getTags_result deepCopy() {
      return new getTags_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.wi.director.thrift.v1.jobtemplate.TemplateTag> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.wi.director.thrift.v1.jobtemplate.TemplateTag elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.wi.director.thrift.v1.jobtemplate.TemplateTag>();
      }
      this.success.add(elem);
    }

    public List<com.wi.director.thrift.v1.jobtemplate.TemplateTag> getSuccess() {
      return this.success;
    }

    public getTags_result setSuccess(List<com.wi.director.thrift.v1.jobtemplate.TemplateTag> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.wi.director.thrift.v1.common.SystemException getErr() {
      return this.err;
    }

    public getTags_result setErr(com.wi.director.thrift.v1.common.SystemException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.wi.director.thrift.v1.jobtemplate.TemplateTag>)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((com.wi.director.thrift.v1.common.SystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTags_result)
        return this.equals((getTags_result)that);
      return false;
    }

    public boolean equals(getTags_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTags_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTags_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTags_resultStandardSchemeFactory implements SchemeFactory {
      public getTags_resultStandardScheme getScheme() {
        return new getTags_resultStandardScheme();
      }
    }

    private static class getTags_resultStandardScheme extends StandardScheme<getTags_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTags_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list51 = iprot.readListBegin();
                  struct.success = new ArrayList<com.wi.director.thrift.v1.jobtemplate.TemplateTag>(_list51.size);
                  com.wi.director.thrift.v1.jobtemplate.TemplateTag _elem52;
                  for (int _i53 = 0; _i53 < _list51.size; ++_i53)
                  {
                    _elem52 = new com.wi.director.thrift.v1.jobtemplate.TemplateTag();
                    _elem52.read(iprot);
                    struct.success.add(_elem52);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new com.wi.director.thrift.v1.common.SystemException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTags_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.wi.director.thrift.v1.jobtemplate.TemplateTag _iter54 : struct.success)
            {
              _iter54.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class updateTags_args implements org.apache.thrift.TBase<updateTags_args, updateTags_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateTags_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateTags_args");

    private static final org.apache.thrift.protocol.TField TEMPLATE_SET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("templateSetId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ADDED_FIELD_DESC = new org.apache.thrift.protocol.TField("added", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField REMOVED_TAG_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("removedTagIds", org.apache.thrift.protocol.TType.LIST, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateTags_argsStandardSchemeFactory());
    }

    public String templateSetId; // required
    public List<com.wi.director.thrift.v1.jobtemplate.TemplateTag> added; // required
    public List<String> removedTagIds; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TEMPLATE_SET_ID((short)1, "templateSetId"),
      ADDED((short)2, "added"),
      REMOVED_TAG_IDS((short)3, "removedTagIds");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TEMPLATE_SET_ID
            return TEMPLATE_SET_ID;
          case 2: // ADDED
            return ADDED;
          case 3: // REMOVED_TAG_IDS
            return REMOVED_TAG_IDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TEMPLATE_SET_ID, new org.apache.thrift.meta_data.FieldMetaData("templateSetId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ADDED, new org.apache.thrift.meta_data.FieldMetaData("added", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.jobtemplate.TemplateTag.class))));
      tmpMap.put(_Fields.REMOVED_TAG_IDS, new org.apache.thrift.meta_data.FieldMetaData("removedTagIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateTags_args.class, metaDataMap);
    }

    public updateTags_args() {
    }

    public updateTags_args(
      String templateSetId,
      List<com.wi.director.thrift.v1.jobtemplate.TemplateTag> added,
      List<String> removedTagIds)
    {
      this();
      this.templateSetId = templateSetId;
      this.added = added;
      this.removedTagIds = removedTagIds;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateTags_args(updateTags_args other) {
      if (other.isSetTemplateSetId()) {
        this.templateSetId = other.templateSetId;
      }
      if (other.isSetAdded()) {
        List<com.wi.director.thrift.v1.jobtemplate.TemplateTag> __this__added = new ArrayList<com.wi.director.thrift.v1.jobtemplate.TemplateTag>(other.added.size());
        for (com.wi.director.thrift.v1.jobtemplate.TemplateTag other_element : other.added) {
          __this__added.add(new com.wi.director.thrift.v1.jobtemplate.TemplateTag(other_element));
        }
        this.added = __this__added;
      }
      if (other.isSetRemovedTagIds()) {
        List<String> __this__removedTagIds = new ArrayList<String>(other.removedTagIds);
        this.removedTagIds = __this__removedTagIds;
      }
    }

    public updateTags_args deepCopy() {
      return new updateTags_args(this);
    }

    @Override
    public void clear() {
      this.templateSetId = null;
      this.added = null;
      this.removedTagIds = null;
    }

    public String getTemplateSetId() {
      return this.templateSetId;
    }

    public updateTags_args setTemplateSetId(String templateSetId) {
      this.templateSetId = templateSetId;
      return this;
    }

    public void unsetTemplateSetId() {
      this.templateSetId = null;
    }

    /** Returns true if field templateSetId is set (has been assigned a value) and false otherwise */
    public boolean isSetTemplateSetId() {
      return this.templateSetId != null;
    }

    public void setTemplateSetIdIsSet(boolean value) {
      if (!value) {
        this.templateSetId = null;
      }
    }

    public int getAddedSize() {
      return (this.added == null) ? 0 : this.added.size();
    }

    public java.util.Iterator<com.wi.director.thrift.v1.jobtemplate.TemplateTag> getAddedIterator() {
      return (this.added == null) ? null : this.added.iterator();
    }

    public void addToAdded(com.wi.director.thrift.v1.jobtemplate.TemplateTag elem) {
      if (this.added == null) {
        this.added = new ArrayList<com.wi.director.thrift.v1.jobtemplate.TemplateTag>();
      }
      this.added.add(elem);
    }

    public List<com.wi.director.thrift.v1.jobtemplate.TemplateTag> getAdded() {
      return this.added;
    }

    public updateTags_args setAdded(List<com.wi.director.thrift.v1.jobtemplate.TemplateTag> added) {
      this.added = added;
      return this;
    }

    public void unsetAdded() {
      this.added = null;
    }

    /** Returns true if field added is set (has been assigned a value) and false otherwise */
    public boolean isSetAdded() {
      return this.added != null;
    }

    public void setAddedIsSet(boolean value) {
      if (!value) {
        this.added = null;
      }
    }

    public int getRemovedTagIdsSize() {
      return (this.removedTagIds == null) ? 0 : this.removedTagIds.size();
    }

    public java.util.Iterator<String> getRemovedTagIdsIterator() {
      return (this.removedTagIds == null) ? null : this.removedTagIds.iterator();
    }

    public void addToRemovedTagIds(String elem) {
      if (this.removedTagIds == null) {
        this.removedTagIds = new ArrayList<String>();
      }
      this.removedTagIds.add(elem);
    }

    public List<String> getRemovedTagIds() {
      return this.removedTagIds;
    }

    public updateTags_args setRemovedTagIds(List<String> removedTagIds) {
      this.removedTagIds = removedTagIds;
      return this;
    }

    public void unsetRemovedTagIds() {
      this.removedTagIds = null;
    }

    /** Returns true if field removedTagIds is set (has been assigned a value) and false otherwise */
    public boolean isSetRemovedTagIds() {
      return this.removedTagIds != null;
    }

    public void setRemovedTagIdsIsSet(boolean value) {
      if (!value) {
        this.removedTagIds = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TEMPLATE_SET_ID:
        if (value == null) {
          unsetTemplateSetId();
        } else {
          setTemplateSetId((String)value);
        }
        break;

      case ADDED:
        if (value == null) {
          unsetAdded();
        } else {
          setAdded((List<com.wi.director.thrift.v1.jobtemplate.TemplateTag>)value);
        }
        break;

      case REMOVED_TAG_IDS:
        if (value == null) {
          unsetRemovedTagIds();
        } else {
          setRemovedTagIds((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TEMPLATE_SET_ID:
        return getTemplateSetId();

      case ADDED:
        return getAdded();

      case REMOVED_TAG_IDS:
        return getRemovedTagIds();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TEMPLATE_SET_ID:
        return isSetTemplateSetId();
      case ADDED:
        return isSetAdded();
      case REMOVED_TAG_IDS:
        return isSetRemovedTagIds();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateTags_args)
        return this.equals((updateTags_args)that);
      return false;
    }

    public boolean equals(updateTags_args that) {
      if (that == null)
        return false;

      boolean this_present_templateSetId = true && this.isSetTemplateSetId();
      boolean that_present_templateSetId = true && that.isSetTemplateSetId();
      if (this_present_templateSetId || that_present_templateSetId) {
        if (!(this_present_templateSetId && that_present_templateSetId))
          return false;
        if (!this.templateSetId.equals(that.templateSetId))
          return false;
      }

      boolean this_present_added = true && this.isSetAdded();
      boolean that_present_added = true && that.isSetAdded();
      if (this_present_added || that_present_added) {
        if (!(this_present_added && that_present_added))
          return false;
        if (!this.added.equals(that.added))
          return false;
      }

      boolean this_present_removedTagIds = true && this.isSetRemovedTagIds();
      boolean that_present_removedTagIds = true && that.isSetRemovedTagIds();
      if (this_present_removedTagIds || that_present_removedTagIds) {
        if (!(this_present_removedTagIds && that_present_removedTagIds))
          return false;
        if (!this.removedTagIds.equals(that.removedTagIds))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_templateSetId = true && (isSetTemplateSetId());
      list.add(present_templateSetId);
      if (present_templateSetId)
        list.add(templateSetId);

      boolean present_added = true && (isSetAdded());
      list.add(present_added);
      if (present_added)
        list.add(added);

      boolean present_removedTagIds = true && (isSetRemovedTagIds());
      list.add(present_removedTagIds);
      if (present_removedTagIds)
        list.add(removedTagIds);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateTags_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTemplateSetId()).compareTo(other.isSetTemplateSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTemplateSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.templateSetId, other.templateSetId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAdded()).compareTo(other.isSetAdded());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAdded()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.added, other.added);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRemovedTagIds()).compareTo(other.isSetRemovedTagIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRemovedTagIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.removedTagIds, other.removedTagIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateTags_args(");
      boolean first = true;

      sb.append("templateSetId:");
      if (this.templateSetId == null) {
        sb.append("null");
      } else {
        sb.append(this.templateSetId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("added:");
      if (this.added == null) {
        sb.append("null");
      } else {
        sb.append(this.added);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("removedTagIds:");
      if (this.removedTagIds == null) {
        sb.append("null");
      } else {
        sb.append(this.removedTagIds);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateTags_argsStandardSchemeFactory implements SchemeFactory {
      public updateTags_argsStandardScheme getScheme() {
        return new updateTags_argsStandardScheme();
      }
    }

    private static class updateTags_argsStandardScheme extends StandardScheme<updateTags_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateTags_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TEMPLATE_SET_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.templateSetId = iprot.readString();
                struct.setTemplateSetIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ADDED
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list55 = iprot.readListBegin();
                  struct.added = new ArrayList<com.wi.director.thrift.v1.jobtemplate.TemplateTag>(_list55.size);
                  com.wi.director.thrift.v1.jobtemplate.TemplateTag _elem56;
                  for (int _i57 = 0; _i57 < _list55.size; ++_i57)
                  {
                    _elem56 = new com.wi.director.thrift.v1.jobtemplate.TemplateTag();
                    _elem56.read(iprot);
                    struct.added.add(_elem56);
                  }
                  iprot.readListEnd();
                }
                struct.setAddedIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // REMOVED_TAG_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list58 = iprot.readListBegin();
                  struct.removedTagIds = new ArrayList<String>(_list58.size);
                  String _elem59;
                  for (int _i60 = 0; _i60 < _list58.size; ++_i60)
                  {
                    _elem59 = iprot.readString();
                    struct.removedTagIds.add(_elem59);
                  }
                  iprot.readListEnd();
                }
                struct.setRemovedTagIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateTags_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.templateSetId != null) {
          oprot.writeFieldBegin(TEMPLATE_SET_ID_FIELD_DESC);
          oprot.writeString(struct.templateSetId);
          oprot.writeFieldEnd();
        }
        if (struct.added != null) {
          oprot.writeFieldBegin(ADDED_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.added.size()));
            for (com.wi.director.thrift.v1.jobtemplate.TemplateTag _iter61 : struct.added)
            {
              _iter61.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.removedTagIds != null) {
          oprot.writeFieldBegin(REMOVED_TAG_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.removedTagIds.size()));
            for (String _iter62 : struct.removedTagIds)
            {
              oprot.writeString(_iter62);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class updateTags_result implements org.apache.thrift.TBase<updateTags_result, updateTags_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateTags_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateTags_result");

    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateTags_resultStandardSchemeFactory());
    }

    public com.wi.director.thrift.v1.common.SystemException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateTags_result.class, metaDataMap);
    }

    public updateTags_result() {
    }

    public updateTags_result(
      com.wi.director.thrift.v1.common.SystemException err)
    {
      this();
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateTags_result(updateTags_result other) {
      if (other.isSetErr()) {
        this.err = new com.wi.director.thrift.v1.common.SystemException(other.err);
      }
    }

    public updateTags_result deepCopy() {
      return new updateTags_result(this);
    }

    @Override
    public void clear() {
      this.err = null;
    }

    public com.wi.director.thrift.v1.common.SystemException getErr() {
      return this.err;
    }

    public updateTags_result setErr(com.wi.director.thrift.v1.common.SystemException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((com.wi.director.thrift.v1.common.SystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateTags_result)
        return this.equals((updateTags_result)that);
      return false;
    }

    public boolean equals(updateTags_result that) {
      if (that == null)
        return false;

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateTags_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateTags_result(");
      boolean first = true;

      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateTags_resultStandardSchemeFactory implements SchemeFactory {
      public updateTags_resultStandardScheme getScheme() {
        return new updateTags_resultStandardScheme();
      }
    }

    private static class updateTags_resultStandardScheme extends StandardScheme<updateTags_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateTags_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new com.wi.director.thrift.v1.common.SystemException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateTags_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class acquireLock_args implements org.apache.thrift.TBase<acquireLock_args, acquireLock_args._Fields>, java.io.Serializable, Cloneable, Comparable<acquireLock_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("acquireLock_args");

    private static final org.apache.thrift.protocol.TField TEMPLATE_SET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("templateSetId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new acquireLock_argsStandardSchemeFactory());
    }

    public String templateSetId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TEMPLATE_SET_ID((short)1, "templateSetId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TEMPLATE_SET_ID
            return TEMPLATE_SET_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TEMPLATE_SET_ID, new org.apache.thrift.meta_data.FieldMetaData("templateSetId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(acquireLock_args.class, metaDataMap);
    }

    public acquireLock_args() {
    }

    public acquireLock_args(
      String templateSetId)
    {
      this();
      this.templateSetId = templateSetId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public acquireLock_args(acquireLock_args other) {
      if (other.isSetTemplateSetId()) {
        this.templateSetId = other.templateSetId;
      }
    }

    public acquireLock_args deepCopy() {
      return new acquireLock_args(this);
    }

    @Override
    public void clear() {
      this.templateSetId = null;
    }

    public String getTemplateSetId() {
      return this.templateSetId;
    }

    public acquireLock_args setTemplateSetId(String templateSetId) {
      this.templateSetId = templateSetId;
      return this;
    }

    public void unsetTemplateSetId() {
      this.templateSetId = null;
    }

    /** Returns true if field templateSetId is set (has been assigned a value) and false otherwise */
    public boolean isSetTemplateSetId() {
      return this.templateSetId != null;
    }

    public void setTemplateSetIdIsSet(boolean value) {
      if (!value) {
        this.templateSetId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TEMPLATE_SET_ID:
        if (value == null) {
          unsetTemplateSetId();
        } else {
          setTemplateSetId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TEMPLATE_SET_ID:
        return getTemplateSetId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TEMPLATE_SET_ID:
        return isSetTemplateSetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof acquireLock_args)
        return this.equals((acquireLock_args)that);
      return false;
    }

    public boolean equals(acquireLock_args that) {
      if (that == null)
        return false;

      boolean this_present_templateSetId = true && this.isSetTemplateSetId();
      boolean that_present_templateSetId = true && that.isSetTemplateSetId();
      if (this_present_templateSetId || that_present_templateSetId) {
        if (!(this_present_templateSetId && that_present_templateSetId))
          return false;
        if (!this.templateSetId.equals(that.templateSetId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_templateSetId = true && (isSetTemplateSetId());
      list.add(present_templateSetId);
      if (present_templateSetId)
        list.add(templateSetId);

      return list.hashCode();
    }

    @Override
    public int compareTo(acquireLock_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTemplateSetId()).compareTo(other.isSetTemplateSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTemplateSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.templateSetId, other.templateSetId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("acquireLock_args(");
      boolean first = true;

      sb.append("templateSetId:");
      if (this.templateSetId == null) {
        sb.append("null");
      } else {
        sb.append(this.templateSetId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class acquireLock_argsStandardSchemeFactory implements SchemeFactory {
      public acquireLock_argsStandardScheme getScheme() {
        return new acquireLock_argsStandardScheme();
      }
    }

    private static class acquireLock_argsStandardScheme extends StandardScheme<acquireLock_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, acquireLock_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TEMPLATE_SET_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.templateSetId = iprot.readString();
                struct.setTemplateSetIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, acquireLock_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.templateSetId != null) {
          oprot.writeFieldBegin(TEMPLATE_SET_ID_FIELD_DESC);
          oprot.writeString(struct.templateSetId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class acquireLock_result implements org.apache.thrift.TBase<acquireLock_result, acquireLock_result._Fields>, java.io.Serializable, Cloneable, Comparable<acquireLock_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("acquireLock_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField FAIL_ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("failErr", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new acquireLock_resultStandardSchemeFactory());
    }

    public com.wi.director.thrift.v1.jobtemplate.JobTemplateLock success; // required
    public com.wi.director.thrift.v1.common.SystemException err; // required
    public com.wi.director.thrift.v1.jobtemplate.JobTemplateLockFailed failErr; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err"),
      FAIL_ERR((short)2, "failErr");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          case 2: // FAIL_ERR
            return FAIL_ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.jobtemplate.JobTemplateLock.class)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.FAIL_ERR, new org.apache.thrift.meta_data.FieldMetaData("failErr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(acquireLock_result.class, metaDataMap);
    }

    public acquireLock_result() {
    }

    public acquireLock_result(
      com.wi.director.thrift.v1.jobtemplate.JobTemplateLock success,
      com.wi.director.thrift.v1.common.SystemException err,
      com.wi.director.thrift.v1.jobtemplate.JobTemplateLockFailed failErr)
    {
      this();
      this.success = success;
      this.err = err;
      this.failErr = failErr;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public acquireLock_result(acquireLock_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.wi.director.thrift.v1.jobtemplate.JobTemplateLock(other.success);
      }
      if (other.isSetErr()) {
        this.err = new com.wi.director.thrift.v1.common.SystemException(other.err);
      }
      if (other.isSetFailErr()) {
        this.failErr = new com.wi.director.thrift.v1.jobtemplate.JobTemplateLockFailed(other.failErr);
      }
    }

    public acquireLock_result deepCopy() {
      return new acquireLock_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
      this.failErr = null;
    }

    public com.wi.director.thrift.v1.jobtemplate.JobTemplateLock getSuccess() {
      return this.success;
    }

    public acquireLock_result setSuccess(com.wi.director.thrift.v1.jobtemplate.JobTemplateLock success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.wi.director.thrift.v1.common.SystemException getErr() {
      return this.err;
    }

    public acquireLock_result setErr(com.wi.director.thrift.v1.common.SystemException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public com.wi.director.thrift.v1.jobtemplate.JobTemplateLockFailed getFailErr() {
      return this.failErr;
    }

    public acquireLock_result setFailErr(com.wi.director.thrift.v1.jobtemplate.JobTemplateLockFailed failErr) {
      this.failErr = failErr;
      return this;
    }

    public void unsetFailErr() {
      this.failErr = null;
    }

    /** Returns true if field failErr is set (has been assigned a value) and false otherwise */
    public boolean isSetFailErr() {
      return this.failErr != null;
    }

    public void setFailErrIsSet(boolean value) {
      if (!value) {
        this.failErr = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.wi.director.thrift.v1.jobtemplate.JobTemplateLock)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((com.wi.director.thrift.v1.common.SystemException)value);
        }
        break;

      case FAIL_ERR:
        if (value == null) {
          unsetFailErr();
        } else {
          setFailErr((com.wi.director.thrift.v1.jobtemplate.JobTemplateLockFailed)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      case FAIL_ERR:
        return getFailErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      case FAIL_ERR:
        return isSetFailErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof acquireLock_result)
        return this.equals((acquireLock_result)that);
      return false;
    }

    public boolean equals(acquireLock_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      boolean this_present_failErr = true && this.isSetFailErr();
      boolean that_present_failErr = true && that.isSetFailErr();
      if (this_present_failErr || that_present_failErr) {
        if (!(this_present_failErr && that_present_failErr))
          return false;
        if (!this.failErr.equals(that.failErr))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      boolean present_failErr = true && (isSetFailErr());
      list.add(present_failErr);
      if (present_failErr)
        list.add(failErr);

      return list.hashCode();
    }

    @Override
    public int compareTo(acquireLock_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFailErr()).compareTo(other.isSetFailErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFailErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.failErr, other.failErr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("acquireLock_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("failErr:");
      if (this.failErr == null) {
        sb.append("null");
      } else {
        sb.append(this.failErr);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class acquireLock_resultStandardSchemeFactory implements SchemeFactory {
      public acquireLock_resultStandardScheme getScheme() {
        return new acquireLock_resultStandardScheme();
      }
    }

    private static class acquireLock_resultStandardScheme extends StandardScheme<acquireLock_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, acquireLock_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.wi.director.thrift.v1.jobtemplate.JobTemplateLock();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new com.wi.director.thrift.v1.common.SystemException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FAIL_ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.failErr = new com.wi.director.thrift.v1.jobtemplate.JobTemplateLockFailed();
                struct.failErr.read(iprot);
                struct.setFailErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, acquireLock_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.failErr != null) {
          oprot.writeFieldBegin(FAIL_ERR_FIELD_DESC);
          struct.failErr.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class forceAcquireLock_args implements org.apache.thrift.TBase<forceAcquireLock_args, forceAcquireLock_args._Fields>, java.io.Serializable, Cloneable, Comparable<forceAcquireLock_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("forceAcquireLock_args");

    private static final org.apache.thrift.protocol.TField TEMPLATE_SET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("templateSetId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new forceAcquireLock_argsStandardSchemeFactory());
    }

    public String templateSetId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TEMPLATE_SET_ID((short)1, "templateSetId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TEMPLATE_SET_ID
            return TEMPLATE_SET_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TEMPLATE_SET_ID, new org.apache.thrift.meta_data.FieldMetaData("templateSetId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(forceAcquireLock_args.class, metaDataMap);
    }

    public forceAcquireLock_args() {
    }

    public forceAcquireLock_args(
      String templateSetId)
    {
      this();
      this.templateSetId = templateSetId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public forceAcquireLock_args(forceAcquireLock_args other) {
      if (other.isSetTemplateSetId()) {
        this.templateSetId = other.templateSetId;
      }
    }

    public forceAcquireLock_args deepCopy() {
      return new forceAcquireLock_args(this);
    }

    @Override
    public void clear() {
      this.templateSetId = null;
    }

    public String getTemplateSetId() {
      return this.templateSetId;
    }

    public forceAcquireLock_args setTemplateSetId(String templateSetId) {
      this.templateSetId = templateSetId;
      return this;
    }

    public void unsetTemplateSetId() {
      this.templateSetId = null;
    }

    /** Returns true if field templateSetId is set (has been assigned a value) and false otherwise */
    public boolean isSetTemplateSetId() {
      return this.templateSetId != null;
    }

    public void setTemplateSetIdIsSet(boolean value) {
      if (!value) {
        this.templateSetId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TEMPLATE_SET_ID:
        if (value == null) {
          unsetTemplateSetId();
        } else {
          setTemplateSetId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TEMPLATE_SET_ID:
        return getTemplateSetId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TEMPLATE_SET_ID:
        return isSetTemplateSetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof forceAcquireLock_args)
        return this.equals((forceAcquireLock_args)that);
      return false;
    }

    public boolean equals(forceAcquireLock_args that) {
      if (that == null)
        return false;

      boolean this_present_templateSetId = true && this.isSetTemplateSetId();
      boolean that_present_templateSetId = true && that.isSetTemplateSetId();
      if (this_present_templateSetId || that_present_templateSetId) {
        if (!(this_present_templateSetId && that_present_templateSetId))
          return false;
        if (!this.templateSetId.equals(that.templateSetId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_templateSetId = true && (isSetTemplateSetId());
      list.add(present_templateSetId);
      if (present_templateSetId)
        list.add(templateSetId);

      return list.hashCode();
    }

    @Override
    public int compareTo(forceAcquireLock_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTemplateSetId()).compareTo(other.isSetTemplateSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTemplateSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.templateSetId, other.templateSetId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("forceAcquireLock_args(");
      boolean first = true;

      sb.append("templateSetId:");
      if (this.templateSetId == null) {
        sb.append("null");
      } else {
        sb.append(this.templateSetId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class forceAcquireLock_argsStandardSchemeFactory implements SchemeFactory {
      public forceAcquireLock_argsStandardScheme getScheme() {
        return new forceAcquireLock_argsStandardScheme();
      }
    }

    private static class forceAcquireLock_argsStandardScheme extends StandardScheme<forceAcquireLock_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, forceAcquireLock_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TEMPLATE_SET_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.templateSetId = iprot.readString();
                struct.setTemplateSetIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, forceAcquireLock_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.templateSetId != null) {
          oprot.writeFieldBegin(TEMPLATE_SET_ID_FIELD_DESC);
          oprot.writeString(struct.templateSetId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class forceAcquireLock_result implements org.apache.thrift.TBase<forceAcquireLock_result, forceAcquireLock_result._Fields>, java.io.Serializable, Cloneable, Comparable<forceAcquireLock_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("forceAcquireLock_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new forceAcquireLock_resultStandardSchemeFactory());
    }

    public com.wi.director.thrift.v1.jobtemplate.ForceAcquireResponse success; // required
    public com.wi.director.thrift.v1.common.SystemException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.jobtemplate.ForceAcquireResponse.class)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(forceAcquireLock_result.class, metaDataMap);
    }

    public forceAcquireLock_result() {
    }

    public forceAcquireLock_result(
      com.wi.director.thrift.v1.jobtemplate.ForceAcquireResponse success,
      com.wi.director.thrift.v1.common.SystemException err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public forceAcquireLock_result(forceAcquireLock_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.wi.director.thrift.v1.jobtemplate.ForceAcquireResponse(other.success);
      }
      if (other.isSetErr()) {
        this.err = new com.wi.director.thrift.v1.common.SystemException(other.err);
      }
    }

    public forceAcquireLock_result deepCopy() {
      return new forceAcquireLock_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public com.wi.director.thrift.v1.jobtemplate.ForceAcquireResponse getSuccess() {
      return this.success;
    }

    public forceAcquireLock_result setSuccess(com.wi.director.thrift.v1.jobtemplate.ForceAcquireResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.wi.director.thrift.v1.common.SystemException getErr() {
      return this.err;
    }

    public forceAcquireLock_result setErr(com.wi.director.thrift.v1.common.SystemException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.wi.director.thrift.v1.jobtemplate.ForceAcquireResponse)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((com.wi.director.thrift.v1.common.SystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof forceAcquireLock_result)
        return this.equals((forceAcquireLock_result)that);
      return false;
    }

    public boolean equals(forceAcquireLock_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(forceAcquireLock_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("forceAcquireLock_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class forceAcquireLock_resultStandardSchemeFactory implements SchemeFactory {
      public forceAcquireLock_resultStandardScheme getScheme() {
        return new forceAcquireLock_resultStandardScheme();
      }
    }

    private static class forceAcquireLock_resultStandardScheme extends StandardScheme<forceAcquireLock_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, forceAcquireLock_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.wi.director.thrift.v1.jobtemplate.ForceAcquireResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new com.wi.director.thrift.v1.common.SystemException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, forceAcquireLock_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class releaseLock_args implements org.apache.thrift.TBase<releaseLock_args, releaseLock_args._Fields>, java.io.Serializable, Cloneable, Comparable<releaseLock_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("releaseLock_args");

    private static final org.apache.thrift.protocol.TField TEMPLATE_SET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("templateSetId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new releaseLock_argsStandardSchemeFactory());
    }

    public String templateSetId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TEMPLATE_SET_ID((short)1, "templateSetId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TEMPLATE_SET_ID
            return TEMPLATE_SET_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TEMPLATE_SET_ID, new org.apache.thrift.meta_data.FieldMetaData("templateSetId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(releaseLock_args.class, metaDataMap);
    }

    public releaseLock_args() {
    }

    public releaseLock_args(
      String templateSetId)
    {
      this();
      this.templateSetId = templateSetId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public releaseLock_args(releaseLock_args other) {
      if (other.isSetTemplateSetId()) {
        this.templateSetId = other.templateSetId;
      }
    }

    public releaseLock_args deepCopy() {
      return new releaseLock_args(this);
    }

    @Override
    public void clear() {
      this.templateSetId = null;
    }

    public String getTemplateSetId() {
      return this.templateSetId;
    }

    public releaseLock_args setTemplateSetId(String templateSetId) {
      this.templateSetId = templateSetId;
      return this;
    }

    public void unsetTemplateSetId() {
      this.templateSetId = null;
    }

    /** Returns true if field templateSetId is set (has been assigned a value) and false otherwise */
    public boolean isSetTemplateSetId() {
      return this.templateSetId != null;
    }

    public void setTemplateSetIdIsSet(boolean value) {
      if (!value) {
        this.templateSetId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TEMPLATE_SET_ID:
        if (value == null) {
          unsetTemplateSetId();
        } else {
          setTemplateSetId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TEMPLATE_SET_ID:
        return getTemplateSetId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TEMPLATE_SET_ID:
        return isSetTemplateSetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof releaseLock_args)
        return this.equals((releaseLock_args)that);
      return false;
    }

    public boolean equals(releaseLock_args that) {
      if (that == null)
        return false;

      boolean this_present_templateSetId = true && this.isSetTemplateSetId();
      boolean that_present_templateSetId = true && that.isSetTemplateSetId();
      if (this_present_templateSetId || that_present_templateSetId) {
        if (!(this_present_templateSetId && that_present_templateSetId))
          return false;
        if (!this.templateSetId.equals(that.templateSetId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_templateSetId = true && (isSetTemplateSetId());
      list.add(present_templateSetId);
      if (present_templateSetId)
        list.add(templateSetId);

      return list.hashCode();
    }

    @Override
    public int compareTo(releaseLock_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTemplateSetId()).compareTo(other.isSetTemplateSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTemplateSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.templateSetId, other.templateSetId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("releaseLock_args(");
      boolean first = true;

      sb.append("templateSetId:");
      if (this.templateSetId == null) {
        sb.append("null");
      } else {
        sb.append(this.templateSetId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class releaseLock_argsStandardSchemeFactory implements SchemeFactory {
      public releaseLock_argsStandardScheme getScheme() {
        return new releaseLock_argsStandardScheme();
      }
    }

    private static class releaseLock_argsStandardScheme extends StandardScheme<releaseLock_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, releaseLock_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TEMPLATE_SET_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.templateSetId = iprot.readString();
                struct.setTemplateSetIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, releaseLock_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.templateSetId != null) {
          oprot.writeFieldBegin(TEMPLATE_SET_ID_FIELD_DESC);
          oprot.writeString(struct.templateSetId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class releaseLock_result implements org.apache.thrift.TBase<releaseLock_result, releaseLock_result._Fields>, java.io.Serializable, Cloneable, Comparable<releaseLock_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("releaseLock_result");

    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new releaseLock_resultStandardSchemeFactory());
    }

    public com.wi.director.thrift.v1.common.SystemException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(releaseLock_result.class, metaDataMap);
    }

    public releaseLock_result() {
    }

    public releaseLock_result(
      com.wi.director.thrift.v1.common.SystemException err)
    {
      this();
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public releaseLock_result(releaseLock_result other) {
      if (other.isSetErr()) {
        this.err = new com.wi.director.thrift.v1.common.SystemException(other.err);
      }
    }

    public releaseLock_result deepCopy() {
      return new releaseLock_result(this);
    }

    @Override
    public void clear() {
      this.err = null;
    }

    public com.wi.director.thrift.v1.common.SystemException getErr() {
      return this.err;
    }

    public releaseLock_result setErr(com.wi.director.thrift.v1.common.SystemException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((com.wi.director.thrift.v1.common.SystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof releaseLock_result)
        return this.equals((releaseLock_result)that);
      return false;
    }

    public boolean equals(releaseLock_result that) {
      if (that == null)
        return false;

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(releaseLock_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("releaseLock_result(");
      boolean first = true;

      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class releaseLock_resultStandardSchemeFactory implements SchemeFactory {
      public releaseLock_resultStandardScheme getScheme() {
        return new releaseLock_resultStandardScheme();
      }
    }

    private static class releaseLock_resultStandardScheme extends StandardScheme<releaseLock_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, releaseLock_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new com.wi.director.thrift.v1.common.SystemException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, releaseLock_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class queryCombined_args implements org.apache.thrift.TBase<queryCombined_args, queryCombined_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryCombined_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryCombined_args");

    private static final org.apache.thrift.protocol.TField SELECT_OPTS_FIELD_DESC = new org.apache.thrift.protocol.TField("selectOpts", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField WHERE_OPTS_FIELD_DESC = new org.apache.thrift.protocol.TField("whereOpts", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("order", org.apache.thrift.protocol.TType.LIST, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryCombined_argsStandardSchemeFactory());
    }

    public TemplateUnionSelectOpts selectOpts; // required
    public TemplateUnionWhereOpts whereOpts; // required
    public List<com.wi.director.thrift.v1.jobtemplate.TemplateOrder> order; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SELECT_OPTS((short)1, "selectOpts"),
      WHERE_OPTS((short)2, "whereOpts"),
      ORDER((short)3, "order");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SELECT_OPTS
            return SELECT_OPTS;
          case 2: // WHERE_OPTS
            return WHERE_OPTS;
          case 3: // ORDER
            return ORDER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SELECT_OPTS, new org.apache.thrift.meta_data.FieldMetaData("selectOpts", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TemplateUnionSelectOpts.class)));
      tmpMap.put(_Fields.WHERE_OPTS, new org.apache.thrift.meta_data.FieldMetaData("whereOpts", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TemplateUnionWhereOpts.class)));
      tmpMap.put(_Fields.ORDER, new org.apache.thrift.meta_data.FieldMetaData("order", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.jobtemplate.TemplateOrder.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryCombined_args.class, metaDataMap);
    }

    public queryCombined_args() {
    }

    public queryCombined_args(
      TemplateUnionSelectOpts selectOpts,
      TemplateUnionWhereOpts whereOpts,
      List<com.wi.director.thrift.v1.jobtemplate.TemplateOrder> order)
    {
      this();
      this.selectOpts = selectOpts;
      this.whereOpts = whereOpts;
      this.order = order;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryCombined_args(queryCombined_args other) {
      if (other.isSetSelectOpts()) {
        this.selectOpts = new TemplateUnionSelectOpts(other.selectOpts);
      }
      if (other.isSetWhereOpts()) {
        this.whereOpts = new TemplateUnionWhereOpts(other.whereOpts);
      }
      if (other.isSetOrder()) {
        List<com.wi.director.thrift.v1.jobtemplate.TemplateOrder> __this__order = new ArrayList<com.wi.director.thrift.v1.jobtemplate.TemplateOrder>(other.order.size());
        for (com.wi.director.thrift.v1.jobtemplate.TemplateOrder other_element : other.order) {
          __this__order.add(new com.wi.director.thrift.v1.jobtemplate.TemplateOrder(other_element));
        }
        this.order = __this__order;
      }
    }

    public queryCombined_args deepCopy() {
      return new queryCombined_args(this);
    }

    @Override
    public void clear() {
      this.selectOpts = null;
      this.whereOpts = null;
      this.order = null;
    }

    public TemplateUnionSelectOpts getSelectOpts() {
      return this.selectOpts;
    }

    public queryCombined_args setSelectOpts(TemplateUnionSelectOpts selectOpts) {
      this.selectOpts = selectOpts;
      return this;
    }

    public void unsetSelectOpts() {
      this.selectOpts = null;
    }

    /** Returns true if field selectOpts is set (has been assigned a value) and false otherwise */
    public boolean isSetSelectOpts() {
      return this.selectOpts != null;
    }

    public void setSelectOptsIsSet(boolean value) {
      if (!value) {
        this.selectOpts = null;
      }
    }

    public TemplateUnionWhereOpts getWhereOpts() {
      return this.whereOpts;
    }

    public queryCombined_args setWhereOpts(TemplateUnionWhereOpts whereOpts) {
      this.whereOpts = whereOpts;
      return this;
    }

    public void unsetWhereOpts() {
      this.whereOpts = null;
    }

    /** Returns true if field whereOpts is set (has been assigned a value) and false otherwise */
    public boolean isSetWhereOpts() {
      return this.whereOpts != null;
    }

    public void setWhereOptsIsSet(boolean value) {
      if (!value) {
        this.whereOpts = null;
      }
    }

    public int getOrderSize() {
      return (this.order == null) ? 0 : this.order.size();
    }

    public java.util.Iterator<com.wi.director.thrift.v1.jobtemplate.TemplateOrder> getOrderIterator() {
      return (this.order == null) ? null : this.order.iterator();
    }

    public void addToOrder(com.wi.director.thrift.v1.jobtemplate.TemplateOrder elem) {
      if (this.order == null) {
        this.order = new ArrayList<com.wi.director.thrift.v1.jobtemplate.TemplateOrder>();
      }
      this.order.add(elem);
    }

    public List<com.wi.director.thrift.v1.jobtemplate.TemplateOrder> getOrder() {
      return this.order;
    }

    public queryCombined_args setOrder(List<com.wi.director.thrift.v1.jobtemplate.TemplateOrder> order) {
      this.order = order;
      return this;
    }

    public void unsetOrder() {
      this.order = null;
    }

    /** Returns true if field order is set (has been assigned a value) and false otherwise */
    public boolean isSetOrder() {
      return this.order != null;
    }

    public void setOrderIsSet(boolean value) {
      if (!value) {
        this.order = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SELECT_OPTS:
        if (value == null) {
          unsetSelectOpts();
        } else {
          setSelectOpts((TemplateUnionSelectOpts)value);
        }
        break;

      case WHERE_OPTS:
        if (value == null) {
          unsetWhereOpts();
        } else {
          setWhereOpts((TemplateUnionWhereOpts)value);
        }
        break;

      case ORDER:
        if (value == null) {
          unsetOrder();
        } else {
          setOrder((List<com.wi.director.thrift.v1.jobtemplate.TemplateOrder>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SELECT_OPTS:
        return getSelectOpts();

      case WHERE_OPTS:
        return getWhereOpts();

      case ORDER:
        return getOrder();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SELECT_OPTS:
        return isSetSelectOpts();
      case WHERE_OPTS:
        return isSetWhereOpts();
      case ORDER:
        return isSetOrder();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryCombined_args)
        return this.equals((queryCombined_args)that);
      return false;
    }

    public boolean equals(queryCombined_args that) {
      if (that == null)
        return false;

      boolean this_present_selectOpts = true && this.isSetSelectOpts();
      boolean that_present_selectOpts = true && that.isSetSelectOpts();
      if (this_present_selectOpts || that_present_selectOpts) {
        if (!(this_present_selectOpts && that_present_selectOpts))
          return false;
        if (!this.selectOpts.equals(that.selectOpts))
          return false;
      }

      boolean this_present_whereOpts = true && this.isSetWhereOpts();
      boolean that_present_whereOpts = true && that.isSetWhereOpts();
      if (this_present_whereOpts || that_present_whereOpts) {
        if (!(this_present_whereOpts && that_present_whereOpts))
          return false;
        if (!this.whereOpts.equals(that.whereOpts))
          return false;
      }

      boolean this_present_order = true && this.isSetOrder();
      boolean that_present_order = true && that.isSetOrder();
      if (this_present_order || that_present_order) {
        if (!(this_present_order && that_present_order))
          return false;
        if (!this.order.equals(that.order))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_selectOpts = true && (isSetSelectOpts());
      list.add(present_selectOpts);
      if (present_selectOpts)
        list.add(selectOpts);

      boolean present_whereOpts = true && (isSetWhereOpts());
      list.add(present_whereOpts);
      if (present_whereOpts)
        list.add(whereOpts);

      boolean present_order = true && (isSetOrder());
      list.add(present_order);
      if (present_order)
        list.add(order);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryCombined_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSelectOpts()).compareTo(other.isSetSelectOpts());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSelectOpts()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.selectOpts, other.selectOpts);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetWhereOpts()).compareTo(other.isSetWhereOpts());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWhereOpts()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.whereOpts, other.whereOpts);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOrder()).compareTo(other.isSetOrder());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrder()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.order, other.order);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryCombined_args(");
      boolean first = true;

      sb.append("selectOpts:");
      if (this.selectOpts == null) {
        sb.append("null");
      } else {
        sb.append(this.selectOpts);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("whereOpts:");
      if (this.whereOpts == null) {
        sb.append("null");
      } else {
        sb.append(this.whereOpts);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("order:");
      if (this.order == null) {
        sb.append("null");
      } else {
        sb.append(this.order);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (selectOpts != null) {
        selectOpts.validate();
      }
      if (whereOpts != null) {
        whereOpts.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryCombined_argsStandardSchemeFactory implements SchemeFactory {
      public queryCombined_argsStandardScheme getScheme() {
        return new queryCombined_argsStandardScheme();
      }
    }

    private static class queryCombined_argsStandardScheme extends StandardScheme<queryCombined_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryCombined_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SELECT_OPTS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.selectOpts = new TemplateUnionSelectOpts();
                struct.selectOpts.read(iprot);
                struct.setSelectOptsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // WHERE_OPTS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.whereOpts = new TemplateUnionWhereOpts();
                struct.whereOpts.read(iprot);
                struct.setWhereOptsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ORDER
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list63 = iprot.readListBegin();
                  struct.order = new ArrayList<com.wi.director.thrift.v1.jobtemplate.TemplateOrder>(_list63.size);
                  com.wi.director.thrift.v1.jobtemplate.TemplateOrder _elem64;
                  for (int _i65 = 0; _i65 < _list63.size; ++_i65)
                  {
                    _elem64 = new com.wi.director.thrift.v1.jobtemplate.TemplateOrder();
                    _elem64.read(iprot);
                    struct.order.add(_elem64);
                  }
                  iprot.readListEnd();
                }
                struct.setOrderIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryCombined_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.selectOpts != null) {
          oprot.writeFieldBegin(SELECT_OPTS_FIELD_DESC);
          struct.selectOpts.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.whereOpts != null) {
          oprot.writeFieldBegin(WHERE_OPTS_FIELD_DESC);
          struct.whereOpts.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.order != null) {
          oprot.writeFieldBegin(ORDER_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.order.size()));
            for (com.wi.director.thrift.v1.jobtemplate.TemplateOrder _iter66 : struct.order)
            {
              _iter66.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class queryCombined_result implements org.apache.thrift.TBase<queryCombined_result, queryCombined_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryCombined_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryCombined_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryCombined_resultStandardSchemeFactory());
    }

    public TemplateUnionQueryResult success; // required
    public com.wi.director.thrift.v1.common.SystemException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TemplateUnionQueryResult.class)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryCombined_result.class, metaDataMap);
    }

    public queryCombined_result() {
    }

    public queryCombined_result(
      TemplateUnionQueryResult success,
      com.wi.director.thrift.v1.common.SystemException err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryCombined_result(queryCombined_result other) {
      if (other.isSetSuccess()) {
        this.success = new TemplateUnionQueryResult(other.success);
      }
      if (other.isSetErr()) {
        this.err = new com.wi.director.thrift.v1.common.SystemException(other.err);
      }
    }

    public queryCombined_result deepCopy() {
      return new queryCombined_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public TemplateUnionQueryResult getSuccess() {
      return this.success;
    }

    public queryCombined_result setSuccess(TemplateUnionQueryResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.wi.director.thrift.v1.common.SystemException getErr() {
      return this.err;
    }

    public queryCombined_result setErr(com.wi.director.thrift.v1.common.SystemException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TemplateUnionQueryResult)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((com.wi.director.thrift.v1.common.SystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryCombined_result)
        return this.equals((queryCombined_result)that);
      return false;
    }

    public boolean equals(queryCombined_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryCombined_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryCombined_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryCombined_resultStandardSchemeFactory implements SchemeFactory {
      public queryCombined_resultStandardScheme getScheme() {
        return new queryCombined_resultStandardScheme();
      }
    }

    private static class queryCombined_resultStandardScheme extends StandardScheme<queryCombined_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryCombined_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TemplateUnionQueryResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new com.wi.director.thrift.v1.common.SystemException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryCombined_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class fetchUpdated_args implements org.apache.thrift.TBase<fetchUpdated_args, fetchUpdated_args._Fields>, java.io.Serializable, Cloneable, Comparable<fetchUpdated_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fetchUpdated_args");

    private static final org.apache.thrift.protocol.TField SELECT_OPTS_FIELD_DESC = new org.apache.thrift.protocol.TField("selectOpts", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TEMPLATE_ARGS_FIELD_DESC = new org.apache.thrift.protocol.TField("templateArgs", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField TEMPLATE_SET_ARGS_FIELD_DESC = new org.apache.thrift.protocol.TField("templateSetArgs", org.apache.thrift.protocol.TType.LIST, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new fetchUpdated_argsStandardSchemeFactory());
    }

    public TemplateUnionSelectOpts selectOpts; // required
    public List<VersionRef> templateArgs; // required
    public List<VersionRef> templateSetArgs; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SELECT_OPTS((short)1, "selectOpts"),
      TEMPLATE_ARGS((short)2, "templateArgs"),
      TEMPLATE_SET_ARGS((short)3, "templateSetArgs");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SELECT_OPTS
            return SELECT_OPTS;
          case 2: // TEMPLATE_ARGS
            return TEMPLATE_ARGS;
          case 3: // TEMPLATE_SET_ARGS
            return TEMPLATE_SET_ARGS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SELECT_OPTS, new org.apache.thrift.meta_data.FieldMetaData("selectOpts", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TemplateUnionSelectOpts.class)));
      tmpMap.put(_Fields.TEMPLATE_ARGS, new org.apache.thrift.meta_data.FieldMetaData("templateArgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, VersionRef.class))));
      tmpMap.put(_Fields.TEMPLATE_SET_ARGS, new org.apache.thrift.meta_data.FieldMetaData("templateSetArgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, VersionRef.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fetchUpdated_args.class, metaDataMap);
    }

    public fetchUpdated_args() {
    }

    public fetchUpdated_args(
      TemplateUnionSelectOpts selectOpts,
      List<VersionRef> templateArgs,
      List<VersionRef> templateSetArgs)
    {
      this();
      this.selectOpts = selectOpts;
      this.templateArgs = templateArgs;
      this.templateSetArgs = templateSetArgs;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fetchUpdated_args(fetchUpdated_args other) {
      if (other.isSetSelectOpts()) {
        this.selectOpts = new TemplateUnionSelectOpts(other.selectOpts);
      }
      if (other.isSetTemplateArgs()) {
        List<VersionRef> __this__templateArgs = new ArrayList<VersionRef>(other.templateArgs.size());
        for (VersionRef other_element : other.templateArgs) {
          __this__templateArgs.add(new VersionRef(other_element));
        }
        this.templateArgs = __this__templateArgs;
      }
      if (other.isSetTemplateSetArgs()) {
        List<VersionRef> __this__templateSetArgs = new ArrayList<VersionRef>(other.templateSetArgs.size());
        for (VersionRef other_element : other.templateSetArgs) {
          __this__templateSetArgs.add(new VersionRef(other_element));
        }
        this.templateSetArgs = __this__templateSetArgs;
      }
    }

    public fetchUpdated_args deepCopy() {
      return new fetchUpdated_args(this);
    }

    @Override
    public void clear() {
      this.selectOpts = null;
      this.templateArgs = null;
      this.templateSetArgs = null;
    }

    public TemplateUnionSelectOpts getSelectOpts() {
      return this.selectOpts;
    }

    public fetchUpdated_args setSelectOpts(TemplateUnionSelectOpts selectOpts) {
      this.selectOpts = selectOpts;
      return this;
    }

    public void unsetSelectOpts() {
      this.selectOpts = null;
    }

    /** Returns true if field selectOpts is set (has been assigned a value) and false otherwise */
    public boolean isSetSelectOpts() {
      return this.selectOpts != null;
    }

    public void setSelectOptsIsSet(boolean value) {
      if (!value) {
        this.selectOpts = null;
      }
    }

    public int getTemplateArgsSize() {
      return (this.templateArgs == null) ? 0 : this.templateArgs.size();
    }

    public java.util.Iterator<VersionRef> getTemplateArgsIterator() {
      return (this.templateArgs == null) ? null : this.templateArgs.iterator();
    }

    public void addToTemplateArgs(VersionRef elem) {
      if (this.templateArgs == null) {
        this.templateArgs = new ArrayList<VersionRef>();
      }
      this.templateArgs.add(elem);
    }

    public List<VersionRef> getTemplateArgs() {
      return this.templateArgs;
    }

    public fetchUpdated_args setTemplateArgs(List<VersionRef> templateArgs) {
      this.templateArgs = templateArgs;
      return this;
    }

    public void unsetTemplateArgs() {
      this.templateArgs = null;
    }

    /** Returns true if field templateArgs is set (has been assigned a value) and false otherwise */
    public boolean isSetTemplateArgs() {
      return this.templateArgs != null;
    }

    public void setTemplateArgsIsSet(boolean value) {
      if (!value) {
        this.templateArgs = null;
      }
    }

    public int getTemplateSetArgsSize() {
      return (this.templateSetArgs == null) ? 0 : this.templateSetArgs.size();
    }

    public java.util.Iterator<VersionRef> getTemplateSetArgsIterator() {
      return (this.templateSetArgs == null) ? null : this.templateSetArgs.iterator();
    }

    public void addToTemplateSetArgs(VersionRef elem) {
      if (this.templateSetArgs == null) {
        this.templateSetArgs = new ArrayList<VersionRef>();
      }
      this.templateSetArgs.add(elem);
    }

    public List<VersionRef> getTemplateSetArgs() {
      return this.templateSetArgs;
    }

    public fetchUpdated_args setTemplateSetArgs(List<VersionRef> templateSetArgs) {
      this.templateSetArgs = templateSetArgs;
      return this;
    }

    public void unsetTemplateSetArgs() {
      this.templateSetArgs = null;
    }

    /** Returns true if field templateSetArgs is set (has been assigned a value) and false otherwise */
    public boolean isSetTemplateSetArgs() {
      return this.templateSetArgs != null;
    }

    public void setTemplateSetArgsIsSet(boolean value) {
      if (!value) {
        this.templateSetArgs = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SELECT_OPTS:
        if (value == null) {
          unsetSelectOpts();
        } else {
          setSelectOpts((TemplateUnionSelectOpts)value);
        }
        break;

      case TEMPLATE_ARGS:
        if (value == null) {
          unsetTemplateArgs();
        } else {
          setTemplateArgs((List<VersionRef>)value);
        }
        break;

      case TEMPLATE_SET_ARGS:
        if (value == null) {
          unsetTemplateSetArgs();
        } else {
          setTemplateSetArgs((List<VersionRef>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SELECT_OPTS:
        return getSelectOpts();

      case TEMPLATE_ARGS:
        return getTemplateArgs();

      case TEMPLATE_SET_ARGS:
        return getTemplateSetArgs();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SELECT_OPTS:
        return isSetSelectOpts();
      case TEMPLATE_ARGS:
        return isSetTemplateArgs();
      case TEMPLATE_SET_ARGS:
        return isSetTemplateSetArgs();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof fetchUpdated_args)
        return this.equals((fetchUpdated_args)that);
      return false;
    }

    public boolean equals(fetchUpdated_args that) {
      if (that == null)
        return false;

      boolean this_present_selectOpts = true && this.isSetSelectOpts();
      boolean that_present_selectOpts = true && that.isSetSelectOpts();
      if (this_present_selectOpts || that_present_selectOpts) {
        if (!(this_present_selectOpts && that_present_selectOpts))
          return false;
        if (!this.selectOpts.equals(that.selectOpts))
          return false;
      }

      boolean this_present_templateArgs = true && this.isSetTemplateArgs();
      boolean that_present_templateArgs = true && that.isSetTemplateArgs();
      if (this_present_templateArgs || that_present_templateArgs) {
        if (!(this_present_templateArgs && that_present_templateArgs))
          return false;
        if (!this.templateArgs.equals(that.templateArgs))
          return false;
      }

      boolean this_present_templateSetArgs = true && this.isSetTemplateSetArgs();
      boolean that_present_templateSetArgs = true && that.isSetTemplateSetArgs();
      if (this_present_templateSetArgs || that_present_templateSetArgs) {
        if (!(this_present_templateSetArgs && that_present_templateSetArgs))
          return false;
        if (!this.templateSetArgs.equals(that.templateSetArgs))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_selectOpts = true && (isSetSelectOpts());
      list.add(present_selectOpts);
      if (present_selectOpts)
        list.add(selectOpts);

      boolean present_templateArgs = true && (isSetTemplateArgs());
      list.add(present_templateArgs);
      if (present_templateArgs)
        list.add(templateArgs);

      boolean present_templateSetArgs = true && (isSetTemplateSetArgs());
      list.add(present_templateSetArgs);
      if (present_templateSetArgs)
        list.add(templateSetArgs);

      return list.hashCode();
    }

    @Override
    public int compareTo(fetchUpdated_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSelectOpts()).compareTo(other.isSetSelectOpts());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSelectOpts()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.selectOpts, other.selectOpts);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTemplateArgs()).compareTo(other.isSetTemplateArgs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTemplateArgs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.templateArgs, other.templateArgs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTemplateSetArgs()).compareTo(other.isSetTemplateSetArgs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTemplateSetArgs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.templateSetArgs, other.templateSetArgs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("fetchUpdated_args(");
      boolean first = true;

      sb.append("selectOpts:");
      if (this.selectOpts == null) {
        sb.append("null");
      } else {
        sb.append(this.selectOpts);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("templateArgs:");
      if (this.templateArgs == null) {
        sb.append("null");
      } else {
        sb.append(this.templateArgs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("templateSetArgs:");
      if (this.templateSetArgs == null) {
        sb.append("null");
      } else {
        sb.append(this.templateSetArgs);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (selectOpts != null) {
        selectOpts.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fetchUpdated_argsStandardSchemeFactory implements SchemeFactory {
      public fetchUpdated_argsStandardScheme getScheme() {
        return new fetchUpdated_argsStandardScheme();
      }
    }

    private static class fetchUpdated_argsStandardScheme extends StandardScheme<fetchUpdated_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fetchUpdated_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SELECT_OPTS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.selectOpts = new TemplateUnionSelectOpts();
                struct.selectOpts.read(iprot);
                struct.setSelectOptsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TEMPLATE_ARGS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list67 = iprot.readListBegin();
                  struct.templateArgs = new ArrayList<VersionRef>(_list67.size);
                  VersionRef _elem68;
                  for (int _i69 = 0; _i69 < _list67.size; ++_i69)
                  {
                    _elem68 = new VersionRef();
                    _elem68.read(iprot);
                    struct.templateArgs.add(_elem68);
                  }
                  iprot.readListEnd();
                }
                struct.setTemplateArgsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TEMPLATE_SET_ARGS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list70 = iprot.readListBegin();
                  struct.templateSetArgs = new ArrayList<VersionRef>(_list70.size);
                  VersionRef _elem71;
                  for (int _i72 = 0; _i72 < _list70.size; ++_i72)
                  {
                    _elem71 = new VersionRef();
                    _elem71.read(iprot);
                    struct.templateSetArgs.add(_elem71);
                  }
                  iprot.readListEnd();
                }
                struct.setTemplateSetArgsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fetchUpdated_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.selectOpts != null) {
          oprot.writeFieldBegin(SELECT_OPTS_FIELD_DESC);
          struct.selectOpts.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.templateArgs != null) {
          oprot.writeFieldBegin(TEMPLATE_ARGS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.templateArgs.size()));
            for (VersionRef _iter73 : struct.templateArgs)
            {
              _iter73.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.templateSetArgs != null) {
          oprot.writeFieldBegin(TEMPLATE_SET_ARGS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.templateSetArgs.size()));
            for (VersionRef _iter74 : struct.templateSetArgs)
            {
              _iter74.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class fetchUpdated_result implements org.apache.thrift.TBase<fetchUpdated_result, fetchUpdated_result._Fields>, java.io.Serializable, Cloneable, Comparable<fetchUpdated_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fetchUpdated_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new fetchUpdated_resultStandardSchemeFactory());
    }

    public TemplateUnionFetchResult success; // required
    public com.wi.director.thrift.v1.common.SystemException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TemplateUnionFetchResult.class)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fetchUpdated_result.class, metaDataMap);
    }

    public fetchUpdated_result() {
    }

    public fetchUpdated_result(
      TemplateUnionFetchResult success,
      com.wi.director.thrift.v1.common.SystemException err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fetchUpdated_result(fetchUpdated_result other) {
      if (other.isSetSuccess()) {
        this.success = new TemplateUnionFetchResult(other.success);
      }
      if (other.isSetErr()) {
        this.err = new com.wi.director.thrift.v1.common.SystemException(other.err);
      }
    }

    public fetchUpdated_result deepCopy() {
      return new fetchUpdated_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public TemplateUnionFetchResult getSuccess() {
      return this.success;
    }

    public fetchUpdated_result setSuccess(TemplateUnionFetchResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.wi.director.thrift.v1.common.SystemException getErr() {
      return this.err;
    }

    public fetchUpdated_result setErr(com.wi.director.thrift.v1.common.SystemException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TemplateUnionFetchResult)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((com.wi.director.thrift.v1.common.SystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof fetchUpdated_result)
        return this.equals((fetchUpdated_result)that);
      return false;
    }

    public boolean equals(fetchUpdated_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(fetchUpdated_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("fetchUpdated_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fetchUpdated_resultStandardSchemeFactory implements SchemeFactory {
      public fetchUpdated_resultStandardScheme getScheme() {
        return new fetchUpdated_resultStandardScheme();
      }
    }

    private static class fetchUpdated_resultStandardScheme extends StandardScheme<fetchUpdated_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fetchUpdated_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TemplateUnionFetchResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new com.wi.director.thrift.v1.common.SystemException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fetchUpdated_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class updateAttribute_args implements org.apache.thrift.TBase<updateAttribute_args, updateAttribute_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateAttribute_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateAttribute_args");

    private static final org.apache.thrift.protocol.TField TEMPLATE_SET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("templateSetId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ATTRIBUTE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("attributeId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("values", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField BEHAVE_FIELD_DESC = new org.apache.thrift.protocol.TField("behave", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateAttribute_argsStandardSchemeFactory());
    }

    public String templateSetId; // required
    public String attributeId; // required
    public List<com.wi.director.thrift.v1.abac.AbacAttributeValue> values; // required
    /**
     * 
     * @see com.wi.director.thrift.v1.abac.AttributeUploadBehaviour
     */
    public com.wi.director.thrift.v1.abac.AttributeUploadBehaviour behave; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TEMPLATE_SET_ID((short)1, "templateSetId"),
      ATTRIBUTE_ID((short)2, "attributeId"),
      VALUES((short)3, "values"),
      /**
       * 
       * @see com.wi.director.thrift.v1.abac.AttributeUploadBehaviour
       */
      BEHAVE((short)4, "behave");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TEMPLATE_SET_ID
            return TEMPLATE_SET_ID;
          case 2: // ATTRIBUTE_ID
            return ATTRIBUTE_ID;
          case 3: // VALUES
            return VALUES;
          case 4: // BEHAVE
            return BEHAVE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TEMPLATE_SET_ID, new org.apache.thrift.meta_data.FieldMetaData("templateSetId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "UUID")));
      tmpMap.put(_Fields.ATTRIBUTE_ID, new org.apache.thrift.meta_data.FieldMetaData("attributeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VALUES, new org.apache.thrift.meta_data.FieldMetaData("values", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.abac.AbacAttributeValue.class))));
      tmpMap.put(_Fields.BEHAVE, new org.apache.thrift.meta_data.FieldMetaData("behave", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.wi.director.thrift.v1.abac.AttributeUploadBehaviour.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateAttribute_args.class, metaDataMap);
    }

    public updateAttribute_args() {
    }

    public updateAttribute_args(
      String templateSetId,
      String attributeId,
      List<com.wi.director.thrift.v1.abac.AbacAttributeValue> values,
      com.wi.director.thrift.v1.abac.AttributeUploadBehaviour behave)
    {
      this();
      this.templateSetId = templateSetId;
      this.attributeId = attributeId;
      this.values = values;
      this.behave = behave;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateAttribute_args(updateAttribute_args other) {
      if (other.isSetTemplateSetId()) {
        this.templateSetId = other.templateSetId;
      }
      if (other.isSetAttributeId()) {
        this.attributeId = other.attributeId;
      }
      if (other.isSetValues()) {
        List<com.wi.director.thrift.v1.abac.AbacAttributeValue> __this__values = new ArrayList<com.wi.director.thrift.v1.abac.AbacAttributeValue>(other.values.size());
        for (com.wi.director.thrift.v1.abac.AbacAttributeValue other_element : other.values) {
          __this__values.add(new com.wi.director.thrift.v1.abac.AbacAttributeValue(other_element));
        }
        this.values = __this__values;
      }
      if (other.isSetBehave()) {
        this.behave = other.behave;
      }
    }

    public updateAttribute_args deepCopy() {
      return new updateAttribute_args(this);
    }

    @Override
    public void clear() {
      this.templateSetId = null;
      this.attributeId = null;
      this.values = null;
      this.behave = null;
    }

    public String getTemplateSetId() {
      return this.templateSetId;
    }

    public updateAttribute_args setTemplateSetId(String templateSetId) {
      this.templateSetId = templateSetId;
      return this;
    }

    public void unsetTemplateSetId() {
      this.templateSetId = null;
    }

    /** Returns true if field templateSetId is set (has been assigned a value) and false otherwise */
    public boolean isSetTemplateSetId() {
      return this.templateSetId != null;
    }

    public void setTemplateSetIdIsSet(boolean value) {
      if (!value) {
        this.templateSetId = null;
      }
    }

    public String getAttributeId() {
      return this.attributeId;
    }

    public updateAttribute_args setAttributeId(String attributeId) {
      this.attributeId = attributeId;
      return this;
    }

    public void unsetAttributeId() {
      this.attributeId = null;
    }

    /** Returns true if field attributeId is set (has been assigned a value) and false otherwise */
    public boolean isSetAttributeId() {
      return this.attributeId != null;
    }

    public void setAttributeIdIsSet(boolean value) {
      if (!value) {
        this.attributeId = null;
      }
    }

    public int getValuesSize() {
      return (this.values == null) ? 0 : this.values.size();
    }

    public java.util.Iterator<com.wi.director.thrift.v1.abac.AbacAttributeValue> getValuesIterator() {
      return (this.values == null) ? null : this.values.iterator();
    }

    public void addToValues(com.wi.director.thrift.v1.abac.AbacAttributeValue elem) {
      if (this.values == null) {
        this.values = new ArrayList<com.wi.director.thrift.v1.abac.AbacAttributeValue>();
      }
      this.values.add(elem);
    }

    public List<com.wi.director.thrift.v1.abac.AbacAttributeValue> getValues() {
      return this.values;
    }

    public updateAttribute_args setValues(List<com.wi.director.thrift.v1.abac.AbacAttributeValue> values) {
      this.values = values;
      return this;
    }

    public void unsetValues() {
      this.values = null;
    }

    /** Returns true if field values is set (has been assigned a value) and false otherwise */
    public boolean isSetValues() {
      return this.values != null;
    }

    public void setValuesIsSet(boolean value) {
      if (!value) {
        this.values = null;
      }
    }

    /**
     * 
     * @see com.wi.director.thrift.v1.abac.AttributeUploadBehaviour
     */
    public com.wi.director.thrift.v1.abac.AttributeUploadBehaviour getBehave() {
      return this.behave;
    }

    /**
     * 
     * @see com.wi.director.thrift.v1.abac.AttributeUploadBehaviour
     */
    public updateAttribute_args setBehave(com.wi.director.thrift.v1.abac.AttributeUploadBehaviour behave) {
      this.behave = behave;
      return this;
    }

    public void unsetBehave() {
      this.behave = null;
    }

    /** Returns true if field behave is set (has been assigned a value) and false otherwise */
    public boolean isSetBehave() {
      return this.behave != null;
    }

    public void setBehaveIsSet(boolean value) {
      if (!value) {
        this.behave = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TEMPLATE_SET_ID:
        if (value == null) {
          unsetTemplateSetId();
        } else {
          setTemplateSetId((String)value);
        }
        break;

      case ATTRIBUTE_ID:
        if (value == null) {
          unsetAttributeId();
        } else {
          setAttributeId((String)value);
        }
        break;

      case VALUES:
        if (value == null) {
          unsetValues();
        } else {
          setValues((List<com.wi.director.thrift.v1.abac.AbacAttributeValue>)value);
        }
        break;

      case BEHAVE:
        if (value == null) {
          unsetBehave();
        } else {
          setBehave((com.wi.director.thrift.v1.abac.AttributeUploadBehaviour)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TEMPLATE_SET_ID:
        return getTemplateSetId();

      case ATTRIBUTE_ID:
        return getAttributeId();

      case VALUES:
        return getValues();

      case BEHAVE:
        return getBehave();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TEMPLATE_SET_ID:
        return isSetTemplateSetId();
      case ATTRIBUTE_ID:
        return isSetAttributeId();
      case VALUES:
        return isSetValues();
      case BEHAVE:
        return isSetBehave();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateAttribute_args)
        return this.equals((updateAttribute_args)that);
      return false;
    }

    public boolean equals(updateAttribute_args that) {
      if (that == null)
        return false;

      boolean this_present_templateSetId = true && this.isSetTemplateSetId();
      boolean that_present_templateSetId = true && that.isSetTemplateSetId();
      if (this_present_templateSetId || that_present_templateSetId) {
        if (!(this_present_templateSetId && that_present_templateSetId))
          return false;
        if (!this.templateSetId.equals(that.templateSetId))
          return false;
      }

      boolean this_present_attributeId = true && this.isSetAttributeId();
      boolean that_present_attributeId = true && that.isSetAttributeId();
      if (this_present_attributeId || that_present_attributeId) {
        if (!(this_present_attributeId && that_present_attributeId))
          return false;
        if (!this.attributeId.equals(that.attributeId))
          return false;
      }

      boolean this_present_values = true && this.isSetValues();
      boolean that_present_values = true && that.isSetValues();
      if (this_present_values || that_present_values) {
        if (!(this_present_values && that_present_values))
          return false;
        if (!this.values.equals(that.values))
          return false;
      }

      boolean this_present_behave = true && this.isSetBehave();
      boolean that_present_behave = true && that.isSetBehave();
      if (this_present_behave || that_present_behave) {
        if (!(this_present_behave && that_present_behave))
          return false;
        if (!this.behave.equals(that.behave))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_templateSetId = true && (isSetTemplateSetId());
      list.add(present_templateSetId);
      if (present_templateSetId)
        list.add(templateSetId);

      boolean present_attributeId = true && (isSetAttributeId());
      list.add(present_attributeId);
      if (present_attributeId)
        list.add(attributeId);

      boolean present_values = true && (isSetValues());
      list.add(present_values);
      if (present_values)
        list.add(values);

      boolean present_behave = true && (isSetBehave());
      list.add(present_behave);
      if (present_behave)
        list.add(behave.getValue());

      return list.hashCode();
    }

    @Override
    public int compareTo(updateAttribute_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTemplateSetId()).compareTo(other.isSetTemplateSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTemplateSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.templateSetId, other.templateSetId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAttributeId()).compareTo(other.isSetAttributeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttributeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attributeId, other.attributeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetValues()).compareTo(other.isSetValues());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValues()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.values, other.values);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBehave()).compareTo(other.isSetBehave());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBehave()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.behave, other.behave);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateAttribute_args(");
      boolean first = true;

      sb.append("templateSetId:");
      if (this.templateSetId == null) {
        sb.append("null");
      } else {
        sb.append(this.templateSetId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("attributeId:");
      if (this.attributeId == null) {
        sb.append("null");
      } else {
        sb.append(this.attributeId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("values:");
      if (this.values == null) {
        sb.append("null");
      } else {
        sb.append(this.values);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("behave:");
      if (this.behave == null) {
        sb.append("null");
      } else {
        sb.append(this.behave);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateAttribute_argsStandardSchemeFactory implements SchemeFactory {
      public updateAttribute_argsStandardScheme getScheme() {
        return new updateAttribute_argsStandardScheme();
      }
    }

    private static class updateAttribute_argsStandardScheme extends StandardScheme<updateAttribute_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateAttribute_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TEMPLATE_SET_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.templateSetId = iprot.readString();
                struct.setTemplateSetIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ATTRIBUTE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.attributeId = iprot.readString();
                struct.setAttributeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // VALUES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list75 = iprot.readListBegin();
                  struct.values = new ArrayList<com.wi.director.thrift.v1.abac.AbacAttributeValue>(_list75.size);
                  com.wi.director.thrift.v1.abac.AbacAttributeValue _elem76;
                  for (int _i77 = 0; _i77 < _list75.size; ++_i77)
                  {
                    _elem76 = new com.wi.director.thrift.v1.abac.AbacAttributeValue();
                    _elem76.read(iprot);
                    struct.values.add(_elem76);
                  }
                  iprot.readListEnd();
                }
                struct.setValuesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // BEHAVE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.behave = com.wi.director.thrift.v1.abac.AttributeUploadBehaviour.findByValue(iprot.readI32());
                struct.setBehaveIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateAttribute_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.templateSetId != null) {
          oprot.writeFieldBegin(TEMPLATE_SET_ID_FIELD_DESC);
          oprot.writeString(struct.templateSetId);
          oprot.writeFieldEnd();
        }
        if (struct.attributeId != null) {
          oprot.writeFieldBegin(ATTRIBUTE_ID_FIELD_DESC);
          oprot.writeString(struct.attributeId);
          oprot.writeFieldEnd();
        }
        if (struct.values != null) {
          oprot.writeFieldBegin(VALUES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.values.size()));
            for (com.wi.director.thrift.v1.abac.AbacAttributeValue _iter78 : struct.values)
            {
              _iter78.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.behave != null) {
          oprot.writeFieldBegin(BEHAVE_FIELD_DESC);
          oprot.writeI32(struct.behave.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class updateAttribute_result implements org.apache.thrift.TBase<updateAttribute_result, updateAttribute_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateAttribute_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateAttribute_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateAttribute_resultStandardSchemeFactory());
    }

    public List<com.wi.director.thrift.v1.abac.AbacAttribute> success; // required
    public com.wi.director.thrift.v1.common.SystemException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.abac.AbacAttribute.class))));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateAttribute_result.class, metaDataMap);
    }

    public updateAttribute_result() {
    }

    public updateAttribute_result(
      List<com.wi.director.thrift.v1.abac.AbacAttribute> success,
      com.wi.director.thrift.v1.common.SystemException err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateAttribute_result(updateAttribute_result other) {
      if (other.isSetSuccess()) {
        List<com.wi.director.thrift.v1.abac.AbacAttribute> __this__success = new ArrayList<com.wi.director.thrift.v1.abac.AbacAttribute>(other.success.size());
        for (com.wi.director.thrift.v1.abac.AbacAttribute other_element : other.success) {
          __this__success.add(new com.wi.director.thrift.v1.abac.AbacAttribute(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetErr()) {
        this.err = new com.wi.director.thrift.v1.common.SystemException(other.err);
      }
    }

    public updateAttribute_result deepCopy() {
      return new updateAttribute_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.wi.director.thrift.v1.abac.AbacAttribute> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.wi.director.thrift.v1.abac.AbacAttribute elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.wi.director.thrift.v1.abac.AbacAttribute>();
      }
      this.success.add(elem);
    }

    public List<com.wi.director.thrift.v1.abac.AbacAttribute> getSuccess() {
      return this.success;
    }

    public updateAttribute_result setSuccess(List<com.wi.director.thrift.v1.abac.AbacAttribute> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.wi.director.thrift.v1.common.SystemException getErr() {
      return this.err;
    }

    public updateAttribute_result setErr(com.wi.director.thrift.v1.common.SystemException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.wi.director.thrift.v1.abac.AbacAttribute>)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((com.wi.director.thrift.v1.common.SystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateAttribute_result)
        return this.equals((updateAttribute_result)that);
      return false;
    }

    public boolean equals(updateAttribute_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateAttribute_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateAttribute_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateAttribute_resultStandardSchemeFactory implements SchemeFactory {
      public updateAttribute_resultStandardScheme getScheme() {
        return new updateAttribute_resultStandardScheme();
      }
    }

    private static class updateAttribute_resultStandardScheme extends StandardScheme<updateAttribute_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateAttribute_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list79 = iprot.readListBegin();
                  struct.success = new ArrayList<com.wi.director.thrift.v1.abac.AbacAttribute>(_list79.size);
                  com.wi.director.thrift.v1.abac.AbacAttribute _elem80;
                  for (int _i81 = 0; _i81 < _list79.size; ++_i81)
                  {
                    _elem80 = new com.wi.director.thrift.v1.abac.AbacAttribute();
                    _elem80.read(iprot);
                    struct.success.add(_elem80);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new com.wi.director.thrift.v1.common.SystemException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateAttribute_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.wi.director.thrift.v1.abac.AbacAttribute _iter82 : struct.success)
            {
              _iter82.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

}
