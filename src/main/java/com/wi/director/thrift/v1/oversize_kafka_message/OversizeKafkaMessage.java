/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wi.director.thrift.v1.oversize_kafka_message;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class OversizeKafkaMessage implements org.apache.thrift.TBase<OversizeKafkaMessage, OversizeKafkaMessage._Fields>, java.io.Serializable, Cloneable, Comparable<OversizeKafkaMessage> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OversizeKafkaMessage");

  private static final org.apache.thrift.protocol.TField DATASTORE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("datastoreId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SPECIES_IDENTIFIER_FIELD_DESC = new org.apache.thrift.protocol.TField("speciesIdentifier", org.apache.thrift.protocol.TType.STRING, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new OversizeKafkaMessageStandardSchemeFactory());
  }

  public String datastoreId; // required
  public String speciesIdentifier; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DATASTORE_ID((short)1, "datastoreId"),
    SPECIES_IDENTIFIER((short)10, "speciesIdentifier");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DATASTORE_ID
          return DATASTORE_ID;
        case 10: // SPECIES_IDENTIFIER
          return SPECIES_IDENTIFIER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DATASTORE_ID, new org.apache.thrift.meta_data.FieldMetaData("datastoreId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SPECIES_IDENTIFIER, new org.apache.thrift.meta_data.FieldMetaData("speciesIdentifier", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OversizeKafkaMessage.class, metaDataMap);
  }

  public OversizeKafkaMessage() {
    this.speciesIdentifier = "not-and-overize-kafka-msg";

  }

  public OversizeKafkaMessage(
    String datastoreId,
    String speciesIdentifier)
  {
    this();
    this.datastoreId = datastoreId;
    this.speciesIdentifier = speciesIdentifier;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public OversizeKafkaMessage(OversizeKafkaMessage other) {
    if (other.isSetDatastoreId()) {
      this.datastoreId = other.datastoreId;
    }
    if (other.isSetSpeciesIdentifier()) {
      this.speciesIdentifier = other.speciesIdentifier;
    }
  }

  public OversizeKafkaMessage deepCopy() {
    return new OversizeKafkaMessage(this);
  }

  @Override
  public void clear() {
    this.datastoreId = null;
    this.speciesIdentifier = "not-and-overize-kafka-msg";

  }

  public String getDatastoreId() {
    return this.datastoreId;
  }

  public OversizeKafkaMessage setDatastoreId(String datastoreId) {
    this.datastoreId = datastoreId;
    return this;
  }

  public void unsetDatastoreId() {
    this.datastoreId = null;
  }

  /** Returns true if field datastoreId is set (has been assigned a value) and false otherwise */
  public boolean isSetDatastoreId() {
    return this.datastoreId != null;
  }

  public void setDatastoreIdIsSet(boolean value) {
    if (!value) {
      this.datastoreId = null;
    }
  }

  public String getSpeciesIdentifier() {
    return this.speciesIdentifier;
  }

  public OversizeKafkaMessage setSpeciesIdentifier(String speciesIdentifier) {
    this.speciesIdentifier = speciesIdentifier;
    return this;
  }

  public void unsetSpeciesIdentifier() {
    this.speciesIdentifier = null;
  }

  /** Returns true if field speciesIdentifier is set (has been assigned a value) and false otherwise */
  public boolean isSetSpeciesIdentifier() {
    return this.speciesIdentifier != null;
  }

  public void setSpeciesIdentifierIsSet(boolean value) {
    if (!value) {
      this.speciesIdentifier = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DATASTORE_ID:
      if (value == null) {
        unsetDatastoreId();
      } else {
        setDatastoreId((String)value);
      }
      break;

    case SPECIES_IDENTIFIER:
      if (value == null) {
        unsetSpeciesIdentifier();
      } else {
        setSpeciesIdentifier((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DATASTORE_ID:
      return getDatastoreId();

    case SPECIES_IDENTIFIER:
      return getSpeciesIdentifier();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DATASTORE_ID:
      return isSetDatastoreId();
    case SPECIES_IDENTIFIER:
      return isSetSpeciesIdentifier();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof OversizeKafkaMessage)
      return this.equals((OversizeKafkaMessage)that);
    return false;
  }

  public boolean equals(OversizeKafkaMessage that) {
    if (that == null)
      return false;

    boolean this_present_datastoreId = true && this.isSetDatastoreId();
    boolean that_present_datastoreId = true && that.isSetDatastoreId();
    if (this_present_datastoreId || that_present_datastoreId) {
      if (!(this_present_datastoreId && that_present_datastoreId))
        return false;
      if (!this.datastoreId.equals(that.datastoreId))
        return false;
    }

    boolean this_present_speciesIdentifier = true && this.isSetSpeciesIdentifier();
    boolean that_present_speciesIdentifier = true && that.isSetSpeciesIdentifier();
    if (this_present_speciesIdentifier || that_present_speciesIdentifier) {
      if (!(this_present_speciesIdentifier && that_present_speciesIdentifier))
        return false;
      if (!this.speciesIdentifier.equals(that.speciesIdentifier))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_datastoreId = true && (isSetDatastoreId());
    list.add(present_datastoreId);
    if (present_datastoreId)
      list.add(datastoreId);

    boolean present_speciesIdentifier = true && (isSetSpeciesIdentifier());
    list.add(present_speciesIdentifier);
    if (present_speciesIdentifier)
      list.add(speciesIdentifier);

    return list.hashCode();
  }

  @Override
  public int compareTo(OversizeKafkaMessage other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetDatastoreId()).compareTo(other.isSetDatastoreId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDatastoreId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datastoreId, other.datastoreId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpeciesIdentifier()).compareTo(other.isSetSpeciesIdentifier());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpeciesIdentifier()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.speciesIdentifier, other.speciesIdentifier);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("OversizeKafkaMessage(");
    boolean first = true;

    sb.append("datastoreId:");
    if (this.datastoreId == null) {
      sb.append("null");
    } else {
      sb.append(this.datastoreId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("speciesIdentifier:");
    if (this.speciesIdentifier == null) {
      sb.append("null");
    } else {
      sb.append(this.speciesIdentifier);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class OversizeKafkaMessageStandardSchemeFactory implements SchemeFactory {
    public OversizeKafkaMessageStandardScheme getScheme() {
      return new OversizeKafkaMessageStandardScheme();
    }
  }

  private static class OversizeKafkaMessageStandardScheme extends StandardScheme<OversizeKafkaMessage> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, OversizeKafkaMessage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DATASTORE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.datastoreId = iprot.readString();
              struct.setDatastoreIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SPECIES_IDENTIFIER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.speciesIdentifier = iprot.readString();
              struct.setSpeciesIdentifierIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, OversizeKafkaMessage struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.datastoreId != null) {
        oprot.writeFieldBegin(DATASTORE_ID_FIELD_DESC);
        oprot.writeString(struct.datastoreId);
        oprot.writeFieldEnd();
      }
      if (struct.speciesIdentifier != null) {
        oprot.writeFieldBegin(SPECIES_IDENTIFIER_FIELD_DESC);
        oprot.writeString(struct.speciesIdentifier);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

}

