/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wi.director.thrift.v1.paging;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * NOHTML
 */
public class PageTokenSortOrder extends org.apache.thrift.TUnion<PageTokenSortOrder, PageTokenSortOrder._Fields> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PageTokenSortOrder");
  private static final org.apache.thrift.protocol.TField JOB_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("jobOrder", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField TEMPLATE_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("templateOrder", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField USER_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("userOrder", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField SETTING_CHANGE_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("settingChangeOrder", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField DEBUG_REPORT_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("debugReportOrder", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField DATA_SHEET_SET_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("dataSheetSetOrder", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField DATA_SHEET_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("dataSheetOrder", org.apache.thrift.protocol.TType.LIST, (short)7);

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    JOB_ORDER((short)1, "jobOrder"),
    TEMPLATE_ORDER((short)2, "templateOrder"),
    USER_ORDER((short)3, "userOrder"),
    SETTING_CHANGE_ORDER((short)4, "settingChangeOrder"),
    DEBUG_REPORT_ORDER((short)5, "debugReportOrder"),
    DATA_SHEET_SET_ORDER((short)6, "dataSheetSetOrder"),
    DATA_SHEET_ORDER((short)7, "dataSheetOrder");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // JOB_ORDER
          return JOB_ORDER;
        case 2: // TEMPLATE_ORDER
          return TEMPLATE_ORDER;
        case 3: // USER_ORDER
          return USER_ORDER;
        case 4: // SETTING_CHANGE_ORDER
          return SETTING_CHANGE_ORDER;
        case 5: // DEBUG_REPORT_ORDER
          return DEBUG_REPORT_ORDER;
        case 6: // DATA_SHEET_SET_ORDER
          return DATA_SHEET_SET_ORDER;
        case 7: // DATA_SHEET_ORDER
          return DATA_SHEET_ORDER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.JOB_ORDER, new org.apache.thrift.meta_data.FieldMetaData("jobOrder", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.job.JobOrder.class))));
    tmpMap.put(_Fields.TEMPLATE_ORDER, new org.apache.thrift.meta_data.FieldMetaData("templateOrder", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.jobtemplate.TemplateOrder.class))));
    tmpMap.put(_Fields.USER_ORDER, new org.apache.thrift.meta_data.FieldMetaData("userOrder", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.user.UserOrder.class))));
    tmpMap.put(_Fields.SETTING_CHANGE_ORDER, new org.apache.thrift.meta_data.FieldMetaData("settingChangeOrder", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.setting.SettingChangeOrder.class))));
    tmpMap.put(_Fields.DEBUG_REPORT_ORDER, new org.apache.thrift.meta_data.FieldMetaData("debugReportOrder", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.debugreport.DebugReportOrder.class))));
    tmpMap.put(_Fields.DATA_SHEET_SET_ORDER, new org.apache.thrift.meta_data.FieldMetaData("dataSheetSetOrder", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.datasheet.DataSheetSetOrder.class))));
    tmpMap.put(_Fields.DATA_SHEET_ORDER, new org.apache.thrift.meta_data.FieldMetaData("dataSheetOrder", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.datasheet.DataSheetOrder.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PageTokenSortOrder.class, metaDataMap);
  }

  public PageTokenSortOrder() {
    super();
  }

  public PageTokenSortOrder(_Fields setField, Object value) {
    super(setField, value);
  }

  public PageTokenSortOrder(PageTokenSortOrder other) {
    super(other);
  }
  public PageTokenSortOrder deepCopy() {
    return new PageTokenSortOrder(this);
  }

  public static PageTokenSortOrder jobOrder(List<com.wi.director.thrift.v1.job.JobOrder> value) {
    PageTokenSortOrder x = new PageTokenSortOrder();
    x.setJobOrder(value);
    return x;
  }

  public static PageTokenSortOrder templateOrder(List<com.wi.director.thrift.v1.jobtemplate.TemplateOrder> value) {
    PageTokenSortOrder x = new PageTokenSortOrder();
    x.setTemplateOrder(value);
    return x;
  }

  public static PageTokenSortOrder userOrder(List<com.wi.director.thrift.v1.user.UserOrder> value) {
    PageTokenSortOrder x = new PageTokenSortOrder();
    x.setUserOrder(value);
    return x;
  }

  public static PageTokenSortOrder settingChangeOrder(List<com.wi.director.thrift.v1.setting.SettingChangeOrder> value) {
    PageTokenSortOrder x = new PageTokenSortOrder();
    x.setSettingChangeOrder(value);
    return x;
  }

  public static PageTokenSortOrder debugReportOrder(List<com.wi.director.thrift.v1.debugreport.DebugReportOrder> value) {
    PageTokenSortOrder x = new PageTokenSortOrder();
    x.setDebugReportOrder(value);
    return x;
  }

  public static PageTokenSortOrder dataSheetSetOrder(List<com.wi.director.thrift.v1.datasheet.DataSheetSetOrder> value) {
    PageTokenSortOrder x = new PageTokenSortOrder();
    x.setDataSheetSetOrder(value);
    return x;
  }

  public static PageTokenSortOrder dataSheetOrder(List<com.wi.director.thrift.v1.datasheet.DataSheetOrder> value) {
    PageTokenSortOrder x = new PageTokenSortOrder();
    x.setDataSheetOrder(value);
    return x;
  }


  @Override
  protected void checkType(_Fields setField, Object value) throws ClassCastException {
    switch (setField) {
      case JOB_ORDER:
        if (value instanceof List) {
          break;
        }
        throw new ClassCastException("Was expecting value of type List<com.wi.director.thrift.v1.job.JobOrder> for field 'jobOrder', but got " + value.getClass().getSimpleName());
      case TEMPLATE_ORDER:
        if (value instanceof List) {
          break;
        }
        throw new ClassCastException("Was expecting value of type List<com.wi.director.thrift.v1.jobtemplate.TemplateOrder> for field 'templateOrder', but got " + value.getClass().getSimpleName());
      case USER_ORDER:
        if (value instanceof List) {
          break;
        }
        throw new ClassCastException("Was expecting value of type List<com.wi.director.thrift.v1.user.UserOrder> for field 'userOrder', but got " + value.getClass().getSimpleName());
      case SETTING_CHANGE_ORDER:
        if (value instanceof List) {
          break;
        }
        throw new ClassCastException("Was expecting value of type List<com.wi.director.thrift.v1.setting.SettingChangeOrder> for field 'settingChangeOrder', but got " + value.getClass().getSimpleName());
      case DEBUG_REPORT_ORDER:
        if (value instanceof List) {
          break;
        }
        throw new ClassCastException("Was expecting value of type List<com.wi.director.thrift.v1.debugreport.DebugReportOrder> for field 'debugReportOrder', but got " + value.getClass().getSimpleName());
      case DATA_SHEET_SET_ORDER:
        if (value instanceof List) {
          break;
        }
        throw new ClassCastException("Was expecting value of type List<com.wi.director.thrift.v1.datasheet.DataSheetSetOrder> for field 'dataSheetSetOrder', but got " + value.getClass().getSimpleName());
      case DATA_SHEET_ORDER:
        if (value instanceof List) {
          break;
        }
        throw new ClassCastException("Was expecting value of type List<com.wi.director.thrift.v1.datasheet.DataSheetOrder> for field 'dataSheetOrder', but got " + value.getClass().getSimpleName());
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected Object standardSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TField field) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(field.id);
    if (setField != null) {
      switch (setField) {
        case JOB_ORDER:
          if (field.type == JOB_ORDER_FIELD_DESC.type) {
            List<com.wi.director.thrift.v1.job.JobOrder> jobOrder;
            {
              org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
              jobOrder = new ArrayList<com.wi.director.thrift.v1.job.JobOrder>(_list0.size);
              com.wi.director.thrift.v1.job.JobOrder _elem1;
              for (int _i2 = 0; _i2 < _list0.size; ++_i2)
              {
                _elem1 = new com.wi.director.thrift.v1.job.JobOrder();
                _elem1.read(iprot);
                jobOrder.add(_elem1);
              }
              iprot.readListEnd();
            }
            return jobOrder;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case TEMPLATE_ORDER:
          if (field.type == TEMPLATE_ORDER_FIELD_DESC.type) {
            List<com.wi.director.thrift.v1.jobtemplate.TemplateOrder> templateOrder;
            {
              org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
              templateOrder = new ArrayList<com.wi.director.thrift.v1.jobtemplate.TemplateOrder>(_list3.size);
              com.wi.director.thrift.v1.jobtemplate.TemplateOrder _elem4;
              for (int _i5 = 0; _i5 < _list3.size; ++_i5)
              {
                _elem4 = new com.wi.director.thrift.v1.jobtemplate.TemplateOrder();
                _elem4.read(iprot);
                templateOrder.add(_elem4);
              }
              iprot.readListEnd();
            }
            return templateOrder;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case USER_ORDER:
          if (field.type == USER_ORDER_FIELD_DESC.type) {
            List<com.wi.director.thrift.v1.user.UserOrder> userOrder;
            {
              org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
              userOrder = new ArrayList<com.wi.director.thrift.v1.user.UserOrder>(_list6.size);
              com.wi.director.thrift.v1.user.UserOrder _elem7;
              for (int _i8 = 0; _i8 < _list6.size; ++_i8)
              {
                _elem7 = new com.wi.director.thrift.v1.user.UserOrder();
                _elem7.read(iprot);
                userOrder.add(_elem7);
              }
              iprot.readListEnd();
            }
            return userOrder;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case SETTING_CHANGE_ORDER:
          if (field.type == SETTING_CHANGE_ORDER_FIELD_DESC.type) {
            List<com.wi.director.thrift.v1.setting.SettingChangeOrder> settingChangeOrder;
            {
              org.apache.thrift.protocol.TList _list9 = iprot.readListBegin();
              settingChangeOrder = new ArrayList<com.wi.director.thrift.v1.setting.SettingChangeOrder>(_list9.size);
              com.wi.director.thrift.v1.setting.SettingChangeOrder _elem10;
              for (int _i11 = 0; _i11 < _list9.size; ++_i11)
              {
                _elem10 = new com.wi.director.thrift.v1.setting.SettingChangeOrder();
                _elem10.read(iprot);
                settingChangeOrder.add(_elem10);
              }
              iprot.readListEnd();
            }
            return settingChangeOrder;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case DEBUG_REPORT_ORDER:
          if (field.type == DEBUG_REPORT_ORDER_FIELD_DESC.type) {
            List<com.wi.director.thrift.v1.debugreport.DebugReportOrder> debugReportOrder;
            {
              org.apache.thrift.protocol.TList _list12 = iprot.readListBegin();
              debugReportOrder = new ArrayList<com.wi.director.thrift.v1.debugreport.DebugReportOrder>(_list12.size);
              com.wi.director.thrift.v1.debugreport.DebugReportOrder _elem13;
              for (int _i14 = 0; _i14 < _list12.size; ++_i14)
              {
                _elem13 = new com.wi.director.thrift.v1.debugreport.DebugReportOrder();
                _elem13.read(iprot);
                debugReportOrder.add(_elem13);
              }
              iprot.readListEnd();
            }
            return debugReportOrder;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case DATA_SHEET_SET_ORDER:
          if (field.type == DATA_SHEET_SET_ORDER_FIELD_DESC.type) {
            List<com.wi.director.thrift.v1.datasheet.DataSheetSetOrder> dataSheetSetOrder;
            {
              org.apache.thrift.protocol.TList _list15 = iprot.readListBegin();
              dataSheetSetOrder = new ArrayList<com.wi.director.thrift.v1.datasheet.DataSheetSetOrder>(_list15.size);
              com.wi.director.thrift.v1.datasheet.DataSheetSetOrder _elem16;
              for (int _i17 = 0; _i17 < _list15.size; ++_i17)
              {
                _elem16 = new com.wi.director.thrift.v1.datasheet.DataSheetSetOrder();
                _elem16.read(iprot);
                dataSheetSetOrder.add(_elem16);
              }
              iprot.readListEnd();
            }
            return dataSheetSetOrder;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case DATA_SHEET_ORDER:
          if (field.type == DATA_SHEET_ORDER_FIELD_DESC.type) {
            List<com.wi.director.thrift.v1.datasheet.DataSheetOrder> dataSheetOrder;
            {
              org.apache.thrift.protocol.TList _list18 = iprot.readListBegin();
              dataSheetOrder = new ArrayList<com.wi.director.thrift.v1.datasheet.DataSheetOrder>(_list18.size);
              com.wi.director.thrift.v1.datasheet.DataSheetOrder _elem19;
              for (int _i20 = 0; _i20 < _list18.size; ++_i20)
              {
                _elem19 = new com.wi.director.thrift.v1.datasheet.DataSheetOrder();
                _elem19.read(iprot);
                dataSheetOrder.add(_elem19);
              }
              iprot.readListEnd();
            }
            return dataSheetOrder;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      return null;
    }
  }

  @Override
  protected void standardSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case JOB_ORDER:
        List<com.wi.director.thrift.v1.job.JobOrder> jobOrder = (List<com.wi.director.thrift.v1.job.JobOrder>)value_;
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, jobOrder.size()));
          for (com.wi.director.thrift.v1.job.JobOrder _iter21 : jobOrder)
          {
            _iter21.write(oprot);
          }
          oprot.writeListEnd();
        }
        return;
      case TEMPLATE_ORDER:
        List<com.wi.director.thrift.v1.jobtemplate.TemplateOrder> templateOrder = (List<com.wi.director.thrift.v1.jobtemplate.TemplateOrder>)value_;
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, templateOrder.size()));
          for (com.wi.director.thrift.v1.jobtemplate.TemplateOrder _iter22 : templateOrder)
          {
            _iter22.write(oprot);
          }
          oprot.writeListEnd();
        }
        return;
      case USER_ORDER:
        List<com.wi.director.thrift.v1.user.UserOrder> userOrder = (List<com.wi.director.thrift.v1.user.UserOrder>)value_;
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, userOrder.size()));
          for (com.wi.director.thrift.v1.user.UserOrder _iter23 : userOrder)
          {
            _iter23.write(oprot);
          }
          oprot.writeListEnd();
        }
        return;
      case SETTING_CHANGE_ORDER:
        List<com.wi.director.thrift.v1.setting.SettingChangeOrder> settingChangeOrder = (List<com.wi.director.thrift.v1.setting.SettingChangeOrder>)value_;
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, settingChangeOrder.size()));
          for (com.wi.director.thrift.v1.setting.SettingChangeOrder _iter24 : settingChangeOrder)
          {
            _iter24.write(oprot);
          }
          oprot.writeListEnd();
        }
        return;
      case DEBUG_REPORT_ORDER:
        List<com.wi.director.thrift.v1.debugreport.DebugReportOrder> debugReportOrder = (List<com.wi.director.thrift.v1.debugreport.DebugReportOrder>)value_;
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, debugReportOrder.size()));
          for (com.wi.director.thrift.v1.debugreport.DebugReportOrder _iter25 : debugReportOrder)
          {
            _iter25.write(oprot);
          }
          oprot.writeListEnd();
        }
        return;
      case DATA_SHEET_SET_ORDER:
        List<com.wi.director.thrift.v1.datasheet.DataSheetSetOrder> dataSheetSetOrder = (List<com.wi.director.thrift.v1.datasheet.DataSheetSetOrder>)value_;
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, dataSheetSetOrder.size()));
          for (com.wi.director.thrift.v1.datasheet.DataSheetSetOrder _iter26 : dataSheetSetOrder)
          {
            _iter26.write(oprot);
          }
          oprot.writeListEnd();
        }
        return;
      case DATA_SHEET_ORDER:
        List<com.wi.director.thrift.v1.datasheet.DataSheetOrder> dataSheetOrder = (List<com.wi.director.thrift.v1.datasheet.DataSheetOrder>)value_;
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, dataSheetOrder.size()));
          for (com.wi.director.thrift.v1.datasheet.DataSheetOrder _iter27 : dataSheetOrder)
          {
            _iter27.write(oprot);
          }
          oprot.writeListEnd();
        }
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected Object tupleSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, short fieldID) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(fieldID);
    if (setField != null) {
      switch (setField) {
        case JOB_ORDER:
          List<com.wi.director.thrift.v1.job.JobOrder> jobOrder;
          {
            org.apache.thrift.protocol.TList _list28 = iprot.readListBegin();
            jobOrder = new ArrayList<com.wi.director.thrift.v1.job.JobOrder>(_list28.size);
            com.wi.director.thrift.v1.job.JobOrder _elem29;
            for (int _i30 = 0; _i30 < _list28.size; ++_i30)
            {
              _elem29 = new com.wi.director.thrift.v1.job.JobOrder();
              _elem29.read(iprot);
              jobOrder.add(_elem29);
            }
            iprot.readListEnd();
          }
          return jobOrder;
        case TEMPLATE_ORDER:
          List<com.wi.director.thrift.v1.jobtemplate.TemplateOrder> templateOrder;
          {
            org.apache.thrift.protocol.TList _list31 = iprot.readListBegin();
            templateOrder = new ArrayList<com.wi.director.thrift.v1.jobtemplate.TemplateOrder>(_list31.size);
            com.wi.director.thrift.v1.jobtemplate.TemplateOrder _elem32;
            for (int _i33 = 0; _i33 < _list31.size; ++_i33)
            {
              _elem32 = new com.wi.director.thrift.v1.jobtemplate.TemplateOrder();
              _elem32.read(iprot);
              templateOrder.add(_elem32);
            }
            iprot.readListEnd();
          }
          return templateOrder;
        case USER_ORDER:
          List<com.wi.director.thrift.v1.user.UserOrder> userOrder;
          {
            org.apache.thrift.protocol.TList _list34 = iprot.readListBegin();
            userOrder = new ArrayList<com.wi.director.thrift.v1.user.UserOrder>(_list34.size);
            com.wi.director.thrift.v1.user.UserOrder _elem35;
            for (int _i36 = 0; _i36 < _list34.size; ++_i36)
            {
              _elem35 = new com.wi.director.thrift.v1.user.UserOrder();
              _elem35.read(iprot);
              userOrder.add(_elem35);
            }
            iprot.readListEnd();
          }
          return userOrder;
        case SETTING_CHANGE_ORDER:
          List<com.wi.director.thrift.v1.setting.SettingChangeOrder> settingChangeOrder;
          {
            org.apache.thrift.protocol.TList _list37 = iprot.readListBegin();
            settingChangeOrder = new ArrayList<com.wi.director.thrift.v1.setting.SettingChangeOrder>(_list37.size);
            com.wi.director.thrift.v1.setting.SettingChangeOrder _elem38;
            for (int _i39 = 0; _i39 < _list37.size; ++_i39)
            {
              _elem38 = new com.wi.director.thrift.v1.setting.SettingChangeOrder();
              _elem38.read(iprot);
              settingChangeOrder.add(_elem38);
            }
            iprot.readListEnd();
          }
          return settingChangeOrder;
        case DEBUG_REPORT_ORDER:
          List<com.wi.director.thrift.v1.debugreport.DebugReportOrder> debugReportOrder;
          {
            org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
            debugReportOrder = new ArrayList<com.wi.director.thrift.v1.debugreport.DebugReportOrder>(_list40.size);
            com.wi.director.thrift.v1.debugreport.DebugReportOrder _elem41;
            for (int _i42 = 0; _i42 < _list40.size; ++_i42)
            {
              _elem41 = new com.wi.director.thrift.v1.debugreport.DebugReportOrder();
              _elem41.read(iprot);
              debugReportOrder.add(_elem41);
            }
            iprot.readListEnd();
          }
          return debugReportOrder;
        case DATA_SHEET_SET_ORDER:
          List<com.wi.director.thrift.v1.datasheet.DataSheetSetOrder> dataSheetSetOrder;
          {
            org.apache.thrift.protocol.TList _list43 = iprot.readListBegin();
            dataSheetSetOrder = new ArrayList<com.wi.director.thrift.v1.datasheet.DataSheetSetOrder>(_list43.size);
            com.wi.director.thrift.v1.datasheet.DataSheetSetOrder _elem44;
            for (int _i45 = 0; _i45 < _list43.size; ++_i45)
            {
              _elem44 = new com.wi.director.thrift.v1.datasheet.DataSheetSetOrder();
              _elem44.read(iprot);
              dataSheetSetOrder.add(_elem44);
            }
            iprot.readListEnd();
          }
          return dataSheetSetOrder;
        case DATA_SHEET_ORDER:
          List<com.wi.director.thrift.v1.datasheet.DataSheetOrder> dataSheetOrder;
          {
            org.apache.thrift.protocol.TList _list46 = iprot.readListBegin();
            dataSheetOrder = new ArrayList<com.wi.director.thrift.v1.datasheet.DataSheetOrder>(_list46.size);
            com.wi.director.thrift.v1.datasheet.DataSheetOrder _elem47;
            for (int _i48 = 0; _i48 < _list46.size; ++_i48)
            {
              _elem47 = new com.wi.director.thrift.v1.datasheet.DataSheetOrder();
              _elem47.read(iprot);
              dataSheetOrder.add(_elem47);
            }
            iprot.readListEnd();
          }
          return dataSheetOrder;
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      throw new TProtocolException("Couldn't find a field with field id " + fieldID);
    }
  }

  @Override
  protected void tupleSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case JOB_ORDER:
        List<com.wi.director.thrift.v1.job.JobOrder> jobOrder = (List<com.wi.director.thrift.v1.job.JobOrder>)value_;
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, jobOrder.size()));
          for (com.wi.director.thrift.v1.job.JobOrder _iter49 : jobOrder)
          {
            _iter49.write(oprot);
          }
          oprot.writeListEnd();
        }
        return;
      case TEMPLATE_ORDER:
        List<com.wi.director.thrift.v1.jobtemplate.TemplateOrder> templateOrder = (List<com.wi.director.thrift.v1.jobtemplate.TemplateOrder>)value_;
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, templateOrder.size()));
          for (com.wi.director.thrift.v1.jobtemplate.TemplateOrder _iter50 : templateOrder)
          {
            _iter50.write(oprot);
          }
          oprot.writeListEnd();
        }
        return;
      case USER_ORDER:
        List<com.wi.director.thrift.v1.user.UserOrder> userOrder = (List<com.wi.director.thrift.v1.user.UserOrder>)value_;
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, userOrder.size()));
          for (com.wi.director.thrift.v1.user.UserOrder _iter51 : userOrder)
          {
            _iter51.write(oprot);
          }
          oprot.writeListEnd();
        }
        return;
      case SETTING_CHANGE_ORDER:
        List<com.wi.director.thrift.v1.setting.SettingChangeOrder> settingChangeOrder = (List<com.wi.director.thrift.v1.setting.SettingChangeOrder>)value_;
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, settingChangeOrder.size()));
          for (com.wi.director.thrift.v1.setting.SettingChangeOrder _iter52 : settingChangeOrder)
          {
            _iter52.write(oprot);
          }
          oprot.writeListEnd();
        }
        return;
      case DEBUG_REPORT_ORDER:
        List<com.wi.director.thrift.v1.debugreport.DebugReportOrder> debugReportOrder = (List<com.wi.director.thrift.v1.debugreport.DebugReportOrder>)value_;
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, debugReportOrder.size()));
          for (com.wi.director.thrift.v1.debugreport.DebugReportOrder _iter53 : debugReportOrder)
          {
            _iter53.write(oprot);
          }
          oprot.writeListEnd();
        }
        return;
      case DATA_SHEET_SET_ORDER:
        List<com.wi.director.thrift.v1.datasheet.DataSheetSetOrder> dataSheetSetOrder = (List<com.wi.director.thrift.v1.datasheet.DataSheetSetOrder>)value_;
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, dataSheetSetOrder.size()));
          for (com.wi.director.thrift.v1.datasheet.DataSheetSetOrder _iter54 : dataSheetSetOrder)
          {
            _iter54.write(oprot);
          }
          oprot.writeListEnd();
        }
        return;
      case DATA_SHEET_ORDER:
        List<com.wi.director.thrift.v1.datasheet.DataSheetOrder> dataSheetOrder = (List<com.wi.director.thrift.v1.datasheet.DataSheetOrder>)value_;
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, dataSheetOrder.size()));
          for (com.wi.director.thrift.v1.datasheet.DataSheetOrder _iter55 : dataSheetOrder)
          {
            _iter55.write(oprot);
          }
          oprot.writeListEnd();
        }
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TField getFieldDesc(_Fields setField) {
    switch (setField) {
      case JOB_ORDER:
        return JOB_ORDER_FIELD_DESC;
      case TEMPLATE_ORDER:
        return TEMPLATE_ORDER_FIELD_DESC;
      case USER_ORDER:
        return USER_ORDER_FIELD_DESC;
      case SETTING_CHANGE_ORDER:
        return SETTING_CHANGE_ORDER_FIELD_DESC;
      case DEBUG_REPORT_ORDER:
        return DEBUG_REPORT_ORDER_FIELD_DESC;
      case DATA_SHEET_SET_ORDER:
        return DATA_SHEET_SET_ORDER_FIELD_DESC;
      case DATA_SHEET_ORDER:
        return DATA_SHEET_ORDER_FIELD_DESC;
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TStruct getStructDesc() {
    return STRUCT_DESC;
  }

  @Override
  protected _Fields enumForId(short id) {
    return _Fields.findByThriftIdOrThrow(id);
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public List<com.wi.director.thrift.v1.job.JobOrder> getJobOrder() {
    if (getSetField() == _Fields.JOB_ORDER) {
      return (List<com.wi.director.thrift.v1.job.JobOrder>)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'jobOrder' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setJobOrder(List<com.wi.director.thrift.v1.job.JobOrder> value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.JOB_ORDER;
    value_ = value;
  }

  public List<com.wi.director.thrift.v1.jobtemplate.TemplateOrder> getTemplateOrder() {
    if (getSetField() == _Fields.TEMPLATE_ORDER) {
      return (List<com.wi.director.thrift.v1.jobtemplate.TemplateOrder>)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'templateOrder' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setTemplateOrder(List<com.wi.director.thrift.v1.jobtemplate.TemplateOrder> value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.TEMPLATE_ORDER;
    value_ = value;
  }

  public List<com.wi.director.thrift.v1.user.UserOrder> getUserOrder() {
    if (getSetField() == _Fields.USER_ORDER) {
      return (List<com.wi.director.thrift.v1.user.UserOrder>)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'userOrder' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setUserOrder(List<com.wi.director.thrift.v1.user.UserOrder> value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.USER_ORDER;
    value_ = value;
  }

  public List<com.wi.director.thrift.v1.setting.SettingChangeOrder> getSettingChangeOrder() {
    if (getSetField() == _Fields.SETTING_CHANGE_ORDER) {
      return (List<com.wi.director.thrift.v1.setting.SettingChangeOrder>)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'settingChangeOrder' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setSettingChangeOrder(List<com.wi.director.thrift.v1.setting.SettingChangeOrder> value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.SETTING_CHANGE_ORDER;
    value_ = value;
  }

  public List<com.wi.director.thrift.v1.debugreport.DebugReportOrder> getDebugReportOrder() {
    if (getSetField() == _Fields.DEBUG_REPORT_ORDER) {
      return (List<com.wi.director.thrift.v1.debugreport.DebugReportOrder>)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'debugReportOrder' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setDebugReportOrder(List<com.wi.director.thrift.v1.debugreport.DebugReportOrder> value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.DEBUG_REPORT_ORDER;
    value_ = value;
  }

  public List<com.wi.director.thrift.v1.datasheet.DataSheetSetOrder> getDataSheetSetOrder() {
    if (getSetField() == _Fields.DATA_SHEET_SET_ORDER) {
      return (List<com.wi.director.thrift.v1.datasheet.DataSheetSetOrder>)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'dataSheetSetOrder' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setDataSheetSetOrder(List<com.wi.director.thrift.v1.datasheet.DataSheetSetOrder> value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.DATA_SHEET_SET_ORDER;
    value_ = value;
  }

  public List<com.wi.director.thrift.v1.datasheet.DataSheetOrder> getDataSheetOrder() {
    if (getSetField() == _Fields.DATA_SHEET_ORDER) {
      return (List<com.wi.director.thrift.v1.datasheet.DataSheetOrder>)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'dataSheetOrder' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setDataSheetOrder(List<com.wi.director.thrift.v1.datasheet.DataSheetOrder> value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.DATA_SHEET_ORDER;
    value_ = value;
  }

  public boolean isSetJobOrder() {
    return setField_ == _Fields.JOB_ORDER;
  }


  public boolean isSetTemplateOrder() {
    return setField_ == _Fields.TEMPLATE_ORDER;
  }


  public boolean isSetUserOrder() {
    return setField_ == _Fields.USER_ORDER;
  }


  public boolean isSetSettingChangeOrder() {
    return setField_ == _Fields.SETTING_CHANGE_ORDER;
  }


  public boolean isSetDebugReportOrder() {
    return setField_ == _Fields.DEBUG_REPORT_ORDER;
  }


  public boolean isSetDataSheetSetOrder() {
    return setField_ == _Fields.DATA_SHEET_SET_ORDER;
  }


  public boolean isSetDataSheetOrder() {
    return setField_ == _Fields.DATA_SHEET_ORDER;
  }


  public boolean equals(Object other) {
    if (other instanceof PageTokenSortOrder) {
      return equals((PageTokenSortOrder)other);
    } else {
      return false;
    }
  }

  public boolean equals(PageTokenSortOrder other) {
    return other != null && getSetField() == other.getSetField() && getFieldValue().equals(other.getFieldValue());
  }

  @Override
  public int compareTo(PageTokenSortOrder other) {
    int lastComparison = org.apache.thrift.TBaseHelper.compareTo(getSetField(), other.getSetField());
    if (lastComparison == 0) {
      return org.apache.thrift.TBaseHelper.compareTo(getFieldValue(), other.getFieldValue());
    }
    return lastComparison;
  }


  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();
    list.add(this.getClass().getName());
    org.apache.thrift.TFieldIdEnum setField = getSetField();
    if (setField != null) {
      list.add(setField.getThriftFieldId());
      Object value = getFieldValue();
      if (value instanceof org.apache.thrift.TEnum) {
        list.add(((org.apache.thrift.TEnum)getFieldValue()).getValue());
      } else {
        list.add(value);
      }
    }
    return list.hashCode();
  }
  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


}
