/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wi.director.thrift.v1.setting;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class SettingChange implements org.apache.thrift.TBase<SettingChange, SettingChange._Fields>, java.io.Serializable, Cloneable, Comparable<SettingChange> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SettingChange");

  private static final org.apache.thrift.protocol.TField CHANGE_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("changeNumber", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField AUTHOR_FIELD_DESC = new org.apache.thrift.protocol.TField("author", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField CREATED_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("createdAt", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField COMMIT_MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("commitMessage", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField UPDATED_SETTINGS_FIELD_DESC = new org.apache.thrift.protocol.TField("updatedSettings", org.apache.thrift.protocol.TType.MAP, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SettingChangeStandardSchemeFactory());
  }

  public long changeNumber; // required
  public com.wi.director.thrift.v1.user.User author; // required
  public long createdAt; // required
  public String commitMessage; // required
  public Map<String,SettingImpl> updatedSettings; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CHANGE_NUMBER((short)1, "changeNumber"),
    AUTHOR((short)2, "author"),
    CREATED_AT((short)3, "createdAt"),
    COMMIT_MESSAGE((short)4, "commitMessage"),
    UPDATED_SETTINGS((short)5, "updatedSettings");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CHANGE_NUMBER
          return CHANGE_NUMBER;
        case 2: // AUTHOR
          return AUTHOR;
        case 3: // CREATED_AT
          return CREATED_AT;
        case 4: // COMMIT_MESSAGE
          return COMMIT_MESSAGE;
        case 5: // UPDATED_SETTINGS
          return UPDATED_SETTINGS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CHANGENUMBER_ISSET_ID = 0;
  private static final int __CREATEDAT_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CHANGE_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("changeNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.AUTHOR, new org.apache.thrift.meta_data.FieldMetaData("author", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.user.User.class)));
    tmpMap.put(_Fields.CREATED_AT, new org.apache.thrift.meta_data.FieldMetaData("createdAt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.COMMIT_MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("commitMessage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPDATED_SETTINGS, new org.apache.thrift.meta_data.FieldMetaData("updatedSettings", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SettingImpl.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SettingChange.class, metaDataMap);
  }

  public SettingChange() {
  }

  public SettingChange(
    long changeNumber,
    com.wi.director.thrift.v1.user.User author,
    long createdAt,
    String commitMessage,
    Map<String,SettingImpl> updatedSettings)
  {
    this();
    this.changeNumber = changeNumber;
    setChangeNumberIsSet(true);
    this.author = author;
    this.createdAt = createdAt;
    setCreatedAtIsSet(true);
    this.commitMessage = commitMessage;
    this.updatedSettings = updatedSettings;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SettingChange(SettingChange other) {
    __isset_bitfield = other.__isset_bitfield;
    this.changeNumber = other.changeNumber;
    if (other.isSetAuthor()) {
      this.author = new com.wi.director.thrift.v1.user.User(other.author);
    }
    this.createdAt = other.createdAt;
    if (other.isSetCommitMessage()) {
      this.commitMessage = other.commitMessage;
    }
    if (other.isSetUpdatedSettings()) {
      Map<String,SettingImpl> __this__updatedSettings = new HashMap<String,SettingImpl>(other.updatedSettings.size());
      for (Map.Entry<String, SettingImpl> other_element : other.updatedSettings.entrySet()) {

        String other_element_key = other_element.getKey();
        SettingImpl other_element_value = other_element.getValue();

        String __this__updatedSettings_copy_key = other_element_key;

        SettingImpl __this__updatedSettings_copy_value = new SettingImpl(other_element_value);

        __this__updatedSettings.put(__this__updatedSettings_copy_key, __this__updatedSettings_copy_value);
      }
      this.updatedSettings = __this__updatedSettings;
    }
  }

  public SettingChange deepCopy() {
    return new SettingChange(this);
  }

  @Override
  public void clear() {
    setChangeNumberIsSet(false);
    this.changeNumber = 0;
    this.author = null;
    setCreatedAtIsSet(false);
    this.createdAt = 0;
    this.commitMessage = null;
    this.updatedSettings = null;
  }

  public long getChangeNumber() {
    return this.changeNumber;
  }

  public SettingChange setChangeNumber(long changeNumber) {
    this.changeNumber = changeNumber;
    setChangeNumberIsSet(true);
    return this;
  }

  public void unsetChangeNumber() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHANGENUMBER_ISSET_ID);
  }

  /** Returns true if field changeNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetChangeNumber() {
    return EncodingUtils.testBit(__isset_bitfield, __CHANGENUMBER_ISSET_ID);
  }

  public void setChangeNumberIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHANGENUMBER_ISSET_ID, value);
  }

  public com.wi.director.thrift.v1.user.User getAuthor() {
    return this.author;
  }

  public SettingChange setAuthor(com.wi.director.thrift.v1.user.User author) {
    this.author = author;
    return this;
  }

  public void unsetAuthor() {
    this.author = null;
  }

  /** Returns true if field author is set (has been assigned a value) and false otherwise */
  public boolean isSetAuthor() {
    return this.author != null;
  }

  public void setAuthorIsSet(boolean value) {
    if (!value) {
      this.author = null;
    }
  }

  public long getCreatedAt() {
    return this.createdAt;
  }

  public SettingChange setCreatedAt(long createdAt) {
    this.createdAt = createdAt;
    setCreatedAtIsSet(true);
    return this;
  }

  public void unsetCreatedAt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATEDAT_ISSET_ID);
  }

  /** Returns true if field createdAt is set (has been assigned a value) and false otherwise */
  public boolean isSetCreatedAt() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATEDAT_ISSET_ID);
  }

  public void setCreatedAtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATEDAT_ISSET_ID, value);
  }

  public String getCommitMessage() {
    return this.commitMessage;
  }

  public SettingChange setCommitMessage(String commitMessage) {
    this.commitMessage = commitMessage;
    return this;
  }

  public void unsetCommitMessage() {
    this.commitMessage = null;
  }

  /** Returns true if field commitMessage is set (has been assigned a value) and false otherwise */
  public boolean isSetCommitMessage() {
    return this.commitMessage != null;
  }

  public void setCommitMessageIsSet(boolean value) {
    if (!value) {
      this.commitMessage = null;
    }
  }

  public int getUpdatedSettingsSize() {
    return (this.updatedSettings == null) ? 0 : this.updatedSettings.size();
  }

  public void putToUpdatedSettings(String key, SettingImpl val) {
    if (this.updatedSettings == null) {
      this.updatedSettings = new HashMap<String,SettingImpl>();
    }
    this.updatedSettings.put(key, val);
  }

  public Map<String,SettingImpl> getUpdatedSettings() {
    return this.updatedSettings;
  }

  public SettingChange setUpdatedSettings(Map<String,SettingImpl> updatedSettings) {
    this.updatedSettings = updatedSettings;
    return this;
  }

  public void unsetUpdatedSettings() {
    this.updatedSettings = null;
  }

  /** Returns true if field updatedSettings is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdatedSettings() {
    return this.updatedSettings != null;
  }

  public void setUpdatedSettingsIsSet(boolean value) {
    if (!value) {
      this.updatedSettings = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CHANGE_NUMBER:
      if (value == null) {
        unsetChangeNumber();
      } else {
        setChangeNumber((Long)value);
      }
      break;

    case AUTHOR:
      if (value == null) {
        unsetAuthor();
      } else {
        setAuthor((com.wi.director.thrift.v1.user.User)value);
      }
      break;

    case CREATED_AT:
      if (value == null) {
        unsetCreatedAt();
      } else {
        setCreatedAt((Long)value);
      }
      break;

    case COMMIT_MESSAGE:
      if (value == null) {
        unsetCommitMessage();
      } else {
        setCommitMessage((String)value);
      }
      break;

    case UPDATED_SETTINGS:
      if (value == null) {
        unsetUpdatedSettings();
      } else {
        setUpdatedSettings((Map<String,SettingImpl>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CHANGE_NUMBER:
      return getChangeNumber();

    case AUTHOR:
      return getAuthor();

    case CREATED_AT:
      return getCreatedAt();

    case COMMIT_MESSAGE:
      return getCommitMessage();

    case UPDATED_SETTINGS:
      return getUpdatedSettings();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CHANGE_NUMBER:
      return isSetChangeNumber();
    case AUTHOR:
      return isSetAuthor();
    case CREATED_AT:
      return isSetCreatedAt();
    case COMMIT_MESSAGE:
      return isSetCommitMessage();
    case UPDATED_SETTINGS:
      return isSetUpdatedSettings();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SettingChange)
      return this.equals((SettingChange)that);
    return false;
  }

  public boolean equals(SettingChange that) {
    if (that == null)
      return false;

    boolean this_present_changeNumber = true;
    boolean that_present_changeNumber = true;
    if (this_present_changeNumber || that_present_changeNumber) {
      if (!(this_present_changeNumber && that_present_changeNumber))
        return false;
      if (this.changeNumber != that.changeNumber)
        return false;
    }

    boolean this_present_author = true && this.isSetAuthor();
    boolean that_present_author = true && that.isSetAuthor();
    if (this_present_author || that_present_author) {
      if (!(this_present_author && that_present_author))
        return false;
      if (!this.author.equals(that.author))
        return false;
    }

    boolean this_present_createdAt = true;
    boolean that_present_createdAt = true;
    if (this_present_createdAt || that_present_createdAt) {
      if (!(this_present_createdAt && that_present_createdAt))
        return false;
      if (this.createdAt != that.createdAt)
        return false;
    }

    boolean this_present_commitMessage = true && this.isSetCommitMessage();
    boolean that_present_commitMessage = true && that.isSetCommitMessage();
    if (this_present_commitMessage || that_present_commitMessage) {
      if (!(this_present_commitMessage && that_present_commitMessage))
        return false;
      if (!this.commitMessage.equals(that.commitMessage))
        return false;
    }

    boolean this_present_updatedSettings = true && this.isSetUpdatedSettings();
    boolean that_present_updatedSettings = true && that.isSetUpdatedSettings();
    if (this_present_updatedSettings || that_present_updatedSettings) {
      if (!(this_present_updatedSettings && that_present_updatedSettings))
        return false;
      if (!this.updatedSettings.equals(that.updatedSettings))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_changeNumber = true;
    list.add(present_changeNumber);
    if (present_changeNumber)
      list.add(changeNumber);

    boolean present_author = true && (isSetAuthor());
    list.add(present_author);
    if (present_author)
      list.add(author);

    boolean present_createdAt = true;
    list.add(present_createdAt);
    if (present_createdAt)
      list.add(createdAt);

    boolean present_commitMessage = true && (isSetCommitMessage());
    list.add(present_commitMessage);
    if (present_commitMessage)
      list.add(commitMessage);

    boolean present_updatedSettings = true && (isSetUpdatedSettings());
    list.add(present_updatedSettings);
    if (present_updatedSettings)
      list.add(updatedSettings);

    return list.hashCode();
  }

  @Override
  public int compareTo(SettingChange other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetChangeNumber()).compareTo(other.isSetChangeNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChangeNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.changeNumber, other.changeNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuthor()).compareTo(other.isSetAuthor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuthor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.author, other.author);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreatedAt()).compareTo(other.isSetCreatedAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreatedAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createdAt, other.createdAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommitMessage()).compareTo(other.isSetCommitMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommitMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commitMessage, other.commitMessage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdatedSettings()).compareTo(other.isSetUpdatedSettings());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdatedSettings()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updatedSettings, other.updatedSettings);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SettingChange(");
    boolean first = true;

    sb.append("changeNumber:");
    sb.append(this.changeNumber);
    first = false;
    if (!first) sb.append(", ");
    sb.append("author:");
    if (this.author == null) {
      sb.append("null");
    } else {
      sb.append(this.author);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createdAt:");
    sb.append(this.createdAt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("commitMessage:");
    if (this.commitMessage == null) {
      sb.append("null");
    } else {
      sb.append(this.commitMessage);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("updatedSettings:");
    if (this.updatedSettings == null) {
      sb.append("null");
    } else {
      sb.append(this.updatedSettings);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (author != null) {
      author.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SettingChangeStandardSchemeFactory implements SchemeFactory {
    public SettingChangeStandardScheme getScheme() {
      return new SettingChangeStandardScheme();
    }
  }

  private static class SettingChangeStandardScheme extends StandardScheme<SettingChange> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SettingChange struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CHANGE_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.changeNumber = iprot.readI64();
              struct.setChangeNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // AUTHOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.author = new com.wi.director.thrift.v1.user.User();
              struct.author.read(iprot);
              struct.setAuthorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CREATED_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createdAt = iprot.readI64();
              struct.setCreatedAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COMMIT_MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.commitMessage = iprot.readString();
              struct.setCommitMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // UPDATED_SETTINGS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map14 = iprot.readMapBegin();
                struct.updatedSettings = new HashMap<String,SettingImpl>(2*_map14.size);
                String _key15;
                SettingImpl _val16;
                for (int _i17 = 0; _i17 < _map14.size; ++_i17)
                {
                  _key15 = iprot.readString();
                  _val16 = new SettingImpl();
                  _val16.read(iprot);
                  struct.updatedSettings.put(_key15, _val16);
                }
                iprot.readMapEnd();
              }
              struct.setUpdatedSettingsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SettingChange struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(CHANGE_NUMBER_FIELD_DESC);
      oprot.writeI64(struct.changeNumber);
      oprot.writeFieldEnd();
      if (struct.author != null) {
        oprot.writeFieldBegin(AUTHOR_FIELD_DESC);
        struct.author.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATED_AT_FIELD_DESC);
      oprot.writeI64(struct.createdAt);
      oprot.writeFieldEnd();
      if (struct.commitMessage != null) {
        oprot.writeFieldBegin(COMMIT_MESSAGE_FIELD_DESC);
        oprot.writeString(struct.commitMessage);
        oprot.writeFieldEnd();
      }
      if (struct.updatedSettings != null) {
        oprot.writeFieldBegin(UPDATED_SETTINGS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.updatedSettings.size()));
          for (Map.Entry<String, SettingImpl> _iter18 : struct.updatedSettings.entrySet())
          {
            oprot.writeString(_iter18.getKey());
            _iter18.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

}

