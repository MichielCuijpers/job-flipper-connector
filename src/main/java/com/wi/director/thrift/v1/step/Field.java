/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wi.director.thrift.v1.step;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * A field that can accompany a Step
 */
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class Field implements org.apache.thrift.TBase<Field, Field._Fields>, java.io.Serializable, Cloneable, Comparable<Field> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Field");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField FIELD_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("fieldData", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField IS_REQUIRED_FIELD_DESC = new org.apache.thrift.protocol.TField("isRequired", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField FORMULA_FIELD_DESC = new org.apache.thrift.protocol.TField("formula", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField NAME_WRAPPER_FIELD_DESC = new org.apache.thrift.protocol.TField("nameWrapper", org.apache.thrift.protocol.TType.STRUCT, (short)10);
  private static final org.apache.thrift.protocol.TField LATEST_CHANGE_FIELD_DESC = new org.apache.thrift.protocol.TField("latestChange", org.apache.thrift.protocol.TType.STRUCT, (short)200);
  private static final org.apache.thrift.protocol.TField OTHER_FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("otherField", org.apache.thrift.protocol.TType.STRUCT, (short)201);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FieldStandardSchemeFactory());
  }

  public String id; // required
  public String key; // required
  /**
   * 
   * @see com.wi.director.thrift.v1.field_data.FieldType
   */
  public com.wi.director.thrift.v1.field_data.FieldType type; // required
  public com.wi.director.thrift.v1.field_data.FieldData fieldData; // optional
  public boolean isRequired; // required
  public String clientId; // required
  public com.parsable.thrift.v1.formula.Formula formula; // optional
  public com.parsable.thrift.v1.reference.StringWrapper nameWrapper; // optional
  public com.wi.director.thrift.v1.diff.Change latestChange; // optional
  public Field otherField; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    KEY((short)2, "key"),
    /**
     * 
     * @see com.wi.director.thrift.v1.field_data.FieldType
     */
    TYPE((short)3, "type"),
    FIELD_DATA((short)4, "fieldData"),
    IS_REQUIRED((short)5, "isRequired"),
    CLIENT_ID((short)6, "clientId"),
    FORMULA((short)7, "formula"),
    NAME_WRAPPER((short)10, "nameWrapper"),
    LATEST_CHANGE((short)200, "latestChange"),
    OTHER_FIELD((short)201, "otherField");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // KEY
          return KEY;
        case 3: // TYPE
          return TYPE;
        case 4: // FIELD_DATA
          return FIELD_DATA;
        case 5: // IS_REQUIRED
          return IS_REQUIRED;
        case 6: // CLIENT_ID
          return CLIENT_ID;
        case 7: // FORMULA
          return FORMULA;
        case 10: // NAME_WRAPPER
          return NAME_WRAPPER;
        case 200: // LATEST_CHANGE
          return LATEST_CHANGE;
        case 201: // OTHER_FIELD
          return OTHER_FIELD;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ISREQUIRED_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.FIELD_DATA,_Fields.FORMULA,_Fields.NAME_WRAPPER,_Fields.LATEST_CHANGE,_Fields.OTHER_FIELD};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.wi.director.thrift.v1.field_data.FieldType.class)));
    tmpMap.put(_Fields.FIELD_DATA, new org.apache.thrift.meta_data.FieldMetaData("fieldData", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.field_data.FieldData.class)));
    tmpMap.put(_Fields.IS_REQUIRED, new org.apache.thrift.meta_data.FieldMetaData("isRequired", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FORMULA, new org.apache.thrift.meta_data.FieldMetaData("formula", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.parsable.thrift.v1.formula.Formula.class)));
    tmpMap.put(_Fields.NAME_WRAPPER, new org.apache.thrift.meta_data.FieldMetaData("nameWrapper", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.parsable.thrift.v1.reference.StringWrapper.class)));
    tmpMap.put(_Fields.LATEST_CHANGE, new org.apache.thrift.meta_data.FieldMetaData("latestChange", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.diff.Change.class)));
    tmpMap.put(_Fields.OTHER_FIELD, new org.apache.thrift.meta_data.FieldMetaData("otherField", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "Field")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Field.class, metaDataMap);
  }

  public Field() {
  }

  public Field(
    String id,
    String key,
    com.wi.director.thrift.v1.field_data.FieldType type,
    boolean isRequired,
    String clientId)
  {
    this();
    this.id = id;
    this.key = key;
    this.type = type;
    this.isRequired = isRequired;
    setIsRequiredIsSet(true);
    this.clientId = clientId;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Field(Field other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetKey()) {
      this.key = other.key;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetFieldData()) {
      this.fieldData = new com.wi.director.thrift.v1.field_data.FieldData(other.fieldData);
    }
    this.isRequired = other.isRequired;
    if (other.isSetClientId()) {
      this.clientId = other.clientId;
    }
    if (other.isSetFormula()) {
      this.formula = new com.parsable.thrift.v1.formula.Formula(other.formula);
    }
    if (other.isSetNameWrapper()) {
      this.nameWrapper = new com.parsable.thrift.v1.reference.StringWrapper(other.nameWrapper);
    }
    if (other.isSetLatestChange()) {
      this.latestChange = new com.wi.director.thrift.v1.diff.Change(other.latestChange);
    }
    if (other.isSetOtherField()) {
      this.otherField = new Field(other.otherField);
    }
  }

  public Field deepCopy() {
    return new Field(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.key = null;
    this.type = null;
    this.fieldData = null;
    setIsRequiredIsSet(false);
    this.isRequired = false;
    this.clientId = null;
    this.formula = null;
    this.nameWrapper = null;
    this.latestChange = null;
    this.otherField = null;
  }

  public String getId() {
    return this.id;
  }

  public Field setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public String getKey() {
    return this.key;
  }

  public Field setKey(String key) {
    this.key = key;
    return this;
  }

  public void unsetKey() {
    this.key = null;
  }

  /** Returns true if field key is set (has been assigned a value) and false otherwise */
  public boolean isSetKey() {
    return this.key != null;
  }

  public void setKeyIsSet(boolean value) {
    if (!value) {
      this.key = null;
    }
  }

  /**
   * 
   * @see com.wi.director.thrift.v1.field_data.FieldType
   */
  public com.wi.director.thrift.v1.field_data.FieldType getType() {
    return this.type;
  }

  /**
   * 
   * @see com.wi.director.thrift.v1.field_data.FieldType
   */
  public Field setType(com.wi.director.thrift.v1.field_data.FieldType type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public com.wi.director.thrift.v1.field_data.FieldData getFieldData() {
    return this.fieldData;
  }

  public Field setFieldData(com.wi.director.thrift.v1.field_data.FieldData fieldData) {
    this.fieldData = fieldData;
    return this;
  }

  public void unsetFieldData() {
    this.fieldData = null;
  }

  /** Returns true if field fieldData is set (has been assigned a value) and false otherwise */
  public boolean isSetFieldData() {
    return this.fieldData != null;
  }

  public void setFieldDataIsSet(boolean value) {
    if (!value) {
      this.fieldData = null;
    }
  }

  public boolean isIsRequired() {
    return this.isRequired;
  }

  public Field setIsRequired(boolean isRequired) {
    this.isRequired = isRequired;
    setIsRequiredIsSet(true);
    return this;
  }

  public void unsetIsRequired() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISREQUIRED_ISSET_ID);
  }

  /** Returns true if field isRequired is set (has been assigned a value) and false otherwise */
  public boolean isSetIsRequired() {
    return EncodingUtils.testBit(__isset_bitfield, __ISREQUIRED_ISSET_ID);
  }

  public void setIsRequiredIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISREQUIRED_ISSET_ID, value);
  }

  public String getClientId() {
    return this.clientId;
  }

  public Field setClientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  public void unsetClientId() {
    this.clientId = null;
  }

  /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
  public boolean isSetClientId() {
    return this.clientId != null;
  }

  public void setClientIdIsSet(boolean value) {
    if (!value) {
      this.clientId = null;
    }
  }

  public com.parsable.thrift.v1.formula.Formula getFormula() {
    return this.formula;
  }

  public Field setFormula(com.parsable.thrift.v1.formula.Formula formula) {
    this.formula = formula;
    return this;
  }

  public void unsetFormula() {
    this.formula = null;
  }

  /** Returns true if field formula is set (has been assigned a value) and false otherwise */
  public boolean isSetFormula() {
    return this.formula != null;
  }

  public void setFormulaIsSet(boolean value) {
    if (!value) {
      this.formula = null;
    }
  }

  public com.parsable.thrift.v1.reference.StringWrapper getNameWrapper() {
    return this.nameWrapper;
  }

  public Field setNameWrapper(com.parsable.thrift.v1.reference.StringWrapper nameWrapper) {
    this.nameWrapper = nameWrapper;
    return this;
  }

  public void unsetNameWrapper() {
    this.nameWrapper = null;
  }

  /** Returns true if field nameWrapper is set (has been assigned a value) and false otherwise */
  public boolean isSetNameWrapper() {
    return this.nameWrapper != null;
  }

  public void setNameWrapperIsSet(boolean value) {
    if (!value) {
      this.nameWrapper = null;
    }
  }

  public com.wi.director.thrift.v1.diff.Change getLatestChange() {
    return this.latestChange;
  }

  public Field setLatestChange(com.wi.director.thrift.v1.diff.Change latestChange) {
    this.latestChange = latestChange;
    return this;
  }

  public void unsetLatestChange() {
    this.latestChange = null;
  }

  /** Returns true if field latestChange is set (has been assigned a value) and false otherwise */
  public boolean isSetLatestChange() {
    return this.latestChange != null;
  }

  public void setLatestChangeIsSet(boolean value) {
    if (!value) {
      this.latestChange = null;
    }
  }

  public Field getOtherField() {
    return this.otherField;
  }

  public Field setOtherField(Field otherField) {
    this.otherField = otherField;
    return this;
  }

  public void unsetOtherField() {
    this.otherField = null;
  }

  /** Returns true if field otherField is set (has been assigned a value) and false otherwise */
  public boolean isSetOtherField() {
    return this.otherField != null;
  }

  public void setOtherFieldIsSet(boolean value) {
    if (!value) {
      this.otherField = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case KEY:
      if (value == null) {
        unsetKey();
      } else {
        setKey((String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((com.wi.director.thrift.v1.field_data.FieldType)value);
      }
      break;

    case FIELD_DATA:
      if (value == null) {
        unsetFieldData();
      } else {
        setFieldData((com.wi.director.thrift.v1.field_data.FieldData)value);
      }
      break;

    case IS_REQUIRED:
      if (value == null) {
        unsetIsRequired();
      } else {
        setIsRequired((Boolean)value);
      }
      break;

    case CLIENT_ID:
      if (value == null) {
        unsetClientId();
      } else {
        setClientId((String)value);
      }
      break;

    case FORMULA:
      if (value == null) {
        unsetFormula();
      } else {
        setFormula((com.parsable.thrift.v1.formula.Formula)value);
      }
      break;

    case NAME_WRAPPER:
      if (value == null) {
        unsetNameWrapper();
      } else {
        setNameWrapper((com.parsable.thrift.v1.reference.StringWrapper)value);
      }
      break;

    case LATEST_CHANGE:
      if (value == null) {
        unsetLatestChange();
      } else {
        setLatestChange((com.wi.director.thrift.v1.diff.Change)value);
      }
      break;

    case OTHER_FIELD:
      if (value == null) {
        unsetOtherField();
      } else {
        setOtherField((Field)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case KEY:
      return getKey();

    case TYPE:
      return getType();

    case FIELD_DATA:
      return getFieldData();

    case IS_REQUIRED:
      return isIsRequired();

    case CLIENT_ID:
      return getClientId();

    case FORMULA:
      return getFormula();

    case NAME_WRAPPER:
      return getNameWrapper();

    case LATEST_CHANGE:
      return getLatestChange();

    case OTHER_FIELD:
      return getOtherField();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case KEY:
      return isSetKey();
    case TYPE:
      return isSetType();
    case FIELD_DATA:
      return isSetFieldData();
    case IS_REQUIRED:
      return isSetIsRequired();
    case CLIENT_ID:
      return isSetClientId();
    case FORMULA:
      return isSetFormula();
    case NAME_WRAPPER:
      return isSetNameWrapper();
    case LATEST_CHANGE:
      return isSetLatestChange();
    case OTHER_FIELD:
      return isSetOtherField();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Field)
      return this.equals((Field)that);
    return false;
  }

  public boolean equals(Field that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_key = true && this.isSetKey();
    boolean that_present_key = true && that.isSetKey();
    if (this_present_key || that_present_key) {
      if (!(this_present_key && that_present_key))
        return false;
      if (!this.key.equals(that.key))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_fieldData = true && this.isSetFieldData();
    boolean that_present_fieldData = true && that.isSetFieldData();
    if (this_present_fieldData || that_present_fieldData) {
      if (!(this_present_fieldData && that_present_fieldData))
        return false;
      if (!this.fieldData.equals(that.fieldData))
        return false;
    }

    boolean this_present_isRequired = true;
    boolean that_present_isRequired = true;
    if (this_present_isRequired || that_present_isRequired) {
      if (!(this_present_isRequired && that_present_isRequired))
        return false;
      if (this.isRequired != that.isRequired)
        return false;
    }

    boolean this_present_clientId = true && this.isSetClientId();
    boolean that_present_clientId = true && that.isSetClientId();
    if (this_present_clientId || that_present_clientId) {
      if (!(this_present_clientId && that_present_clientId))
        return false;
      if (!this.clientId.equals(that.clientId))
        return false;
    }

    boolean this_present_formula = true && this.isSetFormula();
    boolean that_present_formula = true && that.isSetFormula();
    if (this_present_formula || that_present_formula) {
      if (!(this_present_formula && that_present_formula))
        return false;
      if (!this.formula.equals(that.formula))
        return false;
    }

    boolean this_present_nameWrapper = true && this.isSetNameWrapper();
    boolean that_present_nameWrapper = true && that.isSetNameWrapper();
    if (this_present_nameWrapper || that_present_nameWrapper) {
      if (!(this_present_nameWrapper && that_present_nameWrapper))
        return false;
      if (!this.nameWrapper.equals(that.nameWrapper))
        return false;
    }

    boolean this_present_latestChange = true && this.isSetLatestChange();
    boolean that_present_latestChange = true && that.isSetLatestChange();
    if (this_present_latestChange || that_present_latestChange) {
      if (!(this_present_latestChange && that_present_latestChange))
        return false;
      if (!this.latestChange.equals(that.latestChange))
        return false;
    }

    boolean this_present_otherField = true && this.isSetOtherField();
    boolean that_present_otherField = true && that.isSetOtherField();
    if (this_present_otherField || that_present_otherField) {
      if (!(this_present_otherField && that_present_otherField))
        return false;
      if (!this.otherField.equals(that.otherField))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_key = true && (isSetKey());
    list.add(present_key);
    if (present_key)
      list.add(key);

    boolean present_type = true && (isSetType());
    list.add(present_type);
    if (present_type)
      list.add(type.getValue());

    boolean present_fieldData = true && (isSetFieldData());
    list.add(present_fieldData);
    if (present_fieldData)
      list.add(fieldData);

    boolean present_isRequired = true;
    list.add(present_isRequired);
    if (present_isRequired)
      list.add(isRequired);

    boolean present_clientId = true && (isSetClientId());
    list.add(present_clientId);
    if (present_clientId)
      list.add(clientId);

    boolean present_formula = true && (isSetFormula());
    list.add(present_formula);
    if (present_formula)
      list.add(formula);

    boolean present_nameWrapper = true && (isSetNameWrapper());
    list.add(present_nameWrapper);
    if (present_nameWrapper)
      list.add(nameWrapper);

    boolean present_latestChange = true && (isSetLatestChange());
    list.add(present_latestChange);
    if (present_latestChange)
      list.add(latestChange);

    boolean present_otherField = true && (isSetOtherField());
    list.add(present_otherField);
    if (present_otherField)
      list.add(otherField);

    return list.hashCode();
  }

  @Override
  public int compareTo(Field other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFieldData()).compareTo(other.isSetFieldData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFieldData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fieldData, other.fieldData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsRequired()).compareTo(other.isSetIsRequired());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsRequired()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isRequired, other.isRequired);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFormula()).compareTo(other.isSetFormula());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFormula()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.formula, other.formula);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNameWrapper()).compareTo(other.isSetNameWrapper());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNameWrapper()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nameWrapper, other.nameWrapper);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLatestChange()).compareTo(other.isSetLatestChange());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLatestChange()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.latestChange, other.latestChange);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOtherField()).compareTo(other.isSetOtherField());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOtherField()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.otherField, other.otherField);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Field(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("key:");
    if (this.key == null) {
      sb.append("null");
    } else {
      sb.append(this.key);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (isSetFieldData()) {
      if (!first) sb.append(", ");
      sb.append("fieldData:");
      if (this.fieldData == null) {
        sb.append("null");
      } else {
        sb.append(this.fieldData);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("isRequired:");
    sb.append(this.isRequired);
    first = false;
    if (!first) sb.append(", ");
    sb.append("clientId:");
    if (this.clientId == null) {
      sb.append("null");
    } else {
      sb.append(this.clientId);
    }
    first = false;
    if (isSetFormula()) {
      if (!first) sb.append(", ");
      sb.append("formula:");
      if (this.formula == null) {
        sb.append("null");
      } else {
        sb.append(this.formula);
      }
      first = false;
    }
    if (isSetNameWrapper()) {
      if (!first) sb.append(", ");
      sb.append("nameWrapper:");
      if (this.nameWrapper == null) {
        sb.append("null");
      } else {
        sb.append(this.nameWrapper);
      }
      first = false;
    }
    if (isSetLatestChange()) {
      if (!first) sb.append(", ");
      sb.append("latestChange:");
      if (this.latestChange == null) {
        sb.append("null");
      } else {
        sb.append(this.latestChange);
      }
      first = false;
    }
    if (isSetOtherField()) {
      if (!first) sb.append(", ");
      sb.append("otherField:");
      if (this.otherField == null) {
        sb.append("null");
      } else {
        sb.append(this.otherField);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (formula != null) {
      formula.validate();
    }
    if (nameWrapper != null) {
      nameWrapper.validate();
    }
    if (latestChange != null) {
      latestChange.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FieldStandardSchemeFactory implements SchemeFactory {
    public FieldStandardScheme getScheme() {
      return new FieldStandardScheme();
    }
  }

  private static class FieldStandardScheme extends StandardScheme<Field> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Field struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.key = iprot.readString();
              struct.setKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = com.wi.director.thrift.v1.field_data.FieldType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FIELD_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.fieldData = new com.wi.director.thrift.v1.field_data.FieldData();
              struct.fieldData.read(iprot);
              struct.setFieldDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IS_REQUIRED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isRequired = iprot.readBool();
              struct.setIsRequiredIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CLIENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientId = iprot.readString();
              struct.setClientIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // FORMULA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.formula = new com.parsable.thrift.v1.formula.Formula();
              struct.formula.read(iprot);
              struct.setFormulaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // NAME_WRAPPER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.nameWrapper = new com.parsable.thrift.v1.reference.StringWrapper();
              struct.nameWrapper.read(iprot);
              struct.setNameWrapperIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 200: // LATEST_CHANGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.latestChange = new com.wi.director.thrift.v1.diff.Change();
              struct.latestChange.read(iprot);
              struct.setLatestChangeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 201: // OTHER_FIELD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.otherField = new Field();
              struct.otherField.read(iprot);
              struct.setOtherFieldIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Field struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.key != null) {
        oprot.writeFieldBegin(KEY_FIELD_DESC);
        oprot.writeString(struct.key);
        oprot.writeFieldEnd();
      }
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.fieldData != null) {
        if (struct.isSetFieldData()) {
          oprot.writeFieldBegin(FIELD_DATA_FIELD_DESC);
          struct.fieldData.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(IS_REQUIRED_FIELD_DESC);
      oprot.writeBool(struct.isRequired);
      oprot.writeFieldEnd();
      if (struct.clientId != null) {
        oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
        oprot.writeString(struct.clientId);
        oprot.writeFieldEnd();
      }
      if (struct.formula != null) {
        if (struct.isSetFormula()) {
          oprot.writeFieldBegin(FORMULA_FIELD_DESC);
          struct.formula.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.nameWrapper != null) {
        if (struct.isSetNameWrapper()) {
          oprot.writeFieldBegin(NAME_WRAPPER_FIELD_DESC);
          struct.nameWrapper.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.latestChange != null) {
        if (struct.isSetLatestChange()) {
          oprot.writeFieldBegin(LATEST_CHANGE_FIELD_DESC);
          struct.latestChange.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.otherField != null) {
        if (struct.isSetOtherField()) {
          oprot.writeFieldBegin(OTHER_FIELD_FIELD_DESC);
          struct.otherField.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

}

