/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wi.director.thrift.v1.jobtemplate;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * NOHTML
 */
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class JobTemplateLock implements org.apache.thrift.TBase<JobTemplateLock, JobTemplateLock._Fields>, java.io.Serializable, Cloneable, Comparable<JobTemplateLock> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("JobTemplateLock");

  private static final org.apache.thrift.protocol.TField LOCK_HOLDER_FIELD_DESC = new org.apache.thrift.protocol.TField("lockHolder", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField LOCKED_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("lockedAt", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField LAST_ACTIVITY_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("lastActivityAt", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField OWNED_FIELD_DESC = new org.apache.thrift.protocol.TField("owned", org.apache.thrift.protocol.TType.BOOL, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new JobTemplateLockStandardSchemeFactory());
  }

  /**
   * User holding the lock
   */
  public com.wi.director.thrift.v1.user.User lockHolder; // required
  /**
   * Time the lock was acquired
   */
  public long lockedAt; // required
  /**
   * Time of last activity
   */
  public long lastActivityAt; // required
  /**
   * True if owned by current session
   */
  public boolean owned; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * User holding the lock
     */
    LOCK_HOLDER((short)1, "lockHolder"),
    /**
     * Time the lock was acquired
     */
    LOCKED_AT((short)2, "lockedAt"),
    /**
     * Time of last activity
     */
    LAST_ACTIVITY_AT((short)3, "lastActivityAt"),
    /**
     * True if owned by current session
     */
    OWNED((short)4, "owned");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LOCK_HOLDER
          return LOCK_HOLDER;
        case 2: // LOCKED_AT
          return LOCKED_AT;
        case 3: // LAST_ACTIVITY_AT
          return LAST_ACTIVITY_AT;
        case 4: // OWNED
          return OWNED;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LOCKEDAT_ISSET_ID = 0;
  private static final int __LASTACTIVITYAT_ISSET_ID = 1;
  private static final int __OWNED_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LOCK_HOLDER, new org.apache.thrift.meta_data.FieldMetaData("lockHolder", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.user.User.class)));
    tmpMap.put(_Fields.LOCKED_AT, new org.apache.thrift.meta_data.FieldMetaData("lockedAt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LAST_ACTIVITY_AT, new org.apache.thrift.meta_data.FieldMetaData("lastActivityAt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.OWNED, new org.apache.thrift.meta_data.FieldMetaData("owned", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(JobTemplateLock.class, metaDataMap);
  }

  public JobTemplateLock() {
  }

  public JobTemplateLock(
    com.wi.director.thrift.v1.user.User lockHolder,
    long lockedAt,
    long lastActivityAt,
    boolean owned)
  {
    this();
    this.lockHolder = lockHolder;
    this.lockedAt = lockedAt;
    setLockedAtIsSet(true);
    this.lastActivityAt = lastActivityAt;
    setLastActivityAtIsSet(true);
    this.owned = owned;
    setOwnedIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public JobTemplateLock(JobTemplateLock other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetLockHolder()) {
      this.lockHolder = new com.wi.director.thrift.v1.user.User(other.lockHolder);
    }
    this.lockedAt = other.lockedAt;
    this.lastActivityAt = other.lastActivityAt;
    this.owned = other.owned;
  }

  public JobTemplateLock deepCopy() {
    return new JobTemplateLock(this);
  }

  @Override
  public void clear() {
    this.lockHolder = null;
    setLockedAtIsSet(false);
    this.lockedAt = 0;
    setLastActivityAtIsSet(false);
    this.lastActivityAt = 0;
    setOwnedIsSet(false);
    this.owned = false;
  }

  /**
   * User holding the lock
   */
  public com.wi.director.thrift.v1.user.User getLockHolder() {
    return this.lockHolder;
  }

  /**
   * User holding the lock
   */
  public JobTemplateLock setLockHolder(com.wi.director.thrift.v1.user.User lockHolder) {
    this.lockHolder = lockHolder;
    return this;
  }

  public void unsetLockHolder() {
    this.lockHolder = null;
  }

  /** Returns true if field lockHolder is set (has been assigned a value) and false otherwise */
  public boolean isSetLockHolder() {
    return this.lockHolder != null;
  }

  public void setLockHolderIsSet(boolean value) {
    if (!value) {
      this.lockHolder = null;
    }
  }

  /**
   * Time the lock was acquired
   */
  public long getLockedAt() {
    return this.lockedAt;
  }

  /**
   * Time the lock was acquired
   */
  public JobTemplateLock setLockedAt(long lockedAt) {
    this.lockedAt = lockedAt;
    setLockedAtIsSet(true);
    return this;
  }

  public void unsetLockedAt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOCKEDAT_ISSET_ID);
  }

  /** Returns true if field lockedAt is set (has been assigned a value) and false otherwise */
  public boolean isSetLockedAt() {
    return EncodingUtils.testBit(__isset_bitfield, __LOCKEDAT_ISSET_ID);
  }

  public void setLockedAtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOCKEDAT_ISSET_ID, value);
  }

  /**
   * Time of last activity
   */
  public long getLastActivityAt() {
    return this.lastActivityAt;
  }

  /**
   * Time of last activity
   */
  public JobTemplateLock setLastActivityAt(long lastActivityAt) {
    this.lastActivityAt = lastActivityAt;
    setLastActivityAtIsSet(true);
    return this;
  }

  public void unsetLastActivityAt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTACTIVITYAT_ISSET_ID);
  }

  /** Returns true if field lastActivityAt is set (has been assigned a value) and false otherwise */
  public boolean isSetLastActivityAt() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTACTIVITYAT_ISSET_ID);
  }

  public void setLastActivityAtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTACTIVITYAT_ISSET_ID, value);
  }

  /**
   * True if owned by current session
   */
  public boolean isOwned() {
    return this.owned;
  }

  /**
   * True if owned by current session
   */
  public JobTemplateLock setOwned(boolean owned) {
    this.owned = owned;
    setOwnedIsSet(true);
    return this;
  }

  public void unsetOwned() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OWNED_ISSET_ID);
  }

  /** Returns true if field owned is set (has been assigned a value) and false otherwise */
  public boolean isSetOwned() {
    return EncodingUtils.testBit(__isset_bitfield, __OWNED_ISSET_ID);
  }

  public void setOwnedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OWNED_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LOCK_HOLDER:
      if (value == null) {
        unsetLockHolder();
      } else {
        setLockHolder((com.wi.director.thrift.v1.user.User)value);
      }
      break;

    case LOCKED_AT:
      if (value == null) {
        unsetLockedAt();
      } else {
        setLockedAt((Long)value);
      }
      break;

    case LAST_ACTIVITY_AT:
      if (value == null) {
        unsetLastActivityAt();
      } else {
        setLastActivityAt((Long)value);
      }
      break;

    case OWNED:
      if (value == null) {
        unsetOwned();
      } else {
        setOwned((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LOCK_HOLDER:
      return getLockHolder();

    case LOCKED_AT:
      return getLockedAt();

    case LAST_ACTIVITY_AT:
      return getLastActivityAt();

    case OWNED:
      return isOwned();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LOCK_HOLDER:
      return isSetLockHolder();
    case LOCKED_AT:
      return isSetLockedAt();
    case LAST_ACTIVITY_AT:
      return isSetLastActivityAt();
    case OWNED:
      return isSetOwned();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof JobTemplateLock)
      return this.equals((JobTemplateLock)that);
    return false;
  }

  public boolean equals(JobTemplateLock that) {
    if (that == null)
      return false;

    boolean this_present_lockHolder = true && this.isSetLockHolder();
    boolean that_present_lockHolder = true && that.isSetLockHolder();
    if (this_present_lockHolder || that_present_lockHolder) {
      if (!(this_present_lockHolder && that_present_lockHolder))
        return false;
      if (!this.lockHolder.equals(that.lockHolder))
        return false;
    }

    boolean this_present_lockedAt = true;
    boolean that_present_lockedAt = true;
    if (this_present_lockedAt || that_present_lockedAt) {
      if (!(this_present_lockedAt && that_present_lockedAt))
        return false;
      if (this.lockedAt != that.lockedAt)
        return false;
    }

    boolean this_present_lastActivityAt = true;
    boolean that_present_lastActivityAt = true;
    if (this_present_lastActivityAt || that_present_lastActivityAt) {
      if (!(this_present_lastActivityAt && that_present_lastActivityAt))
        return false;
      if (this.lastActivityAt != that.lastActivityAt)
        return false;
    }

    boolean this_present_owned = true;
    boolean that_present_owned = true;
    if (this_present_owned || that_present_owned) {
      if (!(this_present_owned && that_present_owned))
        return false;
      if (this.owned != that.owned)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_lockHolder = true && (isSetLockHolder());
    list.add(present_lockHolder);
    if (present_lockHolder)
      list.add(lockHolder);

    boolean present_lockedAt = true;
    list.add(present_lockedAt);
    if (present_lockedAt)
      list.add(lockedAt);

    boolean present_lastActivityAt = true;
    list.add(present_lastActivityAt);
    if (present_lastActivityAt)
      list.add(lastActivityAt);

    boolean present_owned = true;
    list.add(present_owned);
    if (present_owned)
      list.add(owned);

    return list.hashCode();
  }

  @Override
  public int compareTo(JobTemplateLock other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetLockHolder()).compareTo(other.isSetLockHolder());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLockHolder()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lockHolder, other.lockHolder);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLockedAt()).compareTo(other.isSetLockedAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLockedAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lockedAt, other.lockedAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastActivityAt()).compareTo(other.isSetLastActivityAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastActivityAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastActivityAt, other.lastActivityAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOwned()).compareTo(other.isSetOwned());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOwned()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.owned, other.owned);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("JobTemplateLock(");
    boolean first = true;

    sb.append("lockHolder:");
    if (this.lockHolder == null) {
      sb.append("null");
    } else {
      sb.append(this.lockHolder);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lockedAt:");
    sb.append(this.lockedAt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastActivityAt:");
    sb.append(this.lastActivityAt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("owned:");
    sb.append(this.owned);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (lockHolder != null) {
      lockHolder.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class JobTemplateLockStandardSchemeFactory implements SchemeFactory {
    public JobTemplateLockStandardScheme getScheme() {
      return new JobTemplateLockStandardScheme();
    }
  }

  private static class JobTemplateLockStandardScheme extends StandardScheme<JobTemplateLock> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, JobTemplateLock struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LOCK_HOLDER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.lockHolder = new com.wi.director.thrift.v1.user.User();
              struct.lockHolder.read(iprot);
              struct.setLockHolderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LOCKED_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lockedAt = iprot.readI64();
              struct.setLockedAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LAST_ACTIVITY_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastActivityAt = iprot.readI64();
              struct.setLastActivityAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // OWNED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.owned = iprot.readBool();
              struct.setOwnedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, JobTemplateLock struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.lockHolder != null) {
        oprot.writeFieldBegin(LOCK_HOLDER_FIELD_DESC);
        struct.lockHolder.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LOCKED_AT_FIELD_DESC);
      oprot.writeI64(struct.lockedAt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LAST_ACTIVITY_AT_FIELD_DESC);
      oprot.writeI64(struct.lastActivityAt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OWNED_FIELD_DESC);
      oprot.writeBool(struct.owned);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

}

