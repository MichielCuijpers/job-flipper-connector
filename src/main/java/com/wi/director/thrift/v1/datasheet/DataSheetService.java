/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wi.director.thrift.v1.datasheet;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class DataSheetService {

  public interface Iface {

    /**
     * Query data sheet sets on a team
     * 
     * @param teamId
     * @param opts
     * @param selectOpts
     */
    public DataSheetSetQueryResult querySets(String teamId, DataSheetSetOptions opts, DataSheetSetSelectOptions selectOpts) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException;

    /**
     * Create a new data sheet set on a team (subject to max limit) <br>
     * Can only create a data sheet set with name and description <br>
     * Use <code>definitionOps</code> or <code>sheetOps</code> for other creations
     * 
     * @param teamId
     * @param dsSet
     * @param attributes
     */
    public DataSheetSet createSet(String teamId, DataSheetSet dsSet, List<com.wi.director.thrift.v1.abac.AbacAttribute> attributes) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException;

    /**
     * Update a single data sheet set <br>
     * Can only update name and description <br>
     * Use <code>definitionOps</code> or <code>sheetOps</code> for other updates
     * 
     * @param dsSetId
     * @param dsSet
     */
    public DataSheetSet updateSet(String dsSetId, DataSheetSet dsSet) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException;

    /**
     * Get a single data sheet set <br>
     * Use <code>querySheets</code> to list data sheets under this set
     * 
     * @param dsSetId
     * @param selectOpts
     */
    public DataSheetSet getSet(String dsSetId, DataSheetSetSelectOptions selectOpts) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException;

    /**
     * Archive a single data sheet set
     * 
     * @param dsSetId
     */
    public DataSheetSet archiveSet(String dsSetId) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException;

    /**
     * Unarchive a single data sheet set (subject to max limit)
     * 
     * @param dsSetId
     */
    public DataSheetSet unarchiveSet(String dsSetId) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException;

    /**
     * Add/update/move/get/archive/unarchive data sheet definitions on an existing data sheet set (subject to max limit) <br>
     * position = -1 appends to the end of the current list <br>
     * Positions are applied in the order of the list, final positions depend on prior updates <br>
     * Returns the updated definitions in the order passed in.
     * 
     * @param dsSetId
     * @param defActions
     */
    public List<DataSheetDefinition> definitionOps(String dsSetId, List<DataSheetDefinitionAction> defActions) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException;

    /**
     * Add/update/get/archive/unarchive data sheets on an existing data sheet set (subject to max limit) <br>
     * Returns the updated sheets in the order passed in.
     * 
     * @param dsSetId
     * @param sheetActions
     */
    public List<DataSheet> sheetOps(String dsSetId, List<DataSheetAction> sheetActions) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException;

    /**
     * Query data sheets on a data sheet set
     * 
     * @param dsSetId
     * @param opts
     */
    public DataSheetQueryResult querySheets(String dsSetId, DataSheetOptions opts) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException;

    /**
     * Update a single attribute on a data sheet
     * return value will always be a list with a single attribute determined by which attribute was updated
     * 
     * param dataSheetId: data sheet to update
     * param attributeId: the AttributeId of the team level attribute to be updated
     * param values: the new AttributeValues to associated with Attribute attributeId on data sheet dataSheetId
     * param behave: determine the behaviour of the endpoint, merge or clobber. Default: clobber
     * 
     * @param templateSetId
     * @param attributeId
     * @param values
     * @param behave
     */
    public List<com.wi.director.thrift.v1.abac.AbacAttribute> updateAttribute(String templateSetId, String attributeId, List<com.wi.director.thrift.v1.abac.AbacAttributeValue> values, com.wi.director.thrift.v1.abac.AttributeUploadBehaviour behave) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public DataSheetSetQueryResult querySets(String teamId, DataSheetSetOptions opts, DataSheetSetSelectOptions selectOpts) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      send_querySets(teamId, opts, selectOpts);
      return recv_querySets();
    }

    public void send_querySets(String teamId, DataSheetSetOptions opts, DataSheetSetSelectOptions selectOpts) throws org.apache.thrift.TException
    {
      querySets_args args = new querySets_args();
      args.setTeamId(teamId);
      args.setOpts(opts);
      args.setSelectOpts(selectOpts);
      sendBase("querySets", args);
    }

    public DataSheetSetQueryResult recv_querySets() throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      querySets_result result = new querySets_result();
      receiveBase(result, "querySets");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "querySets failed: unknown result");
    }

    public DataSheetSet createSet(String teamId, DataSheetSet dsSet, List<com.wi.director.thrift.v1.abac.AbacAttribute> attributes) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      send_createSet(teamId, dsSet, attributes);
      return recv_createSet();
    }

    public void send_createSet(String teamId, DataSheetSet dsSet, List<com.wi.director.thrift.v1.abac.AbacAttribute> attributes) throws org.apache.thrift.TException
    {
      createSet_args args = new createSet_args();
      args.setTeamId(teamId);
      args.setDsSet(dsSet);
      args.setAttributes(attributes);
      sendBase("createSet", args);
    }

    public DataSheetSet recv_createSet() throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      createSet_result result = new createSet_result();
      receiveBase(result, "createSet");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createSet failed: unknown result");
    }

    public DataSheetSet updateSet(String dsSetId, DataSheetSet dsSet) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      send_updateSet(dsSetId, dsSet);
      return recv_updateSet();
    }

    public void send_updateSet(String dsSetId, DataSheetSet dsSet) throws org.apache.thrift.TException
    {
      updateSet_args args = new updateSet_args();
      args.setDsSetId(dsSetId);
      args.setDsSet(dsSet);
      sendBase("updateSet", args);
    }

    public DataSheetSet recv_updateSet() throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      updateSet_result result = new updateSet_result();
      receiveBase(result, "updateSet");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateSet failed: unknown result");
    }

    public DataSheetSet getSet(String dsSetId, DataSheetSetSelectOptions selectOpts) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      send_getSet(dsSetId, selectOpts);
      return recv_getSet();
    }

    public void send_getSet(String dsSetId, DataSheetSetSelectOptions selectOpts) throws org.apache.thrift.TException
    {
      getSet_args args = new getSet_args();
      args.setDsSetId(dsSetId);
      args.setSelectOpts(selectOpts);
      sendBase("getSet", args);
    }

    public DataSheetSet recv_getSet() throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      getSet_result result = new getSet_result();
      receiveBase(result, "getSet");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSet failed: unknown result");
    }

    public DataSheetSet archiveSet(String dsSetId) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      send_archiveSet(dsSetId);
      return recv_archiveSet();
    }

    public void send_archiveSet(String dsSetId) throws org.apache.thrift.TException
    {
      archiveSet_args args = new archiveSet_args();
      args.setDsSetId(dsSetId);
      sendBase("archiveSet", args);
    }

    public DataSheetSet recv_archiveSet() throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      archiveSet_result result = new archiveSet_result();
      receiveBase(result, "archiveSet");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "archiveSet failed: unknown result");
    }

    public DataSheetSet unarchiveSet(String dsSetId) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      send_unarchiveSet(dsSetId);
      return recv_unarchiveSet();
    }

    public void send_unarchiveSet(String dsSetId) throws org.apache.thrift.TException
    {
      unarchiveSet_args args = new unarchiveSet_args();
      args.setDsSetId(dsSetId);
      sendBase("unarchiveSet", args);
    }

    public DataSheetSet recv_unarchiveSet() throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      unarchiveSet_result result = new unarchiveSet_result();
      receiveBase(result, "unarchiveSet");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "unarchiveSet failed: unknown result");
    }

    public List<DataSheetDefinition> definitionOps(String dsSetId, List<DataSheetDefinitionAction> defActions) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      send_definitionOps(dsSetId, defActions);
      return recv_definitionOps();
    }

    public void send_definitionOps(String dsSetId, List<DataSheetDefinitionAction> defActions) throws org.apache.thrift.TException
    {
      definitionOps_args args = new definitionOps_args();
      args.setDsSetId(dsSetId);
      args.setDefActions(defActions);
      sendBase("definitionOps", args);
    }

    public List<DataSheetDefinition> recv_definitionOps() throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      definitionOps_result result = new definitionOps_result();
      receiveBase(result, "definitionOps");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "definitionOps failed: unknown result");
    }

    public List<DataSheet> sheetOps(String dsSetId, List<DataSheetAction> sheetActions) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      send_sheetOps(dsSetId, sheetActions);
      return recv_sheetOps();
    }

    public void send_sheetOps(String dsSetId, List<DataSheetAction> sheetActions) throws org.apache.thrift.TException
    {
      sheetOps_args args = new sheetOps_args();
      args.setDsSetId(dsSetId);
      args.setSheetActions(sheetActions);
      sendBase("sheetOps", args);
    }

    public List<DataSheet> recv_sheetOps() throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      sheetOps_result result = new sheetOps_result();
      receiveBase(result, "sheetOps");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "sheetOps failed: unknown result");
    }

    public DataSheetQueryResult querySheets(String dsSetId, DataSheetOptions opts) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      send_querySheets(dsSetId, opts);
      return recv_querySheets();
    }

    public void send_querySheets(String dsSetId, DataSheetOptions opts) throws org.apache.thrift.TException
    {
      querySheets_args args = new querySheets_args();
      args.setDsSetId(dsSetId);
      args.setOpts(opts);
      sendBase("querySheets", args);
    }

    public DataSheetQueryResult recv_querySheets() throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      querySheets_result result = new querySheets_result();
      receiveBase(result, "querySheets");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "querySheets failed: unknown result");
    }

    public List<com.wi.director.thrift.v1.abac.AbacAttribute> updateAttribute(String templateSetId, String attributeId, List<com.wi.director.thrift.v1.abac.AbacAttributeValue> values, com.wi.director.thrift.v1.abac.AttributeUploadBehaviour behave) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      send_updateAttribute(templateSetId, attributeId, values, behave);
      return recv_updateAttribute();
    }

    public void send_updateAttribute(String templateSetId, String attributeId, List<com.wi.director.thrift.v1.abac.AbacAttributeValue> values, com.wi.director.thrift.v1.abac.AttributeUploadBehaviour behave) throws org.apache.thrift.TException
    {
      updateAttribute_args args = new updateAttribute_args();
      args.setTemplateSetId(templateSetId);
      args.setAttributeId(attributeId);
      args.setValues(values);
      args.setBehave(behave);
      sendBase("updateAttribute", args);
    }

    public List<com.wi.director.thrift.v1.abac.AbacAttribute> recv_updateAttribute() throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      updateAttribute_result result = new updateAttribute_result();
      receiveBase(result, "updateAttribute");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateAttribute failed: unknown result");
    }

  }
  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("querySets", new querySets());
      processMap.put("createSet", new createSet());
      processMap.put("updateSet", new updateSet());
      processMap.put("getSet", new getSet());
      processMap.put("archiveSet", new archiveSet());
      processMap.put("unarchiveSet", new unarchiveSet());
      processMap.put("definitionOps", new definitionOps());
      processMap.put("sheetOps", new sheetOps());
      processMap.put("querySheets", new querySheets());
      processMap.put("updateAttribute", new updateAttribute());
      return processMap;
    }

    public static class querySets<I extends Iface> extends org.apache.thrift.ProcessFunction<I, querySets_args> {
      public querySets() {
        super("querySets");
      }

      public querySets_args getEmptyArgsInstance() {
        return new querySets_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public querySets_result getResult(I iface, querySets_args args) throws org.apache.thrift.TException {
        querySets_result result = new querySets_result();
        try {
          result.success = iface.querySets(args.teamId, args.opts, args.selectOpts);
        } catch (com.wi.director.thrift.v1.common.SystemException err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class createSet<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createSet_args> {
      public createSet() {
        super("createSet");
      }

      public createSet_args getEmptyArgsInstance() {
        return new createSet_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createSet_result getResult(I iface, createSet_args args) throws org.apache.thrift.TException {
        createSet_result result = new createSet_result();
        try {
          result.success = iface.createSet(args.teamId, args.dsSet, args.attributes);
        } catch (com.wi.director.thrift.v1.common.SystemException err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class updateSet<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateSet_args> {
      public updateSet() {
        super("updateSet");
      }

      public updateSet_args getEmptyArgsInstance() {
        return new updateSet_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateSet_result getResult(I iface, updateSet_args args) throws org.apache.thrift.TException {
        updateSet_result result = new updateSet_result();
        try {
          result.success = iface.updateSet(args.dsSetId, args.dsSet);
        } catch (com.wi.director.thrift.v1.common.SystemException err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class getSet<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSet_args> {
      public getSet() {
        super("getSet");
      }

      public getSet_args getEmptyArgsInstance() {
        return new getSet_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSet_result getResult(I iface, getSet_args args) throws org.apache.thrift.TException {
        getSet_result result = new getSet_result();
        try {
          result.success = iface.getSet(args.dsSetId, args.selectOpts);
        } catch (com.wi.director.thrift.v1.common.SystemException err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class archiveSet<I extends Iface> extends org.apache.thrift.ProcessFunction<I, archiveSet_args> {
      public archiveSet() {
        super("archiveSet");
      }

      public archiveSet_args getEmptyArgsInstance() {
        return new archiveSet_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public archiveSet_result getResult(I iface, archiveSet_args args) throws org.apache.thrift.TException {
        archiveSet_result result = new archiveSet_result();
        try {
          result.success = iface.archiveSet(args.dsSetId);
        } catch (com.wi.director.thrift.v1.common.SystemException err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class unarchiveSet<I extends Iface> extends org.apache.thrift.ProcessFunction<I, unarchiveSet_args> {
      public unarchiveSet() {
        super("unarchiveSet");
      }

      public unarchiveSet_args getEmptyArgsInstance() {
        return new unarchiveSet_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public unarchiveSet_result getResult(I iface, unarchiveSet_args args) throws org.apache.thrift.TException {
        unarchiveSet_result result = new unarchiveSet_result();
        try {
          result.success = iface.unarchiveSet(args.dsSetId);
        } catch (com.wi.director.thrift.v1.common.SystemException err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class definitionOps<I extends Iface> extends org.apache.thrift.ProcessFunction<I, definitionOps_args> {
      public definitionOps() {
        super("definitionOps");
      }

      public definitionOps_args getEmptyArgsInstance() {
        return new definitionOps_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public definitionOps_result getResult(I iface, definitionOps_args args) throws org.apache.thrift.TException {
        definitionOps_result result = new definitionOps_result();
        try {
          result.success = iface.definitionOps(args.dsSetId, args.defActions);
        } catch (com.wi.director.thrift.v1.common.SystemException err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class sheetOps<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sheetOps_args> {
      public sheetOps() {
        super("sheetOps");
      }

      public sheetOps_args getEmptyArgsInstance() {
        return new sheetOps_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public sheetOps_result getResult(I iface, sheetOps_args args) throws org.apache.thrift.TException {
        sheetOps_result result = new sheetOps_result();
        try {
          result.success = iface.sheetOps(args.dsSetId, args.sheetActions);
        } catch (com.wi.director.thrift.v1.common.SystemException err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class querySheets<I extends Iface> extends org.apache.thrift.ProcessFunction<I, querySheets_args> {
      public querySheets() {
        super("querySheets");
      }

      public querySheets_args getEmptyArgsInstance() {
        return new querySheets_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public querySheets_result getResult(I iface, querySheets_args args) throws org.apache.thrift.TException {
        querySheets_result result = new querySheets_result();
        try {
          result.success = iface.querySheets(args.dsSetId, args.opts);
        } catch (com.wi.director.thrift.v1.common.SystemException err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class updateAttribute<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateAttribute_args> {
      public updateAttribute() {
        super("updateAttribute");
      }

      public updateAttribute_args getEmptyArgsInstance() {
        return new updateAttribute_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateAttribute_result getResult(I iface, updateAttribute_args args) throws org.apache.thrift.TException {
        updateAttribute_result result = new updateAttribute_result();
        try {
          result.success = iface.updateAttribute(args.templateSetId, args.attributeId, args.values, args.behave);
        } catch (com.wi.director.thrift.v1.common.SystemException err) {
          result.err = err;
        }
        return result;
      }
    }

  }

  public static class querySets_args implements org.apache.thrift.TBase<querySets_args, querySets_args._Fields>, java.io.Serializable, Cloneable, Comparable<querySets_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("querySets_args");

    private static final org.apache.thrift.protocol.TField TEAM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("teamId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField OPTS_FIELD_DESC = new org.apache.thrift.protocol.TField("opts", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField SELECT_OPTS_FIELD_DESC = new org.apache.thrift.protocol.TField("selectOpts", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new querySets_argsStandardSchemeFactory());
    }

    public String teamId; // required
    public DataSheetSetOptions opts; // required
    public DataSheetSetSelectOptions selectOpts; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TEAM_ID((short)1, "teamId"),
      OPTS((short)2, "opts"),
      SELECT_OPTS((short)3, "selectOpts");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TEAM_ID
            return TEAM_ID;
          case 2: // OPTS
            return OPTS;
          case 3: // SELECT_OPTS
            return SELECT_OPTS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TEAM_ID, new org.apache.thrift.meta_data.FieldMetaData("teamId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "UUID")));
      tmpMap.put(_Fields.OPTS, new org.apache.thrift.meta_data.FieldMetaData("opts", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DataSheetSetOptions.class)));
      tmpMap.put(_Fields.SELECT_OPTS, new org.apache.thrift.meta_data.FieldMetaData("selectOpts", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DataSheetSetSelectOptions.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(querySets_args.class, metaDataMap);
    }

    public querySets_args() {
    }

    public querySets_args(
      String teamId,
      DataSheetSetOptions opts,
      DataSheetSetSelectOptions selectOpts)
    {
      this();
      this.teamId = teamId;
      this.opts = opts;
      this.selectOpts = selectOpts;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public querySets_args(querySets_args other) {
      if (other.isSetTeamId()) {
        this.teamId = other.teamId;
      }
      if (other.isSetOpts()) {
        this.opts = new DataSheetSetOptions(other.opts);
      }
      if (other.isSetSelectOpts()) {
        this.selectOpts = new DataSheetSetSelectOptions(other.selectOpts);
      }
    }

    public querySets_args deepCopy() {
      return new querySets_args(this);
    }

    @Override
    public void clear() {
      this.teamId = null;
      this.opts = null;
      this.selectOpts = null;
    }

    public String getTeamId() {
      return this.teamId;
    }

    public querySets_args setTeamId(String teamId) {
      this.teamId = teamId;
      return this;
    }

    public void unsetTeamId() {
      this.teamId = null;
    }

    /** Returns true if field teamId is set (has been assigned a value) and false otherwise */
    public boolean isSetTeamId() {
      return this.teamId != null;
    }

    public void setTeamIdIsSet(boolean value) {
      if (!value) {
        this.teamId = null;
      }
    }

    public DataSheetSetOptions getOpts() {
      return this.opts;
    }

    public querySets_args setOpts(DataSheetSetOptions opts) {
      this.opts = opts;
      return this;
    }

    public void unsetOpts() {
      this.opts = null;
    }

    /** Returns true if field opts is set (has been assigned a value) and false otherwise */
    public boolean isSetOpts() {
      return this.opts != null;
    }

    public void setOptsIsSet(boolean value) {
      if (!value) {
        this.opts = null;
      }
    }

    public DataSheetSetSelectOptions getSelectOpts() {
      return this.selectOpts;
    }

    public querySets_args setSelectOpts(DataSheetSetSelectOptions selectOpts) {
      this.selectOpts = selectOpts;
      return this;
    }

    public void unsetSelectOpts() {
      this.selectOpts = null;
    }

    /** Returns true if field selectOpts is set (has been assigned a value) and false otherwise */
    public boolean isSetSelectOpts() {
      return this.selectOpts != null;
    }

    public void setSelectOptsIsSet(boolean value) {
      if (!value) {
        this.selectOpts = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TEAM_ID:
        if (value == null) {
          unsetTeamId();
        } else {
          setTeamId((String)value);
        }
        break;

      case OPTS:
        if (value == null) {
          unsetOpts();
        } else {
          setOpts((DataSheetSetOptions)value);
        }
        break;

      case SELECT_OPTS:
        if (value == null) {
          unsetSelectOpts();
        } else {
          setSelectOpts((DataSheetSetSelectOptions)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TEAM_ID:
        return getTeamId();

      case OPTS:
        return getOpts();

      case SELECT_OPTS:
        return getSelectOpts();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TEAM_ID:
        return isSetTeamId();
      case OPTS:
        return isSetOpts();
      case SELECT_OPTS:
        return isSetSelectOpts();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof querySets_args)
        return this.equals((querySets_args)that);
      return false;
    }

    public boolean equals(querySets_args that) {
      if (that == null)
        return false;

      boolean this_present_teamId = true && this.isSetTeamId();
      boolean that_present_teamId = true && that.isSetTeamId();
      if (this_present_teamId || that_present_teamId) {
        if (!(this_present_teamId && that_present_teamId))
          return false;
        if (!this.teamId.equals(that.teamId))
          return false;
      }

      boolean this_present_opts = true && this.isSetOpts();
      boolean that_present_opts = true && that.isSetOpts();
      if (this_present_opts || that_present_opts) {
        if (!(this_present_opts && that_present_opts))
          return false;
        if (!this.opts.equals(that.opts))
          return false;
      }

      boolean this_present_selectOpts = true && this.isSetSelectOpts();
      boolean that_present_selectOpts = true && that.isSetSelectOpts();
      if (this_present_selectOpts || that_present_selectOpts) {
        if (!(this_present_selectOpts && that_present_selectOpts))
          return false;
        if (!this.selectOpts.equals(that.selectOpts))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_teamId = true && (isSetTeamId());
      list.add(present_teamId);
      if (present_teamId)
        list.add(teamId);

      boolean present_opts = true && (isSetOpts());
      list.add(present_opts);
      if (present_opts)
        list.add(opts);

      boolean present_selectOpts = true && (isSetSelectOpts());
      list.add(present_selectOpts);
      if (present_selectOpts)
        list.add(selectOpts);

      return list.hashCode();
    }

    @Override
    public int compareTo(querySets_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTeamId()).compareTo(other.isSetTeamId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTeamId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teamId, other.teamId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOpts()).compareTo(other.isSetOpts());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOpts()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.opts, other.opts);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSelectOpts()).compareTo(other.isSetSelectOpts());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSelectOpts()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.selectOpts, other.selectOpts);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("querySets_args(");
      boolean first = true;

      sb.append("teamId:");
      if (this.teamId == null) {
        sb.append("null");
      } else {
        sb.append(this.teamId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("opts:");
      if (this.opts == null) {
        sb.append("null");
      } else {
        sb.append(this.opts);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("selectOpts:");
      if (this.selectOpts == null) {
        sb.append("null");
      } else {
        sb.append(this.selectOpts);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (opts != null) {
        opts.validate();
      }
      if (selectOpts != null) {
        selectOpts.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class querySets_argsStandardSchemeFactory implements SchemeFactory {
      public querySets_argsStandardScheme getScheme() {
        return new querySets_argsStandardScheme();
      }
    }

    private static class querySets_argsStandardScheme extends StandardScheme<querySets_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, querySets_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TEAM_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.teamId = iprot.readString();
                struct.setTeamIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OPTS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.opts = new DataSheetSetOptions();
                struct.opts.read(iprot);
                struct.setOptsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SELECT_OPTS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.selectOpts = new DataSheetSetSelectOptions();
                struct.selectOpts.read(iprot);
                struct.setSelectOptsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, querySets_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.teamId != null) {
          oprot.writeFieldBegin(TEAM_ID_FIELD_DESC);
          oprot.writeString(struct.teamId);
          oprot.writeFieldEnd();
        }
        if (struct.opts != null) {
          oprot.writeFieldBegin(OPTS_FIELD_DESC);
          struct.opts.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.selectOpts != null) {
          oprot.writeFieldBegin(SELECT_OPTS_FIELD_DESC);
          struct.selectOpts.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class querySets_result implements org.apache.thrift.TBase<querySets_result, querySets_result._Fields>, java.io.Serializable, Cloneable, Comparable<querySets_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("querySets_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new querySets_resultStandardSchemeFactory());
    }

    public DataSheetSetQueryResult success; // required
    public com.wi.director.thrift.v1.common.SystemException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DataSheetSetQueryResult.class)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(querySets_result.class, metaDataMap);
    }

    public querySets_result() {
    }

    public querySets_result(
      DataSheetSetQueryResult success,
      com.wi.director.thrift.v1.common.SystemException err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public querySets_result(querySets_result other) {
      if (other.isSetSuccess()) {
        this.success = new DataSheetSetQueryResult(other.success);
      }
      if (other.isSetErr()) {
        this.err = new com.wi.director.thrift.v1.common.SystemException(other.err);
      }
    }

    public querySets_result deepCopy() {
      return new querySets_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public DataSheetSetQueryResult getSuccess() {
      return this.success;
    }

    public querySets_result setSuccess(DataSheetSetQueryResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.wi.director.thrift.v1.common.SystemException getErr() {
      return this.err;
    }

    public querySets_result setErr(com.wi.director.thrift.v1.common.SystemException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((DataSheetSetQueryResult)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((com.wi.director.thrift.v1.common.SystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof querySets_result)
        return this.equals((querySets_result)that);
      return false;
    }

    public boolean equals(querySets_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(querySets_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("querySets_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class querySets_resultStandardSchemeFactory implements SchemeFactory {
      public querySets_resultStandardScheme getScheme() {
        return new querySets_resultStandardScheme();
      }
    }

    private static class querySets_resultStandardScheme extends StandardScheme<querySets_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, querySets_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new DataSheetSetQueryResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new com.wi.director.thrift.v1.common.SystemException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, querySets_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class createSet_args implements org.apache.thrift.TBase<createSet_args, createSet_args._Fields>, java.io.Serializable, Cloneable, Comparable<createSet_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createSet_args");

    private static final org.apache.thrift.protocol.TField TEAM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("teamId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField DS_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("dsSet", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ATTRIBUTES_FIELD_DESC = new org.apache.thrift.protocol.TField("attributes", org.apache.thrift.protocol.TType.LIST, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createSet_argsStandardSchemeFactory());
    }

    public String teamId; // required
    public DataSheetSet dsSet; // required
    public List<com.wi.director.thrift.v1.abac.AbacAttribute> attributes; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TEAM_ID((short)1, "teamId"),
      DS_SET((short)2, "dsSet"),
      ATTRIBUTES((short)3, "attributes");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TEAM_ID
            return TEAM_ID;
          case 2: // DS_SET
            return DS_SET;
          case 3: // ATTRIBUTES
            return ATTRIBUTES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TEAM_ID, new org.apache.thrift.meta_data.FieldMetaData("teamId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "UUID")));
      tmpMap.put(_Fields.DS_SET, new org.apache.thrift.meta_data.FieldMetaData("dsSet", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DataSheetSet.class)));
      tmpMap.put(_Fields.ATTRIBUTES, new org.apache.thrift.meta_data.FieldMetaData("attributes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.abac.AbacAttribute.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createSet_args.class, metaDataMap);
    }

    public createSet_args() {
    }

    public createSet_args(
      String teamId,
      DataSheetSet dsSet,
      List<com.wi.director.thrift.v1.abac.AbacAttribute> attributes)
    {
      this();
      this.teamId = teamId;
      this.dsSet = dsSet;
      this.attributes = attributes;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createSet_args(createSet_args other) {
      if (other.isSetTeamId()) {
        this.teamId = other.teamId;
      }
      if (other.isSetDsSet()) {
        this.dsSet = new DataSheetSet(other.dsSet);
      }
      if (other.isSetAttributes()) {
        List<com.wi.director.thrift.v1.abac.AbacAttribute> __this__attributes = new ArrayList<com.wi.director.thrift.v1.abac.AbacAttribute>(other.attributes.size());
        for (com.wi.director.thrift.v1.abac.AbacAttribute other_element : other.attributes) {
          __this__attributes.add(new com.wi.director.thrift.v1.abac.AbacAttribute(other_element));
        }
        this.attributes = __this__attributes;
      }
    }

    public createSet_args deepCopy() {
      return new createSet_args(this);
    }

    @Override
    public void clear() {
      this.teamId = null;
      this.dsSet = null;
      this.attributes = null;
    }

    public String getTeamId() {
      return this.teamId;
    }

    public createSet_args setTeamId(String teamId) {
      this.teamId = teamId;
      return this;
    }

    public void unsetTeamId() {
      this.teamId = null;
    }

    /** Returns true if field teamId is set (has been assigned a value) and false otherwise */
    public boolean isSetTeamId() {
      return this.teamId != null;
    }

    public void setTeamIdIsSet(boolean value) {
      if (!value) {
        this.teamId = null;
      }
    }

    public DataSheetSet getDsSet() {
      return this.dsSet;
    }

    public createSet_args setDsSet(DataSheetSet dsSet) {
      this.dsSet = dsSet;
      return this;
    }

    public void unsetDsSet() {
      this.dsSet = null;
    }

    /** Returns true if field dsSet is set (has been assigned a value) and false otherwise */
    public boolean isSetDsSet() {
      return this.dsSet != null;
    }

    public void setDsSetIsSet(boolean value) {
      if (!value) {
        this.dsSet = null;
      }
    }

    public int getAttributesSize() {
      return (this.attributes == null) ? 0 : this.attributes.size();
    }

    public java.util.Iterator<com.wi.director.thrift.v1.abac.AbacAttribute> getAttributesIterator() {
      return (this.attributes == null) ? null : this.attributes.iterator();
    }

    public void addToAttributes(com.wi.director.thrift.v1.abac.AbacAttribute elem) {
      if (this.attributes == null) {
        this.attributes = new ArrayList<com.wi.director.thrift.v1.abac.AbacAttribute>();
      }
      this.attributes.add(elem);
    }

    public List<com.wi.director.thrift.v1.abac.AbacAttribute> getAttributes() {
      return this.attributes;
    }

    public createSet_args setAttributes(List<com.wi.director.thrift.v1.abac.AbacAttribute> attributes) {
      this.attributes = attributes;
      return this;
    }

    public void unsetAttributes() {
      this.attributes = null;
    }

    /** Returns true if field attributes is set (has been assigned a value) and false otherwise */
    public boolean isSetAttributes() {
      return this.attributes != null;
    }

    public void setAttributesIsSet(boolean value) {
      if (!value) {
        this.attributes = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TEAM_ID:
        if (value == null) {
          unsetTeamId();
        } else {
          setTeamId((String)value);
        }
        break;

      case DS_SET:
        if (value == null) {
          unsetDsSet();
        } else {
          setDsSet((DataSheetSet)value);
        }
        break;

      case ATTRIBUTES:
        if (value == null) {
          unsetAttributes();
        } else {
          setAttributes((List<com.wi.director.thrift.v1.abac.AbacAttribute>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TEAM_ID:
        return getTeamId();

      case DS_SET:
        return getDsSet();

      case ATTRIBUTES:
        return getAttributes();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TEAM_ID:
        return isSetTeamId();
      case DS_SET:
        return isSetDsSet();
      case ATTRIBUTES:
        return isSetAttributes();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createSet_args)
        return this.equals((createSet_args)that);
      return false;
    }

    public boolean equals(createSet_args that) {
      if (that == null)
        return false;

      boolean this_present_teamId = true && this.isSetTeamId();
      boolean that_present_teamId = true && that.isSetTeamId();
      if (this_present_teamId || that_present_teamId) {
        if (!(this_present_teamId && that_present_teamId))
          return false;
        if (!this.teamId.equals(that.teamId))
          return false;
      }

      boolean this_present_dsSet = true && this.isSetDsSet();
      boolean that_present_dsSet = true && that.isSetDsSet();
      if (this_present_dsSet || that_present_dsSet) {
        if (!(this_present_dsSet && that_present_dsSet))
          return false;
        if (!this.dsSet.equals(that.dsSet))
          return false;
      }

      boolean this_present_attributes = true && this.isSetAttributes();
      boolean that_present_attributes = true && that.isSetAttributes();
      if (this_present_attributes || that_present_attributes) {
        if (!(this_present_attributes && that_present_attributes))
          return false;
        if (!this.attributes.equals(that.attributes))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_teamId = true && (isSetTeamId());
      list.add(present_teamId);
      if (present_teamId)
        list.add(teamId);

      boolean present_dsSet = true && (isSetDsSet());
      list.add(present_dsSet);
      if (present_dsSet)
        list.add(dsSet);

      boolean present_attributes = true && (isSetAttributes());
      list.add(present_attributes);
      if (present_attributes)
        list.add(attributes);

      return list.hashCode();
    }

    @Override
    public int compareTo(createSet_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTeamId()).compareTo(other.isSetTeamId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTeamId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teamId, other.teamId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDsSet()).compareTo(other.isSetDsSet());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDsSet()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dsSet, other.dsSet);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAttributes()).compareTo(other.isSetAttributes());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttributes()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attributes, other.attributes);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createSet_args(");
      boolean first = true;

      sb.append("teamId:");
      if (this.teamId == null) {
        sb.append("null");
      } else {
        sb.append(this.teamId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dsSet:");
      if (this.dsSet == null) {
        sb.append("null");
      } else {
        sb.append(this.dsSet);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("attributes:");
      if (this.attributes == null) {
        sb.append("null");
      } else {
        sb.append(this.attributes);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (dsSet != null) {
        dsSet.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createSet_argsStandardSchemeFactory implements SchemeFactory {
      public createSet_argsStandardScheme getScheme() {
        return new createSet_argsStandardScheme();
      }
    }

    private static class createSet_argsStandardScheme extends StandardScheme<createSet_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createSet_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TEAM_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.teamId = iprot.readString();
                struct.setTeamIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DS_SET
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dsSet = new DataSheetSet();
                struct.dsSet.read(iprot);
                struct.setDsSetIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ATTRIBUTES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list42 = iprot.readListBegin();
                  struct.attributes = new ArrayList<com.wi.director.thrift.v1.abac.AbacAttribute>(_list42.size);
                  com.wi.director.thrift.v1.abac.AbacAttribute _elem43;
                  for (int _i44 = 0; _i44 < _list42.size; ++_i44)
                  {
                    _elem43 = new com.wi.director.thrift.v1.abac.AbacAttribute();
                    _elem43.read(iprot);
                    struct.attributes.add(_elem43);
                  }
                  iprot.readListEnd();
                }
                struct.setAttributesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createSet_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.teamId != null) {
          oprot.writeFieldBegin(TEAM_ID_FIELD_DESC);
          oprot.writeString(struct.teamId);
          oprot.writeFieldEnd();
        }
        if (struct.dsSet != null) {
          oprot.writeFieldBegin(DS_SET_FIELD_DESC);
          struct.dsSet.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.attributes != null) {
          oprot.writeFieldBegin(ATTRIBUTES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.attributes.size()));
            for (com.wi.director.thrift.v1.abac.AbacAttribute _iter45 : struct.attributes)
            {
              _iter45.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class createSet_result implements org.apache.thrift.TBase<createSet_result, createSet_result._Fields>, java.io.Serializable, Cloneable, Comparable<createSet_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createSet_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createSet_resultStandardSchemeFactory());
    }

    public DataSheetSet success; // required
    public com.wi.director.thrift.v1.common.SystemException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DataSheetSet.class)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createSet_result.class, metaDataMap);
    }

    public createSet_result() {
    }

    public createSet_result(
      DataSheetSet success,
      com.wi.director.thrift.v1.common.SystemException err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createSet_result(createSet_result other) {
      if (other.isSetSuccess()) {
        this.success = new DataSheetSet(other.success);
      }
      if (other.isSetErr()) {
        this.err = new com.wi.director.thrift.v1.common.SystemException(other.err);
      }
    }

    public createSet_result deepCopy() {
      return new createSet_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public DataSheetSet getSuccess() {
      return this.success;
    }

    public createSet_result setSuccess(DataSheetSet success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.wi.director.thrift.v1.common.SystemException getErr() {
      return this.err;
    }

    public createSet_result setErr(com.wi.director.thrift.v1.common.SystemException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((DataSheetSet)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((com.wi.director.thrift.v1.common.SystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createSet_result)
        return this.equals((createSet_result)that);
      return false;
    }

    public boolean equals(createSet_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(createSet_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createSet_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createSet_resultStandardSchemeFactory implements SchemeFactory {
      public createSet_resultStandardScheme getScheme() {
        return new createSet_resultStandardScheme();
      }
    }

    private static class createSet_resultStandardScheme extends StandardScheme<createSet_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createSet_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new DataSheetSet();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new com.wi.director.thrift.v1.common.SystemException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createSet_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class updateSet_args implements org.apache.thrift.TBase<updateSet_args, updateSet_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateSet_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateSet_args");

    private static final org.apache.thrift.protocol.TField DS_SET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("dsSetId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField DS_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("dsSet", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateSet_argsStandardSchemeFactory());
    }

    public String dsSetId; // required
    public DataSheetSet dsSet; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DS_SET_ID((short)1, "dsSetId"),
      DS_SET((short)2, "dsSet");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DS_SET_ID
            return DS_SET_ID;
          case 2: // DS_SET
            return DS_SET;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DS_SET_ID, new org.apache.thrift.meta_data.FieldMetaData("dsSetId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "UUID")));
      tmpMap.put(_Fields.DS_SET, new org.apache.thrift.meta_data.FieldMetaData("dsSet", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DataSheetSet.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateSet_args.class, metaDataMap);
    }

    public updateSet_args() {
    }

    public updateSet_args(
      String dsSetId,
      DataSheetSet dsSet)
    {
      this();
      this.dsSetId = dsSetId;
      this.dsSet = dsSet;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateSet_args(updateSet_args other) {
      if (other.isSetDsSetId()) {
        this.dsSetId = other.dsSetId;
      }
      if (other.isSetDsSet()) {
        this.dsSet = new DataSheetSet(other.dsSet);
      }
    }

    public updateSet_args deepCopy() {
      return new updateSet_args(this);
    }

    @Override
    public void clear() {
      this.dsSetId = null;
      this.dsSet = null;
    }

    public String getDsSetId() {
      return this.dsSetId;
    }

    public updateSet_args setDsSetId(String dsSetId) {
      this.dsSetId = dsSetId;
      return this;
    }

    public void unsetDsSetId() {
      this.dsSetId = null;
    }

    /** Returns true if field dsSetId is set (has been assigned a value) and false otherwise */
    public boolean isSetDsSetId() {
      return this.dsSetId != null;
    }

    public void setDsSetIdIsSet(boolean value) {
      if (!value) {
        this.dsSetId = null;
      }
    }

    public DataSheetSet getDsSet() {
      return this.dsSet;
    }

    public updateSet_args setDsSet(DataSheetSet dsSet) {
      this.dsSet = dsSet;
      return this;
    }

    public void unsetDsSet() {
      this.dsSet = null;
    }

    /** Returns true if field dsSet is set (has been assigned a value) and false otherwise */
    public boolean isSetDsSet() {
      return this.dsSet != null;
    }

    public void setDsSetIsSet(boolean value) {
      if (!value) {
        this.dsSet = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DS_SET_ID:
        if (value == null) {
          unsetDsSetId();
        } else {
          setDsSetId((String)value);
        }
        break;

      case DS_SET:
        if (value == null) {
          unsetDsSet();
        } else {
          setDsSet((DataSheetSet)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DS_SET_ID:
        return getDsSetId();

      case DS_SET:
        return getDsSet();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DS_SET_ID:
        return isSetDsSetId();
      case DS_SET:
        return isSetDsSet();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateSet_args)
        return this.equals((updateSet_args)that);
      return false;
    }

    public boolean equals(updateSet_args that) {
      if (that == null)
        return false;

      boolean this_present_dsSetId = true && this.isSetDsSetId();
      boolean that_present_dsSetId = true && that.isSetDsSetId();
      if (this_present_dsSetId || that_present_dsSetId) {
        if (!(this_present_dsSetId && that_present_dsSetId))
          return false;
        if (!this.dsSetId.equals(that.dsSetId))
          return false;
      }

      boolean this_present_dsSet = true && this.isSetDsSet();
      boolean that_present_dsSet = true && that.isSetDsSet();
      if (this_present_dsSet || that_present_dsSet) {
        if (!(this_present_dsSet && that_present_dsSet))
          return false;
        if (!this.dsSet.equals(that.dsSet))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_dsSetId = true && (isSetDsSetId());
      list.add(present_dsSetId);
      if (present_dsSetId)
        list.add(dsSetId);

      boolean present_dsSet = true && (isSetDsSet());
      list.add(present_dsSet);
      if (present_dsSet)
        list.add(dsSet);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateSet_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDsSetId()).compareTo(other.isSetDsSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDsSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dsSetId, other.dsSetId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDsSet()).compareTo(other.isSetDsSet());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDsSet()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dsSet, other.dsSet);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateSet_args(");
      boolean first = true;

      sb.append("dsSetId:");
      if (this.dsSetId == null) {
        sb.append("null");
      } else {
        sb.append(this.dsSetId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dsSet:");
      if (this.dsSet == null) {
        sb.append("null");
      } else {
        sb.append(this.dsSet);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (dsSet != null) {
        dsSet.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateSet_argsStandardSchemeFactory implements SchemeFactory {
      public updateSet_argsStandardScheme getScheme() {
        return new updateSet_argsStandardScheme();
      }
    }

    private static class updateSet_argsStandardScheme extends StandardScheme<updateSet_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateSet_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DS_SET_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dsSetId = iprot.readString();
                struct.setDsSetIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DS_SET
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dsSet = new DataSheetSet();
                struct.dsSet.read(iprot);
                struct.setDsSetIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateSet_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.dsSetId != null) {
          oprot.writeFieldBegin(DS_SET_ID_FIELD_DESC);
          oprot.writeString(struct.dsSetId);
          oprot.writeFieldEnd();
        }
        if (struct.dsSet != null) {
          oprot.writeFieldBegin(DS_SET_FIELD_DESC);
          struct.dsSet.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class updateSet_result implements org.apache.thrift.TBase<updateSet_result, updateSet_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateSet_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateSet_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateSet_resultStandardSchemeFactory());
    }

    public DataSheetSet success; // required
    public com.wi.director.thrift.v1.common.SystemException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DataSheetSet.class)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateSet_result.class, metaDataMap);
    }

    public updateSet_result() {
    }

    public updateSet_result(
      DataSheetSet success,
      com.wi.director.thrift.v1.common.SystemException err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateSet_result(updateSet_result other) {
      if (other.isSetSuccess()) {
        this.success = new DataSheetSet(other.success);
      }
      if (other.isSetErr()) {
        this.err = new com.wi.director.thrift.v1.common.SystemException(other.err);
      }
    }

    public updateSet_result deepCopy() {
      return new updateSet_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public DataSheetSet getSuccess() {
      return this.success;
    }

    public updateSet_result setSuccess(DataSheetSet success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.wi.director.thrift.v1.common.SystemException getErr() {
      return this.err;
    }

    public updateSet_result setErr(com.wi.director.thrift.v1.common.SystemException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((DataSheetSet)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((com.wi.director.thrift.v1.common.SystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateSet_result)
        return this.equals((updateSet_result)that);
      return false;
    }

    public boolean equals(updateSet_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateSet_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateSet_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateSet_resultStandardSchemeFactory implements SchemeFactory {
      public updateSet_resultStandardScheme getScheme() {
        return new updateSet_resultStandardScheme();
      }
    }

    private static class updateSet_resultStandardScheme extends StandardScheme<updateSet_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateSet_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new DataSheetSet();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new com.wi.director.thrift.v1.common.SystemException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateSet_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class getSet_args implements org.apache.thrift.TBase<getSet_args, getSet_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSet_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSet_args");

    private static final org.apache.thrift.protocol.TField DS_SET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("dsSetId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SELECT_OPTS_FIELD_DESC = new org.apache.thrift.protocol.TField("selectOpts", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSet_argsStandardSchemeFactory());
    }

    public String dsSetId; // required
    public DataSheetSetSelectOptions selectOpts; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DS_SET_ID((short)1, "dsSetId"),
      SELECT_OPTS((short)2, "selectOpts");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DS_SET_ID
            return DS_SET_ID;
          case 2: // SELECT_OPTS
            return SELECT_OPTS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DS_SET_ID, new org.apache.thrift.meta_data.FieldMetaData("dsSetId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "UUID")));
      tmpMap.put(_Fields.SELECT_OPTS, new org.apache.thrift.meta_data.FieldMetaData("selectOpts", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DataSheetSetSelectOptions.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSet_args.class, metaDataMap);
    }

    public getSet_args() {
    }

    public getSet_args(
      String dsSetId,
      DataSheetSetSelectOptions selectOpts)
    {
      this();
      this.dsSetId = dsSetId;
      this.selectOpts = selectOpts;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSet_args(getSet_args other) {
      if (other.isSetDsSetId()) {
        this.dsSetId = other.dsSetId;
      }
      if (other.isSetSelectOpts()) {
        this.selectOpts = new DataSheetSetSelectOptions(other.selectOpts);
      }
    }

    public getSet_args deepCopy() {
      return new getSet_args(this);
    }

    @Override
    public void clear() {
      this.dsSetId = null;
      this.selectOpts = null;
    }

    public String getDsSetId() {
      return this.dsSetId;
    }

    public getSet_args setDsSetId(String dsSetId) {
      this.dsSetId = dsSetId;
      return this;
    }

    public void unsetDsSetId() {
      this.dsSetId = null;
    }

    /** Returns true if field dsSetId is set (has been assigned a value) and false otherwise */
    public boolean isSetDsSetId() {
      return this.dsSetId != null;
    }

    public void setDsSetIdIsSet(boolean value) {
      if (!value) {
        this.dsSetId = null;
      }
    }

    public DataSheetSetSelectOptions getSelectOpts() {
      return this.selectOpts;
    }

    public getSet_args setSelectOpts(DataSheetSetSelectOptions selectOpts) {
      this.selectOpts = selectOpts;
      return this;
    }

    public void unsetSelectOpts() {
      this.selectOpts = null;
    }

    /** Returns true if field selectOpts is set (has been assigned a value) and false otherwise */
    public boolean isSetSelectOpts() {
      return this.selectOpts != null;
    }

    public void setSelectOptsIsSet(boolean value) {
      if (!value) {
        this.selectOpts = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DS_SET_ID:
        if (value == null) {
          unsetDsSetId();
        } else {
          setDsSetId((String)value);
        }
        break;

      case SELECT_OPTS:
        if (value == null) {
          unsetSelectOpts();
        } else {
          setSelectOpts((DataSheetSetSelectOptions)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DS_SET_ID:
        return getDsSetId();

      case SELECT_OPTS:
        return getSelectOpts();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DS_SET_ID:
        return isSetDsSetId();
      case SELECT_OPTS:
        return isSetSelectOpts();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSet_args)
        return this.equals((getSet_args)that);
      return false;
    }

    public boolean equals(getSet_args that) {
      if (that == null)
        return false;

      boolean this_present_dsSetId = true && this.isSetDsSetId();
      boolean that_present_dsSetId = true && that.isSetDsSetId();
      if (this_present_dsSetId || that_present_dsSetId) {
        if (!(this_present_dsSetId && that_present_dsSetId))
          return false;
        if (!this.dsSetId.equals(that.dsSetId))
          return false;
      }

      boolean this_present_selectOpts = true && this.isSetSelectOpts();
      boolean that_present_selectOpts = true && that.isSetSelectOpts();
      if (this_present_selectOpts || that_present_selectOpts) {
        if (!(this_present_selectOpts && that_present_selectOpts))
          return false;
        if (!this.selectOpts.equals(that.selectOpts))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_dsSetId = true && (isSetDsSetId());
      list.add(present_dsSetId);
      if (present_dsSetId)
        list.add(dsSetId);

      boolean present_selectOpts = true && (isSetSelectOpts());
      list.add(present_selectOpts);
      if (present_selectOpts)
        list.add(selectOpts);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSet_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDsSetId()).compareTo(other.isSetDsSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDsSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dsSetId, other.dsSetId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSelectOpts()).compareTo(other.isSetSelectOpts());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSelectOpts()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.selectOpts, other.selectOpts);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSet_args(");
      boolean first = true;

      sb.append("dsSetId:");
      if (this.dsSetId == null) {
        sb.append("null");
      } else {
        sb.append(this.dsSetId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("selectOpts:");
      if (this.selectOpts == null) {
        sb.append("null");
      } else {
        sb.append(this.selectOpts);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (selectOpts != null) {
        selectOpts.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSet_argsStandardSchemeFactory implements SchemeFactory {
      public getSet_argsStandardScheme getScheme() {
        return new getSet_argsStandardScheme();
      }
    }

    private static class getSet_argsStandardScheme extends StandardScheme<getSet_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSet_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DS_SET_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dsSetId = iprot.readString();
                struct.setDsSetIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SELECT_OPTS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.selectOpts = new DataSheetSetSelectOptions();
                struct.selectOpts.read(iprot);
                struct.setSelectOptsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSet_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.dsSetId != null) {
          oprot.writeFieldBegin(DS_SET_ID_FIELD_DESC);
          oprot.writeString(struct.dsSetId);
          oprot.writeFieldEnd();
        }
        if (struct.selectOpts != null) {
          oprot.writeFieldBegin(SELECT_OPTS_FIELD_DESC);
          struct.selectOpts.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class getSet_result implements org.apache.thrift.TBase<getSet_result, getSet_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSet_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSet_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSet_resultStandardSchemeFactory());
    }

    public DataSheetSet success; // required
    public com.wi.director.thrift.v1.common.SystemException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DataSheetSet.class)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSet_result.class, metaDataMap);
    }

    public getSet_result() {
    }

    public getSet_result(
      DataSheetSet success,
      com.wi.director.thrift.v1.common.SystemException err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSet_result(getSet_result other) {
      if (other.isSetSuccess()) {
        this.success = new DataSheetSet(other.success);
      }
      if (other.isSetErr()) {
        this.err = new com.wi.director.thrift.v1.common.SystemException(other.err);
      }
    }

    public getSet_result deepCopy() {
      return new getSet_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public DataSheetSet getSuccess() {
      return this.success;
    }

    public getSet_result setSuccess(DataSheetSet success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.wi.director.thrift.v1.common.SystemException getErr() {
      return this.err;
    }

    public getSet_result setErr(com.wi.director.thrift.v1.common.SystemException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((DataSheetSet)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((com.wi.director.thrift.v1.common.SystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSet_result)
        return this.equals((getSet_result)that);
      return false;
    }

    public boolean equals(getSet_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSet_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSet_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSet_resultStandardSchemeFactory implements SchemeFactory {
      public getSet_resultStandardScheme getScheme() {
        return new getSet_resultStandardScheme();
      }
    }

    private static class getSet_resultStandardScheme extends StandardScheme<getSet_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSet_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new DataSheetSet();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new com.wi.director.thrift.v1.common.SystemException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSet_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class archiveSet_args implements org.apache.thrift.TBase<archiveSet_args, archiveSet_args._Fields>, java.io.Serializable, Cloneable, Comparable<archiveSet_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("archiveSet_args");

    private static final org.apache.thrift.protocol.TField DS_SET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("dsSetId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new archiveSet_argsStandardSchemeFactory());
    }

    public String dsSetId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DS_SET_ID((short)1, "dsSetId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DS_SET_ID
            return DS_SET_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DS_SET_ID, new org.apache.thrift.meta_data.FieldMetaData("dsSetId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "UUID")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(archiveSet_args.class, metaDataMap);
    }

    public archiveSet_args() {
    }

    public archiveSet_args(
      String dsSetId)
    {
      this();
      this.dsSetId = dsSetId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public archiveSet_args(archiveSet_args other) {
      if (other.isSetDsSetId()) {
        this.dsSetId = other.dsSetId;
      }
    }

    public archiveSet_args deepCopy() {
      return new archiveSet_args(this);
    }

    @Override
    public void clear() {
      this.dsSetId = null;
    }

    public String getDsSetId() {
      return this.dsSetId;
    }

    public archiveSet_args setDsSetId(String dsSetId) {
      this.dsSetId = dsSetId;
      return this;
    }

    public void unsetDsSetId() {
      this.dsSetId = null;
    }

    /** Returns true if field dsSetId is set (has been assigned a value) and false otherwise */
    public boolean isSetDsSetId() {
      return this.dsSetId != null;
    }

    public void setDsSetIdIsSet(boolean value) {
      if (!value) {
        this.dsSetId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DS_SET_ID:
        if (value == null) {
          unsetDsSetId();
        } else {
          setDsSetId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DS_SET_ID:
        return getDsSetId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DS_SET_ID:
        return isSetDsSetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof archiveSet_args)
        return this.equals((archiveSet_args)that);
      return false;
    }

    public boolean equals(archiveSet_args that) {
      if (that == null)
        return false;

      boolean this_present_dsSetId = true && this.isSetDsSetId();
      boolean that_present_dsSetId = true && that.isSetDsSetId();
      if (this_present_dsSetId || that_present_dsSetId) {
        if (!(this_present_dsSetId && that_present_dsSetId))
          return false;
        if (!this.dsSetId.equals(that.dsSetId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_dsSetId = true && (isSetDsSetId());
      list.add(present_dsSetId);
      if (present_dsSetId)
        list.add(dsSetId);

      return list.hashCode();
    }

    @Override
    public int compareTo(archiveSet_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDsSetId()).compareTo(other.isSetDsSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDsSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dsSetId, other.dsSetId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("archiveSet_args(");
      boolean first = true;

      sb.append("dsSetId:");
      if (this.dsSetId == null) {
        sb.append("null");
      } else {
        sb.append(this.dsSetId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class archiveSet_argsStandardSchemeFactory implements SchemeFactory {
      public archiveSet_argsStandardScheme getScheme() {
        return new archiveSet_argsStandardScheme();
      }
    }

    private static class archiveSet_argsStandardScheme extends StandardScheme<archiveSet_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, archiveSet_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DS_SET_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dsSetId = iprot.readString();
                struct.setDsSetIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, archiveSet_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.dsSetId != null) {
          oprot.writeFieldBegin(DS_SET_ID_FIELD_DESC);
          oprot.writeString(struct.dsSetId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class archiveSet_result implements org.apache.thrift.TBase<archiveSet_result, archiveSet_result._Fields>, java.io.Serializable, Cloneable, Comparable<archiveSet_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("archiveSet_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new archiveSet_resultStandardSchemeFactory());
    }

    public DataSheetSet success; // required
    public com.wi.director.thrift.v1.common.SystemException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DataSheetSet.class)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(archiveSet_result.class, metaDataMap);
    }

    public archiveSet_result() {
    }

    public archiveSet_result(
      DataSheetSet success,
      com.wi.director.thrift.v1.common.SystemException err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public archiveSet_result(archiveSet_result other) {
      if (other.isSetSuccess()) {
        this.success = new DataSheetSet(other.success);
      }
      if (other.isSetErr()) {
        this.err = new com.wi.director.thrift.v1.common.SystemException(other.err);
      }
    }

    public archiveSet_result deepCopy() {
      return new archiveSet_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public DataSheetSet getSuccess() {
      return this.success;
    }

    public archiveSet_result setSuccess(DataSheetSet success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.wi.director.thrift.v1.common.SystemException getErr() {
      return this.err;
    }

    public archiveSet_result setErr(com.wi.director.thrift.v1.common.SystemException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((DataSheetSet)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((com.wi.director.thrift.v1.common.SystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof archiveSet_result)
        return this.equals((archiveSet_result)that);
      return false;
    }

    public boolean equals(archiveSet_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(archiveSet_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("archiveSet_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class archiveSet_resultStandardSchemeFactory implements SchemeFactory {
      public archiveSet_resultStandardScheme getScheme() {
        return new archiveSet_resultStandardScheme();
      }
    }

    private static class archiveSet_resultStandardScheme extends StandardScheme<archiveSet_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, archiveSet_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new DataSheetSet();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new com.wi.director.thrift.v1.common.SystemException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, archiveSet_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class unarchiveSet_args implements org.apache.thrift.TBase<unarchiveSet_args, unarchiveSet_args._Fields>, java.io.Serializable, Cloneable, Comparable<unarchiveSet_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("unarchiveSet_args");

    private static final org.apache.thrift.protocol.TField DS_SET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("dsSetId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new unarchiveSet_argsStandardSchemeFactory());
    }

    public String dsSetId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DS_SET_ID((short)1, "dsSetId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DS_SET_ID
            return DS_SET_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DS_SET_ID, new org.apache.thrift.meta_data.FieldMetaData("dsSetId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "UUID")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(unarchiveSet_args.class, metaDataMap);
    }

    public unarchiveSet_args() {
    }

    public unarchiveSet_args(
      String dsSetId)
    {
      this();
      this.dsSetId = dsSetId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public unarchiveSet_args(unarchiveSet_args other) {
      if (other.isSetDsSetId()) {
        this.dsSetId = other.dsSetId;
      }
    }

    public unarchiveSet_args deepCopy() {
      return new unarchiveSet_args(this);
    }

    @Override
    public void clear() {
      this.dsSetId = null;
    }

    public String getDsSetId() {
      return this.dsSetId;
    }

    public unarchiveSet_args setDsSetId(String dsSetId) {
      this.dsSetId = dsSetId;
      return this;
    }

    public void unsetDsSetId() {
      this.dsSetId = null;
    }

    /** Returns true if field dsSetId is set (has been assigned a value) and false otherwise */
    public boolean isSetDsSetId() {
      return this.dsSetId != null;
    }

    public void setDsSetIdIsSet(boolean value) {
      if (!value) {
        this.dsSetId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DS_SET_ID:
        if (value == null) {
          unsetDsSetId();
        } else {
          setDsSetId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DS_SET_ID:
        return getDsSetId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DS_SET_ID:
        return isSetDsSetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof unarchiveSet_args)
        return this.equals((unarchiveSet_args)that);
      return false;
    }

    public boolean equals(unarchiveSet_args that) {
      if (that == null)
        return false;

      boolean this_present_dsSetId = true && this.isSetDsSetId();
      boolean that_present_dsSetId = true && that.isSetDsSetId();
      if (this_present_dsSetId || that_present_dsSetId) {
        if (!(this_present_dsSetId && that_present_dsSetId))
          return false;
        if (!this.dsSetId.equals(that.dsSetId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_dsSetId = true && (isSetDsSetId());
      list.add(present_dsSetId);
      if (present_dsSetId)
        list.add(dsSetId);

      return list.hashCode();
    }

    @Override
    public int compareTo(unarchiveSet_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDsSetId()).compareTo(other.isSetDsSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDsSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dsSetId, other.dsSetId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("unarchiveSet_args(");
      boolean first = true;

      sb.append("dsSetId:");
      if (this.dsSetId == null) {
        sb.append("null");
      } else {
        sb.append(this.dsSetId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class unarchiveSet_argsStandardSchemeFactory implements SchemeFactory {
      public unarchiveSet_argsStandardScheme getScheme() {
        return new unarchiveSet_argsStandardScheme();
      }
    }

    private static class unarchiveSet_argsStandardScheme extends StandardScheme<unarchiveSet_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, unarchiveSet_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DS_SET_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dsSetId = iprot.readString();
                struct.setDsSetIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, unarchiveSet_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.dsSetId != null) {
          oprot.writeFieldBegin(DS_SET_ID_FIELD_DESC);
          oprot.writeString(struct.dsSetId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class unarchiveSet_result implements org.apache.thrift.TBase<unarchiveSet_result, unarchiveSet_result._Fields>, java.io.Serializable, Cloneable, Comparable<unarchiveSet_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("unarchiveSet_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new unarchiveSet_resultStandardSchemeFactory());
    }

    public DataSheetSet success; // required
    public com.wi.director.thrift.v1.common.SystemException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DataSheetSet.class)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(unarchiveSet_result.class, metaDataMap);
    }

    public unarchiveSet_result() {
    }

    public unarchiveSet_result(
      DataSheetSet success,
      com.wi.director.thrift.v1.common.SystemException err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public unarchiveSet_result(unarchiveSet_result other) {
      if (other.isSetSuccess()) {
        this.success = new DataSheetSet(other.success);
      }
      if (other.isSetErr()) {
        this.err = new com.wi.director.thrift.v1.common.SystemException(other.err);
      }
    }

    public unarchiveSet_result deepCopy() {
      return new unarchiveSet_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public DataSheetSet getSuccess() {
      return this.success;
    }

    public unarchiveSet_result setSuccess(DataSheetSet success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.wi.director.thrift.v1.common.SystemException getErr() {
      return this.err;
    }

    public unarchiveSet_result setErr(com.wi.director.thrift.v1.common.SystemException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((DataSheetSet)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((com.wi.director.thrift.v1.common.SystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof unarchiveSet_result)
        return this.equals((unarchiveSet_result)that);
      return false;
    }

    public boolean equals(unarchiveSet_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(unarchiveSet_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("unarchiveSet_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class unarchiveSet_resultStandardSchemeFactory implements SchemeFactory {
      public unarchiveSet_resultStandardScheme getScheme() {
        return new unarchiveSet_resultStandardScheme();
      }
    }

    private static class unarchiveSet_resultStandardScheme extends StandardScheme<unarchiveSet_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, unarchiveSet_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new DataSheetSet();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new com.wi.director.thrift.v1.common.SystemException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, unarchiveSet_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class definitionOps_args implements org.apache.thrift.TBase<definitionOps_args, definitionOps_args._Fields>, java.io.Serializable, Cloneable, Comparable<definitionOps_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("definitionOps_args");

    private static final org.apache.thrift.protocol.TField DS_SET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("dsSetId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField DEF_ACTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("defActions", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new definitionOps_argsStandardSchemeFactory());
    }

    public String dsSetId; // required
    public List<DataSheetDefinitionAction> defActions; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DS_SET_ID((short)1, "dsSetId"),
      DEF_ACTIONS((short)2, "defActions");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DS_SET_ID
            return DS_SET_ID;
          case 2: // DEF_ACTIONS
            return DEF_ACTIONS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DS_SET_ID, new org.apache.thrift.meta_data.FieldMetaData("dsSetId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "UUID")));
      tmpMap.put(_Fields.DEF_ACTIONS, new org.apache.thrift.meta_data.FieldMetaData("defActions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DataSheetDefinitionAction.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(definitionOps_args.class, metaDataMap);
    }

    public definitionOps_args() {
    }

    public definitionOps_args(
      String dsSetId,
      List<DataSheetDefinitionAction> defActions)
    {
      this();
      this.dsSetId = dsSetId;
      this.defActions = defActions;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public definitionOps_args(definitionOps_args other) {
      if (other.isSetDsSetId()) {
        this.dsSetId = other.dsSetId;
      }
      if (other.isSetDefActions()) {
        List<DataSheetDefinitionAction> __this__defActions = new ArrayList<DataSheetDefinitionAction>(other.defActions.size());
        for (DataSheetDefinitionAction other_element : other.defActions) {
          __this__defActions.add(new DataSheetDefinitionAction(other_element));
        }
        this.defActions = __this__defActions;
      }
    }

    public definitionOps_args deepCopy() {
      return new definitionOps_args(this);
    }

    @Override
    public void clear() {
      this.dsSetId = null;
      this.defActions = null;
    }

    public String getDsSetId() {
      return this.dsSetId;
    }

    public definitionOps_args setDsSetId(String dsSetId) {
      this.dsSetId = dsSetId;
      return this;
    }

    public void unsetDsSetId() {
      this.dsSetId = null;
    }

    /** Returns true if field dsSetId is set (has been assigned a value) and false otherwise */
    public boolean isSetDsSetId() {
      return this.dsSetId != null;
    }

    public void setDsSetIdIsSet(boolean value) {
      if (!value) {
        this.dsSetId = null;
      }
    }

    public int getDefActionsSize() {
      return (this.defActions == null) ? 0 : this.defActions.size();
    }

    public java.util.Iterator<DataSheetDefinitionAction> getDefActionsIterator() {
      return (this.defActions == null) ? null : this.defActions.iterator();
    }

    public void addToDefActions(DataSheetDefinitionAction elem) {
      if (this.defActions == null) {
        this.defActions = new ArrayList<DataSheetDefinitionAction>();
      }
      this.defActions.add(elem);
    }

    public List<DataSheetDefinitionAction> getDefActions() {
      return this.defActions;
    }

    public definitionOps_args setDefActions(List<DataSheetDefinitionAction> defActions) {
      this.defActions = defActions;
      return this;
    }

    public void unsetDefActions() {
      this.defActions = null;
    }

    /** Returns true if field defActions is set (has been assigned a value) and false otherwise */
    public boolean isSetDefActions() {
      return this.defActions != null;
    }

    public void setDefActionsIsSet(boolean value) {
      if (!value) {
        this.defActions = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DS_SET_ID:
        if (value == null) {
          unsetDsSetId();
        } else {
          setDsSetId((String)value);
        }
        break;

      case DEF_ACTIONS:
        if (value == null) {
          unsetDefActions();
        } else {
          setDefActions((List<DataSheetDefinitionAction>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DS_SET_ID:
        return getDsSetId();

      case DEF_ACTIONS:
        return getDefActions();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DS_SET_ID:
        return isSetDsSetId();
      case DEF_ACTIONS:
        return isSetDefActions();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof definitionOps_args)
        return this.equals((definitionOps_args)that);
      return false;
    }

    public boolean equals(definitionOps_args that) {
      if (that == null)
        return false;

      boolean this_present_dsSetId = true && this.isSetDsSetId();
      boolean that_present_dsSetId = true && that.isSetDsSetId();
      if (this_present_dsSetId || that_present_dsSetId) {
        if (!(this_present_dsSetId && that_present_dsSetId))
          return false;
        if (!this.dsSetId.equals(that.dsSetId))
          return false;
      }

      boolean this_present_defActions = true && this.isSetDefActions();
      boolean that_present_defActions = true && that.isSetDefActions();
      if (this_present_defActions || that_present_defActions) {
        if (!(this_present_defActions && that_present_defActions))
          return false;
        if (!this.defActions.equals(that.defActions))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_dsSetId = true && (isSetDsSetId());
      list.add(present_dsSetId);
      if (present_dsSetId)
        list.add(dsSetId);

      boolean present_defActions = true && (isSetDefActions());
      list.add(present_defActions);
      if (present_defActions)
        list.add(defActions);

      return list.hashCode();
    }

    @Override
    public int compareTo(definitionOps_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDsSetId()).compareTo(other.isSetDsSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDsSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dsSetId, other.dsSetId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDefActions()).compareTo(other.isSetDefActions());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDefActions()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.defActions, other.defActions);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("definitionOps_args(");
      boolean first = true;

      sb.append("dsSetId:");
      if (this.dsSetId == null) {
        sb.append("null");
      } else {
        sb.append(this.dsSetId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("defActions:");
      if (this.defActions == null) {
        sb.append("null");
      } else {
        sb.append(this.defActions);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class definitionOps_argsStandardSchemeFactory implements SchemeFactory {
      public definitionOps_argsStandardScheme getScheme() {
        return new definitionOps_argsStandardScheme();
      }
    }

    private static class definitionOps_argsStandardScheme extends StandardScheme<definitionOps_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, definitionOps_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DS_SET_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dsSetId = iprot.readString();
                struct.setDsSetIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DEF_ACTIONS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list46 = iprot.readListBegin();
                  struct.defActions = new ArrayList<DataSheetDefinitionAction>(_list46.size);
                  DataSheetDefinitionAction _elem47;
                  for (int _i48 = 0; _i48 < _list46.size; ++_i48)
                  {
                    _elem47 = new DataSheetDefinitionAction();
                    _elem47.read(iprot);
                    struct.defActions.add(_elem47);
                  }
                  iprot.readListEnd();
                }
                struct.setDefActionsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, definitionOps_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.dsSetId != null) {
          oprot.writeFieldBegin(DS_SET_ID_FIELD_DESC);
          oprot.writeString(struct.dsSetId);
          oprot.writeFieldEnd();
        }
        if (struct.defActions != null) {
          oprot.writeFieldBegin(DEF_ACTIONS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.defActions.size()));
            for (DataSheetDefinitionAction _iter49 : struct.defActions)
            {
              _iter49.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class definitionOps_result implements org.apache.thrift.TBase<definitionOps_result, definitionOps_result._Fields>, java.io.Serializable, Cloneable, Comparable<definitionOps_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("definitionOps_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new definitionOps_resultStandardSchemeFactory());
    }

    public List<DataSheetDefinition> success; // required
    public com.wi.director.thrift.v1.common.SystemException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DataSheetDefinition.class))));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(definitionOps_result.class, metaDataMap);
    }

    public definitionOps_result() {
    }

    public definitionOps_result(
      List<DataSheetDefinition> success,
      com.wi.director.thrift.v1.common.SystemException err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public definitionOps_result(definitionOps_result other) {
      if (other.isSetSuccess()) {
        List<DataSheetDefinition> __this__success = new ArrayList<DataSheetDefinition>(other.success.size());
        for (DataSheetDefinition other_element : other.success) {
          __this__success.add(new DataSheetDefinition(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetErr()) {
        this.err = new com.wi.director.thrift.v1.common.SystemException(other.err);
      }
    }

    public definitionOps_result deepCopy() {
      return new definitionOps_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<DataSheetDefinition> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(DataSheetDefinition elem) {
      if (this.success == null) {
        this.success = new ArrayList<DataSheetDefinition>();
      }
      this.success.add(elem);
    }

    public List<DataSheetDefinition> getSuccess() {
      return this.success;
    }

    public definitionOps_result setSuccess(List<DataSheetDefinition> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.wi.director.thrift.v1.common.SystemException getErr() {
      return this.err;
    }

    public definitionOps_result setErr(com.wi.director.thrift.v1.common.SystemException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<DataSheetDefinition>)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((com.wi.director.thrift.v1.common.SystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof definitionOps_result)
        return this.equals((definitionOps_result)that);
      return false;
    }

    public boolean equals(definitionOps_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(definitionOps_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("definitionOps_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class definitionOps_resultStandardSchemeFactory implements SchemeFactory {
      public definitionOps_resultStandardScheme getScheme() {
        return new definitionOps_resultStandardScheme();
      }
    }

    private static class definitionOps_resultStandardScheme extends StandardScheme<definitionOps_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, definitionOps_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list50 = iprot.readListBegin();
                  struct.success = new ArrayList<DataSheetDefinition>(_list50.size);
                  DataSheetDefinition _elem51;
                  for (int _i52 = 0; _i52 < _list50.size; ++_i52)
                  {
                    _elem51 = new DataSheetDefinition();
                    _elem51.read(iprot);
                    struct.success.add(_elem51);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new com.wi.director.thrift.v1.common.SystemException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, definitionOps_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (DataSheetDefinition _iter53 : struct.success)
            {
              _iter53.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class sheetOps_args implements org.apache.thrift.TBase<sheetOps_args, sheetOps_args._Fields>, java.io.Serializable, Cloneable, Comparable<sheetOps_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sheetOps_args");

    private static final org.apache.thrift.protocol.TField DS_SET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("dsSetId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SHEET_ACTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("sheetActions", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sheetOps_argsStandardSchemeFactory());
    }

    public String dsSetId; // required
    public List<DataSheetAction> sheetActions; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DS_SET_ID((short)1, "dsSetId"),
      SHEET_ACTIONS((short)2, "sheetActions");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DS_SET_ID
            return DS_SET_ID;
          case 2: // SHEET_ACTIONS
            return SHEET_ACTIONS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DS_SET_ID, new org.apache.thrift.meta_data.FieldMetaData("dsSetId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "UUID")));
      tmpMap.put(_Fields.SHEET_ACTIONS, new org.apache.thrift.meta_data.FieldMetaData("sheetActions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DataSheetAction.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sheetOps_args.class, metaDataMap);
    }

    public sheetOps_args() {
    }

    public sheetOps_args(
      String dsSetId,
      List<DataSheetAction> sheetActions)
    {
      this();
      this.dsSetId = dsSetId;
      this.sheetActions = sheetActions;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sheetOps_args(sheetOps_args other) {
      if (other.isSetDsSetId()) {
        this.dsSetId = other.dsSetId;
      }
      if (other.isSetSheetActions()) {
        List<DataSheetAction> __this__sheetActions = new ArrayList<DataSheetAction>(other.sheetActions.size());
        for (DataSheetAction other_element : other.sheetActions) {
          __this__sheetActions.add(new DataSheetAction(other_element));
        }
        this.sheetActions = __this__sheetActions;
      }
    }

    public sheetOps_args deepCopy() {
      return new sheetOps_args(this);
    }

    @Override
    public void clear() {
      this.dsSetId = null;
      this.sheetActions = null;
    }

    public String getDsSetId() {
      return this.dsSetId;
    }

    public sheetOps_args setDsSetId(String dsSetId) {
      this.dsSetId = dsSetId;
      return this;
    }

    public void unsetDsSetId() {
      this.dsSetId = null;
    }

    /** Returns true if field dsSetId is set (has been assigned a value) and false otherwise */
    public boolean isSetDsSetId() {
      return this.dsSetId != null;
    }

    public void setDsSetIdIsSet(boolean value) {
      if (!value) {
        this.dsSetId = null;
      }
    }

    public int getSheetActionsSize() {
      return (this.sheetActions == null) ? 0 : this.sheetActions.size();
    }

    public java.util.Iterator<DataSheetAction> getSheetActionsIterator() {
      return (this.sheetActions == null) ? null : this.sheetActions.iterator();
    }

    public void addToSheetActions(DataSheetAction elem) {
      if (this.sheetActions == null) {
        this.sheetActions = new ArrayList<DataSheetAction>();
      }
      this.sheetActions.add(elem);
    }

    public List<DataSheetAction> getSheetActions() {
      return this.sheetActions;
    }

    public sheetOps_args setSheetActions(List<DataSheetAction> sheetActions) {
      this.sheetActions = sheetActions;
      return this;
    }

    public void unsetSheetActions() {
      this.sheetActions = null;
    }

    /** Returns true if field sheetActions is set (has been assigned a value) and false otherwise */
    public boolean isSetSheetActions() {
      return this.sheetActions != null;
    }

    public void setSheetActionsIsSet(boolean value) {
      if (!value) {
        this.sheetActions = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DS_SET_ID:
        if (value == null) {
          unsetDsSetId();
        } else {
          setDsSetId((String)value);
        }
        break;

      case SHEET_ACTIONS:
        if (value == null) {
          unsetSheetActions();
        } else {
          setSheetActions((List<DataSheetAction>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DS_SET_ID:
        return getDsSetId();

      case SHEET_ACTIONS:
        return getSheetActions();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DS_SET_ID:
        return isSetDsSetId();
      case SHEET_ACTIONS:
        return isSetSheetActions();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sheetOps_args)
        return this.equals((sheetOps_args)that);
      return false;
    }

    public boolean equals(sheetOps_args that) {
      if (that == null)
        return false;

      boolean this_present_dsSetId = true && this.isSetDsSetId();
      boolean that_present_dsSetId = true && that.isSetDsSetId();
      if (this_present_dsSetId || that_present_dsSetId) {
        if (!(this_present_dsSetId && that_present_dsSetId))
          return false;
        if (!this.dsSetId.equals(that.dsSetId))
          return false;
      }

      boolean this_present_sheetActions = true && this.isSetSheetActions();
      boolean that_present_sheetActions = true && that.isSetSheetActions();
      if (this_present_sheetActions || that_present_sheetActions) {
        if (!(this_present_sheetActions && that_present_sheetActions))
          return false;
        if (!this.sheetActions.equals(that.sheetActions))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_dsSetId = true && (isSetDsSetId());
      list.add(present_dsSetId);
      if (present_dsSetId)
        list.add(dsSetId);

      boolean present_sheetActions = true && (isSetSheetActions());
      list.add(present_sheetActions);
      if (present_sheetActions)
        list.add(sheetActions);

      return list.hashCode();
    }

    @Override
    public int compareTo(sheetOps_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDsSetId()).compareTo(other.isSetDsSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDsSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dsSetId, other.dsSetId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSheetActions()).compareTo(other.isSetSheetActions());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSheetActions()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sheetActions, other.sheetActions);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sheetOps_args(");
      boolean first = true;

      sb.append("dsSetId:");
      if (this.dsSetId == null) {
        sb.append("null");
      } else {
        sb.append(this.dsSetId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sheetActions:");
      if (this.sheetActions == null) {
        sb.append("null");
      } else {
        sb.append(this.sheetActions);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sheetOps_argsStandardSchemeFactory implements SchemeFactory {
      public sheetOps_argsStandardScheme getScheme() {
        return new sheetOps_argsStandardScheme();
      }
    }

    private static class sheetOps_argsStandardScheme extends StandardScheme<sheetOps_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sheetOps_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DS_SET_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dsSetId = iprot.readString();
                struct.setDsSetIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SHEET_ACTIONS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list54 = iprot.readListBegin();
                  struct.sheetActions = new ArrayList<DataSheetAction>(_list54.size);
                  DataSheetAction _elem55;
                  for (int _i56 = 0; _i56 < _list54.size; ++_i56)
                  {
                    _elem55 = new DataSheetAction();
                    _elem55.read(iprot);
                    struct.sheetActions.add(_elem55);
                  }
                  iprot.readListEnd();
                }
                struct.setSheetActionsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sheetOps_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.dsSetId != null) {
          oprot.writeFieldBegin(DS_SET_ID_FIELD_DESC);
          oprot.writeString(struct.dsSetId);
          oprot.writeFieldEnd();
        }
        if (struct.sheetActions != null) {
          oprot.writeFieldBegin(SHEET_ACTIONS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.sheetActions.size()));
            for (DataSheetAction _iter57 : struct.sheetActions)
            {
              _iter57.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class sheetOps_result implements org.apache.thrift.TBase<sheetOps_result, sheetOps_result._Fields>, java.io.Serializable, Cloneable, Comparable<sheetOps_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sheetOps_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sheetOps_resultStandardSchemeFactory());
    }

    public List<DataSheet> success; // required
    public com.wi.director.thrift.v1.common.SystemException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DataSheet.class))));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sheetOps_result.class, metaDataMap);
    }

    public sheetOps_result() {
    }

    public sheetOps_result(
      List<DataSheet> success,
      com.wi.director.thrift.v1.common.SystemException err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sheetOps_result(sheetOps_result other) {
      if (other.isSetSuccess()) {
        List<DataSheet> __this__success = new ArrayList<DataSheet>(other.success.size());
        for (DataSheet other_element : other.success) {
          __this__success.add(new DataSheet(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetErr()) {
        this.err = new com.wi.director.thrift.v1.common.SystemException(other.err);
      }
    }

    public sheetOps_result deepCopy() {
      return new sheetOps_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<DataSheet> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(DataSheet elem) {
      if (this.success == null) {
        this.success = new ArrayList<DataSheet>();
      }
      this.success.add(elem);
    }

    public List<DataSheet> getSuccess() {
      return this.success;
    }

    public sheetOps_result setSuccess(List<DataSheet> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.wi.director.thrift.v1.common.SystemException getErr() {
      return this.err;
    }

    public sheetOps_result setErr(com.wi.director.thrift.v1.common.SystemException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<DataSheet>)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((com.wi.director.thrift.v1.common.SystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sheetOps_result)
        return this.equals((sheetOps_result)that);
      return false;
    }

    public boolean equals(sheetOps_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(sheetOps_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sheetOps_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sheetOps_resultStandardSchemeFactory implements SchemeFactory {
      public sheetOps_resultStandardScheme getScheme() {
        return new sheetOps_resultStandardScheme();
      }
    }

    private static class sheetOps_resultStandardScheme extends StandardScheme<sheetOps_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sheetOps_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list58 = iprot.readListBegin();
                  struct.success = new ArrayList<DataSheet>(_list58.size);
                  DataSheet _elem59;
                  for (int _i60 = 0; _i60 < _list58.size; ++_i60)
                  {
                    _elem59 = new DataSheet();
                    _elem59.read(iprot);
                    struct.success.add(_elem59);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new com.wi.director.thrift.v1.common.SystemException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sheetOps_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (DataSheet _iter61 : struct.success)
            {
              _iter61.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class querySheets_args implements org.apache.thrift.TBase<querySheets_args, querySheets_args._Fields>, java.io.Serializable, Cloneable, Comparable<querySheets_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("querySheets_args");

    private static final org.apache.thrift.protocol.TField DS_SET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("dsSetId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField OPTS_FIELD_DESC = new org.apache.thrift.protocol.TField("opts", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new querySheets_argsStandardSchemeFactory());
    }

    public String dsSetId; // required
    public DataSheetOptions opts; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DS_SET_ID((short)1, "dsSetId"),
      OPTS((short)2, "opts");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DS_SET_ID
            return DS_SET_ID;
          case 2: // OPTS
            return OPTS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DS_SET_ID, new org.apache.thrift.meta_data.FieldMetaData("dsSetId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "UUID")));
      tmpMap.put(_Fields.OPTS, new org.apache.thrift.meta_data.FieldMetaData("opts", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DataSheetOptions.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(querySheets_args.class, metaDataMap);
    }

    public querySheets_args() {
    }

    public querySheets_args(
      String dsSetId,
      DataSheetOptions opts)
    {
      this();
      this.dsSetId = dsSetId;
      this.opts = opts;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public querySheets_args(querySheets_args other) {
      if (other.isSetDsSetId()) {
        this.dsSetId = other.dsSetId;
      }
      if (other.isSetOpts()) {
        this.opts = new DataSheetOptions(other.opts);
      }
    }

    public querySheets_args deepCopy() {
      return new querySheets_args(this);
    }

    @Override
    public void clear() {
      this.dsSetId = null;
      this.opts = null;
    }

    public String getDsSetId() {
      return this.dsSetId;
    }

    public querySheets_args setDsSetId(String dsSetId) {
      this.dsSetId = dsSetId;
      return this;
    }

    public void unsetDsSetId() {
      this.dsSetId = null;
    }

    /** Returns true if field dsSetId is set (has been assigned a value) and false otherwise */
    public boolean isSetDsSetId() {
      return this.dsSetId != null;
    }

    public void setDsSetIdIsSet(boolean value) {
      if (!value) {
        this.dsSetId = null;
      }
    }

    public DataSheetOptions getOpts() {
      return this.opts;
    }

    public querySheets_args setOpts(DataSheetOptions opts) {
      this.opts = opts;
      return this;
    }

    public void unsetOpts() {
      this.opts = null;
    }

    /** Returns true if field opts is set (has been assigned a value) and false otherwise */
    public boolean isSetOpts() {
      return this.opts != null;
    }

    public void setOptsIsSet(boolean value) {
      if (!value) {
        this.opts = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DS_SET_ID:
        if (value == null) {
          unsetDsSetId();
        } else {
          setDsSetId((String)value);
        }
        break;

      case OPTS:
        if (value == null) {
          unsetOpts();
        } else {
          setOpts((DataSheetOptions)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DS_SET_ID:
        return getDsSetId();

      case OPTS:
        return getOpts();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DS_SET_ID:
        return isSetDsSetId();
      case OPTS:
        return isSetOpts();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof querySheets_args)
        return this.equals((querySheets_args)that);
      return false;
    }

    public boolean equals(querySheets_args that) {
      if (that == null)
        return false;

      boolean this_present_dsSetId = true && this.isSetDsSetId();
      boolean that_present_dsSetId = true && that.isSetDsSetId();
      if (this_present_dsSetId || that_present_dsSetId) {
        if (!(this_present_dsSetId && that_present_dsSetId))
          return false;
        if (!this.dsSetId.equals(that.dsSetId))
          return false;
      }

      boolean this_present_opts = true && this.isSetOpts();
      boolean that_present_opts = true && that.isSetOpts();
      if (this_present_opts || that_present_opts) {
        if (!(this_present_opts && that_present_opts))
          return false;
        if (!this.opts.equals(that.opts))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_dsSetId = true && (isSetDsSetId());
      list.add(present_dsSetId);
      if (present_dsSetId)
        list.add(dsSetId);

      boolean present_opts = true && (isSetOpts());
      list.add(present_opts);
      if (present_opts)
        list.add(opts);

      return list.hashCode();
    }

    @Override
    public int compareTo(querySheets_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDsSetId()).compareTo(other.isSetDsSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDsSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dsSetId, other.dsSetId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOpts()).compareTo(other.isSetOpts());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOpts()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.opts, other.opts);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("querySheets_args(");
      boolean first = true;

      sb.append("dsSetId:");
      if (this.dsSetId == null) {
        sb.append("null");
      } else {
        sb.append(this.dsSetId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("opts:");
      if (this.opts == null) {
        sb.append("null");
      } else {
        sb.append(this.opts);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (opts != null) {
        opts.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class querySheets_argsStandardSchemeFactory implements SchemeFactory {
      public querySheets_argsStandardScheme getScheme() {
        return new querySheets_argsStandardScheme();
      }
    }

    private static class querySheets_argsStandardScheme extends StandardScheme<querySheets_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, querySheets_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DS_SET_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dsSetId = iprot.readString();
                struct.setDsSetIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OPTS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.opts = new DataSheetOptions();
                struct.opts.read(iprot);
                struct.setOptsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, querySheets_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.dsSetId != null) {
          oprot.writeFieldBegin(DS_SET_ID_FIELD_DESC);
          oprot.writeString(struct.dsSetId);
          oprot.writeFieldEnd();
        }
        if (struct.opts != null) {
          oprot.writeFieldBegin(OPTS_FIELD_DESC);
          struct.opts.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class querySheets_result implements org.apache.thrift.TBase<querySheets_result, querySheets_result._Fields>, java.io.Serializable, Cloneable, Comparable<querySheets_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("querySheets_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new querySheets_resultStandardSchemeFactory());
    }

    public DataSheetQueryResult success; // required
    public com.wi.director.thrift.v1.common.SystemException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DataSheetQueryResult.class)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(querySheets_result.class, metaDataMap);
    }

    public querySheets_result() {
    }

    public querySheets_result(
      DataSheetQueryResult success,
      com.wi.director.thrift.v1.common.SystemException err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public querySheets_result(querySheets_result other) {
      if (other.isSetSuccess()) {
        this.success = new DataSheetQueryResult(other.success);
      }
      if (other.isSetErr()) {
        this.err = new com.wi.director.thrift.v1.common.SystemException(other.err);
      }
    }

    public querySheets_result deepCopy() {
      return new querySheets_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public DataSheetQueryResult getSuccess() {
      return this.success;
    }

    public querySheets_result setSuccess(DataSheetQueryResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.wi.director.thrift.v1.common.SystemException getErr() {
      return this.err;
    }

    public querySheets_result setErr(com.wi.director.thrift.v1.common.SystemException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((DataSheetQueryResult)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((com.wi.director.thrift.v1.common.SystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof querySheets_result)
        return this.equals((querySheets_result)that);
      return false;
    }

    public boolean equals(querySheets_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(querySheets_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("querySheets_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class querySheets_resultStandardSchemeFactory implements SchemeFactory {
      public querySheets_resultStandardScheme getScheme() {
        return new querySheets_resultStandardScheme();
      }
    }

    private static class querySheets_resultStandardScheme extends StandardScheme<querySheets_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, querySheets_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new DataSheetQueryResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new com.wi.director.thrift.v1.common.SystemException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, querySheets_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class updateAttribute_args implements org.apache.thrift.TBase<updateAttribute_args, updateAttribute_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateAttribute_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateAttribute_args");

    private static final org.apache.thrift.protocol.TField TEMPLATE_SET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("templateSetId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ATTRIBUTE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("attributeId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("values", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField BEHAVE_FIELD_DESC = new org.apache.thrift.protocol.TField("behave", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateAttribute_argsStandardSchemeFactory());
    }

    public String templateSetId; // required
    public String attributeId; // required
    public List<com.wi.director.thrift.v1.abac.AbacAttributeValue> values; // required
    /**
     * 
     * @see com.wi.director.thrift.v1.abac.AttributeUploadBehaviour
     */
    public com.wi.director.thrift.v1.abac.AttributeUploadBehaviour behave; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TEMPLATE_SET_ID((short)1, "templateSetId"),
      ATTRIBUTE_ID((short)2, "attributeId"),
      VALUES((short)3, "values"),
      /**
       * 
       * @see com.wi.director.thrift.v1.abac.AttributeUploadBehaviour
       */
      BEHAVE((short)4, "behave");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TEMPLATE_SET_ID
            return TEMPLATE_SET_ID;
          case 2: // ATTRIBUTE_ID
            return ATTRIBUTE_ID;
          case 3: // VALUES
            return VALUES;
          case 4: // BEHAVE
            return BEHAVE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TEMPLATE_SET_ID, new org.apache.thrift.meta_data.FieldMetaData("templateSetId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "UUID")));
      tmpMap.put(_Fields.ATTRIBUTE_ID, new org.apache.thrift.meta_data.FieldMetaData("attributeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VALUES, new org.apache.thrift.meta_data.FieldMetaData("values", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.abac.AbacAttributeValue.class))));
      tmpMap.put(_Fields.BEHAVE, new org.apache.thrift.meta_data.FieldMetaData("behave", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.wi.director.thrift.v1.abac.AttributeUploadBehaviour.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateAttribute_args.class, metaDataMap);
    }

    public updateAttribute_args() {
    }

    public updateAttribute_args(
      String templateSetId,
      String attributeId,
      List<com.wi.director.thrift.v1.abac.AbacAttributeValue> values,
      com.wi.director.thrift.v1.abac.AttributeUploadBehaviour behave)
    {
      this();
      this.templateSetId = templateSetId;
      this.attributeId = attributeId;
      this.values = values;
      this.behave = behave;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateAttribute_args(updateAttribute_args other) {
      if (other.isSetTemplateSetId()) {
        this.templateSetId = other.templateSetId;
      }
      if (other.isSetAttributeId()) {
        this.attributeId = other.attributeId;
      }
      if (other.isSetValues()) {
        List<com.wi.director.thrift.v1.abac.AbacAttributeValue> __this__values = new ArrayList<com.wi.director.thrift.v1.abac.AbacAttributeValue>(other.values.size());
        for (com.wi.director.thrift.v1.abac.AbacAttributeValue other_element : other.values) {
          __this__values.add(new com.wi.director.thrift.v1.abac.AbacAttributeValue(other_element));
        }
        this.values = __this__values;
      }
      if (other.isSetBehave()) {
        this.behave = other.behave;
      }
    }

    public updateAttribute_args deepCopy() {
      return new updateAttribute_args(this);
    }

    @Override
    public void clear() {
      this.templateSetId = null;
      this.attributeId = null;
      this.values = null;
      this.behave = null;
    }

    public String getTemplateSetId() {
      return this.templateSetId;
    }

    public updateAttribute_args setTemplateSetId(String templateSetId) {
      this.templateSetId = templateSetId;
      return this;
    }

    public void unsetTemplateSetId() {
      this.templateSetId = null;
    }

    /** Returns true if field templateSetId is set (has been assigned a value) and false otherwise */
    public boolean isSetTemplateSetId() {
      return this.templateSetId != null;
    }

    public void setTemplateSetIdIsSet(boolean value) {
      if (!value) {
        this.templateSetId = null;
      }
    }

    public String getAttributeId() {
      return this.attributeId;
    }

    public updateAttribute_args setAttributeId(String attributeId) {
      this.attributeId = attributeId;
      return this;
    }

    public void unsetAttributeId() {
      this.attributeId = null;
    }

    /** Returns true if field attributeId is set (has been assigned a value) and false otherwise */
    public boolean isSetAttributeId() {
      return this.attributeId != null;
    }

    public void setAttributeIdIsSet(boolean value) {
      if (!value) {
        this.attributeId = null;
      }
    }

    public int getValuesSize() {
      return (this.values == null) ? 0 : this.values.size();
    }

    public java.util.Iterator<com.wi.director.thrift.v1.abac.AbacAttributeValue> getValuesIterator() {
      return (this.values == null) ? null : this.values.iterator();
    }

    public void addToValues(com.wi.director.thrift.v1.abac.AbacAttributeValue elem) {
      if (this.values == null) {
        this.values = new ArrayList<com.wi.director.thrift.v1.abac.AbacAttributeValue>();
      }
      this.values.add(elem);
    }

    public List<com.wi.director.thrift.v1.abac.AbacAttributeValue> getValues() {
      return this.values;
    }

    public updateAttribute_args setValues(List<com.wi.director.thrift.v1.abac.AbacAttributeValue> values) {
      this.values = values;
      return this;
    }

    public void unsetValues() {
      this.values = null;
    }

    /** Returns true if field values is set (has been assigned a value) and false otherwise */
    public boolean isSetValues() {
      return this.values != null;
    }

    public void setValuesIsSet(boolean value) {
      if (!value) {
        this.values = null;
      }
    }

    /**
     * 
     * @see com.wi.director.thrift.v1.abac.AttributeUploadBehaviour
     */
    public com.wi.director.thrift.v1.abac.AttributeUploadBehaviour getBehave() {
      return this.behave;
    }

    /**
     * 
     * @see com.wi.director.thrift.v1.abac.AttributeUploadBehaviour
     */
    public updateAttribute_args setBehave(com.wi.director.thrift.v1.abac.AttributeUploadBehaviour behave) {
      this.behave = behave;
      return this;
    }

    public void unsetBehave() {
      this.behave = null;
    }

    /** Returns true if field behave is set (has been assigned a value) and false otherwise */
    public boolean isSetBehave() {
      return this.behave != null;
    }

    public void setBehaveIsSet(boolean value) {
      if (!value) {
        this.behave = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TEMPLATE_SET_ID:
        if (value == null) {
          unsetTemplateSetId();
        } else {
          setTemplateSetId((String)value);
        }
        break;

      case ATTRIBUTE_ID:
        if (value == null) {
          unsetAttributeId();
        } else {
          setAttributeId((String)value);
        }
        break;

      case VALUES:
        if (value == null) {
          unsetValues();
        } else {
          setValues((List<com.wi.director.thrift.v1.abac.AbacAttributeValue>)value);
        }
        break;

      case BEHAVE:
        if (value == null) {
          unsetBehave();
        } else {
          setBehave((com.wi.director.thrift.v1.abac.AttributeUploadBehaviour)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TEMPLATE_SET_ID:
        return getTemplateSetId();

      case ATTRIBUTE_ID:
        return getAttributeId();

      case VALUES:
        return getValues();

      case BEHAVE:
        return getBehave();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TEMPLATE_SET_ID:
        return isSetTemplateSetId();
      case ATTRIBUTE_ID:
        return isSetAttributeId();
      case VALUES:
        return isSetValues();
      case BEHAVE:
        return isSetBehave();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateAttribute_args)
        return this.equals((updateAttribute_args)that);
      return false;
    }

    public boolean equals(updateAttribute_args that) {
      if (that == null)
        return false;

      boolean this_present_templateSetId = true && this.isSetTemplateSetId();
      boolean that_present_templateSetId = true && that.isSetTemplateSetId();
      if (this_present_templateSetId || that_present_templateSetId) {
        if (!(this_present_templateSetId && that_present_templateSetId))
          return false;
        if (!this.templateSetId.equals(that.templateSetId))
          return false;
      }

      boolean this_present_attributeId = true && this.isSetAttributeId();
      boolean that_present_attributeId = true && that.isSetAttributeId();
      if (this_present_attributeId || that_present_attributeId) {
        if (!(this_present_attributeId && that_present_attributeId))
          return false;
        if (!this.attributeId.equals(that.attributeId))
          return false;
      }

      boolean this_present_values = true && this.isSetValues();
      boolean that_present_values = true && that.isSetValues();
      if (this_present_values || that_present_values) {
        if (!(this_present_values && that_present_values))
          return false;
        if (!this.values.equals(that.values))
          return false;
      }

      boolean this_present_behave = true && this.isSetBehave();
      boolean that_present_behave = true && that.isSetBehave();
      if (this_present_behave || that_present_behave) {
        if (!(this_present_behave && that_present_behave))
          return false;
        if (!this.behave.equals(that.behave))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_templateSetId = true && (isSetTemplateSetId());
      list.add(present_templateSetId);
      if (present_templateSetId)
        list.add(templateSetId);

      boolean present_attributeId = true && (isSetAttributeId());
      list.add(present_attributeId);
      if (present_attributeId)
        list.add(attributeId);

      boolean present_values = true && (isSetValues());
      list.add(present_values);
      if (present_values)
        list.add(values);

      boolean present_behave = true && (isSetBehave());
      list.add(present_behave);
      if (present_behave)
        list.add(behave.getValue());

      return list.hashCode();
    }

    @Override
    public int compareTo(updateAttribute_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTemplateSetId()).compareTo(other.isSetTemplateSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTemplateSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.templateSetId, other.templateSetId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAttributeId()).compareTo(other.isSetAttributeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttributeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attributeId, other.attributeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetValues()).compareTo(other.isSetValues());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValues()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.values, other.values);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBehave()).compareTo(other.isSetBehave());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBehave()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.behave, other.behave);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateAttribute_args(");
      boolean first = true;

      sb.append("templateSetId:");
      if (this.templateSetId == null) {
        sb.append("null");
      } else {
        sb.append(this.templateSetId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("attributeId:");
      if (this.attributeId == null) {
        sb.append("null");
      } else {
        sb.append(this.attributeId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("values:");
      if (this.values == null) {
        sb.append("null");
      } else {
        sb.append(this.values);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("behave:");
      if (this.behave == null) {
        sb.append("null");
      } else {
        sb.append(this.behave);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateAttribute_argsStandardSchemeFactory implements SchemeFactory {
      public updateAttribute_argsStandardScheme getScheme() {
        return new updateAttribute_argsStandardScheme();
      }
    }

    private static class updateAttribute_argsStandardScheme extends StandardScheme<updateAttribute_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateAttribute_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TEMPLATE_SET_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.templateSetId = iprot.readString();
                struct.setTemplateSetIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ATTRIBUTE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.attributeId = iprot.readString();
                struct.setAttributeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // VALUES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list62 = iprot.readListBegin();
                  struct.values = new ArrayList<com.wi.director.thrift.v1.abac.AbacAttributeValue>(_list62.size);
                  com.wi.director.thrift.v1.abac.AbacAttributeValue _elem63;
                  for (int _i64 = 0; _i64 < _list62.size; ++_i64)
                  {
                    _elem63 = new com.wi.director.thrift.v1.abac.AbacAttributeValue();
                    _elem63.read(iprot);
                    struct.values.add(_elem63);
                  }
                  iprot.readListEnd();
                }
                struct.setValuesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // BEHAVE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.behave = com.wi.director.thrift.v1.abac.AttributeUploadBehaviour.findByValue(iprot.readI32());
                struct.setBehaveIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateAttribute_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.templateSetId != null) {
          oprot.writeFieldBegin(TEMPLATE_SET_ID_FIELD_DESC);
          oprot.writeString(struct.templateSetId);
          oprot.writeFieldEnd();
        }
        if (struct.attributeId != null) {
          oprot.writeFieldBegin(ATTRIBUTE_ID_FIELD_DESC);
          oprot.writeString(struct.attributeId);
          oprot.writeFieldEnd();
        }
        if (struct.values != null) {
          oprot.writeFieldBegin(VALUES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.values.size()));
            for (com.wi.director.thrift.v1.abac.AbacAttributeValue _iter65 : struct.values)
            {
              _iter65.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.behave != null) {
          oprot.writeFieldBegin(BEHAVE_FIELD_DESC);
          oprot.writeI32(struct.behave.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class updateAttribute_result implements org.apache.thrift.TBase<updateAttribute_result, updateAttribute_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateAttribute_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateAttribute_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateAttribute_resultStandardSchemeFactory());
    }

    public List<com.wi.director.thrift.v1.abac.AbacAttribute> success; // required
    public com.wi.director.thrift.v1.common.SystemException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.abac.AbacAttribute.class))));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateAttribute_result.class, metaDataMap);
    }

    public updateAttribute_result() {
    }

    public updateAttribute_result(
      List<com.wi.director.thrift.v1.abac.AbacAttribute> success,
      com.wi.director.thrift.v1.common.SystemException err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateAttribute_result(updateAttribute_result other) {
      if (other.isSetSuccess()) {
        List<com.wi.director.thrift.v1.abac.AbacAttribute> __this__success = new ArrayList<com.wi.director.thrift.v1.abac.AbacAttribute>(other.success.size());
        for (com.wi.director.thrift.v1.abac.AbacAttribute other_element : other.success) {
          __this__success.add(new com.wi.director.thrift.v1.abac.AbacAttribute(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetErr()) {
        this.err = new com.wi.director.thrift.v1.common.SystemException(other.err);
      }
    }

    public updateAttribute_result deepCopy() {
      return new updateAttribute_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.wi.director.thrift.v1.abac.AbacAttribute> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.wi.director.thrift.v1.abac.AbacAttribute elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.wi.director.thrift.v1.abac.AbacAttribute>();
      }
      this.success.add(elem);
    }

    public List<com.wi.director.thrift.v1.abac.AbacAttribute> getSuccess() {
      return this.success;
    }

    public updateAttribute_result setSuccess(List<com.wi.director.thrift.v1.abac.AbacAttribute> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.wi.director.thrift.v1.common.SystemException getErr() {
      return this.err;
    }

    public updateAttribute_result setErr(com.wi.director.thrift.v1.common.SystemException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.wi.director.thrift.v1.abac.AbacAttribute>)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((com.wi.director.thrift.v1.common.SystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateAttribute_result)
        return this.equals((updateAttribute_result)that);
      return false;
    }

    public boolean equals(updateAttribute_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateAttribute_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateAttribute_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateAttribute_resultStandardSchemeFactory implements SchemeFactory {
      public updateAttribute_resultStandardScheme getScheme() {
        return new updateAttribute_resultStandardScheme();
      }
    }

    private static class updateAttribute_resultStandardScheme extends StandardScheme<updateAttribute_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateAttribute_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list66 = iprot.readListBegin();
                  struct.success = new ArrayList<com.wi.director.thrift.v1.abac.AbacAttribute>(_list66.size);
                  com.wi.director.thrift.v1.abac.AbacAttribute _elem67;
                  for (int _i68 = 0; _i68 < _list66.size; ++_i68)
                  {
                    _elem67 = new com.wi.director.thrift.v1.abac.AbacAttribute();
                    _elem67.read(iprot);
                    struct.success.add(_elem67);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new com.wi.director.thrift.v1.common.SystemException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateAttribute_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.wi.director.thrift.v1.abac.AbacAttribute _iter69 : struct.success)
            {
              _iter69.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

}
