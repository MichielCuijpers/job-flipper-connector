/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wi.director.thrift.v1.job;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * Parts of a Job for creation
 */
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class JobModularParams implements org.apache.thrift.TBase<JobModularParams, JobModularParams._Fields>, java.io.Serializable, Cloneable, Comparable<JobModularParams> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("JobModularParams");

  private static final org.apache.thrift.protocol.TField TEAM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("teamId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PLANNED_START_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("plannedStartAt", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField SKIP_PLANNING_FIELD_DESC = new org.apache.thrift.protocol.TField("skipPlanning", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField TEMPLATE_REFS_FIELD_DESC = new org.apache.thrift.protocol.TField("templateRefs", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField USERS_FIELD_DESC = new org.apache.thrift.protocol.TField("users", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField PLANNERS_FIELD_DESC = new org.apache.thrift.protocol.TField("planners", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField DOCUMENT_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("documentIds", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField METADATA_ENTRIES_FIELD_DESC = new org.apache.thrift.protocol.TField("metadataEntries", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField TYP_FIELD_DESC = new org.apache.thrift.protocol.TField("typ", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField SRC_FIELD_DESC = new org.apache.thrift.protocol.TField("src", org.apache.thrift.protocol.TType.STRUCT, (short)11);
  private static final org.apache.thrift.protocol.TField PRIORITY_FIELD_DESC = new org.apache.thrift.protocol.TField("priority", org.apache.thrift.protocol.TType.STRUCT, (short)12);
  private static final org.apache.thrift.protocol.TField ATTRIBUTES_FIELD_DESC = new org.apache.thrift.protocol.TField("attributes", org.apache.thrift.protocol.TType.LIST, (short)13);
  private static final org.apache.thrift.protocol.TField PLANNED_START_JOB_ROLE_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("plannedStartJobRoleIds", org.apache.thrift.protocol.TType.LIST, (short)14);
  private static final org.apache.thrift.protocol.TField PLANNED_DATA_SHEET_IDS_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("plannedDataSheetIdsList", org.apache.thrift.protocol.TType.LIST, (short)15);
  private static final org.apache.thrift.protocol.TField ENABLE_MESH_FIELD_DESC = new org.apache.thrift.protocol.TField("enableMesh", org.apache.thrift.protocol.TType.BOOL, (short)20);
  private static final org.apache.thrift.protocol.TField DUP_JOB_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("dupJobId", org.apache.thrift.protocol.TType.STRING, (short)30);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new JobModularParamsStandardSchemeFactory());
  }

  public String teamId; // required
  public String title; // required
  public long plannedStartAt; // optional
  public boolean skipPlanning; // required
  public List<TemplateOrSetRef> templateRefs; // required
  public List<AddUserParams> users; // required
  public List<AddPlannerParams> planners; // required
  public List<String> documentIds; // required
  public List<com.wi.director.thrift.v1.metadata.MetadataEntry> metadataEntries; // required
  /**
   * 
   * @see JobType
   */
  public JobType typ; // required
  /**
   * If JobType is Issue, optionally specify a source of the issue. <br>
   * If job is an instance started from an AdHoc (on-demand) job, specify the source job. <br>
   * Currently, only accepting references down to the detail of a step/group. <br>
   */
  public com.wi.director.thrift.v1.messaging.JobPtr src; // optional
  public PriorityLevel priority; // optional
  public List<com.wi.director.thrift.v1.abac.AbacAttribute> attributes; // required
  /**
   * If JobType is AdHoc, this must be a non-empty, valid job role id list for
   * the user starting an ad hoc job to be assigned the following roles.
   * This is in addition to the roles already assigned to this user during planning.
   */
  public List<String> plannedStartJobRoleIds; // optional
  /**
   * Each entry in plannedDataSheetIds should correspond to an element in templateRefs, in and ordered, 1-to-1 fashion.
   * <br/>
   * Note that an element of templateRefs can be either a Template or a Template Set -- that is, multiple Templates.
   * <br/>
   * So while it's clear how to apply a plannedDataSheetIds element to a single Template, applying it to a Set goes as follows:
   * <br/>
   * The plannedDataSheetIds element will apply to all Templates in the Template Set.
   * <br/>
   * That means, if Template T1 references Data Sheet Set DS1, and Template T2 references Data Sheet Sets DS1 and DS2, then a Set of
   * {T1, T2} references DS1 and DS2.
   * <br/>
   * So for that Template Set, the plannedDataSheeIds element must have key-value pairs for both DS1 and DS2.
   * <br/>
   * Additionally, the selected Data Sheet Value for DS1 will apply to both T1 and T2.
   * 
   */
  public List<Map<String,String>> plannedDataSheetIdsList; // optional
  public boolean enableMesh; // optional
  /**
   * Job to duplicate from, currently only template ref values are being copied over, skipping the need for validation and reducing traffic
   */
  public String dupJobId; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TEAM_ID((short)1, "teamId"),
    TITLE((short)2, "title"),
    PLANNED_START_AT((short)3, "plannedStartAt"),
    SKIP_PLANNING((short)4, "skipPlanning"),
    TEMPLATE_REFS((short)5, "templateRefs"),
    USERS((short)6, "users"),
    PLANNERS((short)7, "planners"),
    DOCUMENT_IDS((short)8, "documentIds"),
    METADATA_ENTRIES((short)9, "metadataEntries"),
    /**
     * 
     * @see JobType
     */
    TYP((short)10, "typ"),
    /**
     * If JobType is Issue, optionally specify a source of the issue. <br>
     * If job is an instance started from an AdHoc (on-demand) job, specify the source job. <br>
     * Currently, only accepting references down to the detail of a step/group. <br>
     */
    SRC((short)11, "src"),
    PRIORITY((short)12, "priority"),
    ATTRIBUTES((short)13, "attributes"),
    /**
     * If JobType is AdHoc, this must be a non-empty, valid job role id list for
     * the user starting an ad hoc job to be assigned the following roles.
     * This is in addition to the roles already assigned to this user during planning.
     */
    PLANNED_START_JOB_ROLE_IDS((short)14, "plannedStartJobRoleIds"),
    /**
     * Each entry in plannedDataSheetIds should correspond to an element in templateRefs, in and ordered, 1-to-1 fashion.
     * <br/>
     * Note that an element of templateRefs can be either a Template or a Template Set -- that is, multiple Templates.
     * <br/>
     * So while it's clear how to apply a plannedDataSheetIds element to a single Template, applying it to a Set goes as follows:
     * <br/>
     * The plannedDataSheetIds element will apply to all Templates in the Template Set.
     * <br/>
     * That means, if Template T1 references Data Sheet Set DS1, and Template T2 references Data Sheet Sets DS1 and DS2, then a Set of
     * {T1, T2} references DS1 and DS2.
     * <br/>
     * So for that Template Set, the plannedDataSheeIds element must have key-value pairs for both DS1 and DS2.
     * <br/>
     * Additionally, the selected Data Sheet Value for DS1 will apply to both T1 and T2.
     * 
     */
    PLANNED_DATA_SHEET_IDS_LIST((short)15, "plannedDataSheetIdsList"),
    ENABLE_MESH((short)20, "enableMesh"),
    /**
     * Job to duplicate from, currently only template ref values are being copied over, skipping the need for validation and reducing traffic
     */
    DUP_JOB_ID((short)30, "dupJobId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TEAM_ID
          return TEAM_ID;
        case 2: // TITLE
          return TITLE;
        case 3: // PLANNED_START_AT
          return PLANNED_START_AT;
        case 4: // SKIP_PLANNING
          return SKIP_PLANNING;
        case 5: // TEMPLATE_REFS
          return TEMPLATE_REFS;
        case 6: // USERS
          return USERS;
        case 7: // PLANNERS
          return PLANNERS;
        case 8: // DOCUMENT_IDS
          return DOCUMENT_IDS;
        case 9: // METADATA_ENTRIES
          return METADATA_ENTRIES;
        case 10: // TYP
          return TYP;
        case 11: // SRC
          return SRC;
        case 12: // PRIORITY
          return PRIORITY;
        case 13: // ATTRIBUTES
          return ATTRIBUTES;
        case 14: // PLANNED_START_JOB_ROLE_IDS
          return PLANNED_START_JOB_ROLE_IDS;
        case 15: // PLANNED_DATA_SHEET_IDS_LIST
          return PLANNED_DATA_SHEET_IDS_LIST;
        case 20: // ENABLE_MESH
          return ENABLE_MESH;
        case 30: // DUP_JOB_ID
          return DUP_JOB_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PLANNEDSTARTAT_ISSET_ID = 0;
  private static final int __SKIPPLANNING_ISSET_ID = 1;
  private static final int __ENABLEMESH_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.PLANNED_START_AT,_Fields.SRC,_Fields.PRIORITY,_Fields.PLANNED_START_JOB_ROLE_IDS,_Fields.PLANNED_DATA_SHEET_IDS_LIST,_Fields.ENABLE_MESH,_Fields.DUP_JOB_ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TEAM_ID, new org.apache.thrift.meta_data.FieldMetaData("teamId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLANNED_START_AT, new org.apache.thrift.meta_data.FieldMetaData("plannedStartAt", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SKIP_PLANNING, new org.apache.thrift.meta_data.FieldMetaData("skipPlanning", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TEMPLATE_REFS, new org.apache.thrift.meta_data.FieldMetaData("templateRefs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TemplateOrSetRef.class))));
    tmpMap.put(_Fields.USERS, new org.apache.thrift.meta_data.FieldMetaData("users", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AddUserParams.class))));
    tmpMap.put(_Fields.PLANNERS, new org.apache.thrift.meta_data.FieldMetaData("planners", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AddPlannerParams.class))));
    tmpMap.put(_Fields.DOCUMENT_IDS, new org.apache.thrift.meta_data.FieldMetaData("documentIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.METADATA_ENTRIES, new org.apache.thrift.meta_data.FieldMetaData("metadataEntries", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.metadata.MetadataEntry.class))));
    tmpMap.put(_Fields.TYP, new org.apache.thrift.meta_data.FieldMetaData("typ", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, JobType.class)));
    tmpMap.put(_Fields.SRC, new org.apache.thrift.meta_data.FieldMetaData("src", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.messaging.JobPtr.class)));
    tmpMap.put(_Fields.PRIORITY, new org.apache.thrift.meta_data.FieldMetaData("priority", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PriorityLevel.class)));
    tmpMap.put(_Fields.ATTRIBUTES, new org.apache.thrift.meta_data.FieldMetaData("attributes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.abac.AbacAttribute.class))));
    tmpMap.put(_Fields.PLANNED_START_JOB_ROLE_IDS, new org.apache.thrift.meta_data.FieldMetaData("plannedStartJobRoleIds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.PLANNED_DATA_SHEET_IDS_LIST, new org.apache.thrift.meta_data.FieldMetaData("plannedDataSheetIdsList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
    tmpMap.put(_Fields.ENABLE_MESH, new org.apache.thrift.meta_data.FieldMetaData("enableMesh", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DUP_JOB_ID, new org.apache.thrift.meta_data.FieldMetaData("dupJobId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(JobModularParams.class, metaDataMap);
  }

  public JobModularParams() {
    this.skipPlanning = true;

  }

  public JobModularParams(
    String teamId,
    String title,
    boolean skipPlanning,
    List<TemplateOrSetRef> templateRefs,
    List<AddUserParams> users,
    List<AddPlannerParams> planners,
    List<String> documentIds,
    List<com.wi.director.thrift.v1.metadata.MetadataEntry> metadataEntries,
    JobType typ,
    List<com.wi.director.thrift.v1.abac.AbacAttribute> attributes)
  {
    this();
    this.teamId = teamId;
    this.title = title;
    this.skipPlanning = skipPlanning;
    setSkipPlanningIsSet(true);
    this.templateRefs = templateRefs;
    this.users = users;
    this.planners = planners;
    this.documentIds = documentIds;
    this.metadataEntries = metadataEntries;
    this.typ = typ;
    this.attributes = attributes;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public JobModularParams(JobModularParams other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTeamId()) {
      this.teamId = other.teamId;
    }
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    this.plannedStartAt = other.plannedStartAt;
    this.skipPlanning = other.skipPlanning;
    if (other.isSetTemplateRefs()) {
      List<TemplateOrSetRef> __this__templateRefs = new ArrayList<TemplateOrSetRef>(other.templateRefs.size());
      for (TemplateOrSetRef other_element : other.templateRefs) {
        __this__templateRefs.add(new TemplateOrSetRef(other_element));
      }
      this.templateRefs = __this__templateRefs;
    }
    if (other.isSetUsers()) {
      List<AddUserParams> __this__users = new ArrayList<AddUserParams>(other.users.size());
      for (AddUserParams other_element : other.users) {
        __this__users.add(new AddUserParams(other_element));
      }
      this.users = __this__users;
    }
    if (other.isSetPlanners()) {
      List<AddPlannerParams> __this__planners = new ArrayList<AddPlannerParams>(other.planners.size());
      for (AddPlannerParams other_element : other.planners) {
        __this__planners.add(new AddPlannerParams(other_element));
      }
      this.planners = __this__planners;
    }
    if (other.isSetDocumentIds()) {
      List<String> __this__documentIds = new ArrayList<String>(other.documentIds);
      this.documentIds = __this__documentIds;
    }
    if (other.isSetMetadataEntries()) {
      List<com.wi.director.thrift.v1.metadata.MetadataEntry> __this__metadataEntries = new ArrayList<com.wi.director.thrift.v1.metadata.MetadataEntry>(other.metadataEntries.size());
      for (com.wi.director.thrift.v1.metadata.MetadataEntry other_element : other.metadataEntries) {
        __this__metadataEntries.add(new com.wi.director.thrift.v1.metadata.MetadataEntry(other_element));
      }
      this.metadataEntries = __this__metadataEntries;
    }
    if (other.isSetTyp()) {
      this.typ = other.typ;
    }
    if (other.isSetSrc()) {
      this.src = new com.wi.director.thrift.v1.messaging.JobPtr(other.src);
    }
    if (other.isSetPriority()) {
      this.priority = new PriorityLevel(other.priority);
    }
    if (other.isSetAttributes()) {
      List<com.wi.director.thrift.v1.abac.AbacAttribute> __this__attributes = new ArrayList<com.wi.director.thrift.v1.abac.AbacAttribute>(other.attributes.size());
      for (com.wi.director.thrift.v1.abac.AbacAttribute other_element : other.attributes) {
        __this__attributes.add(new com.wi.director.thrift.v1.abac.AbacAttribute(other_element));
      }
      this.attributes = __this__attributes;
    }
    if (other.isSetPlannedStartJobRoleIds()) {
      List<String> __this__plannedStartJobRoleIds = new ArrayList<String>(other.plannedStartJobRoleIds);
      this.plannedStartJobRoleIds = __this__plannedStartJobRoleIds;
    }
    if (other.isSetPlannedDataSheetIdsList()) {
      List<Map<String,String>> __this__plannedDataSheetIdsList = new ArrayList<Map<String,String>>(other.plannedDataSheetIdsList.size());
      for (Map<String,String> other_element : other.plannedDataSheetIdsList) {
        Map<String,String> __this__plannedDataSheetIdsList_copy = new HashMap<String,String>(other_element);
        __this__plannedDataSheetIdsList.add(__this__plannedDataSheetIdsList_copy);
      }
      this.plannedDataSheetIdsList = __this__plannedDataSheetIdsList;
    }
    this.enableMesh = other.enableMesh;
    if (other.isSetDupJobId()) {
      this.dupJobId = other.dupJobId;
    }
  }

  public JobModularParams deepCopy() {
    return new JobModularParams(this);
  }

  @Override
  public void clear() {
    this.teamId = null;
    this.title = null;
    setPlannedStartAtIsSet(false);
    this.plannedStartAt = 0;
    this.skipPlanning = true;

    this.templateRefs = null;
    this.users = null;
    this.planners = null;
    this.documentIds = null;
    this.metadataEntries = null;
    this.typ = null;
    this.src = null;
    this.priority = null;
    this.attributes = null;
    this.plannedStartJobRoleIds = null;
    this.plannedDataSheetIdsList = null;
    setEnableMeshIsSet(false);
    this.enableMesh = false;
    this.dupJobId = null;
  }

  public String getTeamId() {
    return this.teamId;
  }

  public JobModularParams setTeamId(String teamId) {
    this.teamId = teamId;
    return this;
  }

  public void unsetTeamId() {
    this.teamId = null;
  }

  /** Returns true if field teamId is set (has been assigned a value) and false otherwise */
  public boolean isSetTeamId() {
    return this.teamId != null;
  }

  public void setTeamIdIsSet(boolean value) {
    if (!value) {
      this.teamId = null;
    }
  }

  public String getTitle() {
    return this.title;
  }

  public JobModularParams setTitle(String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public long getPlannedStartAt() {
    return this.plannedStartAt;
  }

  public JobModularParams setPlannedStartAt(long plannedStartAt) {
    this.plannedStartAt = plannedStartAt;
    setPlannedStartAtIsSet(true);
    return this;
  }

  public void unsetPlannedStartAt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PLANNEDSTARTAT_ISSET_ID);
  }

  /** Returns true if field plannedStartAt is set (has been assigned a value) and false otherwise */
  public boolean isSetPlannedStartAt() {
    return EncodingUtils.testBit(__isset_bitfield, __PLANNEDSTARTAT_ISSET_ID);
  }

  public void setPlannedStartAtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PLANNEDSTARTAT_ISSET_ID, value);
  }

  public boolean isSkipPlanning() {
    return this.skipPlanning;
  }

  public JobModularParams setSkipPlanning(boolean skipPlanning) {
    this.skipPlanning = skipPlanning;
    setSkipPlanningIsSet(true);
    return this;
  }

  public void unsetSkipPlanning() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SKIPPLANNING_ISSET_ID);
  }

  /** Returns true if field skipPlanning is set (has been assigned a value) and false otherwise */
  public boolean isSetSkipPlanning() {
    return EncodingUtils.testBit(__isset_bitfield, __SKIPPLANNING_ISSET_ID);
  }

  public void setSkipPlanningIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SKIPPLANNING_ISSET_ID, value);
  }

  public int getTemplateRefsSize() {
    return (this.templateRefs == null) ? 0 : this.templateRefs.size();
  }

  public java.util.Iterator<TemplateOrSetRef> getTemplateRefsIterator() {
    return (this.templateRefs == null) ? null : this.templateRefs.iterator();
  }

  public void addToTemplateRefs(TemplateOrSetRef elem) {
    if (this.templateRefs == null) {
      this.templateRefs = new ArrayList<TemplateOrSetRef>();
    }
    this.templateRefs.add(elem);
  }

  public List<TemplateOrSetRef> getTemplateRefs() {
    return this.templateRefs;
  }

  public JobModularParams setTemplateRefs(List<TemplateOrSetRef> templateRefs) {
    this.templateRefs = templateRefs;
    return this;
  }

  public void unsetTemplateRefs() {
    this.templateRefs = null;
  }

  /** Returns true if field templateRefs is set (has been assigned a value) and false otherwise */
  public boolean isSetTemplateRefs() {
    return this.templateRefs != null;
  }

  public void setTemplateRefsIsSet(boolean value) {
    if (!value) {
      this.templateRefs = null;
    }
  }

  public int getUsersSize() {
    return (this.users == null) ? 0 : this.users.size();
  }

  public java.util.Iterator<AddUserParams> getUsersIterator() {
    return (this.users == null) ? null : this.users.iterator();
  }

  public void addToUsers(AddUserParams elem) {
    if (this.users == null) {
      this.users = new ArrayList<AddUserParams>();
    }
    this.users.add(elem);
  }

  public List<AddUserParams> getUsers() {
    return this.users;
  }

  public JobModularParams setUsers(List<AddUserParams> users) {
    this.users = users;
    return this;
  }

  public void unsetUsers() {
    this.users = null;
  }

  /** Returns true if field users is set (has been assigned a value) and false otherwise */
  public boolean isSetUsers() {
    return this.users != null;
  }

  public void setUsersIsSet(boolean value) {
    if (!value) {
      this.users = null;
    }
  }

  public int getPlannersSize() {
    return (this.planners == null) ? 0 : this.planners.size();
  }

  public java.util.Iterator<AddPlannerParams> getPlannersIterator() {
    return (this.planners == null) ? null : this.planners.iterator();
  }

  public void addToPlanners(AddPlannerParams elem) {
    if (this.planners == null) {
      this.planners = new ArrayList<AddPlannerParams>();
    }
    this.planners.add(elem);
  }

  public List<AddPlannerParams> getPlanners() {
    return this.planners;
  }

  public JobModularParams setPlanners(List<AddPlannerParams> planners) {
    this.planners = planners;
    return this;
  }

  public void unsetPlanners() {
    this.planners = null;
  }

  /** Returns true if field planners is set (has been assigned a value) and false otherwise */
  public boolean isSetPlanners() {
    return this.planners != null;
  }

  public void setPlannersIsSet(boolean value) {
    if (!value) {
      this.planners = null;
    }
  }

  public int getDocumentIdsSize() {
    return (this.documentIds == null) ? 0 : this.documentIds.size();
  }

  public java.util.Iterator<String> getDocumentIdsIterator() {
    return (this.documentIds == null) ? null : this.documentIds.iterator();
  }

  public void addToDocumentIds(String elem) {
    if (this.documentIds == null) {
      this.documentIds = new ArrayList<String>();
    }
    this.documentIds.add(elem);
  }

  public List<String> getDocumentIds() {
    return this.documentIds;
  }

  public JobModularParams setDocumentIds(List<String> documentIds) {
    this.documentIds = documentIds;
    return this;
  }

  public void unsetDocumentIds() {
    this.documentIds = null;
  }

  /** Returns true if field documentIds is set (has been assigned a value) and false otherwise */
  public boolean isSetDocumentIds() {
    return this.documentIds != null;
  }

  public void setDocumentIdsIsSet(boolean value) {
    if (!value) {
      this.documentIds = null;
    }
  }

  public int getMetadataEntriesSize() {
    return (this.metadataEntries == null) ? 0 : this.metadataEntries.size();
  }

  public java.util.Iterator<com.wi.director.thrift.v1.metadata.MetadataEntry> getMetadataEntriesIterator() {
    return (this.metadataEntries == null) ? null : this.metadataEntries.iterator();
  }

  public void addToMetadataEntries(com.wi.director.thrift.v1.metadata.MetadataEntry elem) {
    if (this.metadataEntries == null) {
      this.metadataEntries = new ArrayList<com.wi.director.thrift.v1.metadata.MetadataEntry>();
    }
    this.metadataEntries.add(elem);
  }

  public List<com.wi.director.thrift.v1.metadata.MetadataEntry> getMetadataEntries() {
    return this.metadataEntries;
  }

  public JobModularParams setMetadataEntries(List<com.wi.director.thrift.v1.metadata.MetadataEntry> metadataEntries) {
    this.metadataEntries = metadataEntries;
    return this;
  }

  public void unsetMetadataEntries() {
    this.metadataEntries = null;
  }

  /** Returns true if field metadataEntries is set (has been assigned a value) and false otherwise */
  public boolean isSetMetadataEntries() {
    return this.metadataEntries != null;
  }

  public void setMetadataEntriesIsSet(boolean value) {
    if (!value) {
      this.metadataEntries = null;
    }
  }

  /**
   * 
   * @see JobType
   */
  public JobType getTyp() {
    return this.typ;
  }

  /**
   * 
   * @see JobType
   */
  public JobModularParams setTyp(JobType typ) {
    this.typ = typ;
    return this;
  }

  public void unsetTyp() {
    this.typ = null;
  }

  /** Returns true if field typ is set (has been assigned a value) and false otherwise */
  public boolean isSetTyp() {
    return this.typ != null;
  }

  public void setTypIsSet(boolean value) {
    if (!value) {
      this.typ = null;
    }
  }

  /**
   * If JobType is Issue, optionally specify a source of the issue. <br>
   * If job is an instance started from an AdHoc (on-demand) job, specify the source job. <br>
   * Currently, only accepting references down to the detail of a step/group. <br>
   */
  public com.wi.director.thrift.v1.messaging.JobPtr getSrc() {
    return this.src;
  }

  /**
   * If JobType is Issue, optionally specify a source of the issue. <br>
   * If job is an instance started from an AdHoc (on-demand) job, specify the source job. <br>
   * Currently, only accepting references down to the detail of a step/group. <br>
   */
  public JobModularParams setSrc(com.wi.director.thrift.v1.messaging.JobPtr src) {
    this.src = src;
    return this;
  }

  public void unsetSrc() {
    this.src = null;
  }

  /** Returns true if field src is set (has been assigned a value) and false otherwise */
  public boolean isSetSrc() {
    return this.src != null;
  }

  public void setSrcIsSet(boolean value) {
    if (!value) {
      this.src = null;
    }
  }

  public PriorityLevel getPriority() {
    return this.priority;
  }

  public JobModularParams setPriority(PriorityLevel priority) {
    this.priority = priority;
    return this;
  }

  public void unsetPriority() {
    this.priority = null;
  }

  /** Returns true if field priority is set (has been assigned a value) and false otherwise */
  public boolean isSetPriority() {
    return this.priority != null;
  }

  public void setPriorityIsSet(boolean value) {
    if (!value) {
      this.priority = null;
    }
  }

  public int getAttributesSize() {
    return (this.attributes == null) ? 0 : this.attributes.size();
  }

  public java.util.Iterator<com.wi.director.thrift.v1.abac.AbacAttribute> getAttributesIterator() {
    return (this.attributes == null) ? null : this.attributes.iterator();
  }

  public void addToAttributes(com.wi.director.thrift.v1.abac.AbacAttribute elem) {
    if (this.attributes == null) {
      this.attributes = new ArrayList<com.wi.director.thrift.v1.abac.AbacAttribute>();
    }
    this.attributes.add(elem);
  }

  public List<com.wi.director.thrift.v1.abac.AbacAttribute> getAttributes() {
    return this.attributes;
  }

  public JobModularParams setAttributes(List<com.wi.director.thrift.v1.abac.AbacAttribute> attributes) {
    this.attributes = attributes;
    return this;
  }

  public void unsetAttributes() {
    this.attributes = null;
  }

  /** Returns true if field attributes is set (has been assigned a value) and false otherwise */
  public boolean isSetAttributes() {
    return this.attributes != null;
  }

  public void setAttributesIsSet(boolean value) {
    if (!value) {
      this.attributes = null;
    }
  }

  public int getPlannedStartJobRoleIdsSize() {
    return (this.plannedStartJobRoleIds == null) ? 0 : this.plannedStartJobRoleIds.size();
  }

  public java.util.Iterator<String> getPlannedStartJobRoleIdsIterator() {
    return (this.plannedStartJobRoleIds == null) ? null : this.plannedStartJobRoleIds.iterator();
  }

  public void addToPlannedStartJobRoleIds(String elem) {
    if (this.plannedStartJobRoleIds == null) {
      this.plannedStartJobRoleIds = new ArrayList<String>();
    }
    this.plannedStartJobRoleIds.add(elem);
  }

  /**
   * If JobType is AdHoc, this must be a non-empty, valid job role id list for
   * the user starting an ad hoc job to be assigned the following roles.
   * This is in addition to the roles already assigned to this user during planning.
   */
  public List<String> getPlannedStartJobRoleIds() {
    return this.plannedStartJobRoleIds;
  }

  /**
   * If JobType is AdHoc, this must be a non-empty, valid job role id list for
   * the user starting an ad hoc job to be assigned the following roles.
   * This is in addition to the roles already assigned to this user during planning.
   */
  public JobModularParams setPlannedStartJobRoleIds(List<String> plannedStartJobRoleIds) {
    this.plannedStartJobRoleIds = plannedStartJobRoleIds;
    return this;
  }

  public void unsetPlannedStartJobRoleIds() {
    this.plannedStartJobRoleIds = null;
  }

  /** Returns true if field plannedStartJobRoleIds is set (has been assigned a value) and false otherwise */
  public boolean isSetPlannedStartJobRoleIds() {
    return this.plannedStartJobRoleIds != null;
  }

  public void setPlannedStartJobRoleIdsIsSet(boolean value) {
    if (!value) {
      this.plannedStartJobRoleIds = null;
    }
  }

  public int getPlannedDataSheetIdsListSize() {
    return (this.plannedDataSheetIdsList == null) ? 0 : this.plannedDataSheetIdsList.size();
  }

  public java.util.Iterator<Map<String,String>> getPlannedDataSheetIdsListIterator() {
    return (this.plannedDataSheetIdsList == null) ? null : this.plannedDataSheetIdsList.iterator();
  }

  public void addToPlannedDataSheetIdsList(Map<String,String> elem) {
    if (this.plannedDataSheetIdsList == null) {
      this.plannedDataSheetIdsList = new ArrayList<Map<String,String>>();
    }
    this.plannedDataSheetIdsList.add(elem);
  }

  /**
   * Each entry in plannedDataSheetIds should correspond to an element in templateRefs, in and ordered, 1-to-1 fashion.
   * <br/>
   * Note that an element of templateRefs can be either a Template or a Template Set -- that is, multiple Templates.
   * <br/>
   * So while it's clear how to apply a plannedDataSheetIds element to a single Template, applying it to a Set goes as follows:
   * <br/>
   * The plannedDataSheetIds element will apply to all Templates in the Template Set.
   * <br/>
   * That means, if Template T1 references Data Sheet Set DS1, and Template T2 references Data Sheet Sets DS1 and DS2, then a Set of
   * {T1, T2} references DS1 and DS2.
   * <br/>
   * So for that Template Set, the plannedDataSheeIds element must have key-value pairs for both DS1 and DS2.
   * <br/>
   * Additionally, the selected Data Sheet Value for DS1 will apply to both T1 and T2.
   * 
   */
  public List<Map<String,String>> getPlannedDataSheetIdsList() {
    return this.plannedDataSheetIdsList;
  }

  /**
   * Each entry in plannedDataSheetIds should correspond to an element in templateRefs, in and ordered, 1-to-1 fashion.
   * <br/>
   * Note that an element of templateRefs can be either a Template or a Template Set -- that is, multiple Templates.
   * <br/>
   * So while it's clear how to apply a plannedDataSheetIds element to a single Template, applying it to a Set goes as follows:
   * <br/>
   * The plannedDataSheetIds element will apply to all Templates in the Template Set.
   * <br/>
   * That means, if Template T1 references Data Sheet Set DS1, and Template T2 references Data Sheet Sets DS1 and DS2, then a Set of
   * {T1, T2} references DS1 and DS2.
   * <br/>
   * So for that Template Set, the plannedDataSheeIds element must have key-value pairs for both DS1 and DS2.
   * <br/>
   * Additionally, the selected Data Sheet Value for DS1 will apply to both T1 and T2.
   * 
   */
  public JobModularParams setPlannedDataSheetIdsList(List<Map<String,String>> plannedDataSheetIdsList) {
    this.plannedDataSheetIdsList = plannedDataSheetIdsList;
    return this;
  }

  public void unsetPlannedDataSheetIdsList() {
    this.plannedDataSheetIdsList = null;
  }

  /** Returns true if field plannedDataSheetIdsList is set (has been assigned a value) and false otherwise */
  public boolean isSetPlannedDataSheetIdsList() {
    return this.plannedDataSheetIdsList != null;
  }

  public void setPlannedDataSheetIdsListIsSet(boolean value) {
    if (!value) {
      this.plannedDataSheetIdsList = null;
    }
  }

  public boolean isEnableMesh() {
    return this.enableMesh;
  }

  public JobModularParams setEnableMesh(boolean enableMesh) {
    this.enableMesh = enableMesh;
    setEnableMeshIsSet(true);
    return this;
  }

  public void unsetEnableMesh() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENABLEMESH_ISSET_ID);
  }

  /** Returns true if field enableMesh is set (has been assigned a value) and false otherwise */
  public boolean isSetEnableMesh() {
    return EncodingUtils.testBit(__isset_bitfield, __ENABLEMESH_ISSET_ID);
  }

  public void setEnableMeshIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENABLEMESH_ISSET_ID, value);
  }

  /**
   * Job to duplicate from, currently only template ref values are being copied over, skipping the need for validation and reducing traffic
   */
  public String getDupJobId() {
    return this.dupJobId;
  }

  /**
   * Job to duplicate from, currently only template ref values are being copied over, skipping the need for validation and reducing traffic
   */
  public JobModularParams setDupJobId(String dupJobId) {
    this.dupJobId = dupJobId;
    return this;
  }

  public void unsetDupJobId() {
    this.dupJobId = null;
  }

  /** Returns true if field dupJobId is set (has been assigned a value) and false otherwise */
  public boolean isSetDupJobId() {
    return this.dupJobId != null;
  }

  public void setDupJobIdIsSet(boolean value) {
    if (!value) {
      this.dupJobId = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TEAM_ID:
      if (value == null) {
        unsetTeamId();
      } else {
        setTeamId((String)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((String)value);
      }
      break;

    case PLANNED_START_AT:
      if (value == null) {
        unsetPlannedStartAt();
      } else {
        setPlannedStartAt((Long)value);
      }
      break;

    case SKIP_PLANNING:
      if (value == null) {
        unsetSkipPlanning();
      } else {
        setSkipPlanning((Boolean)value);
      }
      break;

    case TEMPLATE_REFS:
      if (value == null) {
        unsetTemplateRefs();
      } else {
        setTemplateRefs((List<TemplateOrSetRef>)value);
      }
      break;

    case USERS:
      if (value == null) {
        unsetUsers();
      } else {
        setUsers((List<AddUserParams>)value);
      }
      break;

    case PLANNERS:
      if (value == null) {
        unsetPlanners();
      } else {
        setPlanners((List<AddPlannerParams>)value);
      }
      break;

    case DOCUMENT_IDS:
      if (value == null) {
        unsetDocumentIds();
      } else {
        setDocumentIds((List<String>)value);
      }
      break;

    case METADATA_ENTRIES:
      if (value == null) {
        unsetMetadataEntries();
      } else {
        setMetadataEntries((List<com.wi.director.thrift.v1.metadata.MetadataEntry>)value);
      }
      break;

    case TYP:
      if (value == null) {
        unsetTyp();
      } else {
        setTyp((JobType)value);
      }
      break;

    case SRC:
      if (value == null) {
        unsetSrc();
      } else {
        setSrc((com.wi.director.thrift.v1.messaging.JobPtr)value);
      }
      break;

    case PRIORITY:
      if (value == null) {
        unsetPriority();
      } else {
        setPriority((PriorityLevel)value);
      }
      break;

    case ATTRIBUTES:
      if (value == null) {
        unsetAttributes();
      } else {
        setAttributes((List<com.wi.director.thrift.v1.abac.AbacAttribute>)value);
      }
      break;

    case PLANNED_START_JOB_ROLE_IDS:
      if (value == null) {
        unsetPlannedStartJobRoleIds();
      } else {
        setPlannedStartJobRoleIds((List<String>)value);
      }
      break;

    case PLANNED_DATA_SHEET_IDS_LIST:
      if (value == null) {
        unsetPlannedDataSheetIdsList();
      } else {
        setPlannedDataSheetIdsList((List<Map<String,String>>)value);
      }
      break;

    case ENABLE_MESH:
      if (value == null) {
        unsetEnableMesh();
      } else {
        setEnableMesh((Boolean)value);
      }
      break;

    case DUP_JOB_ID:
      if (value == null) {
        unsetDupJobId();
      } else {
        setDupJobId((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TEAM_ID:
      return getTeamId();

    case TITLE:
      return getTitle();

    case PLANNED_START_AT:
      return getPlannedStartAt();

    case SKIP_PLANNING:
      return isSkipPlanning();

    case TEMPLATE_REFS:
      return getTemplateRefs();

    case USERS:
      return getUsers();

    case PLANNERS:
      return getPlanners();

    case DOCUMENT_IDS:
      return getDocumentIds();

    case METADATA_ENTRIES:
      return getMetadataEntries();

    case TYP:
      return getTyp();

    case SRC:
      return getSrc();

    case PRIORITY:
      return getPriority();

    case ATTRIBUTES:
      return getAttributes();

    case PLANNED_START_JOB_ROLE_IDS:
      return getPlannedStartJobRoleIds();

    case PLANNED_DATA_SHEET_IDS_LIST:
      return getPlannedDataSheetIdsList();

    case ENABLE_MESH:
      return isEnableMesh();

    case DUP_JOB_ID:
      return getDupJobId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TEAM_ID:
      return isSetTeamId();
    case TITLE:
      return isSetTitle();
    case PLANNED_START_AT:
      return isSetPlannedStartAt();
    case SKIP_PLANNING:
      return isSetSkipPlanning();
    case TEMPLATE_REFS:
      return isSetTemplateRefs();
    case USERS:
      return isSetUsers();
    case PLANNERS:
      return isSetPlanners();
    case DOCUMENT_IDS:
      return isSetDocumentIds();
    case METADATA_ENTRIES:
      return isSetMetadataEntries();
    case TYP:
      return isSetTyp();
    case SRC:
      return isSetSrc();
    case PRIORITY:
      return isSetPriority();
    case ATTRIBUTES:
      return isSetAttributes();
    case PLANNED_START_JOB_ROLE_IDS:
      return isSetPlannedStartJobRoleIds();
    case PLANNED_DATA_SHEET_IDS_LIST:
      return isSetPlannedDataSheetIdsList();
    case ENABLE_MESH:
      return isSetEnableMesh();
    case DUP_JOB_ID:
      return isSetDupJobId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof JobModularParams)
      return this.equals((JobModularParams)that);
    return false;
  }

  public boolean equals(JobModularParams that) {
    if (that == null)
      return false;

    boolean this_present_teamId = true && this.isSetTeamId();
    boolean that_present_teamId = true && that.isSetTeamId();
    if (this_present_teamId || that_present_teamId) {
      if (!(this_present_teamId && that_present_teamId))
        return false;
      if (!this.teamId.equals(that.teamId))
        return false;
    }

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_plannedStartAt = true && this.isSetPlannedStartAt();
    boolean that_present_plannedStartAt = true && that.isSetPlannedStartAt();
    if (this_present_plannedStartAt || that_present_plannedStartAt) {
      if (!(this_present_plannedStartAt && that_present_plannedStartAt))
        return false;
      if (this.plannedStartAt != that.plannedStartAt)
        return false;
    }

    boolean this_present_skipPlanning = true;
    boolean that_present_skipPlanning = true;
    if (this_present_skipPlanning || that_present_skipPlanning) {
      if (!(this_present_skipPlanning && that_present_skipPlanning))
        return false;
      if (this.skipPlanning != that.skipPlanning)
        return false;
    }

    boolean this_present_templateRefs = true && this.isSetTemplateRefs();
    boolean that_present_templateRefs = true && that.isSetTemplateRefs();
    if (this_present_templateRefs || that_present_templateRefs) {
      if (!(this_present_templateRefs && that_present_templateRefs))
        return false;
      if (!this.templateRefs.equals(that.templateRefs))
        return false;
    }

    boolean this_present_users = true && this.isSetUsers();
    boolean that_present_users = true && that.isSetUsers();
    if (this_present_users || that_present_users) {
      if (!(this_present_users && that_present_users))
        return false;
      if (!this.users.equals(that.users))
        return false;
    }

    boolean this_present_planners = true && this.isSetPlanners();
    boolean that_present_planners = true && that.isSetPlanners();
    if (this_present_planners || that_present_planners) {
      if (!(this_present_planners && that_present_planners))
        return false;
      if (!this.planners.equals(that.planners))
        return false;
    }

    boolean this_present_documentIds = true && this.isSetDocumentIds();
    boolean that_present_documentIds = true && that.isSetDocumentIds();
    if (this_present_documentIds || that_present_documentIds) {
      if (!(this_present_documentIds && that_present_documentIds))
        return false;
      if (!this.documentIds.equals(that.documentIds))
        return false;
    }

    boolean this_present_metadataEntries = true && this.isSetMetadataEntries();
    boolean that_present_metadataEntries = true && that.isSetMetadataEntries();
    if (this_present_metadataEntries || that_present_metadataEntries) {
      if (!(this_present_metadataEntries && that_present_metadataEntries))
        return false;
      if (!this.metadataEntries.equals(that.metadataEntries))
        return false;
    }

    boolean this_present_typ = true && this.isSetTyp();
    boolean that_present_typ = true && that.isSetTyp();
    if (this_present_typ || that_present_typ) {
      if (!(this_present_typ && that_present_typ))
        return false;
      if (!this.typ.equals(that.typ))
        return false;
    }

    boolean this_present_src = true && this.isSetSrc();
    boolean that_present_src = true && that.isSetSrc();
    if (this_present_src || that_present_src) {
      if (!(this_present_src && that_present_src))
        return false;
      if (!this.src.equals(that.src))
        return false;
    }

    boolean this_present_priority = true && this.isSetPriority();
    boolean that_present_priority = true && that.isSetPriority();
    if (this_present_priority || that_present_priority) {
      if (!(this_present_priority && that_present_priority))
        return false;
      if (!this.priority.equals(that.priority))
        return false;
    }

    boolean this_present_attributes = true && this.isSetAttributes();
    boolean that_present_attributes = true && that.isSetAttributes();
    if (this_present_attributes || that_present_attributes) {
      if (!(this_present_attributes && that_present_attributes))
        return false;
      if (!this.attributes.equals(that.attributes))
        return false;
    }

    boolean this_present_plannedStartJobRoleIds = true && this.isSetPlannedStartJobRoleIds();
    boolean that_present_plannedStartJobRoleIds = true && that.isSetPlannedStartJobRoleIds();
    if (this_present_plannedStartJobRoleIds || that_present_plannedStartJobRoleIds) {
      if (!(this_present_plannedStartJobRoleIds && that_present_plannedStartJobRoleIds))
        return false;
      if (!this.plannedStartJobRoleIds.equals(that.plannedStartJobRoleIds))
        return false;
    }

    boolean this_present_plannedDataSheetIdsList = true && this.isSetPlannedDataSheetIdsList();
    boolean that_present_plannedDataSheetIdsList = true && that.isSetPlannedDataSheetIdsList();
    if (this_present_plannedDataSheetIdsList || that_present_plannedDataSheetIdsList) {
      if (!(this_present_plannedDataSheetIdsList && that_present_plannedDataSheetIdsList))
        return false;
      if (!this.plannedDataSheetIdsList.equals(that.plannedDataSheetIdsList))
        return false;
    }

    boolean this_present_enableMesh = true && this.isSetEnableMesh();
    boolean that_present_enableMesh = true && that.isSetEnableMesh();
    if (this_present_enableMesh || that_present_enableMesh) {
      if (!(this_present_enableMesh && that_present_enableMesh))
        return false;
      if (this.enableMesh != that.enableMesh)
        return false;
    }

    boolean this_present_dupJobId = true && this.isSetDupJobId();
    boolean that_present_dupJobId = true && that.isSetDupJobId();
    if (this_present_dupJobId || that_present_dupJobId) {
      if (!(this_present_dupJobId && that_present_dupJobId))
        return false;
      if (!this.dupJobId.equals(that.dupJobId))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_teamId = true && (isSetTeamId());
    list.add(present_teamId);
    if (present_teamId)
      list.add(teamId);

    boolean present_title = true && (isSetTitle());
    list.add(present_title);
    if (present_title)
      list.add(title);

    boolean present_plannedStartAt = true && (isSetPlannedStartAt());
    list.add(present_plannedStartAt);
    if (present_plannedStartAt)
      list.add(plannedStartAt);

    boolean present_skipPlanning = true;
    list.add(present_skipPlanning);
    if (present_skipPlanning)
      list.add(skipPlanning);

    boolean present_templateRefs = true && (isSetTemplateRefs());
    list.add(present_templateRefs);
    if (present_templateRefs)
      list.add(templateRefs);

    boolean present_users = true && (isSetUsers());
    list.add(present_users);
    if (present_users)
      list.add(users);

    boolean present_planners = true && (isSetPlanners());
    list.add(present_planners);
    if (present_planners)
      list.add(planners);

    boolean present_documentIds = true && (isSetDocumentIds());
    list.add(present_documentIds);
    if (present_documentIds)
      list.add(documentIds);

    boolean present_metadataEntries = true && (isSetMetadataEntries());
    list.add(present_metadataEntries);
    if (present_metadataEntries)
      list.add(metadataEntries);

    boolean present_typ = true && (isSetTyp());
    list.add(present_typ);
    if (present_typ)
      list.add(typ.getValue());

    boolean present_src = true && (isSetSrc());
    list.add(present_src);
    if (present_src)
      list.add(src);

    boolean present_priority = true && (isSetPriority());
    list.add(present_priority);
    if (present_priority)
      list.add(priority);

    boolean present_attributes = true && (isSetAttributes());
    list.add(present_attributes);
    if (present_attributes)
      list.add(attributes);

    boolean present_plannedStartJobRoleIds = true && (isSetPlannedStartJobRoleIds());
    list.add(present_plannedStartJobRoleIds);
    if (present_plannedStartJobRoleIds)
      list.add(plannedStartJobRoleIds);

    boolean present_plannedDataSheetIdsList = true && (isSetPlannedDataSheetIdsList());
    list.add(present_plannedDataSheetIdsList);
    if (present_plannedDataSheetIdsList)
      list.add(plannedDataSheetIdsList);

    boolean present_enableMesh = true && (isSetEnableMesh());
    list.add(present_enableMesh);
    if (present_enableMesh)
      list.add(enableMesh);

    boolean present_dupJobId = true && (isSetDupJobId());
    list.add(present_dupJobId);
    if (present_dupJobId)
      list.add(dupJobId);

    return list.hashCode();
  }

  @Override
  public int compareTo(JobModularParams other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTeamId()).compareTo(other.isSetTeamId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeamId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teamId, other.teamId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTitle()).compareTo(other.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlannedStartAt()).compareTo(other.isSetPlannedStartAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlannedStartAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.plannedStartAt, other.plannedStartAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSkipPlanning()).compareTo(other.isSetSkipPlanning());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSkipPlanning()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.skipPlanning, other.skipPlanning);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTemplateRefs()).compareTo(other.isSetTemplateRefs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTemplateRefs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.templateRefs, other.templateRefs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUsers()).compareTo(other.isSetUsers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.users, other.users);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlanners()).compareTo(other.isSetPlanners());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlanners()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.planners, other.planners);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDocumentIds()).compareTo(other.isSetDocumentIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDocumentIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.documentIds, other.documentIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMetadataEntries()).compareTo(other.isSetMetadataEntries());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMetadataEntries()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metadataEntries, other.metadataEntries);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTyp()).compareTo(other.isSetTyp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTyp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.typ, other.typ);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSrc()).compareTo(other.isSetSrc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSrc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src, other.src);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPriority()).compareTo(other.isSetPriority());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPriority()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priority, other.priority);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAttributes()).compareTo(other.isSetAttributes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAttributes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attributes, other.attributes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlannedStartJobRoleIds()).compareTo(other.isSetPlannedStartJobRoleIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlannedStartJobRoleIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.plannedStartJobRoleIds, other.plannedStartJobRoleIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlannedDataSheetIdsList()).compareTo(other.isSetPlannedDataSheetIdsList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlannedDataSheetIdsList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.plannedDataSheetIdsList, other.plannedDataSheetIdsList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEnableMesh()).compareTo(other.isSetEnableMesh());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnableMesh()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enableMesh, other.enableMesh);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDupJobId()).compareTo(other.isSetDupJobId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDupJobId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dupJobId, other.dupJobId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("JobModularParams(");
    boolean first = true;

    sb.append("teamId:");
    if (this.teamId == null) {
      sb.append("null");
    } else {
      sb.append(this.teamId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("title:");
    if (this.title == null) {
      sb.append("null");
    } else {
      sb.append(this.title);
    }
    first = false;
    if (isSetPlannedStartAt()) {
      if (!first) sb.append(", ");
      sb.append("plannedStartAt:");
      sb.append(this.plannedStartAt);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("skipPlanning:");
    sb.append(this.skipPlanning);
    first = false;
    if (!first) sb.append(", ");
    sb.append("templateRefs:");
    if (this.templateRefs == null) {
      sb.append("null");
    } else {
      sb.append(this.templateRefs);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("users:");
    if (this.users == null) {
      sb.append("null");
    } else {
      sb.append(this.users);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("planners:");
    if (this.planners == null) {
      sb.append("null");
    } else {
      sb.append(this.planners);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("documentIds:");
    if (this.documentIds == null) {
      sb.append("null");
    } else {
      sb.append(this.documentIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("metadataEntries:");
    if (this.metadataEntries == null) {
      sb.append("null");
    } else {
      sb.append(this.metadataEntries);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("typ:");
    if (this.typ == null) {
      sb.append("null");
    } else {
      sb.append(this.typ);
    }
    first = false;
    if (isSetSrc()) {
      if (!first) sb.append(", ");
      sb.append("src:");
      if (this.src == null) {
        sb.append("null");
      } else {
        sb.append(this.src);
      }
      first = false;
    }
    if (isSetPriority()) {
      if (!first) sb.append(", ");
      sb.append("priority:");
      if (this.priority == null) {
        sb.append("null");
      } else {
        sb.append(this.priority);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("attributes:");
    if (this.attributes == null) {
      sb.append("null");
    } else {
      sb.append(this.attributes);
    }
    first = false;
    if (isSetPlannedStartJobRoleIds()) {
      if (!first) sb.append(", ");
      sb.append("plannedStartJobRoleIds:");
      if (this.plannedStartJobRoleIds == null) {
        sb.append("null");
      } else {
        sb.append(this.plannedStartJobRoleIds);
      }
      first = false;
    }
    if (isSetPlannedDataSheetIdsList()) {
      if (!first) sb.append(", ");
      sb.append("plannedDataSheetIdsList:");
      if (this.plannedDataSheetIdsList == null) {
        sb.append("null");
      } else {
        sb.append(this.plannedDataSheetIdsList);
      }
      first = false;
    }
    if (isSetEnableMesh()) {
      if (!first) sb.append(", ");
      sb.append("enableMesh:");
      sb.append(this.enableMesh);
      first = false;
    }
    if (isSetDupJobId()) {
      if (!first) sb.append(", ");
      sb.append("dupJobId:");
      if (this.dupJobId == null) {
        sb.append("null");
      } else {
        sb.append(this.dupJobId);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (src != null) {
      src.validate();
    }
    if (priority != null) {
      priority.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class JobModularParamsStandardSchemeFactory implements SchemeFactory {
    public JobModularParamsStandardScheme getScheme() {
      return new JobModularParamsStandardScheme();
    }
  }

  private static class JobModularParamsStandardScheme extends StandardScheme<JobModularParams> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, JobModularParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TEAM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.teamId = iprot.readString();
              struct.setTeamIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PLANNED_START_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.plannedStartAt = iprot.readI64();
              struct.setPlannedStartAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SKIP_PLANNING
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.skipPlanning = iprot.readBool();
              struct.setSkipPlanningIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TEMPLATE_REFS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list4 = iprot.readListBegin();
                struct.templateRefs = new ArrayList<TemplateOrSetRef>(_list4.size);
                TemplateOrSetRef _elem5;
                for (int _i6 = 0; _i6 < _list4.size; ++_i6)
                {
                  _elem5 = new TemplateOrSetRef();
                  _elem5.read(iprot);
                  struct.templateRefs.add(_elem5);
                }
                iprot.readListEnd();
              }
              struct.setTemplateRefsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // USERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list7 = iprot.readListBegin();
                struct.users = new ArrayList<AddUserParams>(_list7.size);
                AddUserParams _elem8;
                for (int _i9 = 0; _i9 < _list7.size; ++_i9)
                {
                  _elem8 = new AddUserParams();
                  _elem8.read(iprot);
                  struct.users.add(_elem8);
                }
                iprot.readListEnd();
              }
              struct.setUsersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PLANNERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list10 = iprot.readListBegin();
                struct.planners = new ArrayList<AddPlannerParams>(_list10.size);
                AddPlannerParams _elem11;
                for (int _i12 = 0; _i12 < _list10.size; ++_i12)
                {
                  _elem11 = new AddPlannerParams();
                  _elem11.read(iprot);
                  struct.planners.add(_elem11);
                }
                iprot.readListEnd();
              }
              struct.setPlannersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DOCUMENT_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list13 = iprot.readListBegin();
                struct.documentIds = new ArrayList<String>(_list13.size);
                String _elem14;
                for (int _i15 = 0; _i15 < _list13.size; ++_i15)
                {
                  _elem14 = iprot.readString();
                  struct.documentIds.add(_elem14);
                }
                iprot.readListEnd();
              }
              struct.setDocumentIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // METADATA_ENTRIES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.metadataEntries = new ArrayList<com.wi.director.thrift.v1.metadata.MetadataEntry>(_list16.size);
                com.wi.director.thrift.v1.metadata.MetadataEntry _elem17;
                for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                {
                  _elem17 = new com.wi.director.thrift.v1.metadata.MetadataEntry();
                  _elem17.read(iprot);
                  struct.metadataEntries.add(_elem17);
                }
                iprot.readListEnd();
              }
              struct.setMetadataEntriesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // TYP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.typ = com.wi.director.thrift.v1.job.JobType.findByValue(iprot.readI32());
              struct.setTypIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SRC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.src = new com.wi.director.thrift.v1.messaging.JobPtr();
              struct.src.read(iprot);
              struct.setSrcIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // PRIORITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.priority = new PriorityLevel();
              struct.priority.read(iprot);
              struct.setPriorityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // ATTRIBUTES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list19 = iprot.readListBegin();
                struct.attributes = new ArrayList<com.wi.director.thrift.v1.abac.AbacAttribute>(_list19.size);
                com.wi.director.thrift.v1.abac.AbacAttribute _elem20;
                for (int _i21 = 0; _i21 < _list19.size; ++_i21)
                {
                  _elem20 = new com.wi.director.thrift.v1.abac.AbacAttribute();
                  _elem20.read(iprot);
                  struct.attributes.add(_elem20);
                }
                iprot.readListEnd();
              }
              struct.setAttributesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // PLANNED_START_JOB_ROLE_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list22 = iprot.readListBegin();
                struct.plannedStartJobRoleIds = new ArrayList<String>(_list22.size);
                String _elem23;
                for (int _i24 = 0; _i24 < _list22.size; ++_i24)
                {
                  _elem23 = iprot.readString();
                  struct.plannedStartJobRoleIds.add(_elem23);
                }
                iprot.readListEnd();
              }
              struct.setPlannedStartJobRoleIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // PLANNED_DATA_SHEET_IDS_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list25 = iprot.readListBegin();
                struct.plannedDataSheetIdsList = new ArrayList<Map<String,String>>(_list25.size);
                Map<String,String> _elem26;
                for (int _i27 = 0; _i27 < _list25.size; ++_i27)
                {
                  {
                    org.apache.thrift.protocol.TMap _map28 = iprot.readMapBegin();
                    _elem26 = new HashMap<String,String>(2*_map28.size);
                    String _key29;
                    String _val30;
                    for (int _i31 = 0; _i31 < _map28.size; ++_i31)
                    {
                      _key29 = iprot.readString();
                      _val30 = iprot.readString();
                      _elem26.put(_key29, _val30);
                    }
                    iprot.readMapEnd();
                  }
                  struct.plannedDataSheetIdsList.add(_elem26);
                }
                iprot.readListEnd();
              }
              struct.setPlannedDataSheetIdsListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // ENABLE_MESH
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.enableMesh = iprot.readBool();
              struct.setEnableMeshIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // DUP_JOB_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dupJobId = iprot.readString();
              struct.setDupJobIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, JobModularParams struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.teamId != null) {
        oprot.writeFieldBegin(TEAM_ID_FIELD_DESC);
        oprot.writeString(struct.teamId);
        oprot.writeFieldEnd();
      }
      if (struct.title != null) {
        oprot.writeFieldBegin(TITLE_FIELD_DESC);
        oprot.writeString(struct.title);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPlannedStartAt()) {
        oprot.writeFieldBegin(PLANNED_START_AT_FIELD_DESC);
        oprot.writeI64(struct.plannedStartAt);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SKIP_PLANNING_FIELD_DESC);
      oprot.writeBool(struct.skipPlanning);
      oprot.writeFieldEnd();
      if (struct.templateRefs != null) {
        oprot.writeFieldBegin(TEMPLATE_REFS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.templateRefs.size()));
          for (TemplateOrSetRef _iter32 : struct.templateRefs)
          {
            _iter32.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.users != null) {
        oprot.writeFieldBegin(USERS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.users.size()));
          for (AddUserParams _iter33 : struct.users)
          {
            _iter33.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.planners != null) {
        oprot.writeFieldBegin(PLANNERS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.planners.size()));
          for (AddPlannerParams _iter34 : struct.planners)
          {
            _iter34.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.documentIds != null) {
        oprot.writeFieldBegin(DOCUMENT_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.documentIds.size()));
          for (String _iter35 : struct.documentIds)
          {
            oprot.writeString(_iter35);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.metadataEntries != null) {
        oprot.writeFieldBegin(METADATA_ENTRIES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.metadataEntries.size()));
          for (com.wi.director.thrift.v1.metadata.MetadataEntry _iter36 : struct.metadataEntries)
          {
            _iter36.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.typ != null) {
        oprot.writeFieldBegin(TYP_FIELD_DESC);
        oprot.writeI32(struct.typ.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.src != null) {
        if (struct.isSetSrc()) {
          oprot.writeFieldBegin(SRC_FIELD_DESC);
          struct.src.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.priority != null) {
        if (struct.isSetPriority()) {
          oprot.writeFieldBegin(PRIORITY_FIELD_DESC);
          struct.priority.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.attributes != null) {
        oprot.writeFieldBegin(ATTRIBUTES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.attributes.size()));
          for (com.wi.director.thrift.v1.abac.AbacAttribute _iter37 : struct.attributes)
          {
            _iter37.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.plannedStartJobRoleIds != null) {
        if (struct.isSetPlannedStartJobRoleIds()) {
          oprot.writeFieldBegin(PLANNED_START_JOB_ROLE_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.plannedStartJobRoleIds.size()));
            for (String _iter38 : struct.plannedStartJobRoleIds)
            {
              oprot.writeString(_iter38);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.plannedDataSheetIdsList != null) {
        if (struct.isSetPlannedDataSheetIdsList()) {
          oprot.writeFieldBegin(PLANNED_DATA_SHEET_IDS_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, struct.plannedDataSheetIdsList.size()));
            for (Map<String,String> _iter39 : struct.plannedDataSheetIdsList)
            {
              {
                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, _iter39.size()));
                for (Map.Entry<String, String> _iter40 : _iter39.entrySet())
                {
                  oprot.writeString(_iter40.getKey());
                  oprot.writeString(_iter40.getValue());
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetEnableMesh()) {
        oprot.writeFieldBegin(ENABLE_MESH_FIELD_DESC);
        oprot.writeBool(struct.enableMesh);
        oprot.writeFieldEnd();
      }
      if (struct.dupJobId != null) {
        if (struct.isSetDupJobId()) {
          oprot.writeFieldBegin(DUP_JOB_ID_FIELD_DESC);
          oprot.writeString(struct.dupJobId);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

}

