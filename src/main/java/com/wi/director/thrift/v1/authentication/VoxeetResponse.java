/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wi.director.thrift.v1.authentication;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * NOHTML
 */
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class VoxeetResponse implements org.apache.thrift.TBase<VoxeetResponse, VoxeetResponse._Fields>, java.io.Serializable, Cloneable, Comparable<VoxeetResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("VoxeetResponse");

  private static final org.apache.thrift.protocol.TField TOKEN_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("token_type", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("access_token", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField REFRESH_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("refresh_token", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField EXPIRES_IN_FIELD_DESC = new org.apache.thrift.protocol.TField("expires_in", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new VoxeetResponseStandardSchemeFactory());
  }

  public String token_type; // required
  public String access_token; // required
  public String refresh_token; // required
  public int expires_in; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TOKEN_TYPE((short)1, "token_type"),
    ACCESS_TOKEN((short)2, "access_token"),
    REFRESH_TOKEN((short)3, "refresh_token"),
    EXPIRES_IN((short)4, "expires_in");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TOKEN_TYPE
          return TOKEN_TYPE;
        case 2: // ACCESS_TOKEN
          return ACCESS_TOKEN;
        case 3: // REFRESH_TOKEN
          return REFRESH_TOKEN;
        case 4: // EXPIRES_IN
          return EXPIRES_IN;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __EXPIRES_IN_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TOKEN_TYPE, new org.apache.thrift.meta_data.FieldMetaData("token_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("access_token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REFRESH_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("refresh_token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXPIRES_IN, new org.apache.thrift.meta_data.FieldMetaData("expires_in", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(VoxeetResponse.class, metaDataMap);
  }

  public VoxeetResponse() {
  }

  public VoxeetResponse(
    String token_type,
    String access_token,
    String refresh_token,
    int expires_in)
  {
    this();
    this.token_type = token_type;
    this.access_token = access_token;
    this.refresh_token = refresh_token;
    this.expires_in = expires_in;
    setExpires_inIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public VoxeetResponse(VoxeetResponse other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetToken_type()) {
      this.token_type = other.token_type;
    }
    if (other.isSetAccess_token()) {
      this.access_token = other.access_token;
    }
    if (other.isSetRefresh_token()) {
      this.refresh_token = other.refresh_token;
    }
    this.expires_in = other.expires_in;
  }

  public VoxeetResponse deepCopy() {
    return new VoxeetResponse(this);
  }

  @Override
  public void clear() {
    this.token_type = null;
    this.access_token = null;
    this.refresh_token = null;
    setExpires_inIsSet(false);
    this.expires_in = 0;
  }

  public String getToken_type() {
    return this.token_type;
  }

  public VoxeetResponse setToken_type(String token_type) {
    this.token_type = token_type;
    return this;
  }

  public void unsetToken_type() {
    this.token_type = null;
  }

  /** Returns true if field token_type is set (has been assigned a value) and false otherwise */
  public boolean isSetToken_type() {
    return this.token_type != null;
  }

  public void setToken_typeIsSet(boolean value) {
    if (!value) {
      this.token_type = null;
    }
  }

  public String getAccess_token() {
    return this.access_token;
  }

  public VoxeetResponse setAccess_token(String access_token) {
    this.access_token = access_token;
    return this;
  }

  public void unsetAccess_token() {
    this.access_token = null;
  }

  /** Returns true if field access_token is set (has been assigned a value) and false otherwise */
  public boolean isSetAccess_token() {
    return this.access_token != null;
  }

  public void setAccess_tokenIsSet(boolean value) {
    if (!value) {
      this.access_token = null;
    }
  }

  public String getRefresh_token() {
    return this.refresh_token;
  }

  public VoxeetResponse setRefresh_token(String refresh_token) {
    this.refresh_token = refresh_token;
    return this;
  }

  public void unsetRefresh_token() {
    this.refresh_token = null;
  }

  /** Returns true if field refresh_token is set (has been assigned a value) and false otherwise */
  public boolean isSetRefresh_token() {
    return this.refresh_token != null;
  }

  public void setRefresh_tokenIsSet(boolean value) {
    if (!value) {
      this.refresh_token = null;
    }
  }

  public int getExpires_in() {
    return this.expires_in;
  }

  public VoxeetResponse setExpires_in(int expires_in) {
    this.expires_in = expires_in;
    setExpires_inIsSet(true);
    return this;
  }

  public void unsetExpires_in() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXPIRES_IN_ISSET_ID);
  }

  /** Returns true if field expires_in is set (has been assigned a value) and false otherwise */
  public boolean isSetExpires_in() {
    return EncodingUtils.testBit(__isset_bitfield, __EXPIRES_IN_ISSET_ID);
  }

  public void setExpires_inIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXPIRES_IN_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TOKEN_TYPE:
      if (value == null) {
        unsetToken_type();
      } else {
        setToken_type((String)value);
      }
      break;

    case ACCESS_TOKEN:
      if (value == null) {
        unsetAccess_token();
      } else {
        setAccess_token((String)value);
      }
      break;

    case REFRESH_TOKEN:
      if (value == null) {
        unsetRefresh_token();
      } else {
        setRefresh_token((String)value);
      }
      break;

    case EXPIRES_IN:
      if (value == null) {
        unsetExpires_in();
      } else {
        setExpires_in((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TOKEN_TYPE:
      return getToken_type();

    case ACCESS_TOKEN:
      return getAccess_token();

    case REFRESH_TOKEN:
      return getRefresh_token();

    case EXPIRES_IN:
      return getExpires_in();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TOKEN_TYPE:
      return isSetToken_type();
    case ACCESS_TOKEN:
      return isSetAccess_token();
    case REFRESH_TOKEN:
      return isSetRefresh_token();
    case EXPIRES_IN:
      return isSetExpires_in();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof VoxeetResponse)
      return this.equals((VoxeetResponse)that);
    return false;
  }

  public boolean equals(VoxeetResponse that) {
    if (that == null)
      return false;

    boolean this_present_token_type = true && this.isSetToken_type();
    boolean that_present_token_type = true && that.isSetToken_type();
    if (this_present_token_type || that_present_token_type) {
      if (!(this_present_token_type && that_present_token_type))
        return false;
      if (!this.token_type.equals(that.token_type))
        return false;
    }

    boolean this_present_access_token = true && this.isSetAccess_token();
    boolean that_present_access_token = true && that.isSetAccess_token();
    if (this_present_access_token || that_present_access_token) {
      if (!(this_present_access_token && that_present_access_token))
        return false;
      if (!this.access_token.equals(that.access_token))
        return false;
    }

    boolean this_present_refresh_token = true && this.isSetRefresh_token();
    boolean that_present_refresh_token = true && that.isSetRefresh_token();
    if (this_present_refresh_token || that_present_refresh_token) {
      if (!(this_present_refresh_token && that_present_refresh_token))
        return false;
      if (!this.refresh_token.equals(that.refresh_token))
        return false;
    }

    boolean this_present_expires_in = true;
    boolean that_present_expires_in = true;
    if (this_present_expires_in || that_present_expires_in) {
      if (!(this_present_expires_in && that_present_expires_in))
        return false;
      if (this.expires_in != that.expires_in)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_token_type = true && (isSetToken_type());
    list.add(present_token_type);
    if (present_token_type)
      list.add(token_type);

    boolean present_access_token = true && (isSetAccess_token());
    list.add(present_access_token);
    if (present_access_token)
      list.add(access_token);

    boolean present_refresh_token = true && (isSetRefresh_token());
    list.add(present_refresh_token);
    if (present_refresh_token)
      list.add(refresh_token);

    boolean present_expires_in = true;
    list.add(present_expires_in);
    if (present_expires_in)
      list.add(expires_in);

    return list.hashCode();
  }

  @Override
  public int compareTo(VoxeetResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetToken_type()).compareTo(other.isSetToken_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToken_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token_type, other.token_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccess_token()).compareTo(other.isSetAccess_token());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccess_token()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.access_token, other.access_token);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefresh_token()).compareTo(other.isSetRefresh_token());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefresh_token()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refresh_token, other.refresh_token);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExpires_in()).compareTo(other.isSetExpires_in());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpires_in()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expires_in, other.expires_in);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("VoxeetResponse(");
    boolean first = true;

    sb.append("token_type:");
    if (this.token_type == null) {
      sb.append("null");
    } else {
      sb.append(this.token_type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("access_token:");
    if (this.access_token == null) {
      sb.append("null");
    } else {
      sb.append(this.access_token);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("refresh_token:");
    if (this.refresh_token == null) {
      sb.append("null");
    } else {
      sb.append(this.refresh_token);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("expires_in:");
    sb.append(this.expires_in);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class VoxeetResponseStandardSchemeFactory implements SchemeFactory {
    public VoxeetResponseStandardScheme getScheme() {
      return new VoxeetResponseStandardScheme();
    }
  }

  private static class VoxeetResponseStandardScheme extends StandardScheme<VoxeetResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, VoxeetResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TOKEN_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.token_type = iprot.readString();
              struct.setToken_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ACCESS_TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.access_token = iprot.readString();
              struct.setAccess_tokenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REFRESH_TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.refresh_token = iprot.readString();
              struct.setRefresh_tokenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // EXPIRES_IN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.expires_in = iprot.readI32();
              struct.setExpires_inIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, VoxeetResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.token_type != null) {
        oprot.writeFieldBegin(TOKEN_TYPE_FIELD_DESC);
        oprot.writeString(struct.token_type);
        oprot.writeFieldEnd();
      }
      if (struct.access_token != null) {
        oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
        oprot.writeString(struct.access_token);
        oprot.writeFieldEnd();
      }
      if (struct.refresh_token != null) {
        oprot.writeFieldBegin(REFRESH_TOKEN_FIELD_DESC);
        oprot.writeString(struct.refresh_token);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(EXPIRES_IN_FIELD_DESC);
      oprot.writeI32(struct.expires_in);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

}

