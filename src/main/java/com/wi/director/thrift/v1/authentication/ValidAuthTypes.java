/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wi.director.thrift.v1.authentication;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class ValidAuthTypes implements org.apache.thrift.TBase<ValidAuthTypes, ValidAuthTypes._Fields>, java.io.Serializable, Cloneable, Comparable<ValidAuthTypes> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ValidAuthTypes");

  private static final org.apache.thrift.protocol.TField PASSWORD_AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("passwordAuth", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField WEB_SSO_FIELD_DESC = new org.apache.thrift.protocol.TField("webSSO", org.apache.thrift.protocol.TType.STRUCT, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ValidAuthTypesStandardSchemeFactory());
  }

  public PasswordAuth passwordAuth; // optional
  public WebSSOAuth webSSO; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PASSWORD_AUTH((short)1, "passwordAuth"),
    WEB_SSO((short)2, "webSSO");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PASSWORD_AUTH
          return PASSWORD_AUTH;
        case 2: // WEB_SSO
          return WEB_SSO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.PASSWORD_AUTH,_Fields.WEB_SSO};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PASSWORD_AUTH, new org.apache.thrift.meta_data.FieldMetaData("passwordAuth", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PasswordAuth.class)));
    tmpMap.put(_Fields.WEB_SSO, new org.apache.thrift.meta_data.FieldMetaData("webSSO", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, WebSSOAuth.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ValidAuthTypes.class, metaDataMap);
  }

  public ValidAuthTypes() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ValidAuthTypes(ValidAuthTypes other) {
    if (other.isSetPasswordAuth()) {
      this.passwordAuth = new PasswordAuth(other.passwordAuth);
    }
    if (other.isSetWebSSO()) {
      this.webSSO = new WebSSOAuth(other.webSSO);
    }
  }

  public ValidAuthTypes deepCopy() {
    return new ValidAuthTypes(this);
  }

  @Override
  public void clear() {
    this.passwordAuth = null;
    this.webSSO = null;
  }

  public PasswordAuth getPasswordAuth() {
    return this.passwordAuth;
  }

  public ValidAuthTypes setPasswordAuth(PasswordAuth passwordAuth) {
    this.passwordAuth = passwordAuth;
    return this;
  }

  public void unsetPasswordAuth() {
    this.passwordAuth = null;
  }

  /** Returns true if field passwordAuth is set (has been assigned a value) and false otherwise */
  public boolean isSetPasswordAuth() {
    return this.passwordAuth != null;
  }

  public void setPasswordAuthIsSet(boolean value) {
    if (!value) {
      this.passwordAuth = null;
    }
  }

  public WebSSOAuth getWebSSO() {
    return this.webSSO;
  }

  public ValidAuthTypes setWebSSO(WebSSOAuth webSSO) {
    this.webSSO = webSSO;
    return this;
  }

  public void unsetWebSSO() {
    this.webSSO = null;
  }

  /** Returns true if field webSSO is set (has been assigned a value) and false otherwise */
  public boolean isSetWebSSO() {
    return this.webSSO != null;
  }

  public void setWebSSOIsSet(boolean value) {
    if (!value) {
      this.webSSO = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PASSWORD_AUTH:
      if (value == null) {
        unsetPasswordAuth();
      } else {
        setPasswordAuth((PasswordAuth)value);
      }
      break;

    case WEB_SSO:
      if (value == null) {
        unsetWebSSO();
      } else {
        setWebSSO((WebSSOAuth)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PASSWORD_AUTH:
      return getPasswordAuth();

    case WEB_SSO:
      return getWebSSO();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PASSWORD_AUTH:
      return isSetPasswordAuth();
    case WEB_SSO:
      return isSetWebSSO();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ValidAuthTypes)
      return this.equals((ValidAuthTypes)that);
    return false;
  }

  public boolean equals(ValidAuthTypes that) {
    if (that == null)
      return false;

    boolean this_present_passwordAuth = true && this.isSetPasswordAuth();
    boolean that_present_passwordAuth = true && that.isSetPasswordAuth();
    if (this_present_passwordAuth || that_present_passwordAuth) {
      if (!(this_present_passwordAuth && that_present_passwordAuth))
        return false;
      if (!this.passwordAuth.equals(that.passwordAuth))
        return false;
    }

    boolean this_present_webSSO = true && this.isSetWebSSO();
    boolean that_present_webSSO = true && that.isSetWebSSO();
    if (this_present_webSSO || that_present_webSSO) {
      if (!(this_present_webSSO && that_present_webSSO))
        return false;
      if (!this.webSSO.equals(that.webSSO))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_passwordAuth = true && (isSetPasswordAuth());
    list.add(present_passwordAuth);
    if (present_passwordAuth)
      list.add(passwordAuth);

    boolean present_webSSO = true && (isSetWebSSO());
    list.add(present_webSSO);
    if (present_webSSO)
      list.add(webSSO);

    return list.hashCode();
  }

  @Override
  public int compareTo(ValidAuthTypes other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPasswordAuth()).compareTo(other.isSetPasswordAuth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPasswordAuth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.passwordAuth, other.passwordAuth);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWebSSO()).compareTo(other.isSetWebSSO());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWebSSO()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.webSSO, other.webSSO);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ValidAuthTypes(");
    boolean first = true;

    if (isSetPasswordAuth()) {
      sb.append("passwordAuth:");
      if (this.passwordAuth == null) {
        sb.append("null");
      } else {
        sb.append(this.passwordAuth);
      }
      first = false;
    }
    if (isSetWebSSO()) {
      if (!first) sb.append(", ");
      sb.append("webSSO:");
      if (this.webSSO == null) {
        sb.append("null");
      } else {
        sb.append(this.webSSO);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (passwordAuth != null) {
      passwordAuth.validate();
    }
    if (webSSO != null) {
      webSSO.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ValidAuthTypesStandardSchemeFactory implements SchemeFactory {
    public ValidAuthTypesStandardScheme getScheme() {
      return new ValidAuthTypesStandardScheme();
    }
  }

  private static class ValidAuthTypesStandardScheme extends StandardScheme<ValidAuthTypes> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ValidAuthTypes struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PASSWORD_AUTH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.passwordAuth = new PasswordAuth();
              struct.passwordAuth.read(iprot);
              struct.setPasswordAuthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // WEB_SSO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.webSSO = new WebSSOAuth();
              struct.webSSO.read(iprot);
              struct.setWebSSOIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ValidAuthTypes struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.passwordAuth != null) {
        if (struct.isSetPasswordAuth()) {
          oprot.writeFieldBegin(PASSWORD_AUTH_FIELD_DESC);
          struct.passwordAuth.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.webSSO != null) {
        if (struct.isSetWebSSO()) {
          oprot.writeFieldBegin(WEB_SSO_FIELD_DESC);
          struct.webSSO.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

}

