/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wi.director.thrift.v1.teamrole;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class TeamPermissions implements org.apache.thrift.TBase<TeamPermissions, TeamPermissions._Fields>, java.io.Serializable, Cloneable, Comparable<TeamPermissions> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TeamPermissions");

  private static final org.apache.thrift.protocol.TField SET_APPROVAL_WEBHOOKS_FIELD_DESC = new org.apache.thrift.protocol.TField("setApprovalWebhooks", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField CAN_ACCESS_ADMIN_FIELD_DESC = new org.apache.thrift.protocol.TField("canAccessAdmin", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField TEMPLATE_FIELD_DESC = new org.apache.thrift.protocol.TField("template", org.apache.thrift.protocol.TType.STRUCT, (short)101);
  private static final org.apache.thrift.protocol.TField TEMPLATE_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("templateSet", org.apache.thrift.protocol.TType.STRUCT, (short)102);
  private static final org.apache.thrift.protocol.TField JOB_FIELD_DESC = new org.apache.thrift.protocol.TField("job", org.apache.thrift.protocol.TType.STRUCT, (short)103);
  private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.STRUCT, (short)104);
  private static final org.apache.thrift.protocol.TField JOB_ROLE_FIELD_DESC = new org.apache.thrift.protocol.TField("jobRole", org.apache.thrift.protocol.TType.STRUCT, (short)105);
  private static final org.apache.thrift.protocol.TField TEAM_ROLE_FIELD_DESC = new org.apache.thrift.protocol.TField("teamRole", org.apache.thrift.protocol.TType.STRUCT, (short)106);
  private static final org.apache.thrift.protocol.TField METADATA_FIELD_DESC = new org.apache.thrift.protocol.TField("metadata", org.apache.thrift.protocol.TType.STRUCT, (short)107);
  private static final org.apache.thrift.protocol.TField TAG_FIELD_DESC = new org.apache.thrift.protocol.TField("tag", org.apache.thrift.protocol.TType.STRUCT, (short)108);
  private static final org.apache.thrift.protocol.TField GROUP_CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField("groupCategory", org.apache.thrift.protocol.TType.STRUCT, (short)109);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TeamPermissionsStandardSchemeFactory());
  }

  public boolean setApprovalWebhooks; // required
  public boolean canAccessAdmin; // required
  public TeamTemplatePermissions template; // required
  public TeamTemplateSetPermissions templateSet; // required
  public TeamJobPermissions job; // required
  public TeamUserPermissions user; // required
  public TeamJobRolePermissions jobRole; // required
  public TeamRolePermissions teamRole; // required
  public TeamMetadataPermissions metadata; // required
  public TeamTagPermissions tag; // required
  public TeamStepGroupCategoryPermissions groupCategory; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SET_APPROVAL_WEBHOOKS((short)1, "setApprovalWebhooks"),
    CAN_ACCESS_ADMIN((short)2, "canAccessAdmin"),
    TEMPLATE((short)101, "template"),
    TEMPLATE_SET((short)102, "templateSet"),
    JOB((short)103, "job"),
    USER((short)104, "user"),
    JOB_ROLE((short)105, "jobRole"),
    TEAM_ROLE((short)106, "teamRole"),
    METADATA((short)107, "metadata"),
    TAG((short)108, "tag"),
    GROUP_CATEGORY((short)109, "groupCategory");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SET_APPROVAL_WEBHOOKS
          return SET_APPROVAL_WEBHOOKS;
        case 2: // CAN_ACCESS_ADMIN
          return CAN_ACCESS_ADMIN;
        case 101: // TEMPLATE
          return TEMPLATE;
        case 102: // TEMPLATE_SET
          return TEMPLATE_SET;
        case 103: // JOB
          return JOB;
        case 104: // USER
          return USER;
        case 105: // JOB_ROLE
          return JOB_ROLE;
        case 106: // TEAM_ROLE
          return TEAM_ROLE;
        case 107: // METADATA
          return METADATA;
        case 108: // TAG
          return TAG;
        case 109: // GROUP_CATEGORY
          return GROUP_CATEGORY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SETAPPROVALWEBHOOKS_ISSET_ID = 0;
  private static final int __CANACCESSADMIN_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SET_APPROVAL_WEBHOOKS, new org.apache.thrift.meta_data.FieldMetaData("setApprovalWebhooks", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CAN_ACCESS_ADMIN, new org.apache.thrift.meta_data.FieldMetaData("canAccessAdmin", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TEMPLATE, new org.apache.thrift.meta_data.FieldMetaData("template", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TeamTemplatePermissions.class)));
    tmpMap.put(_Fields.TEMPLATE_SET, new org.apache.thrift.meta_data.FieldMetaData("templateSet", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TeamTemplateSetPermissions.class)));
    tmpMap.put(_Fields.JOB, new org.apache.thrift.meta_data.FieldMetaData("job", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TeamJobPermissions.class)));
    tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TeamUserPermissions.class)));
    tmpMap.put(_Fields.JOB_ROLE, new org.apache.thrift.meta_data.FieldMetaData("jobRole", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TeamJobRolePermissions.class)));
    tmpMap.put(_Fields.TEAM_ROLE, new org.apache.thrift.meta_data.FieldMetaData("teamRole", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TeamRolePermissions.class)));
    tmpMap.put(_Fields.METADATA, new org.apache.thrift.meta_data.FieldMetaData("metadata", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TeamMetadataPermissions.class)));
    tmpMap.put(_Fields.TAG, new org.apache.thrift.meta_data.FieldMetaData("tag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TeamTagPermissions.class)));
    tmpMap.put(_Fields.GROUP_CATEGORY, new org.apache.thrift.meta_data.FieldMetaData("groupCategory", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TeamStepGroupCategoryPermissions.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TeamPermissions.class, metaDataMap);
  }

  public TeamPermissions() {
  }

  public TeamPermissions(
    boolean setApprovalWebhooks,
    boolean canAccessAdmin,
    TeamTemplatePermissions template,
    TeamTemplateSetPermissions templateSet,
    TeamJobPermissions job,
    TeamUserPermissions user,
    TeamJobRolePermissions jobRole,
    TeamRolePermissions teamRole,
    TeamMetadataPermissions metadata,
    TeamTagPermissions tag,
    TeamStepGroupCategoryPermissions groupCategory)
  {
    this();
    this.setApprovalWebhooks = setApprovalWebhooks;
    setSetApprovalWebhooksIsSet(true);
    this.canAccessAdmin = canAccessAdmin;
    setCanAccessAdminIsSet(true);
    this.template = template;
    this.templateSet = templateSet;
    this.job = job;
    this.user = user;
    this.jobRole = jobRole;
    this.teamRole = teamRole;
    this.metadata = metadata;
    this.tag = tag;
    this.groupCategory = groupCategory;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TeamPermissions(TeamPermissions other) {
    __isset_bitfield = other.__isset_bitfield;
    this.setApprovalWebhooks = other.setApprovalWebhooks;
    this.canAccessAdmin = other.canAccessAdmin;
    if (other.isSetTemplate()) {
      this.template = new TeamTemplatePermissions(other.template);
    }
    if (other.isSetTemplateSet()) {
      this.templateSet = new TeamTemplateSetPermissions(other.templateSet);
    }
    if (other.isSetJob()) {
      this.job = new TeamJobPermissions(other.job);
    }
    if (other.isSetUser()) {
      this.user = new TeamUserPermissions(other.user);
    }
    if (other.isSetJobRole()) {
      this.jobRole = new TeamJobRolePermissions(other.jobRole);
    }
    if (other.isSetTeamRole()) {
      this.teamRole = new TeamRolePermissions(other.teamRole);
    }
    if (other.isSetMetadata()) {
      this.metadata = new TeamMetadataPermissions(other.metadata);
    }
    if (other.isSetTag()) {
      this.tag = new TeamTagPermissions(other.tag);
    }
    if (other.isSetGroupCategory()) {
      this.groupCategory = new TeamStepGroupCategoryPermissions(other.groupCategory);
    }
  }

  public TeamPermissions deepCopy() {
    return new TeamPermissions(this);
  }

  @Override
  public void clear() {
    setSetApprovalWebhooksIsSet(false);
    this.setApprovalWebhooks = false;
    setCanAccessAdminIsSet(false);
    this.canAccessAdmin = false;
    this.template = null;
    this.templateSet = null;
    this.job = null;
    this.user = null;
    this.jobRole = null;
    this.teamRole = null;
    this.metadata = null;
    this.tag = null;
    this.groupCategory = null;
  }

  public boolean isSetApprovalWebhooks() {
    return this.setApprovalWebhooks;
  }

  public TeamPermissions setSetApprovalWebhooks(boolean setApprovalWebhooks) {
    this.setApprovalWebhooks = setApprovalWebhooks;
    setSetApprovalWebhooksIsSet(true);
    return this;
  }

  public void unsetSetApprovalWebhooks() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SETAPPROVALWEBHOOKS_ISSET_ID);
  }

  /** Returns true if field setApprovalWebhooks is set (has been assigned a value) and false otherwise */
  public boolean isSetSetApprovalWebhooks() {
    return EncodingUtils.testBit(__isset_bitfield, __SETAPPROVALWEBHOOKS_ISSET_ID);
  }

  public void setSetApprovalWebhooksIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SETAPPROVALWEBHOOKS_ISSET_ID, value);
  }

  public boolean isCanAccessAdmin() {
    return this.canAccessAdmin;
  }

  public TeamPermissions setCanAccessAdmin(boolean canAccessAdmin) {
    this.canAccessAdmin = canAccessAdmin;
    setCanAccessAdminIsSet(true);
    return this;
  }

  public void unsetCanAccessAdmin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CANACCESSADMIN_ISSET_ID);
  }

  /** Returns true if field canAccessAdmin is set (has been assigned a value) and false otherwise */
  public boolean isSetCanAccessAdmin() {
    return EncodingUtils.testBit(__isset_bitfield, __CANACCESSADMIN_ISSET_ID);
  }

  public void setCanAccessAdminIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CANACCESSADMIN_ISSET_ID, value);
  }

  public TeamTemplatePermissions getTemplate() {
    return this.template;
  }

  public TeamPermissions setTemplate(TeamTemplatePermissions template) {
    this.template = template;
    return this;
  }

  public void unsetTemplate() {
    this.template = null;
  }

  /** Returns true if field template is set (has been assigned a value) and false otherwise */
  public boolean isSetTemplate() {
    return this.template != null;
  }

  public void setTemplateIsSet(boolean value) {
    if (!value) {
      this.template = null;
    }
  }

  public TeamTemplateSetPermissions getTemplateSet() {
    return this.templateSet;
  }

  public TeamPermissions setTemplateSet(TeamTemplateSetPermissions templateSet) {
    this.templateSet = templateSet;
    return this;
  }

  public void unsetTemplateSet() {
    this.templateSet = null;
  }

  /** Returns true if field templateSet is set (has been assigned a value) and false otherwise */
  public boolean isSetTemplateSet() {
    return this.templateSet != null;
  }

  public void setTemplateSetIsSet(boolean value) {
    if (!value) {
      this.templateSet = null;
    }
  }

  public TeamJobPermissions getJob() {
    return this.job;
  }

  public TeamPermissions setJob(TeamJobPermissions job) {
    this.job = job;
    return this;
  }

  public void unsetJob() {
    this.job = null;
  }

  /** Returns true if field job is set (has been assigned a value) and false otherwise */
  public boolean isSetJob() {
    return this.job != null;
  }

  public void setJobIsSet(boolean value) {
    if (!value) {
      this.job = null;
    }
  }

  public TeamUserPermissions getUser() {
    return this.user;
  }

  public TeamPermissions setUser(TeamUserPermissions user) {
    this.user = user;
    return this;
  }

  public void unsetUser() {
    this.user = null;
  }

  /** Returns true if field user is set (has been assigned a value) and false otherwise */
  public boolean isSetUser() {
    return this.user != null;
  }

  public void setUserIsSet(boolean value) {
    if (!value) {
      this.user = null;
    }
  }

  public TeamJobRolePermissions getJobRole() {
    return this.jobRole;
  }

  public TeamPermissions setJobRole(TeamJobRolePermissions jobRole) {
    this.jobRole = jobRole;
    return this;
  }

  public void unsetJobRole() {
    this.jobRole = null;
  }

  /** Returns true if field jobRole is set (has been assigned a value) and false otherwise */
  public boolean isSetJobRole() {
    return this.jobRole != null;
  }

  public void setJobRoleIsSet(boolean value) {
    if (!value) {
      this.jobRole = null;
    }
  }

  public TeamRolePermissions getTeamRole() {
    return this.teamRole;
  }

  public TeamPermissions setTeamRole(TeamRolePermissions teamRole) {
    this.teamRole = teamRole;
    return this;
  }

  public void unsetTeamRole() {
    this.teamRole = null;
  }

  /** Returns true if field teamRole is set (has been assigned a value) and false otherwise */
  public boolean isSetTeamRole() {
    return this.teamRole != null;
  }

  public void setTeamRoleIsSet(boolean value) {
    if (!value) {
      this.teamRole = null;
    }
  }

  public TeamMetadataPermissions getMetadata() {
    return this.metadata;
  }

  public TeamPermissions setMetadata(TeamMetadataPermissions metadata) {
    this.metadata = metadata;
    return this;
  }

  public void unsetMetadata() {
    this.metadata = null;
  }

  /** Returns true if field metadata is set (has been assigned a value) and false otherwise */
  public boolean isSetMetadata() {
    return this.metadata != null;
  }

  public void setMetadataIsSet(boolean value) {
    if (!value) {
      this.metadata = null;
    }
  }

  public TeamTagPermissions getTag() {
    return this.tag;
  }

  public TeamPermissions setTag(TeamTagPermissions tag) {
    this.tag = tag;
    return this;
  }

  public void unsetTag() {
    this.tag = null;
  }

  /** Returns true if field tag is set (has been assigned a value) and false otherwise */
  public boolean isSetTag() {
    return this.tag != null;
  }

  public void setTagIsSet(boolean value) {
    if (!value) {
      this.tag = null;
    }
  }

  public TeamStepGroupCategoryPermissions getGroupCategory() {
    return this.groupCategory;
  }

  public TeamPermissions setGroupCategory(TeamStepGroupCategoryPermissions groupCategory) {
    this.groupCategory = groupCategory;
    return this;
  }

  public void unsetGroupCategory() {
    this.groupCategory = null;
  }

  /** Returns true if field groupCategory is set (has been assigned a value) and false otherwise */
  public boolean isSetGroupCategory() {
    return this.groupCategory != null;
  }

  public void setGroupCategoryIsSet(boolean value) {
    if (!value) {
      this.groupCategory = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SET_APPROVAL_WEBHOOKS:
      if (value == null) {
        unsetSetApprovalWebhooks();
      } else {
        setSetApprovalWebhooks((Boolean)value);
      }
      break;

    case CAN_ACCESS_ADMIN:
      if (value == null) {
        unsetCanAccessAdmin();
      } else {
        setCanAccessAdmin((Boolean)value);
      }
      break;

    case TEMPLATE:
      if (value == null) {
        unsetTemplate();
      } else {
        setTemplate((TeamTemplatePermissions)value);
      }
      break;

    case TEMPLATE_SET:
      if (value == null) {
        unsetTemplateSet();
      } else {
        setTemplateSet((TeamTemplateSetPermissions)value);
      }
      break;

    case JOB:
      if (value == null) {
        unsetJob();
      } else {
        setJob((TeamJobPermissions)value);
      }
      break;

    case USER:
      if (value == null) {
        unsetUser();
      } else {
        setUser((TeamUserPermissions)value);
      }
      break;

    case JOB_ROLE:
      if (value == null) {
        unsetJobRole();
      } else {
        setJobRole((TeamJobRolePermissions)value);
      }
      break;

    case TEAM_ROLE:
      if (value == null) {
        unsetTeamRole();
      } else {
        setTeamRole((TeamRolePermissions)value);
      }
      break;

    case METADATA:
      if (value == null) {
        unsetMetadata();
      } else {
        setMetadata((TeamMetadataPermissions)value);
      }
      break;

    case TAG:
      if (value == null) {
        unsetTag();
      } else {
        setTag((TeamTagPermissions)value);
      }
      break;

    case GROUP_CATEGORY:
      if (value == null) {
        unsetGroupCategory();
      } else {
        setGroupCategory((TeamStepGroupCategoryPermissions)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SET_APPROVAL_WEBHOOKS:
      return isSetApprovalWebhooks();

    case CAN_ACCESS_ADMIN:
      return isCanAccessAdmin();

    case TEMPLATE:
      return getTemplate();

    case TEMPLATE_SET:
      return getTemplateSet();

    case JOB:
      return getJob();

    case USER:
      return getUser();

    case JOB_ROLE:
      return getJobRole();

    case TEAM_ROLE:
      return getTeamRole();

    case METADATA:
      return getMetadata();

    case TAG:
      return getTag();

    case GROUP_CATEGORY:
      return getGroupCategory();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SET_APPROVAL_WEBHOOKS:
      return isSetSetApprovalWebhooks();
    case CAN_ACCESS_ADMIN:
      return isSetCanAccessAdmin();
    case TEMPLATE:
      return isSetTemplate();
    case TEMPLATE_SET:
      return isSetTemplateSet();
    case JOB:
      return isSetJob();
    case USER:
      return isSetUser();
    case JOB_ROLE:
      return isSetJobRole();
    case TEAM_ROLE:
      return isSetTeamRole();
    case METADATA:
      return isSetMetadata();
    case TAG:
      return isSetTag();
    case GROUP_CATEGORY:
      return isSetGroupCategory();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TeamPermissions)
      return this.equals((TeamPermissions)that);
    return false;
  }

  public boolean equals(TeamPermissions that) {
    if (that == null)
      return false;

    boolean this_present_setApprovalWebhooks = true;
    boolean that_present_setApprovalWebhooks = true;
    if (this_present_setApprovalWebhooks || that_present_setApprovalWebhooks) {
      if (!(this_present_setApprovalWebhooks && that_present_setApprovalWebhooks))
        return false;
      if (this.setApprovalWebhooks != that.setApprovalWebhooks)
        return false;
    }

    boolean this_present_canAccessAdmin = true;
    boolean that_present_canAccessAdmin = true;
    if (this_present_canAccessAdmin || that_present_canAccessAdmin) {
      if (!(this_present_canAccessAdmin && that_present_canAccessAdmin))
        return false;
      if (this.canAccessAdmin != that.canAccessAdmin)
        return false;
    }

    boolean this_present_template = true && this.isSetTemplate();
    boolean that_present_template = true && that.isSetTemplate();
    if (this_present_template || that_present_template) {
      if (!(this_present_template && that_present_template))
        return false;
      if (!this.template.equals(that.template))
        return false;
    }

    boolean this_present_templateSet = true && this.isSetTemplateSet();
    boolean that_present_templateSet = true && that.isSetTemplateSet();
    if (this_present_templateSet || that_present_templateSet) {
      if (!(this_present_templateSet && that_present_templateSet))
        return false;
      if (!this.templateSet.equals(that.templateSet))
        return false;
    }

    boolean this_present_job = true && this.isSetJob();
    boolean that_present_job = true && that.isSetJob();
    if (this_present_job || that_present_job) {
      if (!(this_present_job && that_present_job))
        return false;
      if (!this.job.equals(that.job))
        return false;
    }

    boolean this_present_user = true && this.isSetUser();
    boolean that_present_user = true && that.isSetUser();
    if (this_present_user || that_present_user) {
      if (!(this_present_user && that_present_user))
        return false;
      if (!this.user.equals(that.user))
        return false;
    }

    boolean this_present_jobRole = true && this.isSetJobRole();
    boolean that_present_jobRole = true && that.isSetJobRole();
    if (this_present_jobRole || that_present_jobRole) {
      if (!(this_present_jobRole && that_present_jobRole))
        return false;
      if (!this.jobRole.equals(that.jobRole))
        return false;
    }

    boolean this_present_teamRole = true && this.isSetTeamRole();
    boolean that_present_teamRole = true && that.isSetTeamRole();
    if (this_present_teamRole || that_present_teamRole) {
      if (!(this_present_teamRole && that_present_teamRole))
        return false;
      if (!this.teamRole.equals(that.teamRole))
        return false;
    }

    boolean this_present_metadata = true && this.isSetMetadata();
    boolean that_present_metadata = true && that.isSetMetadata();
    if (this_present_metadata || that_present_metadata) {
      if (!(this_present_metadata && that_present_metadata))
        return false;
      if (!this.metadata.equals(that.metadata))
        return false;
    }

    boolean this_present_tag = true && this.isSetTag();
    boolean that_present_tag = true && that.isSetTag();
    if (this_present_tag || that_present_tag) {
      if (!(this_present_tag && that_present_tag))
        return false;
      if (!this.tag.equals(that.tag))
        return false;
    }

    boolean this_present_groupCategory = true && this.isSetGroupCategory();
    boolean that_present_groupCategory = true && that.isSetGroupCategory();
    if (this_present_groupCategory || that_present_groupCategory) {
      if (!(this_present_groupCategory && that_present_groupCategory))
        return false;
      if (!this.groupCategory.equals(that.groupCategory))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_setApprovalWebhooks = true;
    list.add(present_setApprovalWebhooks);
    if (present_setApprovalWebhooks)
      list.add(setApprovalWebhooks);

    boolean present_canAccessAdmin = true;
    list.add(present_canAccessAdmin);
    if (present_canAccessAdmin)
      list.add(canAccessAdmin);

    boolean present_template = true && (isSetTemplate());
    list.add(present_template);
    if (present_template)
      list.add(template);

    boolean present_templateSet = true && (isSetTemplateSet());
    list.add(present_templateSet);
    if (present_templateSet)
      list.add(templateSet);

    boolean present_job = true && (isSetJob());
    list.add(present_job);
    if (present_job)
      list.add(job);

    boolean present_user = true && (isSetUser());
    list.add(present_user);
    if (present_user)
      list.add(user);

    boolean present_jobRole = true && (isSetJobRole());
    list.add(present_jobRole);
    if (present_jobRole)
      list.add(jobRole);

    boolean present_teamRole = true && (isSetTeamRole());
    list.add(present_teamRole);
    if (present_teamRole)
      list.add(teamRole);

    boolean present_metadata = true && (isSetMetadata());
    list.add(present_metadata);
    if (present_metadata)
      list.add(metadata);

    boolean present_tag = true && (isSetTag());
    list.add(present_tag);
    if (present_tag)
      list.add(tag);

    boolean present_groupCategory = true && (isSetGroupCategory());
    list.add(present_groupCategory);
    if (present_groupCategory)
      list.add(groupCategory);

    return list.hashCode();
  }

  @Override
  public int compareTo(TeamPermissions other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSetApprovalWebhooks()).compareTo(other.isSetSetApprovalWebhooks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSetApprovalWebhooks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.setApprovalWebhooks, other.setApprovalWebhooks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCanAccessAdmin()).compareTo(other.isSetCanAccessAdmin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCanAccessAdmin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.canAccessAdmin, other.canAccessAdmin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTemplate()).compareTo(other.isSetTemplate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTemplate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.template, other.template);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTemplateSet()).compareTo(other.isSetTemplateSet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTemplateSet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.templateSet, other.templateSet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJob()).compareTo(other.isSetJob());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJob()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.job, other.job);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUser()).compareTo(other.isSetUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, other.user);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJobRole()).compareTo(other.isSetJobRole());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJobRole()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobRole, other.jobRole);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTeamRole()).compareTo(other.isSetTeamRole());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeamRole()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teamRole, other.teamRole);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMetadata()).compareTo(other.isSetMetadata());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMetadata()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metadata, other.metadata);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTag()).compareTo(other.isSetTag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tag, other.tag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroupCategory()).compareTo(other.isSetGroupCategory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroupCategory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupCategory, other.groupCategory);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TeamPermissions(");
    boolean first = true;

    sb.append("setApprovalWebhooks:");
    sb.append(this.setApprovalWebhooks);
    first = false;
    if (!first) sb.append(", ");
    sb.append("canAccessAdmin:");
    sb.append(this.canAccessAdmin);
    first = false;
    if (!first) sb.append(", ");
    sb.append("template:");
    if (this.template == null) {
      sb.append("null");
    } else {
      sb.append(this.template);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("templateSet:");
    if (this.templateSet == null) {
      sb.append("null");
    } else {
      sb.append(this.templateSet);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("job:");
    if (this.job == null) {
      sb.append("null");
    } else {
      sb.append(this.job);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("user:");
    if (this.user == null) {
      sb.append("null");
    } else {
      sb.append(this.user);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("jobRole:");
    if (this.jobRole == null) {
      sb.append("null");
    } else {
      sb.append(this.jobRole);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("teamRole:");
    if (this.teamRole == null) {
      sb.append("null");
    } else {
      sb.append(this.teamRole);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("metadata:");
    if (this.metadata == null) {
      sb.append("null");
    } else {
      sb.append(this.metadata);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tag:");
    if (this.tag == null) {
      sb.append("null");
    } else {
      sb.append(this.tag);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("groupCategory:");
    if (this.groupCategory == null) {
      sb.append("null");
    } else {
      sb.append(this.groupCategory);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (template != null) {
      template.validate();
    }
    if (templateSet != null) {
      templateSet.validate();
    }
    if (job != null) {
      job.validate();
    }
    if (user != null) {
      user.validate();
    }
    if (jobRole != null) {
      jobRole.validate();
    }
    if (teamRole != null) {
      teamRole.validate();
    }
    if (metadata != null) {
      metadata.validate();
    }
    if (tag != null) {
      tag.validate();
    }
    if (groupCategory != null) {
      groupCategory.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TeamPermissionsStandardSchemeFactory implements SchemeFactory {
    public TeamPermissionsStandardScheme getScheme() {
      return new TeamPermissionsStandardScheme();
    }
  }

  private static class TeamPermissionsStandardScheme extends StandardScheme<TeamPermissions> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TeamPermissions struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SET_APPROVAL_WEBHOOKS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.setApprovalWebhooks = iprot.readBool();
              struct.setSetApprovalWebhooksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CAN_ACCESS_ADMIN
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.canAccessAdmin = iprot.readBool();
              struct.setCanAccessAdminIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 101: // TEMPLATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.template = new TeamTemplatePermissions();
              struct.template.read(iprot);
              struct.setTemplateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 102: // TEMPLATE_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.templateSet = new TeamTemplateSetPermissions();
              struct.templateSet.read(iprot);
              struct.setTemplateSetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 103: // JOB
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.job = new TeamJobPermissions();
              struct.job.read(iprot);
              struct.setJobIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 104: // USER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.user = new TeamUserPermissions();
              struct.user.read(iprot);
              struct.setUserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 105: // JOB_ROLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.jobRole = new TeamJobRolePermissions();
              struct.jobRole.read(iprot);
              struct.setJobRoleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 106: // TEAM_ROLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.teamRole = new TeamRolePermissions();
              struct.teamRole.read(iprot);
              struct.setTeamRoleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 107: // METADATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.metadata = new TeamMetadataPermissions();
              struct.metadata.read(iprot);
              struct.setMetadataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 108: // TAG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.tag = new TeamTagPermissions();
              struct.tag.read(iprot);
              struct.setTagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 109: // GROUP_CATEGORY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.groupCategory = new TeamStepGroupCategoryPermissions();
              struct.groupCategory.read(iprot);
              struct.setGroupCategoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TeamPermissions struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SET_APPROVAL_WEBHOOKS_FIELD_DESC);
      oprot.writeBool(struct.setApprovalWebhooks);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CAN_ACCESS_ADMIN_FIELD_DESC);
      oprot.writeBool(struct.canAccessAdmin);
      oprot.writeFieldEnd();
      if (struct.template != null) {
        oprot.writeFieldBegin(TEMPLATE_FIELD_DESC);
        struct.template.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.templateSet != null) {
        oprot.writeFieldBegin(TEMPLATE_SET_FIELD_DESC);
        struct.templateSet.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.job != null) {
        oprot.writeFieldBegin(JOB_FIELD_DESC);
        struct.job.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.user != null) {
        oprot.writeFieldBegin(USER_FIELD_DESC);
        struct.user.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.jobRole != null) {
        oprot.writeFieldBegin(JOB_ROLE_FIELD_DESC);
        struct.jobRole.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.teamRole != null) {
        oprot.writeFieldBegin(TEAM_ROLE_FIELD_DESC);
        struct.teamRole.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.metadata != null) {
        oprot.writeFieldBegin(METADATA_FIELD_DESC);
        struct.metadata.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.tag != null) {
        oprot.writeFieldBegin(TAG_FIELD_DESC);
        struct.tag.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.groupCategory != null) {
        oprot.writeFieldBegin(GROUP_CATEGORY_FIELD_DESC);
        struct.groupCategory.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

}

