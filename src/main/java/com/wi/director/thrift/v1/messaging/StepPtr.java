/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wi.director.thrift.v1.messaging;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class StepPtr implements org.apache.thrift.TBase<StepPtr, StepPtr._Fields>, java.io.Serializable, Cloneable, Comparable<StepPtr> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StepPtr");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField METADATA_PTR_FIELD_DESC = new org.apache.thrift.protocol.TField("metadataPtr", org.apache.thrift.protocol.TType.STRUCT, (short)10);
  private static final org.apache.thrift.protocol.TField FIELD_PTR_FIELD_DESC = new org.apache.thrift.protocol.TField("fieldPtr", org.apache.thrift.protocol.TType.STRUCT, (short)11);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new StepPtrStandardSchemeFactory());
  }

  /**
   * Id of the referenced step. Within the context
   * of a job, this should be set to the jobBaseStepId
   */
  public String id; // required
  /**
   * ClientId is needed for elements that change their
   * ID throughout versions.
   */
  public String clientId; // required
  public MetadataPtr metadataPtr; // optional
  public FieldPtr fieldPtr; // optional
  public String title; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * Id of the referenced step. Within the context
     * of a job, this should be set to the jobBaseStepId
     */
    ID((short)1, "id"),
    /**
     * ClientId is needed for elements that change their
     * ID throughout versions.
     */
    CLIENT_ID((short)2, "clientId"),
    METADATA_PTR((short)10, "metadataPtr"),
    FIELD_PTR((short)11, "fieldPtr"),
    TITLE((short)12, "title");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // CLIENT_ID
          return CLIENT_ID;
        case 10: // METADATA_PTR
          return METADATA_PTR;
        case 11: // FIELD_PTR
          return FIELD_PTR;
        case 12: // TITLE
          return TITLE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.METADATA_PTR,_Fields.FIELD_PTR,_Fields.TITLE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.METADATA_PTR, new org.apache.thrift.meta_data.FieldMetaData("metadataPtr", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MetadataPtr.class)));
    tmpMap.put(_Fields.FIELD_PTR, new org.apache.thrift.meta_data.FieldMetaData("fieldPtr", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FieldPtr.class)));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StepPtr.class, metaDataMap);
  }

  public StepPtr() {
  }

  public StepPtr(
    String id,
    String clientId)
  {
    this();
    this.id = id;
    this.clientId = clientId;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StepPtr(StepPtr other) {
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetClientId()) {
      this.clientId = other.clientId;
    }
    if (other.isSetMetadataPtr()) {
      this.metadataPtr = new MetadataPtr(other.metadataPtr);
    }
    if (other.isSetFieldPtr()) {
      this.fieldPtr = new FieldPtr(other.fieldPtr);
    }
    if (other.isSetTitle()) {
      this.title = other.title;
    }
  }

  public StepPtr deepCopy() {
    return new StepPtr(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.clientId = null;
    this.metadataPtr = null;
    this.fieldPtr = null;
    this.title = null;
  }

  /**
   * Id of the referenced step. Within the context
   * of a job, this should be set to the jobBaseStepId
   */
  public String getId() {
    return this.id;
  }

  /**
   * Id of the referenced step. Within the context
   * of a job, this should be set to the jobBaseStepId
   */
  public StepPtr setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  /**
   * ClientId is needed for elements that change their
   * ID throughout versions.
   */
  public String getClientId() {
    return this.clientId;
  }

  /**
   * ClientId is needed for elements that change their
   * ID throughout versions.
   */
  public StepPtr setClientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  public void unsetClientId() {
    this.clientId = null;
  }

  /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
  public boolean isSetClientId() {
    return this.clientId != null;
  }

  public void setClientIdIsSet(boolean value) {
    if (!value) {
      this.clientId = null;
    }
  }

  public MetadataPtr getMetadataPtr() {
    return this.metadataPtr;
  }

  public StepPtr setMetadataPtr(MetadataPtr metadataPtr) {
    this.metadataPtr = metadataPtr;
    return this;
  }

  public void unsetMetadataPtr() {
    this.metadataPtr = null;
  }

  /** Returns true if field metadataPtr is set (has been assigned a value) and false otherwise */
  public boolean isSetMetadataPtr() {
    return this.metadataPtr != null;
  }

  public void setMetadataPtrIsSet(boolean value) {
    if (!value) {
      this.metadataPtr = null;
    }
  }

  public FieldPtr getFieldPtr() {
    return this.fieldPtr;
  }

  public StepPtr setFieldPtr(FieldPtr fieldPtr) {
    this.fieldPtr = fieldPtr;
    return this;
  }

  public void unsetFieldPtr() {
    this.fieldPtr = null;
  }

  /** Returns true if field fieldPtr is set (has been assigned a value) and false otherwise */
  public boolean isSetFieldPtr() {
    return this.fieldPtr != null;
  }

  public void setFieldPtrIsSet(boolean value) {
    if (!value) {
      this.fieldPtr = null;
    }
  }

  public String getTitle() {
    return this.title;
  }

  public StepPtr setTitle(String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case CLIENT_ID:
      if (value == null) {
        unsetClientId();
      } else {
        setClientId((String)value);
      }
      break;

    case METADATA_PTR:
      if (value == null) {
        unsetMetadataPtr();
      } else {
        setMetadataPtr((MetadataPtr)value);
      }
      break;

    case FIELD_PTR:
      if (value == null) {
        unsetFieldPtr();
      } else {
        setFieldPtr((FieldPtr)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case CLIENT_ID:
      return getClientId();

    case METADATA_PTR:
      return getMetadataPtr();

    case FIELD_PTR:
      return getFieldPtr();

    case TITLE:
      return getTitle();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case CLIENT_ID:
      return isSetClientId();
    case METADATA_PTR:
      return isSetMetadataPtr();
    case FIELD_PTR:
      return isSetFieldPtr();
    case TITLE:
      return isSetTitle();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof StepPtr)
      return this.equals((StepPtr)that);
    return false;
  }

  public boolean equals(StepPtr that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_clientId = true && this.isSetClientId();
    boolean that_present_clientId = true && that.isSetClientId();
    if (this_present_clientId || that_present_clientId) {
      if (!(this_present_clientId && that_present_clientId))
        return false;
      if (!this.clientId.equals(that.clientId))
        return false;
    }

    boolean this_present_metadataPtr = true && this.isSetMetadataPtr();
    boolean that_present_metadataPtr = true && that.isSetMetadataPtr();
    if (this_present_metadataPtr || that_present_metadataPtr) {
      if (!(this_present_metadataPtr && that_present_metadataPtr))
        return false;
      if (!this.metadataPtr.equals(that.metadataPtr))
        return false;
    }

    boolean this_present_fieldPtr = true && this.isSetFieldPtr();
    boolean that_present_fieldPtr = true && that.isSetFieldPtr();
    if (this_present_fieldPtr || that_present_fieldPtr) {
      if (!(this_present_fieldPtr && that_present_fieldPtr))
        return false;
      if (!this.fieldPtr.equals(that.fieldPtr))
        return false;
    }

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_clientId = true && (isSetClientId());
    list.add(present_clientId);
    if (present_clientId)
      list.add(clientId);

    boolean present_metadataPtr = true && (isSetMetadataPtr());
    list.add(present_metadataPtr);
    if (present_metadataPtr)
      list.add(metadataPtr);

    boolean present_fieldPtr = true && (isSetFieldPtr());
    list.add(present_fieldPtr);
    if (present_fieldPtr)
      list.add(fieldPtr);

    boolean present_title = true && (isSetTitle());
    list.add(present_title);
    if (present_title)
      list.add(title);

    return list.hashCode();
  }

  @Override
  public int compareTo(StepPtr other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMetadataPtr()).compareTo(other.isSetMetadataPtr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMetadataPtr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metadataPtr, other.metadataPtr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFieldPtr()).compareTo(other.isSetFieldPtr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFieldPtr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fieldPtr, other.fieldPtr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTitle()).compareTo(other.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("StepPtr(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("clientId:");
    if (this.clientId == null) {
      sb.append("null");
    } else {
      sb.append(this.clientId);
    }
    first = false;
    if (isSetMetadataPtr()) {
      if (!first) sb.append(", ");
      sb.append("metadataPtr:");
      if (this.metadataPtr == null) {
        sb.append("null");
      } else {
        sb.append(this.metadataPtr);
      }
      first = false;
    }
    if (isSetFieldPtr()) {
      if (!first) sb.append(", ");
      sb.append("fieldPtr:");
      if (this.fieldPtr == null) {
        sb.append("null");
      } else {
        sb.append(this.fieldPtr);
      }
      first = false;
    }
    if (isSetTitle()) {
      if (!first) sb.append(", ");
      sb.append("title:");
      if (this.title == null) {
        sb.append("null");
      } else {
        sb.append(this.title);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (metadataPtr != null) {
      metadataPtr.validate();
    }
    if (fieldPtr != null) {
      fieldPtr.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StepPtrStandardSchemeFactory implements SchemeFactory {
    public StepPtrStandardScheme getScheme() {
      return new StepPtrStandardScheme();
    }
  }

  private static class StepPtrStandardScheme extends StandardScheme<StepPtr> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, StepPtr struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CLIENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientId = iprot.readString();
              struct.setClientIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // METADATA_PTR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.metadataPtr = new MetadataPtr();
              struct.metadataPtr.read(iprot);
              struct.setMetadataPtrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // FIELD_PTR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.fieldPtr = new FieldPtr();
              struct.fieldPtr.read(iprot);
              struct.setFieldPtrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, StepPtr struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.clientId != null) {
        oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
        oprot.writeString(struct.clientId);
        oprot.writeFieldEnd();
      }
      if (struct.metadataPtr != null) {
        if (struct.isSetMetadataPtr()) {
          oprot.writeFieldBegin(METADATA_PTR_FIELD_DESC);
          struct.metadataPtr.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.fieldPtr != null) {
        if (struct.isSetFieldPtr()) {
          oprot.writeFieldBegin(FIELD_PTR_FIELD_DESC);
          struct.fieldPtr.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.title != null) {
        if (struct.isSetTitle()) {
          oprot.writeFieldBegin(TITLE_FIELD_DESC);
          oprot.writeString(struct.title);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

}

