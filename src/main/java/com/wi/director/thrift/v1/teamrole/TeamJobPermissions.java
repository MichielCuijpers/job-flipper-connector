/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wi.director.thrift.v1.teamrole;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class TeamJobPermissions implements org.apache.thrift.TBase<TeamJobPermissions, TeamJobPermissions._Fields>, java.io.Serializable, Cloneable, Comparable<TeamJobPermissions> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TeamJobPermissions");

  private static final org.apache.thrift.protocol.TField PLAN_AND_CREATE_FIELD_DESC = new org.apache.thrift.protocol.TField("planAndCreate", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField VIEW_ALL_FIELD_DESC = new org.apache.thrift.protocol.TField("viewAll", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField SEE_REPORTS_FIELD_DESC = new org.apache.thrift.protocol.TField("seeReports", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField EDIT_FIELD_DESC = new org.apache.thrift.protocol.TField("edit", org.apache.thrift.protocol.TType.BOOL, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TeamJobPermissionsStandardSchemeFactory());
  }

  public boolean planAndCreate; // required
  public boolean viewAll; // required
  public boolean seeReports; // required
  public boolean edit; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PLAN_AND_CREATE((short)1, "planAndCreate"),
    VIEW_ALL((short)2, "viewAll"),
    SEE_REPORTS((short)3, "seeReports"),
    EDIT((short)4, "edit");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PLAN_AND_CREATE
          return PLAN_AND_CREATE;
        case 2: // VIEW_ALL
          return VIEW_ALL;
        case 3: // SEE_REPORTS
          return SEE_REPORTS;
        case 4: // EDIT
          return EDIT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PLANANDCREATE_ISSET_ID = 0;
  private static final int __VIEWALL_ISSET_ID = 1;
  private static final int __SEEREPORTS_ISSET_ID = 2;
  private static final int __EDIT_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PLAN_AND_CREATE, new org.apache.thrift.meta_data.FieldMetaData("planAndCreate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.VIEW_ALL, new org.apache.thrift.meta_data.FieldMetaData("viewAll", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SEE_REPORTS, new org.apache.thrift.meta_data.FieldMetaData("seeReports", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.EDIT, new org.apache.thrift.meta_data.FieldMetaData("edit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TeamJobPermissions.class, metaDataMap);
  }

  public TeamJobPermissions() {
  }

  public TeamJobPermissions(
    boolean planAndCreate,
    boolean viewAll,
    boolean seeReports,
    boolean edit)
  {
    this();
    this.planAndCreate = planAndCreate;
    setPlanAndCreateIsSet(true);
    this.viewAll = viewAll;
    setViewAllIsSet(true);
    this.seeReports = seeReports;
    setSeeReportsIsSet(true);
    this.edit = edit;
    setEditIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TeamJobPermissions(TeamJobPermissions other) {
    __isset_bitfield = other.__isset_bitfield;
    this.planAndCreate = other.planAndCreate;
    this.viewAll = other.viewAll;
    this.seeReports = other.seeReports;
    this.edit = other.edit;
  }

  public TeamJobPermissions deepCopy() {
    return new TeamJobPermissions(this);
  }

  @Override
  public void clear() {
    setPlanAndCreateIsSet(false);
    this.planAndCreate = false;
    setViewAllIsSet(false);
    this.viewAll = false;
    setSeeReportsIsSet(false);
    this.seeReports = false;
    setEditIsSet(false);
    this.edit = false;
  }

  public boolean isPlanAndCreate() {
    return this.planAndCreate;
  }

  public TeamJobPermissions setPlanAndCreate(boolean planAndCreate) {
    this.planAndCreate = planAndCreate;
    setPlanAndCreateIsSet(true);
    return this;
  }

  public void unsetPlanAndCreate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PLANANDCREATE_ISSET_ID);
  }

  /** Returns true if field planAndCreate is set (has been assigned a value) and false otherwise */
  public boolean isSetPlanAndCreate() {
    return EncodingUtils.testBit(__isset_bitfield, __PLANANDCREATE_ISSET_ID);
  }

  public void setPlanAndCreateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PLANANDCREATE_ISSET_ID, value);
  }

  public boolean isViewAll() {
    return this.viewAll;
  }

  public TeamJobPermissions setViewAll(boolean viewAll) {
    this.viewAll = viewAll;
    setViewAllIsSet(true);
    return this;
  }

  public void unsetViewAll() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VIEWALL_ISSET_ID);
  }

  /** Returns true if field viewAll is set (has been assigned a value) and false otherwise */
  public boolean isSetViewAll() {
    return EncodingUtils.testBit(__isset_bitfield, __VIEWALL_ISSET_ID);
  }

  public void setViewAllIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VIEWALL_ISSET_ID, value);
  }

  public boolean isSeeReports() {
    return this.seeReports;
  }

  public TeamJobPermissions setSeeReports(boolean seeReports) {
    this.seeReports = seeReports;
    setSeeReportsIsSet(true);
    return this;
  }

  public void unsetSeeReports() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEEREPORTS_ISSET_ID);
  }

  /** Returns true if field seeReports is set (has been assigned a value) and false otherwise */
  public boolean isSetSeeReports() {
    return EncodingUtils.testBit(__isset_bitfield, __SEEREPORTS_ISSET_ID);
  }

  public void setSeeReportsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEEREPORTS_ISSET_ID, value);
  }

  public boolean isEdit() {
    return this.edit;
  }

  public TeamJobPermissions setEdit(boolean edit) {
    this.edit = edit;
    setEditIsSet(true);
    return this;
  }

  public void unsetEdit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EDIT_ISSET_ID);
  }

  /** Returns true if field edit is set (has been assigned a value) and false otherwise */
  public boolean isSetEdit() {
    return EncodingUtils.testBit(__isset_bitfield, __EDIT_ISSET_ID);
  }

  public void setEditIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EDIT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PLAN_AND_CREATE:
      if (value == null) {
        unsetPlanAndCreate();
      } else {
        setPlanAndCreate((Boolean)value);
      }
      break;

    case VIEW_ALL:
      if (value == null) {
        unsetViewAll();
      } else {
        setViewAll((Boolean)value);
      }
      break;

    case SEE_REPORTS:
      if (value == null) {
        unsetSeeReports();
      } else {
        setSeeReports((Boolean)value);
      }
      break;

    case EDIT:
      if (value == null) {
        unsetEdit();
      } else {
        setEdit((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PLAN_AND_CREATE:
      return isPlanAndCreate();

    case VIEW_ALL:
      return isViewAll();

    case SEE_REPORTS:
      return isSeeReports();

    case EDIT:
      return isEdit();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PLAN_AND_CREATE:
      return isSetPlanAndCreate();
    case VIEW_ALL:
      return isSetViewAll();
    case SEE_REPORTS:
      return isSetSeeReports();
    case EDIT:
      return isSetEdit();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TeamJobPermissions)
      return this.equals((TeamJobPermissions)that);
    return false;
  }

  public boolean equals(TeamJobPermissions that) {
    if (that == null)
      return false;

    boolean this_present_planAndCreate = true;
    boolean that_present_planAndCreate = true;
    if (this_present_planAndCreate || that_present_planAndCreate) {
      if (!(this_present_planAndCreate && that_present_planAndCreate))
        return false;
      if (this.planAndCreate != that.planAndCreate)
        return false;
    }

    boolean this_present_viewAll = true;
    boolean that_present_viewAll = true;
    if (this_present_viewAll || that_present_viewAll) {
      if (!(this_present_viewAll && that_present_viewAll))
        return false;
      if (this.viewAll != that.viewAll)
        return false;
    }

    boolean this_present_seeReports = true;
    boolean that_present_seeReports = true;
    if (this_present_seeReports || that_present_seeReports) {
      if (!(this_present_seeReports && that_present_seeReports))
        return false;
      if (this.seeReports != that.seeReports)
        return false;
    }

    boolean this_present_edit = true;
    boolean that_present_edit = true;
    if (this_present_edit || that_present_edit) {
      if (!(this_present_edit && that_present_edit))
        return false;
      if (this.edit != that.edit)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_planAndCreate = true;
    list.add(present_planAndCreate);
    if (present_planAndCreate)
      list.add(planAndCreate);

    boolean present_viewAll = true;
    list.add(present_viewAll);
    if (present_viewAll)
      list.add(viewAll);

    boolean present_seeReports = true;
    list.add(present_seeReports);
    if (present_seeReports)
      list.add(seeReports);

    boolean present_edit = true;
    list.add(present_edit);
    if (present_edit)
      list.add(edit);

    return list.hashCode();
  }

  @Override
  public int compareTo(TeamJobPermissions other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPlanAndCreate()).compareTo(other.isSetPlanAndCreate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlanAndCreate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.planAndCreate, other.planAndCreate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetViewAll()).compareTo(other.isSetViewAll());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetViewAll()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.viewAll, other.viewAll);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSeeReports()).compareTo(other.isSetSeeReports());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSeeReports()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.seeReports, other.seeReports);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEdit()).compareTo(other.isSetEdit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEdit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.edit, other.edit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TeamJobPermissions(");
    boolean first = true;

    sb.append("planAndCreate:");
    sb.append(this.planAndCreate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("viewAll:");
    sb.append(this.viewAll);
    first = false;
    if (!first) sb.append(", ");
    sb.append("seeReports:");
    sb.append(this.seeReports);
    first = false;
    if (!first) sb.append(", ");
    sb.append("edit:");
    sb.append(this.edit);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TeamJobPermissionsStandardSchemeFactory implements SchemeFactory {
    public TeamJobPermissionsStandardScheme getScheme() {
      return new TeamJobPermissionsStandardScheme();
    }
  }

  private static class TeamJobPermissionsStandardScheme extends StandardScheme<TeamJobPermissions> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TeamJobPermissions struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PLAN_AND_CREATE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.planAndCreate = iprot.readBool();
              struct.setPlanAndCreateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // VIEW_ALL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.viewAll = iprot.readBool();
              struct.setViewAllIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SEE_REPORTS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.seeReports = iprot.readBool();
              struct.setSeeReportsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // EDIT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.edit = iprot.readBool();
              struct.setEditIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TeamJobPermissions struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PLAN_AND_CREATE_FIELD_DESC);
      oprot.writeBool(struct.planAndCreate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VIEW_ALL_FIELD_DESC);
      oprot.writeBool(struct.viewAll);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SEE_REPORTS_FIELD_DESC);
      oprot.writeBool(struct.seeReports);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EDIT_FIELD_DESC);
      oprot.writeBool(struct.edit);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

}

