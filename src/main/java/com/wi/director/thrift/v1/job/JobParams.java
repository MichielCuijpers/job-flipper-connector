/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wi.director.thrift.v1.job;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * Mutable parts of a Job
 */
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class JobParams implements org.apache.thrift.TBase<JobParams, JobParams._Fields>, java.io.Serializable, Cloneable, Comparable<JobParams> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("JobParams");

  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PLANNED_START_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("plannedStartAt", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField SKIP_PLANNING_FIELD_DESC = new org.apache.thrift.protocol.TField("skipPlanning", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField ENABLE_MESH_FIELD_DESC = new org.apache.thrift.protocol.TField("enableMesh", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField START_AUTO_FIELD_DESC = new org.apache.thrift.protocol.TField("startAuto", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField TYP_FIELD_DESC = new org.apache.thrift.protocol.TField("typ", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField SRC_FIELD_DESC = new org.apache.thrift.protocol.TField("src", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField PRIORITY_FIELD_DESC = new org.apache.thrift.protocol.TField("priority", org.apache.thrift.protocol.TType.STRUCT, (short)8);
  private static final org.apache.thrift.protocol.TField LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("location", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField PLANNED_START_JOB_ROLE_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("plannedStartJobRoleIds", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField DUP_JOB_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("dupJobId", org.apache.thrift.protocol.TType.STRING, (short)30);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new JobParamsStandardSchemeFactory());
  }

  public String title; // optional
  public long plannedStartAt; // optional
  public boolean skipPlanning; // required
  public boolean enableMesh; // optional
  public boolean startAuto; // optional
  /**
   * On creation, Specify the job type. <br>
   * Normal, Issue and AdHoc are accepted on creation. <br>
   * JobType is Normal if null. <br>
   * In updateJob, can be explicitly set to change between: <br>
   * 1) Normal -> AdHoc <br>
   * 2) Recurring -> AdHoc <br>
   * 3) AdHoc -> Normal <br>
   * Any other type changes will be rejected with error. <br>
   * Setting to null performs no type changes.
   * 
   * @see JobType
   */
  public JobType typ; // optional
  /**
   * If JobType is Issue, optionally specify a source of the issue. <br>
   * If job is an instance started from an AdHoc (on-demand) job, specify the source job. <br>
   * Currently, only accepting references down to the detail of a step/group. <br>
   */
  public com.wi.director.thrift.v1.messaging.JobPtr src; // optional
  public PriorityLevel priority; // optional
  public String location; // optional
  /**
   * If JobType is AdHoc, this must be a non-empty, valid job role id list for
   * the user starting an ad hoc job to be assigned the following roles.
   * This is in addition to the roles already assigned to this user during planning.
   */
  public List<String> plannedStartJobRoleIds; // optional
  /**
   * Job to duplicate from, currently only template ref values are being copied over, skipping the need for validation and reducing traffic
   */
  public String dupJobId; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TITLE((short)1, "title"),
    PLANNED_START_AT((short)2, "plannedStartAt"),
    SKIP_PLANNING((short)3, "skipPlanning"),
    ENABLE_MESH((short)4, "enableMesh"),
    START_AUTO((short)5, "startAuto"),
    /**
     * On creation, Specify the job type. <br>
     * Normal, Issue and AdHoc are accepted on creation. <br>
     * JobType is Normal if null. <br>
     * In updateJob, can be explicitly set to change between: <br>
     * 1) Normal -> AdHoc <br>
     * 2) Recurring -> AdHoc <br>
     * 3) AdHoc -> Normal <br>
     * Any other type changes will be rejected with error. <br>
     * Setting to null performs no type changes.
     * 
     * @see JobType
     */
    TYP((short)6, "typ"),
    /**
     * If JobType is Issue, optionally specify a source of the issue. <br>
     * If job is an instance started from an AdHoc (on-demand) job, specify the source job. <br>
     * Currently, only accepting references down to the detail of a step/group. <br>
     */
    SRC((short)7, "src"),
    PRIORITY((short)8, "priority"),
    LOCATION((short)9, "location"),
    /**
     * If JobType is AdHoc, this must be a non-empty, valid job role id list for
     * the user starting an ad hoc job to be assigned the following roles.
     * This is in addition to the roles already assigned to this user during planning.
     */
    PLANNED_START_JOB_ROLE_IDS((short)10, "plannedStartJobRoleIds"),
    /**
     * Job to duplicate from, currently only template ref values are being copied over, skipping the need for validation and reducing traffic
     */
    DUP_JOB_ID((short)30, "dupJobId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TITLE
          return TITLE;
        case 2: // PLANNED_START_AT
          return PLANNED_START_AT;
        case 3: // SKIP_PLANNING
          return SKIP_PLANNING;
        case 4: // ENABLE_MESH
          return ENABLE_MESH;
        case 5: // START_AUTO
          return START_AUTO;
        case 6: // TYP
          return TYP;
        case 7: // SRC
          return SRC;
        case 8: // PRIORITY
          return PRIORITY;
        case 9: // LOCATION
          return LOCATION;
        case 10: // PLANNED_START_JOB_ROLE_IDS
          return PLANNED_START_JOB_ROLE_IDS;
        case 30: // DUP_JOB_ID
          return DUP_JOB_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PLANNEDSTARTAT_ISSET_ID = 0;
  private static final int __SKIPPLANNING_ISSET_ID = 1;
  private static final int __ENABLEMESH_ISSET_ID = 2;
  private static final int __STARTAUTO_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.TITLE,_Fields.PLANNED_START_AT,_Fields.ENABLE_MESH,_Fields.START_AUTO,_Fields.TYP,_Fields.SRC,_Fields.PRIORITY,_Fields.LOCATION,_Fields.PLANNED_START_JOB_ROLE_IDS,_Fields.DUP_JOB_ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLANNED_START_AT, new org.apache.thrift.meta_data.FieldMetaData("plannedStartAt", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SKIP_PLANNING, new org.apache.thrift.meta_data.FieldMetaData("skipPlanning", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ENABLE_MESH, new org.apache.thrift.meta_data.FieldMetaData("enableMesh", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.START_AUTO, new org.apache.thrift.meta_data.FieldMetaData("startAuto", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TYP, new org.apache.thrift.meta_data.FieldMetaData("typ", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, JobType.class)));
    tmpMap.put(_Fields.SRC, new org.apache.thrift.meta_data.FieldMetaData("src", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.messaging.JobPtr.class)));
    tmpMap.put(_Fields.PRIORITY, new org.apache.thrift.meta_data.FieldMetaData("priority", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PriorityLevel.class)));
    tmpMap.put(_Fields.LOCATION, new org.apache.thrift.meta_data.FieldMetaData("location", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLANNED_START_JOB_ROLE_IDS, new org.apache.thrift.meta_data.FieldMetaData("plannedStartJobRoleIds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.DUP_JOB_ID, new org.apache.thrift.meta_data.FieldMetaData("dupJobId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(JobParams.class, metaDataMap);
  }

  public JobParams() {
    this.skipPlanning = true;

  }

  public JobParams(
    boolean skipPlanning)
  {
    this();
    this.skipPlanning = skipPlanning;
    setSkipPlanningIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public JobParams(JobParams other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    this.plannedStartAt = other.plannedStartAt;
    this.skipPlanning = other.skipPlanning;
    this.enableMesh = other.enableMesh;
    this.startAuto = other.startAuto;
    if (other.isSetTyp()) {
      this.typ = other.typ;
    }
    if (other.isSetSrc()) {
      this.src = new com.wi.director.thrift.v1.messaging.JobPtr(other.src);
    }
    if (other.isSetPriority()) {
      this.priority = new PriorityLevel(other.priority);
    }
    if (other.isSetLocation()) {
      this.location = other.location;
    }
    if (other.isSetPlannedStartJobRoleIds()) {
      List<String> __this__plannedStartJobRoleIds = new ArrayList<String>(other.plannedStartJobRoleIds);
      this.plannedStartJobRoleIds = __this__plannedStartJobRoleIds;
    }
    if (other.isSetDupJobId()) {
      this.dupJobId = other.dupJobId;
    }
  }

  public JobParams deepCopy() {
    return new JobParams(this);
  }

  @Override
  public void clear() {
    this.title = null;
    setPlannedStartAtIsSet(false);
    this.plannedStartAt = 0;
    this.skipPlanning = true;

    setEnableMeshIsSet(false);
    this.enableMesh = false;
    setStartAutoIsSet(false);
    this.startAuto = false;
    this.typ = null;
    this.src = null;
    this.priority = null;
    this.location = null;
    this.plannedStartJobRoleIds = null;
    this.dupJobId = null;
  }

  public String getTitle() {
    return this.title;
  }

  public JobParams setTitle(String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public long getPlannedStartAt() {
    return this.plannedStartAt;
  }

  public JobParams setPlannedStartAt(long plannedStartAt) {
    this.plannedStartAt = plannedStartAt;
    setPlannedStartAtIsSet(true);
    return this;
  }

  public void unsetPlannedStartAt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PLANNEDSTARTAT_ISSET_ID);
  }

  /** Returns true if field plannedStartAt is set (has been assigned a value) and false otherwise */
  public boolean isSetPlannedStartAt() {
    return EncodingUtils.testBit(__isset_bitfield, __PLANNEDSTARTAT_ISSET_ID);
  }

  public void setPlannedStartAtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PLANNEDSTARTAT_ISSET_ID, value);
  }

  public boolean isSkipPlanning() {
    return this.skipPlanning;
  }

  public JobParams setSkipPlanning(boolean skipPlanning) {
    this.skipPlanning = skipPlanning;
    setSkipPlanningIsSet(true);
    return this;
  }

  public void unsetSkipPlanning() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SKIPPLANNING_ISSET_ID);
  }

  /** Returns true if field skipPlanning is set (has been assigned a value) and false otherwise */
  public boolean isSetSkipPlanning() {
    return EncodingUtils.testBit(__isset_bitfield, __SKIPPLANNING_ISSET_ID);
  }

  public void setSkipPlanningIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SKIPPLANNING_ISSET_ID, value);
  }

  public boolean isEnableMesh() {
    return this.enableMesh;
  }

  public JobParams setEnableMesh(boolean enableMesh) {
    this.enableMesh = enableMesh;
    setEnableMeshIsSet(true);
    return this;
  }

  public void unsetEnableMesh() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENABLEMESH_ISSET_ID);
  }

  /** Returns true if field enableMesh is set (has been assigned a value) and false otherwise */
  public boolean isSetEnableMesh() {
    return EncodingUtils.testBit(__isset_bitfield, __ENABLEMESH_ISSET_ID);
  }

  public void setEnableMeshIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENABLEMESH_ISSET_ID, value);
  }

  public boolean isStartAuto() {
    return this.startAuto;
  }

  public JobParams setStartAuto(boolean startAuto) {
    this.startAuto = startAuto;
    setStartAutoIsSet(true);
    return this;
  }

  public void unsetStartAuto() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTAUTO_ISSET_ID);
  }

  /** Returns true if field startAuto is set (has been assigned a value) and false otherwise */
  public boolean isSetStartAuto() {
    return EncodingUtils.testBit(__isset_bitfield, __STARTAUTO_ISSET_ID);
  }

  public void setStartAutoIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTAUTO_ISSET_ID, value);
  }

  /**
   * On creation, Specify the job type. <br>
   * Normal, Issue and AdHoc are accepted on creation. <br>
   * JobType is Normal if null. <br>
   * In updateJob, can be explicitly set to change between: <br>
   * 1) Normal -> AdHoc <br>
   * 2) Recurring -> AdHoc <br>
   * 3) AdHoc -> Normal <br>
   * Any other type changes will be rejected with error. <br>
   * Setting to null performs no type changes.
   * 
   * @see JobType
   */
  public JobType getTyp() {
    return this.typ;
  }

  /**
   * On creation, Specify the job type. <br>
   * Normal, Issue and AdHoc are accepted on creation. <br>
   * JobType is Normal if null. <br>
   * In updateJob, can be explicitly set to change between: <br>
   * 1) Normal -> AdHoc <br>
   * 2) Recurring -> AdHoc <br>
   * 3) AdHoc -> Normal <br>
   * Any other type changes will be rejected with error. <br>
   * Setting to null performs no type changes.
   * 
   * @see JobType
   */
  public JobParams setTyp(JobType typ) {
    this.typ = typ;
    return this;
  }

  public void unsetTyp() {
    this.typ = null;
  }

  /** Returns true if field typ is set (has been assigned a value) and false otherwise */
  public boolean isSetTyp() {
    return this.typ != null;
  }

  public void setTypIsSet(boolean value) {
    if (!value) {
      this.typ = null;
    }
  }

  /**
   * If JobType is Issue, optionally specify a source of the issue. <br>
   * If job is an instance started from an AdHoc (on-demand) job, specify the source job. <br>
   * Currently, only accepting references down to the detail of a step/group. <br>
   */
  public com.wi.director.thrift.v1.messaging.JobPtr getSrc() {
    return this.src;
  }

  /**
   * If JobType is Issue, optionally specify a source of the issue. <br>
   * If job is an instance started from an AdHoc (on-demand) job, specify the source job. <br>
   * Currently, only accepting references down to the detail of a step/group. <br>
   */
  public JobParams setSrc(com.wi.director.thrift.v1.messaging.JobPtr src) {
    this.src = src;
    return this;
  }

  public void unsetSrc() {
    this.src = null;
  }

  /** Returns true if field src is set (has been assigned a value) and false otherwise */
  public boolean isSetSrc() {
    return this.src != null;
  }

  public void setSrcIsSet(boolean value) {
    if (!value) {
      this.src = null;
    }
  }

  public PriorityLevel getPriority() {
    return this.priority;
  }

  public JobParams setPriority(PriorityLevel priority) {
    this.priority = priority;
    return this;
  }

  public void unsetPriority() {
    this.priority = null;
  }

  /** Returns true if field priority is set (has been assigned a value) and false otherwise */
  public boolean isSetPriority() {
    return this.priority != null;
  }

  public void setPriorityIsSet(boolean value) {
    if (!value) {
      this.priority = null;
    }
  }

  public String getLocation() {
    return this.location;
  }

  public JobParams setLocation(String location) {
    this.location = location;
    return this;
  }

  public void unsetLocation() {
    this.location = null;
  }

  /** Returns true if field location is set (has been assigned a value) and false otherwise */
  public boolean isSetLocation() {
    return this.location != null;
  }

  public void setLocationIsSet(boolean value) {
    if (!value) {
      this.location = null;
    }
  }

  public int getPlannedStartJobRoleIdsSize() {
    return (this.plannedStartJobRoleIds == null) ? 0 : this.plannedStartJobRoleIds.size();
  }

  public java.util.Iterator<String> getPlannedStartJobRoleIdsIterator() {
    return (this.plannedStartJobRoleIds == null) ? null : this.plannedStartJobRoleIds.iterator();
  }

  public void addToPlannedStartJobRoleIds(String elem) {
    if (this.plannedStartJobRoleIds == null) {
      this.plannedStartJobRoleIds = new ArrayList<String>();
    }
    this.plannedStartJobRoleIds.add(elem);
  }

  /**
   * If JobType is AdHoc, this must be a non-empty, valid job role id list for
   * the user starting an ad hoc job to be assigned the following roles.
   * This is in addition to the roles already assigned to this user during planning.
   */
  public List<String> getPlannedStartJobRoleIds() {
    return this.plannedStartJobRoleIds;
  }

  /**
   * If JobType is AdHoc, this must be a non-empty, valid job role id list for
   * the user starting an ad hoc job to be assigned the following roles.
   * This is in addition to the roles already assigned to this user during planning.
   */
  public JobParams setPlannedStartJobRoleIds(List<String> plannedStartJobRoleIds) {
    this.plannedStartJobRoleIds = plannedStartJobRoleIds;
    return this;
  }

  public void unsetPlannedStartJobRoleIds() {
    this.plannedStartJobRoleIds = null;
  }

  /** Returns true if field plannedStartJobRoleIds is set (has been assigned a value) and false otherwise */
  public boolean isSetPlannedStartJobRoleIds() {
    return this.plannedStartJobRoleIds != null;
  }

  public void setPlannedStartJobRoleIdsIsSet(boolean value) {
    if (!value) {
      this.plannedStartJobRoleIds = null;
    }
  }

  /**
   * Job to duplicate from, currently only template ref values are being copied over, skipping the need for validation and reducing traffic
   */
  public String getDupJobId() {
    return this.dupJobId;
  }

  /**
   * Job to duplicate from, currently only template ref values are being copied over, skipping the need for validation and reducing traffic
   */
  public JobParams setDupJobId(String dupJobId) {
    this.dupJobId = dupJobId;
    return this;
  }

  public void unsetDupJobId() {
    this.dupJobId = null;
  }

  /** Returns true if field dupJobId is set (has been assigned a value) and false otherwise */
  public boolean isSetDupJobId() {
    return this.dupJobId != null;
  }

  public void setDupJobIdIsSet(boolean value) {
    if (!value) {
      this.dupJobId = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((String)value);
      }
      break;

    case PLANNED_START_AT:
      if (value == null) {
        unsetPlannedStartAt();
      } else {
        setPlannedStartAt((Long)value);
      }
      break;

    case SKIP_PLANNING:
      if (value == null) {
        unsetSkipPlanning();
      } else {
        setSkipPlanning((Boolean)value);
      }
      break;

    case ENABLE_MESH:
      if (value == null) {
        unsetEnableMesh();
      } else {
        setEnableMesh((Boolean)value);
      }
      break;

    case START_AUTO:
      if (value == null) {
        unsetStartAuto();
      } else {
        setStartAuto((Boolean)value);
      }
      break;

    case TYP:
      if (value == null) {
        unsetTyp();
      } else {
        setTyp((JobType)value);
      }
      break;

    case SRC:
      if (value == null) {
        unsetSrc();
      } else {
        setSrc((com.wi.director.thrift.v1.messaging.JobPtr)value);
      }
      break;

    case PRIORITY:
      if (value == null) {
        unsetPriority();
      } else {
        setPriority((PriorityLevel)value);
      }
      break;

    case LOCATION:
      if (value == null) {
        unsetLocation();
      } else {
        setLocation((String)value);
      }
      break;

    case PLANNED_START_JOB_ROLE_IDS:
      if (value == null) {
        unsetPlannedStartJobRoleIds();
      } else {
        setPlannedStartJobRoleIds((List<String>)value);
      }
      break;

    case DUP_JOB_ID:
      if (value == null) {
        unsetDupJobId();
      } else {
        setDupJobId((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TITLE:
      return getTitle();

    case PLANNED_START_AT:
      return getPlannedStartAt();

    case SKIP_PLANNING:
      return isSkipPlanning();

    case ENABLE_MESH:
      return isEnableMesh();

    case START_AUTO:
      return isStartAuto();

    case TYP:
      return getTyp();

    case SRC:
      return getSrc();

    case PRIORITY:
      return getPriority();

    case LOCATION:
      return getLocation();

    case PLANNED_START_JOB_ROLE_IDS:
      return getPlannedStartJobRoleIds();

    case DUP_JOB_ID:
      return getDupJobId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TITLE:
      return isSetTitle();
    case PLANNED_START_AT:
      return isSetPlannedStartAt();
    case SKIP_PLANNING:
      return isSetSkipPlanning();
    case ENABLE_MESH:
      return isSetEnableMesh();
    case START_AUTO:
      return isSetStartAuto();
    case TYP:
      return isSetTyp();
    case SRC:
      return isSetSrc();
    case PRIORITY:
      return isSetPriority();
    case LOCATION:
      return isSetLocation();
    case PLANNED_START_JOB_ROLE_IDS:
      return isSetPlannedStartJobRoleIds();
    case DUP_JOB_ID:
      return isSetDupJobId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof JobParams)
      return this.equals((JobParams)that);
    return false;
  }

  public boolean equals(JobParams that) {
    if (that == null)
      return false;

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_plannedStartAt = true && this.isSetPlannedStartAt();
    boolean that_present_plannedStartAt = true && that.isSetPlannedStartAt();
    if (this_present_plannedStartAt || that_present_plannedStartAt) {
      if (!(this_present_plannedStartAt && that_present_plannedStartAt))
        return false;
      if (this.plannedStartAt != that.plannedStartAt)
        return false;
    }

    boolean this_present_skipPlanning = true;
    boolean that_present_skipPlanning = true;
    if (this_present_skipPlanning || that_present_skipPlanning) {
      if (!(this_present_skipPlanning && that_present_skipPlanning))
        return false;
      if (this.skipPlanning != that.skipPlanning)
        return false;
    }

    boolean this_present_enableMesh = true && this.isSetEnableMesh();
    boolean that_present_enableMesh = true && that.isSetEnableMesh();
    if (this_present_enableMesh || that_present_enableMesh) {
      if (!(this_present_enableMesh && that_present_enableMesh))
        return false;
      if (this.enableMesh != that.enableMesh)
        return false;
    }

    boolean this_present_startAuto = true && this.isSetStartAuto();
    boolean that_present_startAuto = true && that.isSetStartAuto();
    if (this_present_startAuto || that_present_startAuto) {
      if (!(this_present_startAuto && that_present_startAuto))
        return false;
      if (this.startAuto != that.startAuto)
        return false;
    }

    boolean this_present_typ = true && this.isSetTyp();
    boolean that_present_typ = true && that.isSetTyp();
    if (this_present_typ || that_present_typ) {
      if (!(this_present_typ && that_present_typ))
        return false;
      if (!this.typ.equals(that.typ))
        return false;
    }

    boolean this_present_src = true && this.isSetSrc();
    boolean that_present_src = true && that.isSetSrc();
    if (this_present_src || that_present_src) {
      if (!(this_present_src && that_present_src))
        return false;
      if (!this.src.equals(that.src))
        return false;
    }

    boolean this_present_priority = true && this.isSetPriority();
    boolean that_present_priority = true && that.isSetPriority();
    if (this_present_priority || that_present_priority) {
      if (!(this_present_priority && that_present_priority))
        return false;
      if (!this.priority.equals(that.priority))
        return false;
    }

    boolean this_present_location = true && this.isSetLocation();
    boolean that_present_location = true && that.isSetLocation();
    if (this_present_location || that_present_location) {
      if (!(this_present_location && that_present_location))
        return false;
      if (!this.location.equals(that.location))
        return false;
    }

    boolean this_present_plannedStartJobRoleIds = true && this.isSetPlannedStartJobRoleIds();
    boolean that_present_plannedStartJobRoleIds = true && that.isSetPlannedStartJobRoleIds();
    if (this_present_plannedStartJobRoleIds || that_present_plannedStartJobRoleIds) {
      if (!(this_present_plannedStartJobRoleIds && that_present_plannedStartJobRoleIds))
        return false;
      if (!this.plannedStartJobRoleIds.equals(that.plannedStartJobRoleIds))
        return false;
    }

    boolean this_present_dupJobId = true && this.isSetDupJobId();
    boolean that_present_dupJobId = true && that.isSetDupJobId();
    if (this_present_dupJobId || that_present_dupJobId) {
      if (!(this_present_dupJobId && that_present_dupJobId))
        return false;
      if (!this.dupJobId.equals(that.dupJobId))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_title = true && (isSetTitle());
    list.add(present_title);
    if (present_title)
      list.add(title);

    boolean present_plannedStartAt = true && (isSetPlannedStartAt());
    list.add(present_plannedStartAt);
    if (present_plannedStartAt)
      list.add(plannedStartAt);

    boolean present_skipPlanning = true;
    list.add(present_skipPlanning);
    if (present_skipPlanning)
      list.add(skipPlanning);

    boolean present_enableMesh = true && (isSetEnableMesh());
    list.add(present_enableMesh);
    if (present_enableMesh)
      list.add(enableMesh);

    boolean present_startAuto = true && (isSetStartAuto());
    list.add(present_startAuto);
    if (present_startAuto)
      list.add(startAuto);

    boolean present_typ = true && (isSetTyp());
    list.add(present_typ);
    if (present_typ)
      list.add(typ.getValue());

    boolean present_src = true && (isSetSrc());
    list.add(present_src);
    if (present_src)
      list.add(src);

    boolean present_priority = true && (isSetPriority());
    list.add(present_priority);
    if (present_priority)
      list.add(priority);

    boolean present_location = true && (isSetLocation());
    list.add(present_location);
    if (present_location)
      list.add(location);

    boolean present_plannedStartJobRoleIds = true && (isSetPlannedStartJobRoleIds());
    list.add(present_plannedStartJobRoleIds);
    if (present_plannedStartJobRoleIds)
      list.add(plannedStartJobRoleIds);

    boolean present_dupJobId = true && (isSetDupJobId());
    list.add(present_dupJobId);
    if (present_dupJobId)
      list.add(dupJobId);

    return list.hashCode();
  }

  @Override
  public int compareTo(JobParams other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTitle()).compareTo(other.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlannedStartAt()).compareTo(other.isSetPlannedStartAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlannedStartAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.plannedStartAt, other.plannedStartAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSkipPlanning()).compareTo(other.isSetSkipPlanning());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSkipPlanning()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.skipPlanning, other.skipPlanning);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEnableMesh()).compareTo(other.isSetEnableMesh());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnableMesh()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enableMesh, other.enableMesh);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartAuto()).compareTo(other.isSetStartAuto());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartAuto()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startAuto, other.startAuto);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTyp()).compareTo(other.isSetTyp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTyp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.typ, other.typ);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSrc()).compareTo(other.isSetSrc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSrc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src, other.src);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPriority()).compareTo(other.isSetPriority());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPriority()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priority, other.priority);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocation()).compareTo(other.isSetLocation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.location, other.location);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlannedStartJobRoleIds()).compareTo(other.isSetPlannedStartJobRoleIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlannedStartJobRoleIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.plannedStartJobRoleIds, other.plannedStartJobRoleIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDupJobId()).compareTo(other.isSetDupJobId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDupJobId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dupJobId, other.dupJobId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("JobParams(");
    boolean first = true;

    if (isSetTitle()) {
      sb.append("title:");
      if (this.title == null) {
        sb.append("null");
      } else {
        sb.append(this.title);
      }
      first = false;
    }
    if (isSetPlannedStartAt()) {
      if (!first) sb.append(", ");
      sb.append("plannedStartAt:");
      sb.append(this.plannedStartAt);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("skipPlanning:");
    sb.append(this.skipPlanning);
    first = false;
    if (isSetEnableMesh()) {
      if (!first) sb.append(", ");
      sb.append("enableMesh:");
      sb.append(this.enableMesh);
      first = false;
    }
    if (isSetStartAuto()) {
      if (!first) sb.append(", ");
      sb.append("startAuto:");
      sb.append(this.startAuto);
      first = false;
    }
    if (isSetTyp()) {
      if (!first) sb.append(", ");
      sb.append("typ:");
      if (this.typ == null) {
        sb.append("null");
      } else {
        sb.append(this.typ);
      }
      first = false;
    }
    if (isSetSrc()) {
      if (!first) sb.append(", ");
      sb.append("src:");
      if (this.src == null) {
        sb.append("null");
      } else {
        sb.append(this.src);
      }
      first = false;
    }
    if (isSetPriority()) {
      if (!first) sb.append(", ");
      sb.append("priority:");
      if (this.priority == null) {
        sb.append("null");
      } else {
        sb.append(this.priority);
      }
      first = false;
    }
    if (isSetLocation()) {
      if (!first) sb.append(", ");
      sb.append("location:");
      if (this.location == null) {
        sb.append("null");
      } else {
        sb.append(this.location);
      }
      first = false;
    }
    if (isSetPlannedStartJobRoleIds()) {
      if (!first) sb.append(", ");
      sb.append("plannedStartJobRoleIds:");
      if (this.plannedStartJobRoleIds == null) {
        sb.append("null");
      } else {
        sb.append(this.plannedStartJobRoleIds);
      }
      first = false;
    }
    if (isSetDupJobId()) {
      if (!first) sb.append(", ");
      sb.append("dupJobId:");
      if (this.dupJobId == null) {
        sb.append("null");
      } else {
        sb.append(this.dupJobId);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (src != null) {
      src.validate();
    }
    if (priority != null) {
      priority.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class JobParamsStandardSchemeFactory implements SchemeFactory {
    public JobParamsStandardScheme getScheme() {
      return new JobParamsStandardScheme();
    }
  }

  private static class JobParamsStandardScheme extends StandardScheme<JobParams> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, JobParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PLANNED_START_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.plannedStartAt = iprot.readI64();
              struct.setPlannedStartAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SKIP_PLANNING
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.skipPlanning = iprot.readBool();
              struct.setSkipPlanningIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ENABLE_MESH
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.enableMesh = iprot.readBool();
              struct.setEnableMeshIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // START_AUTO
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.startAuto = iprot.readBool();
              struct.setStartAutoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TYP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.typ = com.wi.director.thrift.v1.job.JobType.findByValue(iprot.readI32());
              struct.setTypIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SRC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.src = new com.wi.director.thrift.v1.messaging.JobPtr();
              struct.src.read(iprot);
              struct.setSrcIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PRIORITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.priority = new PriorityLevel();
              struct.priority.read(iprot);
              struct.setPriorityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // LOCATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.location = iprot.readString();
              struct.setLocationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PLANNED_START_JOB_ROLE_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.plannedStartJobRoleIds = new ArrayList<String>(_list0.size);
                String _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readString();
                  struct.plannedStartJobRoleIds.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setPlannedStartJobRoleIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // DUP_JOB_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dupJobId = iprot.readString();
              struct.setDupJobIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, JobParams struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.title != null) {
        if (struct.isSetTitle()) {
          oprot.writeFieldBegin(TITLE_FIELD_DESC);
          oprot.writeString(struct.title);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetPlannedStartAt()) {
        oprot.writeFieldBegin(PLANNED_START_AT_FIELD_DESC);
        oprot.writeI64(struct.plannedStartAt);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SKIP_PLANNING_FIELD_DESC);
      oprot.writeBool(struct.skipPlanning);
      oprot.writeFieldEnd();
      if (struct.isSetEnableMesh()) {
        oprot.writeFieldBegin(ENABLE_MESH_FIELD_DESC);
        oprot.writeBool(struct.enableMesh);
        oprot.writeFieldEnd();
      }
      if (struct.isSetStartAuto()) {
        oprot.writeFieldBegin(START_AUTO_FIELD_DESC);
        oprot.writeBool(struct.startAuto);
        oprot.writeFieldEnd();
      }
      if (struct.typ != null) {
        if (struct.isSetTyp()) {
          oprot.writeFieldBegin(TYP_FIELD_DESC);
          oprot.writeI32(struct.typ.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.src != null) {
        if (struct.isSetSrc()) {
          oprot.writeFieldBegin(SRC_FIELD_DESC);
          struct.src.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.priority != null) {
        if (struct.isSetPriority()) {
          oprot.writeFieldBegin(PRIORITY_FIELD_DESC);
          struct.priority.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.location != null) {
        if (struct.isSetLocation()) {
          oprot.writeFieldBegin(LOCATION_FIELD_DESC);
          oprot.writeString(struct.location);
          oprot.writeFieldEnd();
        }
      }
      if (struct.plannedStartJobRoleIds != null) {
        if (struct.isSetPlannedStartJobRoleIds()) {
          oprot.writeFieldBegin(PLANNED_START_JOB_ROLE_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.plannedStartJobRoleIds.size()));
            for (String _iter3 : struct.plannedStartJobRoleIds)
            {
              oprot.writeString(_iter3);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.dupJobId != null) {
        if (struct.isSetDupJobId()) {
          oprot.writeFieldBegin(DUP_JOB_ID_FIELD_DESC);
          oprot.writeString(struct.dupJobId);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

}

