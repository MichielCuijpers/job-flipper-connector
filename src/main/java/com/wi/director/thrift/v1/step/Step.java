/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wi.director.thrift.v1.step;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * The Step struct
 */
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class Step implements org.apache.thrift.TBase<Step, Step._Fields>, java.io.Serializable, Cloneable, Comparable<Step> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Step");

  private static final org.apache.thrift.protocol.TField STEP_FIELDS_FIELD_DESC = new org.apache.thrift.protocol.TField("stepFields", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField ASSIGNEE_FIELD_DESC = new org.apache.thrift.protocol.TField("assignee", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField STEP_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("stepType", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField STEP_TYPE_DIFF_FIELD_DESC = new org.apache.thrift.protocol.TField("stepTypeDiff", org.apache.thrift.protocol.TType.STRUCT, (short)200);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new StepStandardSchemeFactory());
  }

  public List<Field> stepFields; // required
  public Assignee assignee; // optional
  /**
   * 
   * @see StepType
   */
  public StepType stepType; // required
  public StepTypeDiff stepTypeDiff; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STEP_FIELDS((short)1, "stepFields"),
    ASSIGNEE((short)2, "assignee"),
    /**
     * 
     * @see StepType
     */
    STEP_TYPE((short)3, "stepType"),
    STEP_TYPE_DIFF((short)200, "stepTypeDiff");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STEP_FIELDS
          return STEP_FIELDS;
        case 2: // ASSIGNEE
          return ASSIGNEE;
        case 3: // STEP_TYPE
          return STEP_TYPE;
        case 200: // STEP_TYPE_DIFF
          return STEP_TYPE_DIFF;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.ASSIGNEE,_Fields.STEP_TYPE_DIFF};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STEP_FIELDS, new org.apache.thrift.meta_data.FieldMetaData("stepFields", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Field.class))));
    tmpMap.put(_Fields.ASSIGNEE, new org.apache.thrift.meta_data.FieldMetaData("assignee", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Assignee.class)));
    tmpMap.put(_Fields.STEP_TYPE, new org.apache.thrift.meta_data.FieldMetaData("stepType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, StepType.class)));
    tmpMap.put(_Fields.STEP_TYPE_DIFF, new org.apache.thrift.meta_data.FieldMetaData("stepTypeDiff", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StepTypeDiff.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Step.class, metaDataMap);
  }

  public Step() {
    this.stepType = com.wi.director.thrift.v1.step.StepType.Normal;

  }

  public Step(
    List<Field> stepFields,
    StepType stepType)
  {
    this();
    this.stepFields = stepFields;
    this.stepType = stepType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Step(Step other) {
    if (other.isSetStepFields()) {
      List<Field> __this__stepFields = new ArrayList<Field>(other.stepFields.size());
      for (Field other_element : other.stepFields) {
        __this__stepFields.add(new Field(other_element));
      }
      this.stepFields = __this__stepFields;
    }
    if (other.isSetAssignee()) {
      this.assignee = new Assignee(other.assignee);
    }
    if (other.isSetStepType()) {
      this.stepType = other.stepType;
    }
    if (other.isSetStepTypeDiff()) {
      this.stepTypeDiff = new StepTypeDiff(other.stepTypeDiff);
    }
  }

  public Step deepCopy() {
    return new Step(this);
  }

  @Override
  public void clear() {
    this.stepFields = null;
    this.assignee = null;
    this.stepType = com.wi.director.thrift.v1.step.StepType.Normal;

    this.stepTypeDiff = null;
  }

  public int getStepFieldsSize() {
    return (this.stepFields == null) ? 0 : this.stepFields.size();
  }

  public java.util.Iterator<Field> getStepFieldsIterator() {
    return (this.stepFields == null) ? null : this.stepFields.iterator();
  }

  public void addToStepFields(Field elem) {
    if (this.stepFields == null) {
      this.stepFields = new ArrayList<Field>();
    }
    this.stepFields.add(elem);
  }

  public List<Field> getStepFields() {
    return this.stepFields;
  }

  public Step setStepFields(List<Field> stepFields) {
    this.stepFields = stepFields;
    return this;
  }

  public void unsetStepFields() {
    this.stepFields = null;
  }

  /** Returns true if field stepFields is set (has been assigned a value) and false otherwise */
  public boolean isSetStepFields() {
    return this.stepFields != null;
  }

  public void setStepFieldsIsSet(boolean value) {
    if (!value) {
      this.stepFields = null;
    }
  }

  public Assignee getAssignee() {
    return this.assignee;
  }

  public Step setAssignee(Assignee assignee) {
    this.assignee = assignee;
    return this;
  }

  public void unsetAssignee() {
    this.assignee = null;
  }

  /** Returns true if field assignee is set (has been assigned a value) and false otherwise */
  public boolean isSetAssignee() {
    return this.assignee != null;
  }

  public void setAssigneeIsSet(boolean value) {
    if (!value) {
      this.assignee = null;
    }
  }

  /**
   * 
   * @see StepType
   */
  public StepType getStepType() {
    return this.stepType;
  }

  /**
   * 
   * @see StepType
   */
  public Step setStepType(StepType stepType) {
    this.stepType = stepType;
    return this;
  }

  public void unsetStepType() {
    this.stepType = null;
  }

  /** Returns true if field stepType is set (has been assigned a value) and false otherwise */
  public boolean isSetStepType() {
    return this.stepType != null;
  }

  public void setStepTypeIsSet(boolean value) {
    if (!value) {
      this.stepType = null;
    }
  }

  public StepTypeDiff getStepTypeDiff() {
    return this.stepTypeDiff;
  }

  public Step setStepTypeDiff(StepTypeDiff stepTypeDiff) {
    this.stepTypeDiff = stepTypeDiff;
    return this;
  }

  public void unsetStepTypeDiff() {
    this.stepTypeDiff = null;
  }

  /** Returns true if field stepTypeDiff is set (has been assigned a value) and false otherwise */
  public boolean isSetStepTypeDiff() {
    return this.stepTypeDiff != null;
  }

  public void setStepTypeDiffIsSet(boolean value) {
    if (!value) {
      this.stepTypeDiff = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STEP_FIELDS:
      if (value == null) {
        unsetStepFields();
      } else {
        setStepFields((List<Field>)value);
      }
      break;

    case ASSIGNEE:
      if (value == null) {
        unsetAssignee();
      } else {
        setAssignee((Assignee)value);
      }
      break;

    case STEP_TYPE:
      if (value == null) {
        unsetStepType();
      } else {
        setStepType((StepType)value);
      }
      break;

    case STEP_TYPE_DIFF:
      if (value == null) {
        unsetStepTypeDiff();
      } else {
        setStepTypeDiff((StepTypeDiff)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STEP_FIELDS:
      return getStepFields();

    case ASSIGNEE:
      return getAssignee();

    case STEP_TYPE:
      return getStepType();

    case STEP_TYPE_DIFF:
      return getStepTypeDiff();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STEP_FIELDS:
      return isSetStepFields();
    case ASSIGNEE:
      return isSetAssignee();
    case STEP_TYPE:
      return isSetStepType();
    case STEP_TYPE_DIFF:
      return isSetStepTypeDiff();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Step)
      return this.equals((Step)that);
    return false;
  }

  public boolean equals(Step that) {
    if (that == null)
      return false;

    boolean this_present_stepFields = true && this.isSetStepFields();
    boolean that_present_stepFields = true && that.isSetStepFields();
    if (this_present_stepFields || that_present_stepFields) {
      if (!(this_present_stepFields && that_present_stepFields))
        return false;
      if (!this.stepFields.equals(that.stepFields))
        return false;
    }

    boolean this_present_assignee = true && this.isSetAssignee();
    boolean that_present_assignee = true && that.isSetAssignee();
    if (this_present_assignee || that_present_assignee) {
      if (!(this_present_assignee && that_present_assignee))
        return false;
      if (!this.assignee.equals(that.assignee))
        return false;
    }

    boolean this_present_stepType = true && this.isSetStepType();
    boolean that_present_stepType = true && that.isSetStepType();
    if (this_present_stepType || that_present_stepType) {
      if (!(this_present_stepType && that_present_stepType))
        return false;
      if (!this.stepType.equals(that.stepType))
        return false;
    }

    boolean this_present_stepTypeDiff = true && this.isSetStepTypeDiff();
    boolean that_present_stepTypeDiff = true && that.isSetStepTypeDiff();
    if (this_present_stepTypeDiff || that_present_stepTypeDiff) {
      if (!(this_present_stepTypeDiff && that_present_stepTypeDiff))
        return false;
      if (!this.stepTypeDiff.equals(that.stepTypeDiff))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_stepFields = true && (isSetStepFields());
    list.add(present_stepFields);
    if (present_stepFields)
      list.add(stepFields);

    boolean present_assignee = true && (isSetAssignee());
    list.add(present_assignee);
    if (present_assignee)
      list.add(assignee);

    boolean present_stepType = true && (isSetStepType());
    list.add(present_stepType);
    if (present_stepType)
      list.add(stepType.getValue());

    boolean present_stepTypeDiff = true && (isSetStepTypeDiff());
    list.add(present_stepTypeDiff);
    if (present_stepTypeDiff)
      list.add(stepTypeDiff);

    return list.hashCode();
  }

  @Override
  public int compareTo(Step other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetStepFields()).compareTo(other.isSetStepFields());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStepFields()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stepFields, other.stepFields);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAssignee()).compareTo(other.isSetAssignee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAssignee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.assignee, other.assignee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStepType()).compareTo(other.isSetStepType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStepType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stepType, other.stepType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStepTypeDiff()).compareTo(other.isSetStepTypeDiff());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStepTypeDiff()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stepTypeDiff, other.stepTypeDiff);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Step(");
    boolean first = true;

    sb.append("stepFields:");
    if (this.stepFields == null) {
      sb.append("null");
    } else {
      sb.append(this.stepFields);
    }
    first = false;
    if (isSetAssignee()) {
      if (!first) sb.append(", ");
      sb.append("assignee:");
      if (this.assignee == null) {
        sb.append("null");
      } else {
        sb.append(this.assignee);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("stepType:");
    if (this.stepType == null) {
      sb.append("null");
    } else {
      sb.append(this.stepType);
    }
    first = false;
    if (isSetStepTypeDiff()) {
      if (!first) sb.append(", ");
      sb.append("stepTypeDiff:");
      if (this.stepTypeDiff == null) {
        sb.append("null");
      } else {
        sb.append(this.stepTypeDiff);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (assignee != null) {
      assignee.validate();
    }
    if (stepTypeDiff != null) {
      stepTypeDiff.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StepStandardSchemeFactory implements SchemeFactory {
    public StepStandardScheme getScheme() {
      return new StepStandardScheme();
    }
  }

  private static class StepStandardScheme extends StandardScheme<Step> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Step struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STEP_FIELDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.stepFields = new ArrayList<Field>(_list0.size);
                Field _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new Field();
                  _elem1.read(iprot);
                  struct.stepFields.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setStepFieldsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ASSIGNEE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.assignee = new Assignee();
              struct.assignee.read(iprot);
              struct.setAssigneeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STEP_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.stepType = com.wi.director.thrift.v1.step.StepType.findByValue(iprot.readI32());
              struct.setStepTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 200: // STEP_TYPE_DIFF
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.stepTypeDiff = new StepTypeDiff();
              struct.stepTypeDiff.read(iprot);
              struct.setStepTypeDiffIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Step struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.stepFields != null) {
        oprot.writeFieldBegin(STEP_FIELDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.stepFields.size()));
          for (Field _iter3 : struct.stepFields)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.assignee != null) {
        if (struct.isSetAssignee()) {
          oprot.writeFieldBegin(ASSIGNEE_FIELD_DESC);
          struct.assignee.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.stepType != null) {
        oprot.writeFieldBegin(STEP_TYPE_FIELD_DESC);
        oprot.writeI32(struct.stepType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.stepTypeDiff != null) {
        if (struct.isSetStepTypeDiff()) {
          oprot.writeFieldBegin(STEP_TYPE_DIFF_FIELD_DESC);
          struct.stepTypeDiff.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

}

