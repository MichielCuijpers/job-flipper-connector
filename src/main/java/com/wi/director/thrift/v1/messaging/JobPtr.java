/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wi.director.thrift.v1.messaging;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class JobPtr implements org.apache.thrift.TBase<JobPtr, JobPtr._Fields>, java.io.Serializable, Cloneable, Comparable<JobPtr> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("JobPtr");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField JOB_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("jobType", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField STEP_PTR_FIELD_DESC = new org.apache.thrift.protocol.TField("stepPtr", org.apache.thrift.protocol.TType.STRUCT, (short)10);
  private static final org.apache.thrift.protocol.TField STEP_GROUP_PTR_FIELD_DESC = new org.apache.thrift.protocol.TField("stepGroupPtr", org.apache.thrift.protocol.TType.STRUCT, (short)11);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new JobPtrStandardSchemeFactory());
  }

  /**
   * id of the job this struct is referencing.
   */
  public String id; // required
  /**
   * type of this job <br>
   * reason we don't use job type enum is to avoid circular dependecy (job already refers here) <br>
   * also since default jobType is 0 which happens to be the Normal type that is the only possible <br>
   * one (issue referring to source normal job), before the advent of on-demand instances starting <br>
   * from on-demand jobs (normal referring to source ad hoc job).
   */
  public int jobType; // required
  public StepPtr stepPtr; // optional
  public StepGroupPtr stepGroupPtr; // optional
  public String title; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * id of the job this struct is referencing.
     */
    ID((short)1, "id"),
    /**
     * type of this job <br>
     * reason we don't use job type enum is to avoid circular dependecy (job already refers here) <br>
     * also since default jobType is 0 which happens to be the Normal type that is the only possible <br>
     * one (issue referring to source normal job), before the advent of on-demand instances starting <br>
     * from on-demand jobs (normal referring to source ad hoc job).
     */
    JOB_TYPE((short)2, "jobType"),
    STEP_PTR((short)10, "stepPtr"),
    STEP_GROUP_PTR((short)11, "stepGroupPtr"),
    TITLE((short)12, "title");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // JOB_TYPE
          return JOB_TYPE;
        case 10: // STEP_PTR
          return STEP_PTR;
        case 11: // STEP_GROUP_PTR
          return STEP_GROUP_PTR;
        case 12: // TITLE
          return TITLE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __JOBTYPE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.STEP_PTR,_Fields.STEP_GROUP_PTR,_Fields.TITLE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.JOB_TYPE, new org.apache.thrift.meta_data.FieldMetaData("jobType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STEP_PTR, new org.apache.thrift.meta_data.FieldMetaData("stepPtr", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StepPtr.class)));
    tmpMap.put(_Fields.STEP_GROUP_PTR, new org.apache.thrift.meta_data.FieldMetaData("stepGroupPtr", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StepGroupPtr.class)));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(JobPtr.class, metaDataMap);
  }

  public JobPtr() {
  }

  public JobPtr(
    String id,
    int jobType)
  {
    this();
    this.id = id;
    this.jobType = jobType;
    setJobTypeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public JobPtr(JobPtr other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = other.id;
    }
    this.jobType = other.jobType;
    if (other.isSetStepPtr()) {
      this.stepPtr = new StepPtr(other.stepPtr);
    }
    if (other.isSetStepGroupPtr()) {
      this.stepGroupPtr = new StepGroupPtr(other.stepGroupPtr);
    }
    if (other.isSetTitle()) {
      this.title = other.title;
    }
  }

  public JobPtr deepCopy() {
    return new JobPtr(this);
  }

  @Override
  public void clear() {
    this.id = null;
    setJobTypeIsSet(false);
    this.jobType = 0;
    this.stepPtr = null;
    this.stepGroupPtr = null;
    this.title = null;
  }

  /**
   * id of the job this struct is referencing.
   */
  public String getId() {
    return this.id;
  }

  /**
   * id of the job this struct is referencing.
   */
  public JobPtr setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  /**
   * type of this job <br>
   * reason we don't use job type enum is to avoid circular dependecy (job already refers here) <br>
   * also since default jobType is 0 which happens to be the Normal type that is the only possible <br>
   * one (issue referring to source normal job), before the advent of on-demand instances starting <br>
   * from on-demand jobs (normal referring to source ad hoc job).
   */
  public int getJobType() {
    return this.jobType;
  }

  /**
   * type of this job <br>
   * reason we don't use job type enum is to avoid circular dependecy (job already refers here) <br>
   * also since default jobType is 0 which happens to be the Normal type that is the only possible <br>
   * one (issue referring to source normal job), before the advent of on-demand instances starting <br>
   * from on-demand jobs (normal referring to source ad hoc job).
   */
  public JobPtr setJobType(int jobType) {
    this.jobType = jobType;
    setJobTypeIsSet(true);
    return this;
  }

  public void unsetJobType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __JOBTYPE_ISSET_ID);
  }

  /** Returns true if field jobType is set (has been assigned a value) and false otherwise */
  public boolean isSetJobType() {
    return EncodingUtils.testBit(__isset_bitfield, __JOBTYPE_ISSET_ID);
  }

  public void setJobTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __JOBTYPE_ISSET_ID, value);
  }

  public StepPtr getStepPtr() {
    return this.stepPtr;
  }

  public JobPtr setStepPtr(StepPtr stepPtr) {
    this.stepPtr = stepPtr;
    return this;
  }

  public void unsetStepPtr() {
    this.stepPtr = null;
  }

  /** Returns true if field stepPtr is set (has been assigned a value) and false otherwise */
  public boolean isSetStepPtr() {
    return this.stepPtr != null;
  }

  public void setStepPtrIsSet(boolean value) {
    if (!value) {
      this.stepPtr = null;
    }
  }

  public StepGroupPtr getStepGroupPtr() {
    return this.stepGroupPtr;
  }

  public JobPtr setStepGroupPtr(StepGroupPtr stepGroupPtr) {
    this.stepGroupPtr = stepGroupPtr;
    return this;
  }

  public void unsetStepGroupPtr() {
    this.stepGroupPtr = null;
  }

  /** Returns true if field stepGroupPtr is set (has been assigned a value) and false otherwise */
  public boolean isSetStepGroupPtr() {
    return this.stepGroupPtr != null;
  }

  public void setStepGroupPtrIsSet(boolean value) {
    if (!value) {
      this.stepGroupPtr = null;
    }
  }

  public String getTitle() {
    return this.title;
  }

  public JobPtr setTitle(String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case JOB_TYPE:
      if (value == null) {
        unsetJobType();
      } else {
        setJobType((Integer)value);
      }
      break;

    case STEP_PTR:
      if (value == null) {
        unsetStepPtr();
      } else {
        setStepPtr((StepPtr)value);
      }
      break;

    case STEP_GROUP_PTR:
      if (value == null) {
        unsetStepGroupPtr();
      } else {
        setStepGroupPtr((StepGroupPtr)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case JOB_TYPE:
      return getJobType();

    case STEP_PTR:
      return getStepPtr();

    case STEP_GROUP_PTR:
      return getStepGroupPtr();

    case TITLE:
      return getTitle();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case JOB_TYPE:
      return isSetJobType();
    case STEP_PTR:
      return isSetStepPtr();
    case STEP_GROUP_PTR:
      return isSetStepGroupPtr();
    case TITLE:
      return isSetTitle();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof JobPtr)
      return this.equals((JobPtr)that);
    return false;
  }

  public boolean equals(JobPtr that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_jobType = true;
    boolean that_present_jobType = true;
    if (this_present_jobType || that_present_jobType) {
      if (!(this_present_jobType && that_present_jobType))
        return false;
      if (this.jobType != that.jobType)
        return false;
    }

    boolean this_present_stepPtr = true && this.isSetStepPtr();
    boolean that_present_stepPtr = true && that.isSetStepPtr();
    if (this_present_stepPtr || that_present_stepPtr) {
      if (!(this_present_stepPtr && that_present_stepPtr))
        return false;
      if (!this.stepPtr.equals(that.stepPtr))
        return false;
    }

    boolean this_present_stepGroupPtr = true && this.isSetStepGroupPtr();
    boolean that_present_stepGroupPtr = true && that.isSetStepGroupPtr();
    if (this_present_stepGroupPtr || that_present_stepGroupPtr) {
      if (!(this_present_stepGroupPtr && that_present_stepGroupPtr))
        return false;
      if (!this.stepGroupPtr.equals(that.stepGroupPtr))
        return false;
    }

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_jobType = true;
    list.add(present_jobType);
    if (present_jobType)
      list.add(jobType);

    boolean present_stepPtr = true && (isSetStepPtr());
    list.add(present_stepPtr);
    if (present_stepPtr)
      list.add(stepPtr);

    boolean present_stepGroupPtr = true && (isSetStepGroupPtr());
    list.add(present_stepGroupPtr);
    if (present_stepGroupPtr)
      list.add(stepGroupPtr);

    boolean present_title = true && (isSetTitle());
    list.add(present_title);
    if (present_title)
      list.add(title);

    return list.hashCode();
  }

  @Override
  public int compareTo(JobPtr other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJobType()).compareTo(other.isSetJobType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJobType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobType, other.jobType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStepPtr()).compareTo(other.isSetStepPtr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStepPtr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stepPtr, other.stepPtr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStepGroupPtr()).compareTo(other.isSetStepGroupPtr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStepGroupPtr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stepGroupPtr, other.stepGroupPtr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTitle()).compareTo(other.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("JobPtr(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("jobType:");
    sb.append(this.jobType);
    first = false;
    if (isSetStepPtr()) {
      if (!first) sb.append(", ");
      sb.append("stepPtr:");
      if (this.stepPtr == null) {
        sb.append("null");
      } else {
        sb.append(this.stepPtr);
      }
      first = false;
    }
    if (isSetStepGroupPtr()) {
      if (!first) sb.append(", ");
      sb.append("stepGroupPtr:");
      if (this.stepGroupPtr == null) {
        sb.append("null");
      } else {
        sb.append(this.stepGroupPtr);
      }
      first = false;
    }
    if (isSetTitle()) {
      if (!first) sb.append(", ");
      sb.append("title:");
      if (this.title == null) {
        sb.append("null");
      } else {
        sb.append(this.title);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (stepPtr != null) {
      stepPtr.validate();
    }
    if (stepGroupPtr != null) {
      stepGroupPtr.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class JobPtrStandardSchemeFactory implements SchemeFactory {
    public JobPtrStandardScheme getScheme() {
      return new JobPtrStandardScheme();
    }
  }

  private static class JobPtrStandardScheme extends StandardScheme<JobPtr> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, JobPtr struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // JOB_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.jobType = iprot.readI32();
              struct.setJobTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // STEP_PTR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.stepPtr = new StepPtr();
              struct.stepPtr.read(iprot);
              struct.setStepPtrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // STEP_GROUP_PTR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.stepGroupPtr = new StepGroupPtr();
              struct.stepGroupPtr.read(iprot);
              struct.setStepGroupPtrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, JobPtr struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(JOB_TYPE_FIELD_DESC);
      oprot.writeI32(struct.jobType);
      oprot.writeFieldEnd();
      if (struct.stepPtr != null) {
        if (struct.isSetStepPtr()) {
          oprot.writeFieldBegin(STEP_PTR_FIELD_DESC);
          struct.stepPtr.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.stepGroupPtr != null) {
        if (struct.isSetStepGroupPtr()) {
          oprot.writeFieldBegin(STEP_GROUP_PTR_FIELD_DESC);
          struct.stepGroupPtr.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.title != null) {
        if (struct.isSetTitle()) {
          oprot.writeFieldBegin(TITLE_FIELD_DESC);
          oprot.writeString(struct.title);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

}

