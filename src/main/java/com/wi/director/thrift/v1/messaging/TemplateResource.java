/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wi.director.thrift.v1.messaging;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class TemplateResource implements org.apache.thrift.TBase<TemplateResource, TemplateResource._Fields>, java.io.Serializable, Cloneable, Comparable<TemplateResource> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TemplateResource");

  private static final org.apache.thrift.protocol.TField TYP_FIELD_DESC = new org.apache.thrift.protocol.TField("typ", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField LABEL_FIELD_DESC = new org.apache.thrift.protocol.TField("label", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PTR_FIELD_DESC = new org.apache.thrift.protocol.TField("ptr", org.apache.thrift.protocol.TType.STRUCT, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TemplateResourceStandardSchemeFactory());
  }

  /**
   * 
   * @see ResourceType
   */
  public ResourceType typ; // required
  /**
   * Value depends on ResourceType value
   * USER, JOB, DOCUMENT, JOB_ROLE:
   *    id of resource
   * STEP (includes step groups):
   *    jobBasedStepId of resource
   * FIELD:
   *    comma separated jobBasedStepId of
   *    parent step and fieldId
   * ALL_USERS_IN_JOB:
   *    empty
   * OTHER:
   *    empty
   */
  public String id; // required
  public String label; // required
  /**
   *  * This will be set if ResourceType is Other
   * *
   */
  public ResourcePtr ptr; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see ResourceType
     */
    TYP((short)1, "typ"),
    /**
     * Value depends on ResourceType value
     * USER, JOB, DOCUMENT, JOB_ROLE:
     *    id of resource
     * STEP (includes step groups):
     *    jobBasedStepId of resource
     * FIELD:
     *    comma separated jobBasedStepId of
     *    parent step and fieldId
     * ALL_USERS_IN_JOB:
     *    empty
     * OTHER:
     *    empty
     */
    ID((short)2, "id"),
    LABEL((short)3, "label"),
    /**
     *  * This will be set if ResourceType is Other
     * *
     */
    PTR((short)4, "ptr");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TYP
          return TYP;
        case 2: // ID
          return ID;
        case 3: // LABEL
          return LABEL;
        case 4: // PTR
          return PTR;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.PTR};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TYP, new org.apache.thrift.meta_data.FieldMetaData("typ", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ResourceType.class)));
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LABEL, new org.apache.thrift.meta_data.FieldMetaData("label", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PTR, new org.apache.thrift.meta_data.FieldMetaData("ptr", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResourcePtr.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TemplateResource.class, metaDataMap);
  }

  public TemplateResource() {
  }

  public TemplateResource(
    ResourceType typ,
    String id,
    String label)
  {
    this();
    this.typ = typ;
    this.id = id;
    this.label = label;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TemplateResource(TemplateResource other) {
    if (other.isSetTyp()) {
      this.typ = other.typ;
    }
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetLabel()) {
      this.label = other.label;
    }
    if (other.isSetPtr()) {
      this.ptr = new ResourcePtr(other.ptr);
    }
  }

  public TemplateResource deepCopy() {
    return new TemplateResource(this);
  }

  @Override
  public void clear() {
    this.typ = null;
    this.id = null;
    this.label = null;
    this.ptr = null;
  }

  /**
   * 
   * @see ResourceType
   */
  public ResourceType getTyp() {
    return this.typ;
  }

  /**
   * 
   * @see ResourceType
   */
  public TemplateResource setTyp(ResourceType typ) {
    this.typ = typ;
    return this;
  }

  public void unsetTyp() {
    this.typ = null;
  }

  /** Returns true if field typ is set (has been assigned a value) and false otherwise */
  public boolean isSetTyp() {
    return this.typ != null;
  }

  public void setTypIsSet(boolean value) {
    if (!value) {
      this.typ = null;
    }
  }

  /**
   * Value depends on ResourceType value
   * USER, JOB, DOCUMENT, JOB_ROLE:
   *    id of resource
   * STEP (includes step groups):
   *    jobBasedStepId of resource
   * FIELD:
   *    comma separated jobBasedStepId of
   *    parent step and fieldId
   * ALL_USERS_IN_JOB:
   *    empty
   * OTHER:
   *    empty
   */
  public String getId() {
    return this.id;
  }

  /**
   * Value depends on ResourceType value
   * USER, JOB, DOCUMENT, JOB_ROLE:
   *    id of resource
   * STEP (includes step groups):
   *    jobBasedStepId of resource
   * FIELD:
   *    comma separated jobBasedStepId of
   *    parent step and fieldId
   * ALL_USERS_IN_JOB:
   *    empty
   * OTHER:
   *    empty
   */
  public TemplateResource setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public String getLabel() {
    return this.label;
  }

  public TemplateResource setLabel(String label) {
    this.label = label;
    return this;
  }

  public void unsetLabel() {
    this.label = null;
  }

  /** Returns true if field label is set (has been assigned a value) and false otherwise */
  public boolean isSetLabel() {
    return this.label != null;
  }

  public void setLabelIsSet(boolean value) {
    if (!value) {
      this.label = null;
    }
  }

  /**
   *  * This will be set if ResourceType is Other
   * *
   */
  public ResourcePtr getPtr() {
    return this.ptr;
  }

  /**
   *  * This will be set if ResourceType is Other
   * *
   */
  public TemplateResource setPtr(ResourcePtr ptr) {
    this.ptr = ptr;
    return this;
  }

  public void unsetPtr() {
    this.ptr = null;
  }

  /** Returns true if field ptr is set (has been assigned a value) and false otherwise */
  public boolean isSetPtr() {
    return this.ptr != null;
  }

  public void setPtrIsSet(boolean value) {
    if (!value) {
      this.ptr = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TYP:
      if (value == null) {
        unsetTyp();
      } else {
        setTyp((ResourceType)value);
      }
      break;

    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case LABEL:
      if (value == null) {
        unsetLabel();
      } else {
        setLabel((String)value);
      }
      break;

    case PTR:
      if (value == null) {
        unsetPtr();
      } else {
        setPtr((ResourcePtr)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TYP:
      return getTyp();

    case ID:
      return getId();

    case LABEL:
      return getLabel();

    case PTR:
      return getPtr();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TYP:
      return isSetTyp();
    case ID:
      return isSetId();
    case LABEL:
      return isSetLabel();
    case PTR:
      return isSetPtr();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TemplateResource)
      return this.equals((TemplateResource)that);
    return false;
  }

  public boolean equals(TemplateResource that) {
    if (that == null)
      return false;

    boolean this_present_typ = true && this.isSetTyp();
    boolean that_present_typ = true && that.isSetTyp();
    if (this_present_typ || that_present_typ) {
      if (!(this_present_typ && that_present_typ))
        return false;
      if (!this.typ.equals(that.typ))
        return false;
    }

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_label = true && this.isSetLabel();
    boolean that_present_label = true && that.isSetLabel();
    if (this_present_label || that_present_label) {
      if (!(this_present_label && that_present_label))
        return false;
      if (!this.label.equals(that.label))
        return false;
    }

    boolean this_present_ptr = true && this.isSetPtr();
    boolean that_present_ptr = true && that.isSetPtr();
    if (this_present_ptr || that_present_ptr) {
      if (!(this_present_ptr && that_present_ptr))
        return false;
      if (!this.ptr.equals(that.ptr))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_typ = true && (isSetTyp());
    list.add(present_typ);
    if (present_typ)
      list.add(typ.getValue());

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_label = true && (isSetLabel());
    list.add(present_label);
    if (present_label)
      list.add(label);

    boolean present_ptr = true && (isSetPtr());
    list.add(present_ptr);
    if (present_ptr)
      list.add(ptr);

    return list.hashCode();
  }

  @Override
  public int compareTo(TemplateResource other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTyp()).compareTo(other.isSetTyp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTyp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.typ, other.typ);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLabel()).compareTo(other.isSetLabel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLabel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.label, other.label);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPtr()).compareTo(other.isSetPtr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPtr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ptr, other.ptr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TemplateResource(");
    boolean first = true;

    sb.append("typ:");
    if (this.typ == null) {
      sb.append("null");
    } else {
      sb.append(this.typ);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("label:");
    if (this.label == null) {
      sb.append("null");
    } else {
      sb.append(this.label);
    }
    first = false;
    if (isSetPtr()) {
      if (!first) sb.append(", ");
      sb.append("ptr:");
      if (this.ptr == null) {
        sb.append("null");
      } else {
        sb.append(this.ptr);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TemplateResourceStandardSchemeFactory implements SchemeFactory {
    public TemplateResourceStandardScheme getScheme() {
      return new TemplateResourceStandardScheme();
    }
  }

  private static class TemplateResourceStandardScheme extends StandardScheme<TemplateResource> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TemplateResource struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TYP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.typ = com.wi.director.thrift.v1.messaging.ResourceType.findByValue(iprot.readI32());
              struct.setTypIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LABEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.label = iprot.readString();
              struct.setLabelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PTR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ptr = new ResourcePtr();
              struct.ptr.read(iprot);
              struct.setPtrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TemplateResource struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.typ != null) {
        oprot.writeFieldBegin(TYP_FIELD_DESC);
        oprot.writeI32(struct.typ.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.label != null) {
        oprot.writeFieldBegin(LABEL_FIELD_DESC);
        oprot.writeString(struct.label);
        oprot.writeFieldEnd();
      }
      if (struct.ptr != null) {
        if (struct.isSetPtr()) {
          oprot.writeFieldBegin(PTR_FIELD_DESC);
          struct.ptr.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

}

