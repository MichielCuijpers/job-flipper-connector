/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wi.director.thrift.v1.job;


import java.util.Map;
import java.util.HashMap;
import org.apache.thrift.TEnum;

public enum JobDeviationType implements org.apache.thrift.TEnum {
  /**
   * 1. Inputs marked N/A
   */
  DEVIATION_INPUT_NA(0),
  /**
   * 2. Steps marked N/A
   */
  DEVIATION_STEP_NA(1),
  /**
   * 3. Step groups marked N/A
   */
  DEVIATION_STEP_GROUP_NA(2),
  /**
   * 4. Templates marked N/A
   */
  DEVIATION_TEMPLATE_NA(3),
  /**
   * 5. Inputs marked empty if parent step is completed
   */
  DEVIATION_INPUT_EMPTY(4),
  /**
   * 6. Inputs out of range but is not N/A
   */
  DEVIATION_INPUT_RANGE(5),
  /**
   * 7. Incomplete steps if job is completed
   */
  DEVIATION_STEP_INCOMPLETE(6),
  /**
   * 8. Unused conditionals if job is completed
   */
  DEVIATION_CONDITIONAL_INCOMPLETE(7),
  /**
   * 9. Calculated fields missing underlying input fields (one or more empty) if parent step is completed
   */
  DEVIATION_CALCULATED_INPUT_EMPTY(8);

  private final int value;

  private JobDeviationType(int value) {
    this.value = value;
  }

  /**
   * Get the integer value of this enum value, as defined in the Thrift IDL.
   */
  public int getValue() {
    return value;
  }

  /**
   * Find a the enum type by its integer value, as defined in the Thrift IDL.
   * @return null if the value is not found.
   */
  public static JobDeviationType findByValue(int value) { 
    switch (value) {
      case 0:
        return DEVIATION_INPUT_NA;
      case 1:
        return DEVIATION_STEP_NA;
      case 2:
        return DEVIATION_STEP_GROUP_NA;
      case 3:
        return DEVIATION_TEMPLATE_NA;
      case 4:
        return DEVIATION_INPUT_EMPTY;
      case 5:
        return DEVIATION_INPUT_RANGE;
      case 6:
        return DEVIATION_STEP_INCOMPLETE;
      case 7:
        return DEVIATION_CONDITIONAL_INCOMPLETE;
      case 8:
        return DEVIATION_CALCULATED_INPUT_EMPTY;
      default:
        return null;
    }
  }
}
