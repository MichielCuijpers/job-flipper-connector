/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wi.director.thrift.v1.job;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * Returns currentUser's jobs by default (teamId/userId unset).
 * If teamId set, returns all jobs for that team.
 * If teamId and userId set, returns all jobs for that team containing that user.
 * If templateMetadata or jobMetadata is set, teamId must be set.
 * 
 */
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class JobWhereOpts implements org.apache.thrift.TBase<JobWhereOpts, JobWhereOpts._Fields>, java.io.Serializable, Cloneable, Comparable<JobWhereOpts> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("JobWhereOpts");

  private static final org.apache.thrift.protocol.TField TEAM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("teamId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField IS_COMPLETE_FIELD_DESC = new org.apache.thrift.protocol.TField("isComplete", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField IS_PREVIEW_FIELD_DESC = new org.apache.thrift.protocol.TField("isPreview", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField IS_STARTED_FIELD_DESC = new org.apache.thrift.protocol.TField("isStarted", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField TXT_FIELD_DESC = new org.apache.thrift.protocol.TField("txt", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField TEMPLATE_METADATA_FIELD_DESC = new org.apache.thrift.protocol.TField("templateMetadata", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField CREATOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("creatorId", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField PLANNER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("plannerId", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField JOB_METADATA_FIELD_DESC = new org.apache.thrift.protocol.TField("jobMetadata", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField MODIFIED_SINCE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("modifiedSinceTime", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField MODIFIED_BEFORE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("modifiedBeforeTime", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField INCLUDE_RECURRING_JOBS_FIELD_DESC = new org.apache.thrift.protocol.TField("includeRecurringJobs", org.apache.thrift.protocol.TType.BOOL, (short)13);
  private static final org.apache.thrift.protocol.TField JOB_TYPES_FIELD_DESC = new org.apache.thrift.protocol.TField("jobTypes", org.apache.thrift.protocol.TType.SET, (short)14);
  private static final org.apache.thrift.protocol.TField ARCHIVED_ONLY_FIELD_DESC = new org.apache.thrift.protocol.TField("archivedOnly", org.apache.thrift.protocol.TType.BOOL, (short)15);
  private static final org.apache.thrift.protocol.TField MIN_CREATED_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("minCreatedAt", org.apache.thrift.protocol.TType.I64, (short)16);
  private static final org.apache.thrift.protocol.TField MAX_CREATED_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("maxCreatedAt", org.apache.thrift.protocol.TType.I64, (short)17);
  private static final org.apache.thrift.protocol.TField STARTED_SINCE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startedSinceTime", org.apache.thrift.protocol.TType.I64, (short)18);
  private static final org.apache.thrift.protocol.TField STARTED_BEFORE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startedBeforeTime", org.apache.thrift.protocol.TType.I64, (short)19);
  private static final org.apache.thrift.protocol.TField SOURCE_TEMPLATE_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("sourceTemplateIds", org.apache.thrift.protocol.TType.LIST, (short)21);
  private static final org.apache.thrift.protocol.TField ALL_SOURCE_TEMPLATE_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("allSourceTemplateIds", org.apache.thrift.protocol.TType.BOOL, (short)28);
  private static final org.apache.thrift.protocol.TField PRIORITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("priorities", org.apache.thrift.protocol.TType.LIST, (short)22);
  private static final org.apache.thrift.protocol.TField SRC_JOB_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("srcJobIds", org.apache.thrift.protocol.TType.LIST, (short)23);
  private static final org.apache.thrift.protocol.TField COMPLETED_SINCE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("completedSinceTime", org.apache.thrift.protocol.TType.I64, (short)24);
  private static final org.apache.thrift.protocol.TField COMPLETED_BEFORE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("completedBeforeTime", org.apache.thrift.protocol.TType.I64, (short)25);
  private static final org.apache.thrift.protocol.TField TEAM_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("teamIds", org.apache.thrift.protocol.TType.LIST, (short)26);
  private static final org.apache.thrift.protocol.TField ALL_USER_TEAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("allUserTeams", org.apache.thrift.protocol.TType.BOOL, (short)27);
  private static final org.apache.thrift.protocol.TField PAGE_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("pageReq", org.apache.thrift.protocol.TType.STRUCT, (short)20);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new JobWhereOptsStandardSchemeFactory());
  }

  public String teamId; // optional
  public String userId; // optional
  public boolean isComplete; // optional
  public boolean isPreview; // optional
  public boolean isStarted; // required
  public JobTextSearch txt; // optional
  /**
   * See <a href="metadata.html#Struct_MetadataValue">MetadataValue</a> for specific metadata filter criteria
   */
  public List<com.wi.director.thrift.v1.metadata.MetadataEntry> templateMetadata; // optional
  /**
   * If not self, teamId required. Will yield a positive match only for the creator of the job
   */
  public String creatorId; // optional
  /**
   * If not self, teamId required. Will match jobs where the plannerId == the userId of ANY of
   * job planners belonging to that job
   */
  public String plannerId; // optional
  public List<com.wi.director.thrift.v1.metadata.MetadataEntry> jobMetadata; // optional
  public long modifiedSinceTime; // optional
  public long modifiedBeforeTime; // optional
  public boolean includeRecurringJobs; // optional
  /**
   * If set, will only include the selected JobTypes, and will override includeRecurringJobs
   * If unset, will not include issues, and abide by includeRecurringJobs
   */
  public Set<JobType> jobTypes; // optional
  /**
   * If set to true, will only include archived jobs
   * If set to false, will include all jobs
   * If unset (default), will only include active jobs
   */
  public boolean archivedOnly; // optional
  /**
   * Allow users to filter jobs by their createdAt timestamp
   */
  public long minCreatedAt; // optional
  public long maxCreatedAt; // optional
  public long startedSinceTime; // optional
  public long startedBeforeTime; // optional
  public List<String> sourceTemplateIds; // optional
  /**
   * When set to true, jobs matched must contain all `sourceTemplateIds` defined.
   * By default, they are multi-select, i.e. jobs with any of `sourceTemplateIds` are matched.
   */
  public boolean allSourceTemplateIds; // optional
  /**
   * For issues only, must only use issue job type in jobTypes
   */
  public List<Integer> priorities; // optional
  /**
   * For issues only, must only use issue job type in jobTypes
   */
  public List<String> srcJobIds; // optional
  public long completedSinceTime; // optional
  public long completedBeforeTime; // optional
  /**
   * Overrides teamId when set:
   * queries across teams user has admin permission on
   */
  public List<String> teamIds; // optional
  /**
   * Overrides teamIds and teamId when set: <br>
   * Queries across ALL teams user has permissions on <br>
   * This includes admin permissions for all jobs and <br>
   * executor permissions for on demand jobs
   */
  public boolean allUserTeams; // optional
  public com.wi.director.thrift.v1.common.PageReq pageReq; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TEAM_ID((short)1, "teamId"),
    USER_ID((short)2, "userId"),
    IS_COMPLETE((short)3, "isComplete"),
    IS_PREVIEW((short)4, "isPreview"),
    IS_STARTED((short)5, "isStarted"),
    TXT((short)6, "txt"),
    /**
     * See <a href="metadata.html#Struct_MetadataValue">MetadataValue</a> for specific metadata filter criteria
     */
    TEMPLATE_METADATA((short)7, "templateMetadata"),
    /**
     * If not self, teamId required. Will yield a positive match only for the creator of the job
     */
    CREATOR_ID((short)8, "creatorId"),
    /**
     * If not self, teamId required. Will match jobs where the plannerId == the userId of ANY of
     * job planners belonging to that job
     */
    PLANNER_ID((short)9, "plannerId"),
    JOB_METADATA((short)10, "jobMetadata"),
    MODIFIED_SINCE_TIME((short)11, "modifiedSinceTime"),
    MODIFIED_BEFORE_TIME((short)12, "modifiedBeforeTime"),
    INCLUDE_RECURRING_JOBS((short)13, "includeRecurringJobs"),
    /**
     * If set, will only include the selected JobTypes, and will override includeRecurringJobs
     * If unset, will not include issues, and abide by includeRecurringJobs
     */
    JOB_TYPES((short)14, "jobTypes"),
    /**
     * If set to true, will only include archived jobs
     * If set to false, will include all jobs
     * If unset (default), will only include active jobs
     */
    ARCHIVED_ONLY((short)15, "archivedOnly"),
    /**
     * Allow users to filter jobs by their createdAt timestamp
     */
    MIN_CREATED_AT((short)16, "minCreatedAt"),
    MAX_CREATED_AT((short)17, "maxCreatedAt"),
    STARTED_SINCE_TIME((short)18, "startedSinceTime"),
    STARTED_BEFORE_TIME((short)19, "startedBeforeTime"),
    SOURCE_TEMPLATE_IDS((short)21, "sourceTemplateIds"),
    /**
     * When set to true, jobs matched must contain all `sourceTemplateIds` defined.
     * By default, they are multi-select, i.e. jobs with any of `sourceTemplateIds` are matched.
     */
    ALL_SOURCE_TEMPLATE_IDS((short)28, "allSourceTemplateIds"),
    /**
     * For issues only, must only use issue job type in jobTypes
     */
    PRIORITIES((short)22, "priorities"),
    /**
     * For issues only, must only use issue job type in jobTypes
     */
    SRC_JOB_IDS((short)23, "srcJobIds"),
    COMPLETED_SINCE_TIME((short)24, "completedSinceTime"),
    COMPLETED_BEFORE_TIME((short)25, "completedBeforeTime"),
    /**
     * Overrides teamId when set:
     * queries across teams user has admin permission on
     */
    TEAM_IDS((short)26, "teamIds"),
    /**
     * Overrides teamIds and teamId when set: <br>
     * Queries across ALL teams user has permissions on <br>
     * This includes admin permissions for all jobs and <br>
     * executor permissions for on demand jobs
     */
    ALL_USER_TEAMS((short)27, "allUserTeams"),
    PAGE_REQ((short)20, "pageReq");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TEAM_ID
          return TEAM_ID;
        case 2: // USER_ID
          return USER_ID;
        case 3: // IS_COMPLETE
          return IS_COMPLETE;
        case 4: // IS_PREVIEW
          return IS_PREVIEW;
        case 5: // IS_STARTED
          return IS_STARTED;
        case 6: // TXT
          return TXT;
        case 7: // TEMPLATE_METADATA
          return TEMPLATE_METADATA;
        case 8: // CREATOR_ID
          return CREATOR_ID;
        case 9: // PLANNER_ID
          return PLANNER_ID;
        case 10: // JOB_METADATA
          return JOB_METADATA;
        case 11: // MODIFIED_SINCE_TIME
          return MODIFIED_SINCE_TIME;
        case 12: // MODIFIED_BEFORE_TIME
          return MODIFIED_BEFORE_TIME;
        case 13: // INCLUDE_RECURRING_JOBS
          return INCLUDE_RECURRING_JOBS;
        case 14: // JOB_TYPES
          return JOB_TYPES;
        case 15: // ARCHIVED_ONLY
          return ARCHIVED_ONLY;
        case 16: // MIN_CREATED_AT
          return MIN_CREATED_AT;
        case 17: // MAX_CREATED_AT
          return MAX_CREATED_AT;
        case 18: // STARTED_SINCE_TIME
          return STARTED_SINCE_TIME;
        case 19: // STARTED_BEFORE_TIME
          return STARTED_BEFORE_TIME;
        case 21: // SOURCE_TEMPLATE_IDS
          return SOURCE_TEMPLATE_IDS;
        case 28: // ALL_SOURCE_TEMPLATE_IDS
          return ALL_SOURCE_TEMPLATE_IDS;
        case 22: // PRIORITIES
          return PRIORITIES;
        case 23: // SRC_JOB_IDS
          return SRC_JOB_IDS;
        case 24: // COMPLETED_SINCE_TIME
          return COMPLETED_SINCE_TIME;
        case 25: // COMPLETED_BEFORE_TIME
          return COMPLETED_BEFORE_TIME;
        case 26: // TEAM_IDS
          return TEAM_IDS;
        case 27: // ALL_USER_TEAMS
          return ALL_USER_TEAMS;
        case 20: // PAGE_REQ
          return PAGE_REQ;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ISCOMPLETE_ISSET_ID = 0;
  private static final int __ISPREVIEW_ISSET_ID = 1;
  private static final int __ISSTARTED_ISSET_ID = 2;
  private static final int __MODIFIEDSINCETIME_ISSET_ID = 3;
  private static final int __MODIFIEDBEFORETIME_ISSET_ID = 4;
  private static final int __INCLUDERECURRINGJOBS_ISSET_ID = 5;
  private static final int __ARCHIVEDONLY_ISSET_ID = 6;
  private static final int __MINCREATEDAT_ISSET_ID = 7;
  private static final int __MAXCREATEDAT_ISSET_ID = 8;
  private static final int __STARTEDSINCETIME_ISSET_ID = 9;
  private static final int __STARTEDBEFORETIME_ISSET_ID = 10;
  private static final int __ALLSOURCETEMPLATEIDS_ISSET_ID = 11;
  private static final int __COMPLETEDSINCETIME_ISSET_ID = 12;
  private static final int __COMPLETEDBEFORETIME_ISSET_ID = 13;
  private static final int __ALLUSERTEAMS_ISSET_ID = 14;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.TEAM_ID,_Fields.USER_ID,_Fields.IS_COMPLETE,_Fields.IS_PREVIEW,_Fields.TXT,_Fields.TEMPLATE_METADATA,_Fields.CREATOR_ID,_Fields.PLANNER_ID,_Fields.JOB_METADATA,_Fields.MODIFIED_SINCE_TIME,_Fields.MODIFIED_BEFORE_TIME,_Fields.INCLUDE_RECURRING_JOBS,_Fields.JOB_TYPES,_Fields.ARCHIVED_ONLY,_Fields.MIN_CREATED_AT,_Fields.MAX_CREATED_AT,_Fields.STARTED_SINCE_TIME,_Fields.STARTED_BEFORE_TIME,_Fields.SOURCE_TEMPLATE_IDS,_Fields.ALL_SOURCE_TEMPLATE_IDS,_Fields.PRIORITIES,_Fields.SRC_JOB_IDS,_Fields.COMPLETED_SINCE_TIME,_Fields.COMPLETED_BEFORE_TIME,_Fields.TEAM_IDS,_Fields.ALL_USER_TEAMS,_Fields.PAGE_REQ};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TEAM_ID, new org.apache.thrift.meta_data.FieldMetaData("teamId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_COMPLETE, new org.apache.thrift.meta_data.FieldMetaData("isComplete", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_PREVIEW, new org.apache.thrift.meta_data.FieldMetaData("isPreview", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_STARTED, new org.apache.thrift.meta_data.FieldMetaData("isStarted", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TXT, new org.apache.thrift.meta_data.FieldMetaData("txt", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JobTextSearch.class)));
    tmpMap.put(_Fields.TEMPLATE_METADATA, new org.apache.thrift.meta_data.FieldMetaData("templateMetadata", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.metadata.MetadataEntry.class))));
    tmpMap.put(_Fields.CREATOR_ID, new org.apache.thrift.meta_data.FieldMetaData("creatorId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLANNER_ID, new org.apache.thrift.meta_data.FieldMetaData("plannerId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.JOB_METADATA, new org.apache.thrift.meta_data.FieldMetaData("jobMetadata", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.metadata.MetadataEntry.class))));
    tmpMap.put(_Fields.MODIFIED_SINCE_TIME, new org.apache.thrift.meta_data.FieldMetaData("modifiedSinceTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MODIFIED_BEFORE_TIME, new org.apache.thrift.meta_data.FieldMetaData("modifiedBeforeTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.INCLUDE_RECURRING_JOBS, new org.apache.thrift.meta_data.FieldMetaData("includeRecurringJobs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.JOB_TYPES, new org.apache.thrift.meta_data.FieldMetaData("jobTypes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, JobType.class))));
    tmpMap.put(_Fields.ARCHIVED_ONLY, new org.apache.thrift.meta_data.FieldMetaData("archivedOnly", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.MIN_CREATED_AT, new org.apache.thrift.meta_data.FieldMetaData("minCreatedAt", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MAX_CREATED_AT, new org.apache.thrift.meta_data.FieldMetaData("maxCreatedAt", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.STARTED_SINCE_TIME, new org.apache.thrift.meta_data.FieldMetaData("startedSinceTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.STARTED_BEFORE_TIME, new org.apache.thrift.meta_data.FieldMetaData("startedBeforeTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SOURCE_TEMPLATE_IDS, new org.apache.thrift.meta_data.FieldMetaData("sourceTemplateIds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.ALL_SOURCE_TEMPLATE_IDS, new org.apache.thrift.meta_data.FieldMetaData("allSourceTemplateIds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PRIORITIES, new org.apache.thrift.meta_data.FieldMetaData("priorities", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.SRC_JOB_IDS, new org.apache.thrift.meta_data.FieldMetaData("srcJobIds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.COMPLETED_SINCE_TIME, new org.apache.thrift.meta_data.FieldMetaData("completedSinceTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.COMPLETED_BEFORE_TIME, new org.apache.thrift.meta_data.FieldMetaData("completedBeforeTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TEAM_IDS, new org.apache.thrift.meta_data.FieldMetaData("teamIds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.ALL_USER_TEAMS, new org.apache.thrift.meta_data.FieldMetaData("allUserTeams", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PAGE_REQ, new org.apache.thrift.meta_data.FieldMetaData("pageReq", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.common.PageReq.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(JobWhereOpts.class, metaDataMap);
  }

  public JobWhereOpts() {
    this.isStarted = true;

  }

  public JobWhereOpts(
    boolean isStarted)
  {
    this();
    this.isStarted = isStarted;
    setIsStartedIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public JobWhereOpts(JobWhereOpts other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTeamId()) {
      this.teamId = other.teamId;
    }
    if (other.isSetUserId()) {
      this.userId = other.userId;
    }
    this.isComplete = other.isComplete;
    this.isPreview = other.isPreview;
    this.isStarted = other.isStarted;
    if (other.isSetTxt()) {
      this.txt = new JobTextSearch(other.txt);
    }
    if (other.isSetTemplateMetadata()) {
      List<com.wi.director.thrift.v1.metadata.MetadataEntry> __this__templateMetadata = new ArrayList<com.wi.director.thrift.v1.metadata.MetadataEntry>(other.templateMetadata.size());
      for (com.wi.director.thrift.v1.metadata.MetadataEntry other_element : other.templateMetadata) {
        __this__templateMetadata.add(new com.wi.director.thrift.v1.metadata.MetadataEntry(other_element));
      }
      this.templateMetadata = __this__templateMetadata;
    }
    if (other.isSetCreatorId()) {
      this.creatorId = other.creatorId;
    }
    if (other.isSetPlannerId()) {
      this.plannerId = other.plannerId;
    }
    if (other.isSetJobMetadata()) {
      List<com.wi.director.thrift.v1.metadata.MetadataEntry> __this__jobMetadata = new ArrayList<com.wi.director.thrift.v1.metadata.MetadataEntry>(other.jobMetadata.size());
      for (com.wi.director.thrift.v1.metadata.MetadataEntry other_element : other.jobMetadata) {
        __this__jobMetadata.add(new com.wi.director.thrift.v1.metadata.MetadataEntry(other_element));
      }
      this.jobMetadata = __this__jobMetadata;
    }
    this.modifiedSinceTime = other.modifiedSinceTime;
    this.modifiedBeforeTime = other.modifiedBeforeTime;
    this.includeRecurringJobs = other.includeRecurringJobs;
    if (other.isSetJobTypes()) {
      Set<JobType> __this__jobTypes = new HashSet<JobType>(other.jobTypes.size());
      for (JobType other_element : other.jobTypes) {
        __this__jobTypes.add(other_element);
      }
      this.jobTypes = __this__jobTypes;
    }
    this.archivedOnly = other.archivedOnly;
    this.minCreatedAt = other.minCreatedAt;
    this.maxCreatedAt = other.maxCreatedAt;
    this.startedSinceTime = other.startedSinceTime;
    this.startedBeforeTime = other.startedBeforeTime;
    if (other.isSetSourceTemplateIds()) {
      List<String> __this__sourceTemplateIds = new ArrayList<String>(other.sourceTemplateIds);
      this.sourceTemplateIds = __this__sourceTemplateIds;
    }
    this.allSourceTemplateIds = other.allSourceTemplateIds;
    if (other.isSetPriorities()) {
      List<Integer> __this__priorities = new ArrayList<Integer>(other.priorities);
      this.priorities = __this__priorities;
    }
    if (other.isSetSrcJobIds()) {
      List<String> __this__srcJobIds = new ArrayList<String>(other.srcJobIds);
      this.srcJobIds = __this__srcJobIds;
    }
    this.completedSinceTime = other.completedSinceTime;
    this.completedBeforeTime = other.completedBeforeTime;
    if (other.isSetTeamIds()) {
      List<String> __this__teamIds = new ArrayList<String>(other.teamIds);
      this.teamIds = __this__teamIds;
    }
    this.allUserTeams = other.allUserTeams;
    if (other.isSetPageReq()) {
      this.pageReq = new com.wi.director.thrift.v1.common.PageReq(other.pageReq);
    }
  }

  public JobWhereOpts deepCopy() {
    return new JobWhereOpts(this);
  }

  @Override
  public void clear() {
    this.teamId = null;
    this.userId = null;
    setIsCompleteIsSet(false);
    this.isComplete = false;
    setIsPreviewIsSet(false);
    this.isPreview = false;
    this.isStarted = true;

    this.txt = null;
    this.templateMetadata = null;
    this.creatorId = null;
    this.plannerId = null;
    this.jobMetadata = null;
    setModifiedSinceTimeIsSet(false);
    this.modifiedSinceTime = 0;
    setModifiedBeforeTimeIsSet(false);
    this.modifiedBeforeTime = 0;
    setIncludeRecurringJobsIsSet(false);
    this.includeRecurringJobs = false;
    this.jobTypes = null;
    setArchivedOnlyIsSet(false);
    this.archivedOnly = false;
    setMinCreatedAtIsSet(false);
    this.minCreatedAt = 0;
    setMaxCreatedAtIsSet(false);
    this.maxCreatedAt = 0;
    setStartedSinceTimeIsSet(false);
    this.startedSinceTime = 0;
    setStartedBeforeTimeIsSet(false);
    this.startedBeforeTime = 0;
    this.sourceTemplateIds = null;
    setAllSourceTemplateIdsIsSet(false);
    this.allSourceTemplateIds = false;
    this.priorities = null;
    this.srcJobIds = null;
    setCompletedSinceTimeIsSet(false);
    this.completedSinceTime = 0;
    setCompletedBeforeTimeIsSet(false);
    this.completedBeforeTime = 0;
    this.teamIds = null;
    setAllUserTeamsIsSet(false);
    this.allUserTeams = false;
    this.pageReq = null;
  }

  public String getTeamId() {
    return this.teamId;
  }

  public JobWhereOpts setTeamId(String teamId) {
    this.teamId = teamId;
    return this;
  }

  public void unsetTeamId() {
    this.teamId = null;
  }

  /** Returns true if field teamId is set (has been assigned a value) and false otherwise */
  public boolean isSetTeamId() {
    return this.teamId != null;
  }

  public void setTeamIdIsSet(boolean value) {
    if (!value) {
      this.teamId = null;
    }
  }

  public String getUserId() {
    return this.userId;
  }

  public JobWhereOpts setUserId(String userId) {
    this.userId = userId;
    return this;
  }

  public void unsetUserId() {
    this.userId = null;
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return this.userId != null;
  }

  public void setUserIdIsSet(boolean value) {
    if (!value) {
      this.userId = null;
    }
  }

  public boolean isIsComplete() {
    return this.isComplete;
  }

  public JobWhereOpts setIsComplete(boolean isComplete) {
    this.isComplete = isComplete;
    setIsCompleteIsSet(true);
    return this;
  }

  public void unsetIsComplete() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISCOMPLETE_ISSET_ID);
  }

  /** Returns true if field isComplete is set (has been assigned a value) and false otherwise */
  public boolean isSetIsComplete() {
    return EncodingUtils.testBit(__isset_bitfield, __ISCOMPLETE_ISSET_ID);
  }

  public void setIsCompleteIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISCOMPLETE_ISSET_ID, value);
  }

  public boolean isIsPreview() {
    return this.isPreview;
  }

  public JobWhereOpts setIsPreview(boolean isPreview) {
    this.isPreview = isPreview;
    setIsPreviewIsSet(true);
    return this;
  }

  public void unsetIsPreview() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISPREVIEW_ISSET_ID);
  }

  /** Returns true if field isPreview is set (has been assigned a value) and false otherwise */
  public boolean isSetIsPreview() {
    return EncodingUtils.testBit(__isset_bitfield, __ISPREVIEW_ISSET_ID);
  }

  public void setIsPreviewIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISPREVIEW_ISSET_ID, value);
  }

  public boolean isIsStarted() {
    return this.isStarted;
  }

  public JobWhereOpts setIsStarted(boolean isStarted) {
    this.isStarted = isStarted;
    setIsStartedIsSet(true);
    return this;
  }

  public void unsetIsStarted() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISSTARTED_ISSET_ID);
  }

  /** Returns true if field isStarted is set (has been assigned a value) and false otherwise */
  public boolean isSetIsStarted() {
    return EncodingUtils.testBit(__isset_bitfield, __ISSTARTED_ISSET_ID);
  }

  public void setIsStartedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISSTARTED_ISSET_ID, value);
  }

  public JobTextSearch getTxt() {
    return this.txt;
  }

  public JobWhereOpts setTxt(JobTextSearch txt) {
    this.txt = txt;
    return this;
  }

  public void unsetTxt() {
    this.txt = null;
  }

  /** Returns true if field txt is set (has been assigned a value) and false otherwise */
  public boolean isSetTxt() {
    return this.txt != null;
  }

  public void setTxtIsSet(boolean value) {
    if (!value) {
      this.txt = null;
    }
  }

  public int getTemplateMetadataSize() {
    return (this.templateMetadata == null) ? 0 : this.templateMetadata.size();
  }

  public java.util.Iterator<com.wi.director.thrift.v1.metadata.MetadataEntry> getTemplateMetadataIterator() {
    return (this.templateMetadata == null) ? null : this.templateMetadata.iterator();
  }

  public void addToTemplateMetadata(com.wi.director.thrift.v1.metadata.MetadataEntry elem) {
    if (this.templateMetadata == null) {
      this.templateMetadata = new ArrayList<com.wi.director.thrift.v1.metadata.MetadataEntry>();
    }
    this.templateMetadata.add(elem);
  }

  /**
   * See <a href="metadata.html#Struct_MetadataValue">MetadataValue</a> for specific metadata filter criteria
   */
  public List<com.wi.director.thrift.v1.metadata.MetadataEntry> getTemplateMetadata() {
    return this.templateMetadata;
  }

  /**
   * See <a href="metadata.html#Struct_MetadataValue">MetadataValue</a> for specific metadata filter criteria
   */
  public JobWhereOpts setTemplateMetadata(List<com.wi.director.thrift.v1.metadata.MetadataEntry> templateMetadata) {
    this.templateMetadata = templateMetadata;
    return this;
  }

  public void unsetTemplateMetadata() {
    this.templateMetadata = null;
  }

  /** Returns true if field templateMetadata is set (has been assigned a value) and false otherwise */
  public boolean isSetTemplateMetadata() {
    return this.templateMetadata != null;
  }

  public void setTemplateMetadataIsSet(boolean value) {
    if (!value) {
      this.templateMetadata = null;
    }
  }

  /**
   * If not self, teamId required. Will yield a positive match only for the creator of the job
   */
  public String getCreatorId() {
    return this.creatorId;
  }

  /**
   * If not self, teamId required. Will yield a positive match only for the creator of the job
   */
  public JobWhereOpts setCreatorId(String creatorId) {
    this.creatorId = creatorId;
    return this;
  }

  public void unsetCreatorId() {
    this.creatorId = null;
  }

  /** Returns true if field creatorId is set (has been assigned a value) and false otherwise */
  public boolean isSetCreatorId() {
    return this.creatorId != null;
  }

  public void setCreatorIdIsSet(boolean value) {
    if (!value) {
      this.creatorId = null;
    }
  }

  /**
   * If not self, teamId required. Will match jobs where the plannerId == the userId of ANY of
   * job planners belonging to that job
   */
  public String getPlannerId() {
    return this.plannerId;
  }

  /**
   * If not self, teamId required. Will match jobs where the plannerId == the userId of ANY of
   * job planners belonging to that job
   */
  public JobWhereOpts setPlannerId(String plannerId) {
    this.plannerId = plannerId;
    return this;
  }

  public void unsetPlannerId() {
    this.plannerId = null;
  }

  /** Returns true if field plannerId is set (has been assigned a value) and false otherwise */
  public boolean isSetPlannerId() {
    return this.plannerId != null;
  }

  public void setPlannerIdIsSet(boolean value) {
    if (!value) {
      this.plannerId = null;
    }
  }

  public int getJobMetadataSize() {
    return (this.jobMetadata == null) ? 0 : this.jobMetadata.size();
  }

  public java.util.Iterator<com.wi.director.thrift.v1.metadata.MetadataEntry> getJobMetadataIterator() {
    return (this.jobMetadata == null) ? null : this.jobMetadata.iterator();
  }

  public void addToJobMetadata(com.wi.director.thrift.v1.metadata.MetadataEntry elem) {
    if (this.jobMetadata == null) {
      this.jobMetadata = new ArrayList<com.wi.director.thrift.v1.metadata.MetadataEntry>();
    }
    this.jobMetadata.add(elem);
  }

  public List<com.wi.director.thrift.v1.metadata.MetadataEntry> getJobMetadata() {
    return this.jobMetadata;
  }

  public JobWhereOpts setJobMetadata(List<com.wi.director.thrift.v1.metadata.MetadataEntry> jobMetadata) {
    this.jobMetadata = jobMetadata;
    return this;
  }

  public void unsetJobMetadata() {
    this.jobMetadata = null;
  }

  /** Returns true if field jobMetadata is set (has been assigned a value) and false otherwise */
  public boolean isSetJobMetadata() {
    return this.jobMetadata != null;
  }

  public void setJobMetadataIsSet(boolean value) {
    if (!value) {
      this.jobMetadata = null;
    }
  }

  public long getModifiedSinceTime() {
    return this.modifiedSinceTime;
  }

  public JobWhereOpts setModifiedSinceTime(long modifiedSinceTime) {
    this.modifiedSinceTime = modifiedSinceTime;
    setModifiedSinceTimeIsSet(true);
    return this;
  }

  public void unsetModifiedSinceTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MODIFIEDSINCETIME_ISSET_ID);
  }

  /** Returns true if field modifiedSinceTime is set (has been assigned a value) and false otherwise */
  public boolean isSetModifiedSinceTime() {
    return EncodingUtils.testBit(__isset_bitfield, __MODIFIEDSINCETIME_ISSET_ID);
  }

  public void setModifiedSinceTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MODIFIEDSINCETIME_ISSET_ID, value);
  }

  public long getModifiedBeforeTime() {
    return this.modifiedBeforeTime;
  }

  public JobWhereOpts setModifiedBeforeTime(long modifiedBeforeTime) {
    this.modifiedBeforeTime = modifiedBeforeTime;
    setModifiedBeforeTimeIsSet(true);
    return this;
  }

  public void unsetModifiedBeforeTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MODIFIEDBEFORETIME_ISSET_ID);
  }

  /** Returns true if field modifiedBeforeTime is set (has been assigned a value) and false otherwise */
  public boolean isSetModifiedBeforeTime() {
    return EncodingUtils.testBit(__isset_bitfield, __MODIFIEDBEFORETIME_ISSET_ID);
  }

  public void setModifiedBeforeTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MODIFIEDBEFORETIME_ISSET_ID, value);
  }

  public boolean isIncludeRecurringJobs() {
    return this.includeRecurringJobs;
  }

  public JobWhereOpts setIncludeRecurringJobs(boolean includeRecurringJobs) {
    this.includeRecurringJobs = includeRecurringJobs;
    setIncludeRecurringJobsIsSet(true);
    return this;
  }

  public void unsetIncludeRecurringJobs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INCLUDERECURRINGJOBS_ISSET_ID);
  }

  /** Returns true if field includeRecurringJobs is set (has been assigned a value) and false otherwise */
  public boolean isSetIncludeRecurringJobs() {
    return EncodingUtils.testBit(__isset_bitfield, __INCLUDERECURRINGJOBS_ISSET_ID);
  }

  public void setIncludeRecurringJobsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INCLUDERECURRINGJOBS_ISSET_ID, value);
  }

  public int getJobTypesSize() {
    return (this.jobTypes == null) ? 0 : this.jobTypes.size();
  }

  public java.util.Iterator<JobType> getJobTypesIterator() {
    return (this.jobTypes == null) ? null : this.jobTypes.iterator();
  }

  public void addToJobTypes(JobType elem) {
    if (this.jobTypes == null) {
      this.jobTypes = new HashSet<JobType>();
    }
    this.jobTypes.add(elem);
  }

  /**
   * If set, will only include the selected JobTypes, and will override includeRecurringJobs
   * If unset, will not include issues, and abide by includeRecurringJobs
   */
  public Set<JobType> getJobTypes() {
    return this.jobTypes;
  }

  /**
   * If set, will only include the selected JobTypes, and will override includeRecurringJobs
   * If unset, will not include issues, and abide by includeRecurringJobs
   */
  public JobWhereOpts setJobTypes(Set<JobType> jobTypes) {
    this.jobTypes = jobTypes;
    return this;
  }

  public void unsetJobTypes() {
    this.jobTypes = null;
  }

  /** Returns true if field jobTypes is set (has been assigned a value) and false otherwise */
  public boolean isSetJobTypes() {
    return this.jobTypes != null;
  }

  public void setJobTypesIsSet(boolean value) {
    if (!value) {
      this.jobTypes = null;
    }
  }

  /**
   * If set to true, will only include archived jobs
   * If set to false, will include all jobs
   * If unset (default), will only include active jobs
   */
  public boolean isArchivedOnly() {
    return this.archivedOnly;
  }

  /**
   * If set to true, will only include archived jobs
   * If set to false, will include all jobs
   * If unset (default), will only include active jobs
   */
  public JobWhereOpts setArchivedOnly(boolean archivedOnly) {
    this.archivedOnly = archivedOnly;
    setArchivedOnlyIsSet(true);
    return this;
  }

  public void unsetArchivedOnly() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ARCHIVEDONLY_ISSET_ID);
  }

  /** Returns true if field archivedOnly is set (has been assigned a value) and false otherwise */
  public boolean isSetArchivedOnly() {
    return EncodingUtils.testBit(__isset_bitfield, __ARCHIVEDONLY_ISSET_ID);
  }

  public void setArchivedOnlyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ARCHIVEDONLY_ISSET_ID, value);
  }

  /**
   * Allow users to filter jobs by their createdAt timestamp
   */
  public long getMinCreatedAt() {
    return this.minCreatedAt;
  }

  /**
   * Allow users to filter jobs by their createdAt timestamp
   */
  public JobWhereOpts setMinCreatedAt(long minCreatedAt) {
    this.minCreatedAt = minCreatedAt;
    setMinCreatedAtIsSet(true);
    return this;
  }

  public void unsetMinCreatedAt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MINCREATEDAT_ISSET_ID);
  }

  /** Returns true if field minCreatedAt is set (has been assigned a value) and false otherwise */
  public boolean isSetMinCreatedAt() {
    return EncodingUtils.testBit(__isset_bitfield, __MINCREATEDAT_ISSET_ID);
  }

  public void setMinCreatedAtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MINCREATEDAT_ISSET_ID, value);
  }

  public long getMaxCreatedAt() {
    return this.maxCreatedAt;
  }

  public JobWhereOpts setMaxCreatedAt(long maxCreatedAt) {
    this.maxCreatedAt = maxCreatedAt;
    setMaxCreatedAtIsSet(true);
    return this;
  }

  public void unsetMaxCreatedAt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXCREATEDAT_ISSET_ID);
  }

  /** Returns true if field maxCreatedAt is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxCreatedAt() {
    return EncodingUtils.testBit(__isset_bitfield, __MAXCREATEDAT_ISSET_ID);
  }

  public void setMaxCreatedAtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXCREATEDAT_ISSET_ID, value);
  }

  public long getStartedSinceTime() {
    return this.startedSinceTime;
  }

  public JobWhereOpts setStartedSinceTime(long startedSinceTime) {
    this.startedSinceTime = startedSinceTime;
    setStartedSinceTimeIsSet(true);
    return this;
  }

  public void unsetStartedSinceTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTEDSINCETIME_ISSET_ID);
  }

  /** Returns true if field startedSinceTime is set (has been assigned a value) and false otherwise */
  public boolean isSetStartedSinceTime() {
    return EncodingUtils.testBit(__isset_bitfield, __STARTEDSINCETIME_ISSET_ID);
  }

  public void setStartedSinceTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTEDSINCETIME_ISSET_ID, value);
  }

  public long getStartedBeforeTime() {
    return this.startedBeforeTime;
  }

  public JobWhereOpts setStartedBeforeTime(long startedBeforeTime) {
    this.startedBeforeTime = startedBeforeTime;
    setStartedBeforeTimeIsSet(true);
    return this;
  }

  public void unsetStartedBeforeTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTEDBEFORETIME_ISSET_ID);
  }

  /** Returns true if field startedBeforeTime is set (has been assigned a value) and false otherwise */
  public boolean isSetStartedBeforeTime() {
    return EncodingUtils.testBit(__isset_bitfield, __STARTEDBEFORETIME_ISSET_ID);
  }

  public void setStartedBeforeTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTEDBEFORETIME_ISSET_ID, value);
  }

  public int getSourceTemplateIdsSize() {
    return (this.sourceTemplateIds == null) ? 0 : this.sourceTemplateIds.size();
  }

  public java.util.Iterator<String> getSourceTemplateIdsIterator() {
    return (this.sourceTemplateIds == null) ? null : this.sourceTemplateIds.iterator();
  }

  public void addToSourceTemplateIds(String elem) {
    if (this.sourceTemplateIds == null) {
      this.sourceTemplateIds = new ArrayList<String>();
    }
    this.sourceTemplateIds.add(elem);
  }

  public List<String> getSourceTemplateIds() {
    return this.sourceTemplateIds;
  }

  public JobWhereOpts setSourceTemplateIds(List<String> sourceTemplateIds) {
    this.sourceTemplateIds = sourceTemplateIds;
    return this;
  }

  public void unsetSourceTemplateIds() {
    this.sourceTemplateIds = null;
  }

  /** Returns true if field sourceTemplateIds is set (has been assigned a value) and false otherwise */
  public boolean isSetSourceTemplateIds() {
    return this.sourceTemplateIds != null;
  }

  public void setSourceTemplateIdsIsSet(boolean value) {
    if (!value) {
      this.sourceTemplateIds = null;
    }
  }

  /**
   * When set to true, jobs matched must contain all `sourceTemplateIds` defined.
   * By default, they are multi-select, i.e. jobs with any of `sourceTemplateIds` are matched.
   */
  public boolean isAllSourceTemplateIds() {
    return this.allSourceTemplateIds;
  }

  /**
   * When set to true, jobs matched must contain all `sourceTemplateIds` defined.
   * By default, they are multi-select, i.e. jobs with any of `sourceTemplateIds` are matched.
   */
  public JobWhereOpts setAllSourceTemplateIds(boolean allSourceTemplateIds) {
    this.allSourceTemplateIds = allSourceTemplateIds;
    setAllSourceTemplateIdsIsSet(true);
    return this;
  }

  public void unsetAllSourceTemplateIds() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ALLSOURCETEMPLATEIDS_ISSET_ID);
  }

  /** Returns true if field allSourceTemplateIds is set (has been assigned a value) and false otherwise */
  public boolean isSetAllSourceTemplateIds() {
    return EncodingUtils.testBit(__isset_bitfield, __ALLSOURCETEMPLATEIDS_ISSET_ID);
  }

  public void setAllSourceTemplateIdsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ALLSOURCETEMPLATEIDS_ISSET_ID, value);
  }

  public int getPrioritiesSize() {
    return (this.priorities == null) ? 0 : this.priorities.size();
  }

  public java.util.Iterator<Integer> getPrioritiesIterator() {
    return (this.priorities == null) ? null : this.priorities.iterator();
  }

  public void addToPriorities(int elem) {
    if (this.priorities == null) {
      this.priorities = new ArrayList<Integer>();
    }
    this.priorities.add(elem);
  }

  /**
   * For issues only, must only use issue job type in jobTypes
   */
  public List<Integer> getPriorities() {
    return this.priorities;
  }

  /**
   * For issues only, must only use issue job type in jobTypes
   */
  public JobWhereOpts setPriorities(List<Integer> priorities) {
    this.priorities = priorities;
    return this;
  }

  public void unsetPriorities() {
    this.priorities = null;
  }

  /** Returns true if field priorities is set (has been assigned a value) and false otherwise */
  public boolean isSetPriorities() {
    return this.priorities != null;
  }

  public void setPrioritiesIsSet(boolean value) {
    if (!value) {
      this.priorities = null;
    }
  }

  public int getSrcJobIdsSize() {
    return (this.srcJobIds == null) ? 0 : this.srcJobIds.size();
  }

  public java.util.Iterator<String> getSrcJobIdsIterator() {
    return (this.srcJobIds == null) ? null : this.srcJobIds.iterator();
  }

  public void addToSrcJobIds(String elem) {
    if (this.srcJobIds == null) {
      this.srcJobIds = new ArrayList<String>();
    }
    this.srcJobIds.add(elem);
  }

  /**
   * For issues only, must only use issue job type in jobTypes
   */
  public List<String> getSrcJobIds() {
    return this.srcJobIds;
  }

  /**
   * For issues only, must only use issue job type in jobTypes
   */
  public JobWhereOpts setSrcJobIds(List<String> srcJobIds) {
    this.srcJobIds = srcJobIds;
    return this;
  }

  public void unsetSrcJobIds() {
    this.srcJobIds = null;
  }

  /** Returns true if field srcJobIds is set (has been assigned a value) and false otherwise */
  public boolean isSetSrcJobIds() {
    return this.srcJobIds != null;
  }

  public void setSrcJobIdsIsSet(boolean value) {
    if (!value) {
      this.srcJobIds = null;
    }
  }

  public long getCompletedSinceTime() {
    return this.completedSinceTime;
  }

  public JobWhereOpts setCompletedSinceTime(long completedSinceTime) {
    this.completedSinceTime = completedSinceTime;
    setCompletedSinceTimeIsSet(true);
    return this;
  }

  public void unsetCompletedSinceTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMPLETEDSINCETIME_ISSET_ID);
  }

  /** Returns true if field completedSinceTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCompletedSinceTime() {
    return EncodingUtils.testBit(__isset_bitfield, __COMPLETEDSINCETIME_ISSET_ID);
  }

  public void setCompletedSinceTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMPLETEDSINCETIME_ISSET_ID, value);
  }

  public long getCompletedBeforeTime() {
    return this.completedBeforeTime;
  }

  public JobWhereOpts setCompletedBeforeTime(long completedBeforeTime) {
    this.completedBeforeTime = completedBeforeTime;
    setCompletedBeforeTimeIsSet(true);
    return this;
  }

  public void unsetCompletedBeforeTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMPLETEDBEFORETIME_ISSET_ID);
  }

  /** Returns true if field completedBeforeTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCompletedBeforeTime() {
    return EncodingUtils.testBit(__isset_bitfield, __COMPLETEDBEFORETIME_ISSET_ID);
  }

  public void setCompletedBeforeTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMPLETEDBEFORETIME_ISSET_ID, value);
  }

  public int getTeamIdsSize() {
    return (this.teamIds == null) ? 0 : this.teamIds.size();
  }

  public java.util.Iterator<String> getTeamIdsIterator() {
    return (this.teamIds == null) ? null : this.teamIds.iterator();
  }

  public void addToTeamIds(String elem) {
    if (this.teamIds == null) {
      this.teamIds = new ArrayList<String>();
    }
    this.teamIds.add(elem);
  }

  /**
   * Overrides teamId when set:
   * queries across teams user has admin permission on
   */
  public List<String> getTeamIds() {
    return this.teamIds;
  }

  /**
   * Overrides teamId when set:
   * queries across teams user has admin permission on
   */
  public JobWhereOpts setTeamIds(List<String> teamIds) {
    this.teamIds = teamIds;
    return this;
  }

  public void unsetTeamIds() {
    this.teamIds = null;
  }

  /** Returns true if field teamIds is set (has been assigned a value) and false otherwise */
  public boolean isSetTeamIds() {
    return this.teamIds != null;
  }

  public void setTeamIdsIsSet(boolean value) {
    if (!value) {
      this.teamIds = null;
    }
  }

  /**
   * Overrides teamIds and teamId when set: <br>
   * Queries across ALL teams user has permissions on <br>
   * This includes admin permissions for all jobs and <br>
   * executor permissions for on demand jobs
   */
  public boolean isAllUserTeams() {
    return this.allUserTeams;
  }

  /**
   * Overrides teamIds and teamId when set: <br>
   * Queries across ALL teams user has permissions on <br>
   * This includes admin permissions for all jobs and <br>
   * executor permissions for on demand jobs
   */
  public JobWhereOpts setAllUserTeams(boolean allUserTeams) {
    this.allUserTeams = allUserTeams;
    setAllUserTeamsIsSet(true);
    return this;
  }

  public void unsetAllUserTeams() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ALLUSERTEAMS_ISSET_ID);
  }

  /** Returns true if field allUserTeams is set (has been assigned a value) and false otherwise */
  public boolean isSetAllUserTeams() {
    return EncodingUtils.testBit(__isset_bitfield, __ALLUSERTEAMS_ISSET_ID);
  }

  public void setAllUserTeamsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ALLUSERTEAMS_ISSET_ID, value);
  }

  public com.wi.director.thrift.v1.common.PageReq getPageReq() {
    return this.pageReq;
  }

  public JobWhereOpts setPageReq(com.wi.director.thrift.v1.common.PageReq pageReq) {
    this.pageReq = pageReq;
    return this;
  }

  public void unsetPageReq() {
    this.pageReq = null;
  }

  /** Returns true if field pageReq is set (has been assigned a value) and false otherwise */
  public boolean isSetPageReq() {
    return this.pageReq != null;
  }

  public void setPageReqIsSet(boolean value) {
    if (!value) {
      this.pageReq = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TEAM_ID:
      if (value == null) {
        unsetTeamId();
      } else {
        setTeamId((String)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((String)value);
      }
      break;

    case IS_COMPLETE:
      if (value == null) {
        unsetIsComplete();
      } else {
        setIsComplete((Boolean)value);
      }
      break;

    case IS_PREVIEW:
      if (value == null) {
        unsetIsPreview();
      } else {
        setIsPreview((Boolean)value);
      }
      break;

    case IS_STARTED:
      if (value == null) {
        unsetIsStarted();
      } else {
        setIsStarted((Boolean)value);
      }
      break;

    case TXT:
      if (value == null) {
        unsetTxt();
      } else {
        setTxt((JobTextSearch)value);
      }
      break;

    case TEMPLATE_METADATA:
      if (value == null) {
        unsetTemplateMetadata();
      } else {
        setTemplateMetadata((List<com.wi.director.thrift.v1.metadata.MetadataEntry>)value);
      }
      break;

    case CREATOR_ID:
      if (value == null) {
        unsetCreatorId();
      } else {
        setCreatorId((String)value);
      }
      break;

    case PLANNER_ID:
      if (value == null) {
        unsetPlannerId();
      } else {
        setPlannerId((String)value);
      }
      break;

    case JOB_METADATA:
      if (value == null) {
        unsetJobMetadata();
      } else {
        setJobMetadata((List<com.wi.director.thrift.v1.metadata.MetadataEntry>)value);
      }
      break;

    case MODIFIED_SINCE_TIME:
      if (value == null) {
        unsetModifiedSinceTime();
      } else {
        setModifiedSinceTime((Long)value);
      }
      break;

    case MODIFIED_BEFORE_TIME:
      if (value == null) {
        unsetModifiedBeforeTime();
      } else {
        setModifiedBeforeTime((Long)value);
      }
      break;

    case INCLUDE_RECURRING_JOBS:
      if (value == null) {
        unsetIncludeRecurringJobs();
      } else {
        setIncludeRecurringJobs((Boolean)value);
      }
      break;

    case JOB_TYPES:
      if (value == null) {
        unsetJobTypes();
      } else {
        setJobTypes((Set<JobType>)value);
      }
      break;

    case ARCHIVED_ONLY:
      if (value == null) {
        unsetArchivedOnly();
      } else {
        setArchivedOnly((Boolean)value);
      }
      break;

    case MIN_CREATED_AT:
      if (value == null) {
        unsetMinCreatedAt();
      } else {
        setMinCreatedAt((Long)value);
      }
      break;

    case MAX_CREATED_AT:
      if (value == null) {
        unsetMaxCreatedAt();
      } else {
        setMaxCreatedAt((Long)value);
      }
      break;

    case STARTED_SINCE_TIME:
      if (value == null) {
        unsetStartedSinceTime();
      } else {
        setStartedSinceTime((Long)value);
      }
      break;

    case STARTED_BEFORE_TIME:
      if (value == null) {
        unsetStartedBeforeTime();
      } else {
        setStartedBeforeTime((Long)value);
      }
      break;

    case SOURCE_TEMPLATE_IDS:
      if (value == null) {
        unsetSourceTemplateIds();
      } else {
        setSourceTemplateIds((List<String>)value);
      }
      break;

    case ALL_SOURCE_TEMPLATE_IDS:
      if (value == null) {
        unsetAllSourceTemplateIds();
      } else {
        setAllSourceTemplateIds((Boolean)value);
      }
      break;

    case PRIORITIES:
      if (value == null) {
        unsetPriorities();
      } else {
        setPriorities((List<Integer>)value);
      }
      break;

    case SRC_JOB_IDS:
      if (value == null) {
        unsetSrcJobIds();
      } else {
        setSrcJobIds((List<String>)value);
      }
      break;

    case COMPLETED_SINCE_TIME:
      if (value == null) {
        unsetCompletedSinceTime();
      } else {
        setCompletedSinceTime((Long)value);
      }
      break;

    case COMPLETED_BEFORE_TIME:
      if (value == null) {
        unsetCompletedBeforeTime();
      } else {
        setCompletedBeforeTime((Long)value);
      }
      break;

    case TEAM_IDS:
      if (value == null) {
        unsetTeamIds();
      } else {
        setTeamIds((List<String>)value);
      }
      break;

    case ALL_USER_TEAMS:
      if (value == null) {
        unsetAllUserTeams();
      } else {
        setAllUserTeams((Boolean)value);
      }
      break;

    case PAGE_REQ:
      if (value == null) {
        unsetPageReq();
      } else {
        setPageReq((com.wi.director.thrift.v1.common.PageReq)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TEAM_ID:
      return getTeamId();

    case USER_ID:
      return getUserId();

    case IS_COMPLETE:
      return isIsComplete();

    case IS_PREVIEW:
      return isIsPreview();

    case IS_STARTED:
      return isIsStarted();

    case TXT:
      return getTxt();

    case TEMPLATE_METADATA:
      return getTemplateMetadata();

    case CREATOR_ID:
      return getCreatorId();

    case PLANNER_ID:
      return getPlannerId();

    case JOB_METADATA:
      return getJobMetadata();

    case MODIFIED_SINCE_TIME:
      return getModifiedSinceTime();

    case MODIFIED_BEFORE_TIME:
      return getModifiedBeforeTime();

    case INCLUDE_RECURRING_JOBS:
      return isIncludeRecurringJobs();

    case JOB_TYPES:
      return getJobTypes();

    case ARCHIVED_ONLY:
      return isArchivedOnly();

    case MIN_CREATED_AT:
      return getMinCreatedAt();

    case MAX_CREATED_AT:
      return getMaxCreatedAt();

    case STARTED_SINCE_TIME:
      return getStartedSinceTime();

    case STARTED_BEFORE_TIME:
      return getStartedBeforeTime();

    case SOURCE_TEMPLATE_IDS:
      return getSourceTemplateIds();

    case ALL_SOURCE_TEMPLATE_IDS:
      return isAllSourceTemplateIds();

    case PRIORITIES:
      return getPriorities();

    case SRC_JOB_IDS:
      return getSrcJobIds();

    case COMPLETED_SINCE_TIME:
      return getCompletedSinceTime();

    case COMPLETED_BEFORE_TIME:
      return getCompletedBeforeTime();

    case TEAM_IDS:
      return getTeamIds();

    case ALL_USER_TEAMS:
      return isAllUserTeams();

    case PAGE_REQ:
      return getPageReq();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TEAM_ID:
      return isSetTeamId();
    case USER_ID:
      return isSetUserId();
    case IS_COMPLETE:
      return isSetIsComplete();
    case IS_PREVIEW:
      return isSetIsPreview();
    case IS_STARTED:
      return isSetIsStarted();
    case TXT:
      return isSetTxt();
    case TEMPLATE_METADATA:
      return isSetTemplateMetadata();
    case CREATOR_ID:
      return isSetCreatorId();
    case PLANNER_ID:
      return isSetPlannerId();
    case JOB_METADATA:
      return isSetJobMetadata();
    case MODIFIED_SINCE_TIME:
      return isSetModifiedSinceTime();
    case MODIFIED_BEFORE_TIME:
      return isSetModifiedBeforeTime();
    case INCLUDE_RECURRING_JOBS:
      return isSetIncludeRecurringJobs();
    case JOB_TYPES:
      return isSetJobTypes();
    case ARCHIVED_ONLY:
      return isSetArchivedOnly();
    case MIN_CREATED_AT:
      return isSetMinCreatedAt();
    case MAX_CREATED_AT:
      return isSetMaxCreatedAt();
    case STARTED_SINCE_TIME:
      return isSetStartedSinceTime();
    case STARTED_BEFORE_TIME:
      return isSetStartedBeforeTime();
    case SOURCE_TEMPLATE_IDS:
      return isSetSourceTemplateIds();
    case ALL_SOURCE_TEMPLATE_IDS:
      return isSetAllSourceTemplateIds();
    case PRIORITIES:
      return isSetPriorities();
    case SRC_JOB_IDS:
      return isSetSrcJobIds();
    case COMPLETED_SINCE_TIME:
      return isSetCompletedSinceTime();
    case COMPLETED_BEFORE_TIME:
      return isSetCompletedBeforeTime();
    case TEAM_IDS:
      return isSetTeamIds();
    case ALL_USER_TEAMS:
      return isSetAllUserTeams();
    case PAGE_REQ:
      return isSetPageReq();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof JobWhereOpts)
      return this.equals((JobWhereOpts)that);
    return false;
  }

  public boolean equals(JobWhereOpts that) {
    if (that == null)
      return false;

    boolean this_present_teamId = true && this.isSetTeamId();
    boolean that_present_teamId = true && that.isSetTeamId();
    if (this_present_teamId || that_present_teamId) {
      if (!(this_present_teamId && that_present_teamId))
        return false;
      if (!this.teamId.equals(that.teamId))
        return false;
    }

    boolean this_present_userId = true && this.isSetUserId();
    boolean that_present_userId = true && that.isSetUserId();
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (!this.userId.equals(that.userId))
        return false;
    }

    boolean this_present_isComplete = true && this.isSetIsComplete();
    boolean that_present_isComplete = true && that.isSetIsComplete();
    if (this_present_isComplete || that_present_isComplete) {
      if (!(this_present_isComplete && that_present_isComplete))
        return false;
      if (this.isComplete != that.isComplete)
        return false;
    }

    boolean this_present_isPreview = true && this.isSetIsPreview();
    boolean that_present_isPreview = true && that.isSetIsPreview();
    if (this_present_isPreview || that_present_isPreview) {
      if (!(this_present_isPreview && that_present_isPreview))
        return false;
      if (this.isPreview != that.isPreview)
        return false;
    }

    boolean this_present_isStarted = true;
    boolean that_present_isStarted = true;
    if (this_present_isStarted || that_present_isStarted) {
      if (!(this_present_isStarted && that_present_isStarted))
        return false;
      if (this.isStarted != that.isStarted)
        return false;
    }

    boolean this_present_txt = true && this.isSetTxt();
    boolean that_present_txt = true && that.isSetTxt();
    if (this_present_txt || that_present_txt) {
      if (!(this_present_txt && that_present_txt))
        return false;
      if (!this.txt.equals(that.txt))
        return false;
    }

    boolean this_present_templateMetadata = true && this.isSetTemplateMetadata();
    boolean that_present_templateMetadata = true && that.isSetTemplateMetadata();
    if (this_present_templateMetadata || that_present_templateMetadata) {
      if (!(this_present_templateMetadata && that_present_templateMetadata))
        return false;
      if (!this.templateMetadata.equals(that.templateMetadata))
        return false;
    }

    boolean this_present_creatorId = true && this.isSetCreatorId();
    boolean that_present_creatorId = true && that.isSetCreatorId();
    if (this_present_creatorId || that_present_creatorId) {
      if (!(this_present_creatorId && that_present_creatorId))
        return false;
      if (!this.creatorId.equals(that.creatorId))
        return false;
    }

    boolean this_present_plannerId = true && this.isSetPlannerId();
    boolean that_present_plannerId = true && that.isSetPlannerId();
    if (this_present_plannerId || that_present_plannerId) {
      if (!(this_present_plannerId && that_present_plannerId))
        return false;
      if (!this.plannerId.equals(that.plannerId))
        return false;
    }

    boolean this_present_jobMetadata = true && this.isSetJobMetadata();
    boolean that_present_jobMetadata = true && that.isSetJobMetadata();
    if (this_present_jobMetadata || that_present_jobMetadata) {
      if (!(this_present_jobMetadata && that_present_jobMetadata))
        return false;
      if (!this.jobMetadata.equals(that.jobMetadata))
        return false;
    }

    boolean this_present_modifiedSinceTime = true && this.isSetModifiedSinceTime();
    boolean that_present_modifiedSinceTime = true && that.isSetModifiedSinceTime();
    if (this_present_modifiedSinceTime || that_present_modifiedSinceTime) {
      if (!(this_present_modifiedSinceTime && that_present_modifiedSinceTime))
        return false;
      if (this.modifiedSinceTime != that.modifiedSinceTime)
        return false;
    }

    boolean this_present_modifiedBeforeTime = true && this.isSetModifiedBeforeTime();
    boolean that_present_modifiedBeforeTime = true && that.isSetModifiedBeforeTime();
    if (this_present_modifiedBeforeTime || that_present_modifiedBeforeTime) {
      if (!(this_present_modifiedBeforeTime && that_present_modifiedBeforeTime))
        return false;
      if (this.modifiedBeforeTime != that.modifiedBeforeTime)
        return false;
    }

    boolean this_present_includeRecurringJobs = true && this.isSetIncludeRecurringJobs();
    boolean that_present_includeRecurringJobs = true && that.isSetIncludeRecurringJobs();
    if (this_present_includeRecurringJobs || that_present_includeRecurringJobs) {
      if (!(this_present_includeRecurringJobs && that_present_includeRecurringJobs))
        return false;
      if (this.includeRecurringJobs != that.includeRecurringJobs)
        return false;
    }

    boolean this_present_jobTypes = true && this.isSetJobTypes();
    boolean that_present_jobTypes = true && that.isSetJobTypes();
    if (this_present_jobTypes || that_present_jobTypes) {
      if (!(this_present_jobTypes && that_present_jobTypes))
        return false;
      if (!this.jobTypes.equals(that.jobTypes))
        return false;
    }

    boolean this_present_archivedOnly = true && this.isSetArchivedOnly();
    boolean that_present_archivedOnly = true && that.isSetArchivedOnly();
    if (this_present_archivedOnly || that_present_archivedOnly) {
      if (!(this_present_archivedOnly && that_present_archivedOnly))
        return false;
      if (this.archivedOnly != that.archivedOnly)
        return false;
    }

    boolean this_present_minCreatedAt = true && this.isSetMinCreatedAt();
    boolean that_present_minCreatedAt = true && that.isSetMinCreatedAt();
    if (this_present_minCreatedAt || that_present_minCreatedAt) {
      if (!(this_present_minCreatedAt && that_present_minCreatedAt))
        return false;
      if (this.minCreatedAt != that.minCreatedAt)
        return false;
    }

    boolean this_present_maxCreatedAt = true && this.isSetMaxCreatedAt();
    boolean that_present_maxCreatedAt = true && that.isSetMaxCreatedAt();
    if (this_present_maxCreatedAt || that_present_maxCreatedAt) {
      if (!(this_present_maxCreatedAt && that_present_maxCreatedAt))
        return false;
      if (this.maxCreatedAt != that.maxCreatedAt)
        return false;
    }

    boolean this_present_startedSinceTime = true && this.isSetStartedSinceTime();
    boolean that_present_startedSinceTime = true && that.isSetStartedSinceTime();
    if (this_present_startedSinceTime || that_present_startedSinceTime) {
      if (!(this_present_startedSinceTime && that_present_startedSinceTime))
        return false;
      if (this.startedSinceTime != that.startedSinceTime)
        return false;
    }

    boolean this_present_startedBeforeTime = true && this.isSetStartedBeforeTime();
    boolean that_present_startedBeforeTime = true && that.isSetStartedBeforeTime();
    if (this_present_startedBeforeTime || that_present_startedBeforeTime) {
      if (!(this_present_startedBeforeTime && that_present_startedBeforeTime))
        return false;
      if (this.startedBeforeTime != that.startedBeforeTime)
        return false;
    }

    boolean this_present_sourceTemplateIds = true && this.isSetSourceTemplateIds();
    boolean that_present_sourceTemplateIds = true && that.isSetSourceTemplateIds();
    if (this_present_sourceTemplateIds || that_present_sourceTemplateIds) {
      if (!(this_present_sourceTemplateIds && that_present_sourceTemplateIds))
        return false;
      if (!this.sourceTemplateIds.equals(that.sourceTemplateIds))
        return false;
    }

    boolean this_present_allSourceTemplateIds = true && this.isSetAllSourceTemplateIds();
    boolean that_present_allSourceTemplateIds = true && that.isSetAllSourceTemplateIds();
    if (this_present_allSourceTemplateIds || that_present_allSourceTemplateIds) {
      if (!(this_present_allSourceTemplateIds && that_present_allSourceTemplateIds))
        return false;
      if (this.allSourceTemplateIds != that.allSourceTemplateIds)
        return false;
    }

    boolean this_present_priorities = true && this.isSetPriorities();
    boolean that_present_priorities = true && that.isSetPriorities();
    if (this_present_priorities || that_present_priorities) {
      if (!(this_present_priorities && that_present_priorities))
        return false;
      if (!this.priorities.equals(that.priorities))
        return false;
    }

    boolean this_present_srcJobIds = true && this.isSetSrcJobIds();
    boolean that_present_srcJobIds = true && that.isSetSrcJobIds();
    if (this_present_srcJobIds || that_present_srcJobIds) {
      if (!(this_present_srcJobIds && that_present_srcJobIds))
        return false;
      if (!this.srcJobIds.equals(that.srcJobIds))
        return false;
    }

    boolean this_present_completedSinceTime = true && this.isSetCompletedSinceTime();
    boolean that_present_completedSinceTime = true && that.isSetCompletedSinceTime();
    if (this_present_completedSinceTime || that_present_completedSinceTime) {
      if (!(this_present_completedSinceTime && that_present_completedSinceTime))
        return false;
      if (this.completedSinceTime != that.completedSinceTime)
        return false;
    }

    boolean this_present_completedBeforeTime = true && this.isSetCompletedBeforeTime();
    boolean that_present_completedBeforeTime = true && that.isSetCompletedBeforeTime();
    if (this_present_completedBeforeTime || that_present_completedBeforeTime) {
      if (!(this_present_completedBeforeTime && that_present_completedBeforeTime))
        return false;
      if (this.completedBeforeTime != that.completedBeforeTime)
        return false;
    }

    boolean this_present_teamIds = true && this.isSetTeamIds();
    boolean that_present_teamIds = true && that.isSetTeamIds();
    if (this_present_teamIds || that_present_teamIds) {
      if (!(this_present_teamIds && that_present_teamIds))
        return false;
      if (!this.teamIds.equals(that.teamIds))
        return false;
    }

    boolean this_present_allUserTeams = true && this.isSetAllUserTeams();
    boolean that_present_allUserTeams = true && that.isSetAllUserTeams();
    if (this_present_allUserTeams || that_present_allUserTeams) {
      if (!(this_present_allUserTeams && that_present_allUserTeams))
        return false;
      if (this.allUserTeams != that.allUserTeams)
        return false;
    }

    boolean this_present_pageReq = true && this.isSetPageReq();
    boolean that_present_pageReq = true && that.isSetPageReq();
    if (this_present_pageReq || that_present_pageReq) {
      if (!(this_present_pageReq && that_present_pageReq))
        return false;
      if (!this.pageReq.equals(that.pageReq))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_teamId = true && (isSetTeamId());
    list.add(present_teamId);
    if (present_teamId)
      list.add(teamId);

    boolean present_userId = true && (isSetUserId());
    list.add(present_userId);
    if (present_userId)
      list.add(userId);

    boolean present_isComplete = true && (isSetIsComplete());
    list.add(present_isComplete);
    if (present_isComplete)
      list.add(isComplete);

    boolean present_isPreview = true && (isSetIsPreview());
    list.add(present_isPreview);
    if (present_isPreview)
      list.add(isPreview);

    boolean present_isStarted = true;
    list.add(present_isStarted);
    if (present_isStarted)
      list.add(isStarted);

    boolean present_txt = true && (isSetTxt());
    list.add(present_txt);
    if (present_txt)
      list.add(txt);

    boolean present_templateMetadata = true && (isSetTemplateMetadata());
    list.add(present_templateMetadata);
    if (present_templateMetadata)
      list.add(templateMetadata);

    boolean present_creatorId = true && (isSetCreatorId());
    list.add(present_creatorId);
    if (present_creatorId)
      list.add(creatorId);

    boolean present_plannerId = true && (isSetPlannerId());
    list.add(present_plannerId);
    if (present_plannerId)
      list.add(plannerId);

    boolean present_jobMetadata = true && (isSetJobMetadata());
    list.add(present_jobMetadata);
    if (present_jobMetadata)
      list.add(jobMetadata);

    boolean present_modifiedSinceTime = true && (isSetModifiedSinceTime());
    list.add(present_modifiedSinceTime);
    if (present_modifiedSinceTime)
      list.add(modifiedSinceTime);

    boolean present_modifiedBeforeTime = true && (isSetModifiedBeforeTime());
    list.add(present_modifiedBeforeTime);
    if (present_modifiedBeforeTime)
      list.add(modifiedBeforeTime);

    boolean present_includeRecurringJobs = true && (isSetIncludeRecurringJobs());
    list.add(present_includeRecurringJobs);
    if (present_includeRecurringJobs)
      list.add(includeRecurringJobs);

    boolean present_jobTypes = true && (isSetJobTypes());
    list.add(present_jobTypes);
    if (present_jobTypes)
      list.add(jobTypes);

    boolean present_archivedOnly = true && (isSetArchivedOnly());
    list.add(present_archivedOnly);
    if (present_archivedOnly)
      list.add(archivedOnly);

    boolean present_minCreatedAt = true && (isSetMinCreatedAt());
    list.add(present_minCreatedAt);
    if (present_minCreatedAt)
      list.add(minCreatedAt);

    boolean present_maxCreatedAt = true && (isSetMaxCreatedAt());
    list.add(present_maxCreatedAt);
    if (present_maxCreatedAt)
      list.add(maxCreatedAt);

    boolean present_startedSinceTime = true && (isSetStartedSinceTime());
    list.add(present_startedSinceTime);
    if (present_startedSinceTime)
      list.add(startedSinceTime);

    boolean present_startedBeforeTime = true && (isSetStartedBeforeTime());
    list.add(present_startedBeforeTime);
    if (present_startedBeforeTime)
      list.add(startedBeforeTime);

    boolean present_sourceTemplateIds = true && (isSetSourceTemplateIds());
    list.add(present_sourceTemplateIds);
    if (present_sourceTemplateIds)
      list.add(sourceTemplateIds);

    boolean present_allSourceTemplateIds = true && (isSetAllSourceTemplateIds());
    list.add(present_allSourceTemplateIds);
    if (present_allSourceTemplateIds)
      list.add(allSourceTemplateIds);

    boolean present_priorities = true && (isSetPriorities());
    list.add(present_priorities);
    if (present_priorities)
      list.add(priorities);

    boolean present_srcJobIds = true && (isSetSrcJobIds());
    list.add(present_srcJobIds);
    if (present_srcJobIds)
      list.add(srcJobIds);

    boolean present_completedSinceTime = true && (isSetCompletedSinceTime());
    list.add(present_completedSinceTime);
    if (present_completedSinceTime)
      list.add(completedSinceTime);

    boolean present_completedBeforeTime = true && (isSetCompletedBeforeTime());
    list.add(present_completedBeforeTime);
    if (present_completedBeforeTime)
      list.add(completedBeforeTime);

    boolean present_teamIds = true && (isSetTeamIds());
    list.add(present_teamIds);
    if (present_teamIds)
      list.add(teamIds);

    boolean present_allUserTeams = true && (isSetAllUserTeams());
    list.add(present_allUserTeams);
    if (present_allUserTeams)
      list.add(allUserTeams);

    boolean present_pageReq = true && (isSetPageReq());
    list.add(present_pageReq);
    if (present_pageReq)
      list.add(pageReq);

    return list.hashCode();
  }

  @Override
  public int compareTo(JobWhereOpts other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTeamId()).compareTo(other.isSetTeamId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeamId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teamId, other.teamId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsComplete()).compareTo(other.isSetIsComplete());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsComplete()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isComplete, other.isComplete);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsPreview()).compareTo(other.isSetIsPreview());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsPreview()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isPreview, other.isPreview);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsStarted()).compareTo(other.isSetIsStarted());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsStarted()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isStarted, other.isStarted);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTxt()).compareTo(other.isSetTxt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTxt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.txt, other.txt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTemplateMetadata()).compareTo(other.isSetTemplateMetadata());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTemplateMetadata()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.templateMetadata, other.templateMetadata);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreatorId()).compareTo(other.isSetCreatorId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreatorId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creatorId, other.creatorId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlannerId()).compareTo(other.isSetPlannerId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlannerId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.plannerId, other.plannerId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJobMetadata()).compareTo(other.isSetJobMetadata());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJobMetadata()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobMetadata, other.jobMetadata);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetModifiedSinceTime()).compareTo(other.isSetModifiedSinceTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModifiedSinceTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modifiedSinceTime, other.modifiedSinceTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetModifiedBeforeTime()).compareTo(other.isSetModifiedBeforeTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModifiedBeforeTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modifiedBeforeTime, other.modifiedBeforeTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIncludeRecurringJobs()).compareTo(other.isSetIncludeRecurringJobs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIncludeRecurringJobs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.includeRecurringJobs, other.includeRecurringJobs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJobTypes()).compareTo(other.isSetJobTypes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJobTypes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobTypes, other.jobTypes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArchivedOnly()).compareTo(other.isSetArchivedOnly());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArchivedOnly()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.archivedOnly, other.archivedOnly);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMinCreatedAt()).compareTo(other.isSetMinCreatedAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMinCreatedAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minCreatedAt, other.minCreatedAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxCreatedAt()).compareTo(other.isSetMaxCreatedAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxCreatedAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxCreatedAt, other.maxCreatedAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartedSinceTime()).compareTo(other.isSetStartedSinceTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartedSinceTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startedSinceTime, other.startedSinceTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartedBeforeTime()).compareTo(other.isSetStartedBeforeTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartedBeforeTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startedBeforeTime, other.startedBeforeTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSourceTemplateIds()).compareTo(other.isSetSourceTemplateIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSourceTemplateIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sourceTemplateIds, other.sourceTemplateIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAllSourceTemplateIds()).compareTo(other.isSetAllSourceTemplateIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAllSourceTemplateIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.allSourceTemplateIds, other.allSourceTemplateIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPriorities()).compareTo(other.isSetPriorities());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPriorities()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priorities, other.priorities);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSrcJobIds()).compareTo(other.isSetSrcJobIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSrcJobIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.srcJobIds, other.srcJobIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompletedSinceTime()).compareTo(other.isSetCompletedSinceTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompletedSinceTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.completedSinceTime, other.completedSinceTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompletedBeforeTime()).compareTo(other.isSetCompletedBeforeTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompletedBeforeTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.completedBeforeTime, other.completedBeforeTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTeamIds()).compareTo(other.isSetTeamIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeamIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teamIds, other.teamIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAllUserTeams()).compareTo(other.isSetAllUserTeams());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAllUserTeams()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.allUserTeams, other.allUserTeams);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPageReq()).compareTo(other.isSetPageReq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPageReq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageReq, other.pageReq);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("JobWhereOpts(");
    boolean first = true;

    if (isSetTeamId()) {
      sb.append("teamId:");
      if (this.teamId == null) {
        sb.append("null");
      } else {
        sb.append(this.teamId);
      }
      first = false;
    }
    if (isSetUserId()) {
      if (!first) sb.append(", ");
      sb.append("userId:");
      if (this.userId == null) {
        sb.append("null");
      } else {
        sb.append(this.userId);
      }
      first = false;
    }
    if (isSetIsComplete()) {
      if (!first) sb.append(", ");
      sb.append("isComplete:");
      sb.append(this.isComplete);
      first = false;
    }
    if (isSetIsPreview()) {
      if (!first) sb.append(", ");
      sb.append("isPreview:");
      sb.append(this.isPreview);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("isStarted:");
    sb.append(this.isStarted);
    first = false;
    if (isSetTxt()) {
      if (!first) sb.append(", ");
      sb.append("txt:");
      if (this.txt == null) {
        sb.append("null");
      } else {
        sb.append(this.txt);
      }
      first = false;
    }
    if (isSetTemplateMetadata()) {
      if (!first) sb.append(", ");
      sb.append("templateMetadata:");
      if (this.templateMetadata == null) {
        sb.append("null");
      } else {
        sb.append(this.templateMetadata);
      }
      first = false;
    }
    if (isSetCreatorId()) {
      if (!first) sb.append(", ");
      sb.append("creatorId:");
      if (this.creatorId == null) {
        sb.append("null");
      } else {
        sb.append(this.creatorId);
      }
      first = false;
    }
    if (isSetPlannerId()) {
      if (!first) sb.append(", ");
      sb.append("plannerId:");
      if (this.plannerId == null) {
        sb.append("null");
      } else {
        sb.append(this.plannerId);
      }
      first = false;
    }
    if (isSetJobMetadata()) {
      if (!first) sb.append(", ");
      sb.append("jobMetadata:");
      if (this.jobMetadata == null) {
        sb.append("null");
      } else {
        sb.append(this.jobMetadata);
      }
      first = false;
    }
    if (isSetModifiedSinceTime()) {
      if (!first) sb.append(", ");
      sb.append("modifiedSinceTime:");
      sb.append(this.modifiedSinceTime);
      first = false;
    }
    if (isSetModifiedBeforeTime()) {
      if (!first) sb.append(", ");
      sb.append("modifiedBeforeTime:");
      sb.append(this.modifiedBeforeTime);
      first = false;
    }
    if (isSetIncludeRecurringJobs()) {
      if (!first) sb.append(", ");
      sb.append("includeRecurringJobs:");
      sb.append(this.includeRecurringJobs);
      first = false;
    }
    if (isSetJobTypes()) {
      if (!first) sb.append(", ");
      sb.append("jobTypes:");
      if (this.jobTypes == null) {
        sb.append("null");
      } else {
        sb.append(this.jobTypes);
      }
      first = false;
    }
    if (isSetArchivedOnly()) {
      if (!first) sb.append(", ");
      sb.append("archivedOnly:");
      sb.append(this.archivedOnly);
      first = false;
    }
    if (isSetMinCreatedAt()) {
      if (!first) sb.append(", ");
      sb.append("minCreatedAt:");
      sb.append(this.minCreatedAt);
      first = false;
    }
    if (isSetMaxCreatedAt()) {
      if (!first) sb.append(", ");
      sb.append("maxCreatedAt:");
      sb.append(this.maxCreatedAt);
      first = false;
    }
    if (isSetStartedSinceTime()) {
      if (!first) sb.append(", ");
      sb.append("startedSinceTime:");
      sb.append(this.startedSinceTime);
      first = false;
    }
    if (isSetStartedBeforeTime()) {
      if (!first) sb.append(", ");
      sb.append("startedBeforeTime:");
      sb.append(this.startedBeforeTime);
      first = false;
    }
    if (isSetSourceTemplateIds()) {
      if (!first) sb.append(", ");
      sb.append("sourceTemplateIds:");
      if (this.sourceTemplateIds == null) {
        sb.append("null");
      } else {
        sb.append(this.sourceTemplateIds);
      }
      first = false;
    }
    if (isSetAllSourceTemplateIds()) {
      if (!first) sb.append(", ");
      sb.append("allSourceTemplateIds:");
      sb.append(this.allSourceTemplateIds);
      first = false;
    }
    if (isSetPriorities()) {
      if (!first) sb.append(", ");
      sb.append("priorities:");
      if (this.priorities == null) {
        sb.append("null");
      } else {
        sb.append(this.priorities);
      }
      first = false;
    }
    if (isSetSrcJobIds()) {
      if (!first) sb.append(", ");
      sb.append("srcJobIds:");
      if (this.srcJobIds == null) {
        sb.append("null");
      } else {
        sb.append(this.srcJobIds);
      }
      first = false;
    }
    if (isSetCompletedSinceTime()) {
      if (!first) sb.append(", ");
      sb.append("completedSinceTime:");
      sb.append(this.completedSinceTime);
      first = false;
    }
    if (isSetCompletedBeforeTime()) {
      if (!first) sb.append(", ");
      sb.append("completedBeforeTime:");
      sb.append(this.completedBeforeTime);
      first = false;
    }
    if (isSetTeamIds()) {
      if (!first) sb.append(", ");
      sb.append("teamIds:");
      if (this.teamIds == null) {
        sb.append("null");
      } else {
        sb.append(this.teamIds);
      }
      first = false;
    }
    if (isSetAllUserTeams()) {
      if (!first) sb.append(", ");
      sb.append("allUserTeams:");
      sb.append(this.allUserTeams);
      first = false;
    }
    if (isSetPageReq()) {
      if (!first) sb.append(", ");
      sb.append("pageReq:");
      if (this.pageReq == null) {
        sb.append("null");
      } else {
        sb.append(this.pageReq);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (txt != null) {
      txt.validate();
    }
    if (pageReq != null) {
      pageReq.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class JobWhereOptsStandardSchemeFactory implements SchemeFactory {
    public JobWhereOptsStandardScheme getScheme() {
      return new JobWhereOptsStandardScheme();
    }
  }

  private static class JobWhereOptsStandardScheme extends StandardScheme<JobWhereOpts> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, JobWhereOpts struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TEAM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.teamId = iprot.readString();
              struct.setTeamIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userId = iprot.readString();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // IS_COMPLETE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isComplete = iprot.readBool();
              struct.setIsCompleteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IS_PREVIEW
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isPreview = iprot.readBool();
              struct.setIsPreviewIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IS_STARTED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isStarted = iprot.readBool();
              struct.setIsStartedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.txt = new JobTextSearch();
              struct.txt.read(iprot);
              struct.setTxtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TEMPLATE_METADATA
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list146 = iprot.readListBegin();
                struct.templateMetadata = new ArrayList<com.wi.director.thrift.v1.metadata.MetadataEntry>(_list146.size);
                com.wi.director.thrift.v1.metadata.MetadataEntry _elem147;
                for (int _i148 = 0; _i148 < _list146.size; ++_i148)
                {
                  _elem147 = new com.wi.director.thrift.v1.metadata.MetadataEntry();
                  _elem147.read(iprot);
                  struct.templateMetadata.add(_elem147);
                }
                iprot.readListEnd();
              }
              struct.setTemplateMetadataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CREATOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.creatorId = iprot.readString();
              struct.setCreatorIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PLANNER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.plannerId = iprot.readString();
              struct.setPlannerIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // JOB_METADATA
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list149 = iprot.readListBegin();
                struct.jobMetadata = new ArrayList<com.wi.director.thrift.v1.metadata.MetadataEntry>(_list149.size);
                com.wi.director.thrift.v1.metadata.MetadataEntry _elem150;
                for (int _i151 = 0; _i151 < _list149.size; ++_i151)
                {
                  _elem150 = new com.wi.director.thrift.v1.metadata.MetadataEntry();
                  _elem150.read(iprot);
                  struct.jobMetadata.add(_elem150);
                }
                iprot.readListEnd();
              }
              struct.setJobMetadataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // MODIFIED_SINCE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.modifiedSinceTime = iprot.readI64();
              struct.setModifiedSinceTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // MODIFIED_BEFORE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.modifiedBeforeTime = iprot.readI64();
              struct.setModifiedBeforeTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // INCLUDE_RECURRING_JOBS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.includeRecurringJobs = iprot.readBool();
              struct.setIncludeRecurringJobsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // JOB_TYPES
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set152 = iprot.readSetBegin();
                struct.jobTypes = new HashSet<JobType>(2*_set152.size);
                JobType _elem153;
                for (int _i154 = 0; _i154 < _set152.size; ++_i154)
                {
                  _elem153 = com.wi.director.thrift.v1.job.JobType.findByValue(iprot.readI32());
                  struct.jobTypes.add(_elem153);
                }
                iprot.readSetEnd();
              }
              struct.setJobTypesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // ARCHIVED_ONLY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.archivedOnly = iprot.readBool();
              struct.setArchivedOnlyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // MIN_CREATED_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.minCreatedAt = iprot.readI64();
              struct.setMinCreatedAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // MAX_CREATED_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.maxCreatedAt = iprot.readI64();
              struct.setMaxCreatedAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // STARTED_SINCE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.startedSinceTime = iprot.readI64();
              struct.setStartedSinceTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // STARTED_BEFORE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.startedBeforeTime = iprot.readI64();
              struct.setStartedBeforeTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // SOURCE_TEMPLATE_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list155 = iprot.readListBegin();
                struct.sourceTemplateIds = new ArrayList<String>(_list155.size);
                String _elem156;
                for (int _i157 = 0; _i157 < _list155.size; ++_i157)
                {
                  _elem156 = iprot.readString();
                  struct.sourceTemplateIds.add(_elem156);
                }
                iprot.readListEnd();
              }
              struct.setSourceTemplateIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // ALL_SOURCE_TEMPLATE_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.allSourceTemplateIds = iprot.readBool();
              struct.setAllSourceTemplateIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // PRIORITIES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list158 = iprot.readListBegin();
                struct.priorities = new ArrayList<Integer>(_list158.size);
                int _elem159;
                for (int _i160 = 0; _i160 < _list158.size; ++_i160)
                {
                  _elem159 = iprot.readI32();
                  struct.priorities.add(_elem159);
                }
                iprot.readListEnd();
              }
              struct.setPrioritiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // SRC_JOB_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list161 = iprot.readListBegin();
                struct.srcJobIds = new ArrayList<String>(_list161.size);
                String _elem162;
                for (int _i163 = 0; _i163 < _list161.size; ++_i163)
                {
                  _elem162 = iprot.readString();
                  struct.srcJobIds.add(_elem162);
                }
                iprot.readListEnd();
              }
              struct.setSrcJobIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // COMPLETED_SINCE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.completedSinceTime = iprot.readI64();
              struct.setCompletedSinceTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // COMPLETED_BEFORE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.completedBeforeTime = iprot.readI64();
              struct.setCompletedBeforeTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // TEAM_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list164 = iprot.readListBegin();
                struct.teamIds = new ArrayList<String>(_list164.size);
                String _elem165;
                for (int _i166 = 0; _i166 < _list164.size; ++_i166)
                {
                  _elem165 = iprot.readString();
                  struct.teamIds.add(_elem165);
                }
                iprot.readListEnd();
              }
              struct.setTeamIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // ALL_USER_TEAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.allUserTeams = iprot.readBool();
              struct.setAllUserTeamsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // PAGE_REQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.pageReq = new com.wi.director.thrift.v1.common.PageReq();
              struct.pageReq.read(iprot);
              struct.setPageReqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, JobWhereOpts struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.teamId != null) {
        if (struct.isSetTeamId()) {
          oprot.writeFieldBegin(TEAM_ID_FIELD_DESC);
          oprot.writeString(struct.teamId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.userId != null) {
        if (struct.isSetUserId()) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.userId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIsComplete()) {
        oprot.writeFieldBegin(IS_COMPLETE_FIELD_DESC);
        oprot.writeBool(struct.isComplete);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIsPreview()) {
        oprot.writeFieldBegin(IS_PREVIEW_FIELD_DESC);
        oprot.writeBool(struct.isPreview);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_STARTED_FIELD_DESC);
      oprot.writeBool(struct.isStarted);
      oprot.writeFieldEnd();
      if (struct.txt != null) {
        if (struct.isSetTxt()) {
          oprot.writeFieldBegin(TXT_FIELD_DESC);
          struct.txt.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.templateMetadata != null) {
        if (struct.isSetTemplateMetadata()) {
          oprot.writeFieldBegin(TEMPLATE_METADATA_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.templateMetadata.size()));
            for (com.wi.director.thrift.v1.metadata.MetadataEntry _iter167 : struct.templateMetadata)
            {
              _iter167.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.creatorId != null) {
        if (struct.isSetCreatorId()) {
          oprot.writeFieldBegin(CREATOR_ID_FIELD_DESC);
          oprot.writeString(struct.creatorId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.plannerId != null) {
        if (struct.isSetPlannerId()) {
          oprot.writeFieldBegin(PLANNER_ID_FIELD_DESC);
          oprot.writeString(struct.plannerId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.jobMetadata != null) {
        if (struct.isSetJobMetadata()) {
          oprot.writeFieldBegin(JOB_METADATA_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.jobMetadata.size()));
            for (com.wi.director.thrift.v1.metadata.MetadataEntry _iter168 : struct.jobMetadata)
            {
              _iter168.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetModifiedSinceTime()) {
        oprot.writeFieldBegin(MODIFIED_SINCE_TIME_FIELD_DESC);
        oprot.writeI64(struct.modifiedSinceTime);
        oprot.writeFieldEnd();
      }
      if (struct.isSetModifiedBeforeTime()) {
        oprot.writeFieldBegin(MODIFIED_BEFORE_TIME_FIELD_DESC);
        oprot.writeI64(struct.modifiedBeforeTime);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIncludeRecurringJobs()) {
        oprot.writeFieldBegin(INCLUDE_RECURRING_JOBS_FIELD_DESC);
        oprot.writeBool(struct.includeRecurringJobs);
        oprot.writeFieldEnd();
      }
      if (struct.jobTypes != null) {
        if (struct.isSetJobTypes()) {
          oprot.writeFieldBegin(JOB_TYPES_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.jobTypes.size()));
            for (JobType _iter169 : struct.jobTypes)
            {
              oprot.writeI32(_iter169.getValue());
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetArchivedOnly()) {
        oprot.writeFieldBegin(ARCHIVED_ONLY_FIELD_DESC);
        oprot.writeBool(struct.archivedOnly);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMinCreatedAt()) {
        oprot.writeFieldBegin(MIN_CREATED_AT_FIELD_DESC);
        oprot.writeI64(struct.minCreatedAt);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMaxCreatedAt()) {
        oprot.writeFieldBegin(MAX_CREATED_AT_FIELD_DESC);
        oprot.writeI64(struct.maxCreatedAt);
        oprot.writeFieldEnd();
      }
      if (struct.isSetStartedSinceTime()) {
        oprot.writeFieldBegin(STARTED_SINCE_TIME_FIELD_DESC);
        oprot.writeI64(struct.startedSinceTime);
        oprot.writeFieldEnd();
      }
      if (struct.isSetStartedBeforeTime()) {
        oprot.writeFieldBegin(STARTED_BEFORE_TIME_FIELD_DESC);
        oprot.writeI64(struct.startedBeforeTime);
        oprot.writeFieldEnd();
      }
      if (struct.pageReq != null) {
        if (struct.isSetPageReq()) {
          oprot.writeFieldBegin(PAGE_REQ_FIELD_DESC);
          struct.pageReq.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.sourceTemplateIds != null) {
        if (struct.isSetSourceTemplateIds()) {
          oprot.writeFieldBegin(SOURCE_TEMPLATE_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.sourceTemplateIds.size()));
            for (String _iter170 : struct.sourceTemplateIds)
            {
              oprot.writeString(_iter170);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.priorities != null) {
        if (struct.isSetPriorities()) {
          oprot.writeFieldBegin(PRIORITIES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.priorities.size()));
            for (int _iter171 : struct.priorities)
            {
              oprot.writeI32(_iter171);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.srcJobIds != null) {
        if (struct.isSetSrcJobIds()) {
          oprot.writeFieldBegin(SRC_JOB_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.srcJobIds.size()));
            for (String _iter172 : struct.srcJobIds)
            {
              oprot.writeString(_iter172);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCompletedSinceTime()) {
        oprot.writeFieldBegin(COMPLETED_SINCE_TIME_FIELD_DESC);
        oprot.writeI64(struct.completedSinceTime);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCompletedBeforeTime()) {
        oprot.writeFieldBegin(COMPLETED_BEFORE_TIME_FIELD_DESC);
        oprot.writeI64(struct.completedBeforeTime);
        oprot.writeFieldEnd();
      }
      if (struct.teamIds != null) {
        if (struct.isSetTeamIds()) {
          oprot.writeFieldBegin(TEAM_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.teamIds.size()));
            for (String _iter173 : struct.teamIds)
            {
              oprot.writeString(_iter173);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetAllUserTeams()) {
        oprot.writeFieldBegin(ALL_USER_TEAMS_FIELD_DESC);
        oprot.writeBool(struct.allUserTeams);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAllSourceTemplateIds()) {
        oprot.writeFieldBegin(ALL_SOURCE_TEMPLATE_IDS_FIELD_DESC);
        oprot.writeBool(struct.allSourceTemplateIds);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

}

