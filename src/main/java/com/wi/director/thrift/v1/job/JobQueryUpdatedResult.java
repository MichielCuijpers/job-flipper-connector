/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wi.director.thrift.v1.job;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class JobQueryUpdatedResult implements org.apache.thrift.TBase<JobQueryUpdatedResult, JobQueryUpdatedResult._Fields>, java.io.Serializable, Cloneable, Comparable<JobQueryUpdatedResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("JobQueryUpdatedResult");

  private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField JOBS_FIELD_DESC = new org.apache.thrift.protocol.TField("jobs", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField REMOVED_JOB_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("removedJobIds", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new JobQueryUpdatedResultStandardSchemeFactory());
  }

  public long timestamp; // required
  public List<JobModular> jobs; // required
  public List<String> removedJobIds; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TIMESTAMP((short)1, "timestamp"),
    JOBS((short)2, "jobs"),
    REMOVED_JOB_IDS((short)3, "removedJobIds");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TIMESTAMP
          return TIMESTAMP;
        case 2: // JOBS
          return JOBS;
        case 3: // REMOVED_JOB_IDS
          return REMOVED_JOB_IDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TIMESTAMP_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.JOBS, new org.apache.thrift.meta_data.FieldMetaData("jobs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JobModular.class))));
    tmpMap.put(_Fields.REMOVED_JOB_IDS, new org.apache.thrift.meta_data.FieldMetaData("removedJobIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(JobQueryUpdatedResult.class, metaDataMap);
  }

  public JobQueryUpdatedResult() {
  }

  public JobQueryUpdatedResult(
    long timestamp,
    List<JobModular> jobs,
    List<String> removedJobIds)
  {
    this();
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    this.jobs = jobs;
    this.removedJobIds = removedJobIds;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public JobQueryUpdatedResult(JobQueryUpdatedResult other) {
    __isset_bitfield = other.__isset_bitfield;
    this.timestamp = other.timestamp;
    if (other.isSetJobs()) {
      List<JobModular> __this__jobs = new ArrayList<JobModular>(other.jobs.size());
      for (JobModular other_element : other.jobs) {
        __this__jobs.add(new JobModular(other_element));
      }
      this.jobs = __this__jobs;
    }
    if (other.isSetRemovedJobIds()) {
      List<String> __this__removedJobIds = new ArrayList<String>(other.removedJobIds);
      this.removedJobIds = __this__removedJobIds;
    }
  }

  public JobQueryUpdatedResult deepCopy() {
    return new JobQueryUpdatedResult(this);
  }

  @Override
  public void clear() {
    setTimestampIsSet(false);
    this.timestamp = 0;
    this.jobs = null;
    this.removedJobIds = null;
  }

  public long getTimestamp() {
    return this.timestamp;
  }

  public JobQueryUpdatedResult setTimestamp(long timestamp) {
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    return this;
  }

  public void unsetTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  public void setTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
  }

  public int getJobsSize() {
    return (this.jobs == null) ? 0 : this.jobs.size();
  }

  public java.util.Iterator<JobModular> getJobsIterator() {
    return (this.jobs == null) ? null : this.jobs.iterator();
  }

  public void addToJobs(JobModular elem) {
    if (this.jobs == null) {
      this.jobs = new ArrayList<JobModular>();
    }
    this.jobs.add(elem);
  }

  public List<JobModular> getJobs() {
    return this.jobs;
  }

  public JobQueryUpdatedResult setJobs(List<JobModular> jobs) {
    this.jobs = jobs;
    return this;
  }

  public void unsetJobs() {
    this.jobs = null;
  }

  /** Returns true if field jobs is set (has been assigned a value) and false otherwise */
  public boolean isSetJobs() {
    return this.jobs != null;
  }

  public void setJobsIsSet(boolean value) {
    if (!value) {
      this.jobs = null;
    }
  }

  public int getRemovedJobIdsSize() {
    return (this.removedJobIds == null) ? 0 : this.removedJobIds.size();
  }

  public java.util.Iterator<String> getRemovedJobIdsIterator() {
    return (this.removedJobIds == null) ? null : this.removedJobIds.iterator();
  }

  public void addToRemovedJobIds(String elem) {
    if (this.removedJobIds == null) {
      this.removedJobIds = new ArrayList<String>();
    }
    this.removedJobIds.add(elem);
  }

  public List<String> getRemovedJobIds() {
    return this.removedJobIds;
  }

  public JobQueryUpdatedResult setRemovedJobIds(List<String> removedJobIds) {
    this.removedJobIds = removedJobIds;
    return this;
  }

  public void unsetRemovedJobIds() {
    this.removedJobIds = null;
  }

  /** Returns true if field removedJobIds is set (has been assigned a value) and false otherwise */
  public boolean isSetRemovedJobIds() {
    return this.removedJobIds != null;
  }

  public void setRemovedJobIdsIsSet(boolean value) {
    if (!value) {
      this.removedJobIds = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TIMESTAMP:
      if (value == null) {
        unsetTimestamp();
      } else {
        setTimestamp((Long)value);
      }
      break;

    case JOBS:
      if (value == null) {
        unsetJobs();
      } else {
        setJobs((List<JobModular>)value);
      }
      break;

    case REMOVED_JOB_IDS:
      if (value == null) {
        unsetRemovedJobIds();
      } else {
        setRemovedJobIds((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TIMESTAMP:
      return getTimestamp();

    case JOBS:
      return getJobs();

    case REMOVED_JOB_IDS:
      return getRemovedJobIds();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TIMESTAMP:
      return isSetTimestamp();
    case JOBS:
      return isSetJobs();
    case REMOVED_JOB_IDS:
      return isSetRemovedJobIds();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof JobQueryUpdatedResult)
      return this.equals((JobQueryUpdatedResult)that);
    return false;
  }

  public boolean equals(JobQueryUpdatedResult that) {
    if (that == null)
      return false;

    boolean this_present_timestamp = true;
    boolean that_present_timestamp = true;
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (this.timestamp != that.timestamp)
        return false;
    }

    boolean this_present_jobs = true && this.isSetJobs();
    boolean that_present_jobs = true && that.isSetJobs();
    if (this_present_jobs || that_present_jobs) {
      if (!(this_present_jobs && that_present_jobs))
        return false;
      if (!this.jobs.equals(that.jobs))
        return false;
    }

    boolean this_present_removedJobIds = true && this.isSetRemovedJobIds();
    boolean that_present_removedJobIds = true && that.isSetRemovedJobIds();
    if (this_present_removedJobIds || that_present_removedJobIds) {
      if (!(this_present_removedJobIds && that_present_removedJobIds))
        return false;
      if (!this.removedJobIds.equals(that.removedJobIds))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_timestamp = true;
    list.add(present_timestamp);
    if (present_timestamp)
      list.add(timestamp);

    boolean present_jobs = true && (isSetJobs());
    list.add(present_jobs);
    if (present_jobs)
      list.add(jobs);

    boolean present_removedJobIds = true && (isSetRemovedJobIds());
    list.add(present_removedJobIds);
    if (present_removedJobIds)
      list.add(removedJobIds);

    return list.hashCode();
  }

  @Override
  public int compareTo(JobQueryUpdatedResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJobs()).compareTo(other.isSetJobs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJobs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobs, other.jobs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemovedJobIds()).compareTo(other.isSetRemovedJobIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemovedJobIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.removedJobIds, other.removedJobIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("JobQueryUpdatedResult(");
    boolean first = true;

    sb.append("timestamp:");
    sb.append(this.timestamp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("jobs:");
    if (this.jobs == null) {
      sb.append("null");
    } else {
      sb.append(this.jobs);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("removedJobIds:");
    if (this.removedJobIds == null) {
      sb.append("null");
    } else {
      sb.append(this.removedJobIds);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class JobQueryUpdatedResultStandardSchemeFactory implements SchemeFactory {
    public JobQueryUpdatedResultStandardScheme getScheme() {
      return new JobQueryUpdatedResultStandardScheme();
    }
  }

  private static class JobQueryUpdatedResultStandardScheme extends StandardScheme<JobQueryUpdatedResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, JobQueryUpdatedResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timestamp = iprot.readI64();
              struct.setTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // JOBS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list178 = iprot.readListBegin();
                struct.jobs = new ArrayList<JobModular>(_list178.size);
                JobModular _elem179;
                for (int _i180 = 0; _i180 < _list178.size; ++_i180)
                {
                  _elem179 = new JobModular();
                  _elem179.read(iprot);
                  struct.jobs.add(_elem179);
                }
                iprot.readListEnd();
              }
              struct.setJobsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REMOVED_JOB_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list181 = iprot.readListBegin();
                struct.removedJobIds = new ArrayList<String>(_list181.size);
                String _elem182;
                for (int _i183 = 0; _i183 < _list181.size; ++_i183)
                {
                  _elem182 = iprot.readString();
                  struct.removedJobIds.add(_elem182);
                }
                iprot.readListEnd();
              }
              struct.setRemovedJobIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, JobQueryUpdatedResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
      oprot.writeI64(struct.timestamp);
      oprot.writeFieldEnd();
      if (struct.jobs != null) {
        oprot.writeFieldBegin(JOBS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.jobs.size()));
          for (JobModular _iter184 : struct.jobs)
          {
            _iter184.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.removedJobIds != null) {
        oprot.writeFieldBegin(REMOVED_JOB_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.removedJobIds.size()));
          for (String _iter185 : struct.removedJobIds)
          {
            oprot.writeString(_iter185);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

}

