/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wi.director.thrift.v1.datasheet;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class DataSheetSet implements org.apache.thrift.TBase<DataSheetSet, DataSheetSet._Fields>, java.io.Serializable, Cloneable, Comparable<DataSheetSet> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DataSheetSet");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CREATED_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("createdAt", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField UPDATED_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("updatedAt", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField ARCHIVED_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("archivedAt", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField LAST_AUTHOR_FIELD_DESC = new org.apache.thrift.protocol.TField("lastAuthor", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField DEFINITIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("definitions", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField SHEETS_FIELD_DESC = new org.apache.thrift.protocol.TField("sheets", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField ACTIVE_SHEET_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("activeSheetCount", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField ARCHIVED_SHEET_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("archivedSheetCount", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField ATTRIBUTES_FIELD_DESC = new org.apache.thrift.protocol.TField("attributes", org.apache.thrift.protocol.TType.LIST, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DataSheetSetStandardSchemeFactory());
  }

  public String id; // required
  public long createdAt; // required
  public long updatedAt; // required
  public long archivedAt; // required
  public String name; // required
  public String description; // required
  /**
   * Includes editing any content under the set
   */
  public com.wi.director.thrift.v1.user.UserModular lastAuthor; // optional
  /**
   * Can be re-ordered
   */
  public List<DataSheetDefinition> definitions; // optional
  public List<DataSheet> sheets; // optional
  public int activeSheetCount; // optional
  public int archivedSheetCount; // optional
  public List<com.wi.director.thrift.v1.abac.AbacAttribute> attributes; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    CREATED_AT((short)2, "createdAt"),
    UPDATED_AT((short)3, "updatedAt"),
    ARCHIVED_AT((short)4, "archivedAt"),
    NAME((short)5, "name"),
    DESCRIPTION((short)6, "description"),
    /**
     * Includes editing any content under the set
     */
    LAST_AUTHOR((short)7, "lastAuthor"),
    /**
     * Can be re-ordered
     */
    DEFINITIONS((short)8, "definitions"),
    SHEETS((short)9, "sheets"),
    ACTIVE_SHEET_COUNT((short)10, "activeSheetCount"),
    ARCHIVED_SHEET_COUNT((short)11, "archivedSheetCount"),
    ATTRIBUTES((short)12, "attributes");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // CREATED_AT
          return CREATED_AT;
        case 3: // UPDATED_AT
          return UPDATED_AT;
        case 4: // ARCHIVED_AT
          return ARCHIVED_AT;
        case 5: // NAME
          return NAME;
        case 6: // DESCRIPTION
          return DESCRIPTION;
        case 7: // LAST_AUTHOR
          return LAST_AUTHOR;
        case 8: // DEFINITIONS
          return DEFINITIONS;
        case 9: // SHEETS
          return SHEETS;
        case 10: // ACTIVE_SHEET_COUNT
          return ACTIVE_SHEET_COUNT;
        case 11: // ARCHIVED_SHEET_COUNT
          return ARCHIVED_SHEET_COUNT;
        case 12: // ATTRIBUTES
          return ATTRIBUTES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CREATEDAT_ISSET_ID = 0;
  private static final int __UPDATEDAT_ISSET_ID = 1;
  private static final int __ARCHIVEDAT_ISSET_ID = 2;
  private static final int __ACTIVESHEETCOUNT_ISSET_ID = 3;
  private static final int __ARCHIVEDSHEETCOUNT_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.LAST_AUTHOR,_Fields.DEFINITIONS,_Fields.SHEETS,_Fields.ACTIVE_SHEET_COUNT,_Fields.ARCHIVED_SHEET_COUNT,_Fields.ATTRIBUTES};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "UUID")));
    tmpMap.put(_Fields.CREATED_AT, new org.apache.thrift.meta_data.FieldMetaData("createdAt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "TimeInSecs")));
    tmpMap.put(_Fields.UPDATED_AT, new org.apache.thrift.meta_data.FieldMetaData("updatedAt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "TimeInSecs")));
    tmpMap.put(_Fields.ARCHIVED_AT, new org.apache.thrift.meta_data.FieldMetaData("archivedAt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "TimeInSecs")));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_AUTHOR, new org.apache.thrift.meta_data.FieldMetaData("lastAuthor", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.user.UserModular.class)));
    tmpMap.put(_Fields.DEFINITIONS, new org.apache.thrift.meta_data.FieldMetaData("definitions", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DataSheetDefinition.class))));
    tmpMap.put(_Fields.SHEETS, new org.apache.thrift.meta_data.FieldMetaData("sheets", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DataSheet.class))));
    tmpMap.put(_Fields.ACTIVE_SHEET_COUNT, new org.apache.thrift.meta_data.FieldMetaData("activeSheetCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ARCHIVED_SHEET_COUNT, new org.apache.thrift.meta_data.FieldMetaData("archivedSheetCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ATTRIBUTES, new org.apache.thrift.meta_data.FieldMetaData("attributes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.abac.AbacAttribute.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DataSheetSet.class, metaDataMap);
  }

  public DataSheetSet() {
  }

  public DataSheetSet(
    String id,
    long createdAt,
    long updatedAt,
    long archivedAt,
    String name,
    String description)
  {
    this();
    this.id = id;
    this.createdAt = createdAt;
    setCreatedAtIsSet(true);
    this.updatedAt = updatedAt;
    setUpdatedAtIsSet(true);
    this.archivedAt = archivedAt;
    setArchivedAtIsSet(true);
    this.name = name;
    this.description = description;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DataSheetSet(DataSheetSet other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = other.id;
    }
    this.createdAt = other.createdAt;
    this.updatedAt = other.updatedAt;
    this.archivedAt = other.archivedAt;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    if (other.isSetLastAuthor()) {
      this.lastAuthor = new com.wi.director.thrift.v1.user.UserModular(other.lastAuthor);
    }
    if (other.isSetDefinitions()) {
      List<DataSheetDefinition> __this__definitions = new ArrayList<DataSheetDefinition>(other.definitions.size());
      for (DataSheetDefinition other_element : other.definitions) {
        __this__definitions.add(new DataSheetDefinition(other_element));
      }
      this.definitions = __this__definitions;
    }
    if (other.isSetSheets()) {
      List<DataSheet> __this__sheets = new ArrayList<DataSheet>(other.sheets.size());
      for (DataSheet other_element : other.sheets) {
        __this__sheets.add(new DataSheet(other_element));
      }
      this.sheets = __this__sheets;
    }
    this.activeSheetCount = other.activeSheetCount;
    this.archivedSheetCount = other.archivedSheetCount;
    if (other.isSetAttributes()) {
      List<com.wi.director.thrift.v1.abac.AbacAttribute> __this__attributes = new ArrayList<com.wi.director.thrift.v1.abac.AbacAttribute>(other.attributes.size());
      for (com.wi.director.thrift.v1.abac.AbacAttribute other_element : other.attributes) {
        __this__attributes.add(new com.wi.director.thrift.v1.abac.AbacAttribute(other_element));
      }
      this.attributes = __this__attributes;
    }
  }

  public DataSheetSet deepCopy() {
    return new DataSheetSet(this);
  }

  @Override
  public void clear() {
    this.id = null;
    setCreatedAtIsSet(false);
    this.createdAt = 0;
    setUpdatedAtIsSet(false);
    this.updatedAt = 0;
    setArchivedAtIsSet(false);
    this.archivedAt = 0;
    this.name = null;
    this.description = null;
    this.lastAuthor = null;
    this.definitions = null;
    this.sheets = null;
    setActiveSheetCountIsSet(false);
    this.activeSheetCount = 0;
    setArchivedSheetCountIsSet(false);
    this.archivedSheetCount = 0;
    this.attributes = null;
  }

  public String getId() {
    return this.id;
  }

  public DataSheetSet setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public long getCreatedAt() {
    return this.createdAt;
  }

  public DataSheetSet setCreatedAt(long createdAt) {
    this.createdAt = createdAt;
    setCreatedAtIsSet(true);
    return this;
  }

  public void unsetCreatedAt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATEDAT_ISSET_ID);
  }

  /** Returns true if field createdAt is set (has been assigned a value) and false otherwise */
  public boolean isSetCreatedAt() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATEDAT_ISSET_ID);
  }

  public void setCreatedAtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATEDAT_ISSET_ID, value);
  }

  public long getUpdatedAt() {
    return this.updatedAt;
  }

  public DataSheetSet setUpdatedAt(long updatedAt) {
    this.updatedAt = updatedAt;
    setUpdatedAtIsSet(true);
    return this;
  }

  public void unsetUpdatedAt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPDATEDAT_ISSET_ID);
  }

  /** Returns true if field updatedAt is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdatedAt() {
    return EncodingUtils.testBit(__isset_bitfield, __UPDATEDAT_ISSET_ID);
  }

  public void setUpdatedAtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPDATEDAT_ISSET_ID, value);
  }

  public long getArchivedAt() {
    return this.archivedAt;
  }

  public DataSheetSet setArchivedAt(long archivedAt) {
    this.archivedAt = archivedAt;
    setArchivedAtIsSet(true);
    return this;
  }

  public void unsetArchivedAt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ARCHIVEDAT_ISSET_ID);
  }

  /** Returns true if field archivedAt is set (has been assigned a value) and false otherwise */
  public boolean isSetArchivedAt() {
    return EncodingUtils.testBit(__isset_bitfield, __ARCHIVEDAT_ISSET_ID);
  }

  public void setArchivedAtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ARCHIVEDAT_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public DataSheetSet setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getDescription() {
    return this.description;
  }

  public DataSheetSet setDescription(String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  /**
   * Includes editing any content under the set
   */
  public com.wi.director.thrift.v1.user.UserModular getLastAuthor() {
    return this.lastAuthor;
  }

  /**
   * Includes editing any content under the set
   */
  public DataSheetSet setLastAuthor(com.wi.director.thrift.v1.user.UserModular lastAuthor) {
    this.lastAuthor = lastAuthor;
    return this;
  }

  public void unsetLastAuthor() {
    this.lastAuthor = null;
  }

  /** Returns true if field lastAuthor is set (has been assigned a value) and false otherwise */
  public boolean isSetLastAuthor() {
    return this.lastAuthor != null;
  }

  public void setLastAuthorIsSet(boolean value) {
    if (!value) {
      this.lastAuthor = null;
    }
  }

  public int getDefinitionsSize() {
    return (this.definitions == null) ? 0 : this.definitions.size();
  }

  public java.util.Iterator<DataSheetDefinition> getDefinitionsIterator() {
    return (this.definitions == null) ? null : this.definitions.iterator();
  }

  public void addToDefinitions(DataSheetDefinition elem) {
    if (this.definitions == null) {
      this.definitions = new ArrayList<DataSheetDefinition>();
    }
    this.definitions.add(elem);
  }

  /**
   * Can be re-ordered
   */
  public List<DataSheetDefinition> getDefinitions() {
    return this.definitions;
  }

  /**
   * Can be re-ordered
   */
  public DataSheetSet setDefinitions(List<DataSheetDefinition> definitions) {
    this.definitions = definitions;
    return this;
  }

  public void unsetDefinitions() {
    this.definitions = null;
  }

  /** Returns true if field definitions is set (has been assigned a value) and false otherwise */
  public boolean isSetDefinitions() {
    return this.definitions != null;
  }

  public void setDefinitionsIsSet(boolean value) {
    if (!value) {
      this.definitions = null;
    }
  }

  public int getSheetsSize() {
    return (this.sheets == null) ? 0 : this.sheets.size();
  }

  public java.util.Iterator<DataSheet> getSheetsIterator() {
    return (this.sheets == null) ? null : this.sheets.iterator();
  }

  public void addToSheets(DataSheet elem) {
    if (this.sheets == null) {
      this.sheets = new ArrayList<DataSheet>();
    }
    this.sheets.add(elem);
  }

  public List<DataSheet> getSheets() {
    return this.sheets;
  }

  public DataSheetSet setSheets(List<DataSheet> sheets) {
    this.sheets = sheets;
    return this;
  }

  public void unsetSheets() {
    this.sheets = null;
  }

  /** Returns true if field sheets is set (has been assigned a value) and false otherwise */
  public boolean isSetSheets() {
    return this.sheets != null;
  }

  public void setSheetsIsSet(boolean value) {
    if (!value) {
      this.sheets = null;
    }
  }

  public int getActiveSheetCount() {
    return this.activeSheetCount;
  }

  public DataSheetSet setActiveSheetCount(int activeSheetCount) {
    this.activeSheetCount = activeSheetCount;
    setActiveSheetCountIsSet(true);
    return this;
  }

  public void unsetActiveSheetCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTIVESHEETCOUNT_ISSET_ID);
  }

  /** Returns true if field activeSheetCount is set (has been assigned a value) and false otherwise */
  public boolean isSetActiveSheetCount() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTIVESHEETCOUNT_ISSET_ID);
  }

  public void setActiveSheetCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTIVESHEETCOUNT_ISSET_ID, value);
  }

  public int getArchivedSheetCount() {
    return this.archivedSheetCount;
  }

  public DataSheetSet setArchivedSheetCount(int archivedSheetCount) {
    this.archivedSheetCount = archivedSheetCount;
    setArchivedSheetCountIsSet(true);
    return this;
  }

  public void unsetArchivedSheetCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ARCHIVEDSHEETCOUNT_ISSET_ID);
  }

  /** Returns true if field archivedSheetCount is set (has been assigned a value) and false otherwise */
  public boolean isSetArchivedSheetCount() {
    return EncodingUtils.testBit(__isset_bitfield, __ARCHIVEDSHEETCOUNT_ISSET_ID);
  }

  public void setArchivedSheetCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ARCHIVEDSHEETCOUNT_ISSET_ID, value);
  }

  public int getAttributesSize() {
    return (this.attributes == null) ? 0 : this.attributes.size();
  }

  public java.util.Iterator<com.wi.director.thrift.v1.abac.AbacAttribute> getAttributesIterator() {
    return (this.attributes == null) ? null : this.attributes.iterator();
  }

  public void addToAttributes(com.wi.director.thrift.v1.abac.AbacAttribute elem) {
    if (this.attributes == null) {
      this.attributes = new ArrayList<com.wi.director.thrift.v1.abac.AbacAttribute>();
    }
    this.attributes.add(elem);
  }

  public List<com.wi.director.thrift.v1.abac.AbacAttribute> getAttributes() {
    return this.attributes;
  }

  public DataSheetSet setAttributes(List<com.wi.director.thrift.v1.abac.AbacAttribute> attributes) {
    this.attributes = attributes;
    return this;
  }

  public void unsetAttributes() {
    this.attributes = null;
  }

  /** Returns true if field attributes is set (has been assigned a value) and false otherwise */
  public boolean isSetAttributes() {
    return this.attributes != null;
  }

  public void setAttributesIsSet(boolean value) {
    if (!value) {
      this.attributes = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case CREATED_AT:
      if (value == null) {
        unsetCreatedAt();
      } else {
        setCreatedAt((Long)value);
      }
      break;

    case UPDATED_AT:
      if (value == null) {
        unsetUpdatedAt();
      } else {
        setUpdatedAt((Long)value);
      }
      break;

    case ARCHIVED_AT:
      if (value == null) {
        unsetArchivedAt();
      } else {
        setArchivedAt((Long)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((String)value);
      }
      break;

    case LAST_AUTHOR:
      if (value == null) {
        unsetLastAuthor();
      } else {
        setLastAuthor((com.wi.director.thrift.v1.user.UserModular)value);
      }
      break;

    case DEFINITIONS:
      if (value == null) {
        unsetDefinitions();
      } else {
        setDefinitions((List<DataSheetDefinition>)value);
      }
      break;

    case SHEETS:
      if (value == null) {
        unsetSheets();
      } else {
        setSheets((List<DataSheet>)value);
      }
      break;

    case ACTIVE_SHEET_COUNT:
      if (value == null) {
        unsetActiveSheetCount();
      } else {
        setActiveSheetCount((Integer)value);
      }
      break;

    case ARCHIVED_SHEET_COUNT:
      if (value == null) {
        unsetArchivedSheetCount();
      } else {
        setArchivedSheetCount((Integer)value);
      }
      break;

    case ATTRIBUTES:
      if (value == null) {
        unsetAttributes();
      } else {
        setAttributes((List<com.wi.director.thrift.v1.abac.AbacAttribute>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case CREATED_AT:
      return getCreatedAt();

    case UPDATED_AT:
      return getUpdatedAt();

    case ARCHIVED_AT:
      return getArchivedAt();

    case NAME:
      return getName();

    case DESCRIPTION:
      return getDescription();

    case LAST_AUTHOR:
      return getLastAuthor();

    case DEFINITIONS:
      return getDefinitions();

    case SHEETS:
      return getSheets();

    case ACTIVE_SHEET_COUNT:
      return getActiveSheetCount();

    case ARCHIVED_SHEET_COUNT:
      return getArchivedSheetCount();

    case ATTRIBUTES:
      return getAttributes();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case CREATED_AT:
      return isSetCreatedAt();
    case UPDATED_AT:
      return isSetUpdatedAt();
    case ARCHIVED_AT:
      return isSetArchivedAt();
    case NAME:
      return isSetName();
    case DESCRIPTION:
      return isSetDescription();
    case LAST_AUTHOR:
      return isSetLastAuthor();
    case DEFINITIONS:
      return isSetDefinitions();
    case SHEETS:
      return isSetSheets();
    case ACTIVE_SHEET_COUNT:
      return isSetActiveSheetCount();
    case ARCHIVED_SHEET_COUNT:
      return isSetArchivedSheetCount();
    case ATTRIBUTES:
      return isSetAttributes();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DataSheetSet)
      return this.equals((DataSheetSet)that);
    return false;
  }

  public boolean equals(DataSheetSet that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_createdAt = true;
    boolean that_present_createdAt = true;
    if (this_present_createdAt || that_present_createdAt) {
      if (!(this_present_createdAt && that_present_createdAt))
        return false;
      if (this.createdAt != that.createdAt)
        return false;
    }

    boolean this_present_updatedAt = true;
    boolean that_present_updatedAt = true;
    if (this_present_updatedAt || that_present_updatedAt) {
      if (!(this_present_updatedAt && that_present_updatedAt))
        return false;
      if (this.updatedAt != that.updatedAt)
        return false;
    }

    boolean this_present_archivedAt = true;
    boolean that_present_archivedAt = true;
    if (this_present_archivedAt || that_present_archivedAt) {
      if (!(this_present_archivedAt && that_present_archivedAt))
        return false;
      if (this.archivedAt != that.archivedAt)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_lastAuthor = true && this.isSetLastAuthor();
    boolean that_present_lastAuthor = true && that.isSetLastAuthor();
    if (this_present_lastAuthor || that_present_lastAuthor) {
      if (!(this_present_lastAuthor && that_present_lastAuthor))
        return false;
      if (!this.lastAuthor.equals(that.lastAuthor))
        return false;
    }

    boolean this_present_definitions = true && this.isSetDefinitions();
    boolean that_present_definitions = true && that.isSetDefinitions();
    if (this_present_definitions || that_present_definitions) {
      if (!(this_present_definitions && that_present_definitions))
        return false;
      if (!this.definitions.equals(that.definitions))
        return false;
    }

    boolean this_present_sheets = true && this.isSetSheets();
    boolean that_present_sheets = true && that.isSetSheets();
    if (this_present_sheets || that_present_sheets) {
      if (!(this_present_sheets && that_present_sheets))
        return false;
      if (!this.sheets.equals(that.sheets))
        return false;
    }

    boolean this_present_activeSheetCount = true && this.isSetActiveSheetCount();
    boolean that_present_activeSheetCount = true && that.isSetActiveSheetCount();
    if (this_present_activeSheetCount || that_present_activeSheetCount) {
      if (!(this_present_activeSheetCount && that_present_activeSheetCount))
        return false;
      if (this.activeSheetCount != that.activeSheetCount)
        return false;
    }

    boolean this_present_archivedSheetCount = true && this.isSetArchivedSheetCount();
    boolean that_present_archivedSheetCount = true && that.isSetArchivedSheetCount();
    if (this_present_archivedSheetCount || that_present_archivedSheetCount) {
      if (!(this_present_archivedSheetCount && that_present_archivedSheetCount))
        return false;
      if (this.archivedSheetCount != that.archivedSheetCount)
        return false;
    }

    boolean this_present_attributes = true && this.isSetAttributes();
    boolean that_present_attributes = true && that.isSetAttributes();
    if (this_present_attributes || that_present_attributes) {
      if (!(this_present_attributes && that_present_attributes))
        return false;
      if (!this.attributes.equals(that.attributes))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_createdAt = true;
    list.add(present_createdAt);
    if (present_createdAt)
      list.add(createdAt);

    boolean present_updatedAt = true;
    list.add(present_updatedAt);
    if (present_updatedAt)
      list.add(updatedAt);

    boolean present_archivedAt = true;
    list.add(present_archivedAt);
    if (present_archivedAt)
      list.add(archivedAt);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_description = true && (isSetDescription());
    list.add(present_description);
    if (present_description)
      list.add(description);

    boolean present_lastAuthor = true && (isSetLastAuthor());
    list.add(present_lastAuthor);
    if (present_lastAuthor)
      list.add(lastAuthor);

    boolean present_definitions = true && (isSetDefinitions());
    list.add(present_definitions);
    if (present_definitions)
      list.add(definitions);

    boolean present_sheets = true && (isSetSheets());
    list.add(present_sheets);
    if (present_sheets)
      list.add(sheets);

    boolean present_activeSheetCount = true && (isSetActiveSheetCount());
    list.add(present_activeSheetCount);
    if (present_activeSheetCount)
      list.add(activeSheetCount);

    boolean present_archivedSheetCount = true && (isSetArchivedSheetCount());
    list.add(present_archivedSheetCount);
    if (present_archivedSheetCount)
      list.add(archivedSheetCount);

    boolean present_attributes = true && (isSetAttributes());
    list.add(present_attributes);
    if (present_attributes)
      list.add(attributes);

    return list.hashCode();
  }

  @Override
  public int compareTo(DataSheetSet other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreatedAt()).compareTo(other.isSetCreatedAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreatedAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createdAt, other.createdAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdatedAt()).compareTo(other.isSetUpdatedAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdatedAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updatedAt, other.updatedAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArchivedAt()).compareTo(other.isSetArchivedAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArchivedAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.archivedAt, other.archivedAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastAuthor()).compareTo(other.isSetLastAuthor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastAuthor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastAuthor, other.lastAuthor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDefinitions()).compareTo(other.isSetDefinitions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDefinitions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.definitions, other.definitions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSheets()).compareTo(other.isSetSheets());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSheets()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sheets, other.sheets);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActiveSheetCount()).compareTo(other.isSetActiveSheetCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActiveSheetCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activeSheetCount, other.activeSheetCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArchivedSheetCount()).compareTo(other.isSetArchivedSheetCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArchivedSheetCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.archivedSheetCount, other.archivedSheetCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAttributes()).compareTo(other.isSetAttributes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAttributes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attributes, other.attributes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DataSheetSet(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createdAt:");
    sb.append(this.createdAt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updatedAt:");
    sb.append(this.updatedAt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("archivedAt:");
    sb.append(this.archivedAt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("description:");
    if (this.description == null) {
      sb.append("null");
    } else {
      sb.append(this.description);
    }
    first = false;
    if (isSetLastAuthor()) {
      if (!first) sb.append(", ");
      sb.append("lastAuthor:");
      if (this.lastAuthor == null) {
        sb.append("null");
      } else {
        sb.append(this.lastAuthor);
      }
      first = false;
    }
    if (isSetDefinitions()) {
      if (!first) sb.append(", ");
      sb.append("definitions:");
      if (this.definitions == null) {
        sb.append("null");
      } else {
        sb.append(this.definitions);
      }
      first = false;
    }
    if (isSetSheets()) {
      if (!first) sb.append(", ");
      sb.append("sheets:");
      if (this.sheets == null) {
        sb.append("null");
      } else {
        sb.append(this.sheets);
      }
      first = false;
    }
    if (isSetActiveSheetCount()) {
      if (!first) sb.append(", ");
      sb.append("activeSheetCount:");
      sb.append(this.activeSheetCount);
      first = false;
    }
    if (isSetArchivedSheetCount()) {
      if (!first) sb.append(", ");
      sb.append("archivedSheetCount:");
      sb.append(this.archivedSheetCount);
      first = false;
    }
    if (isSetAttributes()) {
      if (!first) sb.append(", ");
      sb.append("attributes:");
      if (this.attributes == null) {
        sb.append("null");
      } else {
        sb.append(this.attributes);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (lastAuthor != null) {
      lastAuthor.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DataSheetSetStandardSchemeFactory implements SchemeFactory {
    public DataSheetSetStandardScheme getScheme() {
      return new DataSheetSetStandardScheme();
    }
  }

  private static class DataSheetSetStandardScheme extends StandardScheme<DataSheetSet> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DataSheetSet struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CREATED_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createdAt = iprot.readI64();
              struct.setCreatedAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // UPDATED_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.updatedAt = iprot.readI64();
              struct.setUpdatedAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ARCHIVED_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.archivedAt = iprot.readI64();
              struct.setArchivedAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // LAST_AUTHOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.lastAuthor = new com.wi.director.thrift.v1.user.UserModular();
              struct.lastAuthor.read(iprot);
              struct.setLastAuthorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DEFINITIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list10 = iprot.readListBegin();
                struct.definitions = new ArrayList<DataSheetDefinition>(_list10.size);
                DataSheetDefinition _elem11;
                for (int _i12 = 0; _i12 < _list10.size; ++_i12)
                {
                  _elem11 = new DataSheetDefinition();
                  _elem11.read(iprot);
                  struct.definitions.add(_elem11);
                }
                iprot.readListEnd();
              }
              struct.setDefinitionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SHEETS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list13 = iprot.readListBegin();
                struct.sheets = new ArrayList<DataSheet>(_list13.size);
                DataSheet _elem14;
                for (int _i15 = 0; _i15 < _list13.size; ++_i15)
                {
                  _elem14 = new DataSheet();
                  _elem14.read(iprot);
                  struct.sheets.add(_elem14);
                }
                iprot.readListEnd();
              }
              struct.setSheetsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ACTIVE_SHEET_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.activeSheetCount = iprot.readI32();
              struct.setActiveSheetCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ARCHIVED_SHEET_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.archivedSheetCount = iprot.readI32();
              struct.setArchivedSheetCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // ATTRIBUTES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.attributes = new ArrayList<com.wi.director.thrift.v1.abac.AbacAttribute>(_list16.size);
                com.wi.director.thrift.v1.abac.AbacAttribute _elem17;
                for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                {
                  _elem17 = new com.wi.director.thrift.v1.abac.AbacAttribute();
                  _elem17.read(iprot);
                  struct.attributes.add(_elem17);
                }
                iprot.readListEnd();
              }
              struct.setAttributesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DataSheetSet struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATED_AT_FIELD_DESC);
      oprot.writeI64(struct.createdAt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UPDATED_AT_FIELD_DESC);
      oprot.writeI64(struct.updatedAt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ARCHIVED_AT_FIELD_DESC);
      oprot.writeI64(struct.archivedAt);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.description != null) {
        oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
        oprot.writeString(struct.description);
        oprot.writeFieldEnd();
      }
      if (struct.lastAuthor != null) {
        if (struct.isSetLastAuthor()) {
          oprot.writeFieldBegin(LAST_AUTHOR_FIELD_DESC);
          struct.lastAuthor.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.definitions != null) {
        if (struct.isSetDefinitions()) {
          oprot.writeFieldBegin(DEFINITIONS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.definitions.size()));
            for (DataSheetDefinition _iter19 : struct.definitions)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.sheets != null) {
        if (struct.isSetSheets()) {
          oprot.writeFieldBegin(SHEETS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.sheets.size()));
            for (DataSheet _iter20 : struct.sheets)
            {
              _iter20.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetActiveSheetCount()) {
        oprot.writeFieldBegin(ACTIVE_SHEET_COUNT_FIELD_DESC);
        oprot.writeI32(struct.activeSheetCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetArchivedSheetCount()) {
        oprot.writeFieldBegin(ARCHIVED_SHEET_COUNT_FIELD_DESC);
        oprot.writeI32(struct.archivedSheetCount);
        oprot.writeFieldEnd();
      }
      if (struct.attributes != null) {
        if (struct.isSetAttributes()) {
          oprot.writeFieldBegin(ATTRIBUTES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.attributes.size()));
            for (com.wi.director.thrift.v1.abac.AbacAttribute _iter21 : struct.attributes)
            {
              _iter21.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

}

