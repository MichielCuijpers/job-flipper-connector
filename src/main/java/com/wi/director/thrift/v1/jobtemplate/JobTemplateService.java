/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wi.director.thrift.v1.jobtemplate;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class JobTemplateService {

  public interface Iface {

    /**
     * (DEPRECATED, use query) Get a list of Job Templates.  <br><br>If teamId is empty, then it will fetch all templates for all teams the user is part of
     * 
     * @param teamId
     * @param opts
     */
    public List<JobTemplate> index(String teamId, IndexOpts opts) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException;

    /**
     * Get a JobTemplate
     * 
     * @param jobTemplateId
     */
    public JobTemplate get(String jobTemplateId) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException;

    /**
     * Query a list of Job Templates
     * 
     * @param selectOpts
     * @param whereOpts
     * @param order
     */
    public TemplateQueryResult query(TemplateSelectOpts selectOpts, TemplateWhereOpts whereOpts, List<TemplateOrder> order) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException;

    /**
     * Fetch a specific list of JobTemplates. Returns a hashmap of TemplateFetchResults keyed off template ids. One entry for
     * every requested id. Value in hashmap is either an error indicating that the fetch failed or the JobTemplateModular object for that id.
     * 
     * 
     * @param selectOpts
     * @param templateIds
     */
    public Map<String,TemplateFetchResult> fetch(TemplateSelectOpts selectOpts, List<String> templateIds) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException;

    /**
     * Create a new template
     * 
     * @param teamId
     * @param params
     * @param attributes
     */
    public JobTemplate create(String teamId, JobTemplateParams params, List<com.wi.director.thrift.v1.abac.AbacAttribute> attributes) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException;

    /**
     * Update template title, description
     * 
     * @param jobTemplateId
     * @param params
     */
    public JobTemplate update(String jobTemplateId, JobTemplateParams params) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException;

    /**
     * Mark a job template as archived. Archived templates cannot be edited or used to start jobs. This marks all versions of
     * the job template as archived
     * 
     * @param jobTemplateId
     */
    public JobTemplate archive(String jobTemplateId) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException;

    /**
     * Mark a job template as unarchived. This marks all versions of the job template as unarchived
     * 
     * @param jobTemplateId
     */
    public JobTemplate unarchive(String jobTemplateId) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException;

    /**
     * Publish a job template
     * 
     * @param jobTemplateId
     */
    public JobTemplate publish(String jobTemplateId) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException;

    /**
     * Get a JobTemplate based on public version. <br><br>If publicVersion is 0, get the currently published version
     * 
     * @param jobTemplateId
     * @param publicVersion
     */
    public JobTemplate getPublicVersion(String jobTemplateId, int publicVersion) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException;

    /**
     * Get a list of JobTemplateModulars based on a list of template ids and their public versions. <br><br>If publicVersion is 0, get the currently published version. <br><br>Returns a map<UUID, map<VersionNumber, JobTemplateModular/Error>> response.
     * 
     * @param selectOpts
     * @param versions
     */
    public Map<String,Map<Integer,TemplateFetchResult>> fetchPublicVersions(TemplateSelectOpts selectOpts, List<TemplatePublicVersion> versions) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException;

    /**
     * Get a list of JobTemplateModulars based on a list of template ids and their published versions. <br><br>If publicVersion (publishedVersion) is 0, get the currently published version. <br><br>Returns a map<UUID, map<VersionNumber, JobTemplateModular/Error>> response.
     * 
     * @param selectOpts
     * @param versions
     */
    public Map<String,Map<Integer,TemplateFetchResult>> fetchPublishedVersions(TemplateSelectOpts selectOpts, List<TemplatePublicVersion> versions) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException;

    /**
     * Enter review state, which means that editing will be locked until the review process ends; also generates
     * a new public version number which is returned. When configured, this will also call a registered webhook.
     * <br><br>
     * During review state, all operations which add or update content will fail with an error.
     * 
     * @param jobTemplateId
     */
    public int beginReview(String jobTemplateId) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException;

    /**
     * Exit review state, release editing lock; returns current public version number.
     * 
     * @param jobTemplateId
     */
    public int endReview(String jobTemplateId) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException;

    /**
     * Publish a specified version of the job template; must be called AFTER endReview
     * 
     * @param jobTemplateId
     * @param publicVersion
     */
    public JobTemplate publishVersion(String jobTemplateId, int publicVersion) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException;

    /**
     * NOHTML Edit a JobTemplate's step hierarchy.  The top level step group is replaced by the step group passed as an argument.
     * 
     * @param jobTemplateId
     * @param stepGroup
     */
    public JobTemplate updateStepGroup(String jobTemplateId, com.wi.director.thrift.v1.step.BaseStep stepGroup) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException;

    /**
     * (DEPRECATED, use addStepModular) Add a step to a step group in a job template.
     * <ul>
     * <li>position is the position to insert the new step. position == -1 inserts it at the end.</li>
     * <li>If replace == true then it will replace instead of inserting at the position.</li>
     * </ul>
     * 
     * @param jobTemplateId
     * @param parentId
     * @param step
     * @param position
     * @param replace
     */
    public JobTemplate addStep(String jobTemplateId, String parentId, com.wi.director.thrift.v1.step.BaseStep step, int position, boolean replace) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException;

    /**
     * (DEPRECATED, use addStepGroupModular) Add a step group to a step group in a job template.
     * <ul>
     * <li>position is the position to insert the new step group. position == -1 inserts it at the end.</li>
     * <li>If replace == true then it will replace instead of inserting at the position.</li>
     * </ul>
     * 
     * @param jobTemplateId
     * @param parentId
     * @param stepGroup
     * @param position
     * @param replace
     */
    public JobTemplate addStepGroup(String jobTemplateId, String parentId, com.wi.director.thrift.v1.step.BaseStep stepGroup, int position, boolean replace) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException;

    /**
     * (DEPRECATED, use cloneStepModular) Clone a step in a job template.
     * <br><br>
     * position is the position to insert the cloned step. position == -1 inserts it at the end.
     * 
     * @param jobTemplateId
     * @param parentId
     * @param stepId
     * @param position
     */
    public JobTemplate cloneStep(String jobTemplateId, String parentId, String stepId, int position) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException;

    /**
     * (DEPRECATED, use cloneStepGroupModular) Clone a step group in a job template.
     * <br><br>
     * position is the position to insert the cloned step group. position == -1 inserts it at the end.
     * 
     * @param jobTemplateId
     * @param parentId
     * @param stepGroupId
     * @param position
     */
    public JobTemplate cloneStepGroup(String jobTemplateId, String parentId, String stepGroupId, int position) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException;

    /**
     * Clone an entire template.
     * 
     * ErrorCodes:
     *   RESOURCE_ARCHIVED - returned when there exist steps in the copied template that are assigned to an archived role
     * 
     * @param jobTemplateId
     */
    public JobTemplate cloneTemplate(String jobTemplateId) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException;

    /**
     * Add a step to a step group in a job template and return modular template.
     * <ul>
     * <li>position is the position to insert the new step. position == -1 inserts it at the end.</li>
     * <li>If replace == true then it will replace instead of inserting at the position.</li>
     * </ul>
     * 
     * @param jobTemplateId
     * @param parentId
     * @param step
     * @param position
     * @param replace
     */
    public JobTemplateModular addStepModular(String jobTemplateId, String parentId, com.wi.director.thrift.v1.step.BaseStep step, int position, boolean replace) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException;

    /**
     * Add a step group to a step group in a job template and return modular template.
     * <ul>
     * <li>position is the position to insert the new step group. position == -1 inserts it at the end.</li>
     * <li>If replace == true then it will replace instead of inserting at the position.</li>
     * </ul>
     * 
     * @param jobTemplateId
     * @param parentId
     * @param stepGroup
     * @param position
     * @param replace
     */
    public JobTemplateModular addStepGroupModular(String jobTemplateId, String parentId, com.wi.director.thrift.v1.step.BaseStep stepGroup, int position, boolean replace) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException;

    /**
     * Move a step to a step group in a job template and return modular template.
     * <ul>
     * <li>parentId/newParentId is the old/new step group to move the current step from/to.</li>
     * <li>oldPosition/newPosition is the old/new position to move the current step from/to. newPosition == -1 inserts it at the end.</li>
     * <li>Can move between step groups if parentId != newParentId.</li>
     * </ul>
     * 
     * @param jobTemplateId
     * @param parentId
     * @param stepId
     * @param oldPosition
     * @param newParentId
     * @param newPosition
     */
    public JobTemplateModular moveStepModular(String jobTemplateId, String parentId, String stepId, int oldPosition, String newParentId, int newPosition) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException;

    /**
     * Move a step group to a step group in a job template and return modular template.
     * <ul>
     * <li>parentId/newParentId is the old/new step group to move the current step group from/to.</li>
     * <li>oldPosition/newPosition is the old/new position to move the current step group from/to. newPosition == -1 inserts it at the end.</li>
     * <li>Can move between step groups if parentId != newParentId.</li>
     * </ul>
     * 
     * @param jobTemplateId
     * @param parentId
     * @param stepGroupId
     * @param oldPosition
     * @param newParentId
     * @param newPosition
     */
    public JobTemplateModular moveStepGroupModular(String jobTemplateId, String parentId, String stepGroupId, int oldPosition, String newParentId, int newPosition) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException;

    /**
     * Remove a step from a step group in a job template and return modular template.
     * <br><br>
     * position is the position the step is currently at.
     * 
     * @param jobTemplateId
     * @param parentId
     * @param stepId
     * @param position
     */
    public JobTemplateModular removeStepModular(String jobTemplateId, String parentId, String stepId, int position) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException;

    /**
     * Remove a step group from a step group in a job template and return modular template.
     * <br><br>
     * position is the position the step group is currently at.
     * 
     * @param jobTemplateId
     * @param parentId
     * @param stepGroupId
     * @param position
     */
    public JobTemplateModular removeStepGroupModular(String jobTemplateId, String parentId, String stepGroupId, int position) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException;

    /**
     * Clone a step in a job template and return modular template.
     * <ul>
     * <li>parentId/newParentId is the old/new step group to clone the current step from/to.</li>
     * <li>position/newPosition is the old/new position to clone the current step from/to. newPosition == -1 inserts it at the end.</li>
     * <li>Can clone between step groups if parentId != newParentId.</li>
     * </ul>
     * 
     * @param jobTemplateId
     * @param parentId
     * @param stepId
     * @param position
     * @param newParentId
     * @param newPosition
     */
    public JobTemplateModular cloneStepModular(String jobTemplateId, String parentId, String stepId, int position, String newParentId, int newPosition) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException;

    /**
     * Clone a step group in a job template and return modular template.
     * <ul>
     * <li>parentId/newParentId is the old/new step group to clone the current step group from/to.</li>
     * <li>position/newPosition is the old/new position to clone the current step group from/to. newPosition == -1 inserts it at the end.</li>
     * <li>Can clone between step groups if parentId != newParentId.</li>
     * </ul>
     * 
     * @param jobTemplateId
     * @param parentId
     * @param stepGroupId
     * @param position
     * @param newParentId
     * @param newPosition
     */
    public JobTemplateModular cloneStepGroupModular(String jobTemplateId, String parentId, String stepGroupId, int position, String newParentId, int newPosition) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException;

    /**
     * Find a step or step group with a title that matches the passed string
     * 
     * @param teamId
     * @param title
     */
    public List<com.wi.director.thrift.v1.step.BaseStep> searchStepGroups(String teamId, String title) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException;

    /**
     * Add a document to a Job Template; update version
     * 
     * @param jobTemplateId
     * @param jobTemplateVersion
     * @param documentId
     */
    public JobTemplate addDocument(String jobTemplateId, int jobTemplateVersion, String documentId) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException;

    /**
     * Remove a document from a Job Template; update version
     * 
     * @param jobTemplateId
     * @param documentId
     */
    public JobTemplate removeDocument(String jobTemplateId, String documentId) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException;

    /**
     * NOHTML Update root-level headers -- probably a hack, but needed for now?
     * 
     * @param jobTemplateId
     * @param headers
     */
    public JobTemplate updateRootHeaders(String jobTemplateId, com.wi.director.thrift.v1.group_headers.StepGroupHeaders headers) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException;

    /**
     * Update the metadata on a template. Updated are the values to be added or updated on the template. RemovedIds are the IDs of the values to be removed from the template.
     * 
     * @param jobTemplateId
     * @param updated
     * @param removedIds
     */
    public Map<String,com.wi.director.thrift.v1.metadata.MetadataEntry> updateMetadata(String jobTemplateId, Map<String,com.wi.director.thrift.v1.metadata.MetadataValue> updated, List<String> removedIds) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException;

    /**
     * Get all of the tags and comments for a template
     * 
     * @param jobTemplateId
     */
    public List<TemplateTag> getTags(String jobTemplateId) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException;

    /**
     * Update the tags on a template. Added are the tags and comments to be added to the template. RemovedTagIds are the IDs of the tags to be removed from the template.
     * 
     * @param jobTemplateId
     * @param added
     * @param removedTagIds
     */
    public void updateTags(String jobTemplateId, List<TemplateTag> added, List<String> removedTagIds) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException;

    /**
     * Start editing the template
     * Note that this lock is associated with the specific authToken used, not just
     * the user owning that token. The life of the lock is until releaseLock (which
     * should be called when editing is complete), forcible takeover, or implicitly
     * on logout.
     * 
     * Returns the new lock on success.
     * 
     * If the lock is already owned by another token, raises JobTemplateLockFailed with
     * previous lock information.
     * 
     * @param jobTemplateId
     */
    public JobTemplateLock acquireLock(String jobTemplateId) throws com.wi.director.thrift.v1.common.SystemException, JobTemplateLockFailed, org.apache.thrift.TException;

    /**
     * Start editing the template, forcibly taking over any existing lock.
     * Note that this lock is associated with the specific authToken used, not just
     * the user owning that token. The life of the lock is until releaseLock (which
     * should be called when editing is complete), forcible takeover, or implicitly
     * on logout.
     * 
     * Returns the new lock in the response structure. If the lock was owned by another
     * token, also returns details of previous lock. This method is intended to be called
     * after acquireLock fails and an explicit user response to forcibly take the lock.
     * 
     * WARNING: this could result in data loss if another user is editing.
     * 
     * @param jobTemplateId
     */
    public ForceAcquireResponse forceAcquireLock(String jobTemplateId) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException;

    /**
     * Release the lock on the template; will throw exception if you don't have the lock
     * 
     * @param jobTemplateId
     */
    public void releaseLock(String jobTemplateId) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException;

    /**
     * Get diff of requested version of a template against the latest version
     * Returns a hashmap keyed off version. One entry for every requested internalVersion. Value is either an error indicating
     * something went wrong with the diffing operation for that version or the JobTemplateModular object with diff fields filled in
     * 
     * 
     * @param id
     * @param internalVersions
     * @param otherVersion
     */
    public Map<Integer,TemplateHistoryResult> getHistory(String id, List<Integer> internalVersions, int otherVersion) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException;

    /**
     * Copies the draft version referred to on top of the current latest draft version
     * 
     * @param id
     * @param internalVersion
     */
    public void revert(String id, int internalVersion) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException;

    /**
     * Update a single attribute on a job template
     * return value will always be a list with a single attribute determined by which attribute was updated
     * 
     * param templateId: job template to update
     * param attributeId: the AttributeId of the team level attribute to be updated
     * param values: the new AttributeValues to associated with Attribute attributeId on template templateId
     * param behave: determine the behaviour of the endpoint, merge or clobber. Default: clobber
     * 
     * @param templateId
     * @param attributeId
     * @param values
     * @param behave
     */
    public List<com.wi.director.thrift.v1.abac.AbacAttribute> updateAttribute(String templateId, String attributeId, List<com.wi.director.thrift.v1.abac.AbacAttributeValue> values, com.wi.director.thrift.v1.abac.AttributeUploadBehaviour behave) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<JobTemplate> index(String teamId, IndexOpts opts) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      send_index(teamId, opts);
      return recv_index();
    }

    public void send_index(String teamId, IndexOpts opts) throws org.apache.thrift.TException
    {
      index_args args = new index_args();
      args.setTeamId(teamId);
      args.setOpts(opts);
      sendBase("index", args);
    }

    public List<JobTemplate> recv_index() throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      index_result result = new index_result();
      receiveBase(result, "index");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "index failed: unknown result");
    }

    public JobTemplate get(String jobTemplateId) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      send_get(jobTemplateId);
      return recv_get();
    }

    public void send_get(String jobTemplateId) throws org.apache.thrift.TException
    {
      get_args args = new get_args();
      args.setJobTemplateId(jobTemplateId);
      sendBase("get", args);
    }

    public JobTemplate recv_get() throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      get_result result = new get_result();
      receiveBase(result, "get");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get failed: unknown result");
    }

    public TemplateQueryResult query(TemplateSelectOpts selectOpts, TemplateWhereOpts whereOpts, List<TemplateOrder> order) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      send_query(selectOpts, whereOpts, order);
      return recv_query();
    }

    public void send_query(TemplateSelectOpts selectOpts, TemplateWhereOpts whereOpts, List<TemplateOrder> order) throws org.apache.thrift.TException
    {
      query_args args = new query_args();
      args.setSelectOpts(selectOpts);
      args.setWhereOpts(whereOpts);
      args.setOrder(order);
      sendBase("query", args);
    }

    public TemplateQueryResult recv_query() throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      query_result result = new query_result();
      receiveBase(result, "query");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "query failed: unknown result");
    }

    public Map<String,TemplateFetchResult> fetch(TemplateSelectOpts selectOpts, List<String> templateIds) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      send_fetch(selectOpts, templateIds);
      return recv_fetch();
    }

    public void send_fetch(TemplateSelectOpts selectOpts, List<String> templateIds) throws org.apache.thrift.TException
    {
      fetch_args args = new fetch_args();
      args.setSelectOpts(selectOpts);
      args.setTemplateIds(templateIds);
      sendBase("fetch", args);
    }

    public Map<String,TemplateFetchResult> recv_fetch() throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      fetch_result result = new fetch_result();
      receiveBase(result, "fetch");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "fetch failed: unknown result");
    }

    public JobTemplate create(String teamId, JobTemplateParams params, List<com.wi.director.thrift.v1.abac.AbacAttribute> attributes) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      send_create(teamId, params, attributes);
      return recv_create();
    }

    public void send_create(String teamId, JobTemplateParams params, List<com.wi.director.thrift.v1.abac.AbacAttribute> attributes) throws org.apache.thrift.TException
    {
      create_args args = new create_args();
      args.setTeamId(teamId);
      args.setParams(params);
      args.setAttributes(attributes);
      sendBase("create", args);
    }

    public JobTemplate recv_create() throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      create_result result = new create_result();
      receiveBase(result, "create");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "create failed: unknown result");
    }

    public JobTemplate update(String jobTemplateId, JobTemplateParams params) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      send_update(jobTemplateId, params);
      return recv_update();
    }

    public void send_update(String jobTemplateId, JobTemplateParams params) throws org.apache.thrift.TException
    {
      update_args args = new update_args();
      args.setJobTemplateId(jobTemplateId);
      args.setParams(params);
      sendBase("update", args);
    }

    public JobTemplate recv_update() throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      update_result result = new update_result();
      receiveBase(result, "update");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "update failed: unknown result");
    }

    public JobTemplate archive(String jobTemplateId) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      send_archive(jobTemplateId);
      return recv_archive();
    }

    public void send_archive(String jobTemplateId) throws org.apache.thrift.TException
    {
      archive_args args = new archive_args();
      args.setJobTemplateId(jobTemplateId);
      sendBase("archive", args);
    }

    public JobTemplate recv_archive() throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      archive_result result = new archive_result();
      receiveBase(result, "archive");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "archive failed: unknown result");
    }

    public JobTemplate unarchive(String jobTemplateId) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      send_unarchive(jobTemplateId);
      return recv_unarchive();
    }

    public void send_unarchive(String jobTemplateId) throws org.apache.thrift.TException
    {
      unarchive_args args = new unarchive_args();
      args.setJobTemplateId(jobTemplateId);
      sendBase("unarchive", args);
    }

    public JobTemplate recv_unarchive() throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      unarchive_result result = new unarchive_result();
      receiveBase(result, "unarchive");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "unarchive failed: unknown result");
    }

    public JobTemplate publish(String jobTemplateId) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      send_publish(jobTemplateId);
      return recv_publish();
    }

    public void send_publish(String jobTemplateId) throws org.apache.thrift.TException
    {
      publish_args args = new publish_args();
      args.setJobTemplateId(jobTemplateId);
      sendBase("publish", args);
    }

    public JobTemplate recv_publish() throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      publish_result result = new publish_result();
      receiveBase(result, "publish");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "publish failed: unknown result");
    }

    public JobTemplate getPublicVersion(String jobTemplateId, int publicVersion) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      send_getPublicVersion(jobTemplateId, publicVersion);
      return recv_getPublicVersion();
    }

    public void send_getPublicVersion(String jobTemplateId, int publicVersion) throws org.apache.thrift.TException
    {
      getPublicVersion_args args = new getPublicVersion_args();
      args.setJobTemplateId(jobTemplateId);
      args.setPublicVersion(publicVersion);
      sendBase("getPublicVersion", args);
    }

    public JobTemplate recv_getPublicVersion() throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      getPublicVersion_result result = new getPublicVersion_result();
      receiveBase(result, "getPublicVersion");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPublicVersion failed: unknown result");
    }

    public Map<String,Map<Integer,TemplateFetchResult>> fetchPublicVersions(TemplateSelectOpts selectOpts, List<TemplatePublicVersion> versions) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      send_fetchPublicVersions(selectOpts, versions);
      return recv_fetchPublicVersions();
    }

    public void send_fetchPublicVersions(TemplateSelectOpts selectOpts, List<TemplatePublicVersion> versions) throws org.apache.thrift.TException
    {
      fetchPublicVersions_args args = new fetchPublicVersions_args();
      args.setSelectOpts(selectOpts);
      args.setVersions(versions);
      sendBase("fetchPublicVersions", args);
    }

    public Map<String,Map<Integer,TemplateFetchResult>> recv_fetchPublicVersions() throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      fetchPublicVersions_result result = new fetchPublicVersions_result();
      receiveBase(result, "fetchPublicVersions");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "fetchPublicVersions failed: unknown result");
    }

    public Map<String,Map<Integer,TemplateFetchResult>> fetchPublishedVersions(TemplateSelectOpts selectOpts, List<TemplatePublicVersion> versions) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      send_fetchPublishedVersions(selectOpts, versions);
      return recv_fetchPublishedVersions();
    }

    public void send_fetchPublishedVersions(TemplateSelectOpts selectOpts, List<TemplatePublicVersion> versions) throws org.apache.thrift.TException
    {
      fetchPublishedVersions_args args = new fetchPublishedVersions_args();
      args.setSelectOpts(selectOpts);
      args.setVersions(versions);
      sendBase("fetchPublishedVersions", args);
    }

    public Map<String,Map<Integer,TemplateFetchResult>> recv_fetchPublishedVersions() throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      fetchPublishedVersions_result result = new fetchPublishedVersions_result();
      receiveBase(result, "fetchPublishedVersions");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "fetchPublishedVersions failed: unknown result");
    }

    public int beginReview(String jobTemplateId) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      send_beginReview(jobTemplateId);
      return recv_beginReview();
    }

    public void send_beginReview(String jobTemplateId) throws org.apache.thrift.TException
    {
      beginReview_args args = new beginReview_args();
      args.setJobTemplateId(jobTemplateId);
      sendBase("beginReview", args);
    }

    public int recv_beginReview() throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      beginReview_result result = new beginReview_result();
      receiveBase(result, "beginReview");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "beginReview failed: unknown result");
    }

    public int endReview(String jobTemplateId) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      send_endReview(jobTemplateId);
      return recv_endReview();
    }

    public void send_endReview(String jobTemplateId) throws org.apache.thrift.TException
    {
      endReview_args args = new endReview_args();
      args.setJobTemplateId(jobTemplateId);
      sendBase("endReview", args);
    }

    public int recv_endReview() throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      endReview_result result = new endReview_result();
      receiveBase(result, "endReview");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "endReview failed: unknown result");
    }

    public JobTemplate publishVersion(String jobTemplateId, int publicVersion) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      send_publishVersion(jobTemplateId, publicVersion);
      return recv_publishVersion();
    }

    public void send_publishVersion(String jobTemplateId, int publicVersion) throws org.apache.thrift.TException
    {
      publishVersion_args args = new publishVersion_args();
      args.setJobTemplateId(jobTemplateId);
      args.setPublicVersion(publicVersion);
      sendBase("publishVersion", args);
    }

    public JobTemplate recv_publishVersion() throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      publishVersion_result result = new publishVersion_result();
      receiveBase(result, "publishVersion");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "publishVersion failed: unknown result");
    }

    public JobTemplate updateStepGroup(String jobTemplateId, com.wi.director.thrift.v1.step.BaseStep stepGroup) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      send_updateStepGroup(jobTemplateId, stepGroup);
      return recv_updateStepGroup();
    }

    public void send_updateStepGroup(String jobTemplateId, com.wi.director.thrift.v1.step.BaseStep stepGroup) throws org.apache.thrift.TException
    {
      updateStepGroup_args args = new updateStepGroup_args();
      args.setJobTemplateId(jobTemplateId);
      args.setStepGroup(stepGroup);
      sendBase("updateStepGroup", args);
    }

    public JobTemplate recv_updateStepGroup() throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      updateStepGroup_result result = new updateStepGroup_result();
      receiveBase(result, "updateStepGroup");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateStepGroup failed: unknown result");
    }

    public JobTemplate addStep(String jobTemplateId, String parentId, com.wi.director.thrift.v1.step.BaseStep step, int position, boolean replace) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      send_addStep(jobTemplateId, parentId, step, position, replace);
      return recv_addStep();
    }

    public void send_addStep(String jobTemplateId, String parentId, com.wi.director.thrift.v1.step.BaseStep step, int position, boolean replace) throws org.apache.thrift.TException
    {
      addStep_args args = new addStep_args();
      args.setJobTemplateId(jobTemplateId);
      args.setParentId(parentId);
      args.setStep(step);
      args.setPosition(position);
      args.setReplace(replace);
      sendBase("addStep", args);
    }

    public JobTemplate recv_addStep() throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      addStep_result result = new addStep_result();
      receiveBase(result, "addStep");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addStep failed: unknown result");
    }

    public JobTemplate addStepGroup(String jobTemplateId, String parentId, com.wi.director.thrift.v1.step.BaseStep stepGroup, int position, boolean replace) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      send_addStepGroup(jobTemplateId, parentId, stepGroup, position, replace);
      return recv_addStepGroup();
    }

    public void send_addStepGroup(String jobTemplateId, String parentId, com.wi.director.thrift.v1.step.BaseStep stepGroup, int position, boolean replace) throws org.apache.thrift.TException
    {
      addStepGroup_args args = new addStepGroup_args();
      args.setJobTemplateId(jobTemplateId);
      args.setParentId(parentId);
      args.setStepGroup(stepGroup);
      args.setPosition(position);
      args.setReplace(replace);
      sendBase("addStepGroup", args);
    }

    public JobTemplate recv_addStepGroup() throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      addStepGroup_result result = new addStepGroup_result();
      receiveBase(result, "addStepGroup");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addStepGroup failed: unknown result");
    }

    public JobTemplate cloneStep(String jobTemplateId, String parentId, String stepId, int position) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      send_cloneStep(jobTemplateId, parentId, stepId, position);
      return recv_cloneStep();
    }

    public void send_cloneStep(String jobTemplateId, String parentId, String stepId, int position) throws org.apache.thrift.TException
    {
      cloneStep_args args = new cloneStep_args();
      args.setJobTemplateId(jobTemplateId);
      args.setParentId(parentId);
      args.setStepId(stepId);
      args.setPosition(position);
      sendBase("cloneStep", args);
    }

    public JobTemplate recv_cloneStep() throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      cloneStep_result result = new cloneStep_result();
      receiveBase(result, "cloneStep");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "cloneStep failed: unknown result");
    }

    public JobTemplate cloneStepGroup(String jobTemplateId, String parentId, String stepGroupId, int position) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      send_cloneStepGroup(jobTemplateId, parentId, stepGroupId, position);
      return recv_cloneStepGroup();
    }

    public void send_cloneStepGroup(String jobTemplateId, String parentId, String stepGroupId, int position) throws org.apache.thrift.TException
    {
      cloneStepGroup_args args = new cloneStepGroup_args();
      args.setJobTemplateId(jobTemplateId);
      args.setParentId(parentId);
      args.setStepGroupId(stepGroupId);
      args.setPosition(position);
      sendBase("cloneStepGroup", args);
    }

    public JobTemplate recv_cloneStepGroup() throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      cloneStepGroup_result result = new cloneStepGroup_result();
      receiveBase(result, "cloneStepGroup");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "cloneStepGroup failed: unknown result");
    }

    public JobTemplate cloneTemplate(String jobTemplateId) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      send_cloneTemplate(jobTemplateId);
      return recv_cloneTemplate();
    }

    public void send_cloneTemplate(String jobTemplateId) throws org.apache.thrift.TException
    {
      cloneTemplate_args args = new cloneTemplate_args();
      args.setJobTemplateId(jobTemplateId);
      sendBase("cloneTemplate", args);
    }

    public JobTemplate recv_cloneTemplate() throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      cloneTemplate_result result = new cloneTemplate_result();
      receiveBase(result, "cloneTemplate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "cloneTemplate failed: unknown result");
    }

    public JobTemplateModular addStepModular(String jobTemplateId, String parentId, com.wi.director.thrift.v1.step.BaseStep step, int position, boolean replace) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      send_addStepModular(jobTemplateId, parentId, step, position, replace);
      return recv_addStepModular();
    }

    public void send_addStepModular(String jobTemplateId, String parentId, com.wi.director.thrift.v1.step.BaseStep step, int position, boolean replace) throws org.apache.thrift.TException
    {
      addStepModular_args args = new addStepModular_args();
      args.setJobTemplateId(jobTemplateId);
      args.setParentId(parentId);
      args.setStep(step);
      args.setPosition(position);
      args.setReplace(replace);
      sendBase("addStepModular", args);
    }

    public JobTemplateModular recv_addStepModular() throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      addStepModular_result result = new addStepModular_result();
      receiveBase(result, "addStepModular");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addStepModular failed: unknown result");
    }

    public JobTemplateModular addStepGroupModular(String jobTemplateId, String parentId, com.wi.director.thrift.v1.step.BaseStep stepGroup, int position, boolean replace) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      send_addStepGroupModular(jobTemplateId, parentId, stepGroup, position, replace);
      return recv_addStepGroupModular();
    }

    public void send_addStepGroupModular(String jobTemplateId, String parentId, com.wi.director.thrift.v1.step.BaseStep stepGroup, int position, boolean replace) throws org.apache.thrift.TException
    {
      addStepGroupModular_args args = new addStepGroupModular_args();
      args.setJobTemplateId(jobTemplateId);
      args.setParentId(parentId);
      args.setStepGroup(stepGroup);
      args.setPosition(position);
      args.setReplace(replace);
      sendBase("addStepGroupModular", args);
    }

    public JobTemplateModular recv_addStepGroupModular() throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      addStepGroupModular_result result = new addStepGroupModular_result();
      receiveBase(result, "addStepGroupModular");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addStepGroupModular failed: unknown result");
    }

    public JobTemplateModular moveStepModular(String jobTemplateId, String parentId, String stepId, int oldPosition, String newParentId, int newPosition) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      send_moveStepModular(jobTemplateId, parentId, stepId, oldPosition, newParentId, newPosition);
      return recv_moveStepModular();
    }

    public void send_moveStepModular(String jobTemplateId, String parentId, String stepId, int oldPosition, String newParentId, int newPosition) throws org.apache.thrift.TException
    {
      moveStepModular_args args = new moveStepModular_args();
      args.setJobTemplateId(jobTemplateId);
      args.setParentId(parentId);
      args.setStepId(stepId);
      args.setOldPosition(oldPosition);
      args.setNewParentId(newParentId);
      args.setNewPosition(newPosition);
      sendBase("moveStepModular", args);
    }

    public JobTemplateModular recv_moveStepModular() throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      moveStepModular_result result = new moveStepModular_result();
      receiveBase(result, "moveStepModular");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "moveStepModular failed: unknown result");
    }

    public JobTemplateModular moveStepGroupModular(String jobTemplateId, String parentId, String stepGroupId, int oldPosition, String newParentId, int newPosition) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      send_moveStepGroupModular(jobTemplateId, parentId, stepGroupId, oldPosition, newParentId, newPosition);
      return recv_moveStepGroupModular();
    }

    public void send_moveStepGroupModular(String jobTemplateId, String parentId, String stepGroupId, int oldPosition, String newParentId, int newPosition) throws org.apache.thrift.TException
    {
      moveStepGroupModular_args args = new moveStepGroupModular_args();
      args.setJobTemplateId(jobTemplateId);
      args.setParentId(parentId);
      args.setStepGroupId(stepGroupId);
      args.setOldPosition(oldPosition);
      args.setNewParentId(newParentId);
      args.setNewPosition(newPosition);
      sendBase("moveStepGroupModular", args);
    }

    public JobTemplateModular recv_moveStepGroupModular() throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      moveStepGroupModular_result result = new moveStepGroupModular_result();
      receiveBase(result, "moveStepGroupModular");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "moveStepGroupModular failed: unknown result");
    }

    public JobTemplateModular removeStepModular(String jobTemplateId, String parentId, String stepId, int position) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      send_removeStepModular(jobTemplateId, parentId, stepId, position);
      return recv_removeStepModular();
    }

    public void send_removeStepModular(String jobTemplateId, String parentId, String stepId, int position) throws org.apache.thrift.TException
    {
      removeStepModular_args args = new removeStepModular_args();
      args.setJobTemplateId(jobTemplateId);
      args.setParentId(parentId);
      args.setStepId(stepId);
      args.setPosition(position);
      sendBase("removeStepModular", args);
    }

    public JobTemplateModular recv_removeStepModular() throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      removeStepModular_result result = new removeStepModular_result();
      receiveBase(result, "removeStepModular");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "removeStepModular failed: unknown result");
    }

    public JobTemplateModular removeStepGroupModular(String jobTemplateId, String parentId, String stepGroupId, int position) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      send_removeStepGroupModular(jobTemplateId, parentId, stepGroupId, position);
      return recv_removeStepGroupModular();
    }

    public void send_removeStepGroupModular(String jobTemplateId, String parentId, String stepGroupId, int position) throws org.apache.thrift.TException
    {
      removeStepGroupModular_args args = new removeStepGroupModular_args();
      args.setJobTemplateId(jobTemplateId);
      args.setParentId(parentId);
      args.setStepGroupId(stepGroupId);
      args.setPosition(position);
      sendBase("removeStepGroupModular", args);
    }

    public JobTemplateModular recv_removeStepGroupModular() throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      removeStepGroupModular_result result = new removeStepGroupModular_result();
      receiveBase(result, "removeStepGroupModular");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "removeStepGroupModular failed: unknown result");
    }

    public JobTemplateModular cloneStepModular(String jobTemplateId, String parentId, String stepId, int position, String newParentId, int newPosition) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      send_cloneStepModular(jobTemplateId, parentId, stepId, position, newParentId, newPosition);
      return recv_cloneStepModular();
    }

    public void send_cloneStepModular(String jobTemplateId, String parentId, String stepId, int position, String newParentId, int newPosition) throws org.apache.thrift.TException
    {
      cloneStepModular_args args = new cloneStepModular_args();
      args.setJobTemplateId(jobTemplateId);
      args.setParentId(parentId);
      args.setStepId(stepId);
      args.setPosition(position);
      args.setNewParentId(newParentId);
      args.setNewPosition(newPosition);
      sendBase("cloneStepModular", args);
    }

    public JobTemplateModular recv_cloneStepModular() throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      cloneStepModular_result result = new cloneStepModular_result();
      receiveBase(result, "cloneStepModular");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "cloneStepModular failed: unknown result");
    }

    public JobTemplateModular cloneStepGroupModular(String jobTemplateId, String parentId, String stepGroupId, int position, String newParentId, int newPosition) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      send_cloneStepGroupModular(jobTemplateId, parentId, stepGroupId, position, newParentId, newPosition);
      return recv_cloneStepGroupModular();
    }

    public void send_cloneStepGroupModular(String jobTemplateId, String parentId, String stepGroupId, int position, String newParentId, int newPosition) throws org.apache.thrift.TException
    {
      cloneStepGroupModular_args args = new cloneStepGroupModular_args();
      args.setJobTemplateId(jobTemplateId);
      args.setParentId(parentId);
      args.setStepGroupId(stepGroupId);
      args.setPosition(position);
      args.setNewParentId(newParentId);
      args.setNewPosition(newPosition);
      sendBase("cloneStepGroupModular", args);
    }

    public JobTemplateModular recv_cloneStepGroupModular() throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      cloneStepGroupModular_result result = new cloneStepGroupModular_result();
      receiveBase(result, "cloneStepGroupModular");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "cloneStepGroupModular failed: unknown result");
    }

    public List<com.wi.director.thrift.v1.step.BaseStep> searchStepGroups(String teamId, String title) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      send_searchStepGroups(teamId, title);
      return recv_searchStepGroups();
    }

    public void send_searchStepGroups(String teamId, String title) throws org.apache.thrift.TException
    {
      searchStepGroups_args args = new searchStepGroups_args();
      args.setTeamId(teamId);
      args.setTitle(title);
      sendBase("searchStepGroups", args);
    }

    public List<com.wi.director.thrift.v1.step.BaseStep> recv_searchStepGroups() throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      searchStepGroups_result result = new searchStepGroups_result();
      receiveBase(result, "searchStepGroups");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "searchStepGroups failed: unknown result");
    }

    public JobTemplate addDocument(String jobTemplateId, int jobTemplateVersion, String documentId) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      send_addDocument(jobTemplateId, jobTemplateVersion, documentId);
      return recv_addDocument();
    }

    public void send_addDocument(String jobTemplateId, int jobTemplateVersion, String documentId) throws org.apache.thrift.TException
    {
      addDocument_args args = new addDocument_args();
      args.setJobTemplateId(jobTemplateId);
      args.setJobTemplateVersion(jobTemplateVersion);
      args.setDocumentId(documentId);
      sendBase("addDocument", args);
    }

    public JobTemplate recv_addDocument() throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      addDocument_result result = new addDocument_result();
      receiveBase(result, "addDocument");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addDocument failed: unknown result");
    }

    public JobTemplate removeDocument(String jobTemplateId, String documentId) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      send_removeDocument(jobTemplateId, documentId);
      return recv_removeDocument();
    }

    public void send_removeDocument(String jobTemplateId, String documentId) throws org.apache.thrift.TException
    {
      removeDocument_args args = new removeDocument_args();
      args.setJobTemplateId(jobTemplateId);
      args.setDocumentId(documentId);
      sendBase("removeDocument", args);
    }

    public JobTemplate recv_removeDocument() throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      removeDocument_result result = new removeDocument_result();
      receiveBase(result, "removeDocument");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "removeDocument failed: unknown result");
    }

    public JobTemplate updateRootHeaders(String jobTemplateId, com.wi.director.thrift.v1.group_headers.StepGroupHeaders headers) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      send_updateRootHeaders(jobTemplateId, headers);
      return recv_updateRootHeaders();
    }

    public void send_updateRootHeaders(String jobTemplateId, com.wi.director.thrift.v1.group_headers.StepGroupHeaders headers) throws org.apache.thrift.TException
    {
      updateRootHeaders_args args = new updateRootHeaders_args();
      args.setJobTemplateId(jobTemplateId);
      args.setHeaders(headers);
      sendBase("updateRootHeaders", args);
    }

    public JobTemplate recv_updateRootHeaders() throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      updateRootHeaders_result result = new updateRootHeaders_result();
      receiveBase(result, "updateRootHeaders");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateRootHeaders failed: unknown result");
    }

    public Map<String,com.wi.director.thrift.v1.metadata.MetadataEntry> updateMetadata(String jobTemplateId, Map<String,com.wi.director.thrift.v1.metadata.MetadataValue> updated, List<String> removedIds) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      send_updateMetadata(jobTemplateId, updated, removedIds);
      return recv_updateMetadata();
    }

    public void send_updateMetadata(String jobTemplateId, Map<String,com.wi.director.thrift.v1.metadata.MetadataValue> updated, List<String> removedIds) throws org.apache.thrift.TException
    {
      updateMetadata_args args = new updateMetadata_args();
      args.setJobTemplateId(jobTemplateId);
      args.setUpdated(updated);
      args.setRemovedIds(removedIds);
      sendBase("updateMetadata", args);
    }

    public Map<String,com.wi.director.thrift.v1.metadata.MetadataEntry> recv_updateMetadata() throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      updateMetadata_result result = new updateMetadata_result();
      receiveBase(result, "updateMetadata");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateMetadata failed: unknown result");
    }

    public List<TemplateTag> getTags(String jobTemplateId) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      send_getTags(jobTemplateId);
      return recv_getTags();
    }

    public void send_getTags(String jobTemplateId) throws org.apache.thrift.TException
    {
      getTags_args args = new getTags_args();
      args.setJobTemplateId(jobTemplateId);
      sendBase("getTags", args);
    }

    public List<TemplateTag> recv_getTags() throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      getTags_result result = new getTags_result();
      receiveBase(result, "getTags");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTags failed: unknown result");
    }

    public void updateTags(String jobTemplateId, List<TemplateTag> added, List<String> removedTagIds) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      send_updateTags(jobTemplateId, added, removedTagIds);
      recv_updateTags();
    }

    public void send_updateTags(String jobTemplateId, List<TemplateTag> added, List<String> removedTagIds) throws org.apache.thrift.TException
    {
      updateTags_args args = new updateTags_args();
      args.setJobTemplateId(jobTemplateId);
      args.setAdded(added);
      args.setRemovedTagIds(removedTagIds);
      sendBase("updateTags", args);
    }

    public void recv_updateTags() throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      updateTags_result result = new updateTags_result();
      receiveBase(result, "updateTags");
      if (result.err != null) {
        throw result.err;
      }
      return;
    }

    public JobTemplateLock acquireLock(String jobTemplateId) throws com.wi.director.thrift.v1.common.SystemException, JobTemplateLockFailed, org.apache.thrift.TException
    {
      send_acquireLock(jobTemplateId);
      return recv_acquireLock();
    }

    public void send_acquireLock(String jobTemplateId) throws org.apache.thrift.TException
    {
      acquireLock_args args = new acquireLock_args();
      args.setJobTemplateId(jobTemplateId);
      sendBase("acquireLock", args);
    }

    public JobTemplateLock recv_acquireLock() throws com.wi.director.thrift.v1.common.SystemException, JobTemplateLockFailed, org.apache.thrift.TException
    {
      acquireLock_result result = new acquireLock_result();
      receiveBase(result, "acquireLock");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      if (result.failErr != null) {
        throw result.failErr;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "acquireLock failed: unknown result");
    }

    public ForceAcquireResponse forceAcquireLock(String jobTemplateId) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      send_forceAcquireLock(jobTemplateId);
      return recv_forceAcquireLock();
    }

    public void send_forceAcquireLock(String jobTemplateId) throws org.apache.thrift.TException
    {
      forceAcquireLock_args args = new forceAcquireLock_args();
      args.setJobTemplateId(jobTemplateId);
      sendBase("forceAcquireLock", args);
    }

    public ForceAcquireResponse recv_forceAcquireLock() throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      forceAcquireLock_result result = new forceAcquireLock_result();
      receiveBase(result, "forceAcquireLock");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "forceAcquireLock failed: unknown result");
    }

    public void releaseLock(String jobTemplateId) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      send_releaseLock(jobTemplateId);
      recv_releaseLock();
    }

    public void send_releaseLock(String jobTemplateId) throws org.apache.thrift.TException
    {
      releaseLock_args args = new releaseLock_args();
      args.setJobTemplateId(jobTemplateId);
      sendBase("releaseLock", args);
    }

    public void recv_releaseLock() throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      releaseLock_result result = new releaseLock_result();
      receiveBase(result, "releaseLock");
      if (result.err != null) {
        throw result.err;
      }
      return;
    }

    public Map<Integer,TemplateHistoryResult> getHistory(String id, List<Integer> internalVersions, int otherVersion) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      send_getHistory(id, internalVersions, otherVersion);
      return recv_getHistory();
    }

    public void send_getHistory(String id, List<Integer> internalVersions, int otherVersion) throws org.apache.thrift.TException
    {
      getHistory_args args = new getHistory_args();
      args.setId(id);
      args.setInternalVersions(internalVersions);
      args.setOtherVersion(otherVersion);
      sendBase("getHistory", args);
    }

    public Map<Integer,TemplateHistoryResult> recv_getHistory() throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      getHistory_result result = new getHistory_result();
      receiveBase(result, "getHistory");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getHistory failed: unknown result");
    }

    public void revert(String id, int internalVersion) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      send_revert(id, internalVersion);
      recv_revert();
    }

    public void send_revert(String id, int internalVersion) throws org.apache.thrift.TException
    {
      revert_args args = new revert_args();
      args.setId(id);
      args.setInternalVersion(internalVersion);
      sendBase("revert", args);
    }

    public void recv_revert() throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      revert_result result = new revert_result();
      receiveBase(result, "revert");
      if (result.err != null) {
        throw result.err;
      }
      return;
    }

    public List<com.wi.director.thrift.v1.abac.AbacAttribute> updateAttribute(String templateId, String attributeId, List<com.wi.director.thrift.v1.abac.AbacAttributeValue> values, com.wi.director.thrift.v1.abac.AttributeUploadBehaviour behave) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      send_updateAttribute(templateId, attributeId, values, behave);
      return recv_updateAttribute();
    }

    public void send_updateAttribute(String templateId, String attributeId, List<com.wi.director.thrift.v1.abac.AbacAttributeValue> values, com.wi.director.thrift.v1.abac.AttributeUploadBehaviour behave) throws org.apache.thrift.TException
    {
      updateAttribute_args args = new updateAttribute_args();
      args.setTemplateId(templateId);
      args.setAttributeId(attributeId);
      args.setValues(values);
      args.setBehave(behave);
      sendBase("updateAttribute", args);
    }

    public List<com.wi.director.thrift.v1.abac.AbacAttribute> recv_updateAttribute() throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      updateAttribute_result result = new updateAttribute_result();
      receiveBase(result, "updateAttribute");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateAttribute failed: unknown result");
    }

  }
  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("index", new index());
      processMap.put("get", new get());
      processMap.put("query", new query());
      processMap.put("fetch", new fetch());
      processMap.put("create", new create());
      processMap.put("update", new update());
      processMap.put("archive", new archive());
      processMap.put("unarchive", new unarchive());
      processMap.put("publish", new publish());
      processMap.put("getPublicVersion", new getPublicVersion());
      processMap.put("fetchPublicVersions", new fetchPublicVersions());
      processMap.put("fetchPublishedVersions", new fetchPublishedVersions());
      processMap.put("beginReview", new beginReview());
      processMap.put("endReview", new endReview());
      processMap.put("publishVersion", new publishVersion());
      processMap.put("updateStepGroup", new updateStepGroup());
      processMap.put("addStep", new addStep());
      processMap.put("addStepGroup", new addStepGroup());
      processMap.put("cloneStep", new cloneStep());
      processMap.put("cloneStepGroup", new cloneStepGroup());
      processMap.put("cloneTemplate", new cloneTemplate());
      processMap.put("addStepModular", new addStepModular());
      processMap.put("addStepGroupModular", new addStepGroupModular());
      processMap.put("moveStepModular", new moveStepModular());
      processMap.put("moveStepGroupModular", new moveStepGroupModular());
      processMap.put("removeStepModular", new removeStepModular());
      processMap.put("removeStepGroupModular", new removeStepGroupModular());
      processMap.put("cloneStepModular", new cloneStepModular());
      processMap.put("cloneStepGroupModular", new cloneStepGroupModular());
      processMap.put("searchStepGroups", new searchStepGroups());
      processMap.put("addDocument", new addDocument());
      processMap.put("removeDocument", new removeDocument());
      processMap.put("updateRootHeaders", new updateRootHeaders());
      processMap.put("updateMetadata", new updateMetadata());
      processMap.put("getTags", new getTags());
      processMap.put("updateTags", new updateTags());
      processMap.put("acquireLock", new acquireLock());
      processMap.put("forceAcquireLock", new forceAcquireLock());
      processMap.put("releaseLock", new releaseLock());
      processMap.put("getHistory", new getHistory());
      processMap.put("revert", new revert());
      processMap.put("updateAttribute", new updateAttribute());
      return processMap;
    }

    public static class index<I extends Iface> extends org.apache.thrift.ProcessFunction<I, index_args> {
      public index() {
        super("index");
      }

      public index_args getEmptyArgsInstance() {
        return new index_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public index_result getResult(I iface, index_args args) throws org.apache.thrift.TException {
        index_result result = new index_result();
        try {
          result.success = iface.index(args.teamId, args.opts);
        } catch (com.wi.director.thrift.v1.common.SystemException err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class get<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_args> {
      public get() {
        super("get");
      }

      public get_args getEmptyArgsInstance() {
        return new get_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public get_result getResult(I iface, get_args args) throws org.apache.thrift.TException {
        get_result result = new get_result();
        try {
          result.success = iface.get(args.jobTemplateId);
        } catch (com.wi.director.thrift.v1.common.SystemException err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class query<I extends Iface> extends org.apache.thrift.ProcessFunction<I, query_args> {
      public query() {
        super("query");
      }

      public query_args getEmptyArgsInstance() {
        return new query_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public query_result getResult(I iface, query_args args) throws org.apache.thrift.TException {
        query_result result = new query_result();
        try {
          result.success = iface.query(args.selectOpts, args.whereOpts, args.order);
        } catch (com.wi.director.thrift.v1.common.SystemException err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class fetch<I extends Iface> extends org.apache.thrift.ProcessFunction<I, fetch_args> {
      public fetch() {
        super("fetch");
      }

      public fetch_args getEmptyArgsInstance() {
        return new fetch_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public fetch_result getResult(I iface, fetch_args args) throws org.apache.thrift.TException {
        fetch_result result = new fetch_result();
        try {
          result.success = iface.fetch(args.selectOpts, args.templateIds);
        } catch (com.wi.director.thrift.v1.common.SystemException err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class create<I extends Iface> extends org.apache.thrift.ProcessFunction<I, create_args> {
      public create() {
        super("create");
      }

      public create_args getEmptyArgsInstance() {
        return new create_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public create_result getResult(I iface, create_args args) throws org.apache.thrift.TException {
        create_result result = new create_result();
        try {
          result.success = iface.create(args.teamId, args.params, args.attributes);
        } catch (com.wi.director.thrift.v1.common.SystemException err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class update<I extends Iface> extends org.apache.thrift.ProcessFunction<I, update_args> {
      public update() {
        super("update");
      }

      public update_args getEmptyArgsInstance() {
        return new update_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public update_result getResult(I iface, update_args args) throws org.apache.thrift.TException {
        update_result result = new update_result();
        try {
          result.success = iface.update(args.jobTemplateId, args.params);
        } catch (com.wi.director.thrift.v1.common.SystemException err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class archive<I extends Iface> extends org.apache.thrift.ProcessFunction<I, archive_args> {
      public archive() {
        super("archive");
      }

      public archive_args getEmptyArgsInstance() {
        return new archive_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public archive_result getResult(I iface, archive_args args) throws org.apache.thrift.TException {
        archive_result result = new archive_result();
        try {
          result.success = iface.archive(args.jobTemplateId);
        } catch (com.wi.director.thrift.v1.common.SystemException err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class unarchive<I extends Iface> extends org.apache.thrift.ProcessFunction<I, unarchive_args> {
      public unarchive() {
        super("unarchive");
      }

      public unarchive_args getEmptyArgsInstance() {
        return new unarchive_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public unarchive_result getResult(I iface, unarchive_args args) throws org.apache.thrift.TException {
        unarchive_result result = new unarchive_result();
        try {
          result.success = iface.unarchive(args.jobTemplateId);
        } catch (com.wi.director.thrift.v1.common.SystemException err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class publish<I extends Iface> extends org.apache.thrift.ProcessFunction<I, publish_args> {
      public publish() {
        super("publish");
      }

      public publish_args getEmptyArgsInstance() {
        return new publish_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public publish_result getResult(I iface, publish_args args) throws org.apache.thrift.TException {
        publish_result result = new publish_result();
        try {
          result.success = iface.publish(args.jobTemplateId);
        } catch (com.wi.director.thrift.v1.common.SystemException err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class getPublicVersion<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPublicVersion_args> {
      public getPublicVersion() {
        super("getPublicVersion");
      }

      public getPublicVersion_args getEmptyArgsInstance() {
        return new getPublicVersion_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getPublicVersion_result getResult(I iface, getPublicVersion_args args) throws org.apache.thrift.TException {
        getPublicVersion_result result = new getPublicVersion_result();
        try {
          result.success = iface.getPublicVersion(args.jobTemplateId, args.publicVersion);
        } catch (com.wi.director.thrift.v1.common.SystemException err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class fetchPublicVersions<I extends Iface> extends org.apache.thrift.ProcessFunction<I, fetchPublicVersions_args> {
      public fetchPublicVersions() {
        super("fetchPublicVersions");
      }

      public fetchPublicVersions_args getEmptyArgsInstance() {
        return new fetchPublicVersions_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public fetchPublicVersions_result getResult(I iface, fetchPublicVersions_args args) throws org.apache.thrift.TException {
        fetchPublicVersions_result result = new fetchPublicVersions_result();
        try {
          result.success = iface.fetchPublicVersions(args.selectOpts, args.versions);
        } catch (com.wi.director.thrift.v1.common.SystemException err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class fetchPublishedVersions<I extends Iface> extends org.apache.thrift.ProcessFunction<I, fetchPublishedVersions_args> {
      public fetchPublishedVersions() {
        super("fetchPublishedVersions");
      }

      public fetchPublishedVersions_args getEmptyArgsInstance() {
        return new fetchPublishedVersions_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public fetchPublishedVersions_result getResult(I iface, fetchPublishedVersions_args args) throws org.apache.thrift.TException {
        fetchPublishedVersions_result result = new fetchPublishedVersions_result();
        try {
          result.success = iface.fetchPublishedVersions(args.selectOpts, args.versions);
        } catch (com.wi.director.thrift.v1.common.SystemException err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class beginReview<I extends Iface> extends org.apache.thrift.ProcessFunction<I, beginReview_args> {
      public beginReview() {
        super("beginReview");
      }

      public beginReview_args getEmptyArgsInstance() {
        return new beginReview_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public beginReview_result getResult(I iface, beginReview_args args) throws org.apache.thrift.TException {
        beginReview_result result = new beginReview_result();
        try {
          result.success = iface.beginReview(args.jobTemplateId);
          result.setSuccessIsSet(true);
        } catch (com.wi.director.thrift.v1.common.SystemException err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class endReview<I extends Iface> extends org.apache.thrift.ProcessFunction<I, endReview_args> {
      public endReview() {
        super("endReview");
      }

      public endReview_args getEmptyArgsInstance() {
        return new endReview_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public endReview_result getResult(I iface, endReview_args args) throws org.apache.thrift.TException {
        endReview_result result = new endReview_result();
        try {
          result.success = iface.endReview(args.jobTemplateId);
          result.setSuccessIsSet(true);
        } catch (com.wi.director.thrift.v1.common.SystemException err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class publishVersion<I extends Iface> extends org.apache.thrift.ProcessFunction<I, publishVersion_args> {
      public publishVersion() {
        super("publishVersion");
      }

      public publishVersion_args getEmptyArgsInstance() {
        return new publishVersion_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public publishVersion_result getResult(I iface, publishVersion_args args) throws org.apache.thrift.TException {
        publishVersion_result result = new publishVersion_result();
        try {
          result.success = iface.publishVersion(args.jobTemplateId, args.publicVersion);
        } catch (com.wi.director.thrift.v1.common.SystemException err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class updateStepGroup<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateStepGroup_args> {
      public updateStepGroup() {
        super("updateStepGroup");
      }

      public updateStepGroup_args getEmptyArgsInstance() {
        return new updateStepGroup_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateStepGroup_result getResult(I iface, updateStepGroup_args args) throws org.apache.thrift.TException {
        updateStepGroup_result result = new updateStepGroup_result();
        try {
          result.success = iface.updateStepGroup(args.jobTemplateId, args.stepGroup);
        } catch (com.wi.director.thrift.v1.common.SystemException err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class addStep<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addStep_args> {
      public addStep() {
        super("addStep");
      }

      public addStep_args getEmptyArgsInstance() {
        return new addStep_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addStep_result getResult(I iface, addStep_args args) throws org.apache.thrift.TException {
        addStep_result result = new addStep_result();
        try {
          result.success = iface.addStep(args.jobTemplateId, args.parentId, args.step, args.position, args.replace);
        } catch (com.wi.director.thrift.v1.common.SystemException err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class addStepGroup<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addStepGroup_args> {
      public addStepGroup() {
        super("addStepGroup");
      }

      public addStepGroup_args getEmptyArgsInstance() {
        return new addStepGroup_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addStepGroup_result getResult(I iface, addStepGroup_args args) throws org.apache.thrift.TException {
        addStepGroup_result result = new addStepGroup_result();
        try {
          result.success = iface.addStepGroup(args.jobTemplateId, args.parentId, args.stepGroup, args.position, args.replace);
        } catch (com.wi.director.thrift.v1.common.SystemException err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class cloneStep<I extends Iface> extends org.apache.thrift.ProcessFunction<I, cloneStep_args> {
      public cloneStep() {
        super("cloneStep");
      }

      public cloneStep_args getEmptyArgsInstance() {
        return new cloneStep_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public cloneStep_result getResult(I iface, cloneStep_args args) throws org.apache.thrift.TException {
        cloneStep_result result = new cloneStep_result();
        try {
          result.success = iface.cloneStep(args.jobTemplateId, args.parentId, args.stepId, args.position);
        } catch (com.wi.director.thrift.v1.common.SystemException err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class cloneStepGroup<I extends Iface> extends org.apache.thrift.ProcessFunction<I, cloneStepGroup_args> {
      public cloneStepGroup() {
        super("cloneStepGroup");
      }

      public cloneStepGroup_args getEmptyArgsInstance() {
        return new cloneStepGroup_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public cloneStepGroup_result getResult(I iface, cloneStepGroup_args args) throws org.apache.thrift.TException {
        cloneStepGroup_result result = new cloneStepGroup_result();
        try {
          result.success = iface.cloneStepGroup(args.jobTemplateId, args.parentId, args.stepGroupId, args.position);
        } catch (com.wi.director.thrift.v1.common.SystemException err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class cloneTemplate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, cloneTemplate_args> {
      public cloneTemplate() {
        super("cloneTemplate");
      }

      public cloneTemplate_args getEmptyArgsInstance() {
        return new cloneTemplate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public cloneTemplate_result getResult(I iface, cloneTemplate_args args) throws org.apache.thrift.TException {
        cloneTemplate_result result = new cloneTemplate_result();
        try {
          result.success = iface.cloneTemplate(args.jobTemplateId);
        } catch (com.wi.director.thrift.v1.common.SystemException err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class addStepModular<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addStepModular_args> {
      public addStepModular() {
        super("addStepModular");
      }

      public addStepModular_args getEmptyArgsInstance() {
        return new addStepModular_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addStepModular_result getResult(I iface, addStepModular_args args) throws org.apache.thrift.TException {
        addStepModular_result result = new addStepModular_result();
        try {
          result.success = iface.addStepModular(args.jobTemplateId, args.parentId, args.step, args.position, args.replace);
        } catch (com.wi.director.thrift.v1.common.SystemException err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class addStepGroupModular<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addStepGroupModular_args> {
      public addStepGroupModular() {
        super("addStepGroupModular");
      }

      public addStepGroupModular_args getEmptyArgsInstance() {
        return new addStepGroupModular_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addStepGroupModular_result getResult(I iface, addStepGroupModular_args args) throws org.apache.thrift.TException {
        addStepGroupModular_result result = new addStepGroupModular_result();
        try {
          result.success = iface.addStepGroupModular(args.jobTemplateId, args.parentId, args.stepGroup, args.position, args.replace);
        } catch (com.wi.director.thrift.v1.common.SystemException err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class moveStepModular<I extends Iface> extends org.apache.thrift.ProcessFunction<I, moveStepModular_args> {
      public moveStepModular() {
        super("moveStepModular");
      }

      public moveStepModular_args getEmptyArgsInstance() {
        return new moveStepModular_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public moveStepModular_result getResult(I iface, moveStepModular_args args) throws org.apache.thrift.TException {
        moveStepModular_result result = new moveStepModular_result();
        try {
          result.success = iface.moveStepModular(args.jobTemplateId, args.parentId, args.stepId, args.oldPosition, args.newParentId, args.newPosition);
        } catch (com.wi.director.thrift.v1.common.SystemException err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class moveStepGroupModular<I extends Iface> extends org.apache.thrift.ProcessFunction<I, moveStepGroupModular_args> {
      public moveStepGroupModular() {
        super("moveStepGroupModular");
      }

      public moveStepGroupModular_args getEmptyArgsInstance() {
        return new moveStepGroupModular_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public moveStepGroupModular_result getResult(I iface, moveStepGroupModular_args args) throws org.apache.thrift.TException {
        moveStepGroupModular_result result = new moveStepGroupModular_result();
        try {
          result.success = iface.moveStepGroupModular(args.jobTemplateId, args.parentId, args.stepGroupId, args.oldPosition, args.newParentId, args.newPosition);
        } catch (com.wi.director.thrift.v1.common.SystemException err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class removeStepModular<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removeStepModular_args> {
      public removeStepModular() {
        super("removeStepModular");
      }

      public removeStepModular_args getEmptyArgsInstance() {
        return new removeStepModular_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public removeStepModular_result getResult(I iface, removeStepModular_args args) throws org.apache.thrift.TException {
        removeStepModular_result result = new removeStepModular_result();
        try {
          result.success = iface.removeStepModular(args.jobTemplateId, args.parentId, args.stepId, args.position);
        } catch (com.wi.director.thrift.v1.common.SystemException err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class removeStepGroupModular<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removeStepGroupModular_args> {
      public removeStepGroupModular() {
        super("removeStepGroupModular");
      }

      public removeStepGroupModular_args getEmptyArgsInstance() {
        return new removeStepGroupModular_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public removeStepGroupModular_result getResult(I iface, removeStepGroupModular_args args) throws org.apache.thrift.TException {
        removeStepGroupModular_result result = new removeStepGroupModular_result();
        try {
          result.success = iface.removeStepGroupModular(args.jobTemplateId, args.parentId, args.stepGroupId, args.position);
        } catch (com.wi.director.thrift.v1.common.SystemException err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class cloneStepModular<I extends Iface> extends org.apache.thrift.ProcessFunction<I, cloneStepModular_args> {
      public cloneStepModular() {
        super("cloneStepModular");
      }

      public cloneStepModular_args getEmptyArgsInstance() {
        return new cloneStepModular_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public cloneStepModular_result getResult(I iface, cloneStepModular_args args) throws org.apache.thrift.TException {
        cloneStepModular_result result = new cloneStepModular_result();
        try {
          result.success = iface.cloneStepModular(args.jobTemplateId, args.parentId, args.stepId, args.position, args.newParentId, args.newPosition);
        } catch (com.wi.director.thrift.v1.common.SystemException err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class cloneStepGroupModular<I extends Iface> extends org.apache.thrift.ProcessFunction<I, cloneStepGroupModular_args> {
      public cloneStepGroupModular() {
        super("cloneStepGroupModular");
      }

      public cloneStepGroupModular_args getEmptyArgsInstance() {
        return new cloneStepGroupModular_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public cloneStepGroupModular_result getResult(I iface, cloneStepGroupModular_args args) throws org.apache.thrift.TException {
        cloneStepGroupModular_result result = new cloneStepGroupModular_result();
        try {
          result.success = iface.cloneStepGroupModular(args.jobTemplateId, args.parentId, args.stepGroupId, args.position, args.newParentId, args.newPosition);
        } catch (com.wi.director.thrift.v1.common.SystemException err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class searchStepGroups<I extends Iface> extends org.apache.thrift.ProcessFunction<I, searchStepGroups_args> {
      public searchStepGroups() {
        super("searchStepGroups");
      }

      public searchStepGroups_args getEmptyArgsInstance() {
        return new searchStepGroups_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public searchStepGroups_result getResult(I iface, searchStepGroups_args args) throws org.apache.thrift.TException {
        searchStepGroups_result result = new searchStepGroups_result();
        try {
          result.success = iface.searchStepGroups(args.teamId, args.title);
        } catch (com.wi.director.thrift.v1.common.SystemException err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class addDocument<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addDocument_args> {
      public addDocument() {
        super("addDocument");
      }

      public addDocument_args getEmptyArgsInstance() {
        return new addDocument_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addDocument_result getResult(I iface, addDocument_args args) throws org.apache.thrift.TException {
        addDocument_result result = new addDocument_result();
        try {
          result.success = iface.addDocument(args.jobTemplateId, args.jobTemplateVersion, args.documentId);
        } catch (com.wi.director.thrift.v1.common.SystemException err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class removeDocument<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removeDocument_args> {
      public removeDocument() {
        super("removeDocument");
      }

      public removeDocument_args getEmptyArgsInstance() {
        return new removeDocument_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public removeDocument_result getResult(I iface, removeDocument_args args) throws org.apache.thrift.TException {
        removeDocument_result result = new removeDocument_result();
        try {
          result.success = iface.removeDocument(args.jobTemplateId, args.documentId);
        } catch (com.wi.director.thrift.v1.common.SystemException err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class updateRootHeaders<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateRootHeaders_args> {
      public updateRootHeaders() {
        super("updateRootHeaders");
      }

      public updateRootHeaders_args getEmptyArgsInstance() {
        return new updateRootHeaders_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateRootHeaders_result getResult(I iface, updateRootHeaders_args args) throws org.apache.thrift.TException {
        updateRootHeaders_result result = new updateRootHeaders_result();
        try {
          result.success = iface.updateRootHeaders(args.jobTemplateId, args.headers);
        } catch (com.wi.director.thrift.v1.common.SystemException err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class updateMetadata<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateMetadata_args> {
      public updateMetadata() {
        super("updateMetadata");
      }

      public updateMetadata_args getEmptyArgsInstance() {
        return new updateMetadata_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateMetadata_result getResult(I iface, updateMetadata_args args) throws org.apache.thrift.TException {
        updateMetadata_result result = new updateMetadata_result();
        try {
          result.success = iface.updateMetadata(args.jobTemplateId, args.updated, args.removedIds);
        } catch (com.wi.director.thrift.v1.common.SystemException err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class getTags<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTags_args> {
      public getTags() {
        super("getTags");
      }

      public getTags_args getEmptyArgsInstance() {
        return new getTags_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTags_result getResult(I iface, getTags_args args) throws org.apache.thrift.TException {
        getTags_result result = new getTags_result();
        try {
          result.success = iface.getTags(args.jobTemplateId);
        } catch (com.wi.director.thrift.v1.common.SystemException err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class updateTags<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateTags_args> {
      public updateTags() {
        super("updateTags");
      }

      public updateTags_args getEmptyArgsInstance() {
        return new updateTags_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateTags_result getResult(I iface, updateTags_args args) throws org.apache.thrift.TException {
        updateTags_result result = new updateTags_result();
        try {
          iface.updateTags(args.jobTemplateId, args.added, args.removedTagIds);
        } catch (com.wi.director.thrift.v1.common.SystemException err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class acquireLock<I extends Iface> extends org.apache.thrift.ProcessFunction<I, acquireLock_args> {
      public acquireLock() {
        super("acquireLock");
      }

      public acquireLock_args getEmptyArgsInstance() {
        return new acquireLock_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public acquireLock_result getResult(I iface, acquireLock_args args) throws org.apache.thrift.TException {
        acquireLock_result result = new acquireLock_result();
        try {
          result.success = iface.acquireLock(args.jobTemplateId);
        } catch (com.wi.director.thrift.v1.common.SystemException err) {
          result.err = err;
        } catch (JobTemplateLockFailed failErr) {
          result.failErr = failErr;
        }
        return result;
      }
    }

    public static class forceAcquireLock<I extends Iface> extends org.apache.thrift.ProcessFunction<I, forceAcquireLock_args> {
      public forceAcquireLock() {
        super("forceAcquireLock");
      }

      public forceAcquireLock_args getEmptyArgsInstance() {
        return new forceAcquireLock_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public forceAcquireLock_result getResult(I iface, forceAcquireLock_args args) throws org.apache.thrift.TException {
        forceAcquireLock_result result = new forceAcquireLock_result();
        try {
          result.success = iface.forceAcquireLock(args.jobTemplateId);
        } catch (com.wi.director.thrift.v1.common.SystemException err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class releaseLock<I extends Iface> extends org.apache.thrift.ProcessFunction<I, releaseLock_args> {
      public releaseLock() {
        super("releaseLock");
      }

      public releaseLock_args getEmptyArgsInstance() {
        return new releaseLock_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public releaseLock_result getResult(I iface, releaseLock_args args) throws org.apache.thrift.TException {
        releaseLock_result result = new releaseLock_result();
        try {
          iface.releaseLock(args.jobTemplateId);
        } catch (com.wi.director.thrift.v1.common.SystemException err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class getHistory<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getHistory_args> {
      public getHistory() {
        super("getHistory");
      }

      public getHistory_args getEmptyArgsInstance() {
        return new getHistory_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getHistory_result getResult(I iface, getHistory_args args) throws org.apache.thrift.TException {
        getHistory_result result = new getHistory_result();
        try {
          result.success = iface.getHistory(args.id, args.internalVersions, args.otherVersion);
        } catch (com.wi.director.thrift.v1.common.SystemException err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class revert<I extends Iface> extends org.apache.thrift.ProcessFunction<I, revert_args> {
      public revert() {
        super("revert");
      }

      public revert_args getEmptyArgsInstance() {
        return new revert_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public revert_result getResult(I iface, revert_args args) throws org.apache.thrift.TException {
        revert_result result = new revert_result();
        try {
          iface.revert(args.id, args.internalVersion);
        } catch (com.wi.director.thrift.v1.common.SystemException err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class updateAttribute<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateAttribute_args> {
      public updateAttribute() {
        super("updateAttribute");
      }

      public updateAttribute_args getEmptyArgsInstance() {
        return new updateAttribute_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateAttribute_result getResult(I iface, updateAttribute_args args) throws org.apache.thrift.TException {
        updateAttribute_result result = new updateAttribute_result();
        try {
          result.success = iface.updateAttribute(args.templateId, args.attributeId, args.values, args.behave);
        } catch (com.wi.director.thrift.v1.common.SystemException err) {
          result.err = err;
        }
        return result;
      }
    }

  }

  public static class index_args implements org.apache.thrift.TBase<index_args, index_args._Fields>, java.io.Serializable, Cloneable, Comparable<index_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("index_args");

    private static final org.apache.thrift.protocol.TField TEAM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("teamId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField OPTS_FIELD_DESC = new org.apache.thrift.protocol.TField("opts", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new index_argsStandardSchemeFactory());
    }

    public String teamId; // required
    public IndexOpts opts; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TEAM_ID((short)1, "teamId"),
      OPTS((short)2, "opts");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TEAM_ID
            return TEAM_ID;
          case 2: // OPTS
            return OPTS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TEAM_ID, new org.apache.thrift.meta_data.FieldMetaData("teamId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OPTS, new org.apache.thrift.meta_data.FieldMetaData("opts", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IndexOpts.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(index_args.class, metaDataMap);
    }

    public index_args() {
    }

    public index_args(
      String teamId,
      IndexOpts opts)
    {
      this();
      this.teamId = teamId;
      this.opts = opts;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public index_args(index_args other) {
      if (other.isSetTeamId()) {
        this.teamId = other.teamId;
      }
      if (other.isSetOpts()) {
        this.opts = new IndexOpts(other.opts);
      }
    }

    public index_args deepCopy() {
      return new index_args(this);
    }

    @Override
    public void clear() {
      this.teamId = null;
      this.opts = null;
    }

    public String getTeamId() {
      return this.teamId;
    }

    public index_args setTeamId(String teamId) {
      this.teamId = teamId;
      return this;
    }

    public void unsetTeamId() {
      this.teamId = null;
    }

    /** Returns true if field teamId is set (has been assigned a value) and false otherwise */
    public boolean isSetTeamId() {
      return this.teamId != null;
    }

    public void setTeamIdIsSet(boolean value) {
      if (!value) {
        this.teamId = null;
      }
    }

    public IndexOpts getOpts() {
      return this.opts;
    }

    public index_args setOpts(IndexOpts opts) {
      this.opts = opts;
      return this;
    }

    public void unsetOpts() {
      this.opts = null;
    }

    /** Returns true if field opts is set (has been assigned a value) and false otherwise */
    public boolean isSetOpts() {
      return this.opts != null;
    }

    public void setOptsIsSet(boolean value) {
      if (!value) {
        this.opts = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TEAM_ID:
        if (value == null) {
          unsetTeamId();
        } else {
          setTeamId((String)value);
        }
        break;

      case OPTS:
        if (value == null) {
          unsetOpts();
        } else {
          setOpts((IndexOpts)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TEAM_ID:
        return getTeamId();

      case OPTS:
        return getOpts();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TEAM_ID:
        return isSetTeamId();
      case OPTS:
        return isSetOpts();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof index_args)
        return this.equals((index_args)that);
      return false;
    }

    public boolean equals(index_args that) {
      if (that == null)
        return false;

      boolean this_present_teamId = true && this.isSetTeamId();
      boolean that_present_teamId = true && that.isSetTeamId();
      if (this_present_teamId || that_present_teamId) {
        if (!(this_present_teamId && that_present_teamId))
          return false;
        if (!this.teamId.equals(that.teamId))
          return false;
      }

      boolean this_present_opts = true && this.isSetOpts();
      boolean that_present_opts = true && that.isSetOpts();
      if (this_present_opts || that_present_opts) {
        if (!(this_present_opts && that_present_opts))
          return false;
        if (!this.opts.equals(that.opts))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_teamId = true && (isSetTeamId());
      list.add(present_teamId);
      if (present_teamId)
        list.add(teamId);

      boolean present_opts = true && (isSetOpts());
      list.add(present_opts);
      if (present_opts)
        list.add(opts);

      return list.hashCode();
    }

    @Override
    public int compareTo(index_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTeamId()).compareTo(other.isSetTeamId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTeamId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teamId, other.teamId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOpts()).compareTo(other.isSetOpts());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOpts()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.opts, other.opts);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("index_args(");
      boolean first = true;

      sb.append("teamId:");
      if (this.teamId == null) {
        sb.append("null");
      } else {
        sb.append(this.teamId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("opts:");
      if (this.opts == null) {
        sb.append("null");
      } else {
        sb.append(this.opts);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (opts != null) {
        opts.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class index_argsStandardSchemeFactory implements SchemeFactory {
      public index_argsStandardScheme getScheme() {
        return new index_argsStandardScheme();
      }
    }

    private static class index_argsStandardScheme extends StandardScheme<index_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, index_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TEAM_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.teamId = iprot.readString();
                struct.setTeamIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OPTS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.opts = new IndexOpts();
                struct.opts.read(iprot);
                struct.setOptsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, index_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.teamId != null) {
          oprot.writeFieldBegin(TEAM_ID_FIELD_DESC);
          oprot.writeString(struct.teamId);
          oprot.writeFieldEnd();
        }
        if (struct.opts != null) {
          oprot.writeFieldBegin(OPTS_FIELD_DESC);
          struct.opts.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class index_result implements org.apache.thrift.TBase<index_result, index_result._Fields>, java.io.Serializable, Cloneable, Comparable<index_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("index_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new index_resultStandardSchemeFactory());
    }

    public List<JobTemplate> success; // required
    public com.wi.director.thrift.v1.common.SystemException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JobTemplate.class))));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(index_result.class, metaDataMap);
    }

    public index_result() {
    }

    public index_result(
      List<JobTemplate> success,
      com.wi.director.thrift.v1.common.SystemException err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public index_result(index_result other) {
      if (other.isSetSuccess()) {
        List<JobTemplate> __this__success = new ArrayList<JobTemplate>(other.success.size());
        for (JobTemplate other_element : other.success) {
          __this__success.add(new JobTemplate(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetErr()) {
        this.err = new com.wi.director.thrift.v1.common.SystemException(other.err);
      }
    }

    public index_result deepCopy() {
      return new index_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<JobTemplate> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(JobTemplate elem) {
      if (this.success == null) {
        this.success = new ArrayList<JobTemplate>();
      }
      this.success.add(elem);
    }

    public List<JobTemplate> getSuccess() {
      return this.success;
    }

    public index_result setSuccess(List<JobTemplate> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.wi.director.thrift.v1.common.SystemException getErr() {
      return this.err;
    }

    public index_result setErr(com.wi.director.thrift.v1.common.SystemException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<JobTemplate>)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((com.wi.director.thrift.v1.common.SystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof index_result)
        return this.equals((index_result)that);
      return false;
    }

    public boolean equals(index_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(index_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("index_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class index_resultStandardSchemeFactory implements SchemeFactory {
      public index_resultStandardScheme getScheme() {
        return new index_resultStandardScheme();
      }
    }

    private static class index_resultStandardScheme extends StandardScheme<index_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, index_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list77 = iprot.readListBegin();
                  struct.success = new ArrayList<JobTemplate>(_list77.size);
                  JobTemplate _elem78;
                  for (int _i79 = 0; _i79 < _list77.size; ++_i79)
                  {
                    _elem78 = new JobTemplate();
                    _elem78.read(iprot);
                    struct.success.add(_elem78);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new com.wi.director.thrift.v1.common.SystemException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, index_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (JobTemplate _iter80 : struct.success)
            {
              _iter80.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class get_args implements org.apache.thrift.TBase<get_args, get_args._Fields>, java.io.Serializable, Cloneable, Comparable<get_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_args");

    private static final org.apache.thrift.protocol.TField JOB_TEMPLATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("jobTemplateId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_argsStandardSchemeFactory());
    }

    public String jobTemplateId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      JOB_TEMPLATE_ID((short)1, "jobTemplateId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // JOB_TEMPLATE_ID
            return JOB_TEMPLATE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.JOB_TEMPLATE_ID, new org.apache.thrift.meta_data.FieldMetaData("jobTemplateId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_args.class, metaDataMap);
    }

    public get_args() {
    }

    public get_args(
      String jobTemplateId)
    {
      this();
      this.jobTemplateId = jobTemplateId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_args(get_args other) {
      if (other.isSetJobTemplateId()) {
        this.jobTemplateId = other.jobTemplateId;
      }
    }

    public get_args deepCopy() {
      return new get_args(this);
    }

    @Override
    public void clear() {
      this.jobTemplateId = null;
    }

    public String getJobTemplateId() {
      return this.jobTemplateId;
    }

    public get_args setJobTemplateId(String jobTemplateId) {
      this.jobTemplateId = jobTemplateId;
      return this;
    }

    public void unsetJobTemplateId() {
      this.jobTemplateId = null;
    }

    /** Returns true if field jobTemplateId is set (has been assigned a value) and false otherwise */
    public boolean isSetJobTemplateId() {
      return this.jobTemplateId != null;
    }

    public void setJobTemplateIdIsSet(boolean value) {
      if (!value) {
        this.jobTemplateId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case JOB_TEMPLATE_ID:
        if (value == null) {
          unsetJobTemplateId();
        } else {
          setJobTemplateId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case JOB_TEMPLATE_ID:
        return getJobTemplateId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case JOB_TEMPLATE_ID:
        return isSetJobTemplateId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_args)
        return this.equals((get_args)that);
      return false;
    }

    public boolean equals(get_args that) {
      if (that == null)
        return false;

      boolean this_present_jobTemplateId = true && this.isSetJobTemplateId();
      boolean that_present_jobTemplateId = true && that.isSetJobTemplateId();
      if (this_present_jobTemplateId || that_present_jobTemplateId) {
        if (!(this_present_jobTemplateId && that_present_jobTemplateId))
          return false;
        if (!this.jobTemplateId.equals(that.jobTemplateId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_jobTemplateId = true && (isSetJobTemplateId());
      list.add(present_jobTemplateId);
      if (present_jobTemplateId)
        list.add(jobTemplateId);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetJobTemplateId()).compareTo(other.isSetJobTemplateId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJobTemplateId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobTemplateId, other.jobTemplateId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_args(");
      boolean first = true;

      sb.append("jobTemplateId:");
      if (this.jobTemplateId == null) {
        sb.append("null");
      } else {
        sb.append(this.jobTemplateId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_argsStandardSchemeFactory implements SchemeFactory {
      public get_argsStandardScheme getScheme() {
        return new get_argsStandardScheme();
      }
    }

    private static class get_argsStandardScheme extends StandardScheme<get_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // JOB_TEMPLATE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jobTemplateId = iprot.readString();
                struct.setJobTemplateIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.jobTemplateId != null) {
          oprot.writeFieldBegin(JOB_TEMPLATE_ID_FIELD_DESC);
          oprot.writeString(struct.jobTemplateId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class get_result implements org.apache.thrift.TBase<get_result, get_result._Fields>, java.io.Serializable, Cloneable, Comparable<get_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_resultStandardSchemeFactory());
    }

    public JobTemplate success; // required
    public com.wi.director.thrift.v1.common.SystemException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JobTemplate.class)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_result.class, metaDataMap);
    }

    public get_result() {
    }

    public get_result(
      JobTemplate success,
      com.wi.director.thrift.v1.common.SystemException err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_result(get_result other) {
      if (other.isSetSuccess()) {
        this.success = new JobTemplate(other.success);
      }
      if (other.isSetErr()) {
        this.err = new com.wi.director.thrift.v1.common.SystemException(other.err);
      }
    }

    public get_result deepCopy() {
      return new get_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public JobTemplate getSuccess() {
      return this.success;
    }

    public get_result setSuccess(JobTemplate success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.wi.director.thrift.v1.common.SystemException getErr() {
      return this.err;
    }

    public get_result setErr(com.wi.director.thrift.v1.common.SystemException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((JobTemplate)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((com.wi.director.thrift.v1.common.SystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_result)
        return this.equals((get_result)that);
      return false;
    }

    public boolean equals(get_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_resultStandardSchemeFactory implements SchemeFactory {
      public get_resultStandardScheme getScheme() {
        return new get_resultStandardScheme();
      }
    }

    private static class get_resultStandardScheme extends StandardScheme<get_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new JobTemplate();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new com.wi.director.thrift.v1.common.SystemException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class query_args implements org.apache.thrift.TBase<query_args, query_args._Fields>, java.io.Serializable, Cloneable, Comparable<query_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("query_args");

    private static final org.apache.thrift.protocol.TField SELECT_OPTS_FIELD_DESC = new org.apache.thrift.protocol.TField("selectOpts", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField WHERE_OPTS_FIELD_DESC = new org.apache.thrift.protocol.TField("whereOpts", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("order", org.apache.thrift.protocol.TType.LIST, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new query_argsStandardSchemeFactory());
    }

    public TemplateSelectOpts selectOpts; // required
    public TemplateWhereOpts whereOpts; // required
    public List<TemplateOrder> order; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SELECT_OPTS((short)1, "selectOpts"),
      WHERE_OPTS((short)2, "whereOpts"),
      ORDER((short)3, "order");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SELECT_OPTS
            return SELECT_OPTS;
          case 2: // WHERE_OPTS
            return WHERE_OPTS;
          case 3: // ORDER
            return ORDER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SELECT_OPTS, new org.apache.thrift.meta_data.FieldMetaData("selectOpts", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TemplateSelectOpts.class)));
      tmpMap.put(_Fields.WHERE_OPTS, new org.apache.thrift.meta_data.FieldMetaData("whereOpts", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TemplateWhereOpts.class)));
      tmpMap.put(_Fields.ORDER, new org.apache.thrift.meta_data.FieldMetaData("order", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TemplateOrder.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(query_args.class, metaDataMap);
    }

    public query_args() {
    }

    public query_args(
      TemplateSelectOpts selectOpts,
      TemplateWhereOpts whereOpts,
      List<TemplateOrder> order)
    {
      this();
      this.selectOpts = selectOpts;
      this.whereOpts = whereOpts;
      this.order = order;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public query_args(query_args other) {
      if (other.isSetSelectOpts()) {
        this.selectOpts = new TemplateSelectOpts(other.selectOpts);
      }
      if (other.isSetWhereOpts()) {
        this.whereOpts = new TemplateWhereOpts(other.whereOpts);
      }
      if (other.isSetOrder()) {
        List<TemplateOrder> __this__order = new ArrayList<TemplateOrder>(other.order.size());
        for (TemplateOrder other_element : other.order) {
          __this__order.add(new TemplateOrder(other_element));
        }
        this.order = __this__order;
      }
    }

    public query_args deepCopy() {
      return new query_args(this);
    }

    @Override
    public void clear() {
      this.selectOpts = null;
      this.whereOpts = null;
      this.order = null;
    }

    public TemplateSelectOpts getSelectOpts() {
      return this.selectOpts;
    }

    public query_args setSelectOpts(TemplateSelectOpts selectOpts) {
      this.selectOpts = selectOpts;
      return this;
    }

    public void unsetSelectOpts() {
      this.selectOpts = null;
    }

    /** Returns true if field selectOpts is set (has been assigned a value) and false otherwise */
    public boolean isSetSelectOpts() {
      return this.selectOpts != null;
    }

    public void setSelectOptsIsSet(boolean value) {
      if (!value) {
        this.selectOpts = null;
      }
    }

    public TemplateWhereOpts getWhereOpts() {
      return this.whereOpts;
    }

    public query_args setWhereOpts(TemplateWhereOpts whereOpts) {
      this.whereOpts = whereOpts;
      return this;
    }

    public void unsetWhereOpts() {
      this.whereOpts = null;
    }

    /** Returns true if field whereOpts is set (has been assigned a value) and false otherwise */
    public boolean isSetWhereOpts() {
      return this.whereOpts != null;
    }

    public void setWhereOptsIsSet(boolean value) {
      if (!value) {
        this.whereOpts = null;
      }
    }

    public int getOrderSize() {
      return (this.order == null) ? 0 : this.order.size();
    }

    public java.util.Iterator<TemplateOrder> getOrderIterator() {
      return (this.order == null) ? null : this.order.iterator();
    }

    public void addToOrder(TemplateOrder elem) {
      if (this.order == null) {
        this.order = new ArrayList<TemplateOrder>();
      }
      this.order.add(elem);
    }

    public List<TemplateOrder> getOrder() {
      return this.order;
    }

    public query_args setOrder(List<TemplateOrder> order) {
      this.order = order;
      return this;
    }

    public void unsetOrder() {
      this.order = null;
    }

    /** Returns true if field order is set (has been assigned a value) and false otherwise */
    public boolean isSetOrder() {
      return this.order != null;
    }

    public void setOrderIsSet(boolean value) {
      if (!value) {
        this.order = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SELECT_OPTS:
        if (value == null) {
          unsetSelectOpts();
        } else {
          setSelectOpts((TemplateSelectOpts)value);
        }
        break;

      case WHERE_OPTS:
        if (value == null) {
          unsetWhereOpts();
        } else {
          setWhereOpts((TemplateWhereOpts)value);
        }
        break;

      case ORDER:
        if (value == null) {
          unsetOrder();
        } else {
          setOrder((List<TemplateOrder>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SELECT_OPTS:
        return getSelectOpts();

      case WHERE_OPTS:
        return getWhereOpts();

      case ORDER:
        return getOrder();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SELECT_OPTS:
        return isSetSelectOpts();
      case WHERE_OPTS:
        return isSetWhereOpts();
      case ORDER:
        return isSetOrder();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof query_args)
        return this.equals((query_args)that);
      return false;
    }

    public boolean equals(query_args that) {
      if (that == null)
        return false;

      boolean this_present_selectOpts = true && this.isSetSelectOpts();
      boolean that_present_selectOpts = true && that.isSetSelectOpts();
      if (this_present_selectOpts || that_present_selectOpts) {
        if (!(this_present_selectOpts && that_present_selectOpts))
          return false;
        if (!this.selectOpts.equals(that.selectOpts))
          return false;
      }

      boolean this_present_whereOpts = true && this.isSetWhereOpts();
      boolean that_present_whereOpts = true && that.isSetWhereOpts();
      if (this_present_whereOpts || that_present_whereOpts) {
        if (!(this_present_whereOpts && that_present_whereOpts))
          return false;
        if (!this.whereOpts.equals(that.whereOpts))
          return false;
      }

      boolean this_present_order = true && this.isSetOrder();
      boolean that_present_order = true && that.isSetOrder();
      if (this_present_order || that_present_order) {
        if (!(this_present_order && that_present_order))
          return false;
        if (!this.order.equals(that.order))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_selectOpts = true && (isSetSelectOpts());
      list.add(present_selectOpts);
      if (present_selectOpts)
        list.add(selectOpts);

      boolean present_whereOpts = true && (isSetWhereOpts());
      list.add(present_whereOpts);
      if (present_whereOpts)
        list.add(whereOpts);

      boolean present_order = true && (isSetOrder());
      list.add(present_order);
      if (present_order)
        list.add(order);

      return list.hashCode();
    }

    @Override
    public int compareTo(query_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSelectOpts()).compareTo(other.isSetSelectOpts());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSelectOpts()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.selectOpts, other.selectOpts);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetWhereOpts()).compareTo(other.isSetWhereOpts());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWhereOpts()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.whereOpts, other.whereOpts);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOrder()).compareTo(other.isSetOrder());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrder()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.order, other.order);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("query_args(");
      boolean first = true;

      sb.append("selectOpts:");
      if (this.selectOpts == null) {
        sb.append("null");
      } else {
        sb.append(this.selectOpts);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("whereOpts:");
      if (this.whereOpts == null) {
        sb.append("null");
      } else {
        sb.append(this.whereOpts);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("order:");
      if (this.order == null) {
        sb.append("null");
      } else {
        sb.append(this.order);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (selectOpts != null) {
        selectOpts.validate();
      }
      if (whereOpts != null) {
        whereOpts.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class query_argsStandardSchemeFactory implements SchemeFactory {
      public query_argsStandardScheme getScheme() {
        return new query_argsStandardScheme();
      }
    }

    private static class query_argsStandardScheme extends StandardScheme<query_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, query_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SELECT_OPTS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.selectOpts = new TemplateSelectOpts();
                struct.selectOpts.read(iprot);
                struct.setSelectOptsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // WHERE_OPTS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.whereOpts = new TemplateWhereOpts();
                struct.whereOpts.read(iprot);
                struct.setWhereOptsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ORDER
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list81 = iprot.readListBegin();
                  struct.order = new ArrayList<TemplateOrder>(_list81.size);
                  TemplateOrder _elem82;
                  for (int _i83 = 0; _i83 < _list81.size; ++_i83)
                  {
                    _elem82 = new TemplateOrder();
                    _elem82.read(iprot);
                    struct.order.add(_elem82);
                  }
                  iprot.readListEnd();
                }
                struct.setOrderIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, query_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.selectOpts != null) {
          oprot.writeFieldBegin(SELECT_OPTS_FIELD_DESC);
          struct.selectOpts.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.whereOpts != null) {
          oprot.writeFieldBegin(WHERE_OPTS_FIELD_DESC);
          struct.whereOpts.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.order != null) {
          oprot.writeFieldBegin(ORDER_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.order.size()));
            for (TemplateOrder _iter84 : struct.order)
            {
              _iter84.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class query_result implements org.apache.thrift.TBase<query_result, query_result._Fields>, java.io.Serializable, Cloneable, Comparable<query_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("query_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new query_resultStandardSchemeFactory());
    }

    public TemplateQueryResult success; // required
    public com.wi.director.thrift.v1.common.SystemException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TemplateQueryResult.class)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(query_result.class, metaDataMap);
    }

    public query_result() {
    }

    public query_result(
      TemplateQueryResult success,
      com.wi.director.thrift.v1.common.SystemException err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public query_result(query_result other) {
      if (other.isSetSuccess()) {
        this.success = new TemplateQueryResult(other.success);
      }
      if (other.isSetErr()) {
        this.err = new com.wi.director.thrift.v1.common.SystemException(other.err);
      }
    }

    public query_result deepCopy() {
      return new query_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public TemplateQueryResult getSuccess() {
      return this.success;
    }

    public query_result setSuccess(TemplateQueryResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.wi.director.thrift.v1.common.SystemException getErr() {
      return this.err;
    }

    public query_result setErr(com.wi.director.thrift.v1.common.SystemException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TemplateQueryResult)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((com.wi.director.thrift.v1.common.SystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof query_result)
        return this.equals((query_result)that);
      return false;
    }

    public boolean equals(query_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(query_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("query_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class query_resultStandardSchemeFactory implements SchemeFactory {
      public query_resultStandardScheme getScheme() {
        return new query_resultStandardScheme();
      }
    }

    private static class query_resultStandardScheme extends StandardScheme<query_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, query_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TemplateQueryResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new com.wi.director.thrift.v1.common.SystemException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, query_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class fetch_args implements org.apache.thrift.TBase<fetch_args, fetch_args._Fields>, java.io.Serializable, Cloneable, Comparable<fetch_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fetch_args");

    private static final org.apache.thrift.protocol.TField SELECT_OPTS_FIELD_DESC = new org.apache.thrift.protocol.TField("selectOpts", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TEMPLATE_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("templateIds", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new fetch_argsStandardSchemeFactory());
    }

    public TemplateSelectOpts selectOpts; // required
    public List<String> templateIds; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SELECT_OPTS((short)1, "selectOpts"),
      TEMPLATE_IDS((short)2, "templateIds");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SELECT_OPTS
            return SELECT_OPTS;
          case 2: // TEMPLATE_IDS
            return TEMPLATE_IDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SELECT_OPTS, new org.apache.thrift.meta_data.FieldMetaData("selectOpts", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TemplateSelectOpts.class)));
      tmpMap.put(_Fields.TEMPLATE_IDS, new org.apache.thrift.meta_data.FieldMetaData("templateIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fetch_args.class, metaDataMap);
    }

    public fetch_args() {
    }

    public fetch_args(
      TemplateSelectOpts selectOpts,
      List<String> templateIds)
    {
      this();
      this.selectOpts = selectOpts;
      this.templateIds = templateIds;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fetch_args(fetch_args other) {
      if (other.isSetSelectOpts()) {
        this.selectOpts = new TemplateSelectOpts(other.selectOpts);
      }
      if (other.isSetTemplateIds()) {
        List<String> __this__templateIds = new ArrayList<String>(other.templateIds);
        this.templateIds = __this__templateIds;
      }
    }

    public fetch_args deepCopy() {
      return new fetch_args(this);
    }

    @Override
    public void clear() {
      this.selectOpts = null;
      this.templateIds = null;
    }

    public TemplateSelectOpts getSelectOpts() {
      return this.selectOpts;
    }

    public fetch_args setSelectOpts(TemplateSelectOpts selectOpts) {
      this.selectOpts = selectOpts;
      return this;
    }

    public void unsetSelectOpts() {
      this.selectOpts = null;
    }

    /** Returns true if field selectOpts is set (has been assigned a value) and false otherwise */
    public boolean isSetSelectOpts() {
      return this.selectOpts != null;
    }

    public void setSelectOptsIsSet(boolean value) {
      if (!value) {
        this.selectOpts = null;
      }
    }

    public int getTemplateIdsSize() {
      return (this.templateIds == null) ? 0 : this.templateIds.size();
    }

    public java.util.Iterator<String> getTemplateIdsIterator() {
      return (this.templateIds == null) ? null : this.templateIds.iterator();
    }

    public void addToTemplateIds(String elem) {
      if (this.templateIds == null) {
        this.templateIds = new ArrayList<String>();
      }
      this.templateIds.add(elem);
    }

    public List<String> getTemplateIds() {
      return this.templateIds;
    }

    public fetch_args setTemplateIds(List<String> templateIds) {
      this.templateIds = templateIds;
      return this;
    }

    public void unsetTemplateIds() {
      this.templateIds = null;
    }

    /** Returns true if field templateIds is set (has been assigned a value) and false otherwise */
    public boolean isSetTemplateIds() {
      return this.templateIds != null;
    }

    public void setTemplateIdsIsSet(boolean value) {
      if (!value) {
        this.templateIds = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SELECT_OPTS:
        if (value == null) {
          unsetSelectOpts();
        } else {
          setSelectOpts((TemplateSelectOpts)value);
        }
        break;

      case TEMPLATE_IDS:
        if (value == null) {
          unsetTemplateIds();
        } else {
          setTemplateIds((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SELECT_OPTS:
        return getSelectOpts();

      case TEMPLATE_IDS:
        return getTemplateIds();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SELECT_OPTS:
        return isSetSelectOpts();
      case TEMPLATE_IDS:
        return isSetTemplateIds();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof fetch_args)
        return this.equals((fetch_args)that);
      return false;
    }

    public boolean equals(fetch_args that) {
      if (that == null)
        return false;

      boolean this_present_selectOpts = true && this.isSetSelectOpts();
      boolean that_present_selectOpts = true && that.isSetSelectOpts();
      if (this_present_selectOpts || that_present_selectOpts) {
        if (!(this_present_selectOpts && that_present_selectOpts))
          return false;
        if (!this.selectOpts.equals(that.selectOpts))
          return false;
      }

      boolean this_present_templateIds = true && this.isSetTemplateIds();
      boolean that_present_templateIds = true && that.isSetTemplateIds();
      if (this_present_templateIds || that_present_templateIds) {
        if (!(this_present_templateIds && that_present_templateIds))
          return false;
        if (!this.templateIds.equals(that.templateIds))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_selectOpts = true && (isSetSelectOpts());
      list.add(present_selectOpts);
      if (present_selectOpts)
        list.add(selectOpts);

      boolean present_templateIds = true && (isSetTemplateIds());
      list.add(present_templateIds);
      if (present_templateIds)
        list.add(templateIds);

      return list.hashCode();
    }

    @Override
    public int compareTo(fetch_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSelectOpts()).compareTo(other.isSetSelectOpts());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSelectOpts()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.selectOpts, other.selectOpts);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTemplateIds()).compareTo(other.isSetTemplateIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTemplateIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.templateIds, other.templateIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("fetch_args(");
      boolean first = true;

      sb.append("selectOpts:");
      if (this.selectOpts == null) {
        sb.append("null");
      } else {
        sb.append(this.selectOpts);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("templateIds:");
      if (this.templateIds == null) {
        sb.append("null");
      } else {
        sb.append(this.templateIds);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (selectOpts != null) {
        selectOpts.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fetch_argsStandardSchemeFactory implements SchemeFactory {
      public fetch_argsStandardScheme getScheme() {
        return new fetch_argsStandardScheme();
      }
    }

    private static class fetch_argsStandardScheme extends StandardScheme<fetch_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fetch_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SELECT_OPTS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.selectOpts = new TemplateSelectOpts();
                struct.selectOpts.read(iprot);
                struct.setSelectOptsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TEMPLATE_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list85 = iprot.readListBegin();
                  struct.templateIds = new ArrayList<String>(_list85.size);
                  String _elem86;
                  for (int _i87 = 0; _i87 < _list85.size; ++_i87)
                  {
                    _elem86 = iprot.readString();
                    struct.templateIds.add(_elem86);
                  }
                  iprot.readListEnd();
                }
                struct.setTemplateIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fetch_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.selectOpts != null) {
          oprot.writeFieldBegin(SELECT_OPTS_FIELD_DESC);
          struct.selectOpts.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.templateIds != null) {
          oprot.writeFieldBegin(TEMPLATE_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.templateIds.size()));
            for (String _iter88 : struct.templateIds)
            {
              oprot.writeString(_iter88);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class fetch_result implements org.apache.thrift.TBase<fetch_result, fetch_result._Fields>, java.io.Serializable, Cloneable, Comparable<fetch_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fetch_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new fetch_resultStandardSchemeFactory());
    }

    public Map<String,TemplateFetchResult> success; // required
    public com.wi.director.thrift.v1.common.SystemException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TemplateFetchResult.class))));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fetch_result.class, metaDataMap);
    }

    public fetch_result() {
    }

    public fetch_result(
      Map<String,TemplateFetchResult> success,
      com.wi.director.thrift.v1.common.SystemException err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fetch_result(fetch_result other) {
      if (other.isSetSuccess()) {
        Map<String,TemplateFetchResult> __this__success = new HashMap<String,TemplateFetchResult>(other.success.size());
        for (Map.Entry<String, TemplateFetchResult> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          TemplateFetchResult other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          TemplateFetchResult __this__success_copy_value = new TemplateFetchResult(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
      if (other.isSetErr()) {
        this.err = new com.wi.director.thrift.v1.common.SystemException(other.err);
      }
    }

    public fetch_result deepCopy() {
      return new fetch_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, TemplateFetchResult val) {
      if (this.success == null) {
        this.success = new HashMap<String,TemplateFetchResult>();
      }
      this.success.put(key, val);
    }

    public Map<String,TemplateFetchResult> getSuccess() {
      return this.success;
    }

    public fetch_result setSuccess(Map<String,TemplateFetchResult> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.wi.director.thrift.v1.common.SystemException getErr() {
      return this.err;
    }

    public fetch_result setErr(com.wi.director.thrift.v1.common.SystemException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,TemplateFetchResult>)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((com.wi.director.thrift.v1.common.SystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof fetch_result)
        return this.equals((fetch_result)that);
      return false;
    }

    public boolean equals(fetch_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(fetch_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("fetch_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fetch_resultStandardSchemeFactory implements SchemeFactory {
      public fetch_resultStandardScheme getScheme() {
        return new fetch_resultStandardScheme();
      }
    }

    private static class fetch_resultStandardScheme extends StandardScheme<fetch_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fetch_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map89 = iprot.readMapBegin();
                  struct.success = new HashMap<String,TemplateFetchResult>(2*_map89.size);
                  String _key90;
                  TemplateFetchResult _val91;
                  for (int _i92 = 0; _i92 < _map89.size; ++_i92)
                  {
                    _key90 = iprot.readString();
                    _val91 = new TemplateFetchResult();
                    _val91.read(iprot);
                    struct.success.put(_key90, _val91);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new com.wi.director.thrift.v1.common.SystemException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fetch_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Map.Entry<String, TemplateFetchResult> _iter93 : struct.success.entrySet())
            {
              oprot.writeString(_iter93.getKey());
              _iter93.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class create_args implements org.apache.thrift.TBase<create_args, create_args._Fields>, java.io.Serializable, Cloneable, Comparable<create_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("create_args");

    private static final org.apache.thrift.protocol.TField TEAM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("teamId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ATTRIBUTES_FIELD_DESC = new org.apache.thrift.protocol.TField("attributes", org.apache.thrift.protocol.TType.LIST, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new create_argsStandardSchemeFactory());
    }

    public String teamId; // required
    public JobTemplateParams params; // required
    public List<com.wi.director.thrift.v1.abac.AbacAttribute> attributes; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TEAM_ID((short)1, "teamId"),
      PARAMS((short)2, "params"),
      ATTRIBUTES((short)3, "attributes");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TEAM_ID
            return TEAM_ID;
          case 2: // PARAMS
            return PARAMS;
          case 3: // ATTRIBUTES
            return ATTRIBUTES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TEAM_ID, new org.apache.thrift.meta_data.FieldMetaData("teamId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JobTemplateParams.class)));
      tmpMap.put(_Fields.ATTRIBUTES, new org.apache.thrift.meta_data.FieldMetaData("attributes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.abac.AbacAttribute.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(create_args.class, metaDataMap);
    }

    public create_args() {
    }

    public create_args(
      String teamId,
      JobTemplateParams params,
      List<com.wi.director.thrift.v1.abac.AbacAttribute> attributes)
    {
      this();
      this.teamId = teamId;
      this.params = params;
      this.attributes = attributes;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public create_args(create_args other) {
      if (other.isSetTeamId()) {
        this.teamId = other.teamId;
      }
      if (other.isSetParams()) {
        this.params = new JobTemplateParams(other.params);
      }
      if (other.isSetAttributes()) {
        List<com.wi.director.thrift.v1.abac.AbacAttribute> __this__attributes = new ArrayList<com.wi.director.thrift.v1.abac.AbacAttribute>(other.attributes.size());
        for (com.wi.director.thrift.v1.abac.AbacAttribute other_element : other.attributes) {
          __this__attributes.add(new com.wi.director.thrift.v1.abac.AbacAttribute(other_element));
        }
        this.attributes = __this__attributes;
      }
    }

    public create_args deepCopy() {
      return new create_args(this);
    }

    @Override
    public void clear() {
      this.teamId = null;
      this.params = null;
      this.attributes = null;
    }

    public String getTeamId() {
      return this.teamId;
    }

    public create_args setTeamId(String teamId) {
      this.teamId = teamId;
      return this;
    }

    public void unsetTeamId() {
      this.teamId = null;
    }

    /** Returns true if field teamId is set (has been assigned a value) and false otherwise */
    public boolean isSetTeamId() {
      return this.teamId != null;
    }

    public void setTeamIdIsSet(boolean value) {
      if (!value) {
        this.teamId = null;
      }
    }

    public JobTemplateParams getParams() {
      return this.params;
    }

    public create_args setParams(JobTemplateParams params) {
      this.params = params;
      return this;
    }

    public void unsetParams() {
      this.params = null;
    }

    /** Returns true if field params is set (has been assigned a value) and false otherwise */
    public boolean isSetParams() {
      return this.params != null;
    }

    public void setParamsIsSet(boolean value) {
      if (!value) {
        this.params = null;
      }
    }

    public int getAttributesSize() {
      return (this.attributes == null) ? 0 : this.attributes.size();
    }

    public java.util.Iterator<com.wi.director.thrift.v1.abac.AbacAttribute> getAttributesIterator() {
      return (this.attributes == null) ? null : this.attributes.iterator();
    }

    public void addToAttributes(com.wi.director.thrift.v1.abac.AbacAttribute elem) {
      if (this.attributes == null) {
        this.attributes = new ArrayList<com.wi.director.thrift.v1.abac.AbacAttribute>();
      }
      this.attributes.add(elem);
    }

    public List<com.wi.director.thrift.v1.abac.AbacAttribute> getAttributes() {
      return this.attributes;
    }

    public create_args setAttributes(List<com.wi.director.thrift.v1.abac.AbacAttribute> attributes) {
      this.attributes = attributes;
      return this;
    }

    public void unsetAttributes() {
      this.attributes = null;
    }

    /** Returns true if field attributes is set (has been assigned a value) and false otherwise */
    public boolean isSetAttributes() {
      return this.attributes != null;
    }

    public void setAttributesIsSet(boolean value) {
      if (!value) {
        this.attributes = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TEAM_ID:
        if (value == null) {
          unsetTeamId();
        } else {
          setTeamId((String)value);
        }
        break;

      case PARAMS:
        if (value == null) {
          unsetParams();
        } else {
          setParams((JobTemplateParams)value);
        }
        break;

      case ATTRIBUTES:
        if (value == null) {
          unsetAttributes();
        } else {
          setAttributes((List<com.wi.director.thrift.v1.abac.AbacAttribute>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TEAM_ID:
        return getTeamId();

      case PARAMS:
        return getParams();

      case ATTRIBUTES:
        return getAttributes();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TEAM_ID:
        return isSetTeamId();
      case PARAMS:
        return isSetParams();
      case ATTRIBUTES:
        return isSetAttributes();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof create_args)
        return this.equals((create_args)that);
      return false;
    }

    public boolean equals(create_args that) {
      if (that == null)
        return false;

      boolean this_present_teamId = true && this.isSetTeamId();
      boolean that_present_teamId = true && that.isSetTeamId();
      if (this_present_teamId || that_present_teamId) {
        if (!(this_present_teamId && that_present_teamId))
          return false;
        if (!this.teamId.equals(that.teamId))
          return false;
      }

      boolean this_present_params = true && this.isSetParams();
      boolean that_present_params = true && that.isSetParams();
      if (this_present_params || that_present_params) {
        if (!(this_present_params && that_present_params))
          return false;
        if (!this.params.equals(that.params))
          return false;
      }

      boolean this_present_attributes = true && this.isSetAttributes();
      boolean that_present_attributes = true && that.isSetAttributes();
      if (this_present_attributes || that_present_attributes) {
        if (!(this_present_attributes && that_present_attributes))
          return false;
        if (!this.attributes.equals(that.attributes))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_teamId = true && (isSetTeamId());
      list.add(present_teamId);
      if (present_teamId)
        list.add(teamId);

      boolean present_params = true && (isSetParams());
      list.add(present_params);
      if (present_params)
        list.add(params);

      boolean present_attributes = true && (isSetAttributes());
      list.add(present_attributes);
      if (present_attributes)
        list.add(attributes);

      return list.hashCode();
    }

    @Override
    public int compareTo(create_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTeamId()).compareTo(other.isSetTeamId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTeamId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teamId, other.teamId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParams()).compareTo(other.isSetParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, other.params);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAttributes()).compareTo(other.isSetAttributes());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttributes()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attributes, other.attributes);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("create_args(");
      boolean first = true;

      sb.append("teamId:");
      if (this.teamId == null) {
        sb.append("null");
      } else {
        sb.append(this.teamId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("params:");
      if (this.params == null) {
        sb.append("null");
      } else {
        sb.append(this.params);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("attributes:");
      if (this.attributes == null) {
        sb.append("null");
      } else {
        sb.append(this.attributes);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (params != null) {
        params.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class create_argsStandardSchemeFactory implements SchemeFactory {
      public create_argsStandardScheme getScheme() {
        return new create_argsStandardScheme();
      }
    }

    private static class create_argsStandardScheme extends StandardScheme<create_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, create_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TEAM_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.teamId = iprot.readString();
                struct.setTeamIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.params = new JobTemplateParams();
                struct.params.read(iprot);
                struct.setParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ATTRIBUTES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list94 = iprot.readListBegin();
                  struct.attributes = new ArrayList<com.wi.director.thrift.v1.abac.AbacAttribute>(_list94.size);
                  com.wi.director.thrift.v1.abac.AbacAttribute _elem95;
                  for (int _i96 = 0; _i96 < _list94.size; ++_i96)
                  {
                    _elem95 = new com.wi.director.thrift.v1.abac.AbacAttribute();
                    _elem95.read(iprot);
                    struct.attributes.add(_elem95);
                  }
                  iprot.readListEnd();
                }
                struct.setAttributesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, create_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.teamId != null) {
          oprot.writeFieldBegin(TEAM_ID_FIELD_DESC);
          oprot.writeString(struct.teamId);
          oprot.writeFieldEnd();
        }
        if (struct.params != null) {
          oprot.writeFieldBegin(PARAMS_FIELD_DESC);
          struct.params.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.attributes != null) {
          oprot.writeFieldBegin(ATTRIBUTES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.attributes.size()));
            for (com.wi.director.thrift.v1.abac.AbacAttribute _iter97 : struct.attributes)
            {
              _iter97.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class create_result implements org.apache.thrift.TBase<create_result, create_result._Fields>, java.io.Serializable, Cloneable, Comparable<create_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("create_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new create_resultStandardSchemeFactory());
    }

    public JobTemplate success; // required
    public com.wi.director.thrift.v1.common.SystemException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JobTemplate.class)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(create_result.class, metaDataMap);
    }

    public create_result() {
    }

    public create_result(
      JobTemplate success,
      com.wi.director.thrift.v1.common.SystemException err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public create_result(create_result other) {
      if (other.isSetSuccess()) {
        this.success = new JobTemplate(other.success);
      }
      if (other.isSetErr()) {
        this.err = new com.wi.director.thrift.v1.common.SystemException(other.err);
      }
    }

    public create_result deepCopy() {
      return new create_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public JobTemplate getSuccess() {
      return this.success;
    }

    public create_result setSuccess(JobTemplate success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.wi.director.thrift.v1.common.SystemException getErr() {
      return this.err;
    }

    public create_result setErr(com.wi.director.thrift.v1.common.SystemException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((JobTemplate)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((com.wi.director.thrift.v1.common.SystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof create_result)
        return this.equals((create_result)that);
      return false;
    }

    public boolean equals(create_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(create_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("create_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class create_resultStandardSchemeFactory implements SchemeFactory {
      public create_resultStandardScheme getScheme() {
        return new create_resultStandardScheme();
      }
    }

    private static class create_resultStandardScheme extends StandardScheme<create_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, create_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new JobTemplate();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new com.wi.director.thrift.v1.common.SystemException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, create_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class update_args implements org.apache.thrift.TBase<update_args, update_args._Fields>, java.io.Serializable, Cloneable, Comparable<update_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("update_args");

    private static final org.apache.thrift.protocol.TField JOB_TEMPLATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("jobTemplateId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new update_argsStandardSchemeFactory());
    }

    public String jobTemplateId; // required
    public JobTemplateParams params; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      JOB_TEMPLATE_ID((short)1, "jobTemplateId"),
      PARAMS((short)2, "params");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // JOB_TEMPLATE_ID
            return JOB_TEMPLATE_ID;
          case 2: // PARAMS
            return PARAMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.JOB_TEMPLATE_ID, new org.apache.thrift.meta_data.FieldMetaData("jobTemplateId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JobTemplateParams.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(update_args.class, metaDataMap);
    }

    public update_args() {
    }

    public update_args(
      String jobTemplateId,
      JobTemplateParams params)
    {
      this();
      this.jobTemplateId = jobTemplateId;
      this.params = params;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public update_args(update_args other) {
      if (other.isSetJobTemplateId()) {
        this.jobTemplateId = other.jobTemplateId;
      }
      if (other.isSetParams()) {
        this.params = new JobTemplateParams(other.params);
      }
    }

    public update_args deepCopy() {
      return new update_args(this);
    }

    @Override
    public void clear() {
      this.jobTemplateId = null;
      this.params = null;
    }

    public String getJobTemplateId() {
      return this.jobTemplateId;
    }

    public update_args setJobTemplateId(String jobTemplateId) {
      this.jobTemplateId = jobTemplateId;
      return this;
    }

    public void unsetJobTemplateId() {
      this.jobTemplateId = null;
    }

    /** Returns true if field jobTemplateId is set (has been assigned a value) and false otherwise */
    public boolean isSetJobTemplateId() {
      return this.jobTemplateId != null;
    }

    public void setJobTemplateIdIsSet(boolean value) {
      if (!value) {
        this.jobTemplateId = null;
      }
    }

    public JobTemplateParams getParams() {
      return this.params;
    }

    public update_args setParams(JobTemplateParams params) {
      this.params = params;
      return this;
    }

    public void unsetParams() {
      this.params = null;
    }

    /** Returns true if field params is set (has been assigned a value) and false otherwise */
    public boolean isSetParams() {
      return this.params != null;
    }

    public void setParamsIsSet(boolean value) {
      if (!value) {
        this.params = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case JOB_TEMPLATE_ID:
        if (value == null) {
          unsetJobTemplateId();
        } else {
          setJobTemplateId((String)value);
        }
        break;

      case PARAMS:
        if (value == null) {
          unsetParams();
        } else {
          setParams((JobTemplateParams)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case JOB_TEMPLATE_ID:
        return getJobTemplateId();

      case PARAMS:
        return getParams();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case JOB_TEMPLATE_ID:
        return isSetJobTemplateId();
      case PARAMS:
        return isSetParams();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof update_args)
        return this.equals((update_args)that);
      return false;
    }

    public boolean equals(update_args that) {
      if (that == null)
        return false;

      boolean this_present_jobTemplateId = true && this.isSetJobTemplateId();
      boolean that_present_jobTemplateId = true && that.isSetJobTemplateId();
      if (this_present_jobTemplateId || that_present_jobTemplateId) {
        if (!(this_present_jobTemplateId && that_present_jobTemplateId))
          return false;
        if (!this.jobTemplateId.equals(that.jobTemplateId))
          return false;
      }

      boolean this_present_params = true && this.isSetParams();
      boolean that_present_params = true && that.isSetParams();
      if (this_present_params || that_present_params) {
        if (!(this_present_params && that_present_params))
          return false;
        if (!this.params.equals(that.params))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_jobTemplateId = true && (isSetJobTemplateId());
      list.add(present_jobTemplateId);
      if (present_jobTemplateId)
        list.add(jobTemplateId);

      boolean present_params = true && (isSetParams());
      list.add(present_params);
      if (present_params)
        list.add(params);

      return list.hashCode();
    }

    @Override
    public int compareTo(update_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetJobTemplateId()).compareTo(other.isSetJobTemplateId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJobTemplateId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobTemplateId, other.jobTemplateId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParams()).compareTo(other.isSetParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, other.params);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("update_args(");
      boolean first = true;

      sb.append("jobTemplateId:");
      if (this.jobTemplateId == null) {
        sb.append("null");
      } else {
        sb.append(this.jobTemplateId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("params:");
      if (this.params == null) {
        sb.append("null");
      } else {
        sb.append(this.params);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (params != null) {
        params.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class update_argsStandardSchemeFactory implements SchemeFactory {
      public update_argsStandardScheme getScheme() {
        return new update_argsStandardScheme();
      }
    }

    private static class update_argsStandardScheme extends StandardScheme<update_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, update_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // JOB_TEMPLATE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jobTemplateId = iprot.readString();
                struct.setJobTemplateIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.params = new JobTemplateParams();
                struct.params.read(iprot);
                struct.setParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, update_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.jobTemplateId != null) {
          oprot.writeFieldBegin(JOB_TEMPLATE_ID_FIELD_DESC);
          oprot.writeString(struct.jobTemplateId);
          oprot.writeFieldEnd();
        }
        if (struct.params != null) {
          oprot.writeFieldBegin(PARAMS_FIELD_DESC);
          struct.params.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class update_result implements org.apache.thrift.TBase<update_result, update_result._Fields>, java.io.Serializable, Cloneable, Comparable<update_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("update_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new update_resultStandardSchemeFactory());
    }

    public JobTemplate success; // required
    public com.wi.director.thrift.v1.common.SystemException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JobTemplate.class)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(update_result.class, metaDataMap);
    }

    public update_result() {
    }

    public update_result(
      JobTemplate success,
      com.wi.director.thrift.v1.common.SystemException err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public update_result(update_result other) {
      if (other.isSetSuccess()) {
        this.success = new JobTemplate(other.success);
      }
      if (other.isSetErr()) {
        this.err = new com.wi.director.thrift.v1.common.SystemException(other.err);
      }
    }

    public update_result deepCopy() {
      return new update_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public JobTemplate getSuccess() {
      return this.success;
    }

    public update_result setSuccess(JobTemplate success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.wi.director.thrift.v1.common.SystemException getErr() {
      return this.err;
    }

    public update_result setErr(com.wi.director.thrift.v1.common.SystemException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((JobTemplate)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((com.wi.director.thrift.v1.common.SystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof update_result)
        return this.equals((update_result)that);
      return false;
    }

    public boolean equals(update_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(update_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("update_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class update_resultStandardSchemeFactory implements SchemeFactory {
      public update_resultStandardScheme getScheme() {
        return new update_resultStandardScheme();
      }
    }

    private static class update_resultStandardScheme extends StandardScheme<update_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, update_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new JobTemplate();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new com.wi.director.thrift.v1.common.SystemException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, update_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class archive_args implements org.apache.thrift.TBase<archive_args, archive_args._Fields>, java.io.Serializable, Cloneable, Comparable<archive_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("archive_args");

    private static final org.apache.thrift.protocol.TField JOB_TEMPLATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("jobTemplateId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new archive_argsStandardSchemeFactory());
    }

    public String jobTemplateId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      JOB_TEMPLATE_ID((short)1, "jobTemplateId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // JOB_TEMPLATE_ID
            return JOB_TEMPLATE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.JOB_TEMPLATE_ID, new org.apache.thrift.meta_data.FieldMetaData("jobTemplateId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(archive_args.class, metaDataMap);
    }

    public archive_args() {
    }

    public archive_args(
      String jobTemplateId)
    {
      this();
      this.jobTemplateId = jobTemplateId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public archive_args(archive_args other) {
      if (other.isSetJobTemplateId()) {
        this.jobTemplateId = other.jobTemplateId;
      }
    }

    public archive_args deepCopy() {
      return new archive_args(this);
    }

    @Override
    public void clear() {
      this.jobTemplateId = null;
    }

    public String getJobTemplateId() {
      return this.jobTemplateId;
    }

    public archive_args setJobTemplateId(String jobTemplateId) {
      this.jobTemplateId = jobTemplateId;
      return this;
    }

    public void unsetJobTemplateId() {
      this.jobTemplateId = null;
    }

    /** Returns true if field jobTemplateId is set (has been assigned a value) and false otherwise */
    public boolean isSetJobTemplateId() {
      return this.jobTemplateId != null;
    }

    public void setJobTemplateIdIsSet(boolean value) {
      if (!value) {
        this.jobTemplateId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case JOB_TEMPLATE_ID:
        if (value == null) {
          unsetJobTemplateId();
        } else {
          setJobTemplateId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case JOB_TEMPLATE_ID:
        return getJobTemplateId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case JOB_TEMPLATE_ID:
        return isSetJobTemplateId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof archive_args)
        return this.equals((archive_args)that);
      return false;
    }

    public boolean equals(archive_args that) {
      if (that == null)
        return false;

      boolean this_present_jobTemplateId = true && this.isSetJobTemplateId();
      boolean that_present_jobTemplateId = true && that.isSetJobTemplateId();
      if (this_present_jobTemplateId || that_present_jobTemplateId) {
        if (!(this_present_jobTemplateId && that_present_jobTemplateId))
          return false;
        if (!this.jobTemplateId.equals(that.jobTemplateId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_jobTemplateId = true && (isSetJobTemplateId());
      list.add(present_jobTemplateId);
      if (present_jobTemplateId)
        list.add(jobTemplateId);

      return list.hashCode();
    }

    @Override
    public int compareTo(archive_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetJobTemplateId()).compareTo(other.isSetJobTemplateId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJobTemplateId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobTemplateId, other.jobTemplateId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("archive_args(");
      boolean first = true;

      sb.append("jobTemplateId:");
      if (this.jobTemplateId == null) {
        sb.append("null");
      } else {
        sb.append(this.jobTemplateId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class archive_argsStandardSchemeFactory implements SchemeFactory {
      public archive_argsStandardScheme getScheme() {
        return new archive_argsStandardScheme();
      }
    }

    private static class archive_argsStandardScheme extends StandardScheme<archive_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, archive_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // JOB_TEMPLATE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jobTemplateId = iprot.readString();
                struct.setJobTemplateIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, archive_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.jobTemplateId != null) {
          oprot.writeFieldBegin(JOB_TEMPLATE_ID_FIELD_DESC);
          oprot.writeString(struct.jobTemplateId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class archive_result implements org.apache.thrift.TBase<archive_result, archive_result._Fields>, java.io.Serializable, Cloneable, Comparable<archive_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("archive_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new archive_resultStandardSchemeFactory());
    }

    public JobTemplate success; // required
    public com.wi.director.thrift.v1.common.SystemException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JobTemplate.class)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(archive_result.class, metaDataMap);
    }

    public archive_result() {
    }

    public archive_result(
      JobTemplate success,
      com.wi.director.thrift.v1.common.SystemException err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public archive_result(archive_result other) {
      if (other.isSetSuccess()) {
        this.success = new JobTemplate(other.success);
      }
      if (other.isSetErr()) {
        this.err = new com.wi.director.thrift.v1.common.SystemException(other.err);
      }
    }

    public archive_result deepCopy() {
      return new archive_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public JobTemplate getSuccess() {
      return this.success;
    }

    public archive_result setSuccess(JobTemplate success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.wi.director.thrift.v1.common.SystemException getErr() {
      return this.err;
    }

    public archive_result setErr(com.wi.director.thrift.v1.common.SystemException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((JobTemplate)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((com.wi.director.thrift.v1.common.SystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof archive_result)
        return this.equals((archive_result)that);
      return false;
    }

    public boolean equals(archive_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(archive_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("archive_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class archive_resultStandardSchemeFactory implements SchemeFactory {
      public archive_resultStandardScheme getScheme() {
        return new archive_resultStandardScheme();
      }
    }

    private static class archive_resultStandardScheme extends StandardScheme<archive_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, archive_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new JobTemplate();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new com.wi.director.thrift.v1.common.SystemException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, archive_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class unarchive_args implements org.apache.thrift.TBase<unarchive_args, unarchive_args._Fields>, java.io.Serializable, Cloneable, Comparable<unarchive_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("unarchive_args");

    private static final org.apache.thrift.protocol.TField JOB_TEMPLATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("jobTemplateId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new unarchive_argsStandardSchemeFactory());
    }

    public String jobTemplateId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      JOB_TEMPLATE_ID((short)1, "jobTemplateId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // JOB_TEMPLATE_ID
            return JOB_TEMPLATE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.JOB_TEMPLATE_ID, new org.apache.thrift.meta_data.FieldMetaData("jobTemplateId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(unarchive_args.class, metaDataMap);
    }

    public unarchive_args() {
    }

    public unarchive_args(
      String jobTemplateId)
    {
      this();
      this.jobTemplateId = jobTemplateId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public unarchive_args(unarchive_args other) {
      if (other.isSetJobTemplateId()) {
        this.jobTemplateId = other.jobTemplateId;
      }
    }

    public unarchive_args deepCopy() {
      return new unarchive_args(this);
    }

    @Override
    public void clear() {
      this.jobTemplateId = null;
    }

    public String getJobTemplateId() {
      return this.jobTemplateId;
    }

    public unarchive_args setJobTemplateId(String jobTemplateId) {
      this.jobTemplateId = jobTemplateId;
      return this;
    }

    public void unsetJobTemplateId() {
      this.jobTemplateId = null;
    }

    /** Returns true if field jobTemplateId is set (has been assigned a value) and false otherwise */
    public boolean isSetJobTemplateId() {
      return this.jobTemplateId != null;
    }

    public void setJobTemplateIdIsSet(boolean value) {
      if (!value) {
        this.jobTemplateId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case JOB_TEMPLATE_ID:
        if (value == null) {
          unsetJobTemplateId();
        } else {
          setJobTemplateId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case JOB_TEMPLATE_ID:
        return getJobTemplateId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case JOB_TEMPLATE_ID:
        return isSetJobTemplateId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof unarchive_args)
        return this.equals((unarchive_args)that);
      return false;
    }

    public boolean equals(unarchive_args that) {
      if (that == null)
        return false;

      boolean this_present_jobTemplateId = true && this.isSetJobTemplateId();
      boolean that_present_jobTemplateId = true && that.isSetJobTemplateId();
      if (this_present_jobTemplateId || that_present_jobTemplateId) {
        if (!(this_present_jobTemplateId && that_present_jobTemplateId))
          return false;
        if (!this.jobTemplateId.equals(that.jobTemplateId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_jobTemplateId = true && (isSetJobTemplateId());
      list.add(present_jobTemplateId);
      if (present_jobTemplateId)
        list.add(jobTemplateId);

      return list.hashCode();
    }

    @Override
    public int compareTo(unarchive_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetJobTemplateId()).compareTo(other.isSetJobTemplateId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJobTemplateId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobTemplateId, other.jobTemplateId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("unarchive_args(");
      boolean first = true;

      sb.append("jobTemplateId:");
      if (this.jobTemplateId == null) {
        sb.append("null");
      } else {
        sb.append(this.jobTemplateId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class unarchive_argsStandardSchemeFactory implements SchemeFactory {
      public unarchive_argsStandardScheme getScheme() {
        return new unarchive_argsStandardScheme();
      }
    }

    private static class unarchive_argsStandardScheme extends StandardScheme<unarchive_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, unarchive_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // JOB_TEMPLATE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jobTemplateId = iprot.readString();
                struct.setJobTemplateIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, unarchive_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.jobTemplateId != null) {
          oprot.writeFieldBegin(JOB_TEMPLATE_ID_FIELD_DESC);
          oprot.writeString(struct.jobTemplateId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class unarchive_result implements org.apache.thrift.TBase<unarchive_result, unarchive_result._Fields>, java.io.Serializable, Cloneable, Comparable<unarchive_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("unarchive_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new unarchive_resultStandardSchemeFactory());
    }

    public JobTemplate success; // required
    public com.wi.director.thrift.v1.common.SystemException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JobTemplate.class)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(unarchive_result.class, metaDataMap);
    }

    public unarchive_result() {
    }

    public unarchive_result(
      JobTemplate success,
      com.wi.director.thrift.v1.common.SystemException err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public unarchive_result(unarchive_result other) {
      if (other.isSetSuccess()) {
        this.success = new JobTemplate(other.success);
      }
      if (other.isSetErr()) {
        this.err = new com.wi.director.thrift.v1.common.SystemException(other.err);
      }
    }

    public unarchive_result deepCopy() {
      return new unarchive_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public JobTemplate getSuccess() {
      return this.success;
    }

    public unarchive_result setSuccess(JobTemplate success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.wi.director.thrift.v1.common.SystemException getErr() {
      return this.err;
    }

    public unarchive_result setErr(com.wi.director.thrift.v1.common.SystemException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((JobTemplate)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((com.wi.director.thrift.v1.common.SystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof unarchive_result)
        return this.equals((unarchive_result)that);
      return false;
    }

    public boolean equals(unarchive_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(unarchive_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("unarchive_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class unarchive_resultStandardSchemeFactory implements SchemeFactory {
      public unarchive_resultStandardScheme getScheme() {
        return new unarchive_resultStandardScheme();
      }
    }

    private static class unarchive_resultStandardScheme extends StandardScheme<unarchive_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, unarchive_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new JobTemplate();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new com.wi.director.thrift.v1.common.SystemException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, unarchive_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class publish_args implements org.apache.thrift.TBase<publish_args, publish_args._Fields>, java.io.Serializable, Cloneable, Comparable<publish_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("publish_args");

    private static final org.apache.thrift.protocol.TField JOB_TEMPLATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("jobTemplateId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new publish_argsStandardSchemeFactory());
    }

    public String jobTemplateId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      JOB_TEMPLATE_ID((short)1, "jobTemplateId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // JOB_TEMPLATE_ID
            return JOB_TEMPLATE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.JOB_TEMPLATE_ID, new org.apache.thrift.meta_data.FieldMetaData("jobTemplateId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(publish_args.class, metaDataMap);
    }

    public publish_args() {
    }

    public publish_args(
      String jobTemplateId)
    {
      this();
      this.jobTemplateId = jobTemplateId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public publish_args(publish_args other) {
      if (other.isSetJobTemplateId()) {
        this.jobTemplateId = other.jobTemplateId;
      }
    }

    public publish_args deepCopy() {
      return new publish_args(this);
    }

    @Override
    public void clear() {
      this.jobTemplateId = null;
    }

    public String getJobTemplateId() {
      return this.jobTemplateId;
    }

    public publish_args setJobTemplateId(String jobTemplateId) {
      this.jobTemplateId = jobTemplateId;
      return this;
    }

    public void unsetJobTemplateId() {
      this.jobTemplateId = null;
    }

    /** Returns true if field jobTemplateId is set (has been assigned a value) and false otherwise */
    public boolean isSetJobTemplateId() {
      return this.jobTemplateId != null;
    }

    public void setJobTemplateIdIsSet(boolean value) {
      if (!value) {
        this.jobTemplateId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case JOB_TEMPLATE_ID:
        if (value == null) {
          unsetJobTemplateId();
        } else {
          setJobTemplateId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case JOB_TEMPLATE_ID:
        return getJobTemplateId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case JOB_TEMPLATE_ID:
        return isSetJobTemplateId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof publish_args)
        return this.equals((publish_args)that);
      return false;
    }

    public boolean equals(publish_args that) {
      if (that == null)
        return false;

      boolean this_present_jobTemplateId = true && this.isSetJobTemplateId();
      boolean that_present_jobTemplateId = true && that.isSetJobTemplateId();
      if (this_present_jobTemplateId || that_present_jobTemplateId) {
        if (!(this_present_jobTemplateId && that_present_jobTemplateId))
          return false;
        if (!this.jobTemplateId.equals(that.jobTemplateId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_jobTemplateId = true && (isSetJobTemplateId());
      list.add(present_jobTemplateId);
      if (present_jobTemplateId)
        list.add(jobTemplateId);

      return list.hashCode();
    }

    @Override
    public int compareTo(publish_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetJobTemplateId()).compareTo(other.isSetJobTemplateId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJobTemplateId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobTemplateId, other.jobTemplateId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("publish_args(");
      boolean first = true;

      sb.append("jobTemplateId:");
      if (this.jobTemplateId == null) {
        sb.append("null");
      } else {
        sb.append(this.jobTemplateId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class publish_argsStandardSchemeFactory implements SchemeFactory {
      public publish_argsStandardScheme getScheme() {
        return new publish_argsStandardScheme();
      }
    }

    private static class publish_argsStandardScheme extends StandardScheme<publish_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, publish_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // JOB_TEMPLATE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jobTemplateId = iprot.readString();
                struct.setJobTemplateIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, publish_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.jobTemplateId != null) {
          oprot.writeFieldBegin(JOB_TEMPLATE_ID_FIELD_DESC);
          oprot.writeString(struct.jobTemplateId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class publish_result implements org.apache.thrift.TBase<publish_result, publish_result._Fields>, java.io.Serializable, Cloneable, Comparable<publish_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("publish_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new publish_resultStandardSchemeFactory());
    }

    public JobTemplate success; // required
    public com.wi.director.thrift.v1.common.SystemException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JobTemplate.class)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(publish_result.class, metaDataMap);
    }

    public publish_result() {
    }

    public publish_result(
      JobTemplate success,
      com.wi.director.thrift.v1.common.SystemException err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public publish_result(publish_result other) {
      if (other.isSetSuccess()) {
        this.success = new JobTemplate(other.success);
      }
      if (other.isSetErr()) {
        this.err = new com.wi.director.thrift.v1.common.SystemException(other.err);
      }
    }

    public publish_result deepCopy() {
      return new publish_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public JobTemplate getSuccess() {
      return this.success;
    }

    public publish_result setSuccess(JobTemplate success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.wi.director.thrift.v1.common.SystemException getErr() {
      return this.err;
    }

    public publish_result setErr(com.wi.director.thrift.v1.common.SystemException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((JobTemplate)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((com.wi.director.thrift.v1.common.SystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof publish_result)
        return this.equals((publish_result)that);
      return false;
    }

    public boolean equals(publish_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(publish_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("publish_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class publish_resultStandardSchemeFactory implements SchemeFactory {
      public publish_resultStandardScheme getScheme() {
        return new publish_resultStandardScheme();
      }
    }

    private static class publish_resultStandardScheme extends StandardScheme<publish_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, publish_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new JobTemplate();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new com.wi.director.thrift.v1.common.SystemException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, publish_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class getPublicVersion_args implements org.apache.thrift.TBase<getPublicVersion_args, getPublicVersion_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPublicVersion_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPublicVersion_args");

    private static final org.apache.thrift.protocol.TField JOB_TEMPLATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("jobTemplateId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PUBLIC_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("publicVersion", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPublicVersion_argsStandardSchemeFactory());
    }

    public String jobTemplateId; // required
    public int publicVersion; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      JOB_TEMPLATE_ID((short)1, "jobTemplateId"),
      PUBLIC_VERSION((short)2, "publicVersion");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // JOB_TEMPLATE_ID
            return JOB_TEMPLATE_ID;
          case 2: // PUBLIC_VERSION
            return PUBLIC_VERSION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PUBLICVERSION_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.JOB_TEMPLATE_ID, new org.apache.thrift.meta_data.FieldMetaData("jobTemplateId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PUBLIC_VERSION, new org.apache.thrift.meta_data.FieldMetaData("publicVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPublicVersion_args.class, metaDataMap);
    }

    public getPublicVersion_args() {
    }

    public getPublicVersion_args(
      String jobTemplateId,
      int publicVersion)
    {
      this();
      this.jobTemplateId = jobTemplateId;
      this.publicVersion = publicVersion;
      setPublicVersionIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPublicVersion_args(getPublicVersion_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetJobTemplateId()) {
        this.jobTemplateId = other.jobTemplateId;
      }
      this.publicVersion = other.publicVersion;
    }

    public getPublicVersion_args deepCopy() {
      return new getPublicVersion_args(this);
    }

    @Override
    public void clear() {
      this.jobTemplateId = null;
      setPublicVersionIsSet(false);
      this.publicVersion = 0;
    }

    public String getJobTemplateId() {
      return this.jobTemplateId;
    }

    public getPublicVersion_args setJobTemplateId(String jobTemplateId) {
      this.jobTemplateId = jobTemplateId;
      return this;
    }

    public void unsetJobTemplateId() {
      this.jobTemplateId = null;
    }

    /** Returns true if field jobTemplateId is set (has been assigned a value) and false otherwise */
    public boolean isSetJobTemplateId() {
      return this.jobTemplateId != null;
    }

    public void setJobTemplateIdIsSet(boolean value) {
      if (!value) {
        this.jobTemplateId = null;
      }
    }

    public int getPublicVersion() {
      return this.publicVersion;
    }

    public getPublicVersion_args setPublicVersion(int publicVersion) {
      this.publicVersion = publicVersion;
      setPublicVersionIsSet(true);
      return this;
    }

    public void unsetPublicVersion() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PUBLICVERSION_ISSET_ID);
    }

    /** Returns true if field publicVersion is set (has been assigned a value) and false otherwise */
    public boolean isSetPublicVersion() {
      return EncodingUtils.testBit(__isset_bitfield, __PUBLICVERSION_ISSET_ID);
    }

    public void setPublicVersionIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PUBLICVERSION_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case JOB_TEMPLATE_ID:
        if (value == null) {
          unsetJobTemplateId();
        } else {
          setJobTemplateId((String)value);
        }
        break;

      case PUBLIC_VERSION:
        if (value == null) {
          unsetPublicVersion();
        } else {
          setPublicVersion((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case JOB_TEMPLATE_ID:
        return getJobTemplateId();

      case PUBLIC_VERSION:
        return getPublicVersion();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case JOB_TEMPLATE_ID:
        return isSetJobTemplateId();
      case PUBLIC_VERSION:
        return isSetPublicVersion();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPublicVersion_args)
        return this.equals((getPublicVersion_args)that);
      return false;
    }

    public boolean equals(getPublicVersion_args that) {
      if (that == null)
        return false;

      boolean this_present_jobTemplateId = true && this.isSetJobTemplateId();
      boolean that_present_jobTemplateId = true && that.isSetJobTemplateId();
      if (this_present_jobTemplateId || that_present_jobTemplateId) {
        if (!(this_present_jobTemplateId && that_present_jobTemplateId))
          return false;
        if (!this.jobTemplateId.equals(that.jobTemplateId))
          return false;
      }

      boolean this_present_publicVersion = true;
      boolean that_present_publicVersion = true;
      if (this_present_publicVersion || that_present_publicVersion) {
        if (!(this_present_publicVersion && that_present_publicVersion))
          return false;
        if (this.publicVersion != that.publicVersion)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_jobTemplateId = true && (isSetJobTemplateId());
      list.add(present_jobTemplateId);
      if (present_jobTemplateId)
        list.add(jobTemplateId);

      boolean present_publicVersion = true;
      list.add(present_publicVersion);
      if (present_publicVersion)
        list.add(publicVersion);

      return list.hashCode();
    }

    @Override
    public int compareTo(getPublicVersion_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetJobTemplateId()).compareTo(other.isSetJobTemplateId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJobTemplateId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobTemplateId, other.jobTemplateId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPublicVersion()).compareTo(other.isSetPublicVersion());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPublicVersion()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.publicVersion, other.publicVersion);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPublicVersion_args(");
      boolean first = true;

      sb.append("jobTemplateId:");
      if (this.jobTemplateId == null) {
        sb.append("null");
      } else {
        sb.append(this.jobTemplateId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("publicVersion:");
      sb.append(this.publicVersion);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPublicVersion_argsStandardSchemeFactory implements SchemeFactory {
      public getPublicVersion_argsStandardScheme getScheme() {
        return new getPublicVersion_argsStandardScheme();
      }
    }

    private static class getPublicVersion_argsStandardScheme extends StandardScheme<getPublicVersion_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPublicVersion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // JOB_TEMPLATE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jobTemplateId = iprot.readString();
                struct.setJobTemplateIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PUBLIC_VERSION
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.publicVersion = iprot.readI32();
                struct.setPublicVersionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPublicVersion_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.jobTemplateId != null) {
          oprot.writeFieldBegin(JOB_TEMPLATE_ID_FIELD_DESC);
          oprot.writeString(struct.jobTemplateId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PUBLIC_VERSION_FIELD_DESC);
        oprot.writeI32(struct.publicVersion);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class getPublicVersion_result implements org.apache.thrift.TBase<getPublicVersion_result, getPublicVersion_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPublicVersion_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPublicVersion_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPublicVersion_resultStandardSchemeFactory());
    }

    public JobTemplate success; // required
    public com.wi.director.thrift.v1.common.SystemException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JobTemplate.class)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPublicVersion_result.class, metaDataMap);
    }

    public getPublicVersion_result() {
    }

    public getPublicVersion_result(
      JobTemplate success,
      com.wi.director.thrift.v1.common.SystemException err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPublicVersion_result(getPublicVersion_result other) {
      if (other.isSetSuccess()) {
        this.success = new JobTemplate(other.success);
      }
      if (other.isSetErr()) {
        this.err = new com.wi.director.thrift.v1.common.SystemException(other.err);
      }
    }

    public getPublicVersion_result deepCopy() {
      return new getPublicVersion_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public JobTemplate getSuccess() {
      return this.success;
    }

    public getPublicVersion_result setSuccess(JobTemplate success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.wi.director.thrift.v1.common.SystemException getErr() {
      return this.err;
    }

    public getPublicVersion_result setErr(com.wi.director.thrift.v1.common.SystemException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((JobTemplate)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((com.wi.director.thrift.v1.common.SystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPublicVersion_result)
        return this.equals((getPublicVersion_result)that);
      return false;
    }

    public boolean equals(getPublicVersion_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(getPublicVersion_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPublicVersion_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPublicVersion_resultStandardSchemeFactory implements SchemeFactory {
      public getPublicVersion_resultStandardScheme getScheme() {
        return new getPublicVersion_resultStandardScheme();
      }
    }

    private static class getPublicVersion_resultStandardScheme extends StandardScheme<getPublicVersion_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPublicVersion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new JobTemplate();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new com.wi.director.thrift.v1.common.SystemException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPublicVersion_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class fetchPublicVersions_args implements org.apache.thrift.TBase<fetchPublicVersions_args, fetchPublicVersions_args._Fields>, java.io.Serializable, Cloneable, Comparable<fetchPublicVersions_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fetchPublicVersions_args");

    private static final org.apache.thrift.protocol.TField SELECT_OPTS_FIELD_DESC = new org.apache.thrift.protocol.TField("selectOpts", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField VERSIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("versions", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new fetchPublicVersions_argsStandardSchemeFactory());
    }

    public TemplateSelectOpts selectOpts; // required
    public List<TemplatePublicVersion> versions; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SELECT_OPTS((short)1, "selectOpts"),
      VERSIONS((short)2, "versions");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SELECT_OPTS
            return SELECT_OPTS;
          case 2: // VERSIONS
            return VERSIONS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SELECT_OPTS, new org.apache.thrift.meta_data.FieldMetaData("selectOpts", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TemplateSelectOpts.class)));
      tmpMap.put(_Fields.VERSIONS, new org.apache.thrift.meta_data.FieldMetaData("versions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TemplatePublicVersion.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fetchPublicVersions_args.class, metaDataMap);
    }

    public fetchPublicVersions_args() {
    }

    public fetchPublicVersions_args(
      TemplateSelectOpts selectOpts,
      List<TemplatePublicVersion> versions)
    {
      this();
      this.selectOpts = selectOpts;
      this.versions = versions;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fetchPublicVersions_args(fetchPublicVersions_args other) {
      if (other.isSetSelectOpts()) {
        this.selectOpts = new TemplateSelectOpts(other.selectOpts);
      }
      if (other.isSetVersions()) {
        List<TemplatePublicVersion> __this__versions = new ArrayList<TemplatePublicVersion>(other.versions.size());
        for (TemplatePublicVersion other_element : other.versions) {
          __this__versions.add(new TemplatePublicVersion(other_element));
        }
        this.versions = __this__versions;
      }
    }

    public fetchPublicVersions_args deepCopy() {
      return new fetchPublicVersions_args(this);
    }

    @Override
    public void clear() {
      this.selectOpts = null;
      this.versions = null;
    }

    public TemplateSelectOpts getSelectOpts() {
      return this.selectOpts;
    }

    public fetchPublicVersions_args setSelectOpts(TemplateSelectOpts selectOpts) {
      this.selectOpts = selectOpts;
      return this;
    }

    public void unsetSelectOpts() {
      this.selectOpts = null;
    }

    /** Returns true if field selectOpts is set (has been assigned a value) and false otherwise */
    public boolean isSetSelectOpts() {
      return this.selectOpts != null;
    }

    public void setSelectOptsIsSet(boolean value) {
      if (!value) {
        this.selectOpts = null;
      }
    }

    public int getVersionsSize() {
      return (this.versions == null) ? 0 : this.versions.size();
    }

    public java.util.Iterator<TemplatePublicVersion> getVersionsIterator() {
      return (this.versions == null) ? null : this.versions.iterator();
    }

    public void addToVersions(TemplatePublicVersion elem) {
      if (this.versions == null) {
        this.versions = new ArrayList<TemplatePublicVersion>();
      }
      this.versions.add(elem);
    }

    public List<TemplatePublicVersion> getVersions() {
      return this.versions;
    }

    public fetchPublicVersions_args setVersions(List<TemplatePublicVersion> versions) {
      this.versions = versions;
      return this;
    }

    public void unsetVersions() {
      this.versions = null;
    }

    /** Returns true if field versions is set (has been assigned a value) and false otherwise */
    public boolean isSetVersions() {
      return this.versions != null;
    }

    public void setVersionsIsSet(boolean value) {
      if (!value) {
        this.versions = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SELECT_OPTS:
        if (value == null) {
          unsetSelectOpts();
        } else {
          setSelectOpts((TemplateSelectOpts)value);
        }
        break;

      case VERSIONS:
        if (value == null) {
          unsetVersions();
        } else {
          setVersions((List<TemplatePublicVersion>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SELECT_OPTS:
        return getSelectOpts();

      case VERSIONS:
        return getVersions();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SELECT_OPTS:
        return isSetSelectOpts();
      case VERSIONS:
        return isSetVersions();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof fetchPublicVersions_args)
        return this.equals((fetchPublicVersions_args)that);
      return false;
    }

    public boolean equals(fetchPublicVersions_args that) {
      if (that == null)
        return false;

      boolean this_present_selectOpts = true && this.isSetSelectOpts();
      boolean that_present_selectOpts = true && that.isSetSelectOpts();
      if (this_present_selectOpts || that_present_selectOpts) {
        if (!(this_present_selectOpts && that_present_selectOpts))
          return false;
        if (!this.selectOpts.equals(that.selectOpts))
          return false;
      }

      boolean this_present_versions = true && this.isSetVersions();
      boolean that_present_versions = true && that.isSetVersions();
      if (this_present_versions || that_present_versions) {
        if (!(this_present_versions && that_present_versions))
          return false;
        if (!this.versions.equals(that.versions))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_selectOpts = true && (isSetSelectOpts());
      list.add(present_selectOpts);
      if (present_selectOpts)
        list.add(selectOpts);

      boolean present_versions = true && (isSetVersions());
      list.add(present_versions);
      if (present_versions)
        list.add(versions);

      return list.hashCode();
    }

    @Override
    public int compareTo(fetchPublicVersions_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSelectOpts()).compareTo(other.isSetSelectOpts());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSelectOpts()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.selectOpts, other.selectOpts);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVersions()).compareTo(other.isSetVersions());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVersions()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.versions, other.versions);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("fetchPublicVersions_args(");
      boolean first = true;

      sb.append("selectOpts:");
      if (this.selectOpts == null) {
        sb.append("null");
      } else {
        sb.append(this.selectOpts);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("versions:");
      if (this.versions == null) {
        sb.append("null");
      } else {
        sb.append(this.versions);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (selectOpts != null) {
        selectOpts.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fetchPublicVersions_argsStandardSchemeFactory implements SchemeFactory {
      public fetchPublicVersions_argsStandardScheme getScheme() {
        return new fetchPublicVersions_argsStandardScheme();
      }
    }

    private static class fetchPublicVersions_argsStandardScheme extends StandardScheme<fetchPublicVersions_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fetchPublicVersions_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SELECT_OPTS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.selectOpts = new TemplateSelectOpts();
                struct.selectOpts.read(iprot);
                struct.setSelectOptsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VERSIONS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list98 = iprot.readListBegin();
                  struct.versions = new ArrayList<TemplatePublicVersion>(_list98.size);
                  TemplatePublicVersion _elem99;
                  for (int _i100 = 0; _i100 < _list98.size; ++_i100)
                  {
                    _elem99 = new TemplatePublicVersion();
                    _elem99.read(iprot);
                    struct.versions.add(_elem99);
                  }
                  iprot.readListEnd();
                }
                struct.setVersionsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fetchPublicVersions_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.selectOpts != null) {
          oprot.writeFieldBegin(SELECT_OPTS_FIELD_DESC);
          struct.selectOpts.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.versions != null) {
          oprot.writeFieldBegin(VERSIONS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.versions.size()));
            for (TemplatePublicVersion _iter101 : struct.versions)
            {
              _iter101.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class fetchPublicVersions_result implements org.apache.thrift.TBase<fetchPublicVersions_result, fetchPublicVersions_result._Fields>, java.io.Serializable, Cloneable, Comparable<fetchPublicVersions_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fetchPublicVersions_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new fetchPublicVersions_resultStandardSchemeFactory());
    }

    public Map<String,Map<Integer,TemplateFetchResult>> success; // required
    public com.wi.director.thrift.v1.common.SystemException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
                  new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TemplateFetchResult.class)))));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fetchPublicVersions_result.class, metaDataMap);
    }

    public fetchPublicVersions_result() {
    }

    public fetchPublicVersions_result(
      Map<String,Map<Integer,TemplateFetchResult>> success,
      com.wi.director.thrift.v1.common.SystemException err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fetchPublicVersions_result(fetchPublicVersions_result other) {
      if (other.isSetSuccess()) {
        Map<String,Map<Integer,TemplateFetchResult>> __this__success = new HashMap<String,Map<Integer,TemplateFetchResult>>(other.success.size());
        for (Map.Entry<String, Map<Integer,TemplateFetchResult>> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          Map<Integer,TemplateFetchResult> other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          Map<Integer,TemplateFetchResult> __this__success_copy_value = new HashMap<Integer,TemplateFetchResult>(other_element_value.size());
          for (Map.Entry<Integer, TemplateFetchResult> other_element_value_element : other_element_value.entrySet()) {

            Integer other_element_value_element_key = other_element_value_element.getKey();
            TemplateFetchResult other_element_value_element_value = other_element_value_element.getValue();

            Integer __this__success_copy_value_copy_key = other_element_value_element_key;

            TemplateFetchResult __this__success_copy_value_copy_value = new TemplateFetchResult(other_element_value_element_value);

            __this__success_copy_value.put(__this__success_copy_value_copy_key, __this__success_copy_value_copy_value);
          }

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
      if (other.isSetErr()) {
        this.err = new com.wi.director.thrift.v1.common.SystemException(other.err);
      }
    }

    public fetchPublicVersions_result deepCopy() {
      return new fetchPublicVersions_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, Map<Integer,TemplateFetchResult> val) {
      if (this.success == null) {
        this.success = new HashMap<String,Map<Integer,TemplateFetchResult>>();
      }
      this.success.put(key, val);
    }

    public Map<String,Map<Integer,TemplateFetchResult>> getSuccess() {
      return this.success;
    }

    public fetchPublicVersions_result setSuccess(Map<String,Map<Integer,TemplateFetchResult>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.wi.director.thrift.v1.common.SystemException getErr() {
      return this.err;
    }

    public fetchPublicVersions_result setErr(com.wi.director.thrift.v1.common.SystemException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,Map<Integer,TemplateFetchResult>>)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((com.wi.director.thrift.v1.common.SystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof fetchPublicVersions_result)
        return this.equals((fetchPublicVersions_result)that);
      return false;
    }

    public boolean equals(fetchPublicVersions_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(fetchPublicVersions_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("fetchPublicVersions_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fetchPublicVersions_resultStandardSchemeFactory implements SchemeFactory {
      public fetchPublicVersions_resultStandardScheme getScheme() {
        return new fetchPublicVersions_resultStandardScheme();
      }
    }

    private static class fetchPublicVersions_resultStandardScheme extends StandardScheme<fetchPublicVersions_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fetchPublicVersions_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map102 = iprot.readMapBegin();
                  struct.success = new HashMap<String,Map<Integer,TemplateFetchResult>>(2*_map102.size);
                  String _key103;
                  Map<Integer,TemplateFetchResult> _val104;
                  for (int _i105 = 0; _i105 < _map102.size; ++_i105)
                  {
                    _key103 = iprot.readString();
                    {
                      org.apache.thrift.protocol.TMap _map106 = iprot.readMapBegin();
                      _val104 = new HashMap<Integer,TemplateFetchResult>(2*_map106.size);
                      int _key107;
                      TemplateFetchResult _val108;
                      for (int _i109 = 0; _i109 < _map106.size; ++_i109)
                      {
                        _key107 = iprot.readI32();
                        _val108 = new TemplateFetchResult();
                        _val108.read(iprot);
                        _val104.put(_key107, _val108);
                      }
                      iprot.readMapEnd();
                    }
                    struct.success.put(_key103, _val104);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new com.wi.director.thrift.v1.common.SystemException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fetchPublicVersions_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, struct.success.size()));
            for (Map.Entry<String, Map<Integer,TemplateFetchResult>> _iter110 : struct.success.entrySet())
            {
              oprot.writeString(_iter110.getKey());
              {
                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, _iter110.getValue().size()));
                for (Map.Entry<Integer, TemplateFetchResult> _iter111 : _iter110.getValue().entrySet())
                {
                  oprot.writeI32(_iter111.getKey());
                  _iter111.getValue().write(oprot);
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class fetchPublishedVersions_args implements org.apache.thrift.TBase<fetchPublishedVersions_args, fetchPublishedVersions_args._Fields>, java.io.Serializable, Cloneable, Comparable<fetchPublishedVersions_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fetchPublishedVersions_args");

    private static final org.apache.thrift.protocol.TField SELECT_OPTS_FIELD_DESC = new org.apache.thrift.protocol.TField("selectOpts", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField VERSIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("versions", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new fetchPublishedVersions_argsStandardSchemeFactory());
    }

    public TemplateSelectOpts selectOpts; // required
    public List<TemplatePublicVersion> versions; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SELECT_OPTS((short)1, "selectOpts"),
      VERSIONS((short)2, "versions");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SELECT_OPTS
            return SELECT_OPTS;
          case 2: // VERSIONS
            return VERSIONS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SELECT_OPTS, new org.apache.thrift.meta_data.FieldMetaData("selectOpts", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TemplateSelectOpts.class)));
      tmpMap.put(_Fields.VERSIONS, new org.apache.thrift.meta_data.FieldMetaData("versions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TemplatePublicVersion.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fetchPublishedVersions_args.class, metaDataMap);
    }

    public fetchPublishedVersions_args() {
    }

    public fetchPublishedVersions_args(
      TemplateSelectOpts selectOpts,
      List<TemplatePublicVersion> versions)
    {
      this();
      this.selectOpts = selectOpts;
      this.versions = versions;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fetchPublishedVersions_args(fetchPublishedVersions_args other) {
      if (other.isSetSelectOpts()) {
        this.selectOpts = new TemplateSelectOpts(other.selectOpts);
      }
      if (other.isSetVersions()) {
        List<TemplatePublicVersion> __this__versions = new ArrayList<TemplatePublicVersion>(other.versions.size());
        for (TemplatePublicVersion other_element : other.versions) {
          __this__versions.add(new TemplatePublicVersion(other_element));
        }
        this.versions = __this__versions;
      }
    }

    public fetchPublishedVersions_args deepCopy() {
      return new fetchPublishedVersions_args(this);
    }

    @Override
    public void clear() {
      this.selectOpts = null;
      this.versions = null;
    }

    public TemplateSelectOpts getSelectOpts() {
      return this.selectOpts;
    }

    public fetchPublishedVersions_args setSelectOpts(TemplateSelectOpts selectOpts) {
      this.selectOpts = selectOpts;
      return this;
    }

    public void unsetSelectOpts() {
      this.selectOpts = null;
    }

    /** Returns true if field selectOpts is set (has been assigned a value) and false otherwise */
    public boolean isSetSelectOpts() {
      return this.selectOpts != null;
    }

    public void setSelectOptsIsSet(boolean value) {
      if (!value) {
        this.selectOpts = null;
      }
    }

    public int getVersionsSize() {
      return (this.versions == null) ? 0 : this.versions.size();
    }

    public java.util.Iterator<TemplatePublicVersion> getVersionsIterator() {
      return (this.versions == null) ? null : this.versions.iterator();
    }

    public void addToVersions(TemplatePublicVersion elem) {
      if (this.versions == null) {
        this.versions = new ArrayList<TemplatePublicVersion>();
      }
      this.versions.add(elem);
    }

    public List<TemplatePublicVersion> getVersions() {
      return this.versions;
    }

    public fetchPublishedVersions_args setVersions(List<TemplatePublicVersion> versions) {
      this.versions = versions;
      return this;
    }

    public void unsetVersions() {
      this.versions = null;
    }

    /** Returns true if field versions is set (has been assigned a value) and false otherwise */
    public boolean isSetVersions() {
      return this.versions != null;
    }

    public void setVersionsIsSet(boolean value) {
      if (!value) {
        this.versions = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SELECT_OPTS:
        if (value == null) {
          unsetSelectOpts();
        } else {
          setSelectOpts((TemplateSelectOpts)value);
        }
        break;

      case VERSIONS:
        if (value == null) {
          unsetVersions();
        } else {
          setVersions((List<TemplatePublicVersion>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SELECT_OPTS:
        return getSelectOpts();

      case VERSIONS:
        return getVersions();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SELECT_OPTS:
        return isSetSelectOpts();
      case VERSIONS:
        return isSetVersions();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof fetchPublishedVersions_args)
        return this.equals((fetchPublishedVersions_args)that);
      return false;
    }

    public boolean equals(fetchPublishedVersions_args that) {
      if (that == null)
        return false;

      boolean this_present_selectOpts = true && this.isSetSelectOpts();
      boolean that_present_selectOpts = true && that.isSetSelectOpts();
      if (this_present_selectOpts || that_present_selectOpts) {
        if (!(this_present_selectOpts && that_present_selectOpts))
          return false;
        if (!this.selectOpts.equals(that.selectOpts))
          return false;
      }

      boolean this_present_versions = true && this.isSetVersions();
      boolean that_present_versions = true && that.isSetVersions();
      if (this_present_versions || that_present_versions) {
        if (!(this_present_versions && that_present_versions))
          return false;
        if (!this.versions.equals(that.versions))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_selectOpts = true && (isSetSelectOpts());
      list.add(present_selectOpts);
      if (present_selectOpts)
        list.add(selectOpts);

      boolean present_versions = true && (isSetVersions());
      list.add(present_versions);
      if (present_versions)
        list.add(versions);

      return list.hashCode();
    }

    @Override
    public int compareTo(fetchPublishedVersions_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSelectOpts()).compareTo(other.isSetSelectOpts());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSelectOpts()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.selectOpts, other.selectOpts);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVersions()).compareTo(other.isSetVersions());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVersions()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.versions, other.versions);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("fetchPublishedVersions_args(");
      boolean first = true;

      sb.append("selectOpts:");
      if (this.selectOpts == null) {
        sb.append("null");
      } else {
        sb.append(this.selectOpts);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("versions:");
      if (this.versions == null) {
        sb.append("null");
      } else {
        sb.append(this.versions);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (selectOpts != null) {
        selectOpts.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fetchPublishedVersions_argsStandardSchemeFactory implements SchemeFactory {
      public fetchPublishedVersions_argsStandardScheme getScheme() {
        return new fetchPublishedVersions_argsStandardScheme();
      }
    }

    private static class fetchPublishedVersions_argsStandardScheme extends StandardScheme<fetchPublishedVersions_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fetchPublishedVersions_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SELECT_OPTS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.selectOpts = new TemplateSelectOpts();
                struct.selectOpts.read(iprot);
                struct.setSelectOptsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VERSIONS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list112 = iprot.readListBegin();
                  struct.versions = new ArrayList<TemplatePublicVersion>(_list112.size);
                  TemplatePublicVersion _elem113;
                  for (int _i114 = 0; _i114 < _list112.size; ++_i114)
                  {
                    _elem113 = new TemplatePublicVersion();
                    _elem113.read(iprot);
                    struct.versions.add(_elem113);
                  }
                  iprot.readListEnd();
                }
                struct.setVersionsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fetchPublishedVersions_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.selectOpts != null) {
          oprot.writeFieldBegin(SELECT_OPTS_FIELD_DESC);
          struct.selectOpts.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.versions != null) {
          oprot.writeFieldBegin(VERSIONS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.versions.size()));
            for (TemplatePublicVersion _iter115 : struct.versions)
            {
              _iter115.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class fetchPublishedVersions_result implements org.apache.thrift.TBase<fetchPublishedVersions_result, fetchPublishedVersions_result._Fields>, java.io.Serializable, Cloneable, Comparable<fetchPublishedVersions_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fetchPublishedVersions_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new fetchPublishedVersions_resultStandardSchemeFactory());
    }

    public Map<String,Map<Integer,TemplateFetchResult>> success; // required
    public com.wi.director.thrift.v1.common.SystemException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
                  new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TemplateFetchResult.class)))));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fetchPublishedVersions_result.class, metaDataMap);
    }

    public fetchPublishedVersions_result() {
    }

    public fetchPublishedVersions_result(
      Map<String,Map<Integer,TemplateFetchResult>> success,
      com.wi.director.thrift.v1.common.SystemException err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fetchPublishedVersions_result(fetchPublishedVersions_result other) {
      if (other.isSetSuccess()) {
        Map<String,Map<Integer,TemplateFetchResult>> __this__success = new HashMap<String,Map<Integer,TemplateFetchResult>>(other.success.size());
        for (Map.Entry<String, Map<Integer,TemplateFetchResult>> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          Map<Integer,TemplateFetchResult> other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          Map<Integer,TemplateFetchResult> __this__success_copy_value = new HashMap<Integer,TemplateFetchResult>(other_element_value.size());
          for (Map.Entry<Integer, TemplateFetchResult> other_element_value_element : other_element_value.entrySet()) {

            Integer other_element_value_element_key = other_element_value_element.getKey();
            TemplateFetchResult other_element_value_element_value = other_element_value_element.getValue();

            Integer __this__success_copy_value_copy_key = other_element_value_element_key;

            TemplateFetchResult __this__success_copy_value_copy_value = new TemplateFetchResult(other_element_value_element_value);

            __this__success_copy_value.put(__this__success_copy_value_copy_key, __this__success_copy_value_copy_value);
          }

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
      if (other.isSetErr()) {
        this.err = new com.wi.director.thrift.v1.common.SystemException(other.err);
      }
    }

    public fetchPublishedVersions_result deepCopy() {
      return new fetchPublishedVersions_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, Map<Integer,TemplateFetchResult> val) {
      if (this.success == null) {
        this.success = new HashMap<String,Map<Integer,TemplateFetchResult>>();
      }
      this.success.put(key, val);
    }

    public Map<String,Map<Integer,TemplateFetchResult>> getSuccess() {
      return this.success;
    }

    public fetchPublishedVersions_result setSuccess(Map<String,Map<Integer,TemplateFetchResult>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.wi.director.thrift.v1.common.SystemException getErr() {
      return this.err;
    }

    public fetchPublishedVersions_result setErr(com.wi.director.thrift.v1.common.SystemException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,Map<Integer,TemplateFetchResult>>)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((com.wi.director.thrift.v1.common.SystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof fetchPublishedVersions_result)
        return this.equals((fetchPublishedVersions_result)that);
      return false;
    }

    public boolean equals(fetchPublishedVersions_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(fetchPublishedVersions_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("fetchPublishedVersions_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fetchPublishedVersions_resultStandardSchemeFactory implements SchemeFactory {
      public fetchPublishedVersions_resultStandardScheme getScheme() {
        return new fetchPublishedVersions_resultStandardScheme();
      }
    }

    private static class fetchPublishedVersions_resultStandardScheme extends StandardScheme<fetchPublishedVersions_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fetchPublishedVersions_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map116 = iprot.readMapBegin();
                  struct.success = new HashMap<String,Map<Integer,TemplateFetchResult>>(2*_map116.size);
                  String _key117;
                  Map<Integer,TemplateFetchResult> _val118;
                  for (int _i119 = 0; _i119 < _map116.size; ++_i119)
                  {
                    _key117 = iprot.readString();
                    {
                      org.apache.thrift.protocol.TMap _map120 = iprot.readMapBegin();
                      _val118 = new HashMap<Integer,TemplateFetchResult>(2*_map120.size);
                      int _key121;
                      TemplateFetchResult _val122;
                      for (int _i123 = 0; _i123 < _map120.size; ++_i123)
                      {
                        _key121 = iprot.readI32();
                        _val122 = new TemplateFetchResult();
                        _val122.read(iprot);
                        _val118.put(_key121, _val122);
                      }
                      iprot.readMapEnd();
                    }
                    struct.success.put(_key117, _val118);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new com.wi.director.thrift.v1.common.SystemException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fetchPublishedVersions_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, struct.success.size()));
            for (Map.Entry<String, Map<Integer,TemplateFetchResult>> _iter124 : struct.success.entrySet())
            {
              oprot.writeString(_iter124.getKey());
              {
                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, _iter124.getValue().size()));
                for (Map.Entry<Integer, TemplateFetchResult> _iter125 : _iter124.getValue().entrySet())
                {
                  oprot.writeI32(_iter125.getKey());
                  _iter125.getValue().write(oprot);
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class beginReview_args implements org.apache.thrift.TBase<beginReview_args, beginReview_args._Fields>, java.io.Serializable, Cloneable, Comparable<beginReview_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("beginReview_args");

    private static final org.apache.thrift.protocol.TField JOB_TEMPLATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("jobTemplateId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new beginReview_argsStandardSchemeFactory());
    }

    public String jobTemplateId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      JOB_TEMPLATE_ID((short)1, "jobTemplateId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // JOB_TEMPLATE_ID
            return JOB_TEMPLATE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.JOB_TEMPLATE_ID, new org.apache.thrift.meta_data.FieldMetaData("jobTemplateId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(beginReview_args.class, metaDataMap);
    }

    public beginReview_args() {
    }

    public beginReview_args(
      String jobTemplateId)
    {
      this();
      this.jobTemplateId = jobTemplateId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public beginReview_args(beginReview_args other) {
      if (other.isSetJobTemplateId()) {
        this.jobTemplateId = other.jobTemplateId;
      }
    }

    public beginReview_args deepCopy() {
      return new beginReview_args(this);
    }

    @Override
    public void clear() {
      this.jobTemplateId = null;
    }

    public String getJobTemplateId() {
      return this.jobTemplateId;
    }

    public beginReview_args setJobTemplateId(String jobTemplateId) {
      this.jobTemplateId = jobTemplateId;
      return this;
    }

    public void unsetJobTemplateId() {
      this.jobTemplateId = null;
    }

    /** Returns true if field jobTemplateId is set (has been assigned a value) and false otherwise */
    public boolean isSetJobTemplateId() {
      return this.jobTemplateId != null;
    }

    public void setJobTemplateIdIsSet(boolean value) {
      if (!value) {
        this.jobTemplateId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case JOB_TEMPLATE_ID:
        if (value == null) {
          unsetJobTemplateId();
        } else {
          setJobTemplateId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case JOB_TEMPLATE_ID:
        return getJobTemplateId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case JOB_TEMPLATE_ID:
        return isSetJobTemplateId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof beginReview_args)
        return this.equals((beginReview_args)that);
      return false;
    }

    public boolean equals(beginReview_args that) {
      if (that == null)
        return false;

      boolean this_present_jobTemplateId = true && this.isSetJobTemplateId();
      boolean that_present_jobTemplateId = true && that.isSetJobTemplateId();
      if (this_present_jobTemplateId || that_present_jobTemplateId) {
        if (!(this_present_jobTemplateId && that_present_jobTemplateId))
          return false;
        if (!this.jobTemplateId.equals(that.jobTemplateId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_jobTemplateId = true && (isSetJobTemplateId());
      list.add(present_jobTemplateId);
      if (present_jobTemplateId)
        list.add(jobTemplateId);

      return list.hashCode();
    }

    @Override
    public int compareTo(beginReview_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetJobTemplateId()).compareTo(other.isSetJobTemplateId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJobTemplateId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobTemplateId, other.jobTemplateId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("beginReview_args(");
      boolean first = true;

      sb.append("jobTemplateId:");
      if (this.jobTemplateId == null) {
        sb.append("null");
      } else {
        sb.append(this.jobTemplateId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class beginReview_argsStandardSchemeFactory implements SchemeFactory {
      public beginReview_argsStandardScheme getScheme() {
        return new beginReview_argsStandardScheme();
      }
    }

    private static class beginReview_argsStandardScheme extends StandardScheme<beginReview_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, beginReview_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // JOB_TEMPLATE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jobTemplateId = iprot.readString();
                struct.setJobTemplateIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, beginReview_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.jobTemplateId != null) {
          oprot.writeFieldBegin(JOB_TEMPLATE_ID_FIELD_DESC);
          oprot.writeString(struct.jobTemplateId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class beginReview_result implements org.apache.thrift.TBase<beginReview_result, beginReview_result._Fields>, java.io.Serializable, Cloneable, Comparable<beginReview_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("beginReview_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new beginReview_resultStandardSchemeFactory());
    }

    public int success; // required
    public com.wi.director.thrift.v1.common.SystemException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(beginReview_result.class, metaDataMap);
    }

    public beginReview_result() {
    }

    public beginReview_result(
      int success,
      com.wi.director.thrift.v1.common.SystemException err)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public beginReview_result(beginReview_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetErr()) {
        this.err = new com.wi.director.thrift.v1.common.SystemException(other.err);
      }
    }

    public beginReview_result deepCopy() {
      return new beginReview_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.err = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public beginReview_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.wi.director.thrift.v1.common.SystemException getErr() {
      return this.err;
    }

    public beginReview_result setErr(com.wi.director.thrift.v1.common.SystemException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((com.wi.director.thrift.v1.common.SystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof beginReview_result)
        return this.equals((beginReview_result)that);
      return false;
    }

    public boolean equals(beginReview_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(beginReview_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("beginReview_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class beginReview_resultStandardSchemeFactory implements SchemeFactory {
      public beginReview_resultStandardScheme getScheme() {
        return new beginReview_resultStandardScheme();
      }
    }

    private static class beginReview_resultStandardScheme extends StandardScheme<beginReview_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, beginReview_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new com.wi.director.thrift.v1.common.SystemException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, beginReview_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class endReview_args implements org.apache.thrift.TBase<endReview_args, endReview_args._Fields>, java.io.Serializable, Cloneable, Comparable<endReview_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("endReview_args");

    private static final org.apache.thrift.protocol.TField JOB_TEMPLATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("jobTemplateId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new endReview_argsStandardSchemeFactory());
    }

    public String jobTemplateId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      JOB_TEMPLATE_ID((short)1, "jobTemplateId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // JOB_TEMPLATE_ID
            return JOB_TEMPLATE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.JOB_TEMPLATE_ID, new org.apache.thrift.meta_data.FieldMetaData("jobTemplateId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(endReview_args.class, metaDataMap);
    }

    public endReview_args() {
    }

    public endReview_args(
      String jobTemplateId)
    {
      this();
      this.jobTemplateId = jobTemplateId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public endReview_args(endReview_args other) {
      if (other.isSetJobTemplateId()) {
        this.jobTemplateId = other.jobTemplateId;
      }
    }

    public endReview_args deepCopy() {
      return new endReview_args(this);
    }

    @Override
    public void clear() {
      this.jobTemplateId = null;
    }

    public String getJobTemplateId() {
      return this.jobTemplateId;
    }

    public endReview_args setJobTemplateId(String jobTemplateId) {
      this.jobTemplateId = jobTemplateId;
      return this;
    }

    public void unsetJobTemplateId() {
      this.jobTemplateId = null;
    }

    /** Returns true if field jobTemplateId is set (has been assigned a value) and false otherwise */
    public boolean isSetJobTemplateId() {
      return this.jobTemplateId != null;
    }

    public void setJobTemplateIdIsSet(boolean value) {
      if (!value) {
        this.jobTemplateId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case JOB_TEMPLATE_ID:
        if (value == null) {
          unsetJobTemplateId();
        } else {
          setJobTemplateId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case JOB_TEMPLATE_ID:
        return getJobTemplateId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case JOB_TEMPLATE_ID:
        return isSetJobTemplateId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof endReview_args)
        return this.equals((endReview_args)that);
      return false;
    }

    public boolean equals(endReview_args that) {
      if (that == null)
        return false;

      boolean this_present_jobTemplateId = true && this.isSetJobTemplateId();
      boolean that_present_jobTemplateId = true && that.isSetJobTemplateId();
      if (this_present_jobTemplateId || that_present_jobTemplateId) {
        if (!(this_present_jobTemplateId && that_present_jobTemplateId))
          return false;
        if (!this.jobTemplateId.equals(that.jobTemplateId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_jobTemplateId = true && (isSetJobTemplateId());
      list.add(present_jobTemplateId);
      if (present_jobTemplateId)
        list.add(jobTemplateId);

      return list.hashCode();
    }

    @Override
    public int compareTo(endReview_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetJobTemplateId()).compareTo(other.isSetJobTemplateId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJobTemplateId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobTemplateId, other.jobTemplateId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("endReview_args(");
      boolean first = true;

      sb.append("jobTemplateId:");
      if (this.jobTemplateId == null) {
        sb.append("null");
      } else {
        sb.append(this.jobTemplateId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class endReview_argsStandardSchemeFactory implements SchemeFactory {
      public endReview_argsStandardScheme getScheme() {
        return new endReview_argsStandardScheme();
      }
    }

    private static class endReview_argsStandardScheme extends StandardScheme<endReview_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, endReview_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // JOB_TEMPLATE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jobTemplateId = iprot.readString();
                struct.setJobTemplateIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, endReview_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.jobTemplateId != null) {
          oprot.writeFieldBegin(JOB_TEMPLATE_ID_FIELD_DESC);
          oprot.writeString(struct.jobTemplateId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class endReview_result implements org.apache.thrift.TBase<endReview_result, endReview_result._Fields>, java.io.Serializable, Cloneable, Comparable<endReview_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("endReview_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new endReview_resultStandardSchemeFactory());
    }

    public int success; // required
    public com.wi.director.thrift.v1.common.SystemException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(endReview_result.class, metaDataMap);
    }

    public endReview_result() {
    }

    public endReview_result(
      int success,
      com.wi.director.thrift.v1.common.SystemException err)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public endReview_result(endReview_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetErr()) {
        this.err = new com.wi.director.thrift.v1.common.SystemException(other.err);
      }
    }

    public endReview_result deepCopy() {
      return new endReview_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.err = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public endReview_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.wi.director.thrift.v1.common.SystemException getErr() {
      return this.err;
    }

    public endReview_result setErr(com.wi.director.thrift.v1.common.SystemException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((com.wi.director.thrift.v1.common.SystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof endReview_result)
        return this.equals((endReview_result)that);
      return false;
    }

    public boolean equals(endReview_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(endReview_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("endReview_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class endReview_resultStandardSchemeFactory implements SchemeFactory {
      public endReview_resultStandardScheme getScheme() {
        return new endReview_resultStandardScheme();
      }
    }

    private static class endReview_resultStandardScheme extends StandardScheme<endReview_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, endReview_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new com.wi.director.thrift.v1.common.SystemException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, endReview_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class publishVersion_args implements org.apache.thrift.TBase<publishVersion_args, publishVersion_args._Fields>, java.io.Serializable, Cloneable, Comparable<publishVersion_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("publishVersion_args");

    private static final org.apache.thrift.protocol.TField JOB_TEMPLATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("jobTemplateId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PUBLIC_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("publicVersion", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new publishVersion_argsStandardSchemeFactory());
    }

    public String jobTemplateId; // required
    public int publicVersion; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      JOB_TEMPLATE_ID((short)1, "jobTemplateId"),
      PUBLIC_VERSION((short)2, "publicVersion");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // JOB_TEMPLATE_ID
            return JOB_TEMPLATE_ID;
          case 2: // PUBLIC_VERSION
            return PUBLIC_VERSION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PUBLICVERSION_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.JOB_TEMPLATE_ID, new org.apache.thrift.meta_data.FieldMetaData("jobTemplateId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PUBLIC_VERSION, new org.apache.thrift.meta_data.FieldMetaData("publicVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(publishVersion_args.class, metaDataMap);
    }

    public publishVersion_args() {
    }

    public publishVersion_args(
      String jobTemplateId,
      int publicVersion)
    {
      this();
      this.jobTemplateId = jobTemplateId;
      this.publicVersion = publicVersion;
      setPublicVersionIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public publishVersion_args(publishVersion_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetJobTemplateId()) {
        this.jobTemplateId = other.jobTemplateId;
      }
      this.publicVersion = other.publicVersion;
    }

    public publishVersion_args deepCopy() {
      return new publishVersion_args(this);
    }

    @Override
    public void clear() {
      this.jobTemplateId = null;
      setPublicVersionIsSet(false);
      this.publicVersion = 0;
    }

    public String getJobTemplateId() {
      return this.jobTemplateId;
    }

    public publishVersion_args setJobTemplateId(String jobTemplateId) {
      this.jobTemplateId = jobTemplateId;
      return this;
    }

    public void unsetJobTemplateId() {
      this.jobTemplateId = null;
    }

    /** Returns true if field jobTemplateId is set (has been assigned a value) and false otherwise */
    public boolean isSetJobTemplateId() {
      return this.jobTemplateId != null;
    }

    public void setJobTemplateIdIsSet(boolean value) {
      if (!value) {
        this.jobTemplateId = null;
      }
    }

    public int getPublicVersion() {
      return this.publicVersion;
    }

    public publishVersion_args setPublicVersion(int publicVersion) {
      this.publicVersion = publicVersion;
      setPublicVersionIsSet(true);
      return this;
    }

    public void unsetPublicVersion() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PUBLICVERSION_ISSET_ID);
    }

    /** Returns true if field publicVersion is set (has been assigned a value) and false otherwise */
    public boolean isSetPublicVersion() {
      return EncodingUtils.testBit(__isset_bitfield, __PUBLICVERSION_ISSET_ID);
    }

    public void setPublicVersionIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PUBLICVERSION_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case JOB_TEMPLATE_ID:
        if (value == null) {
          unsetJobTemplateId();
        } else {
          setJobTemplateId((String)value);
        }
        break;

      case PUBLIC_VERSION:
        if (value == null) {
          unsetPublicVersion();
        } else {
          setPublicVersion((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case JOB_TEMPLATE_ID:
        return getJobTemplateId();

      case PUBLIC_VERSION:
        return getPublicVersion();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case JOB_TEMPLATE_ID:
        return isSetJobTemplateId();
      case PUBLIC_VERSION:
        return isSetPublicVersion();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof publishVersion_args)
        return this.equals((publishVersion_args)that);
      return false;
    }

    public boolean equals(publishVersion_args that) {
      if (that == null)
        return false;

      boolean this_present_jobTemplateId = true && this.isSetJobTemplateId();
      boolean that_present_jobTemplateId = true && that.isSetJobTemplateId();
      if (this_present_jobTemplateId || that_present_jobTemplateId) {
        if (!(this_present_jobTemplateId && that_present_jobTemplateId))
          return false;
        if (!this.jobTemplateId.equals(that.jobTemplateId))
          return false;
      }

      boolean this_present_publicVersion = true;
      boolean that_present_publicVersion = true;
      if (this_present_publicVersion || that_present_publicVersion) {
        if (!(this_present_publicVersion && that_present_publicVersion))
          return false;
        if (this.publicVersion != that.publicVersion)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_jobTemplateId = true && (isSetJobTemplateId());
      list.add(present_jobTemplateId);
      if (present_jobTemplateId)
        list.add(jobTemplateId);

      boolean present_publicVersion = true;
      list.add(present_publicVersion);
      if (present_publicVersion)
        list.add(publicVersion);

      return list.hashCode();
    }

    @Override
    public int compareTo(publishVersion_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetJobTemplateId()).compareTo(other.isSetJobTemplateId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJobTemplateId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobTemplateId, other.jobTemplateId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPublicVersion()).compareTo(other.isSetPublicVersion());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPublicVersion()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.publicVersion, other.publicVersion);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("publishVersion_args(");
      boolean first = true;

      sb.append("jobTemplateId:");
      if (this.jobTemplateId == null) {
        sb.append("null");
      } else {
        sb.append(this.jobTemplateId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("publicVersion:");
      sb.append(this.publicVersion);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class publishVersion_argsStandardSchemeFactory implements SchemeFactory {
      public publishVersion_argsStandardScheme getScheme() {
        return new publishVersion_argsStandardScheme();
      }
    }

    private static class publishVersion_argsStandardScheme extends StandardScheme<publishVersion_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, publishVersion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // JOB_TEMPLATE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jobTemplateId = iprot.readString();
                struct.setJobTemplateIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PUBLIC_VERSION
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.publicVersion = iprot.readI32();
                struct.setPublicVersionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, publishVersion_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.jobTemplateId != null) {
          oprot.writeFieldBegin(JOB_TEMPLATE_ID_FIELD_DESC);
          oprot.writeString(struct.jobTemplateId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PUBLIC_VERSION_FIELD_DESC);
        oprot.writeI32(struct.publicVersion);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class publishVersion_result implements org.apache.thrift.TBase<publishVersion_result, publishVersion_result._Fields>, java.io.Serializable, Cloneable, Comparable<publishVersion_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("publishVersion_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new publishVersion_resultStandardSchemeFactory());
    }

    public JobTemplate success; // required
    public com.wi.director.thrift.v1.common.SystemException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JobTemplate.class)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(publishVersion_result.class, metaDataMap);
    }

    public publishVersion_result() {
    }

    public publishVersion_result(
      JobTemplate success,
      com.wi.director.thrift.v1.common.SystemException err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public publishVersion_result(publishVersion_result other) {
      if (other.isSetSuccess()) {
        this.success = new JobTemplate(other.success);
      }
      if (other.isSetErr()) {
        this.err = new com.wi.director.thrift.v1.common.SystemException(other.err);
      }
    }

    public publishVersion_result deepCopy() {
      return new publishVersion_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public JobTemplate getSuccess() {
      return this.success;
    }

    public publishVersion_result setSuccess(JobTemplate success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.wi.director.thrift.v1.common.SystemException getErr() {
      return this.err;
    }

    public publishVersion_result setErr(com.wi.director.thrift.v1.common.SystemException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((JobTemplate)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((com.wi.director.thrift.v1.common.SystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof publishVersion_result)
        return this.equals((publishVersion_result)that);
      return false;
    }

    public boolean equals(publishVersion_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(publishVersion_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("publishVersion_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class publishVersion_resultStandardSchemeFactory implements SchemeFactory {
      public publishVersion_resultStandardScheme getScheme() {
        return new publishVersion_resultStandardScheme();
      }
    }

    private static class publishVersion_resultStandardScheme extends StandardScheme<publishVersion_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, publishVersion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new JobTemplate();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new com.wi.director.thrift.v1.common.SystemException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, publishVersion_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class updateStepGroup_args implements org.apache.thrift.TBase<updateStepGroup_args, updateStepGroup_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateStepGroup_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateStepGroup_args");

    private static final org.apache.thrift.protocol.TField JOB_TEMPLATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("jobTemplateId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField STEP_GROUP_FIELD_DESC = new org.apache.thrift.protocol.TField("stepGroup", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateStepGroup_argsStandardSchemeFactory());
    }

    public String jobTemplateId; // required
    public com.wi.director.thrift.v1.step.BaseStep stepGroup; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      JOB_TEMPLATE_ID((short)1, "jobTemplateId"),
      STEP_GROUP((short)2, "stepGroup");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // JOB_TEMPLATE_ID
            return JOB_TEMPLATE_ID;
          case 2: // STEP_GROUP
            return STEP_GROUP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.JOB_TEMPLATE_ID, new org.apache.thrift.meta_data.FieldMetaData("jobTemplateId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.STEP_GROUP, new org.apache.thrift.meta_data.FieldMetaData("stepGroup", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.step.BaseStep.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateStepGroup_args.class, metaDataMap);
    }

    public updateStepGroup_args() {
    }

    public updateStepGroup_args(
      String jobTemplateId,
      com.wi.director.thrift.v1.step.BaseStep stepGroup)
    {
      this();
      this.jobTemplateId = jobTemplateId;
      this.stepGroup = stepGroup;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateStepGroup_args(updateStepGroup_args other) {
      if (other.isSetJobTemplateId()) {
        this.jobTemplateId = other.jobTemplateId;
      }
      if (other.isSetStepGroup()) {
        this.stepGroup = new com.wi.director.thrift.v1.step.BaseStep(other.stepGroup);
      }
    }

    public updateStepGroup_args deepCopy() {
      return new updateStepGroup_args(this);
    }

    @Override
    public void clear() {
      this.jobTemplateId = null;
      this.stepGroup = null;
    }

    public String getJobTemplateId() {
      return this.jobTemplateId;
    }

    public updateStepGroup_args setJobTemplateId(String jobTemplateId) {
      this.jobTemplateId = jobTemplateId;
      return this;
    }

    public void unsetJobTemplateId() {
      this.jobTemplateId = null;
    }

    /** Returns true if field jobTemplateId is set (has been assigned a value) and false otherwise */
    public boolean isSetJobTemplateId() {
      return this.jobTemplateId != null;
    }

    public void setJobTemplateIdIsSet(boolean value) {
      if (!value) {
        this.jobTemplateId = null;
      }
    }

    public com.wi.director.thrift.v1.step.BaseStep getStepGroup() {
      return this.stepGroup;
    }

    public updateStepGroup_args setStepGroup(com.wi.director.thrift.v1.step.BaseStep stepGroup) {
      this.stepGroup = stepGroup;
      return this;
    }

    public void unsetStepGroup() {
      this.stepGroup = null;
    }

    /** Returns true if field stepGroup is set (has been assigned a value) and false otherwise */
    public boolean isSetStepGroup() {
      return this.stepGroup != null;
    }

    public void setStepGroupIsSet(boolean value) {
      if (!value) {
        this.stepGroup = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case JOB_TEMPLATE_ID:
        if (value == null) {
          unsetJobTemplateId();
        } else {
          setJobTemplateId((String)value);
        }
        break;

      case STEP_GROUP:
        if (value == null) {
          unsetStepGroup();
        } else {
          setStepGroup((com.wi.director.thrift.v1.step.BaseStep)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case JOB_TEMPLATE_ID:
        return getJobTemplateId();

      case STEP_GROUP:
        return getStepGroup();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case JOB_TEMPLATE_ID:
        return isSetJobTemplateId();
      case STEP_GROUP:
        return isSetStepGroup();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateStepGroup_args)
        return this.equals((updateStepGroup_args)that);
      return false;
    }

    public boolean equals(updateStepGroup_args that) {
      if (that == null)
        return false;

      boolean this_present_jobTemplateId = true && this.isSetJobTemplateId();
      boolean that_present_jobTemplateId = true && that.isSetJobTemplateId();
      if (this_present_jobTemplateId || that_present_jobTemplateId) {
        if (!(this_present_jobTemplateId && that_present_jobTemplateId))
          return false;
        if (!this.jobTemplateId.equals(that.jobTemplateId))
          return false;
      }

      boolean this_present_stepGroup = true && this.isSetStepGroup();
      boolean that_present_stepGroup = true && that.isSetStepGroup();
      if (this_present_stepGroup || that_present_stepGroup) {
        if (!(this_present_stepGroup && that_present_stepGroup))
          return false;
        if (!this.stepGroup.equals(that.stepGroup))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_jobTemplateId = true && (isSetJobTemplateId());
      list.add(present_jobTemplateId);
      if (present_jobTemplateId)
        list.add(jobTemplateId);

      boolean present_stepGroup = true && (isSetStepGroup());
      list.add(present_stepGroup);
      if (present_stepGroup)
        list.add(stepGroup);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateStepGroup_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetJobTemplateId()).compareTo(other.isSetJobTemplateId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJobTemplateId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobTemplateId, other.jobTemplateId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStepGroup()).compareTo(other.isSetStepGroup());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStepGroup()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stepGroup, other.stepGroup);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateStepGroup_args(");
      boolean first = true;

      sb.append("jobTemplateId:");
      if (this.jobTemplateId == null) {
        sb.append("null");
      } else {
        sb.append(this.jobTemplateId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("stepGroup:");
      if (this.stepGroup == null) {
        sb.append("null");
      } else {
        sb.append(this.stepGroup);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (stepGroup != null) {
        stepGroup.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateStepGroup_argsStandardSchemeFactory implements SchemeFactory {
      public updateStepGroup_argsStandardScheme getScheme() {
        return new updateStepGroup_argsStandardScheme();
      }
    }

    private static class updateStepGroup_argsStandardScheme extends StandardScheme<updateStepGroup_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateStepGroup_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // JOB_TEMPLATE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jobTemplateId = iprot.readString();
                struct.setJobTemplateIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STEP_GROUP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.stepGroup = new com.wi.director.thrift.v1.step.BaseStep();
                struct.stepGroup.read(iprot);
                struct.setStepGroupIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateStepGroup_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.jobTemplateId != null) {
          oprot.writeFieldBegin(JOB_TEMPLATE_ID_FIELD_DESC);
          oprot.writeString(struct.jobTemplateId);
          oprot.writeFieldEnd();
        }
        if (struct.stepGroup != null) {
          oprot.writeFieldBegin(STEP_GROUP_FIELD_DESC);
          struct.stepGroup.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class updateStepGroup_result implements org.apache.thrift.TBase<updateStepGroup_result, updateStepGroup_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateStepGroup_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateStepGroup_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateStepGroup_resultStandardSchemeFactory());
    }

    public JobTemplate success; // required
    public com.wi.director.thrift.v1.common.SystemException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JobTemplate.class)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateStepGroup_result.class, metaDataMap);
    }

    public updateStepGroup_result() {
    }

    public updateStepGroup_result(
      JobTemplate success,
      com.wi.director.thrift.v1.common.SystemException err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateStepGroup_result(updateStepGroup_result other) {
      if (other.isSetSuccess()) {
        this.success = new JobTemplate(other.success);
      }
      if (other.isSetErr()) {
        this.err = new com.wi.director.thrift.v1.common.SystemException(other.err);
      }
    }

    public updateStepGroup_result deepCopy() {
      return new updateStepGroup_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public JobTemplate getSuccess() {
      return this.success;
    }

    public updateStepGroup_result setSuccess(JobTemplate success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.wi.director.thrift.v1.common.SystemException getErr() {
      return this.err;
    }

    public updateStepGroup_result setErr(com.wi.director.thrift.v1.common.SystemException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((JobTemplate)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((com.wi.director.thrift.v1.common.SystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateStepGroup_result)
        return this.equals((updateStepGroup_result)that);
      return false;
    }

    public boolean equals(updateStepGroup_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateStepGroup_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateStepGroup_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateStepGroup_resultStandardSchemeFactory implements SchemeFactory {
      public updateStepGroup_resultStandardScheme getScheme() {
        return new updateStepGroup_resultStandardScheme();
      }
    }

    private static class updateStepGroup_resultStandardScheme extends StandardScheme<updateStepGroup_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateStepGroup_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new JobTemplate();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new com.wi.director.thrift.v1.common.SystemException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateStepGroup_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class addStep_args implements org.apache.thrift.TBase<addStep_args, addStep_args._Fields>, java.io.Serializable, Cloneable, Comparable<addStep_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addStep_args");

    private static final org.apache.thrift.protocol.TField JOB_TEMPLATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("jobTemplateId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PARENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parentId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField STEP_FIELD_DESC = new org.apache.thrift.protocol.TField("step", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField POSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("position", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField REPLACE_FIELD_DESC = new org.apache.thrift.protocol.TField("replace", org.apache.thrift.protocol.TType.BOOL, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addStep_argsStandardSchemeFactory());
    }

    public String jobTemplateId; // required
    public String parentId; // required
    public com.wi.director.thrift.v1.step.BaseStep step; // required
    public int position; // required
    public boolean replace; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      JOB_TEMPLATE_ID((short)1, "jobTemplateId"),
      PARENT_ID((short)2, "parentId"),
      STEP((short)3, "step"),
      POSITION((short)4, "position"),
      REPLACE((short)5, "replace");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // JOB_TEMPLATE_ID
            return JOB_TEMPLATE_ID;
          case 2: // PARENT_ID
            return PARENT_ID;
          case 3: // STEP
            return STEP;
          case 4: // POSITION
            return POSITION;
          case 5: // REPLACE
            return REPLACE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __POSITION_ISSET_ID = 0;
    private static final int __REPLACE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.JOB_TEMPLATE_ID, new org.apache.thrift.meta_data.FieldMetaData("jobTemplateId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PARENT_ID, new org.apache.thrift.meta_data.FieldMetaData("parentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.STEP, new org.apache.thrift.meta_data.FieldMetaData("step", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.step.BaseStep.class)));
      tmpMap.put(_Fields.POSITION, new org.apache.thrift.meta_data.FieldMetaData("position", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.REPLACE, new org.apache.thrift.meta_data.FieldMetaData("replace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addStep_args.class, metaDataMap);
    }

    public addStep_args() {
    }

    public addStep_args(
      String jobTemplateId,
      String parentId,
      com.wi.director.thrift.v1.step.BaseStep step,
      int position,
      boolean replace)
    {
      this();
      this.jobTemplateId = jobTemplateId;
      this.parentId = parentId;
      this.step = step;
      this.position = position;
      setPositionIsSet(true);
      this.replace = replace;
      setReplaceIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addStep_args(addStep_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetJobTemplateId()) {
        this.jobTemplateId = other.jobTemplateId;
      }
      if (other.isSetParentId()) {
        this.parentId = other.parentId;
      }
      if (other.isSetStep()) {
        this.step = new com.wi.director.thrift.v1.step.BaseStep(other.step);
      }
      this.position = other.position;
      this.replace = other.replace;
    }

    public addStep_args deepCopy() {
      return new addStep_args(this);
    }

    @Override
    public void clear() {
      this.jobTemplateId = null;
      this.parentId = null;
      this.step = null;
      setPositionIsSet(false);
      this.position = 0;
      setReplaceIsSet(false);
      this.replace = false;
    }

    public String getJobTemplateId() {
      return this.jobTemplateId;
    }

    public addStep_args setJobTemplateId(String jobTemplateId) {
      this.jobTemplateId = jobTemplateId;
      return this;
    }

    public void unsetJobTemplateId() {
      this.jobTemplateId = null;
    }

    /** Returns true if field jobTemplateId is set (has been assigned a value) and false otherwise */
    public boolean isSetJobTemplateId() {
      return this.jobTemplateId != null;
    }

    public void setJobTemplateIdIsSet(boolean value) {
      if (!value) {
        this.jobTemplateId = null;
      }
    }

    public String getParentId() {
      return this.parentId;
    }

    public addStep_args setParentId(String parentId) {
      this.parentId = parentId;
      return this;
    }

    public void unsetParentId() {
      this.parentId = null;
    }

    /** Returns true if field parentId is set (has been assigned a value) and false otherwise */
    public boolean isSetParentId() {
      return this.parentId != null;
    }

    public void setParentIdIsSet(boolean value) {
      if (!value) {
        this.parentId = null;
      }
    }

    public com.wi.director.thrift.v1.step.BaseStep getStep() {
      return this.step;
    }

    public addStep_args setStep(com.wi.director.thrift.v1.step.BaseStep step) {
      this.step = step;
      return this;
    }

    public void unsetStep() {
      this.step = null;
    }

    /** Returns true if field step is set (has been assigned a value) and false otherwise */
    public boolean isSetStep() {
      return this.step != null;
    }

    public void setStepIsSet(boolean value) {
      if (!value) {
        this.step = null;
      }
    }

    public int getPosition() {
      return this.position;
    }

    public addStep_args setPosition(int position) {
      this.position = position;
      setPositionIsSet(true);
      return this;
    }

    public void unsetPosition() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POSITION_ISSET_ID);
    }

    /** Returns true if field position is set (has been assigned a value) and false otherwise */
    public boolean isSetPosition() {
      return EncodingUtils.testBit(__isset_bitfield, __POSITION_ISSET_ID);
    }

    public void setPositionIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POSITION_ISSET_ID, value);
    }

    public boolean isReplace() {
      return this.replace;
    }

    public addStep_args setReplace(boolean replace) {
      this.replace = replace;
      setReplaceIsSet(true);
      return this;
    }

    public void unsetReplace() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPLACE_ISSET_ID);
    }

    /** Returns true if field replace is set (has been assigned a value) and false otherwise */
    public boolean isSetReplace() {
      return EncodingUtils.testBit(__isset_bitfield, __REPLACE_ISSET_ID);
    }

    public void setReplaceIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPLACE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case JOB_TEMPLATE_ID:
        if (value == null) {
          unsetJobTemplateId();
        } else {
          setJobTemplateId((String)value);
        }
        break;

      case PARENT_ID:
        if (value == null) {
          unsetParentId();
        } else {
          setParentId((String)value);
        }
        break;

      case STEP:
        if (value == null) {
          unsetStep();
        } else {
          setStep((com.wi.director.thrift.v1.step.BaseStep)value);
        }
        break;

      case POSITION:
        if (value == null) {
          unsetPosition();
        } else {
          setPosition((Integer)value);
        }
        break;

      case REPLACE:
        if (value == null) {
          unsetReplace();
        } else {
          setReplace((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case JOB_TEMPLATE_ID:
        return getJobTemplateId();

      case PARENT_ID:
        return getParentId();

      case STEP:
        return getStep();

      case POSITION:
        return getPosition();

      case REPLACE:
        return isReplace();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case JOB_TEMPLATE_ID:
        return isSetJobTemplateId();
      case PARENT_ID:
        return isSetParentId();
      case STEP:
        return isSetStep();
      case POSITION:
        return isSetPosition();
      case REPLACE:
        return isSetReplace();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addStep_args)
        return this.equals((addStep_args)that);
      return false;
    }

    public boolean equals(addStep_args that) {
      if (that == null)
        return false;

      boolean this_present_jobTemplateId = true && this.isSetJobTemplateId();
      boolean that_present_jobTemplateId = true && that.isSetJobTemplateId();
      if (this_present_jobTemplateId || that_present_jobTemplateId) {
        if (!(this_present_jobTemplateId && that_present_jobTemplateId))
          return false;
        if (!this.jobTemplateId.equals(that.jobTemplateId))
          return false;
      }

      boolean this_present_parentId = true && this.isSetParentId();
      boolean that_present_parentId = true && that.isSetParentId();
      if (this_present_parentId || that_present_parentId) {
        if (!(this_present_parentId && that_present_parentId))
          return false;
        if (!this.parentId.equals(that.parentId))
          return false;
      }

      boolean this_present_step = true && this.isSetStep();
      boolean that_present_step = true && that.isSetStep();
      if (this_present_step || that_present_step) {
        if (!(this_present_step && that_present_step))
          return false;
        if (!this.step.equals(that.step))
          return false;
      }

      boolean this_present_position = true;
      boolean that_present_position = true;
      if (this_present_position || that_present_position) {
        if (!(this_present_position && that_present_position))
          return false;
        if (this.position != that.position)
          return false;
      }

      boolean this_present_replace = true;
      boolean that_present_replace = true;
      if (this_present_replace || that_present_replace) {
        if (!(this_present_replace && that_present_replace))
          return false;
        if (this.replace != that.replace)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_jobTemplateId = true && (isSetJobTemplateId());
      list.add(present_jobTemplateId);
      if (present_jobTemplateId)
        list.add(jobTemplateId);

      boolean present_parentId = true && (isSetParentId());
      list.add(present_parentId);
      if (present_parentId)
        list.add(parentId);

      boolean present_step = true && (isSetStep());
      list.add(present_step);
      if (present_step)
        list.add(step);

      boolean present_position = true;
      list.add(present_position);
      if (present_position)
        list.add(position);

      boolean present_replace = true;
      list.add(present_replace);
      if (present_replace)
        list.add(replace);

      return list.hashCode();
    }

    @Override
    public int compareTo(addStep_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetJobTemplateId()).compareTo(other.isSetJobTemplateId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJobTemplateId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobTemplateId, other.jobTemplateId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParentId()).compareTo(other.isSetParentId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParentId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentId, other.parentId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStep()).compareTo(other.isSetStep());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStep()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.step, other.step);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPosition()).compareTo(other.isSetPosition());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPosition()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.position, other.position);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReplace()).compareTo(other.isSetReplace());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReplace()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.replace, other.replace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addStep_args(");
      boolean first = true;

      sb.append("jobTemplateId:");
      if (this.jobTemplateId == null) {
        sb.append("null");
      } else {
        sb.append(this.jobTemplateId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("parentId:");
      if (this.parentId == null) {
        sb.append("null");
      } else {
        sb.append(this.parentId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("step:");
      if (this.step == null) {
        sb.append("null");
      } else {
        sb.append(this.step);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("position:");
      sb.append(this.position);
      first = false;
      if (!first) sb.append(", ");
      sb.append("replace:");
      sb.append(this.replace);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (step != null) {
        step.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addStep_argsStandardSchemeFactory implements SchemeFactory {
      public addStep_argsStandardScheme getScheme() {
        return new addStep_argsStandardScheme();
      }
    }

    private static class addStep_argsStandardScheme extends StandardScheme<addStep_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addStep_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // JOB_TEMPLATE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jobTemplateId = iprot.readString();
                struct.setJobTemplateIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.parentId = iprot.readString();
                struct.setParentIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // STEP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.step = new com.wi.director.thrift.v1.step.BaseStep();
                struct.step.read(iprot);
                struct.setStepIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // POSITION
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.position = iprot.readI32();
                struct.setPositionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // REPLACE
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.replace = iprot.readBool();
                struct.setReplaceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addStep_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.jobTemplateId != null) {
          oprot.writeFieldBegin(JOB_TEMPLATE_ID_FIELD_DESC);
          oprot.writeString(struct.jobTemplateId);
          oprot.writeFieldEnd();
        }
        if (struct.parentId != null) {
          oprot.writeFieldBegin(PARENT_ID_FIELD_DESC);
          oprot.writeString(struct.parentId);
          oprot.writeFieldEnd();
        }
        if (struct.step != null) {
          oprot.writeFieldBegin(STEP_FIELD_DESC);
          struct.step.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(POSITION_FIELD_DESC);
        oprot.writeI32(struct.position);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(REPLACE_FIELD_DESC);
        oprot.writeBool(struct.replace);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class addStep_result implements org.apache.thrift.TBase<addStep_result, addStep_result._Fields>, java.io.Serializable, Cloneable, Comparable<addStep_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addStep_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addStep_resultStandardSchemeFactory());
    }

    public JobTemplate success; // required
    public com.wi.director.thrift.v1.common.SystemException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JobTemplate.class)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addStep_result.class, metaDataMap);
    }

    public addStep_result() {
    }

    public addStep_result(
      JobTemplate success,
      com.wi.director.thrift.v1.common.SystemException err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addStep_result(addStep_result other) {
      if (other.isSetSuccess()) {
        this.success = new JobTemplate(other.success);
      }
      if (other.isSetErr()) {
        this.err = new com.wi.director.thrift.v1.common.SystemException(other.err);
      }
    }

    public addStep_result deepCopy() {
      return new addStep_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public JobTemplate getSuccess() {
      return this.success;
    }

    public addStep_result setSuccess(JobTemplate success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.wi.director.thrift.v1.common.SystemException getErr() {
      return this.err;
    }

    public addStep_result setErr(com.wi.director.thrift.v1.common.SystemException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((JobTemplate)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((com.wi.director.thrift.v1.common.SystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addStep_result)
        return this.equals((addStep_result)that);
      return false;
    }

    public boolean equals(addStep_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(addStep_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addStep_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addStep_resultStandardSchemeFactory implements SchemeFactory {
      public addStep_resultStandardScheme getScheme() {
        return new addStep_resultStandardScheme();
      }
    }

    private static class addStep_resultStandardScheme extends StandardScheme<addStep_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addStep_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new JobTemplate();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new com.wi.director.thrift.v1.common.SystemException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addStep_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class addStepGroup_args implements org.apache.thrift.TBase<addStepGroup_args, addStepGroup_args._Fields>, java.io.Serializable, Cloneable, Comparable<addStepGroup_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addStepGroup_args");

    private static final org.apache.thrift.protocol.TField JOB_TEMPLATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("jobTemplateId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PARENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parentId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField STEP_GROUP_FIELD_DESC = new org.apache.thrift.protocol.TField("stepGroup", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField POSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("position", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField REPLACE_FIELD_DESC = new org.apache.thrift.protocol.TField("replace", org.apache.thrift.protocol.TType.BOOL, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addStepGroup_argsStandardSchemeFactory());
    }

    public String jobTemplateId; // required
    public String parentId; // required
    public com.wi.director.thrift.v1.step.BaseStep stepGroup; // required
    public int position; // required
    public boolean replace; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      JOB_TEMPLATE_ID((short)1, "jobTemplateId"),
      PARENT_ID((short)2, "parentId"),
      STEP_GROUP((short)3, "stepGroup"),
      POSITION((short)4, "position"),
      REPLACE((short)5, "replace");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // JOB_TEMPLATE_ID
            return JOB_TEMPLATE_ID;
          case 2: // PARENT_ID
            return PARENT_ID;
          case 3: // STEP_GROUP
            return STEP_GROUP;
          case 4: // POSITION
            return POSITION;
          case 5: // REPLACE
            return REPLACE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __POSITION_ISSET_ID = 0;
    private static final int __REPLACE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.JOB_TEMPLATE_ID, new org.apache.thrift.meta_data.FieldMetaData("jobTemplateId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PARENT_ID, new org.apache.thrift.meta_data.FieldMetaData("parentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.STEP_GROUP, new org.apache.thrift.meta_data.FieldMetaData("stepGroup", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.step.BaseStep.class)));
      tmpMap.put(_Fields.POSITION, new org.apache.thrift.meta_data.FieldMetaData("position", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.REPLACE, new org.apache.thrift.meta_data.FieldMetaData("replace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addStepGroup_args.class, metaDataMap);
    }

    public addStepGroup_args() {
    }

    public addStepGroup_args(
      String jobTemplateId,
      String parentId,
      com.wi.director.thrift.v1.step.BaseStep stepGroup,
      int position,
      boolean replace)
    {
      this();
      this.jobTemplateId = jobTemplateId;
      this.parentId = parentId;
      this.stepGroup = stepGroup;
      this.position = position;
      setPositionIsSet(true);
      this.replace = replace;
      setReplaceIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addStepGroup_args(addStepGroup_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetJobTemplateId()) {
        this.jobTemplateId = other.jobTemplateId;
      }
      if (other.isSetParentId()) {
        this.parentId = other.parentId;
      }
      if (other.isSetStepGroup()) {
        this.stepGroup = new com.wi.director.thrift.v1.step.BaseStep(other.stepGroup);
      }
      this.position = other.position;
      this.replace = other.replace;
    }

    public addStepGroup_args deepCopy() {
      return new addStepGroup_args(this);
    }

    @Override
    public void clear() {
      this.jobTemplateId = null;
      this.parentId = null;
      this.stepGroup = null;
      setPositionIsSet(false);
      this.position = 0;
      setReplaceIsSet(false);
      this.replace = false;
    }

    public String getJobTemplateId() {
      return this.jobTemplateId;
    }

    public addStepGroup_args setJobTemplateId(String jobTemplateId) {
      this.jobTemplateId = jobTemplateId;
      return this;
    }

    public void unsetJobTemplateId() {
      this.jobTemplateId = null;
    }

    /** Returns true if field jobTemplateId is set (has been assigned a value) and false otherwise */
    public boolean isSetJobTemplateId() {
      return this.jobTemplateId != null;
    }

    public void setJobTemplateIdIsSet(boolean value) {
      if (!value) {
        this.jobTemplateId = null;
      }
    }

    public String getParentId() {
      return this.parentId;
    }

    public addStepGroup_args setParentId(String parentId) {
      this.parentId = parentId;
      return this;
    }

    public void unsetParentId() {
      this.parentId = null;
    }

    /** Returns true if field parentId is set (has been assigned a value) and false otherwise */
    public boolean isSetParentId() {
      return this.parentId != null;
    }

    public void setParentIdIsSet(boolean value) {
      if (!value) {
        this.parentId = null;
      }
    }

    public com.wi.director.thrift.v1.step.BaseStep getStepGroup() {
      return this.stepGroup;
    }

    public addStepGroup_args setStepGroup(com.wi.director.thrift.v1.step.BaseStep stepGroup) {
      this.stepGroup = stepGroup;
      return this;
    }

    public void unsetStepGroup() {
      this.stepGroup = null;
    }

    /** Returns true if field stepGroup is set (has been assigned a value) and false otherwise */
    public boolean isSetStepGroup() {
      return this.stepGroup != null;
    }

    public void setStepGroupIsSet(boolean value) {
      if (!value) {
        this.stepGroup = null;
      }
    }

    public int getPosition() {
      return this.position;
    }

    public addStepGroup_args setPosition(int position) {
      this.position = position;
      setPositionIsSet(true);
      return this;
    }

    public void unsetPosition() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POSITION_ISSET_ID);
    }

    /** Returns true if field position is set (has been assigned a value) and false otherwise */
    public boolean isSetPosition() {
      return EncodingUtils.testBit(__isset_bitfield, __POSITION_ISSET_ID);
    }

    public void setPositionIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POSITION_ISSET_ID, value);
    }

    public boolean isReplace() {
      return this.replace;
    }

    public addStepGroup_args setReplace(boolean replace) {
      this.replace = replace;
      setReplaceIsSet(true);
      return this;
    }

    public void unsetReplace() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPLACE_ISSET_ID);
    }

    /** Returns true if field replace is set (has been assigned a value) and false otherwise */
    public boolean isSetReplace() {
      return EncodingUtils.testBit(__isset_bitfield, __REPLACE_ISSET_ID);
    }

    public void setReplaceIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPLACE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case JOB_TEMPLATE_ID:
        if (value == null) {
          unsetJobTemplateId();
        } else {
          setJobTemplateId((String)value);
        }
        break;

      case PARENT_ID:
        if (value == null) {
          unsetParentId();
        } else {
          setParentId((String)value);
        }
        break;

      case STEP_GROUP:
        if (value == null) {
          unsetStepGroup();
        } else {
          setStepGroup((com.wi.director.thrift.v1.step.BaseStep)value);
        }
        break;

      case POSITION:
        if (value == null) {
          unsetPosition();
        } else {
          setPosition((Integer)value);
        }
        break;

      case REPLACE:
        if (value == null) {
          unsetReplace();
        } else {
          setReplace((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case JOB_TEMPLATE_ID:
        return getJobTemplateId();

      case PARENT_ID:
        return getParentId();

      case STEP_GROUP:
        return getStepGroup();

      case POSITION:
        return getPosition();

      case REPLACE:
        return isReplace();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case JOB_TEMPLATE_ID:
        return isSetJobTemplateId();
      case PARENT_ID:
        return isSetParentId();
      case STEP_GROUP:
        return isSetStepGroup();
      case POSITION:
        return isSetPosition();
      case REPLACE:
        return isSetReplace();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addStepGroup_args)
        return this.equals((addStepGroup_args)that);
      return false;
    }

    public boolean equals(addStepGroup_args that) {
      if (that == null)
        return false;

      boolean this_present_jobTemplateId = true && this.isSetJobTemplateId();
      boolean that_present_jobTemplateId = true && that.isSetJobTemplateId();
      if (this_present_jobTemplateId || that_present_jobTemplateId) {
        if (!(this_present_jobTemplateId && that_present_jobTemplateId))
          return false;
        if (!this.jobTemplateId.equals(that.jobTemplateId))
          return false;
      }

      boolean this_present_parentId = true && this.isSetParentId();
      boolean that_present_parentId = true && that.isSetParentId();
      if (this_present_parentId || that_present_parentId) {
        if (!(this_present_parentId && that_present_parentId))
          return false;
        if (!this.parentId.equals(that.parentId))
          return false;
      }

      boolean this_present_stepGroup = true && this.isSetStepGroup();
      boolean that_present_stepGroup = true && that.isSetStepGroup();
      if (this_present_stepGroup || that_present_stepGroup) {
        if (!(this_present_stepGroup && that_present_stepGroup))
          return false;
        if (!this.stepGroup.equals(that.stepGroup))
          return false;
      }

      boolean this_present_position = true;
      boolean that_present_position = true;
      if (this_present_position || that_present_position) {
        if (!(this_present_position && that_present_position))
          return false;
        if (this.position != that.position)
          return false;
      }

      boolean this_present_replace = true;
      boolean that_present_replace = true;
      if (this_present_replace || that_present_replace) {
        if (!(this_present_replace && that_present_replace))
          return false;
        if (this.replace != that.replace)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_jobTemplateId = true && (isSetJobTemplateId());
      list.add(present_jobTemplateId);
      if (present_jobTemplateId)
        list.add(jobTemplateId);

      boolean present_parentId = true && (isSetParentId());
      list.add(present_parentId);
      if (present_parentId)
        list.add(parentId);

      boolean present_stepGroup = true && (isSetStepGroup());
      list.add(present_stepGroup);
      if (present_stepGroup)
        list.add(stepGroup);

      boolean present_position = true;
      list.add(present_position);
      if (present_position)
        list.add(position);

      boolean present_replace = true;
      list.add(present_replace);
      if (present_replace)
        list.add(replace);

      return list.hashCode();
    }

    @Override
    public int compareTo(addStepGroup_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetJobTemplateId()).compareTo(other.isSetJobTemplateId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJobTemplateId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobTemplateId, other.jobTemplateId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParentId()).compareTo(other.isSetParentId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParentId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentId, other.parentId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStepGroup()).compareTo(other.isSetStepGroup());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStepGroup()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stepGroup, other.stepGroup);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPosition()).compareTo(other.isSetPosition());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPosition()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.position, other.position);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReplace()).compareTo(other.isSetReplace());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReplace()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.replace, other.replace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addStepGroup_args(");
      boolean first = true;

      sb.append("jobTemplateId:");
      if (this.jobTemplateId == null) {
        sb.append("null");
      } else {
        sb.append(this.jobTemplateId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("parentId:");
      if (this.parentId == null) {
        sb.append("null");
      } else {
        sb.append(this.parentId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("stepGroup:");
      if (this.stepGroup == null) {
        sb.append("null");
      } else {
        sb.append(this.stepGroup);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("position:");
      sb.append(this.position);
      first = false;
      if (!first) sb.append(", ");
      sb.append("replace:");
      sb.append(this.replace);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (stepGroup != null) {
        stepGroup.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addStepGroup_argsStandardSchemeFactory implements SchemeFactory {
      public addStepGroup_argsStandardScheme getScheme() {
        return new addStepGroup_argsStandardScheme();
      }
    }

    private static class addStepGroup_argsStandardScheme extends StandardScheme<addStepGroup_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addStepGroup_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // JOB_TEMPLATE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jobTemplateId = iprot.readString();
                struct.setJobTemplateIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.parentId = iprot.readString();
                struct.setParentIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // STEP_GROUP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.stepGroup = new com.wi.director.thrift.v1.step.BaseStep();
                struct.stepGroup.read(iprot);
                struct.setStepGroupIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // POSITION
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.position = iprot.readI32();
                struct.setPositionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // REPLACE
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.replace = iprot.readBool();
                struct.setReplaceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addStepGroup_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.jobTemplateId != null) {
          oprot.writeFieldBegin(JOB_TEMPLATE_ID_FIELD_DESC);
          oprot.writeString(struct.jobTemplateId);
          oprot.writeFieldEnd();
        }
        if (struct.parentId != null) {
          oprot.writeFieldBegin(PARENT_ID_FIELD_DESC);
          oprot.writeString(struct.parentId);
          oprot.writeFieldEnd();
        }
        if (struct.stepGroup != null) {
          oprot.writeFieldBegin(STEP_GROUP_FIELD_DESC);
          struct.stepGroup.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(POSITION_FIELD_DESC);
        oprot.writeI32(struct.position);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(REPLACE_FIELD_DESC);
        oprot.writeBool(struct.replace);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class addStepGroup_result implements org.apache.thrift.TBase<addStepGroup_result, addStepGroup_result._Fields>, java.io.Serializable, Cloneable, Comparable<addStepGroup_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addStepGroup_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addStepGroup_resultStandardSchemeFactory());
    }

    public JobTemplate success; // required
    public com.wi.director.thrift.v1.common.SystemException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JobTemplate.class)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addStepGroup_result.class, metaDataMap);
    }

    public addStepGroup_result() {
    }

    public addStepGroup_result(
      JobTemplate success,
      com.wi.director.thrift.v1.common.SystemException err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addStepGroup_result(addStepGroup_result other) {
      if (other.isSetSuccess()) {
        this.success = new JobTemplate(other.success);
      }
      if (other.isSetErr()) {
        this.err = new com.wi.director.thrift.v1.common.SystemException(other.err);
      }
    }

    public addStepGroup_result deepCopy() {
      return new addStepGroup_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public JobTemplate getSuccess() {
      return this.success;
    }

    public addStepGroup_result setSuccess(JobTemplate success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.wi.director.thrift.v1.common.SystemException getErr() {
      return this.err;
    }

    public addStepGroup_result setErr(com.wi.director.thrift.v1.common.SystemException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((JobTemplate)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((com.wi.director.thrift.v1.common.SystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addStepGroup_result)
        return this.equals((addStepGroup_result)that);
      return false;
    }

    public boolean equals(addStepGroup_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(addStepGroup_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addStepGroup_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addStepGroup_resultStandardSchemeFactory implements SchemeFactory {
      public addStepGroup_resultStandardScheme getScheme() {
        return new addStepGroup_resultStandardScheme();
      }
    }

    private static class addStepGroup_resultStandardScheme extends StandardScheme<addStepGroup_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addStepGroup_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new JobTemplate();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new com.wi.director.thrift.v1.common.SystemException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addStepGroup_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class cloneStep_args implements org.apache.thrift.TBase<cloneStep_args, cloneStep_args._Fields>, java.io.Serializable, Cloneable, Comparable<cloneStep_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cloneStep_args");

    private static final org.apache.thrift.protocol.TField JOB_TEMPLATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("jobTemplateId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PARENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parentId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField STEP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("stepId", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField POSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("position", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new cloneStep_argsStandardSchemeFactory());
    }

    public String jobTemplateId; // required
    public String parentId; // required
    public String stepId; // required
    public int position; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      JOB_TEMPLATE_ID((short)1, "jobTemplateId"),
      PARENT_ID((short)2, "parentId"),
      STEP_ID((short)3, "stepId"),
      POSITION((short)4, "position");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // JOB_TEMPLATE_ID
            return JOB_TEMPLATE_ID;
          case 2: // PARENT_ID
            return PARENT_ID;
          case 3: // STEP_ID
            return STEP_ID;
          case 4: // POSITION
            return POSITION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __POSITION_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.JOB_TEMPLATE_ID, new org.apache.thrift.meta_data.FieldMetaData("jobTemplateId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PARENT_ID, new org.apache.thrift.meta_data.FieldMetaData("parentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.STEP_ID, new org.apache.thrift.meta_data.FieldMetaData("stepId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.POSITION, new org.apache.thrift.meta_data.FieldMetaData("position", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cloneStep_args.class, metaDataMap);
    }

    public cloneStep_args() {
    }

    public cloneStep_args(
      String jobTemplateId,
      String parentId,
      String stepId,
      int position)
    {
      this();
      this.jobTemplateId = jobTemplateId;
      this.parentId = parentId;
      this.stepId = stepId;
      this.position = position;
      setPositionIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cloneStep_args(cloneStep_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetJobTemplateId()) {
        this.jobTemplateId = other.jobTemplateId;
      }
      if (other.isSetParentId()) {
        this.parentId = other.parentId;
      }
      if (other.isSetStepId()) {
        this.stepId = other.stepId;
      }
      this.position = other.position;
    }

    public cloneStep_args deepCopy() {
      return new cloneStep_args(this);
    }

    @Override
    public void clear() {
      this.jobTemplateId = null;
      this.parentId = null;
      this.stepId = null;
      setPositionIsSet(false);
      this.position = 0;
    }

    public String getJobTemplateId() {
      return this.jobTemplateId;
    }

    public cloneStep_args setJobTemplateId(String jobTemplateId) {
      this.jobTemplateId = jobTemplateId;
      return this;
    }

    public void unsetJobTemplateId() {
      this.jobTemplateId = null;
    }

    /** Returns true if field jobTemplateId is set (has been assigned a value) and false otherwise */
    public boolean isSetJobTemplateId() {
      return this.jobTemplateId != null;
    }

    public void setJobTemplateIdIsSet(boolean value) {
      if (!value) {
        this.jobTemplateId = null;
      }
    }

    public String getParentId() {
      return this.parentId;
    }

    public cloneStep_args setParentId(String parentId) {
      this.parentId = parentId;
      return this;
    }

    public void unsetParentId() {
      this.parentId = null;
    }

    /** Returns true if field parentId is set (has been assigned a value) and false otherwise */
    public boolean isSetParentId() {
      return this.parentId != null;
    }

    public void setParentIdIsSet(boolean value) {
      if (!value) {
        this.parentId = null;
      }
    }

    public String getStepId() {
      return this.stepId;
    }

    public cloneStep_args setStepId(String stepId) {
      this.stepId = stepId;
      return this;
    }

    public void unsetStepId() {
      this.stepId = null;
    }

    /** Returns true if field stepId is set (has been assigned a value) and false otherwise */
    public boolean isSetStepId() {
      return this.stepId != null;
    }

    public void setStepIdIsSet(boolean value) {
      if (!value) {
        this.stepId = null;
      }
    }

    public int getPosition() {
      return this.position;
    }

    public cloneStep_args setPosition(int position) {
      this.position = position;
      setPositionIsSet(true);
      return this;
    }

    public void unsetPosition() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POSITION_ISSET_ID);
    }

    /** Returns true if field position is set (has been assigned a value) and false otherwise */
    public boolean isSetPosition() {
      return EncodingUtils.testBit(__isset_bitfield, __POSITION_ISSET_ID);
    }

    public void setPositionIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POSITION_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case JOB_TEMPLATE_ID:
        if (value == null) {
          unsetJobTemplateId();
        } else {
          setJobTemplateId((String)value);
        }
        break;

      case PARENT_ID:
        if (value == null) {
          unsetParentId();
        } else {
          setParentId((String)value);
        }
        break;

      case STEP_ID:
        if (value == null) {
          unsetStepId();
        } else {
          setStepId((String)value);
        }
        break;

      case POSITION:
        if (value == null) {
          unsetPosition();
        } else {
          setPosition((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case JOB_TEMPLATE_ID:
        return getJobTemplateId();

      case PARENT_ID:
        return getParentId();

      case STEP_ID:
        return getStepId();

      case POSITION:
        return getPosition();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case JOB_TEMPLATE_ID:
        return isSetJobTemplateId();
      case PARENT_ID:
        return isSetParentId();
      case STEP_ID:
        return isSetStepId();
      case POSITION:
        return isSetPosition();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cloneStep_args)
        return this.equals((cloneStep_args)that);
      return false;
    }

    public boolean equals(cloneStep_args that) {
      if (that == null)
        return false;

      boolean this_present_jobTemplateId = true && this.isSetJobTemplateId();
      boolean that_present_jobTemplateId = true && that.isSetJobTemplateId();
      if (this_present_jobTemplateId || that_present_jobTemplateId) {
        if (!(this_present_jobTemplateId && that_present_jobTemplateId))
          return false;
        if (!this.jobTemplateId.equals(that.jobTemplateId))
          return false;
      }

      boolean this_present_parentId = true && this.isSetParentId();
      boolean that_present_parentId = true && that.isSetParentId();
      if (this_present_parentId || that_present_parentId) {
        if (!(this_present_parentId && that_present_parentId))
          return false;
        if (!this.parentId.equals(that.parentId))
          return false;
      }

      boolean this_present_stepId = true && this.isSetStepId();
      boolean that_present_stepId = true && that.isSetStepId();
      if (this_present_stepId || that_present_stepId) {
        if (!(this_present_stepId && that_present_stepId))
          return false;
        if (!this.stepId.equals(that.stepId))
          return false;
      }

      boolean this_present_position = true;
      boolean that_present_position = true;
      if (this_present_position || that_present_position) {
        if (!(this_present_position && that_present_position))
          return false;
        if (this.position != that.position)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_jobTemplateId = true && (isSetJobTemplateId());
      list.add(present_jobTemplateId);
      if (present_jobTemplateId)
        list.add(jobTemplateId);

      boolean present_parentId = true && (isSetParentId());
      list.add(present_parentId);
      if (present_parentId)
        list.add(parentId);

      boolean present_stepId = true && (isSetStepId());
      list.add(present_stepId);
      if (present_stepId)
        list.add(stepId);

      boolean present_position = true;
      list.add(present_position);
      if (present_position)
        list.add(position);

      return list.hashCode();
    }

    @Override
    public int compareTo(cloneStep_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetJobTemplateId()).compareTo(other.isSetJobTemplateId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJobTemplateId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobTemplateId, other.jobTemplateId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParentId()).compareTo(other.isSetParentId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParentId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentId, other.parentId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStepId()).compareTo(other.isSetStepId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStepId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stepId, other.stepId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPosition()).compareTo(other.isSetPosition());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPosition()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.position, other.position);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cloneStep_args(");
      boolean first = true;

      sb.append("jobTemplateId:");
      if (this.jobTemplateId == null) {
        sb.append("null");
      } else {
        sb.append(this.jobTemplateId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("parentId:");
      if (this.parentId == null) {
        sb.append("null");
      } else {
        sb.append(this.parentId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("stepId:");
      if (this.stepId == null) {
        sb.append("null");
      } else {
        sb.append(this.stepId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("position:");
      sb.append(this.position);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cloneStep_argsStandardSchemeFactory implements SchemeFactory {
      public cloneStep_argsStandardScheme getScheme() {
        return new cloneStep_argsStandardScheme();
      }
    }

    private static class cloneStep_argsStandardScheme extends StandardScheme<cloneStep_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cloneStep_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // JOB_TEMPLATE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jobTemplateId = iprot.readString();
                struct.setJobTemplateIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.parentId = iprot.readString();
                struct.setParentIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // STEP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.stepId = iprot.readString();
                struct.setStepIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // POSITION
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.position = iprot.readI32();
                struct.setPositionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cloneStep_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.jobTemplateId != null) {
          oprot.writeFieldBegin(JOB_TEMPLATE_ID_FIELD_DESC);
          oprot.writeString(struct.jobTemplateId);
          oprot.writeFieldEnd();
        }
        if (struct.parentId != null) {
          oprot.writeFieldBegin(PARENT_ID_FIELD_DESC);
          oprot.writeString(struct.parentId);
          oprot.writeFieldEnd();
        }
        if (struct.stepId != null) {
          oprot.writeFieldBegin(STEP_ID_FIELD_DESC);
          oprot.writeString(struct.stepId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(POSITION_FIELD_DESC);
        oprot.writeI32(struct.position);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class cloneStep_result implements org.apache.thrift.TBase<cloneStep_result, cloneStep_result._Fields>, java.io.Serializable, Cloneable, Comparable<cloneStep_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cloneStep_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new cloneStep_resultStandardSchemeFactory());
    }

    public JobTemplate success; // required
    public com.wi.director.thrift.v1.common.SystemException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JobTemplate.class)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cloneStep_result.class, metaDataMap);
    }

    public cloneStep_result() {
    }

    public cloneStep_result(
      JobTemplate success,
      com.wi.director.thrift.v1.common.SystemException err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cloneStep_result(cloneStep_result other) {
      if (other.isSetSuccess()) {
        this.success = new JobTemplate(other.success);
      }
      if (other.isSetErr()) {
        this.err = new com.wi.director.thrift.v1.common.SystemException(other.err);
      }
    }

    public cloneStep_result deepCopy() {
      return new cloneStep_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public JobTemplate getSuccess() {
      return this.success;
    }

    public cloneStep_result setSuccess(JobTemplate success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.wi.director.thrift.v1.common.SystemException getErr() {
      return this.err;
    }

    public cloneStep_result setErr(com.wi.director.thrift.v1.common.SystemException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((JobTemplate)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((com.wi.director.thrift.v1.common.SystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cloneStep_result)
        return this.equals((cloneStep_result)that);
      return false;
    }

    public boolean equals(cloneStep_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(cloneStep_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cloneStep_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cloneStep_resultStandardSchemeFactory implements SchemeFactory {
      public cloneStep_resultStandardScheme getScheme() {
        return new cloneStep_resultStandardScheme();
      }
    }

    private static class cloneStep_resultStandardScheme extends StandardScheme<cloneStep_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cloneStep_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new JobTemplate();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new com.wi.director.thrift.v1.common.SystemException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cloneStep_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class cloneStepGroup_args implements org.apache.thrift.TBase<cloneStepGroup_args, cloneStepGroup_args._Fields>, java.io.Serializable, Cloneable, Comparable<cloneStepGroup_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cloneStepGroup_args");

    private static final org.apache.thrift.protocol.TField JOB_TEMPLATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("jobTemplateId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PARENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parentId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField STEP_GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("stepGroupId", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField POSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("position", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new cloneStepGroup_argsStandardSchemeFactory());
    }

    public String jobTemplateId; // required
    public String parentId; // required
    public String stepGroupId; // required
    public int position; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      JOB_TEMPLATE_ID((short)1, "jobTemplateId"),
      PARENT_ID((short)2, "parentId"),
      STEP_GROUP_ID((short)3, "stepGroupId"),
      POSITION((short)4, "position");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // JOB_TEMPLATE_ID
            return JOB_TEMPLATE_ID;
          case 2: // PARENT_ID
            return PARENT_ID;
          case 3: // STEP_GROUP_ID
            return STEP_GROUP_ID;
          case 4: // POSITION
            return POSITION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __POSITION_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.JOB_TEMPLATE_ID, new org.apache.thrift.meta_data.FieldMetaData("jobTemplateId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PARENT_ID, new org.apache.thrift.meta_data.FieldMetaData("parentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.STEP_GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("stepGroupId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.POSITION, new org.apache.thrift.meta_data.FieldMetaData("position", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cloneStepGroup_args.class, metaDataMap);
    }

    public cloneStepGroup_args() {
    }

    public cloneStepGroup_args(
      String jobTemplateId,
      String parentId,
      String stepGroupId,
      int position)
    {
      this();
      this.jobTemplateId = jobTemplateId;
      this.parentId = parentId;
      this.stepGroupId = stepGroupId;
      this.position = position;
      setPositionIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cloneStepGroup_args(cloneStepGroup_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetJobTemplateId()) {
        this.jobTemplateId = other.jobTemplateId;
      }
      if (other.isSetParentId()) {
        this.parentId = other.parentId;
      }
      if (other.isSetStepGroupId()) {
        this.stepGroupId = other.stepGroupId;
      }
      this.position = other.position;
    }

    public cloneStepGroup_args deepCopy() {
      return new cloneStepGroup_args(this);
    }

    @Override
    public void clear() {
      this.jobTemplateId = null;
      this.parentId = null;
      this.stepGroupId = null;
      setPositionIsSet(false);
      this.position = 0;
    }

    public String getJobTemplateId() {
      return this.jobTemplateId;
    }

    public cloneStepGroup_args setJobTemplateId(String jobTemplateId) {
      this.jobTemplateId = jobTemplateId;
      return this;
    }

    public void unsetJobTemplateId() {
      this.jobTemplateId = null;
    }

    /** Returns true if field jobTemplateId is set (has been assigned a value) and false otherwise */
    public boolean isSetJobTemplateId() {
      return this.jobTemplateId != null;
    }

    public void setJobTemplateIdIsSet(boolean value) {
      if (!value) {
        this.jobTemplateId = null;
      }
    }

    public String getParentId() {
      return this.parentId;
    }

    public cloneStepGroup_args setParentId(String parentId) {
      this.parentId = parentId;
      return this;
    }

    public void unsetParentId() {
      this.parentId = null;
    }

    /** Returns true if field parentId is set (has been assigned a value) and false otherwise */
    public boolean isSetParentId() {
      return this.parentId != null;
    }

    public void setParentIdIsSet(boolean value) {
      if (!value) {
        this.parentId = null;
      }
    }

    public String getStepGroupId() {
      return this.stepGroupId;
    }

    public cloneStepGroup_args setStepGroupId(String stepGroupId) {
      this.stepGroupId = stepGroupId;
      return this;
    }

    public void unsetStepGroupId() {
      this.stepGroupId = null;
    }

    /** Returns true if field stepGroupId is set (has been assigned a value) and false otherwise */
    public boolean isSetStepGroupId() {
      return this.stepGroupId != null;
    }

    public void setStepGroupIdIsSet(boolean value) {
      if (!value) {
        this.stepGroupId = null;
      }
    }

    public int getPosition() {
      return this.position;
    }

    public cloneStepGroup_args setPosition(int position) {
      this.position = position;
      setPositionIsSet(true);
      return this;
    }

    public void unsetPosition() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POSITION_ISSET_ID);
    }

    /** Returns true if field position is set (has been assigned a value) and false otherwise */
    public boolean isSetPosition() {
      return EncodingUtils.testBit(__isset_bitfield, __POSITION_ISSET_ID);
    }

    public void setPositionIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POSITION_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case JOB_TEMPLATE_ID:
        if (value == null) {
          unsetJobTemplateId();
        } else {
          setJobTemplateId((String)value);
        }
        break;

      case PARENT_ID:
        if (value == null) {
          unsetParentId();
        } else {
          setParentId((String)value);
        }
        break;

      case STEP_GROUP_ID:
        if (value == null) {
          unsetStepGroupId();
        } else {
          setStepGroupId((String)value);
        }
        break;

      case POSITION:
        if (value == null) {
          unsetPosition();
        } else {
          setPosition((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case JOB_TEMPLATE_ID:
        return getJobTemplateId();

      case PARENT_ID:
        return getParentId();

      case STEP_GROUP_ID:
        return getStepGroupId();

      case POSITION:
        return getPosition();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case JOB_TEMPLATE_ID:
        return isSetJobTemplateId();
      case PARENT_ID:
        return isSetParentId();
      case STEP_GROUP_ID:
        return isSetStepGroupId();
      case POSITION:
        return isSetPosition();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cloneStepGroup_args)
        return this.equals((cloneStepGroup_args)that);
      return false;
    }

    public boolean equals(cloneStepGroup_args that) {
      if (that == null)
        return false;

      boolean this_present_jobTemplateId = true && this.isSetJobTemplateId();
      boolean that_present_jobTemplateId = true && that.isSetJobTemplateId();
      if (this_present_jobTemplateId || that_present_jobTemplateId) {
        if (!(this_present_jobTemplateId && that_present_jobTemplateId))
          return false;
        if (!this.jobTemplateId.equals(that.jobTemplateId))
          return false;
      }

      boolean this_present_parentId = true && this.isSetParentId();
      boolean that_present_parentId = true && that.isSetParentId();
      if (this_present_parentId || that_present_parentId) {
        if (!(this_present_parentId && that_present_parentId))
          return false;
        if (!this.parentId.equals(that.parentId))
          return false;
      }

      boolean this_present_stepGroupId = true && this.isSetStepGroupId();
      boolean that_present_stepGroupId = true && that.isSetStepGroupId();
      if (this_present_stepGroupId || that_present_stepGroupId) {
        if (!(this_present_stepGroupId && that_present_stepGroupId))
          return false;
        if (!this.stepGroupId.equals(that.stepGroupId))
          return false;
      }

      boolean this_present_position = true;
      boolean that_present_position = true;
      if (this_present_position || that_present_position) {
        if (!(this_present_position && that_present_position))
          return false;
        if (this.position != that.position)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_jobTemplateId = true && (isSetJobTemplateId());
      list.add(present_jobTemplateId);
      if (present_jobTemplateId)
        list.add(jobTemplateId);

      boolean present_parentId = true && (isSetParentId());
      list.add(present_parentId);
      if (present_parentId)
        list.add(parentId);

      boolean present_stepGroupId = true && (isSetStepGroupId());
      list.add(present_stepGroupId);
      if (present_stepGroupId)
        list.add(stepGroupId);

      boolean present_position = true;
      list.add(present_position);
      if (present_position)
        list.add(position);

      return list.hashCode();
    }

    @Override
    public int compareTo(cloneStepGroup_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetJobTemplateId()).compareTo(other.isSetJobTemplateId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJobTemplateId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobTemplateId, other.jobTemplateId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParentId()).compareTo(other.isSetParentId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParentId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentId, other.parentId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStepGroupId()).compareTo(other.isSetStepGroupId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStepGroupId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stepGroupId, other.stepGroupId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPosition()).compareTo(other.isSetPosition());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPosition()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.position, other.position);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cloneStepGroup_args(");
      boolean first = true;

      sb.append("jobTemplateId:");
      if (this.jobTemplateId == null) {
        sb.append("null");
      } else {
        sb.append(this.jobTemplateId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("parentId:");
      if (this.parentId == null) {
        sb.append("null");
      } else {
        sb.append(this.parentId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("stepGroupId:");
      if (this.stepGroupId == null) {
        sb.append("null");
      } else {
        sb.append(this.stepGroupId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("position:");
      sb.append(this.position);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cloneStepGroup_argsStandardSchemeFactory implements SchemeFactory {
      public cloneStepGroup_argsStandardScheme getScheme() {
        return new cloneStepGroup_argsStandardScheme();
      }
    }

    private static class cloneStepGroup_argsStandardScheme extends StandardScheme<cloneStepGroup_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cloneStepGroup_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // JOB_TEMPLATE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jobTemplateId = iprot.readString();
                struct.setJobTemplateIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.parentId = iprot.readString();
                struct.setParentIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // STEP_GROUP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.stepGroupId = iprot.readString();
                struct.setStepGroupIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // POSITION
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.position = iprot.readI32();
                struct.setPositionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cloneStepGroup_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.jobTemplateId != null) {
          oprot.writeFieldBegin(JOB_TEMPLATE_ID_FIELD_DESC);
          oprot.writeString(struct.jobTemplateId);
          oprot.writeFieldEnd();
        }
        if (struct.parentId != null) {
          oprot.writeFieldBegin(PARENT_ID_FIELD_DESC);
          oprot.writeString(struct.parentId);
          oprot.writeFieldEnd();
        }
        if (struct.stepGroupId != null) {
          oprot.writeFieldBegin(STEP_GROUP_ID_FIELD_DESC);
          oprot.writeString(struct.stepGroupId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(POSITION_FIELD_DESC);
        oprot.writeI32(struct.position);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class cloneStepGroup_result implements org.apache.thrift.TBase<cloneStepGroup_result, cloneStepGroup_result._Fields>, java.io.Serializable, Cloneable, Comparable<cloneStepGroup_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cloneStepGroup_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new cloneStepGroup_resultStandardSchemeFactory());
    }

    public JobTemplate success; // required
    public com.wi.director.thrift.v1.common.SystemException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JobTemplate.class)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cloneStepGroup_result.class, metaDataMap);
    }

    public cloneStepGroup_result() {
    }

    public cloneStepGroup_result(
      JobTemplate success,
      com.wi.director.thrift.v1.common.SystemException err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cloneStepGroup_result(cloneStepGroup_result other) {
      if (other.isSetSuccess()) {
        this.success = new JobTemplate(other.success);
      }
      if (other.isSetErr()) {
        this.err = new com.wi.director.thrift.v1.common.SystemException(other.err);
      }
    }

    public cloneStepGroup_result deepCopy() {
      return new cloneStepGroup_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public JobTemplate getSuccess() {
      return this.success;
    }

    public cloneStepGroup_result setSuccess(JobTemplate success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.wi.director.thrift.v1.common.SystemException getErr() {
      return this.err;
    }

    public cloneStepGroup_result setErr(com.wi.director.thrift.v1.common.SystemException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((JobTemplate)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((com.wi.director.thrift.v1.common.SystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cloneStepGroup_result)
        return this.equals((cloneStepGroup_result)that);
      return false;
    }

    public boolean equals(cloneStepGroup_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(cloneStepGroup_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cloneStepGroup_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cloneStepGroup_resultStandardSchemeFactory implements SchemeFactory {
      public cloneStepGroup_resultStandardScheme getScheme() {
        return new cloneStepGroup_resultStandardScheme();
      }
    }

    private static class cloneStepGroup_resultStandardScheme extends StandardScheme<cloneStepGroup_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cloneStepGroup_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new JobTemplate();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new com.wi.director.thrift.v1.common.SystemException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cloneStepGroup_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class cloneTemplate_args implements org.apache.thrift.TBase<cloneTemplate_args, cloneTemplate_args._Fields>, java.io.Serializable, Cloneable, Comparable<cloneTemplate_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cloneTemplate_args");

    private static final org.apache.thrift.protocol.TField JOB_TEMPLATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("jobTemplateId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new cloneTemplate_argsStandardSchemeFactory());
    }

    public String jobTemplateId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      JOB_TEMPLATE_ID((short)1, "jobTemplateId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // JOB_TEMPLATE_ID
            return JOB_TEMPLATE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.JOB_TEMPLATE_ID, new org.apache.thrift.meta_data.FieldMetaData("jobTemplateId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cloneTemplate_args.class, metaDataMap);
    }

    public cloneTemplate_args() {
    }

    public cloneTemplate_args(
      String jobTemplateId)
    {
      this();
      this.jobTemplateId = jobTemplateId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cloneTemplate_args(cloneTemplate_args other) {
      if (other.isSetJobTemplateId()) {
        this.jobTemplateId = other.jobTemplateId;
      }
    }

    public cloneTemplate_args deepCopy() {
      return new cloneTemplate_args(this);
    }

    @Override
    public void clear() {
      this.jobTemplateId = null;
    }

    public String getJobTemplateId() {
      return this.jobTemplateId;
    }

    public cloneTemplate_args setJobTemplateId(String jobTemplateId) {
      this.jobTemplateId = jobTemplateId;
      return this;
    }

    public void unsetJobTemplateId() {
      this.jobTemplateId = null;
    }

    /** Returns true if field jobTemplateId is set (has been assigned a value) and false otherwise */
    public boolean isSetJobTemplateId() {
      return this.jobTemplateId != null;
    }

    public void setJobTemplateIdIsSet(boolean value) {
      if (!value) {
        this.jobTemplateId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case JOB_TEMPLATE_ID:
        if (value == null) {
          unsetJobTemplateId();
        } else {
          setJobTemplateId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case JOB_TEMPLATE_ID:
        return getJobTemplateId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case JOB_TEMPLATE_ID:
        return isSetJobTemplateId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cloneTemplate_args)
        return this.equals((cloneTemplate_args)that);
      return false;
    }

    public boolean equals(cloneTemplate_args that) {
      if (that == null)
        return false;

      boolean this_present_jobTemplateId = true && this.isSetJobTemplateId();
      boolean that_present_jobTemplateId = true && that.isSetJobTemplateId();
      if (this_present_jobTemplateId || that_present_jobTemplateId) {
        if (!(this_present_jobTemplateId && that_present_jobTemplateId))
          return false;
        if (!this.jobTemplateId.equals(that.jobTemplateId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_jobTemplateId = true && (isSetJobTemplateId());
      list.add(present_jobTemplateId);
      if (present_jobTemplateId)
        list.add(jobTemplateId);

      return list.hashCode();
    }

    @Override
    public int compareTo(cloneTemplate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetJobTemplateId()).compareTo(other.isSetJobTemplateId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJobTemplateId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobTemplateId, other.jobTemplateId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cloneTemplate_args(");
      boolean first = true;

      sb.append("jobTemplateId:");
      if (this.jobTemplateId == null) {
        sb.append("null");
      } else {
        sb.append(this.jobTemplateId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cloneTemplate_argsStandardSchemeFactory implements SchemeFactory {
      public cloneTemplate_argsStandardScheme getScheme() {
        return new cloneTemplate_argsStandardScheme();
      }
    }

    private static class cloneTemplate_argsStandardScheme extends StandardScheme<cloneTemplate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cloneTemplate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // JOB_TEMPLATE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jobTemplateId = iprot.readString();
                struct.setJobTemplateIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cloneTemplate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.jobTemplateId != null) {
          oprot.writeFieldBegin(JOB_TEMPLATE_ID_FIELD_DESC);
          oprot.writeString(struct.jobTemplateId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class cloneTemplate_result implements org.apache.thrift.TBase<cloneTemplate_result, cloneTemplate_result._Fields>, java.io.Serializable, Cloneable, Comparable<cloneTemplate_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cloneTemplate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new cloneTemplate_resultStandardSchemeFactory());
    }

    public JobTemplate success; // required
    public com.wi.director.thrift.v1.common.SystemException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JobTemplate.class)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cloneTemplate_result.class, metaDataMap);
    }

    public cloneTemplate_result() {
    }

    public cloneTemplate_result(
      JobTemplate success,
      com.wi.director.thrift.v1.common.SystemException err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cloneTemplate_result(cloneTemplate_result other) {
      if (other.isSetSuccess()) {
        this.success = new JobTemplate(other.success);
      }
      if (other.isSetErr()) {
        this.err = new com.wi.director.thrift.v1.common.SystemException(other.err);
      }
    }

    public cloneTemplate_result deepCopy() {
      return new cloneTemplate_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public JobTemplate getSuccess() {
      return this.success;
    }

    public cloneTemplate_result setSuccess(JobTemplate success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.wi.director.thrift.v1.common.SystemException getErr() {
      return this.err;
    }

    public cloneTemplate_result setErr(com.wi.director.thrift.v1.common.SystemException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((JobTemplate)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((com.wi.director.thrift.v1.common.SystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cloneTemplate_result)
        return this.equals((cloneTemplate_result)that);
      return false;
    }

    public boolean equals(cloneTemplate_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(cloneTemplate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cloneTemplate_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cloneTemplate_resultStandardSchemeFactory implements SchemeFactory {
      public cloneTemplate_resultStandardScheme getScheme() {
        return new cloneTemplate_resultStandardScheme();
      }
    }

    private static class cloneTemplate_resultStandardScheme extends StandardScheme<cloneTemplate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cloneTemplate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new JobTemplate();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new com.wi.director.thrift.v1.common.SystemException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cloneTemplate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class addStepModular_args implements org.apache.thrift.TBase<addStepModular_args, addStepModular_args._Fields>, java.io.Serializable, Cloneable, Comparable<addStepModular_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addStepModular_args");

    private static final org.apache.thrift.protocol.TField JOB_TEMPLATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("jobTemplateId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PARENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parentId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField STEP_FIELD_DESC = new org.apache.thrift.protocol.TField("step", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField POSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("position", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField REPLACE_FIELD_DESC = new org.apache.thrift.protocol.TField("replace", org.apache.thrift.protocol.TType.BOOL, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addStepModular_argsStandardSchemeFactory());
    }

    public String jobTemplateId; // required
    public String parentId; // required
    public com.wi.director.thrift.v1.step.BaseStep step; // required
    public int position; // required
    public boolean replace; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      JOB_TEMPLATE_ID((short)1, "jobTemplateId"),
      PARENT_ID((short)2, "parentId"),
      STEP((short)3, "step"),
      POSITION((short)4, "position"),
      REPLACE((short)5, "replace");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // JOB_TEMPLATE_ID
            return JOB_TEMPLATE_ID;
          case 2: // PARENT_ID
            return PARENT_ID;
          case 3: // STEP
            return STEP;
          case 4: // POSITION
            return POSITION;
          case 5: // REPLACE
            return REPLACE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __POSITION_ISSET_ID = 0;
    private static final int __REPLACE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.JOB_TEMPLATE_ID, new org.apache.thrift.meta_data.FieldMetaData("jobTemplateId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PARENT_ID, new org.apache.thrift.meta_data.FieldMetaData("parentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.STEP, new org.apache.thrift.meta_data.FieldMetaData("step", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.step.BaseStep.class)));
      tmpMap.put(_Fields.POSITION, new org.apache.thrift.meta_data.FieldMetaData("position", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.REPLACE, new org.apache.thrift.meta_data.FieldMetaData("replace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addStepModular_args.class, metaDataMap);
    }

    public addStepModular_args() {
    }

    public addStepModular_args(
      String jobTemplateId,
      String parentId,
      com.wi.director.thrift.v1.step.BaseStep step,
      int position,
      boolean replace)
    {
      this();
      this.jobTemplateId = jobTemplateId;
      this.parentId = parentId;
      this.step = step;
      this.position = position;
      setPositionIsSet(true);
      this.replace = replace;
      setReplaceIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addStepModular_args(addStepModular_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetJobTemplateId()) {
        this.jobTemplateId = other.jobTemplateId;
      }
      if (other.isSetParentId()) {
        this.parentId = other.parentId;
      }
      if (other.isSetStep()) {
        this.step = new com.wi.director.thrift.v1.step.BaseStep(other.step);
      }
      this.position = other.position;
      this.replace = other.replace;
    }

    public addStepModular_args deepCopy() {
      return new addStepModular_args(this);
    }

    @Override
    public void clear() {
      this.jobTemplateId = null;
      this.parentId = null;
      this.step = null;
      setPositionIsSet(false);
      this.position = 0;
      setReplaceIsSet(false);
      this.replace = false;
    }

    public String getJobTemplateId() {
      return this.jobTemplateId;
    }

    public addStepModular_args setJobTemplateId(String jobTemplateId) {
      this.jobTemplateId = jobTemplateId;
      return this;
    }

    public void unsetJobTemplateId() {
      this.jobTemplateId = null;
    }

    /** Returns true if field jobTemplateId is set (has been assigned a value) and false otherwise */
    public boolean isSetJobTemplateId() {
      return this.jobTemplateId != null;
    }

    public void setJobTemplateIdIsSet(boolean value) {
      if (!value) {
        this.jobTemplateId = null;
      }
    }

    public String getParentId() {
      return this.parentId;
    }

    public addStepModular_args setParentId(String parentId) {
      this.parentId = parentId;
      return this;
    }

    public void unsetParentId() {
      this.parentId = null;
    }

    /** Returns true if field parentId is set (has been assigned a value) and false otherwise */
    public boolean isSetParentId() {
      return this.parentId != null;
    }

    public void setParentIdIsSet(boolean value) {
      if (!value) {
        this.parentId = null;
      }
    }

    public com.wi.director.thrift.v1.step.BaseStep getStep() {
      return this.step;
    }

    public addStepModular_args setStep(com.wi.director.thrift.v1.step.BaseStep step) {
      this.step = step;
      return this;
    }

    public void unsetStep() {
      this.step = null;
    }

    /** Returns true if field step is set (has been assigned a value) and false otherwise */
    public boolean isSetStep() {
      return this.step != null;
    }

    public void setStepIsSet(boolean value) {
      if (!value) {
        this.step = null;
      }
    }

    public int getPosition() {
      return this.position;
    }

    public addStepModular_args setPosition(int position) {
      this.position = position;
      setPositionIsSet(true);
      return this;
    }

    public void unsetPosition() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POSITION_ISSET_ID);
    }

    /** Returns true if field position is set (has been assigned a value) and false otherwise */
    public boolean isSetPosition() {
      return EncodingUtils.testBit(__isset_bitfield, __POSITION_ISSET_ID);
    }

    public void setPositionIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POSITION_ISSET_ID, value);
    }

    public boolean isReplace() {
      return this.replace;
    }

    public addStepModular_args setReplace(boolean replace) {
      this.replace = replace;
      setReplaceIsSet(true);
      return this;
    }

    public void unsetReplace() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPLACE_ISSET_ID);
    }

    /** Returns true if field replace is set (has been assigned a value) and false otherwise */
    public boolean isSetReplace() {
      return EncodingUtils.testBit(__isset_bitfield, __REPLACE_ISSET_ID);
    }

    public void setReplaceIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPLACE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case JOB_TEMPLATE_ID:
        if (value == null) {
          unsetJobTemplateId();
        } else {
          setJobTemplateId((String)value);
        }
        break;

      case PARENT_ID:
        if (value == null) {
          unsetParentId();
        } else {
          setParentId((String)value);
        }
        break;

      case STEP:
        if (value == null) {
          unsetStep();
        } else {
          setStep((com.wi.director.thrift.v1.step.BaseStep)value);
        }
        break;

      case POSITION:
        if (value == null) {
          unsetPosition();
        } else {
          setPosition((Integer)value);
        }
        break;

      case REPLACE:
        if (value == null) {
          unsetReplace();
        } else {
          setReplace((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case JOB_TEMPLATE_ID:
        return getJobTemplateId();

      case PARENT_ID:
        return getParentId();

      case STEP:
        return getStep();

      case POSITION:
        return getPosition();

      case REPLACE:
        return isReplace();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case JOB_TEMPLATE_ID:
        return isSetJobTemplateId();
      case PARENT_ID:
        return isSetParentId();
      case STEP:
        return isSetStep();
      case POSITION:
        return isSetPosition();
      case REPLACE:
        return isSetReplace();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addStepModular_args)
        return this.equals((addStepModular_args)that);
      return false;
    }

    public boolean equals(addStepModular_args that) {
      if (that == null)
        return false;

      boolean this_present_jobTemplateId = true && this.isSetJobTemplateId();
      boolean that_present_jobTemplateId = true && that.isSetJobTemplateId();
      if (this_present_jobTemplateId || that_present_jobTemplateId) {
        if (!(this_present_jobTemplateId && that_present_jobTemplateId))
          return false;
        if (!this.jobTemplateId.equals(that.jobTemplateId))
          return false;
      }

      boolean this_present_parentId = true && this.isSetParentId();
      boolean that_present_parentId = true && that.isSetParentId();
      if (this_present_parentId || that_present_parentId) {
        if (!(this_present_parentId && that_present_parentId))
          return false;
        if (!this.parentId.equals(that.parentId))
          return false;
      }

      boolean this_present_step = true && this.isSetStep();
      boolean that_present_step = true && that.isSetStep();
      if (this_present_step || that_present_step) {
        if (!(this_present_step && that_present_step))
          return false;
        if (!this.step.equals(that.step))
          return false;
      }

      boolean this_present_position = true;
      boolean that_present_position = true;
      if (this_present_position || that_present_position) {
        if (!(this_present_position && that_present_position))
          return false;
        if (this.position != that.position)
          return false;
      }

      boolean this_present_replace = true;
      boolean that_present_replace = true;
      if (this_present_replace || that_present_replace) {
        if (!(this_present_replace && that_present_replace))
          return false;
        if (this.replace != that.replace)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_jobTemplateId = true && (isSetJobTemplateId());
      list.add(present_jobTemplateId);
      if (present_jobTemplateId)
        list.add(jobTemplateId);

      boolean present_parentId = true && (isSetParentId());
      list.add(present_parentId);
      if (present_parentId)
        list.add(parentId);

      boolean present_step = true && (isSetStep());
      list.add(present_step);
      if (present_step)
        list.add(step);

      boolean present_position = true;
      list.add(present_position);
      if (present_position)
        list.add(position);

      boolean present_replace = true;
      list.add(present_replace);
      if (present_replace)
        list.add(replace);

      return list.hashCode();
    }

    @Override
    public int compareTo(addStepModular_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetJobTemplateId()).compareTo(other.isSetJobTemplateId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJobTemplateId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobTemplateId, other.jobTemplateId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParentId()).compareTo(other.isSetParentId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParentId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentId, other.parentId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStep()).compareTo(other.isSetStep());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStep()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.step, other.step);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPosition()).compareTo(other.isSetPosition());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPosition()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.position, other.position);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReplace()).compareTo(other.isSetReplace());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReplace()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.replace, other.replace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addStepModular_args(");
      boolean first = true;

      sb.append("jobTemplateId:");
      if (this.jobTemplateId == null) {
        sb.append("null");
      } else {
        sb.append(this.jobTemplateId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("parentId:");
      if (this.parentId == null) {
        sb.append("null");
      } else {
        sb.append(this.parentId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("step:");
      if (this.step == null) {
        sb.append("null");
      } else {
        sb.append(this.step);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("position:");
      sb.append(this.position);
      first = false;
      if (!first) sb.append(", ");
      sb.append("replace:");
      sb.append(this.replace);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (step != null) {
        step.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addStepModular_argsStandardSchemeFactory implements SchemeFactory {
      public addStepModular_argsStandardScheme getScheme() {
        return new addStepModular_argsStandardScheme();
      }
    }

    private static class addStepModular_argsStandardScheme extends StandardScheme<addStepModular_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addStepModular_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // JOB_TEMPLATE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jobTemplateId = iprot.readString();
                struct.setJobTemplateIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.parentId = iprot.readString();
                struct.setParentIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // STEP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.step = new com.wi.director.thrift.v1.step.BaseStep();
                struct.step.read(iprot);
                struct.setStepIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // POSITION
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.position = iprot.readI32();
                struct.setPositionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // REPLACE
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.replace = iprot.readBool();
                struct.setReplaceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addStepModular_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.jobTemplateId != null) {
          oprot.writeFieldBegin(JOB_TEMPLATE_ID_FIELD_DESC);
          oprot.writeString(struct.jobTemplateId);
          oprot.writeFieldEnd();
        }
        if (struct.parentId != null) {
          oprot.writeFieldBegin(PARENT_ID_FIELD_DESC);
          oprot.writeString(struct.parentId);
          oprot.writeFieldEnd();
        }
        if (struct.step != null) {
          oprot.writeFieldBegin(STEP_FIELD_DESC);
          struct.step.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(POSITION_FIELD_DESC);
        oprot.writeI32(struct.position);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(REPLACE_FIELD_DESC);
        oprot.writeBool(struct.replace);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class addStepModular_result implements org.apache.thrift.TBase<addStepModular_result, addStepModular_result._Fields>, java.io.Serializable, Cloneable, Comparable<addStepModular_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addStepModular_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addStepModular_resultStandardSchemeFactory());
    }

    public JobTemplateModular success; // required
    public com.wi.director.thrift.v1.common.SystemException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JobTemplateModular.class)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addStepModular_result.class, metaDataMap);
    }

    public addStepModular_result() {
    }

    public addStepModular_result(
      JobTemplateModular success,
      com.wi.director.thrift.v1.common.SystemException err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addStepModular_result(addStepModular_result other) {
      if (other.isSetSuccess()) {
        this.success = new JobTemplateModular(other.success);
      }
      if (other.isSetErr()) {
        this.err = new com.wi.director.thrift.v1.common.SystemException(other.err);
      }
    }

    public addStepModular_result deepCopy() {
      return new addStepModular_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public JobTemplateModular getSuccess() {
      return this.success;
    }

    public addStepModular_result setSuccess(JobTemplateModular success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.wi.director.thrift.v1.common.SystemException getErr() {
      return this.err;
    }

    public addStepModular_result setErr(com.wi.director.thrift.v1.common.SystemException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((JobTemplateModular)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((com.wi.director.thrift.v1.common.SystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addStepModular_result)
        return this.equals((addStepModular_result)that);
      return false;
    }

    public boolean equals(addStepModular_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(addStepModular_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addStepModular_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addStepModular_resultStandardSchemeFactory implements SchemeFactory {
      public addStepModular_resultStandardScheme getScheme() {
        return new addStepModular_resultStandardScheme();
      }
    }

    private static class addStepModular_resultStandardScheme extends StandardScheme<addStepModular_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addStepModular_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new JobTemplateModular();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new com.wi.director.thrift.v1.common.SystemException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addStepModular_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class addStepGroupModular_args implements org.apache.thrift.TBase<addStepGroupModular_args, addStepGroupModular_args._Fields>, java.io.Serializable, Cloneable, Comparable<addStepGroupModular_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addStepGroupModular_args");

    private static final org.apache.thrift.protocol.TField JOB_TEMPLATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("jobTemplateId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PARENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parentId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField STEP_GROUP_FIELD_DESC = new org.apache.thrift.protocol.TField("stepGroup", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField POSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("position", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField REPLACE_FIELD_DESC = new org.apache.thrift.protocol.TField("replace", org.apache.thrift.protocol.TType.BOOL, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addStepGroupModular_argsStandardSchemeFactory());
    }

    public String jobTemplateId; // required
    public String parentId; // required
    public com.wi.director.thrift.v1.step.BaseStep stepGroup; // required
    public int position; // required
    public boolean replace; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      JOB_TEMPLATE_ID((short)1, "jobTemplateId"),
      PARENT_ID((short)2, "parentId"),
      STEP_GROUP((short)3, "stepGroup"),
      POSITION((short)4, "position"),
      REPLACE((short)5, "replace");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // JOB_TEMPLATE_ID
            return JOB_TEMPLATE_ID;
          case 2: // PARENT_ID
            return PARENT_ID;
          case 3: // STEP_GROUP
            return STEP_GROUP;
          case 4: // POSITION
            return POSITION;
          case 5: // REPLACE
            return REPLACE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __POSITION_ISSET_ID = 0;
    private static final int __REPLACE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.JOB_TEMPLATE_ID, new org.apache.thrift.meta_data.FieldMetaData("jobTemplateId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PARENT_ID, new org.apache.thrift.meta_data.FieldMetaData("parentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.STEP_GROUP, new org.apache.thrift.meta_data.FieldMetaData("stepGroup", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.step.BaseStep.class)));
      tmpMap.put(_Fields.POSITION, new org.apache.thrift.meta_data.FieldMetaData("position", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.REPLACE, new org.apache.thrift.meta_data.FieldMetaData("replace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addStepGroupModular_args.class, metaDataMap);
    }

    public addStepGroupModular_args() {
    }

    public addStepGroupModular_args(
      String jobTemplateId,
      String parentId,
      com.wi.director.thrift.v1.step.BaseStep stepGroup,
      int position,
      boolean replace)
    {
      this();
      this.jobTemplateId = jobTemplateId;
      this.parentId = parentId;
      this.stepGroup = stepGroup;
      this.position = position;
      setPositionIsSet(true);
      this.replace = replace;
      setReplaceIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addStepGroupModular_args(addStepGroupModular_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetJobTemplateId()) {
        this.jobTemplateId = other.jobTemplateId;
      }
      if (other.isSetParentId()) {
        this.parentId = other.parentId;
      }
      if (other.isSetStepGroup()) {
        this.stepGroup = new com.wi.director.thrift.v1.step.BaseStep(other.stepGroup);
      }
      this.position = other.position;
      this.replace = other.replace;
    }

    public addStepGroupModular_args deepCopy() {
      return new addStepGroupModular_args(this);
    }

    @Override
    public void clear() {
      this.jobTemplateId = null;
      this.parentId = null;
      this.stepGroup = null;
      setPositionIsSet(false);
      this.position = 0;
      setReplaceIsSet(false);
      this.replace = false;
    }

    public String getJobTemplateId() {
      return this.jobTemplateId;
    }

    public addStepGroupModular_args setJobTemplateId(String jobTemplateId) {
      this.jobTemplateId = jobTemplateId;
      return this;
    }

    public void unsetJobTemplateId() {
      this.jobTemplateId = null;
    }

    /** Returns true if field jobTemplateId is set (has been assigned a value) and false otherwise */
    public boolean isSetJobTemplateId() {
      return this.jobTemplateId != null;
    }

    public void setJobTemplateIdIsSet(boolean value) {
      if (!value) {
        this.jobTemplateId = null;
      }
    }

    public String getParentId() {
      return this.parentId;
    }

    public addStepGroupModular_args setParentId(String parentId) {
      this.parentId = parentId;
      return this;
    }

    public void unsetParentId() {
      this.parentId = null;
    }

    /** Returns true if field parentId is set (has been assigned a value) and false otherwise */
    public boolean isSetParentId() {
      return this.parentId != null;
    }

    public void setParentIdIsSet(boolean value) {
      if (!value) {
        this.parentId = null;
      }
    }

    public com.wi.director.thrift.v1.step.BaseStep getStepGroup() {
      return this.stepGroup;
    }

    public addStepGroupModular_args setStepGroup(com.wi.director.thrift.v1.step.BaseStep stepGroup) {
      this.stepGroup = stepGroup;
      return this;
    }

    public void unsetStepGroup() {
      this.stepGroup = null;
    }

    /** Returns true if field stepGroup is set (has been assigned a value) and false otherwise */
    public boolean isSetStepGroup() {
      return this.stepGroup != null;
    }

    public void setStepGroupIsSet(boolean value) {
      if (!value) {
        this.stepGroup = null;
      }
    }

    public int getPosition() {
      return this.position;
    }

    public addStepGroupModular_args setPosition(int position) {
      this.position = position;
      setPositionIsSet(true);
      return this;
    }

    public void unsetPosition() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POSITION_ISSET_ID);
    }

    /** Returns true if field position is set (has been assigned a value) and false otherwise */
    public boolean isSetPosition() {
      return EncodingUtils.testBit(__isset_bitfield, __POSITION_ISSET_ID);
    }

    public void setPositionIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POSITION_ISSET_ID, value);
    }

    public boolean isReplace() {
      return this.replace;
    }

    public addStepGroupModular_args setReplace(boolean replace) {
      this.replace = replace;
      setReplaceIsSet(true);
      return this;
    }

    public void unsetReplace() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPLACE_ISSET_ID);
    }

    /** Returns true if field replace is set (has been assigned a value) and false otherwise */
    public boolean isSetReplace() {
      return EncodingUtils.testBit(__isset_bitfield, __REPLACE_ISSET_ID);
    }

    public void setReplaceIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPLACE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case JOB_TEMPLATE_ID:
        if (value == null) {
          unsetJobTemplateId();
        } else {
          setJobTemplateId((String)value);
        }
        break;

      case PARENT_ID:
        if (value == null) {
          unsetParentId();
        } else {
          setParentId((String)value);
        }
        break;

      case STEP_GROUP:
        if (value == null) {
          unsetStepGroup();
        } else {
          setStepGroup((com.wi.director.thrift.v1.step.BaseStep)value);
        }
        break;

      case POSITION:
        if (value == null) {
          unsetPosition();
        } else {
          setPosition((Integer)value);
        }
        break;

      case REPLACE:
        if (value == null) {
          unsetReplace();
        } else {
          setReplace((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case JOB_TEMPLATE_ID:
        return getJobTemplateId();

      case PARENT_ID:
        return getParentId();

      case STEP_GROUP:
        return getStepGroup();

      case POSITION:
        return getPosition();

      case REPLACE:
        return isReplace();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case JOB_TEMPLATE_ID:
        return isSetJobTemplateId();
      case PARENT_ID:
        return isSetParentId();
      case STEP_GROUP:
        return isSetStepGroup();
      case POSITION:
        return isSetPosition();
      case REPLACE:
        return isSetReplace();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addStepGroupModular_args)
        return this.equals((addStepGroupModular_args)that);
      return false;
    }

    public boolean equals(addStepGroupModular_args that) {
      if (that == null)
        return false;

      boolean this_present_jobTemplateId = true && this.isSetJobTemplateId();
      boolean that_present_jobTemplateId = true && that.isSetJobTemplateId();
      if (this_present_jobTemplateId || that_present_jobTemplateId) {
        if (!(this_present_jobTemplateId && that_present_jobTemplateId))
          return false;
        if (!this.jobTemplateId.equals(that.jobTemplateId))
          return false;
      }

      boolean this_present_parentId = true && this.isSetParentId();
      boolean that_present_parentId = true && that.isSetParentId();
      if (this_present_parentId || that_present_parentId) {
        if (!(this_present_parentId && that_present_parentId))
          return false;
        if (!this.parentId.equals(that.parentId))
          return false;
      }

      boolean this_present_stepGroup = true && this.isSetStepGroup();
      boolean that_present_stepGroup = true && that.isSetStepGroup();
      if (this_present_stepGroup || that_present_stepGroup) {
        if (!(this_present_stepGroup && that_present_stepGroup))
          return false;
        if (!this.stepGroup.equals(that.stepGroup))
          return false;
      }

      boolean this_present_position = true;
      boolean that_present_position = true;
      if (this_present_position || that_present_position) {
        if (!(this_present_position && that_present_position))
          return false;
        if (this.position != that.position)
          return false;
      }

      boolean this_present_replace = true;
      boolean that_present_replace = true;
      if (this_present_replace || that_present_replace) {
        if (!(this_present_replace && that_present_replace))
          return false;
        if (this.replace != that.replace)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_jobTemplateId = true && (isSetJobTemplateId());
      list.add(present_jobTemplateId);
      if (present_jobTemplateId)
        list.add(jobTemplateId);

      boolean present_parentId = true && (isSetParentId());
      list.add(present_parentId);
      if (present_parentId)
        list.add(parentId);

      boolean present_stepGroup = true && (isSetStepGroup());
      list.add(present_stepGroup);
      if (present_stepGroup)
        list.add(stepGroup);

      boolean present_position = true;
      list.add(present_position);
      if (present_position)
        list.add(position);

      boolean present_replace = true;
      list.add(present_replace);
      if (present_replace)
        list.add(replace);

      return list.hashCode();
    }

    @Override
    public int compareTo(addStepGroupModular_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetJobTemplateId()).compareTo(other.isSetJobTemplateId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJobTemplateId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobTemplateId, other.jobTemplateId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParentId()).compareTo(other.isSetParentId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParentId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentId, other.parentId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStepGroup()).compareTo(other.isSetStepGroup());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStepGroup()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stepGroup, other.stepGroup);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPosition()).compareTo(other.isSetPosition());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPosition()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.position, other.position);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReplace()).compareTo(other.isSetReplace());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReplace()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.replace, other.replace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addStepGroupModular_args(");
      boolean first = true;

      sb.append("jobTemplateId:");
      if (this.jobTemplateId == null) {
        sb.append("null");
      } else {
        sb.append(this.jobTemplateId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("parentId:");
      if (this.parentId == null) {
        sb.append("null");
      } else {
        sb.append(this.parentId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("stepGroup:");
      if (this.stepGroup == null) {
        sb.append("null");
      } else {
        sb.append(this.stepGroup);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("position:");
      sb.append(this.position);
      first = false;
      if (!first) sb.append(", ");
      sb.append("replace:");
      sb.append(this.replace);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (stepGroup != null) {
        stepGroup.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addStepGroupModular_argsStandardSchemeFactory implements SchemeFactory {
      public addStepGroupModular_argsStandardScheme getScheme() {
        return new addStepGroupModular_argsStandardScheme();
      }
    }

    private static class addStepGroupModular_argsStandardScheme extends StandardScheme<addStepGroupModular_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addStepGroupModular_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // JOB_TEMPLATE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jobTemplateId = iprot.readString();
                struct.setJobTemplateIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.parentId = iprot.readString();
                struct.setParentIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // STEP_GROUP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.stepGroup = new com.wi.director.thrift.v1.step.BaseStep();
                struct.stepGroup.read(iprot);
                struct.setStepGroupIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // POSITION
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.position = iprot.readI32();
                struct.setPositionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // REPLACE
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.replace = iprot.readBool();
                struct.setReplaceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addStepGroupModular_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.jobTemplateId != null) {
          oprot.writeFieldBegin(JOB_TEMPLATE_ID_FIELD_DESC);
          oprot.writeString(struct.jobTemplateId);
          oprot.writeFieldEnd();
        }
        if (struct.parentId != null) {
          oprot.writeFieldBegin(PARENT_ID_FIELD_DESC);
          oprot.writeString(struct.parentId);
          oprot.writeFieldEnd();
        }
        if (struct.stepGroup != null) {
          oprot.writeFieldBegin(STEP_GROUP_FIELD_DESC);
          struct.stepGroup.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(POSITION_FIELD_DESC);
        oprot.writeI32(struct.position);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(REPLACE_FIELD_DESC);
        oprot.writeBool(struct.replace);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class addStepGroupModular_result implements org.apache.thrift.TBase<addStepGroupModular_result, addStepGroupModular_result._Fields>, java.io.Serializable, Cloneable, Comparable<addStepGroupModular_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addStepGroupModular_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addStepGroupModular_resultStandardSchemeFactory());
    }

    public JobTemplateModular success; // required
    public com.wi.director.thrift.v1.common.SystemException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JobTemplateModular.class)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addStepGroupModular_result.class, metaDataMap);
    }

    public addStepGroupModular_result() {
    }

    public addStepGroupModular_result(
      JobTemplateModular success,
      com.wi.director.thrift.v1.common.SystemException err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addStepGroupModular_result(addStepGroupModular_result other) {
      if (other.isSetSuccess()) {
        this.success = new JobTemplateModular(other.success);
      }
      if (other.isSetErr()) {
        this.err = new com.wi.director.thrift.v1.common.SystemException(other.err);
      }
    }

    public addStepGroupModular_result deepCopy() {
      return new addStepGroupModular_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public JobTemplateModular getSuccess() {
      return this.success;
    }

    public addStepGroupModular_result setSuccess(JobTemplateModular success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.wi.director.thrift.v1.common.SystemException getErr() {
      return this.err;
    }

    public addStepGroupModular_result setErr(com.wi.director.thrift.v1.common.SystemException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((JobTemplateModular)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((com.wi.director.thrift.v1.common.SystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addStepGroupModular_result)
        return this.equals((addStepGroupModular_result)that);
      return false;
    }

    public boolean equals(addStepGroupModular_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(addStepGroupModular_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addStepGroupModular_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addStepGroupModular_resultStandardSchemeFactory implements SchemeFactory {
      public addStepGroupModular_resultStandardScheme getScheme() {
        return new addStepGroupModular_resultStandardScheme();
      }
    }

    private static class addStepGroupModular_resultStandardScheme extends StandardScheme<addStepGroupModular_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addStepGroupModular_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new JobTemplateModular();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new com.wi.director.thrift.v1.common.SystemException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addStepGroupModular_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class moveStepModular_args implements org.apache.thrift.TBase<moveStepModular_args, moveStepModular_args._Fields>, java.io.Serializable, Cloneable, Comparable<moveStepModular_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("moveStepModular_args");

    private static final org.apache.thrift.protocol.TField JOB_TEMPLATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("jobTemplateId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PARENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parentId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField STEP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("stepId", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField OLD_POSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("oldPosition", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField NEW_PARENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("newParentId", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField NEW_POSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("newPosition", org.apache.thrift.protocol.TType.I32, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new moveStepModular_argsStandardSchemeFactory());
    }

    public String jobTemplateId; // required
    public String parentId; // required
    public String stepId; // required
    public int oldPosition; // required
    public String newParentId; // required
    public int newPosition; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      JOB_TEMPLATE_ID((short)1, "jobTemplateId"),
      PARENT_ID((short)2, "parentId"),
      STEP_ID((short)3, "stepId"),
      OLD_POSITION((short)4, "oldPosition"),
      NEW_PARENT_ID((short)5, "newParentId"),
      NEW_POSITION((short)6, "newPosition");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // JOB_TEMPLATE_ID
            return JOB_TEMPLATE_ID;
          case 2: // PARENT_ID
            return PARENT_ID;
          case 3: // STEP_ID
            return STEP_ID;
          case 4: // OLD_POSITION
            return OLD_POSITION;
          case 5: // NEW_PARENT_ID
            return NEW_PARENT_ID;
          case 6: // NEW_POSITION
            return NEW_POSITION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __OLDPOSITION_ISSET_ID = 0;
    private static final int __NEWPOSITION_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.JOB_TEMPLATE_ID, new org.apache.thrift.meta_data.FieldMetaData("jobTemplateId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PARENT_ID, new org.apache.thrift.meta_data.FieldMetaData("parentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.STEP_ID, new org.apache.thrift.meta_data.FieldMetaData("stepId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OLD_POSITION, new org.apache.thrift.meta_data.FieldMetaData("oldPosition", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.NEW_PARENT_ID, new org.apache.thrift.meta_data.FieldMetaData("newParentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NEW_POSITION, new org.apache.thrift.meta_data.FieldMetaData("newPosition", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(moveStepModular_args.class, metaDataMap);
    }

    public moveStepModular_args() {
    }

    public moveStepModular_args(
      String jobTemplateId,
      String parentId,
      String stepId,
      int oldPosition,
      String newParentId,
      int newPosition)
    {
      this();
      this.jobTemplateId = jobTemplateId;
      this.parentId = parentId;
      this.stepId = stepId;
      this.oldPosition = oldPosition;
      setOldPositionIsSet(true);
      this.newParentId = newParentId;
      this.newPosition = newPosition;
      setNewPositionIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public moveStepModular_args(moveStepModular_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetJobTemplateId()) {
        this.jobTemplateId = other.jobTemplateId;
      }
      if (other.isSetParentId()) {
        this.parentId = other.parentId;
      }
      if (other.isSetStepId()) {
        this.stepId = other.stepId;
      }
      this.oldPosition = other.oldPosition;
      if (other.isSetNewParentId()) {
        this.newParentId = other.newParentId;
      }
      this.newPosition = other.newPosition;
    }

    public moveStepModular_args deepCopy() {
      return new moveStepModular_args(this);
    }

    @Override
    public void clear() {
      this.jobTemplateId = null;
      this.parentId = null;
      this.stepId = null;
      setOldPositionIsSet(false);
      this.oldPosition = 0;
      this.newParentId = null;
      setNewPositionIsSet(false);
      this.newPosition = 0;
    }

    public String getJobTemplateId() {
      return this.jobTemplateId;
    }

    public moveStepModular_args setJobTemplateId(String jobTemplateId) {
      this.jobTemplateId = jobTemplateId;
      return this;
    }

    public void unsetJobTemplateId() {
      this.jobTemplateId = null;
    }

    /** Returns true if field jobTemplateId is set (has been assigned a value) and false otherwise */
    public boolean isSetJobTemplateId() {
      return this.jobTemplateId != null;
    }

    public void setJobTemplateIdIsSet(boolean value) {
      if (!value) {
        this.jobTemplateId = null;
      }
    }

    public String getParentId() {
      return this.parentId;
    }

    public moveStepModular_args setParentId(String parentId) {
      this.parentId = parentId;
      return this;
    }

    public void unsetParentId() {
      this.parentId = null;
    }

    /** Returns true if field parentId is set (has been assigned a value) and false otherwise */
    public boolean isSetParentId() {
      return this.parentId != null;
    }

    public void setParentIdIsSet(boolean value) {
      if (!value) {
        this.parentId = null;
      }
    }

    public String getStepId() {
      return this.stepId;
    }

    public moveStepModular_args setStepId(String stepId) {
      this.stepId = stepId;
      return this;
    }

    public void unsetStepId() {
      this.stepId = null;
    }

    /** Returns true if field stepId is set (has been assigned a value) and false otherwise */
    public boolean isSetStepId() {
      return this.stepId != null;
    }

    public void setStepIdIsSet(boolean value) {
      if (!value) {
        this.stepId = null;
      }
    }

    public int getOldPosition() {
      return this.oldPosition;
    }

    public moveStepModular_args setOldPosition(int oldPosition) {
      this.oldPosition = oldPosition;
      setOldPositionIsSet(true);
      return this;
    }

    public void unsetOldPosition() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OLDPOSITION_ISSET_ID);
    }

    /** Returns true if field oldPosition is set (has been assigned a value) and false otherwise */
    public boolean isSetOldPosition() {
      return EncodingUtils.testBit(__isset_bitfield, __OLDPOSITION_ISSET_ID);
    }

    public void setOldPositionIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OLDPOSITION_ISSET_ID, value);
    }

    public String getNewParentId() {
      return this.newParentId;
    }

    public moveStepModular_args setNewParentId(String newParentId) {
      this.newParentId = newParentId;
      return this;
    }

    public void unsetNewParentId() {
      this.newParentId = null;
    }

    /** Returns true if field newParentId is set (has been assigned a value) and false otherwise */
    public boolean isSetNewParentId() {
      return this.newParentId != null;
    }

    public void setNewParentIdIsSet(boolean value) {
      if (!value) {
        this.newParentId = null;
      }
    }

    public int getNewPosition() {
      return this.newPosition;
    }

    public moveStepModular_args setNewPosition(int newPosition) {
      this.newPosition = newPosition;
      setNewPositionIsSet(true);
      return this;
    }

    public void unsetNewPosition() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NEWPOSITION_ISSET_ID);
    }

    /** Returns true if field newPosition is set (has been assigned a value) and false otherwise */
    public boolean isSetNewPosition() {
      return EncodingUtils.testBit(__isset_bitfield, __NEWPOSITION_ISSET_ID);
    }

    public void setNewPositionIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NEWPOSITION_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case JOB_TEMPLATE_ID:
        if (value == null) {
          unsetJobTemplateId();
        } else {
          setJobTemplateId((String)value);
        }
        break;

      case PARENT_ID:
        if (value == null) {
          unsetParentId();
        } else {
          setParentId((String)value);
        }
        break;

      case STEP_ID:
        if (value == null) {
          unsetStepId();
        } else {
          setStepId((String)value);
        }
        break;

      case OLD_POSITION:
        if (value == null) {
          unsetOldPosition();
        } else {
          setOldPosition((Integer)value);
        }
        break;

      case NEW_PARENT_ID:
        if (value == null) {
          unsetNewParentId();
        } else {
          setNewParentId((String)value);
        }
        break;

      case NEW_POSITION:
        if (value == null) {
          unsetNewPosition();
        } else {
          setNewPosition((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case JOB_TEMPLATE_ID:
        return getJobTemplateId();

      case PARENT_ID:
        return getParentId();

      case STEP_ID:
        return getStepId();

      case OLD_POSITION:
        return getOldPosition();

      case NEW_PARENT_ID:
        return getNewParentId();

      case NEW_POSITION:
        return getNewPosition();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case JOB_TEMPLATE_ID:
        return isSetJobTemplateId();
      case PARENT_ID:
        return isSetParentId();
      case STEP_ID:
        return isSetStepId();
      case OLD_POSITION:
        return isSetOldPosition();
      case NEW_PARENT_ID:
        return isSetNewParentId();
      case NEW_POSITION:
        return isSetNewPosition();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof moveStepModular_args)
        return this.equals((moveStepModular_args)that);
      return false;
    }

    public boolean equals(moveStepModular_args that) {
      if (that == null)
        return false;

      boolean this_present_jobTemplateId = true && this.isSetJobTemplateId();
      boolean that_present_jobTemplateId = true && that.isSetJobTemplateId();
      if (this_present_jobTemplateId || that_present_jobTemplateId) {
        if (!(this_present_jobTemplateId && that_present_jobTemplateId))
          return false;
        if (!this.jobTemplateId.equals(that.jobTemplateId))
          return false;
      }

      boolean this_present_parentId = true && this.isSetParentId();
      boolean that_present_parentId = true && that.isSetParentId();
      if (this_present_parentId || that_present_parentId) {
        if (!(this_present_parentId && that_present_parentId))
          return false;
        if (!this.parentId.equals(that.parentId))
          return false;
      }

      boolean this_present_stepId = true && this.isSetStepId();
      boolean that_present_stepId = true && that.isSetStepId();
      if (this_present_stepId || that_present_stepId) {
        if (!(this_present_stepId && that_present_stepId))
          return false;
        if (!this.stepId.equals(that.stepId))
          return false;
      }

      boolean this_present_oldPosition = true;
      boolean that_present_oldPosition = true;
      if (this_present_oldPosition || that_present_oldPosition) {
        if (!(this_present_oldPosition && that_present_oldPosition))
          return false;
        if (this.oldPosition != that.oldPosition)
          return false;
      }

      boolean this_present_newParentId = true && this.isSetNewParentId();
      boolean that_present_newParentId = true && that.isSetNewParentId();
      if (this_present_newParentId || that_present_newParentId) {
        if (!(this_present_newParentId && that_present_newParentId))
          return false;
        if (!this.newParentId.equals(that.newParentId))
          return false;
      }

      boolean this_present_newPosition = true;
      boolean that_present_newPosition = true;
      if (this_present_newPosition || that_present_newPosition) {
        if (!(this_present_newPosition && that_present_newPosition))
          return false;
        if (this.newPosition != that.newPosition)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_jobTemplateId = true && (isSetJobTemplateId());
      list.add(present_jobTemplateId);
      if (present_jobTemplateId)
        list.add(jobTemplateId);

      boolean present_parentId = true && (isSetParentId());
      list.add(present_parentId);
      if (present_parentId)
        list.add(parentId);

      boolean present_stepId = true && (isSetStepId());
      list.add(present_stepId);
      if (present_stepId)
        list.add(stepId);

      boolean present_oldPosition = true;
      list.add(present_oldPosition);
      if (present_oldPosition)
        list.add(oldPosition);

      boolean present_newParentId = true && (isSetNewParentId());
      list.add(present_newParentId);
      if (present_newParentId)
        list.add(newParentId);

      boolean present_newPosition = true;
      list.add(present_newPosition);
      if (present_newPosition)
        list.add(newPosition);

      return list.hashCode();
    }

    @Override
    public int compareTo(moveStepModular_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetJobTemplateId()).compareTo(other.isSetJobTemplateId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJobTemplateId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobTemplateId, other.jobTemplateId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParentId()).compareTo(other.isSetParentId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParentId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentId, other.parentId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStepId()).compareTo(other.isSetStepId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStepId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stepId, other.stepId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOldPosition()).compareTo(other.isSetOldPosition());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOldPosition()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oldPosition, other.oldPosition);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNewParentId()).compareTo(other.isSetNewParentId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNewParentId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newParentId, other.newParentId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNewPosition()).compareTo(other.isSetNewPosition());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNewPosition()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newPosition, other.newPosition);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("moveStepModular_args(");
      boolean first = true;

      sb.append("jobTemplateId:");
      if (this.jobTemplateId == null) {
        sb.append("null");
      } else {
        sb.append(this.jobTemplateId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("parentId:");
      if (this.parentId == null) {
        sb.append("null");
      } else {
        sb.append(this.parentId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("stepId:");
      if (this.stepId == null) {
        sb.append("null");
      } else {
        sb.append(this.stepId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("oldPosition:");
      sb.append(this.oldPosition);
      first = false;
      if (!first) sb.append(", ");
      sb.append("newParentId:");
      if (this.newParentId == null) {
        sb.append("null");
      } else {
        sb.append(this.newParentId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("newPosition:");
      sb.append(this.newPosition);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class moveStepModular_argsStandardSchemeFactory implements SchemeFactory {
      public moveStepModular_argsStandardScheme getScheme() {
        return new moveStepModular_argsStandardScheme();
      }
    }

    private static class moveStepModular_argsStandardScheme extends StandardScheme<moveStepModular_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, moveStepModular_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // JOB_TEMPLATE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jobTemplateId = iprot.readString();
                struct.setJobTemplateIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.parentId = iprot.readString();
                struct.setParentIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // STEP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.stepId = iprot.readString();
                struct.setStepIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // OLD_POSITION
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.oldPosition = iprot.readI32();
                struct.setOldPositionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // NEW_PARENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.newParentId = iprot.readString();
                struct.setNewParentIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // NEW_POSITION
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.newPosition = iprot.readI32();
                struct.setNewPositionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, moveStepModular_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.jobTemplateId != null) {
          oprot.writeFieldBegin(JOB_TEMPLATE_ID_FIELD_DESC);
          oprot.writeString(struct.jobTemplateId);
          oprot.writeFieldEnd();
        }
        if (struct.parentId != null) {
          oprot.writeFieldBegin(PARENT_ID_FIELD_DESC);
          oprot.writeString(struct.parentId);
          oprot.writeFieldEnd();
        }
        if (struct.stepId != null) {
          oprot.writeFieldBegin(STEP_ID_FIELD_DESC);
          oprot.writeString(struct.stepId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(OLD_POSITION_FIELD_DESC);
        oprot.writeI32(struct.oldPosition);
        oprot.writeFieldEnd();
        if (struct.newParentId != null) {
          oprot.writeFieldBegin(NEW_PARENT_ID_FIELD_DESC);
          oprot.writeString(struct.newParentId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(NEW_POSITION_FIELD_DESC);
        oprot.writeI32(struct.newPosition);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class moveStepModular_result implements org.apache.thrift.TBase<moveStepModular_result, moveStepModular_result._Fields>, java.io.Serializable, Cloneable, Comparable<moveStepModular_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("moveStepModular_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new moveStepModular_resultStandardSchemeFactory());
    }

    public JobTemplateModular success; // required
    public com.wi.director.thrift.v1.common.SystemException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JobTemplateModular.class)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(moveStepModular_result.class, metaDataMap);
    }

    public moveStepModular_result() {
    }

    public moveStepModular_result(
      JobTemplateModular success,
      com.wi.director.thrift.v1.common.SystemException err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public moveStepModular_result(moveStepModular_result other) {
      if (other.isSetSuccess()) {
        this.success = new JobTemplateModular(other.success);
      }
      if (other.isSetErr()) {
        this.err = new com.wi.director.thrift.v1.common.SystemException(other.err);
      }
    }

    public moveStepModular_result deepCopy() {
      return new moveStepModular_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public JobTemplateModular getSuccess() {
      return this.success;
    }

    public moveStepModular_result setSuccess(JobTemplateModular success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.wi.director.thrift.v1.common.SystemException getErr() {
      return this.err;
    }

    public moveStepModular_result setErr(com.wi.director.thrift.v1.common.SystemException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((JobTemplateModular)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((com.wi.director.thrift.v1.common.SystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof moveStepModular_result)
        return this.equals((moveStepModular_result)that);
      return false;
    }

    public boolean equals(moveStepModular_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(moveStepModular_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("moveStepModular_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class moveStepModular_resultStandardSchemeFactory implements SchemeFactory {
      public moveStepModular_resultStandardScheme getScheme() {
        return new moveStepModular_resultStandardScheme();
      }
    }

    private static class moveStepModular_resultStandardScheme extends StandardScheme<moveStepModular_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, moveStepModular_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new JobTemplateModular();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new com.wi.director.thrift.v1.common.SystemException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, moveStepModular_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class moveStepGroupModular_args implements org.apache.thrift.TBase<moveStepGroupModular_args, moveStepGroupModular_args._Fields>, java.io.Serializable, Cloneable, Comparable<moveStepGroupModular_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("moveStepGroupModular_args");

    private static final org.apache.thrift.protocol.TField JOB_TEMPLATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("jobTemplateId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PARENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parentId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField STEP_GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("stepGroupId", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField OLD_POSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("oldPosition", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField NEW_PARENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("newParentId", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField NEW_POSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("newPosition", org.apache.thrift.protocol.TType.I32, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new moveStepGroupModular_argsStandardSchemeFactory());
    }

    public String jobTemplateId; // required
    public String parentId; // required
    public String stepGroupId; // required
    public int oldPosition; // required
    public String newParentId; // required
    public int newPosition; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      JOB_TEMPLATE_ID((short)1, "jobTemplateId"),
      PARENT_ID((short)2, "parentId"),
      STEP_GROUP_ID((short)3, "stepGroupId"),
      OLD_POSITION((short)4, "oldPosition"),
      NEW_PARENT_ID((short)5, "newParentId"),
      NEW_POSITION((short)6, "newPosition");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // JOB_TEMPLATE_ID
            return JOB_TEMPLATE_ID;
          case 2: // PARENT_ID
            return PARENT_ID;
          case 3: // STEP_GROUP_ID
            return STEP_GROUP_ID;
          case 4: // OLD_POSITION
            return OLD_POSITION;
          case 5: // NEW_PARENT_ID
            return NEW_PARENT_ID;
          case 6: // NEW_POSITION
            return NEW_POSITION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __OLDPOSITION_ISSET_ID = 0;
    private static final int __NEWPOSITION_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.JOB_TEMPLATE_ID, new org.apache.thrift.meta_data.FieldMetaData("jobTemplateId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PARENT_ID, new org.apache.thrift.meta_data.FieldMetaData("parentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.STEP_GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("stepGroupId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OLD_POSITION, new org.apache.thrift.meta_data.FieldMetaData("oldPosition", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.NEW_PARENT_ID, new org.apache.thrift.meta_data.FieldMetaData("newParentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NEW_POSITION, new org.apache.thrift.meta_data.FieldMetaData("newPosition", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(moveStepGroupModular_args.class, metaDataMap);
    }

    public moveStepGroupModular_args() {
    }

    public moveStepGroupModular_args(
      String jobTemplateId,
      String parentId,
      String stepGroupId,
      int oldPosition,
      String newParentId,
      int newPosition)
    {
      this();
      this.jobTemplateId = jobTemplateId;
      this.parentId = parentId;
      this.stepGroupId = stepGroupId;
      this.oldPosition = oldPosition;
      setOldPositionIsSet(true);
      this.newParentId = newParentId;
      this.newPosition = newPosition;
      setNewPositionIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public moveStepGroupModular_args(moveStepGroupModular_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetJobTemplateId()) {
        this.jobTemplateId = other.jobTemplateId;
      }
      if (other.isSetParentId()) {
        this.parentId = other.parentId;
      }
      if (other.isSetStepGroupId()) {
        this.stepGroupId = other.stepGroupId;
      }
      this.oldPosition = other.oldPosition;
      if (other.isSetNewParentId()) {
        this.newParentId = other.newParentId;
      }
      this.newPosition = other.newPosition;
    }

    public moveStepGroupModular_args deepCopy() {
      return new moveStepGroupModular_args(this);
    }

    @Override
    public void clear() {
      this.jobTemplateId = null;
      this.parentId = null;
      this.stepGroupId = null;
      setOldPositionIsSet(false);
      this.oldPosition = 0;
      this.newParentId = null;
      setNewPositionIsSet(false);
      this.newPosition = 0;
    }

    public String getJobTemplateId() {
      return this.jobTemplateId;
    }

    public moveStepGroupModular_args setJobTemplateId(String jobTemplateId) {
      this.jobTemplateId = jobTemplateId;
      return this;
    }

    public void unsetJobTemplateId() {
      this.jobTemplateId = null;
    }

    /** Returns true if field jobTemplateId is set (has been assigned a value) and false otherwise */
    public boolean isSetJobTemplateId() {
      return this.jobTemplateId != null;
    }

    public void setJobTemplateIdIsSet(boolean value) {
      if (!value) {
        this.jobTemplateId = null;
      }
    }

    public String getParentId() {
      return this.parentId;
    }

    public moveStepGroupModular_args setParentId(String parentId) {
      this.parentId = parentId;
      return this;
    }

    public void unsetParentId() {
      this.parentId = null;
    }

    /** Returns true if field parentId is set (has been assigned a value) and false otherwise */
    public boolean isSetParentId() {
      return this.parentId != null;
    }

    public void setParentIdIsSet(boolean value) {
      if (!value) {
        this.parentId = null;
      }
    }

    public String getStepGroupId() {
      return this.stepGroupId;
    }

    public moveStepGroupModular_args setStepGroupId(String stepGroupId) {
      this.stepGroupId = stepGroupId;
      return this;
    }

    public void unsetStepGroupId() {
      this.stepGroupId = null;
    }

    /** Returns true if field stepGroupId is set (has been assigned a value) and false otherwise */
    public boolean isSetStepGroupId() {
      return this.stepGroupId != null;
    }

    public void setStepGroupIdIsSet(boolean value) {
      if (!value) {
        this.stepGroupId = null;
      }
    }

    public int getOldPosition() {
      return this.oldPosition;
    }

    public moveStepGroupModular_args setOldPosition(int oldPosition) {
      this.oldPosition = oldPosition;
      setOldPositionIsSet(true);
      return this;
    }

    public void unsetOldPosition() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OLDPOSITION_ISSET_ID);
    }

    /** Returns true if field oldPosition is set (has been assigned a value) and false otherwise */
    public boolean isSetOldPosition() {
      return EncodingUtils.testBit(__isset_bitfield, __OLDPOSITION_ISSET_ID);
    }

    public void setOldPositionIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OLDPOSITION_ISSET_ID, value);
    }

    public String getNewParentId() {
      return this.newParentId;
    }

    public moveStepGroupModular_args setNewParentId(String newParentId) {
      this.newParentId = newParentId;
      return this;
    }

    public void unsetNewParentId() {
      this.newParentId = null;
    }

    /** Returns true if field newParentId is set (has been assigned a value) and false otherwise */
    public boolean isSetNewParentId() {
      return this.newParentId != null;
    }

    public void setNewParentIdIsSet(boolean value) {
      if (!value) {
        this.newParentId = null;
      }
    }

    public int getNewPosition() {
      return this.newPosition;
    }

    public moveStepGroupModular_args setNewPosition(int newPosition) {
      this.newPosition = newPosition;
      setNewPositionIsSet(true);
      return this;
    }

    public void unsetNewPosition() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NEWPOSITION_ISSET_ID);
    }

    /** Returns true if field newPosition is set (has been assigned a value) and false otherwise */
    public boolean isSetNewPosition() {
      return EncodingUtils.testBit(__isset_bitfield, __NEWPOSITION_ISSET_ID);
    }

    public void setNewPositionIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NEWPOSITION_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case JOB_TEMPLATE_ID:
        if (value == null) {
          unsetJobTemplateId();
        } else {
          setJobTemplateId((String)value);
        }
        break;

      case PARENT_ID:
        if (value == null) {
          unsetParentId();
        } else {
          setParentId((String)value);
        }
        break;

      case STEP_GROUP_ID:
        if (value == null) {
          unsetStepGroupId();
        } else {
          setStepGroupId((String)value);
        }
        break;

      case OLD_POSITION:
        if (value == null) {
          unsetOldPosition();
        } else {
          setOldPosition((Integer)value);
        }
        break;

      case NEW_PARENT_ID:
        if (value == null) {
          unsetNewParentId();
        } else {
          setNewParentId((String)value);
        }
        break;

      case NEW_POSITION:
        if (value == null) {
          unsetNewPosition();
        } else {
          setNewPosition((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case JOB_TEMPLATE_ID:
        return getJobTemplateId();

      case PARENT_ID:
        return getParentId();

      case STEP_GROUP_ID:
        return getStepGroupId();

      case OLD_POSITION:
        return getOldPosition();

      case NEW_PARENT_ID:
        return getNewParentId();

      case NEW_POSITION:
        return getNewPosition();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case JOB_TEMPLATE_ID:
        return isSetJobTemplateId();
      case PARENT_ID:
        return isSetParentId();
      case STEP_GROUP_ID:
        return isSetStepGroupId();
      case OLD_POSITION:
        return isSetOldPosition();
      case NEW_PARENT_ID:
        return isSetNewParentId();
      case NEW_POSITION:
        return isSetNewPosition();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof moveStepGroupModular_args)
        return this.equals((moveStepGroupModular_args)that);
      return false;
    }

    public boolean equals(moveStepGroupModular_args that) {
      if (that == null)
        return false;

      boolean this_present_jobTemplateId = true && this.isSetJobTemplateId();
      boolean that_present_jobTemplateId = true && that.isSetJobTemplateId();
      if (this_present_jobTemplateId || that_present_jobTemplateId) {
        if (!(this_present_jobTemplateId && that_present_jobTemplateId))
          return false;
        if (!this.jobTemplateId.equals(that.jobTemplateId))
          return false;
      }

      boolean this_present_parentId = true && this.isSetParentId();
      boolean that_present_parentId = true && that.isSetParentId();
      if (this_present_parentId || that_present_parentId) {
        if (!(this_present_parentId && that_present_parentId))
          return false;
        if (!this.parentId.equals(that.parentId))
          return false;
      }

      boolean this_present_stepGroupId = true && this.isSetStepGroupId();
      boolean that_present_stepGroupId = true && that.isSetStepGroupId();
      if (this_present_stepGroupId || that_present_stepGroupId) {
        if (!(this_present_stepGroupId && that_present_stepGroupId))
          return false;
        if (!this.stepGroupId.equals(that.stepGroupId))
          return false;
      }

      boolean this_present_oldPosition = true;
      boolean that_present_oldPosition = true;
      if (this_present_oldPosition || that_present_oldPosition) {
        if (!(this_present_oldPosition && that_present_oldPosition))
          return false;
        if (this.oldPosition != that.oldPosition)
          return false;
      }

      boolean this_present_newParentId = true && this.isSetNewParentId();
      boolean that_present_newParentId = true && that.isSetNewParentId();
      if (this_present_newParentId || that_present_newParentId) {
        if (!(this_present_newParentId && that_present_newParentId))
          return false;
        if (!this.newParentId.equals(that.newParentId))
          return false;
      }

      boolean this_present_newPosition = true;
      boolean that_present_newPosition = true;
      if (this_present_newPosition || that_present_newPosition) {
        if (!(this_present_newPosition && that_present_newPosition))
          return false;
        if (this.newPosition != that.newPosition)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_jobTemplateId = true && (isSetJobTemplateId());
      list.add(present_jobTemplateId);
      if (present_jobTemplateId)
        list.add(jobTemplateId);

      boolean present_parentId = true && (isSetParentId());
      list.add(present_parentId);
      if (present_parentId)
        list.add(parentId);

      boolean present_stepGroupId = true && (isSetStepGroupId());
      list.add(present_stepGroupId);
      if (present_stepGroupId)
        list.add(stepGroupId);

      boolean present_oldPosition = true;
      list.add(present_oldPosition);
      if (present_oldPosition)
        list.add(oldPosition);

      boolean present_newParentId = true && (isSetNewParentId());
      list.add(present_newParentId);
      if (present_newParentId)
        list.add(newParentId);

      boolean present_newPosition = true;
      list.add(present_newPosition);
      if (present_newPosition)
        list.add(newPosition);

      return list.hashCode();
    }

    @Override
    public int compareTo(moveStepGroupModular_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetJobTemplateId()).compareTo(other.isSetJobTemplateId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJobTemplateId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobTemplateId, other.jobTemplateId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParentId()).compareTo(other.isSetParentId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParentId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentId, other.parentId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStepGroupId()).compareTo(other.isSetStepGroupId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStepGroupId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stepGroupId, other.stepGroupId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOldPosition()).compareTo(other.isSetOldPosition());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOldPosition()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oldPosition, other.oldPosition);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNewParentId()).compareTo(other.isSetNewParentId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNewParentId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newParentId, other.newParentId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNewPosition()).compareTo(other.isSetNewPosition());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNewPosition()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newPosition, other.newPosition);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("moveStepGroupModular_args(");
      boolean first = true;

      sb.append("jobTemplateId:");
      if (this.jobTemplateId == null) {
        sb.append("null");
      } else {
        sb.append(this.jobTemplateId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("parentId:");
      if (this.parentId == null) {
        sb.append("null");
      } else {
        sb.append(this.parentId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("stepGroupId:");
      if (this.stepGroupId == null) {
        sb.append("null");
      } else {
        sb.append(this.stepGroupId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("oldPosition:");
      sb.append(this.oldPosition);
      first = false;
      if (!first) sb.append(", ");
      sb.append("newParentId:");
      if (this.newParentId == null) {
        sb.append("null");
      } else {
        sb.append(this.newParentId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("newPosition:");
      sb.append(this.newPosition);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class moveStepGroupModular_argsStandardSchemeFactory implements SchemeFactory {
      public moveStepGroupModular_argsStandardScheme getScheme() {
        return new moveStepGroupModular_argsStandardScheme();
      }
    }

    private static class moveStepGroupModular_argsStandardScheme extends StandardScheme<moveStepGroupModular_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, moveStepGroupModular_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // JOB_TEMPLATE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jobTemplateId = iprot.readString();
                struct.setJobTemplateIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.parentId = iprot.readString();
                struct.setParentIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // STEP_GROUP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.stepGroupId = iprot.readString();
                struct.setStepGroupIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // OLD_POSITION
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.oldPosition = iprot.readI32();
                struct.setOldPositionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // NEW_PARENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.newParentId = iprot.readString();
                struct.setNewParentIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // NEW_POSITION
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.newPosition = iprot.readI32();
                struct.setNewPositionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, moveStepGroupModular_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.jobTemplateId != null) {
          oprot.writeFieldBegin(JOB_TEMPLATE_ID_FIELD_DESC);
          oprot.writeString(struct.jobTemplateId);
          oprot.writeFieldEnd();
        }
        if (struct.parentId != null) {
          oprot.writeFieldBegin(PARENT_ID_FIELD_DESC);
          oprot.writeString(struct.parentId);
          oprot.writeFieldEnd();
        }
        if (struct.stepGroupId != null) {
          oprot.writeFieldBegin(STEP_GROUP_ID_FIELD_DESC);
          oprot.writeString(struct.stepGroupId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(OLD_POSITION_FIELD_DESC);
        oprot.writeI32(struct.oldPosition);
        oprot.writeFieldEnd();
        if (struct.newParentId != null) {
          oprot.writeFieldBegin(NEW_PARENT_ID_FIELD_DESC);
          oprot.writeString(struct.newParentId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(NEW_POSITION_FIELD_DESC);
        oprot.writeI32(struct.newPosition);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class moveStepGroupModular_result implements org.apache.thrift.TBase<moveStepGroupModular_result, moveStepGroupModular_result._Fields>, java.io.Serializable, Cloneable, Comparable<moveStepGroupModular_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("moveStepGroupModular_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new moveStepGroupModular_resultStandardSchemeFactory());
    }

    public JobTemplateModular success; // required
    public com.wi.director.thrift.v1.common.SystemException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JobTemplateModular.class)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(moveStepGroupModular_result.class, metaDataMap);
    }

    public moveStepGroupModular_result() {
    }

    public moveStepGroupModular_result(
      JobTemplateModular success,
      com.wi.director.thrift.v1.common.SystemException err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public moveStepGroupModular_result(moveStepGroupModular_result other) {
      if (other.isSetSuccess()) {
        this.success = new JobTemplateModular(other.success);
      }
      if (other.isSetErr()) {
        this.err = new com.wi.director.thrift.v1.common.SystemException(other.err);
      }
    }

    public moveStepGroupModular_result deepCopy() {
      return new moveStepGroupModular_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public JobTemplateModular getSuccess() {
      return this.success;
    }

    public moveStepGroupModular_result setSuccess(JobTemplateModular success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.wi.director.thrift.v1.common.SystemException getErr() {
      return this.err;
    }

    public moveStepGroupModular_result setErr(com.wi.director.thrift.v1.common.SystemException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((JobTemplateModular)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((com.wi.director.thrift.v1.common.SystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof moveStepGroupModular_result)
        return this.equals((moveStepGroupModular_result)that);
      return false;
    }

    public boolean equals(moveStepGroupModular_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(moveStepGroupModular_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("moveStepGroupModular_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class moveStepGroupModular_resultStandardSchemeFactory implements SchemeFactory {
      public moveStepGroupModular_resultStandardScheme getScheme() {
        return new moveStepGroupModular_resultStandardScheme();
      }
    }

    private static class moveStepGroupModular_resultStandardScheme extends StandardScheme<moveStepGroupModular_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, moveStepGroupModular_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new JobTemplateModular();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new com.wi.director.thrift.v1.common.SystemException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, moveStepGroupModular_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class removeStepModular_args implements org.apache.thrift.TBase<removeStepModular_args, removeStepModular_args._Fields>, java.io.Serializable, Cloneable, Comparable<removeStepModular_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeStepModular_args");

    private static final org.apache.thrift.protocol.TField JOB_TEMPLATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("jobTemplateId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PARENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parentId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField STEP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("stepId", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField POSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("position", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeStepModular_argsStandardSchemeFactory());
    }

    public String jobTemplateId; // required
    public String parentId; // required
    public String stepId; // required
    public int position; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      JOB_TEMPLATE_ID((short)1, "jobTemplateId"),
      PARENT_ID((short)2, "parentId"),
      STEP_ID((short)3, "stepId"),
      POSITION((short)4, "position");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // JOB_TEMPLATE_ID
            return JOB_TEMPLATE_ID;
          case 2: // PARENT_ID
            return PARENT_ID;
          case 3: // STEP_ID
            return STEP_ID;
          case 4: // POSITION
            return POSITION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __POSITION_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.JOB_TEMPLATE_ID, new org.apache.thrift.meta_data.FieldMetaData("jobTemplateId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PARENT_ID, new org.apache.thrift.meta_data.FieldMetaData("parentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.STEP_ID, new org.apache.thrift.meta_data.FieldMetaData("stepId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.POSITION, new org.apache.thrift.meta_data.FieldMetaData("position", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeStepModular_args.class, metaDataMap);
    }

    public removeStepModular_args() {
    }

    public removeStepModular_args(
      String jobTemplateId,
      String parentId,
      String stepId,
      int position)
    {
      this();
      this.jobTemplateId = jobTemplateId;
      this.parentId = parentId;
      this.stepId = stepId;
      this.position = position;
      setPositionIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeStepModular_args(removeStepModular_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetJobTemplateId()) {
        this.jobTemplateId = other.jobTemplateId;
      }
      if (other.isSetParentId()) {
        this.parentId = other.parentId;
      }
      if (other.isSetStepId()) {
        this.stepId = other.stepId;
      }
      this.position = other.position;
    }

    public removeStepModular_args deepCopy() {
      return new removeStepModular_args(this);
    }

    @Override
    public void clear() {
      this.jobTemplateId = null;
      this.parentId = null;
      this.stepId = null;
      setPositionIsSet(false);
      this.position = 0;
    }

    public String getJobTemplateId() {
      return this.jobTemplateId;
    }

    public removeStepModular_args setJobTemplateId(String jobTemplateId) {
      this.jobTemplateId = jobTemplateId;
      return this;
    }

    public void unsetJobTemplateId() {
      this.jobTemplateId = null;
    }

    /** Returns true if field jobTemplateId is set (has been assigned a value) and false otherwise */
    public boolean isSetJobTemplateId() {
      return this.jobTemplateId != null;
    }

    public void setJobTemplateIdIsSet(boolean value) {
      if (!value) {
        this.jobTemplateId = null;
      }
    }

    public String getParentId() {
      return this.parentId;
    }

    public removeStepModular_args setParentId(String parentId) {
      this.parentId = parentId;
      return this;
    }

    public void unsetParentId() {
      this.parentId = null;
    }

    /** Returns true if field parentId is set (has been assigned a value) and false otherwise */
    public boolean isSetParentId() {
      return this.parentId != null;
    }

    public void setParentIdIsSet(boolean value) {
      if (!value) {
        this.parentId = null;
      }
    }

    public String getStepId() {
      return this.stepId;
    }

    public removeStepModular_args setStepId(String stepId) {
      this.stepId = stepId;
      return this;
    }

    public void unsetStepId() {
      this.stepId = null;
    }

    /** Returns true if field stepId is set (has been assigned a value) and false otherwise */
    public boolean isSetStepId() {
      return this.stepId != null;
    }

    public void setStepIdIsSet(boolean value) {
      if (!value) {
        this.stepId = null;
      }
    }

    public int getPosition() {
      return this.position;
    }

    public removeStepModular_args setPosition(int position) {
      this.position = position;
      setPositionIsSet(true);
      return this;
    }

    public void unsetPosition() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POSITION_ISSET_ID);
    }

    /** Returns true if field position is set (has been assigned a value) and false otherwise */
    public boolean isSetPosition() {
      return EncodingUtils.testBit(__isset_bitfield, __POSITION_ISSET_ID);
    }

    public void setPositionIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POSITION_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case JOB_TEMPLATE_ID:
        if (value == null) {
          unsetJobTemplateId();
        } else {
          setJobTemplateId((String)value);
        }
        break;

      case PARENT_ID:
        if (value == null) {
          unsetParentId();
        } else {
          setParentId((String)value);
        }
        break;

      case STEP_ID:
        if (value == null) {
          unsetStepId();
        } else {
          setStepId((String)value);
        }
        break;

      case POSITION:
        if (value == null) {
          unsetPosition();
        } else {
          setPosition((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case JOB_TEMPLATE_ID:
        return getJobTemplateId();

      case PARENT_ID:
        return getParentId();

      case STEP_ID:
        return getStepId();

      case POSITION:
        return getPosition();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case JOB_TEMPLATE_ID:
        return isSetJobTemplateId();
      case PARENT_ID:
        return isSetParentId();
      case STEP_ID:
        return isSetStepId();
      case POSITION:
        return isSetPosition();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeStepModular_args)
        return this.equals((removeStepModular_args)that);
      return false;
    }

    public boolean equals(removeStepModular_args that) {
      if (that == null)
        return false;

      boolean this_present_jobTemplateId = true && this.isSetJobTemplateId();
      boolean that_present_jobTemplateId = true && that.isSetJobTemplateId();
      if (this_present_jobTemplateId || that_present_jobTemplateId) {
        if (!(this_present_jobTemplateId && that_present_jobTemplateId))
          return false;
        if (!this.jobTemplateId.equals(that.jobTemplateId))
          return false;
      }

      boolean this_present_parentId = true && this.isSetParentId();
      boolean that_present_parentId = true && that.isSetParentId();
      if (this_present_parentId || that_present_parentId) {
        if (!(this_present_parentId && that_present_parentId))
          return false;
        if (!this.parentId.equals(that.parentId))
          return false;
      }

      boolean this_present_stepId = true && this.isSetStepId();
      boolean that_present_stepId = true && that.isSetStepId();
      if (this_present_stepId || that_present_stepId) {
        if (!(this_present_stepId && that_present_stepId))
          return false;
        if (!this.stepId.equals(that.stepId))
          return false;
      }

      boolean this_present_position = true;
      boolean that_present_position = true;
      if (this_present_position || that_present_position) {
        if (!(this_present_position && that_present_position))
          return false;
        if (this.position != that.position)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_jobTemplateId = true && (isSetJobTemplateId());
      list.add(present_jobTemplateId);
      if (present_jobTemplateId)
        list.add(jobTemplateId);

      boolean present_parentId = true && (isSetParentId());
      list.add(present_parentId);
      if (present_parentId)
        list.add(parentId);

      boolean present_stepId = true && (isSetStepId());
      list.add(present_stepId);
      if (present_stepId)
        list.add(stepId);

      boolean present_position = true;
      list.add(present_position);
      if (present_position)
        list.add(position);

      return list.hashCode();
    }

    @Override
    public int compareTo(removeStepModular_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetJobTemplateId()).compareTo(other.isSetJobTemplateId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJobTemplateId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobTemplateId, other.jobTemplateId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParentId()).compareTo(other.isSetParentId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParentId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentId, other.parentId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStepId()).compareTo(other.isSetStepId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStepId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stepId, other.stepId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPosition()).compareTo(other.isSetPosition());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPosition()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.position, other.position);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeStepModular_args(");
      boolean first = true;

      sb.append("jobTemplateId:");
      if (this.jobTemplateId == null) {
        sb.append("null");
      } else {
        sb.append(this.jobTemplateId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("parentId:");
      if (this.parentId == null) {
        sb.append("null");
      } else {
        sb.append(this.parentId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("stepId:");
      if (this.stepId == null) {
        sb.append("null");
      } else {
        sb.append(this.stepId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("position:");
      sb.append(this.position);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeStepModular_argsStandardSchemeFactory implements SchemeFactory {
      public removeStepModular_argsStandardScheme getScheme() {
        return new removeStepModular_argsStandardScheme();
      }
    }

    private static class removeStepModular_argsStandardScheme extends StandardScheme<removeStepModular_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeStepModular_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // JOB_TEMPLATE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jobTemplateId = iprot.readString();
                struct.setJobTemplateIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.parentId = iprot.readString();
                struct.setParentIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // STEP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.stepId = iprot.readString();
                struct.setStepIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // POSITION
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.position = iprot.readI32();
                struct.setPositionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeStepModular_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.jobTemplateId != null) {
          oprot.writeFieldBegin(JOB_TEMPLATE_ID_FIELD_DESC);
          oprot.writeString(struct.jobTemplateId);
          oprot.writeFieldEnd();
        }
        if (struct.parentId != null) {
          oprot.writeFieldBegin(PARENT_ID_FIELD_DESC);
          oprot.writeString(struct.parentId);
          oprot.writeFieldEnd();
        }
        if (struct.stepId != null) {
          oprot.writeFieldBegin(STEP_ID_FIELD_DESC);
          oprot.writeString(struct.stepId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(POSITION_FIELD_DESC);
        oprot.writeI32(struct.position);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class removeStepModular_result implements org.apache.thrift.TBase<removeStepModular_result, removeStepModular_result._Fields>, java.io.Serializable, Cloneable, Comparable<removeStepModular_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeStepModular_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeStepModular_resultStandardSchemeFactory());
    }

    public JobTemplateModular success; // required
    public com.wi.director.thrift.v1.common.SystemException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JobTemplateModular.class)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeStepModular_result.class, metaDataMap);
    }

    public removeStepModular_result() {
    }

    public removeStepModular_result(
      JobTemplateModular success,
      com.wi.director.thrift.v1.common.SystemException err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeStepModular_result(removeStepModular_result other) {
      if (other.isSetSuccess()) {
        this.success = new JobTemplateModular(other.success);
      }
      if (other.isSetErr()) {
        this.err = new com.wi.director.thrift.v1.common.SystemException(other.err);
      }
    }

    public removeStepModular_result deepCopy() {
      return new removeStepModular_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public JobTemplateModular getSuccess() {
      return this.success;
    }

    public removeStepModular_result setSuccess(JobTemplateModular success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.wi.director.thrift.v1.common.SystemException getErr() {
      return this.err;
    }

    public removeStepModular_result setErr(com.wi.director.thrift.v1.common.SystemException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((JobTemplateModular)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((com.wi.director.thrift.v1.common.SystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeStepModular_result)
        return this.equals((removeStepModular_result)that);
      return false;
    }

    public boolean equals(removeStepModular_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(removeStepModular_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeStepModular_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeStepModular_resultStandardSchemeFactory implements SchemeFactory {
      public removeStepModular_resultStandardScheme getScheme() {
        return new removeStepModular_resultStandardScheme();
      }
    }

    private static class removeStepModular_resultStandardScheme extends StandardScheme<removeStepModular_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeStepModular_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new JobTemplateModular();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new com.wi.director.thrift.v1.common.SystemException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeStepModular_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class removeStepGroupModular_args implements org.apache.thrift.TBase<removeStepGroupModular_args, removeStepGroupModular_args._Fields>, java.io.Serializable, Cloneable, Comparable<removeStepGroupModular_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeStepGroupModular_args");

    private static final org.apache.thrift.protocol.TField JOB_TEMPLATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("jobTemplateId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PARENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parentId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField STEP_GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("stepGroupId", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField POSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("position", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeStepGroupModular_argsStandardSchemeFactory());
    }

    public String jobTemplateId; // required
    public String parentId; // required
    public String stepGroupId; // required
    public int position; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      JOB_TEMPLATE_ID((short)1, "jobTemplateId"),
      PARENT_ID((short)2, "parentId"),
      STEP_GROUP_ID((short)3, "stepGroupId"),
      POSITION((short)4, "position");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // JOB_TEMPLATE_ID
            return JOB_TEMPLATE_ID;
          case 2: // PARENT_ID
            return PARENT_ID;
          case 3: // STEP_GROUP_ID
            return STEP_GROUP_ID;
          case 4: // POSITION
            return POSITION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __POSITION_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.JOB_TEMPLATE_ID, new org.apache.thrift.meta_data.FieldMetaData("jobTemplateId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PARENT_ID, new org.apache.thrift.meta_data.FieldMetaData("parentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.STEP_GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("stepGroupId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.POSITION, new org.apache.thrift.meta_data.FieldMetaData("position", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeStepGroupModular_args.class, metaDataMap);
    }

    public removeStepGroupModular_args() {
    }

    public removeStepGroupModular_args(
      String jobTemplateId,
      String parentId,
      String stepGroupId,
      int position)
    {
      this();
      this.jobTemplateId = jobTemplateId;
      this.parentId = parentId;
      this.stepGroupId = stepGroupId;
      this.position = position;
      setPositionIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeStepGroupModular_args(removeStepGroupModular_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetJobTemplateId()) {
        this.jobTemplateId = other.jobTemplateId;
      }
      if (other.isSetParentId()) {
        this.parentId = other.parentId;
      }
      if (other.isSetStepGroupId()) {
        this.stepGroupId = other.stepGroupId;
      }
      this.position = other.position;
    }

    public removeStepGroupModular_args deepCopy() {
      return new removeStepGroupModular_args(this);
    }

    @Override
    public void clear() {
      this.jobTemplateId = null;
      this.parentId = null;
      this.stepGroupId = null;
      setPositionIsSet(false);
      this.position = 0;
    }

    public String getJobTemplateId() {
      return this.jobTemplateId;
    }

    public removeStepGroupModular_args setJobTemplateId(String jobTemplateId) {
      this.jobTemplateId = jobTemplateId;
      return this;
    }

    public void unsetJobTemplateId() {
      this.jobTemplateId = null;
    }

    /** Returns true if field jobTemplateId is set (has been assigned a value) and false otherwise */
    public boolean isSetJobTemplateId() {
      return this.jobTemplateId != null;
    }

    public void setJobTemplateIdIsSet(boolean value) {
      if (!value) {
        this.jobTemplateId = null;
      }
    }

    public String getParentId() {
      return this.parentId;
    }

    public removeStepGroupModular_args setParentId(String parentId) {
      this.parentId = parentId;
      return this;
    }

    public void unsetParentId() {
      this.parentId = null;
    }

    /** Returns true if field parentId is set (has been assigned a value) and false otherwise */
    public boolean isSetParentId() {
      return this.parentId != null;
    }

    public void setParentIdIsSet(boolean value) {
      if (!value) {
        this.parentId = null;
      }
    }

    public String getStepGroupId() {
      return this.stepGroupId;
    }

    public removeStepGroupModular_args setStepGroupId(String stepGroupId) {
      this.stepGroupId = stepGroupId;
      return this;
    }

    public void unsetStepGroupId() {
      this.stepGroupId = null;
    }

    /** Returns true if field stepGroupId is set (has been assigned a value) and false otherwise */
    public boolean isSetStepGroupId() {
      return this.stepGroupId != null;
    }

    public void setStepGroupIdIsSet(boolean value) {
      if (!value) {
        this.stepGroupId = null;
      }
    }

    public int getPosition() {
      return this.position;
    }

    public removeStepGroupModular_args setPosition(int position) {
      this.position = position;
      setPositionIsSet(true);
      return this;
    }

    public void unsetPosition() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POSITION_ISSET_ID);
    }

    /** Returns true if field position is set (has been assigned a value) and false otherwise */
    public boolean isSetPosition() {
      return EncodingUtils.testBit(__isset_bitfield, __POSITION_ISSET_ID);
    }

    public void setPositionIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POSITION_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case JOB_TEMPLATE_ID:
        if (value == null) {
          unsetJobTemplateId();
        } else {
          setJobTemplateId((String)value);
        }
        break;

      case PARENT_ID:
        if (value == null) {
          unsetParentId();
        } else {
          setParentId((String)value);
        }
        break;

      case STEP_GROUP_ID:
        if (value == null) {
          unsetStepGroupId();
        } else {
          setStepGroupId((String)value);
        }
        break;

      case POSITION:
        if (value == null) {
          unsetPosition();
        } else {
          setPosition((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case JOB_TEMPLATE_ID:
        return getJobTemplateId();

      case PARENT_ID:
        return getParentId();

      case STEP_GROUP_ID:
        return getStepGroupId();

      case POSITION:
        return getPosition();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case JOB_TEMPLATE_ID:
        return isSetJobTemplateId();
      case PARENT_ID:
        return isSetParentId();
      case STEP_GROUP_ID:
        return isSetStepGroupId();
      case POSITION:
        return isSetPosition();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeStepGroupModular_args)
        return this.equals((removeStepGroupModular_args)that);
      return false;
    }

    public boolean equals(removeStepGroupModular_args that) {
      if (that == null)
        return false;

      boolean this_present_jobTemplateId = true && this.isSetJobTemplateId();
      boolean that_present_jobTemplateId = true && that.isSetJobTemplateId();
      if (this_present_jobTemplateId || that_present_jobTemplateId) {
        if (!(this_present_jobTemplateId && that_present_jobTemplateId))
          return false;
        if (!this.jobTemplateId.equals(that.jobTemplateId))
          return false;
      }

      boolean this_present_parentId = true && this.isSetParentId();
      boolean that_present_parentId = true && that.isSetParentId();
      if (this_present_parentId || that_present_parentId) {
        if (!(this_present_parentId && that_present_parentId))
          return false;
        if (!this.parentId.equals(that.parentId))
          return false;
      }

      boolean this_present_stepGroupId = true && this.isSetStepGroupId();
      boolean that_present_stepGroupId = true && that.isSetStepGroupId();
      if (this_present_stepGroupId || that_present_stepGroupId) {
        if (!(this_present_stepGroupId && that_present_stepGroupId))
          return false;
        if (!this.stepGroupId.equals(that.stepGroupId))
          return false;
      }

      boolean this_present_position = true;
      boolean that_present_position = true;
      if (this_present_position || that_present_position) {
        if (!(this_present_position && that_present_position))
          return false;
        if (this.position != that.position)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_jobTemplateId = true && (isSetJobTemplateId());
      list.add(present_jobTemplateId);
      if (present_jobTemplateId)
        list.add(jobTemplateId);

      boolean present_parentId = true && (isSetParentId());
      list.add(present_parentId);
      if (present_parentId)
        list.add(parentId);

      boolean present_stepGroupId = true && (isSetStepGroupId());
      list.add(present_stepGroupId);
      if (present_stepGroupId)
        list.add(stepGroupId);

      boolean present_position = true;
      list.add(present_position);
      if (present_position)
        list.add(position);

      return list.hashCode();
    }

    @Override
    public int compareTo(removeStepGroupModular_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetJobTemplateId()).compareTo(other.isSetJobTemplateId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJobTemplateId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobTemplateId, other.jobTemplateId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParentId()).compareTo(other.isSetParentId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParentId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentId, other.parentId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStepGroupId()).compareTo(other.isSetStepGroupId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStepGroupId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stepGroupId, other.stepGroupId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPosition()).compareTo(other.isSetPosition());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPosition()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.position, other.position);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeStepGroupModular_args(");
      boolean first = true;

      sb.append("jobTemplateId:");
      if (this.jobTemplateId == null) {
        sb.append("null");
      } else {
        sb.append(this.jobTemplateId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("parentId:");
      if (this.parentId == null) {
        sb.append("null");
      } else {
        sb.append(this.parentId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("stepGroupId:");
      if (this.stepGroupId == null) {
        sb.append("null");
      } else {
        sb.append(this.stepGroupId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("position:");
      sb.append(this.position);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeStepGroupModular_argsStandardSchemeFactory implements SchemeFactory {
      public removeStepGroupModular_argsStandardScheme getScheme() {
        return new removeStepGroupModular_argsStandardScheme();
      }
    }

    private static class removeStepGroupModular_argsStandardScheme extends StandardScheme<removeStepGroupModular_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeStepGroupModular_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // JOB_TEMPLATE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jobTemplateId = iprot.readString();
                struct.setJobTemplateIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.parentId = iprot.readString();
                struct.setParentIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // STEP_GROUP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.stepGroupId = iprot.readString();
                struct.setStepGroupIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // POSITION
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.position = iprot.readI32();
                struct.setPositionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeStepGroupModular_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.jobTemplateId != null) {
          oprot.writeFieldBegin(JOB_TEMPLATE_ID_FIELD_DESC);
          oprot.writeString(struct.jobTemplateId);
          oprot.writeFieldEnd();
        }
        if (struct.parentId != null) {
          oprot.writeFieldBegin(PARENT_ID_FIELD_DESC);
          oprot.writeString(struct.parentId);
          oprot.writeFieldEnd();
        }
        if (struct.stepGroupId != null) {
          oprot.writeFieldBegin(STEP_GROUP_ID_FIELD_DESC);
          oprot.writeString(struct.stepGroupId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(POSITION_FIELD_DESC);
        oprot.writeI32(struct.position);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class removeStepGroupModular_result implements org.apache.thrift.TBase<removeStepGroupModular_result, removeStepGroupModular_result._Fields>, java.io.Serializable, Cloneable, Comparable<removeStepGroupModular_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeStepGroupModular_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeStepGroupModular_resultStandardSchemeFactory());
    }

    public JobTemplateModular success; // required
    public com.wi.director.thrift.v1.common.SystemException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JobTemplateModular.class)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeStepGroupModular_result.class, metaDataMap);
    }

    public removeStepGroupModular_result() {
    }

    public removeStepGroupModular_result(
      JobTemplateModular success,
      com.wi.director.thrift.v1.common.SystemException err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeStepGroupModular_result(removeStepGroupModular_result other) {
      if (other.isSetSuccess()) {
        this.success = new JobTemplateModular(other.success);
      }
      if (other.isSetErr()) {
        this.err = new com.wi.director.thrift.v1.common.SystemException(other.err);
      }
    }

    public removeStepGroupModular_result deepCopy() {
      return new removeStepGroupModular_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public JobTemplateModular getSuccess() {
      return this.success;
    }

    public removeStepGroupModular_result setSuccess(JobTemplateModular success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.wi.director.thrift.v1.common.SystemException getErr() {
      return this.err;
    }

    public removeStepGroupModular_result setErr(com.wi.director.thrift.v1.common.SystemException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((JobTemplateModular)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((com.wi.director.thrift.v1.common.SystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeStepGroupModular_result)
        return this.equals((removeStepGroupModular_result)that);
      return false;
    }

    public boolean equals(removeStepGroupModular_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(removeStepGroupModular_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeStepGroupModular_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeStepGroupModular_resultStandardSchemeFactory implements SchemeFactory {
      public removeStepGroupModular_resultStandardScheme getScheme() {
        return new removeStepGroupModular_resultStandardScheme();
      }
    }

    private static class removeStepGroupModular_resultStandardScheme extends StandardScheme<removeStepGroupModular_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeStepGroupModular_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new JobTemplateModular();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new com.wi.director.thrift.v1.common.SystemException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeStepGroupModular_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class cloneStepModular_args implements org.apache.thrift.TBase<cloneStepModular_args, cloneStepModular_args._Fields>, java.io.Serializable, Cloneable, Comparable<cloneStepModular_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cloneStepModular_args");

    private static final org.apache.thrift.protocol.TField JOB_TEMPLATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("jobTemplateId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PARENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parentId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField STEP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("stepId", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField POSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("position", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField NEW_PARENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("newParentId", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField NEW_POSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("newPosition", org.apache.thrift.protocol.TType.I32, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new cloneStepModular_argsStandardSchemeFactory());
    }

    public String jobTemplateId; // required
    public String parentId; // required
    public String stepId; // required
    public int position; // required
    public String newParentId; // required
    public int newPosition; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      JOB_TEMPLATE_ID((short)1, "jobTemplateId"),
      PARENT_ID((short)2, "parentId"),
      STEP_ID((short)3, "stepId"),
      POSITION((short)4, "position"),
      NEW_PARENT_ID((short)5, "newParentId"),
      NEW_POSITION((short)6, "newPosition");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // JOB_TEMPLATE_ID
            return JOB_TEMPLATE_ID;
          case 2: // PARENT_ID
            return PARENT_ID;
          case 3: // STEP_ID
            return STEP_ID;
          case 4: // POSITION
            return POSITION;
          case 5: // NEW_PARENT_ID
            return NEW_PARENT_ID;
          case 6: // NEW_POSITION
            return NEW_POSITION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __POSITION_ISSET_ID = 0;
    private static final int __NEWPOSITION_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.JOB_TEMPLATE_ID, new org.apache.thrift.meta_data.FieldMetaData("jobTemplateId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PARENT_ID, new org.apache.thrift.meta_data.FieldMetaData("parentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.STEP_ID, new org.apache.thrift.meta_data.FieldMetaData("stepId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.POSITION, new org.apache.thrift.meta_data.FieldMetaData("position", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.NEW_PARENT_ID, new org.apache.thrift.meta_data.FieldMetaData("newParentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NEW_POSITION, new org.apache.thrift.meta_data.FieldMetaData("newPosition", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cloneStepModular_args.class, metaDataMap);
    }

    public cloneStepModular_args() {
    }

    public cloneStepModular_args(
      String jobTemplateId,
      String parentId,
      String stepId,
      int position,
      String newParentId,
      int newPosition)
    {
      this();
      this.jobTemplateId = jobTemplateId;
      this.parentId = parentId;
      this.stepId = stepId;
      this.position = position;
      setPositionIsSet(true);
      this.newParentId = newParentId;
      this.newPosition = newPosition;
      setNewPositionIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cloneStepModular_args(cloneStepModular_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetJobTemplateId()) {
        this.jobTemplateId = other.jobTemplateId;
      }
      if (other.isSetParentId()) {
        this.parentId = other.parentId;
      }
      if (other.isSetStepId()) {
        this.stepId = other.stepId;
      }
      this.position = other.position;
      if (other.isSetNewParentId()) {
        this.newParentId = other.newParentId;
      }
      this.newPosition = other.newPosition;
    }

    public cloneStepModular_args deepCopy() {
      return new cloneStepModular_args(this);
    }

    @Override
    public void clear() {
      this.jobTemplateId = null;
      this.parentId = null;
      this.stepId = null;
      setPositionIsSet(false);
      this.position = 0;
      this.newParentId = null;
      setNewPositionIsSet(false);
      this.newPosition = 0;
    }

    public String getJobTemplateId() {
      return this.jobTemplateId;
    }

    public cloneStepModular_args setJobTemplateId(String jobTemplateId) {
      this.jobTemplateId = jobTemplateId;
      return this;
    }

    public void unsetJobTemplateId() {
      this.jobTemplateId = null;
    }

    /** Returns true if field jobTemplateId is set (has been assigned a value) and false otherwise */
    public boolean isSetJobTemplateId() {
      return this.jobTemplateId != null;
    }

    public void setJobTemplateIdIsSet(boolean value) {
      if (!value) {
        this.jobTemplateId = null;
      }
    }

    public String getParentId() {
      return this.parentId;
    }

    public cloneStepModular_args setParentId(String parentId) {
      this.parentId = parentId;
      return this;
    }

    public void unsetParentId() {
      this.parentId = null;
    }

    /** Returns true if field parentId is set (has been assigned a value) and false otherwise */
    public boolean isSetParentId() {
      return this.parentId != null;
    }

    public void setParentIdIsSet(boolean value) {
      if (!value) {
        this.parentId = null;
      }
    }

    public String getStepId() {
      return this.stepId;
    }

    public cloneStepModular_args setStepId(String stepId) {
      this.stepId = stepId;
      return this;
    }

    public void unsetStepId() {
      this.stepId = null;
    }

    /** Returns true if field stepId is set (has been assigned a value) and false otherwise */
    public boolean isSetStepId() {
      return this.stepId != null;
    }

    public void setStepIdIsSet(boolean value) {
      if (!value) {
        this.stepId = null;
      }
    }

    public int getPosition() {
      return this.position;
    }

    public cloneStepModular_args setPosition(int position) {
      this.position = position;
      setPositionIsSet(true);
      return this;
    }

    public void unsetPosition() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POSITION_ISSET_ID);
    }

    /** Returns true if field position is set (has been assigned a value) and false otherwise */
    public boolean isSetPosition() {
      return EncodingUtils.testBit(__isset_bitfield, __POSITION_ISSET_ID);
    }

    public void setPositionIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POSITION_ISSET_ID, value);
    }

    public String getNewParentId() {
      return this.newParentId;
    }

    public cloneStepModular_args setNewParentId(String newParentId) {
      this.newParentId = newParentId;
      return this;
    }

    public void unsetNewParentId() {
      this.newParentId = null;
    }

    /** Returns true if field newParentId is set (has been assigned a value) and false otherwise */
    public boolean isSetNewParentId() {
      return this.newParentId != null;
    }

    public void setNewParentIdIsSet(boolean value) {
      if (!value) {
        this.newParentId = null;
      }
    }

    public int getNewPosition() {
      return this.newPosition;
    }

    public cloneStepModular_args setNewPosition(int newPosition) {
      this.newPosition = newPosition;
      setNewPositionIsSet(true);
      return this;
    }

    public void unsetNewPosition() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NEWPOSITION_ISSET_ID);
    }

    /** Returns true if field newPosition is set (has been assigned a value) and false otherwise */
    public boolean isSetNewPosition() {
      return EncodingUtils.testBit(__isset_bitfield, __NEWPOSITION_ISSET_ID);
    }

    public void setNewPositionIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NEWPOSITION_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case JOB_TEMPLATE_ID:
        if (value == null) {
          unsetJobTemplateId();
        } else {
          setJobTemplateId((String)value);
        }
        break;

      case PARENT_ID:
        if (value == null) {
          unsetParentId();
        } else {
          setParentId((String)value);
        }
        break;

      case STEP_ID:
        if (value == null) {
          unsetStepId();
        } else {
          setStepId((String)value);
        }
        break;

      case POSITION:
        if (value == null) {
          unsetPosition();
        } else {
          setPosition((Integer)value);
        }
        break;

      case NEW_PARENT_ID:
        if (value == null) {
          unsetNewParentId();
        } else {
          setNewParentId((String)value);
        }
        break;

      case NEW_POSITION:
        if (value == null) {
          unsetNewPosition();
        } else {
          setNewPosition((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case JOB_TEMPLATE_ID:
        return getJobTemplateId();

      case PARENT_ID:
        return getParentId();

      case STEP_ID:
        return getStepId();

      case POSITION:
        return getPosition();

      case NEW_PARENT_ID:
        return getNewParentId();

      case NEW_POSITION:
        return getNewPosition();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case JOB_TEMPLATE_ID:
        return isSetJobTemplateId();
      case PARENT_ID:
        return isSetParentId();
      case STEP_ID:
        return isSetStepId();
      case POSITION:
        return isSetPosition();
      case NEW_PARENT_ID:
        return isSetNewParentId();
      case NEW_POSITION:
        return isSetNewPosition();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cloneStepModular_args)
        return this.equals((cloneStepModular_args)that);
      return false;
    }

    public boolean equals(cloneStepModular_args that) {
      if (that == null)
        return false;

      boolean this_present_jobTemplateId = true && this.isSetJobTemplateId();
      boolean that_present_jobTemplateId = true && that.isSetJobTemplateId();
      if (this_present_jobTemplateId || that_present_jobTemplateId) {
        if (!(this_present_jobTemplateId && that_present_jobTemplateId))
          return false;
        if (!this.jobTemplateId.equals(that.jobTemplateId))
          return false;
      }

      boolean this_present_parentId = true && this.isSetParentId();
      boolean that_present_parentId = true && that.isSetParentId();
      if (this_present_parentId || that_present_parentId) {
        if (!(this_present_parentId && that_present_parentId))
          return false;
        if (!this.parentId.equals(that.parentId))
          return false;
      }

      boolean this_present_stepId = true && this.isSetStepId();
      boolean that_present_stepId = true && that.isSetStepId();
      if (this_present_stepId || that_present_stepId) {
        if (!(this_present_stepId && that_present_stepId))
          return false;
        if (!this.stepId.equals(that.stepId))
          return false;
      }

      boolean this_present_position = true;
      boolean that_present_position = true;
      if (this_present_position || that_present_position) {
        if (!(this_present_position && that_present_position))
          return false;
        if (this.position != that.position)
          return false;
      }

      boolean this_present_newParentId = true && this.isSetNewParentId();
      boolean that_present_newParentId = true && that.isSetNewParentId();
      if (this_present_newParentId || that_present_newParentId) {
        if (!(this_present_newParentId && that_present_newParentId))
          return false;
        if (!this.newParentId.equals(that.newParentId))
          return false;
      }

      boolean this_present_newPosition = true;
      boolean that_present_newPosition = true;
      if (this_present_newPosition || that_present_newPosition) {
        if (!(this_present_newPosition && that_present_newPosition))
          return false;
        if (this.newPosition != that.newPosition)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_jobTemplateId = true && (isSetJobTemplateId());
      list.add(present_jobTemplateId);
      if (present_jobTemplateId)
        list.add(jobTemplateId);

      boolean present_parentId = true && (isSetParentId());
      list.add(present_parentId);
      if (present_parentId)
        list.add(parentId);

      boolean present_stepId = true && (isSetStepId());
      list.add(present_stepId);
      if (present_stepId)
        list.add(stepId);

      boolean present_position = true;
      list.add(present_position);
      if (present_position)
        list.add(position);

      boolean present_newParentId = true && (isSetNewParentId());
      list.add(present_newParentId);
      if (present_newParentId)
        list.add(newParentId);

      boolean present_newPosition = true;
      list.add(present_newPosition);
      if (present_newPosition)
        list.add(newPosition);

      return list.hashCode();
    }

    @Override
    public int compareTo(cloneStepModular_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetJobTemplateId()).compareTo(other.isSetJobTemplateId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJobTemplateId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobTemplateId, other.jobTemplateId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParentId()).compareTo(other.isSetParentId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParentId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentId, other.parentId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStepId()).compareTo(other.isSetStepId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStepId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stepId, other.stepId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPosition()).compareTo(other.isSetPosition());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPosition()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.position, other.position);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNewParentId()).compareTo(other.isSetNewParentId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNewParentId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newParentId, other.newParentId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNewPosition()).compareTo(other.isSetNewPosition());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNewPosition()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newPosition, other.newPosition);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cloneStepModular_args(");
      boolean first = true;

      sb.append("jobTemplateId:");
      if (this.jobTemplateId == null) {
        sb.append("null");
      } else {
        sb.append(this.jobTemplateId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("parentId:");
      if (this.parentId == null) {
        sb.append("null");
      } else {
        sb.append(this.parentId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("stepId:");
      if (this.stepId == null) {
        sb.append("null");
      } else {
        sb.append(this.stepId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("position:");
      sb.append(this.position);
      first = false;
      if (!first) sb.append(", ");
      sb.append("newParentId:");
      if (this.newParentId == null) {
        sb.append("null");
      } else {
        sb.append(this.newParentId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("newPosition:");
      sb.append(this.newPosition);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cloneStepModular_argsStandardSchemeFactory implements SchemeFactory {
      public cloneStepModular_argsStandardScheme getScheme() {
        return new cloneStepModular_argsStandardScheme();
      }
    }

    private static class cloneStepModular_argsStandardScheme extends StandardScheme<cloneStepModular_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cloneStepModular_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // JOB_TEMPLATE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jobTemplateId = iprot.readString();
                struct.setJobTemplateIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.parentId = iprot.readString();
                struct.setParentIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // STEP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.stepId = iprot.readString();
                struct.setStepIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // POSITION
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.position = iprot.readI32();
                struct.setPositionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // NEW_PARENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.newParentId = iprot.readString();
                struct.setNewParentIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // NEW_POSITION
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.newPosition = iprot.readI32();
                struct.setNewPositionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cloneStepModular_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.jobTemplateId != null) {
          oprot.writeFieldBegin(JOB_TEMPLATE_ID_FIELD_DESC);
          oprot.writeString(struct.jobTemplateId);
          oprot.writeFieldEnd();
        }
        if (struct.parentId != null) {
          oprot.writeFieldBegin(PARENT_ID_FIELD_DESC);
          oprot.writeString(struct.parentId);
          oprot.writeFieldEnd();
        }
        if (struct.stepId != null) {
          oprot.writeFieldBegin(STEP_ID_FIELD_DESC);
          oprot.writeString(struct.stepId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(POSITION_FIELD_DESC);
        oprot.writeI32(struct.position);
        oprot.writeFieldEnd();
        if (struct.newParentId != null) {
          oprot.writeFieldBegin(NEW_PARENT_ID_FIELD_DESC);
          oprot.writeString(struct.newParentId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(NEW_POSITION_FIELD_DESC);
        oprot.writeI32(struct.newPosition);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class cloneStepModular_result implements org.apache.thrift.TBase<cloneStepModular_result, cloneStepModular_result._Fields>, java.io.Serializable, Cloneable, Comparable<cloneStepModular_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cloneStepModular_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new cloneStepModular_resultStandardSchemeFactory());
    }

    public JobTemplateModular success; // required
    public com.wi.director.thrift.v1.common.SystemException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JobTemplateModular.class)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cloneStepModular_result.class, metaDataMap);
    }

    public cloneStepModular_result() {
    }

    public cloneStepModular_result(
      JobTemplateModular success,
      com.wi.director.thrift.v1.common.SystemException err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cloneStepModular_result(cloneStepModular_result other) {
      if (other.isSetSuccess()) {
        this.success = new JobTemplateModular(other.success);
      }
      if (other.isSetErr()) {
        this.err = new com.wi.director.thrift.v1.common.SystemException(other.err);
      }
    }

    public cloneStepModular_result deepCopy() {
      return new cloneStepModular_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public JobTemplateModular getSuccess() {
      return this.success;
    }

    public cloneStepModular_result setSuccess(JobTemplateModular success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.wi.director.thrift.v1.common.SystemException getErr() {
      return this.err;
    }

    public cloneStepModular_result setErr(com.wi.director.thrift.v1.common.SystemException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((JobTemplateModular)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((com.wi.director.thrift.v1.common.SystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cloneStepModular_result)
        return this.equals((cloneStepModular_result)that);
      return false;
    }

    public boolean equals(cloneStepModular_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(cloneStepModular_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cloneStepModular_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cloneStepModular_resultStandardSchemeFactory implements SchemeFactory {
      public cloneStepModular_resultStandardScheme getScheme() {
        return new cloneStepModular_resultStandardScheme();
      }
    }

    private static class cloneStepModular_resultStandardScheme extends StandardScheme<cloneStepModular_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cloneStepModular_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new JobTemplateModular();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new com.wi.director.thrift.v1.common.SystemException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cloneStepModular_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class cloneStepGroupModular_args implements org.apache.thrift.TBase<cloneStepGroupModular_args, cloneStepGroupModular_args._Fields>, java.io.Serializable, Cloneable, Comparable<cloneStepGroupModular_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cloneStepGroupModular_args");

    private static final org.apache.thrift.protocol.TField JOB_TEMPLATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("jobTemplateId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PARENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parentId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField STEP_GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("stepGroupId", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField POSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("position", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField NEW_PARENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("newParentId", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField NEW_POSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("newPosition", org.apache.thrift.protocol.TType.I32, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new cloneStepGroupModular_argsStandardSchemeFactory());
    }

    public String jobTemplateId; // required
    public String parentId; // required
    public String stepGroupId; // required
    public int position; // required
    public String newParentId; // required
    public int newPosition; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      JOB_TEMPLATE_ID((short)1, "jobTemplateId"),
      PARENT_ID((short)2, "parentId"),
      STEP_GROUP_ID((short)3, "stepGroupId"),
      POSITION((short)4, "position"),
      NEW_PARENT_ID((short)5, "newParentId"),
      NEW_POSITION((short)6, "newPosition");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // JOB_TEMPLATE_ID
            return JOB_TEMPLATE_ID;
          case 2: // PARENT_ID
            return PARENT_ID;
          case 3: // STEP_GROUP_ID
            return STEP_GROUP_ID;
          case 4: // POSITION
            return POSITION;
          case 5: // NEW_PARENT_ID
            return NEW_PARENT_ID;
          case 6: // NEW_POSITION
            return NEW_POSITION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __POSITION_ISSET_ID = 0;
    private static final int __NEWPOSITION_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.JOB_TEMPLATE_ID, new org.apache.thrift.meta_data.FieldMetaData("jobTemplateId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PARENT_ID, new org.apache.thrift.meta_data.FieldMetaData("parentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.STEP_GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("stepGroupId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.POSITION, new org.apache.thrift.meta_data.FieldMetaData("position", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.NEW_PARENT_ID, new org.apache.thrift.meta_data.FieldMetaData("newParentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NEW_POSITION, new org.apache.thrift.meta_data.FieldMetaData("newPosition", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cloneStepGroupModular_args.class, metaDataMap);
    }

    public cloneStepGroupModular_args() {
    }

    public cloneStepGroupModular_args(
      String jobTemplateId,
      String parentId,
      String stepGroupId,
      int position,
      String newParentId,
      int newPosition)
    {
      this();
      this.jobTemplateId = jobTemplateId;
      this.parentId = parentId;
      this.stepGroupId = stepGroupId;
      this.position = position;
      setPositionIsSet(true);
      this.newParentId = newParentId;
      this.newPosition = newPosition;
      setNewPositionIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cloneStepGroupModular_args(cloneStepGroupModular_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetJobTemplateId()) {
        this.jobTemplateId = other.jobTemplateId;
      }
      if (other.isSetParentId()) {
        this.parentId = other.parentId;
      }
      if (other.isSetStepGroupId()) {
        this.stepGroupId = other.stepGroupId;
      }
      this.position = other.position;
      if (other.isSetNewParentId()) {
        this.newParentId = other.newParentId;
      }
      this.newPosition = other.newPosition;
    }

    public cloneStepGroupModular_args deepCopy() {
      return new cloneStepGroupModular_args(this);
    }

    @Override
    public void clear() {
      this.jobTemplateId = null;
      this.parentId = null;
      this.stepGroupId = null;
      setPositionIsSet(false);
      this.position = 0;
      this.newParentId = null;
      setNewPositionIsSet(false);
      this.newPosition = 0;
    }

    public String getJobTemplateId() {
      return this.jobTemplateId;
    }

    public cloneStepGroupModular_args setJobTemplateId(String jobTemplateId) {
      this.jobTemplateId = jobTemplateId;
      return this;
    }

    public void unsetJobTemplateId() {
      this.jobTemplateId = null;
    }

    /** Returns true if field jobTemplateId is set (has been assigned a value) and false otherwise */
    public boolean isSetJobTemplateId() {
      return this.jobTemplateId != null;
    }

    public void setJobTemplateIdIsSet(boolean value) {
      if (!value) {
        this.jobTemplateId = null;
      }
    }

    public String getParentId() {
      return this.parentId;
    }

    public cloneStepGroupModular_args setParentId(String parentId) {
      this.parentId = parentId;
      return this;
    }

    public void unsetParentId() {
      this.parentId = null;
    }

    /** Returns true if field parentId is set (has been assigned a value) and false otherwise */
    public boolean isSetParentId() {
      return this.parentId != null;
    }

    public void setParentIdIsSet(boolean value) {
      if (!value) {
        this.parentId = null;
      }
    }

    public String getStepGroupId() {
      return this.stepGroupId;
    }

    public cloneStepGroupModular_args setStepGroupId(String stepGroupId) {
      this.stepGroupId = stepGroupId;
      return this;
    }

    public void unsetStepGroupId() {
      this.stepGroupId = null;
    }

    /** Returns true if field stepGroupId is set (has been assigned a value) and false otherwise */
    public boolean isSetStepGroupId() {
      return this.stepGroupId != null;
    }

    public void setStepGroupIdIsSet(boolean value) {
      if (!value) {
        this.stepGroupId = null;
      }
    }

    public int getPosition() {
      return this.position;
    }

    public cloneStepGroupModular_args setPosition(int position) {
      this.position = position;
      setPositionIsSet(true);
      return this;
    }

    public void unsetPosition() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POSITION_ISSET_ID);
    }

    /** Returns true if field position is set (has been assigned a value) and false otherwise */
    public boolean isSetPosition() {
      return EncodingUtils.testBit(__isset_bitfield, __POSITION_ISSET_ID);
    }

    public void setPositionIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POSITION_ISSET_ID, value);
    }

    public String getNewParentId() {
      return this.newParentId;
    }

    public cloneStepGroupModular_args setNewParentId(String newParentId) {
      this.newParentId = newParentId;
      return this;
    }

    public void unsetNewParentId() {
      this.newParentId = null;
    }

    /** Returns true if field newParentId is set (has been assigned a value) and false otherwise */
    public boolean isSetNewParentId() {
      return this.newParentId != null;
    }

    public void setNewParentIdIsSet(boolean value) {
      if (!value) {
        this.newParentId = null;
      }
    }

    public int getNewPosition() {
      return this.newPosition;
    }

    public cloneStepGroupModular_args setNewPosition(int newPosition) {
      this.newPosition = newPosition;
      setNewPositionIsSet(true);
      return this;
    }

    public void unsetNewPosition() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NEWPOSITION_ISSET_ID);
    }

    /** Returns true if field newPosition is set (has been assigned a value) and false otherwise */
    public boolean isSetNewPosition() {
      return EncodingUtils.testBit(__isset_bitfield, __NEWPOSITION_ISSET_ID);
    }

    public void setNewPositionIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NEWPOSITION_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case JOB_TEMPLATE_ID:
        if (value == null) {
          unsetJobTemplateId();
        } else {
          setJobTemplateId((String)value);
        }
        break;

      case PARENT_ID:
        if (value == null) {
          unsetParentId();
        } else {
          setParentId((String)value);
        }
        break;

      case STEP_GROUP_ID:
        if (value == null) {
          unsetStepGroupId();
        } else {
          setStepGroupId((String)value);
        }
        break;

      case POSITION:
        if (value == null) {
          unsetPosition();
        } else {
          setPosition((Integer)value);
        }
        break;

      case NEW_PARENT_ID:
        if (value == null) {
          unsetNewParentId();
        } else {
          setNewParentId((String)value);
        }
        break;

      case NEW_POSITION:
        if (value == null) {
          unsetNewPosition();
        } else {
          setNewPosition((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case JOB_TEMPLATE_ID:
        return getJobTemplateId();

      case PARENT_ID:
        return getParentId();

      case STEP_GROUP_ID:
        return getStepGroupId();

      case POSITION:
        return getPosition();

      case NEW_PARENT_ID:
        return getNewParentId();

      case NEW_POSITION:
        return getNewPosition();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case JOB_TEMPLATE_ID:
        return isSetJobTemplateId();
      case PARENT_ID:
        return isSetParentId();
      case STEP_GROUP_ID:
        return isSetStepGroupId();
      case POSITION:
        return isSetPosition();
      case NEW_PARENT_ID:
        return isSetNewParentId();
      case NEW_POSITION:
        return isSetNewPosition();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cloneStepGroupModular_args)
        return this.equals((cloneStepGroupModular_args)that);
      return false;
    }

    public boolean equals(cloneStepGroupModular_args that) {
      if (that == null)
        return false;

      boolean this_present_jobTemplateId = true && this.isSetJobTemplateId();
      boolean that_present_jobTemplateId = true && that.isSetJobTemplateId();
      if (this_present_jobTemplateId || that_present_jobTemplateId) {
        if (!(this_present_jobTemplateId && that_present_jobTemplateId))
          return false;
        if (!this.jobTemplateId.equals(that.jobTemplateId))
          return false;
      }

      boolean this_present_parentId = true && this.isSetParentId();
      boolean that_present_parentId = true && that.isSetParentId();
      if (this_present_parentId || that_present_parentId) {
        if (!(this_present_parentId && that_present_parentId))
          return false;
        if (!this.parentId.equals(that.parentId))
          return false;
      }

      boolean this_present_stepGroupId = true && this.isSetStepGroupId();
      boolean that_present_stepGroupId = true && that.isSetStepGroupId();
      if (this_present_stepGroupId || that_present_stepGroupId) {
        if (!(this_present_stepGroupId && that_present_stepGroupId))
          return false;
        if (!this.stepGroupId.equals(that.stepGroupId))
          return false;
      }

      boolean this_present_position = true;
      boolean that_present_position = true;
      if (this_present_position || that_present_position) {
        if (!(this_present_position && that_present_position))
          return false;
        if (this.position != that.position)
          return false;
      }

      boolean this_present_newParentId = true && this.isSetNewParentId();
      boolean that_present_newParentId = true && that.isSetNewParentId();
      if (this_present_newParentId || that_present_newParentId) {
        if (!(this_present_newParentId && that_present_newParentId))
          return false;
        if (!this.newParentId.equals(that.newParentId))
          return false;
      }

      boolean this_present_newPosition = true;
      boolean that_present_newPosition = true;
      if (this_present_newPosition || that_present_newPosition) {
        if (!(this_present_newPosition && that_present_newPosition))
          return false;
        if (this.newPosition != that.newPosition)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_jobTemplateId = true && (isSetJobTemplateId());
      list.add(present_jobTemplateId);
      if (present_jobTemplateId)
        list.add(jobTemplateId);

      boolean present_parentId = true && (isSetParentId());
      list.add(present_parentId);
      if (present_parentId)
        list.add(parentId);

      boolean present_stepGroupId = true && (isSetStepGroupId());
      list.add(present_stepGroupId);
      if (present_stepGroupId)
        list.add(stepGroupId);

      boolean present_position = true;
      list.add(present_position);
      if (present_position)
        list.add(position);

      boolean present_newParentId = true && (isSetNewParentId());
      list.add(present_newParentId);
      if (present_newParentId)
        list.add(newParentId);

      boolean present_newPosition = true;
      list.add(present_newPosition);
      if (present_newPosition)
        list.add(newPosition);

      return list.hashCode();
    }

    @Override
    public int compareTo(cloneStepGroupModular_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetJobTemplateId()).compareTo(other.isSetJobTemplateId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJobTemplateId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobTemplateId, other.jobTemplateId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParentId()).compareTo(other.isSetParentId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParentId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentId, other.parentId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStepGroupId()).compareTo(other.isSetStepGroupId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStepGroupId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stepGroupId, other.stepGroupId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPosition()).compareTo(other.isSetPosition());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPosition()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.position, other.position);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNewParentId()).compareTo(other.isSetNewParentId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNewParentId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newParentId, other.newParentId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNewPosition()).compareTo(other.isSetNewPosition());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNewPosition()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newPosition, other.newPosition);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cloneStepGroupModular_args(");
      boolean first = true;

      sb.append("jobTemplateId:");
      if (this.jobTemplateId == null) {
        sb.append("null");
      } else {
        sb.append(this.jobTemplateId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("parentId:");
      if (this.parentId == null) {
        sb.append("null");
      } else {
        sb.append(this.parentId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("stepGroupId:");
      if (this.stepGroupId == null) {
        sb.append("null");
      } else {
        sb.append(this.stepGroupId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("position:");
      sb.append(this.position);
      first = false;
      if (!first) sb.append(", ");
      sb.append("newParentId:");
      if (this.newParentId == null) {
        sb.append("null");
      } else {
        sb.append(this.newParentId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("newPosition:");
      sb.append(this.newPosition);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cloneStepGroupModular_argsStandardSchemeFactory implements SchemeFactory {
      public cloneStepGroupModular_argsStandardScheme getScheme() {
        return new cloneStepGroupModular_argsStandardScheme();
      }
    }

    private static class cloneStepGroupModular_argsStandardScheme extends StandardScheme<cloneStepGroupModular_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cloneStepGroupModular_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // JOB_TEMPLATE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jobTemplateId = iprot.readString();
                struct.setJobTemplateIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.parentId = iprot.readString();
                struct.setParentIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // STEP_GROUP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.stepGroupId = iprot.readString();
                struct.setStepGroupIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // POSITION
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.position = iprot.readI32();
                struct.setPositionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // NEW_PARENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.newParentId = iprot.readString();
                struct.setNewParentIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // NEW_POSITION
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.newPosition = iprot.readI32();
                struct.setNewPositionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cloneStepGroupModular_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.jobTemplateId != null) {
          oprot.writeFieldBegin(JOB_TEMPLATE_ID_FIELD_DESC);
          oprot.writeString(struct.jobTemplateId);
          oprot.writeFieldEnd();
        }
        if (struct.parentId != null) {
          oprot.writeFieldBegin(PARENT_ID_FIELD_DESC);
          oprot.writeString(struct.parentId);
          oprot.writeFieldEnd();
        }
        if (struct.stepGroupId != null) {
          oprot.writeFieldBegin(STEP_GROUP_ID_FIELD_DESC);
          oprot.writeString(struct.stepGroupId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(POSITION_FIELD_DESC);
        oprot.writeI32(struct.position);
        oprot.writeFieldEnd();
        if (struct.newParentId != null) {
          oprot.writeFieldBegin(NEW_PARENT_ID_FIELD_DESC);
          oprot.writeString(struct.newParentId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(NEW_POSITION_FIELD_DESC);
        oprot.writeI32(struct.newPosition);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class cloneStepGroupModular_result implements org.apache.thrift.TBase<cloneStepGroupModular_result, cloneStepGroupModular_result._Fields>, java.io.Serializable, Cloneable, Comparable<cloneStepGroupModular_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cloneStepGroupModular_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new cloneStepGroupModular_resultStandardSchemeFactory());
    }

    public JobTemplateModular success; // required
    public com.wi.director.thrift.v1.common.SystemException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JobTemplateModular.class)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cloneStepGroupModular_result.class, metaDataMap);
    }

    public cloneStepGroupModular_result() {
    }

    public cloneStepGroupModular_result(
      JobTemplateModular success,
      com.wi.director.thrift.v1.common.SystemException err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cloneStepGroupModular_result(cloneStepGroupModular_result other) {
      if (other.isSetSuccess()) {
        this.success = new JobTemplateModular(other.success);
      }
      if (other.isSetErr()) {
        this.err = new com.wi.director.thrift.v1.common.SystemException(other.err);
      }
    }

    public cloneStepGroupModular_result deepCopy() {
      return new cloneStepGroupModular_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public JobTemplateModular getSuccess() {
      return this.success;
    }

    public cloneStepGroupModular_result setSuccess(JobTemplateModular success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.wi.director.thrift.v1.common.SystemException getErr() {
      return this.err;
    }

    public cloneStepGroupModular_result setErr(com.wi.director.thrift.v1.common.SystemException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((JobTemplateModular)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((com.wi.director.thrift.v1.common.SystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cloneStepGroupModular_result)
        return this.equals((cloneStepGroupModular_result)that);
      return false;
    }

    public boolean equals(cloneStepGroupModular_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(cloneStepGroupModular_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cloneStepGroupModular_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cloneStepGroupModular_resultStandardSchemeFactory implements SchemeFactory {
      public cloneStepGroupModular_resultStandardScheme getScheme() {
        return new cloneStepGroupModular_resultStandardScheme();
      }
    }

    private static class cloneStepGroupModular_resultStandardScheme extends StandardScheme<cloneStepGroupModular_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cloneStepGroupModular_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new JobTemplateModular();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new com.wi.director.thrift.v1.common.SystemException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cloneStepGroupModular_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class searchStepGroups_args implements org.apache.thrift.TBase<searchStepGroups_args, searchStepGroups_args._Fields>, java.io.Serializable, Cloneable, Comparable<searchStepGroups_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchStepGroups_args");

    private static final org.apache.thrift.protocol.TField TEAM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("teamId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new searchStepGroups_argsStandardSchemeFactory());
    }

    public String teamId; // required
    public String title; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TEAM_ID((short)1, "teamId"),
      TITLE((short)2, "title");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TEAM_ID
            return TEAM_ID;
          case 2: // TITLE
            return TITLE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TEAM_ID, new org.apache.thrift.meta_data.FieldMetaData("teamId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchStepGroups_args.class, metaDataMap);
    }

    public searchStepGroups_args() {
    }

    public searchStepGroups_args(
      String teamId,
      String title)
    {
      this();
      this.teamId = teamId;
      this.title = title;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchStepGroups_args(searchStepGroups_args other) {
      if (other.isSetTeamId()) {
        this.teamId = other.teamId;
      }
      if (other.isSetTitle()) {
        this.title = other.title;
      }
    }

    public searchStepGroups_args deepCopy() {
      return new searchStepGroups_args(this);
    }

    @Override
    public void clear() {
      this.teamId = null;
      this.title = null;
    }

    public String getTeamId() {
      return this.teamId;
    }

    public searchStepGroups_args setTeamId(String teamId) {
      this.teamId = teamId;
      return this;
    }

    public void unsetTeamId() {
      this.teamId = null;
    }

    /** Returns true if field teamId is set (has been assigned a value) and false otherwise */
    public boolean isSetTeamId() {
      return this.teamId != null;
    }

    public void setTeamIdIsSet(boolean value) {
      if (!value) {
        this.teamId = null;
      }
    }

    public String getTitle() {
      return this.title;
    }

    public searchStepGroups_args setTitle(String title) {
      this.title = title;
      return this;
    }

    public void unsetTitle() {
      this.title = null;
    }

    /** Returns true if field title is set (has been assigned a value) and false otherwise */
    public boolean isSetTitle() {
      return this.title != null;
    }

    public void setTitleIsSet(boolean value) {
      if (!value) {
        this.title = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TEAM_ID:
        if (value == null) {
          unsetTeamId();
        } else {
          setTeamId((String)value);
        }
        break;

      case TITLE:
        if (value == null) {
          unsetTitle();
        } else {
          setTitle((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TEAM_ID:
        return getTeamId();

      case TITLE:
        return getTitle();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TEAM_ID:
        return isSetTeamId();
      case TITLE:
        return isSetTitle();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchStepGroups_args)
        return this.equals((searchStepGroups_args)that);
      return false;
    }

    public boolean equals(searchStepGroups_args that) {
      if (that == null)
        return false;

      boolean this_present_teamId = true && this.isSetTeamId();
      boolean that_present_teamId = true && that.isSetTeamId();
      if (this_present_teamId || that_present_teamId) {
        if (!(this_present_teamId && that_present_teamId))
          return false;
        if (!this.teamId.equals(that.teamId))
          return false;
      }

      boolean this_present_title = true && this.isSetTitle();
      boolean that_present_title = true && that.isSetTitle();
      if (this_present_title || that_present_title) {
        if (!(this_present_title && that_present_title))
          return false;
        if (!this.title.equals(that.title))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_teamId = true && (isSetTeamId());
      list.add(present_teamId);
      if (present_teamId)
        list.add(teamId);

      boolean present_title = true && (isSetTitle());
      list.add(present_title);
      if (present_title)
        list.add(title);

      return list.hashCode();
    }

    @Override
    public int compareTo(searchStepGroups_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTeamId()).compareTo(other.isSetTeamId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTeamId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teamId, other.teamId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTitle()).compareTo(other.isSetTitle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTitle()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchStepGroups_args(");
      boolean first = true;

      sb.append("teamId:");
      if (this.teamId == null) {
        sb.append("null");
      } else {
        sb.append(this.teamId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("title:");
      if (this.title == null) {
        sb.append("null");
      } else {
        sb.append(this.title);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchStepGroups_argsStandardSchemeFactory implements SchemeFactory {
      public searchStepGroups_argsStandardScheme getScheme() {
        return new searchStepGroups_argsStandardScheme();
      }
    }

    private static class searchStepGroups_argsStandardScheme extends StandardScheme<searchStepGroups_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searchStepGroups_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TEAM_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.teamId = iprot.readString();
                struct.setTeamIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TITLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.title = iprot.readString();
                struct.setTitleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searchStepGroups_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.teamId != null) {
          oprot.writeFieldBegin(TEAM_ID_FIELD_DESC);
          oprot.writeString(struct.teamId);
          oprot.writeFieldEnd();
        }
        if (struct.title != null) {
          oprot.writeFieldBegin(TITLE_FIELD_DESC);
          oprot.writeString(struct.title);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class searchStepGroups_result implements org.apache.thrift.TBase<searchStepGroups_result, searchStepGroups_result._Fields>, java.io.Serializable, Cloneable, Comparable<searchStepGroups_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchStepGroups_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new searchStepGroups_resultStandardSchemeFactory());
    }

    public List<com.wi.director.thrift.v1.step.BaseStep> success; // required
    public com.wi.director.thrift.v1.common.SystemException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.step.BaseStep.class))));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchStepGroups_result.class, metaDataMap);
    }

    public searchStepGroups_result() {
    }

    public searchStepGroups_result(
      List<com.wi.director.thrift.v1.step.BaseStep> success,
      com.wi.director.thrift.v1.common.SystemException err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchStepGroups_result(searchStepGroups_result other) {
      if (other.isSetSuccess()) {
        List<com.wi.director.thrift.v1.step.BaseStep> __this__success = new ArrayList<com.wi.director.thrift.v1.step.BaseStep>(other.success.size());
        for (com.wi.director.thrift.v1.step.BaseStep other_element : other.success) {
          __this__success.add(new com.wi.director.thrift.v1.step.BaseStep(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetErr()) {
        this.err = new com.wi.director.thrift.v1.common.SystemException(other.err);
      }
    }

    public searchStepGroups_result deepCopy() {
      return new searchStepGroups_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.wi.director.thrift.v1.step.BaseStep> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.wi.director.thrift.v1.step.BaseStep elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.wi.director.thrift.v1.step.BaseStep>();
      }
      this.success.add(elem);
    }

    public List<com.wi.director.thrift.v1.step.BaseStep> getSuccess() {
      return this.success;
    }

    public searchStepGroups_result setSuccess(List<com.wi.director.thrift.v1.step.BaseStep> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.wi.director.thrift.v1.common.SystemException getErr() {
      return this.err;
    }

    public searchStepGroups_result setErr(com.wi.director.thrift.v1.common.SystemException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.wi.director.thrift.v1.step.BaseStep>)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((com.wi.director.thrift.v1.common.SystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchStepGroups_result)
        return this.equals((searchStepGroups_result)that);
      return false;
    }

    public boolean equals(searchStepGroups_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(searchStepGroups_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchStepGroups_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchStepGroups_resultStandardSchemeFactory implements SchemeFactory {
      public searchStepGroups_resultStandardScheme getScheme() {
        return new searchStepGroups_resultStandardScheme();
      }
    }

    private static class searchStepGroups_resultStandardScheme extends StandardScheme<searchStepGroups_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searchStepGroups_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list126 = iprot.readListBegin();
                  struct.success = new ArrayList<com.wi.director.thrift.v1.step.BaseStep>(_list126.size);
                  com.wi.director.thrift.v1.step.BaseStep _elem127;
                  for (int _i128 = 0; _i128 < _list126.size; ++_i128)
                  {
                    _elem127 = new com.wi.director.thrift.v1.step.BaseStep();
                    _elem127.read(iprot);
                    struct.success.add(_elem127);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new com.wi.director.thrift.v1.common.SystemException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searchStepGroups_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.wi.director.thrift.v1.step.BaseStep _iter129 : struct.success)
            {
              _iter129.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class addDocument_args implements org.apache.thrift.TBase<addDocument_args, addDocument_args._Fields>, java.io.Serializable, Cloneable, Comparable<addDocument_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addDocument_args");

    private static final org.apache.thrift.protocol.TField JOB_TEMPLATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("jobTemplateId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField JOB_TEMPLATE_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("jobTemplateVersion", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField DOCUMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("documentId", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addDocument_argsStandardSchemeFactory());
    }

    public String jobTemplateId; // required
    public int jobTemplateVersion; // required
    public String documentId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      JOB_TEMPLATE_ID((short)1, "jobTemplateId"),
      JOB_TEMPLATE_VERSION((short)2, "jobTemplateVersion"),
      DOCUMENT_ID((short)3, "documentId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // JOB_TEMPLATE_ID
            return JOB_TEMPLATE_ID;
          case 2: // JOB_TEMPLATE_VERSION
            return JOB_TEMPLATE_VERSION;
          case 3: // DOCUMENT_ID
            return DOCUMENT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __JOBTEMPLATEVERSION_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.JOB_TEMPLATE_ID, new org.apache.thrift.meta_data.FieldMetaData("jobTemplateId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.JOB_TEMPLATE_VERSION, new org.apache.thrift.meta_data.FieldMetaData("jobTemplateVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.DOCUMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("documentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addDocument_args.class, metaDataMap);
    }

    public addDocument_args() {
    }

    public addDocument_args(
      String jobTemplateId,
      int jobTemplateVersion,
      String documentId)
    {
      this();
      this.jobTemplateId = jobTemplateId;
      this.jobTemplateVersion = jobTemplateVersion;
      setJobTemplateVersionIsSet(true);
      this.documentId = documentId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addDocument_args(addDocument_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetJobTemplateId()) {
        this.jobTemplateId = other.jobTemplateId;
      }
      this.jobTemplateVersion = other.jobTemplateVersion;
      if (other.isSetDocumentId()) {
        this.documentId = other.documentId;
      }
    }

    public addDocument_args deepCopy() {
      return new addDocument_args(this);
    }

    @Override
    public void clear() {
      this.jobTemplateId = null;
      setJobTemplateVersionIsSet(false);
      this.jobTemplateVersion = 0;
      this.documentId = null;
    }

    public String getJobTemplateId() {
      return this.jobTemplateId;
    }

    public addDocument_args setJobTemplateId(String jobTemplateId) {
      this.jobTemplateId = jobTemplateId;
      return this;
    }

    public void unsetJobTemplateId() {
      this.jobTemplateId = null;
    }

    /** Returns true if field jobTemplateId is set (has been assigned a value) and false otherwise */
    public boolean isSetJobTemplateId() {
      return this.jobTemplateId != null;
    }

    public void setJobTemplateIdIsSet(boolean value) {
      if (!value) {
        this.jobTemplateId = null;
      }
    }

    public int getJobTemplateVersion() {
      return this.jobTemplateVersion;
    }

    public addDocument_args setJobTemplateVersion(int jobTemplateVersion) {
      this.jobTemplateVersion = jobTemplateVersion;
      setJobTemplateVersionIsSet(true);
      return this;
    }

    public void unsetJobTemplateVersion() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __JOBTEMPLATEVERSION_ISSET_ID);
    }

    /** Returns true if field jobTemplateVersion is set (has been assigned a value) and false otherwise */
    public boolean isSetJobTemplateVersion() {
      return EncodingUtils.testBit(__isset_bitfield, __JOBTEMPLATEVERSION_ISSET_ID);
    }

    public void setJobTemplateVersionIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __JOBTEMPLATEVERSION_ISSET_ID, value);
    }

    public String getDocumentId() {
      return this.documentId;
    }

    public addDocument_args setDocumentId(String documentId) {
      this.documentId = documentId;
      return this;
    }

    public void unsetDocumentId() {
      this.documentId = null;
    }

    /** Returns true if field documentId is set (has been assigned a value) and false otherwise */
    public boolean isSetDocumentId() {
      return this.documentId != null;
    }

    public void setDocumentIdIsSet(boolean value) {
      if (!value) {
        this.documentId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case JOB_TEMPLATE_ID:
        if (value == null) {
          unsetJobTemplateId();
        } else {
          setJobTemplateId((String)value);
        }
        break;

      case JOB_TEMPLATE_VERSION:
        if (value == null) {
          unsetJobTemplateVersion();
        } else {
          setJobTemplateVersion((Integer)value);
        }
        break;

      case DOCUMENT_ID:
        if (value == null) {
          unsetDocumentId();
        } else {
          setDocumentId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case JOB_TEMPLATE_ID:
        return getJobTemplateId();

      case JOB_TEMPLATE_VERSION:
        return getJobTemplateVersion();

      case DOCUMENT_ID:
        return getDocumentId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case JOB_TEMPLATE_ID:
        return isSetJobTemplateId();
      case JOB_TEMPLATE_VERSION:
        return isSetJobTemplateVersion();
      case DOCUMENT_ID:
        return isSetDocumentId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addDocument_args)
        return this.equals((addDocument_args)that);
      return false;
    }

    public boolean equals(addDocument_args that) {
      if (that == null)
        return false;

      boolean this_present_jobTemplateId = true && this.isSetJobTemplateId();
      boolean that_present_jobTemplateId = true && that.isSetJobTemplateId();
      if (this_present_jobTemplateId || that_present_jobTemplateId) {
        if (!(this_present_jobTemplateId && that_present_jobTemplateId))
          return false;
        if (!this.jobTemplateId.equals(that.jobTemplateId))
          return false;
      }

      boolean this_present_jobTemplateVersion = true;
      boolean that_present_jobTemplateVersion = true;
      if (this_present_jobTemplateVersion || that_present_jobTemplateVersion) {
        if (!(this_present_jobTemplateVersion && that_present_jobTemplateVersion))
          return false;
        if (this.jobTemplateVersion != that.jobTemplateVersion)
          return false;
      }

      boolean this_present_documentId = true && this.isSetDocumentId();
      boolean that_present_documentId = true && that.isSetDocumentId();
      if (this_present_documentId || that_present_documentId) {
        if (!(this_present_documentId && that_present_documentId))
          return false;
        if (!this.documentId.equals(that.documentId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_jobTemplateId = true && (isSetJobTemplateId());
      list.add(present_jobTemplateId);
      if (present_jobTemplateId)
        list.add(jobTemplateId);

      boolean present_jobTemplateVersion = true;
      list.add(present_jobTemplateVersion);
      if (present_jobTemplateVersion)
        list.add(jobTemplateVersion);

      boolean present_documentId = true && (isSetDocumentId());
      list.add(present_documentId);
      if (present_documentId)
        list.add(documentId);

      return list.hashCode();
    }

    @Override
    public int compareTo(addDocument_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetJobTemplateId()).compareTo(other.isSetJobTemplateId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJobTemplateId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobTemplateId, other.jobTemplateId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetJobTemplateVersion()).compareTo(other.isSetJobTemplateVersion());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJobTemplateVersion()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobTemplateVersion, other.jobTemplateVersion);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDocumentId()).compareTo(other.isSetDocumentId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDocumentId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.documentId, other.documentId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addDocument_args(");
      boolean first = true;

      sb.append("jobTemplateId:");
      if (this.jobTemplateId == null) {
        sb.append("null");
      } else {
        sb.append(this.jobTemplateId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("jobTemplateVersion:");
      sb.append(this.jobTemplateVersion);
      first = false;
      if (!first) sb.append(", ");
      sb.append("documentId:");
      if (this.documentId == null) {
        sb.append("null");
      } else {
        sb.append(this.documentId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addDocument_argsStandardSchemeFactory implements SchemeFactory {
      public addDocument_argsStandardScheme getScheme() {
        return new addDocument_argsStandardScheme();
      }
    }

    private static class addDocument_argsStandardScheme extends StandardScheme<addDocument_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addDocument_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // JOB_TEMPLATE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jobTemplateId = iprot.readString();
                struct.setJobTemplateIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // JOB_TEMPLATE_VERSION
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.jobTemplateVersion = iprot.readI32();
                struct.setJobTemplateVersionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DOCUMENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.documentId = iprot.readString();
                struct.setDocumentIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addDocument_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.jobTemplateId != null) {
          oprot.writeFieldBegin(JOB_TEMPLATE_ID_FIELD_DESC);
          oprot.writeString(struct.jobTemplateId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(JOB_TEMPLATE_VERSION_FIELD_DESC);
        oprot.writeI32(struct.jobTemplateVersion);
        oprot.writeFieldEnd();
        if (struct.documentId != null) {
          oprot.writeFieldBegin(DOCUMENT_ID_FIELD_DESC);
          oprot.writeString(struct.documentId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class addDocument_result implements org.apache.thrift.TBase<addDocument_result, addDocument_result._Fields>, java.io.Serializable, Cloneable, Comparable<addDocument_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addDocument_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addDocument_resultStandardSchemeFactory());
    }

    public JobTemplate success; // required
    public com.wi.director.thrift.v1.common.SystemException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JobTemplate.class)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addDocument_result.class, metaDataMap);
    }

    public addDocument_result() {
    }

    public addDocument_result(
      JobTemplate success,
      com.wi.director.thrift.v1.common.SystemException err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addDocument_result(addDocument_result other) {
      if (other.isSetSuccess()) {
        this.success = new JobTemplate(other.success);
      }
      if (other.isSetErr()) {
        this.err = new com.wi.director.thrift.v1.common.SystemException(other.err);
      }
    }

    public addDocument_result deepCopy() {
      return new addDocument_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public JobTemplate getSuccess() {
      return this.success;
    }

    public addDocument_result setSuccess(JobTemplate success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.wi.director.thrift.v1.common.SystemException getErr() {
      return this.err;
    }

    public addDocument_result setErr(com.wi.director.thrift.v1.common.SystemException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((JobTemplate)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((com.wi.director.thrift.v1.common.SystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addDocument_result)
        return this.equals((addDocument_result)that);
      return false;
    }

    public boolean equals(addDocument_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(addDocument_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addDocument_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addDocument_resultStandardSchemeFactory implements SchemeFactory {
      public addDocument_resultStandardScheme getScheme() {
        return new addDocument_resultStandardScheme();
      }
    }

    private static class addDocument_resultStandardScheme extends StandardScheme<addDocument_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addDocument_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new JobTemplate();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new com.wi.director.thrift.v1.common.SystemException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addDocument_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class removeDocument_args implements org.apache.thrift.TBase<removeDocument_args, removeDocument_args._Fields>, java.io.Serializable, Cloneable, Comparable<removeDocument_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeDocument_args");

    private static final org.apache.thrift.protocol.TField JOB_TEMPLATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("jobTemplateId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField DOCUMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("documentId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeDocument_argsStandardSchemeFactory());
    }

    public String jobTemplateId; // required
    public String documentId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      JOB_TEMPLATE_ID((short)1, "jobTemplateId"),
      DOCUMENT_ID((short)2, "documentId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // JOB_TEMPLATE_ID
            return JOB_TEMPLATE_ID;
          case 2: // DOCUMENT_ID
            return DOCUMENT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.JOB_TEMPLATE_ID, new org.apache.thrift.meta_data.FieldMetaData("jobTemplateId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DOCUMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("documentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeDocument_args.class, metaDataMap);
    }

    public removeDocument_args() {
    }

    public removeDocument_args(
      String jobTemplateId,
      String documentId)
    {
      this();
      this.jobTemplateId = jobTemplateId;
      this.documentId = documentId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeDocument_args(removeDocument_args other) {
      if (other.isSetJobTemplateId()) {
        this.jobTemplateId = other.jobTemplateId;
      }
      if (other.isSetDocumentId()) {
        this.documentId = other.documentId;
      }
    }

    public removeDocument_args deepCopy() {
      return new removeDocument_args(this);
    }

    @Override
    public void clear() {
      this.jobTemplateId = null;
      this.documentId = null;
    }

    public String getJobTemplateId() {
      return this.jobTemplateId;
    }

    public removeDocument_args setJobTemplateId(String jobTemplateId) {
      this.jobTemplateId = jobTemplateId;
      return this;
    }

    public void unsetJobTemplateId() {
      this.jobTemplateId = null;
    }

    /** Returns true if field jobTemplateId is set (has been assigned a value) and false otherwise */
    public boolean isSetJobTemplateId() {
      return this.jobTemplateId != null;
    }

    public void setJobTemplateIdIsSet(boolean value) {
      if (!value) {
        this.jobTemplateId = null;
      }
    }

    public String getDocumentId() {
      return this.documentId;
    }

    public removeDocument_args setDocumentId(String documentId) {
      this.documentId = documentId;
      return this;
    }

    public void unsetDocumentId() {
      this.documentId = null;
    }

    /** Returns true if field documentId is set (has been assigned a value) and false otherwise */
    public boolean isSetDocumentId() {
      return this.documentId != null;
    }

    public void setDocumentIdIsSet(boolean value) {
      if (!value) {
        this.documentId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case JOB_TEMPLATE_ID:
        if (value == null) {
          unsetJobTemplateId();
        } else {
          setJobTemplateId((String)value);
        }
        break;

      case DOCUMENT_ID:
        if (value == null) {
          unsetDocumentId();
        } else {
          setDocumentId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case JOB_TEMPLATE_ID:
        return getJobTemplateId();

      case DOCUMENT_ID:
        return getDocumentId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case JOB_TEMPLATE_ID:
        return isSetJobTemplateId();
      case DOCUMENT_ID:
        return isSetDocumentId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeDocument_args)
        return this.equals((removeDocument_args)that);
      return false;
    }

    public boolean equals(removeDocument_args that) {
      if (that == null)
        return false;

      boolean this_present_jobTemplateId = true && this.isSetJobTemplateId();
      boolean that_present_jobTemplateId = true && that.isSetJobTemplateId();
      if (this_present_jobTemplateId || that_present_jobTemplateId) {
        if (!(this_present_jobTemplateId && that_present_jobTemplateId))
          return false;
        if (!this.jobTemplateId.equals(that.jobTemplateId))
          return false;
      }

      boolean this_present_documentId = true && this.isSetDocumentId();
      boolean that_present_documentId = true && that.isSetDocumentId();
      if (this_present_documentId || that_present_documentId) {
        if (!(this_present_documentId && that_present_documentId))
          return false;
        if (!this.documentId.equals(that.documentId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_jobTemplateId = true && (isSetJobTemplateId());
      list.add(present_jobTemplateId);
      if (present_jobTemplateId)
        list.add(jobTemplateId);

      boolean present_documentId = true && (isSetDocumentId());
      list.add(present_documentId);
      if (present_documentId)
        list.add(documentId);

      return list.hashCode();
    }

    @Override
    public int compareTo(removeDocument_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetJobTemplateId()).compareTo(other.isSetJobTemplateId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJobTemplateId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobTemplateId, other.jobTemplateId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDocumentId()).compareTo(other.isSetDocumentId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDocumentId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.documentId, other.documentId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeDocument_args(");
      boolean first = true;

      sb.append("jobTemplateId:");
      if (this.jobTemplateId == null) {
        sb.append("null");
      } else {
        sb.append(this.jobTemplateId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("documentId:");
      if (this.documentId == null) {
        sb.append("null");
      } else {
        sb.append(this.documentId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeDocument_argsStandardSchemeFactory implements SchemeFactory {
      public removeDocument_argsStandardScheme getScheme() {
        return new removeDocument_argsStandardScheme();
      }
    }

    private static class removeDocument_argsStandardScheme extends StandardScheme<removeDocument_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeDocument_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // JOB_TEMPLATE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jobTemplateId = iprot.readString();
                struct.setJobTemplateIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DOCUMENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.documentId = iprot.readString();
                struct.setDocumentIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeDocument_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.jobTemplateId != null) {
          oprot.writeFieldBegin(JOB_TEMPLATE_ID_FIELD_DESC);
          oprot.writeString(struct.jobTemplateId);
          oprot.writeFieldEnd();
        }
        if (struct.documentId != null) {
          oprot.writeFieldBegin(DOCUMENT_ID_FIELD_DESC);
          oprot.writeString(struct.documentId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class removeDocument_result implements org.apache.thrift.TBase<removeDocument_result, removeDocument_result._Fields>, java.io.Serializable, Cloneable, Comparable<removeDocument_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeDocument_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeDocument_resultStandardSchemeFactory());
    }

    public JobTemplate success; // required
    public com.wi.director.thrift.v1.common.SystemException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JobTemplate.class)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeDocument_result.class, metaDataMap);
    }

    public removeDocument_result() {
    }

    public removeDocument_result(
      JobTemplate success,
      com.wi.director.thrift.v1.common.SystemException err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeDocument_result(removeDocument_result other) {
      if (other.isSetSuccess()) {
        this.success = new JobTemplate(other.success);
      }
      if (other.isSetErr()) {
        this.err = new com.wi.director.thrift.v1.common.SystemException(other.err);
      }
    }

    public removeDocument_result deepCopy() {
      return new removeDocument_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public JobTemplate getSuccess() {
      return this.success;
    }

    public removeDocument_result setSuccess(JobTemplate success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.wi.director.thrift.v1.common.SystemException getErr() {
      return this.err;
    }

    public removeDocument_result setErr(com.wi.director.thrift.v1.common.SystemException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((JobTemplate)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((com.wi.director.thrift.v1.common.SystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeDocument_result)
        return this.equals((removeDocument_result)that);
      return false;
    }

    public boolean equals(removeDocument_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(removeDocument_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeDocument_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeDocument_resultStandardSchemeFactory implements SchemeFactory {
      public removeDocument_resultStandardScheme getScheme() {
        return new removeDocument_resultStandardScheme();
      }
    }

    private static class removeDocument_resultStandardScheme extends StandardScheme<removeDocument_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeDocument_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new JobTemplate();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new com.wi.director.thrift.v1.common.SystemException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeDocument_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class updateRootHeaders_args implements org.apache.thrift.TBase<updateRootHeaders_args, updateRootHeaders_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateRootHeaders_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateRootHeaders_args");

    private static final org.apache.thrift.protocol.TField JOB_TEMPLATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("jobTemplateId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField HEADERS_FIELD_DESC = new org.apache.thrift.protocol.TField("headers", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateRootHeaders_argsStandardSchemeFactory());
    }

    public String jobTemplateId; // required
    public com.wi.director.thrift.v1.group_headers.StepGroupHeaders headers; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      JOB_TEMPLATE_ID((short)1, "jobTemplateId"),
      HEADERS((short)2, "headers");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // JOB_TEMPLATE_ID
            return JOB_TEMPLATE_ID;
          case 2: // HEADERS
            return HEADERS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.JOB_TEMPLATE_ID, new org.apache.thrift.meta_data.FieldMetaData("jobTemplateId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HEADERS, new org.apache.thrift.meta_data.FieldMetaData("headers", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.group_headers.StepGroupHeaders.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateRootHeaders_args.class, metaDataMap);
    }

    public updateRootHeaders_args() {
    }

    public updateRootHeaders_args(
      String jobTemplateId,
      com.wi.director.thrift.v1.group_headers.StepGroupHeaders headers)
    {
      this();
      this.jobTemplateId = jobTemplateId;
      this.headers = headers;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateRootHeaders_args(updateRootHeaders_args other) {
      if (other.isSetJobTemplateId()) {
        this.jobTemplateId = other.jobTemplateId;
      }
      if (other.isSetHeaders()) {
        this.headers = new com.wi.director.thrift.v1.group_headers.StepGroupHeaders(other.headers);
      }
    }

    public updateRootHeaders_args deepCopy() {
      return new updateRootHeaders_args(this);
    }

    @Override
    public void clear() {
      this.jobTemplateId = null;
      this.headers = null;
    }

    public String getJobTemplateId() {
      return this.jobTemplateId;
    }

    public updateRootHeaders_args setJobTemplateId(String jobTemplateId) {
      this.jobTemplateId = jobTemplateId;
      return this;
    }

    public void unsetJobTemplateId() {
      this.jobTemplateId = null;
    }

    /** Returns true if field jobTemplateId is set (has been assigned a value) and false otherwise */
    public boolean isSetJobTemplateId() {
      return this.jobTemplateId != null;
    }

    public void setJobTemplateIdIsSet(boolean value) {
      if (!value) {
        this.jobTemplateId = null;
      }
    }

    public com.wi.director.thrift.v1.group_headers.StepGroupHeaders getHeaders() {
      return this.headers;
    }

    public updateRootHeaders_args setHeaders(com.wi.director.thrift.v1.group_headers.StepGroupHeaders headers) {
      this.headers = headers;
      return this;
    }

    public void unsetHeaders() {
      this.headers = null;
    }

    /** Returns true if field headers is set (has been assigned a value) and false otherwise */
    public boolean isSetHeaders() {
      return this.headers != null;
    }

    public void setHeadersIsSet(boolean value) {
      if (!value) {
        this.headers = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case JOB_TEMPLATE_ID:
        if (value == null) {
          unsetJobTemplateId();
        } else {
          setJobTemplateId((String)value);
        }
        break;

      case HEADERS:
        if (value == null) {
          unsetHeaders();
        } else {
          setHeaders((com.wi.director.thrift.v1.group_headers.StepGroupHeaders)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case JOB_TEMPLATE_ID:
        return getJobTemplateId();

      case HEADERS:
        return getHeaders();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case JOB_TEMPLATE_ID:
        return isSetJobTemplateId();
      case HEADERS:
        return isSetHeaders();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateRootHeaders_args)
        return this.equals((updateRootHeaders_args)that);
      return false;
    }

    public boolean equals(updateRootHeaders_args that) {
      if (that == null)
        return false;

      boolean this_present_jobTemplateId = true && this.isSetJobTemplateId();
      boolean that_present_jobTemplateId = true && that.isSetJobTemplateId();
      if (this_present_jobTemplateId || that_present_jobTemplateId) {
        if (!(this_present_jobTemplateId && that_present_jobTemplateId))
          return false;
        if (!this.jobTemplateId.equals(that.jobTemplateId))
          return false;
      }

      boolean this_present_headers = true && this.isSetHeaders();
      boolean that_present_headers = true && that.isSetHeaders();
      if (this_present_headers || that_present_headers) {
        if (!(this_present_headers && that_present_headers))
          return false;
        if (!this.headers.equals(that.headers))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_jobTemplateId = true && (isSetJobTemplateId());
      list.add(present_jobTemplateId);
      if (present_jobTemplateId)
        list.add(jobTemplateId);

      boolean present_headers = true && (isSetHeaders());
      list.add(present_headers);
      if (present_headers)
        list.add(headers);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateRootHeaders_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetJobTemplateId()).compareTo(other.isSetJobTemplateId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJobTemplateId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobTemplateId, other.jobTemplateId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHeaders()).compareTo(other.isSetHeaders());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHeaders()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.headers, other.headers);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateRootHeaders_args(");
      boolean first = true;

      sb.append("jobTemplateId:");
      if (this.jobTemplateId == null) {
        sb.append("null");
      } else {
        sb.append(this.jobTemplateId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("headers:");
      if (this.headers == null) {
        sb.append("null");
      } else {
        sb.append(this.headers);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (headers != null) {
        headers.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateRootHeaders_argsStandardSchemeFactory implements SchemeFactory {
      public updateRootHeaders_argsStandardScheme getScheme() {
        return new updateRootHeaders_argsStandardScheme();
      }
    }

    private static class updateRootHeaders_argsStandardScheme extends StandardScheme<updateRootHeaders_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateRootHeaders_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // JOB_TEMPLATE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jobTemplateId = iprot.readString();
                struct.setJobTemplateIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // HEADERS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.headers = new com.wi.director.thrift.v1.group_headers.StepGroupHeaders();
                struct.headers.read(iprot);
                struct.setHeadersIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateRootHeaders_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.jobTemplateId != null) {
          oprot.writeFieldBegin(JOB_TEMPLATE_ID_FIELD_DESC);
          oprot.writeString(struct.jobTemplateId);
          oprot.writeFieldEnd();
        }
        if (struct.headers != null) {
          oprot.writeFieldBegin(HEADERS_FIELD_DESC);
          struct.headers.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class updateRootHeaders_result implements org.apache.thrift.TBase<updateRootHeaders_result, updateRootHeaders_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateRootHeaders_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateRootHeaders_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateRootHeaders_resultStandardSchemeFactory());
    }

    public JobTemplate success; // required
    public com.wi.director.thrift.v1.common.SystemException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JobTemplate.class)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateRootHeaders_result.class, metaDataMap);
    }

    public updateRootHeaders_result() {
    }

    public updateRootHeaders_result(
      JobTemplate success,
      com.wi.director.thrift.v1.common.SystemException err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateRootHeaders_result(updateRootHeaders_result other) {
      if (other.isSetSuccess()) {
        this.success = new JobTemplate(other.success);
      }
      if (other.isSetErr()) {
        this.err = new com.wi.director.thrift.v1.common.SystemException(other.err);
      }
    }

    public updateRootHeaders_result deepCopy() {
      return new updateRootHeaders_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public JobTemplate getSuccess() {
      return this.success;
    }

    public updateRootHeaders_result setSuccess(JobTemplate success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.wi.director.thrift.v1.common.SystemException getErr() {
      return this.err;
    }

    public updateRootHeaders_result setErr(com.wi.director.thrift.v1.common.SystemException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((JobTemplate)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((com.wi.director.thrift.v1.common.SystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateRootHeaders_result)
        return this.equals((updateRootHeaders_result)that);
      return false;
    }

    public boolean equals(updateRootHeaders_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateRootHeaders_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateRootHeaders_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateRootHeaders_resultStandardSchemeFactory implements SchemeFactory {
      public updateRootHeaders_resultStandardScheme getScheme() {
        return new updateRootHeaders_resultStandardScheme();
      }
    }

    private static class updateRootHeaders_resultStandardScheme extends StandardScheme<updateRootHeaders_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateRootHeaders_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new JobTemplate();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new com.wi.director.thrift.v1.common.SystemException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateRootHeaders_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class updateMetadata_args implements org.apache.thrift.TBase<updateMetadata_args, updateMetadata_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateMetadata_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateMetadata_args");

    private static final org.apache.thrift.protocol.TField JOB_TEMPLATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("jobTemplateId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField UPDATED_FIELD_DESC = new org.apache.thrift.protocol.TField("updated", org.apache.thrift.protocol.TType.MAP, (short)2);
    private static final org.apache.thrift.protocol.TField REMOVED_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("removedIds", org.apache.thrift.protocol.TType.LIST, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateMetadata_argsStandardSchemeFactory());
    }

    public String jobTemplateId; // required
    public Map<String,com.wi.director.thrift.v1.metadata.MetadataValue> updated; // required
    public List<String> removedIds; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      JOB_TEMPLATE_ID((short)1, "jobTemplateId"),
      UPDATED((short)2, "updated"),
      REMOVED_IDS((short)3, "removedIds");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // JOB_TEMPLATE_ID
            return JOB_TEMPLATE_ID;
          case 2: // UPDATED
            return UPDATED;
          case 3: // REMOVED_IDS
            return REMOVED_IDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.JOB_TEMPLATE_ID, new org.apache.thrift.meta_data.FieldMetaData("jobTemplateId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.UPDATED, new org.apache.thrift.meta_data.FieldMetaData("updated", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.metadata.MetadataValue.class))));
      tmpMap.put(_Fields.REMOVED_IDS, new org.apache.thrift.meta_data.FieldMetaData("removedIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateMetadata_args.class, metaDataMap);
    }

    public updateMetadata_args() {
    }

    public updateMetadata_args(
      String jobTemplateId,
      Map<String,com.wi.director.thrift.v1.metadata.MetadataValue> updated,
      List<String> removedIds)
    {
      this();
      this.jobTemplateId = jobTemplateId;
      this.updated = updated;
      this.removedIds = removedIds;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateMetadata_args(updateMetadata_args other) {
      if (other.isSetJobTemplateId()) {
        this.jobTemplateId = other.jobTemplateId;
      }
      if (other.isSetUpdated()) {
        Map<String,com.wi.director.thrift.v1.metadata.MetadataValue> __this__updated = new HashMap<String,com.wi.director.thrift.v1.metadata.MetadataValue>(other.updated.size());
        for (Map.Entry<String, com.wi.director.thrift.v1.metadata.MetadataValue> other_element : other.updated.entrySet()) {

          String other_element_key = other_element.getKey();
          com.wi.director.thrift.v1.metadata.MetadataValue other_element_value = other_element.getValue();

          String __this__updated_copy_key = other_element_key;

          com.wi.director.thrift.v1.metadata.MetadataValue __this__updated_copy_value = new com.wi.director.thrift.v1.metadata.MetadataValue(other_element_value);

          __this__updated.put(__this__updated_copy_key, __this__updated_copy_value);
        }
        this.updated = __this__updated;
      }
      if (other.isSetRemovedIds()) {
        List<String> __this__removedIds = new ArrayList<String>(other.removedIds);
        this.removedIds = __this__removedIds;
      }
    }

    public updateMetadata_args deepCopy() {
      return new updateMetadata_args(this);
    }

    @Override
    public void clear() {
      this.jobTemplateId = null;
      this.updated = null;
      this.removedIds = null;
    }

    public String getJobTemplateId() {
      return this.jobTemplateId;
    }

    public updateMetadata_args setJobTemplateId(String jobTemplateId) {
      this.jobTemplateId = jobTemplateId;
      return this;
    }

    public void unsetJobTemplateId() {
      this.jobTemplateId = null;
    }

    /** Returns true if field jobTemplateId is set (has been assigned a value) and false otherwise */
    public boolean isSetJobTemplateId() {
      return this.jobTemplateId != null;
    }

    public void setJobTemplateIdIsSet(boolean value) {
      if (!value) {
        this.jobTemplateId = null;
      }
    }

    public int getUpdatedSize() {
      return (this.updated == null) ? 0 : this.updated.size();
    }

    public void putToUpdated(String key, com.wi.director.thrift.v1.metadata.MetadataValue val) {
      if (this.updated == null) {
        this.updated = new HashMap<String,com.wi.director.thrift.v1.metadata.MetadataValue>();
      }
      this.updated.put(key, val);
    }

    public Map<String,com.wi.director.thrift.v1.metadata.MetadataValue> getUpdated() {
      return this.updated;
    }

    public updateMetadata_args setUpdated(Map<String,com.wi.director.thrift.v1.metadata.MetadataValue> updated) {
      this.updated = updated;
      return this;
    }

    public void unsetUpdated() {
      this.updated = null;
    }

    /** Returns true if field updated is set (has been assigned a value) and false otherwise */
    public boolean isSetUpdated() {
      return this.updated != null;
    }

    public void setUpdatedIsSet(boolean value) {
      if (!value) {
        this.updated = null;
      }
    }

    public int getRemovedIdsSize() {
      return (this.removedIds == null) ? 0 : this.removedIds.size();
    }

    public java.util.Iterator<String> getRemovedIdsIterator() {
      return (this.removedIds == null) ? null : this.removedIds.iterator();
    }

    public void addToRemovedIds(String elem) {
      if (this.removedIds == null) {
        this.removedIds = new ArrayList<String>();
      }
      this.removedIds.add(elem);
    }

    public List<String> getRemovedIds() {
      return this.removedIds;
    }

    public updateMetadata_args setRemovedIds(List<String> removedIds) {
      this.removedIds = removedIds;
      return this;
    }

    public void unsetRemovedIds() {
      this.removedIds = null;
    }

    /** Returns true if field removedIds is set (has been assigned a value) and false otherwise */
    public boolean isSetRemovedIds() {
      return this.removedIds != null;
    }

    public void setRemovedIdsIsSet(boolean value) {
      if (!value) {
        this.removedIds = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case JOB_TEMPLATE_ID:
        if (value == null) {
          unsetJobTemplateId();
        } else {
          setJobTemplateId((String)value);
        }
        break;

      case UPDATED:
        if (value == null) {
          unsetUpdated();
        } else {
          setUpdated((Map<String,com.wi.director.thrift.v1.metadata.MetadataValue>)value);
        }
        break;

      case REMOVED_IDS:
        if (value == null) {
          unsetRemovedIds();
        } else {
          setRemovedIds((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case JOB_TEMPLATE_ID:
        return getJobTemplateId();

      case UPDATED:
        return getUpdated();

      case REMOVED_IDS:
        return getRemovedIds();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case JOB_TEMPLATE_ID:
        return isSetJobTemplateId();
      case UPDATED:
        return isSetUpdated();
      case REMOVED_IDS:
        return isSetRemovedIds();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateMetadata_args)
        return this.equals((updateMetadata_args)that);
      return false;
    }

    public boolean equals(updateMetadata_args that) {
      if (that == null)
        return false;

      boolean this_present_jobTemplateId = true && this.isSetJobTemplateId();
      boolean that_present_jobTemplateId = true && that.isSetJobTemplateId();
      if (this_present_jobTemplateId || that_present_jobTemplateId) {
        if (!(this_present_jobTemplateId && that_present_jobTemplateId))
          return false;
        if (!this.jobTemplateId.equals(that.jobTemplateId))
          return false;
      }

      boolean this_present_updated = true && this.isSetUpdated();
      boolean that_present_updated = true && that.isSetUpdated();
      if (this_present_updated || that_present_updated) {
        if (!(this_present_updated && that_present_updated))
          return false;
        if (!this.updated.equals(that.updated))
          return false;
      }

      boolean this_present_removedIds = true && this.isSetRemovedIds();
      boolean that_present_removedIds = true && that.isSetRemovedIds();
      if (this_present_removedIds || that_present_removedIds) {
        if (!(this_present_removedIds && that_present_removedIds))
          return false;
        if (!this.removedIds.equals(that.removedIds))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_jobTemplateId = true && (isSetJobTemplateId());
      list.add(present_jobTemplateId);
      if (present_jobTemplateId)
        list.add(jobTemplateId);

      boolean present_updated = true && (isSetUpdated());
      list.add(present_updated);
      if (present_updated)
        list.add(updated);

      boolean present_removedIds = true && (isSetRemovedIds());
      list.add(present_removedIds);
      if (present_removedIds)
        list.add(removedIds);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateMetadata_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetJobTemplateId()).compareTo(other.isSetJobTemplateId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJobTemplateId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobTemplateId, other.jobTemplateId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUpdated()).compareTo(other.isSetUpdated());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUpdated()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updated, other.updated);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRemovedIds()).compareTo(other.isSetRemovedIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRemovedIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.removedIds, other.removedIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateMetadata_args(");
      boolean first = true;

      sb.append("jobTemplateId:");
      if (this.jobTemplateId == null) {
        sb.append("null");
      } else {
        sb.append(this.jobTemplateId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("updated:");
      if (this.updated == null) {
        sb.append("null");
      } else {
        sb.append(this.updated);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("removedIds:");
      if (this.removedIds == null) {
        sb.append("null");
      } else {
        sb.append(this.removedIds);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateMetadata_argsStandardSchemeFactory implements SchemeFactory {
      public updateMetadata_argsStandardScheme getScheme() {
        return new updateMetadata_argsStandardScheme();
      }
    }

    private static class updateMetadata_argsStandardScheme extends StandardScheme<updateMetadata_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateMetadata_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // JOB_TEMPLATE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jobTemplateId = iprot.readString();
                struct.setJobTemplateIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // UPDATED
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map130 = iprot.readMapBegin();
                  struct.updated = new HashMap<String,com.wi.director.thrift.v1.metadata.MetadataValue>(2*_map130.size);
                  String _key131;
                  com.wi.director.thrift.v1.metadata.MetadataValue _val132;
                  for (int _i133 = 0; _i133 < _map130.size; ++_i133)
                  {
                    _key131 = iprot.readString();
                    _val132 = new com.wi.director.thrift.v1.metadata.MetadataValue();
                    _val132.read(iprot);
                    struct.updated.put(_key131, _val132);
                  }
                  iprot.readMapEnd();
                }
                struct.setUpdatedIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // REMOVED_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list134 = iprot.readListBegin();
                  struct.removedIds = new ArrayList<String>(_list134.size);
                  String _elem135;
                  for (int _i136 = 0; _i136 < _list134.size; ++_i136)
                  {
                    _elem135 = iprot.readString();
                    struct.removedIds.add(_elem135);
                  }
                  iprot.readListEnd();
                }
                struct.setRemovedIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateMetadata_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.jobTemplateId != null) {
          oprot.writeFieldBegin(JOB_TEMPLATE_ID_FIELD_DESC);
          oprot.writeString(struct.jobTemplateId);
          oprot.writeFieldEnd();
        }
        if (struct.updated != null) {
          oprot.writeFieldBegin(UPDATED_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.updated.size()));
            for (Map.Entry<String, com.wi.director.thrift.v1.metadata.MetadataValue> _iter137 : struct.updated.entrySet())
            {
              oprot.writeString(_iter137.getKey());
              _iter137.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.removedIds != null) {
          oprot.writeFieldBegin(REMOVED_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.removedIds.size()));
            for (String _iter138 : struct.removedIds)
            {
              oprot.writeString(_iter138);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class updateMetadata_result implements org.apache.thrift.TBase<updateMetadata_result, updateMetadata_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateMetadata_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateMetadata_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateMetadata_resultStandardSchemeFactory());
    }

    public Map<String,com.wi.director.thrift.v1.metadata.MetadataEntry> success; // required
    public com.wi.director.thrift.v1.common.SystemException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.metadata.MetadataEntry.class))));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateMetadata_result.class, metaDataMap);
    }

    public updateMetadata_result() {
    }

    public updateMetadata_result(
      Map<String,com.wi.director.thrift.v1.metadata.MetadataEntry> success,
      com.wi.director.thrift.v1.common.SystemException err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateMetadata_result(updateMetadata_result other) {
      if (other.isSetSuccess()) {
        Map<String,com.wi.director.thrift.v1.metadata.MetadataEntry> __this__success = new HashMap<String,com.wi.director.thrift.v1.metadata.MetadataEntry>(other.success.size());
        for (Map.Entry<String, com.wi.director.thrift.v1.metadata.MetadataEntry> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          com.wi.director.thrift.v1.metadata.MetadataEntry other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          com.wi.director.thrift.v1.metadata.MetadataEntry __this__success_copy_value = new com.wi.director.thrift.v1.metadata.MetadataEntry(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
      if (other.isSetErr()) {
        this.err = new com.wi.director.thrift.v1.common.SystemException(other.err);
      }
    }

    public updateMetadata_result deepCopy() {
      return new updateMetadata_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, com.wi.director.thrift.v1.metadata.MetadataEntry val) {
      if (this.success == null) {
        this.success = new HashMap<String,com.wi.director.thrift.v1.metadata.MetadataEntry>();
      }
      this.success.put(key, val);
    }

    public Map<String,com.wi.director.thrift.v1.metadata.MetadataEntry> getSuccess() {
      return this.success;
    }

    public updateMetadata_result setSuccess(Map<String,com.wi.director.thrift.v1.metadata.MetadataEntry> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.wi.director.thrift.v1.common.SystemException getErr() {
      return this.err;
    }

    public updateMetadata_result setErr(com.wi.director.thrift.v1.common.SystemException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,com.wi.director.thrift.v1.metadata.MetadataEntry>)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((com.wi.director.thrift.v1.common.SystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateMetadata_result)
        return this.equals((updateMetadata_result)that);
      return false;
    }

    public boolean equals(updateMetadata_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateMetadata_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateMetadata_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateMetadata_resultStandardSchemeFactory implements SchemeFactory {
      public updateMetadata_resultStandardScheme getScheme() {
        return new updateMetadata_resultStandardScheme();
      }
    }

    private static class updateMetadata_resultStandardScheme extends StandardScheme<updateMetadata_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateMetadata_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map139 = iprot.readMapBegin();
                  struct.success = new HashMap<String,com.wi.director.thrift.v1.metadata.MetadataEntry>(2*_map139.size);
                  String _key140;
                  com.wi.director.thrift.v1.metadata.MetadataEntry _val141;
                  for (int _i142 = 0; _i142 < _map139.size; ++_i142)
                  {
                    _key140 = iprot.readString();
                    _val141 = new com.wi.director.thrift.v1.metadata.MetadataEntry();
                    _val141.read(iprot);
                    struct.success.put(_key140, _val141);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new com.wi.director.thrift.v1.common.SystemException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateMetadata_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Map.Entry<String, com.wi.director.thrift.v1.metadata.MetadataEntry> _iter143 : struct.success.entrySet())
            {
              oprot.writeString(_iter143.getKey());
              _iter143.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class getTags_args implements org.apache.thrift.TBase<getTags_args, getTags_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTags_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTags_args");

    private static final org.apache.thrift.protocol.TField JOB_TEMPLATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("jobTemplateId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTags_argsStandardSchemeFactory());
    }

    public String jobTemplateId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      JOB_TEMPLATE_ID((short)1, "jobTemplateId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // JOB_TEMPLATE_ID
            return JOB_TEMPLATE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.JOB_TEMPLATE_ID, new org.apache.thrift.meta_data.FieldMetaData("jobTemplateId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTags_args.class, metaDataMap);
    }

    public getTags_args() {
    }

    public getTags_args(
      String jobTemplateId)
    {
      this();
      this.jobTemplateId = jobTemplateId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTags_args(getTags_args other) {
      if (other.isSetJobTemplateId()) {
        this.jobTemplateId = other.jobTemplateId;
      }
    }

    public getTags_args deepCopy() {
      return new getTags_args(this);
    }

    @Override
    public void clear() {
      this.jobTemplateId = null;
    }

    public String getJobTemplateId() {
      return this.jobTemplateId;
    }

    public getTags_args setJobTemplateId(String jobTemplateId) {
      this.jobTemplateId = jobTemplateId;
      return this;
    }

    public void unsetJobTemplateId() {
      this.jobTemplateId = null;
    }

    /** Returns true if field jobTemplateId is set (has been assigned a value) and false otherwise */
    public boolean isSetJobTemplateId() {
      return this.jobTemplateId != null;
    }

    public void setJobTemplateIdIsSet(boolean value) {
      if (!value) {
        this.jobTemplateId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case JOB_TEMPLATE_ID:
        if (value == null) {
          unsetJobTemplateId();
        } else {
          setJobTemplateId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case JOB_TEMPLATE_ID:
        return getJobTemplateId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case JOB_TEMPLATE_ID:
        return isSetJobTemplateId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTags_args)
        return this.equals((getTags_args)that);
      return false;
    }

    public boolean equals(getTags_args that) {
      if (that == null)
        return false;

      boolean this_present_jobTemplateId = true && this.isSetJobTemplateId();
      boolean that_present_jobTemplateId = true && that.isSetJobTemplateId();
      if (this_present_jobTemplateId || that_present_jobTemplateId) {
        if (!(this_present_jobTemplateId && that_present_jobTemplateId))
          return false;
        if (!this.jobTemplateId.equals(that.jobTemplateId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_jobTemplateId = true && (isSetJobTemplateId());
      list.add(present_jobTemplateId);
      if (present_jobTemplateId)
        list.add(jobTemplateId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTags_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetJobTemplateId()).compareTo(other.isSetJobTemplateId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJobTemplateId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobTemplateId, other.jobTemplateId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTags_args(");
      boolean first = true;

      sb.append("jobTemplateId:");
      if (this.jobTemplateId == null) {
        sb.append("null");
      } else {
        sb.append(this.jobTemplateId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTags_argsStandardSchemeFactory implements SchemeFactory {
      public getTags_argsStandardScheme getScheme() {
        return new getTags_argsStandardScheme();
      }
    }

    private static class getTags_argsStandardScheme extends StandardScheme<getTags_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTags_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // JOB_TEMPLATE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jobTemplateId = iprot.readString();
                struct.setJobTemplateIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTags_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.jobTemplateId != null) {
          oprot.writeFieldBegin(JOB_TEMPLATE_ID_FIELD_DESC);
          oprot.writeString(struct.jobTemplateId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class getTags_result implements org.apache.thrift.TBase<getTags_result, getTags_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTags_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTags_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTags_resultStandardSchemeFactory());
    }

    public List<TemplateTag> success; // required
    public com.wi.director.thrift.v1.common.SystemException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TemplateTag.class))));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTags_result.class, metaDataMap);
    }

    public getTags_result() {
    }

    public getTags_result(
      List<TemplateTag> success,
      com.wi.director.thrift.v1.common.SystemException err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTags_result(getTags_result other) {
      if (other.isSetSuccess()) {
        List<TemplateTag> __this__success = new ArrayList<TemplateTag>(other.success.size());
        for (TemplateTag other_element : other.success) {
          __this__success.add(new TemplateTag(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetErr()) {
        this.err = new com.wi.director.thrift.v1.common.SystemException(other.err);
      }
    }

    public getTags_result deepCopy() {
      return new getTags_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TemplateTag> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TemplateTag elem) {
      if (this.success == null) {
        this.success = new ArrayList<TemplateTag>();
      }
      this.success.add(elem);
    }

    public List<TemplateTag> getSuccess() {
      return this.success;
    }

    public getTags_result setSuccess(List<TemplateTag> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.wi.director.thrift.v1.common.SystemException getErr() {
      return this.err;
    }

    public getTags_result setErr(com.wi.director.thrift.v1.common.SystemException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<TemplateTag>)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((com.wi.director.thrift.v1.common.SystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTags_result)
        return this.equals((getTags_result)that);
      return false;
    }

    public boolean equals(getTags_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTags_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTags_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTags_resultStandardSchemeFactory implements SchemeFactory {
      public getTags_resultStandardScheme getScheme() {
        return new getTags_resultStandardScheme();
      }
    }

    private static class getTags_resultStandardScheme extends StandardScheme<getTags_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTags_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list144 = iprot.readListBegin();
                  struct.success = new ArrayList<TemplateTag>(_list144.size);
                  TemplateTag _elem145;
                  for (int _i146 = 0; _i146 < _list144.size; ++_i146)
                  {
                    _elem145 = new TemplateTag();
                    _elem145.read(iprot);
                    struct.success.add(_elem145);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new com.wi.director.thrift.v1.common.SystemException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTags_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (TemplateTag _iter147 : struct.success)
            {
              _iter147.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class updateTags_args implements org.apache.thrift.TBase<updateTags_args, updateTags_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateTags_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateTags_args");

    private static final org.apache.thrift.protocol.TField JOB_TEMPLATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("jobTemplateId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ADDED_FIELD_DESC = new org.apache.thrift.protocol.TField("added", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField REMOVED_TAG_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("removedTagIds", org.apache.thrift.protocol.TType.LIST, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateTags_argsStandardSchemeFactory());
    }

    public String jobTemplateId; // required
    public List<TemplateTag> added; // required
    public List<String> removedTagIds; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      JOB_TEMPLATE_ID((short)1, "jobTemplateId"),
      ADDED((short)2, "added"),
      REMOVED_TAG_IDS((short)3, "removedTagIds");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // JOB_TEMPLATE_ID
            return JOB_TEMPLATE_ID;
          case 2: // ADDED
            return ADDED;
          case 3: // REMOVED_TAG_IDS
            return REMOVED_TAG_IDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.JOB_TEMPLATE_ID, new org.apache.thrift.meta_data.FieldMetaData("jobTemplateId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ADDED, new org.apache.thrift.meta_data.FieldMetaData("added", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TemplateTag.class))));
      tmpMap.put(_Fields.REMOVED_TAG_IDS, new org.apache.thrift.meta_data.FieldMetaData("removedTagIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateTags_args.class, metaDataMap);
    }

    public updateTags_args() {
    }

    public updateTags_args(
      String jobTemplateId,
      List<TemplateTag> added,
      List<String> removedTagIds)
    {
      this();
      this.jobTemplateId = jobTemplateId;
      this.added = added;
      this.removedTagIds = removedTagIds;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateTags_args(updateTags_args other) {
      if (other.isSetJobTemplateId()) {
        this.jobTemplateId = other.jobTemplateId;
      }
      if (other.isSetAdded()) {
        List<TemplateTag> __this__added = new ArrayList<TemplateTag>(other.added.size());
        for (TemplateTag other_element : other.added) {
          __this__added.add(new TemplateTag(other_element));
        }
        this.added = __this__added;
      }
      if (other.isSetRemovedTagIds()) {
        List<String> __this__removedTagIds = new ArrayList<String>(other.removedTagIds);
        this.removedTagIds = __this__removedTagIds;
      }
    }

    public updateTags_args deepCopy() {
      return new updateTags_args(this);
    }

    @Override
    public void clear() {
      this.jobTemplateId = null;
      this.added = null;
      this.removedTagIds = null;
    }

    public String getJobTemplateId() {
      return this.jobTemplateId;
    }

    public updateTags_args setJobTemplateId(String jobTemplateId) {
      this.jobTemplateId = jobTemplateId;
      return this;
    }

    public void unsetJobTemplateId() {
      this.jobTemplateId = null;
    }

    /** Returns true if field jobTemplateId is set (has been assigned a value) and false otherwise */
    public boolean isSetJobTemplateId() {
      return this.jobTemplateId != null;
    }

    public void setJobTemplateIdIsSet(boolean value) {
      if (!value) {
        this.jobTemplateId = null;
      }
    }

    public int getAddedSize() {
      return (this.added == null) ? 0 : this.added.size();
    }

    public java.util.Iterator<TemplateTag> getAddedIterator() {
      return (this.added == null) ? null : this.added.iterator();
    }

    public void addToAdded(TemplateTag elem) {
      if (this.added == null) {
        this.added = new ArrayList<TemplateTag>();
      }
      this.added.add(elem);
    }

    public List<TemplateTag> getAdded() {
      return this.added;
    }

    public updateTags_args setAdded(List<TemplateTag> added) {
      this.added = added;
      return this;
    }

    public void unsetAdded() {
      this.added = null;
    }

    /** Returns true if field added is set (has been assigned a value) and false otherwise */
    public boolean isSetAdded() {
      return this.added != null;
    }

    public void setAddedIsSet(boolean value) {
      if (!value) {
        this.added = null;
      }
    }

    public int getRemovedTagIdsSize() {
      return (this.removedTagIds == null) ? 0 : this.removedTagIds.size();
    }

    public java.util.Iterator<String> getRemovedTagIdsIterator() {
      return (this.removedTagIds == null) ? null : this.removedTagIds.iterator();
    }

    public void addToRemovedTagIds(String elem) {
      if (this.removedTagIds == null) {
        this.removedTagIds = new ArrayList<String>();
      }
      this.removedTagIds.add(elem);
    }

    public List<String> getRemovedTagIds() {
      return this.removedTagIds;
    }

    public updateTags_args setRemovedTagIds(List<String> removedTagIds) {
      this.removedTagIds = removedTagIds;
      return this;
    }

    public void unsetRemovedTagIds() {
      this.removedTagIds = null;
    }

    /** Returns true if field removedTagIds is set (has been assigned a value) and false otherwise */
    public boolean isSetRemovedTagIds() {
      return this.removedTagIds != null;
    }

    public void setRemovedTagIdsIsSet(boolean value) {
      if (!value) {
        this.removedTagIds = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case JOB_TEMPLATE_ID:
        if (value == null) {
          unsetJobTemplateId();
        } else {
          setJobTemplateId((String)value);
        }
        break;

      case ADDED:
        if (value == null) {
          unsetAdded();
        } else {
          setAdded((List<TemplateTag>)value);
        }
        break;

      case REMOVED_TAG_IDS:
        if (value == null) {
          unsetRemovedTagIds();
        } else {
          setRemovedTagIds((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case JOB_TEMPLATE_ID:
        return getJobTemplateId();

      case ADDED:
        return getAdded();

      case REMOVED_TAG_IDS:
        return getRemovedTagIds();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case JOB_TEMPLATE_ID:
        return isSetJobTemplateId();
      case ADDED:
        return isSetAdded();
      case REMOVED_TAG_IDS:
        return isSetRemovedTagIds();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateTags_args)
        return this.equals((updateTags_args)that);
      return false;
    }

    public boolean equals(updateTags_args that) {
      if (that == null)
        return false;

      boolean this_present_jobTemplateId = true && this.isSetJobTemplateId();
      boolean that_present_jobTemplateId = true && that.isSetJobTemplateId();
      if (this_present_jobTemplateId || that_present_jobTemplateId) {
        if (!(this_present_jobTemplateId && that_present_jobTemplateId))
          return false;
        if (!this.jobTemplateId.equals(that.jobTemplateId))
          return false;
      }

      boolean this_present_added = true && this.isSetAdded();
      boolean that_present_added = true && that.isSetAdded();
      if (this_present_added || that_present_added) {
        if (!(this_present_added && that_present_added))
          return false;
        if (!this.added.equals(that.added))
          return false;
      }

      boolean this_present_removedTagIds = true && this.isSetRemovedTagIds();
      boolean that_present_removedTagIds = true && that.isSetRemovedTagIds();
      if (this_present_removedTagIds || that_present_removedTagIds) {
        if (!(this_present_removedTagIds && that_present_removedTagIds))
          return false;
        if (!this.removedTagIds.equals(that.removedTagIds))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_jobTemplateId = true && (isSetJobTemplateId());
      list.add(present_jobTemplateId);
      if (present_jobTemplateId)
        list.add(jobTemplateId);

      boolean present_added = true && (isSetAdded());
      list.add(present_added);
      if (present_added)
        list.add(added);

      boolean present_removedTagIds = true && (isSetRemovedTagIds());
      list.add(present_removedTagIds);
      if (present_removedTagIds)
        list.add(removedTagIds);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateTags_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetJobTemplateId()).compareTo(other.isSetJobTemplateId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJobTemplateId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobTemplateId, other.jobTemplateId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAdded()).compareTo(other.isSetAdded());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAdded()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.added, other.added);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRemovedTagIds()).compareTo(other.isSetRemovedTagIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRemovedTagIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.removedTagIds, other.removedTagIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateTags_args(");
      boolean first = true;

      sb.append("jobTemplateId:");
      if (this.jobTemplateId == null) {
        sb.append("null");
      } else {
        sb.append(this.jobTemplateId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("added:");
      if (this.added == null) {
        sb.append("null");
      } else {
        sb.append(this.added);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("removedTagIds:");
      if (this.removedTagIds == null) {
        sb.append("null");
      } else {
        sb.append(this.removedTagIds);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateTags_argsStandardSchemeFactory implements SchemeFactory {
      public updateTags_argsStandardScheme getScheme() {
        return new updateTags_argsStandardScheme();
      }
    }

    private static class updateTags_argsStandardScheme extends StandardScheme<updateTags_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateTags_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // JOB_TEMPLATE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jobTemplateId = iprot.readString();
                struct.setJobTemplateIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ADDED
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list148 = iprot.readListBegin();
                  struct.added = new ArrayList<TemplateTag>(_list148.size);
                  TemplateTag _elem149;
                  for (int _i150 = 0; _i150 < _list148.size; ++_i150)
                  {
                    _elem149 = new TemplateTag();
                    _elem149.read(iprot);
                    struct.added.add(_elem149);
                  }
                  iprot.readListEnd();
                }
                struct.setAddedIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // REMOVED_TAG_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list151 = iprot.readListBegin();
                  struct.removedTagIds = new ArrayList<String>(_list151.size);
                  String _elem152;
                  for (int _i153 = 0; _i153 < _list151.size; ++_i153)
                  {
                    _elem152 = iprot.readString();
                    struct.removedTagIds.add(_elem152);
                  }
                  iprot.readListEnd();
                }
                struct.setRemovedTagIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateTags_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.jobTemplateId != null) {
          oprot.writeFieldBegin(JOB_TEMPLATE_ID_FIELD_DESC);
          oprot.writeString(struct.jobTemplateId);
          oprot.writeFieldEnd();
        }
        if (struct.added != null) {
          oprot.writeFieldBegin(ADDED_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.added.size()));
            for (TemplateTag _iter154 : struct.added)
            {
              _iter154.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.removedTagIds != null) {
          oprot.writeFieldBegin(REMOVED_TAG_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.removedTagIds.size()));
            for (String _iter155 : struct.removedTagIds)
            {
              oprot.writeString(_iter155);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class updateTags_result implements org.apache.thrift.TBase<updateTags_result, updateTags_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateTags_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateTags_result");

    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateTags_resultStandardSchemeFactory());
    }

    public com.wi.director.thrift.v1.common.SystemException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateTags_result.class, metaDataMap);
    }

    public updateTags_result() {
    }

    public updateTags_result(
      com.wi.director.thrift.v1.common.SystemException err)
    {
      this();
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateTags_result(updateTags_result other) {
      if (other.isSetErr()) {
        this.err = new com.wi.director.thrift.v1.common.SystemException(other.err);
      }
    }

    public updateTags_result deepCopy() {
      return new updateTags_result(this);
    }

    @Override
    public void clear() {
      this.err = null;
    }

    public com.wi.director.thrift.v1.common.SystemException getErr() {
      return this.err;
    }

    public updateTags_result setErr(com.wi.director.thrift.v1.common.SystemException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((com.wi.director.thrift.v1.common.SystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateTags_result)
        return this.equals((updateTags_result)that);
      return false;
    }

    public boolean equals(updateTags_result that) {
      if (that == null)
        return false;

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateTags_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateTags_result(");
      boolean first = true;

      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateTags_resultStandardSchemeFactory implements SchemeFactory {
      public updateTags_resultStandardScheme getScheme() {
        return new updateTags_resultStandardScheme();
      }
    }

    private static class updateTags_resultStandardScheme extends StandardScheme<updateTags_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateTags_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new com.wi.director.thrift.v1.common.SystemException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateTags_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class acquireLock_args implements org.apache.thrift.TBase<acquireLock_args, acquireLock_args._Fields>, java.io.Serializable, Cloneable, Comparable<acquireLock_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("acquireLock_args");

    private static final org.apache.thrift.protocol.TField JOB_TEMPLATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("jobTemplateId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new acquireLock_argsStandardSchemeFactory());
    }

    public String jobTemplateId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      JOB_TEMPLATE_ID((short)1, "jobTemplateId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // JOB_TEMPLATE_ID
            return JOB_TEMPLATE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.JOB_TEMPLATE_ID, new org.apache.thrift.meta_data.FieldMetaData("jobTemplateId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(acquireLock_args.class, metaDataMap);
    }

    public acquireLock_args() {
    }

    public acquireLock_args(
      String jobTemplateId)
    {
      this();
      this.jobTemplateId = jobTemplateId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public acquireLock_args(acquireLock_args other) {
      if (other.isSetJobTemplateId()) {
        this.jobTemplateId = other.jobTemplateId;
      }
    }

    public acquireLock_args deepCopy() {
      return new acquireLock_args(this);
    }

    @Override
    public void clear() {
      this.jobTemplateId = null;
    }

    public String getJobTemplateId() {
      return this.jobTemplateId;
    }

    public acquireLock_args setJobTemplateId(String jobTemplateId) {
      this.jobTemplateId = jobTemplateId;
      return this;
    }

    public void unsetJobTemplateId() {
      this.jobTemplateId = null;
    }

    /** Returns true if field jobTemplateId is set (has been assigned a value) and false otherwise */
    public boolean isSetJobTemplateId() {
      return this.jobTemplateId != null;
    }

    public void setJobTemplateIdIsSet(boolean value) {
      if (!value) {
        this.jobTemplateId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case JOB_TEMPLATE_ID:
        if (value == null) {
          unsetJobTemplateId();
        } else {
          setJobTemplateId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case JOB_TEMPLATE_ID:
        return getJobTemplateId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case JOB_TEMPLATE_ID:
        return isSetJobTemplateId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof acquireLock_args)
        return this.equals((acquireLock_args)that);
      return false;
    }

    public boolean equals(acquireLock_args that) {
      if (that == null)
        return false;

      boolean this_present_jobTemplateId = true && this.isSetJobTemplateId();
      boolean that_present_jobTemplateId = true && that.isSetJobTemplateId();
      if (this_present_jobTemplateId || that_present_jobTemplateId) {
        if (!(this_present_jobTemplateId && that_present_jobTemplateId))
          return false;
        if (!this.jobTemplateId.equals(that.jobTemplateId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_jobTemplateId = true && (isSetJobTemplateId());
      list.add(present_jobTemplateId);
      if (present_jobTemplateId)
        list.add(jobTemplateId);

      return list.hashCode();
    }

    @Override
    public int compareTo(acquireLock_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetJobTemplateId()).compareTo(other.isSetJobTemplateId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJobTemplateId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobTemplateId, other.jobTemplateId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("acquireLock_args(");
      boolean first = true;

      sb.append("jobTemplateId:");
      if (this.jobTemplateId == null) {
        sb.append("null");
      } else {
        sb.append(this.jobTemplateId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class acquireLock_argsStandardSchemeFactory implements SchemeFactory {
      public acquireLock_argsStandardScheme getScheme() {
        return new acquireLock_argsStandardScheme();
      }
    }

    private static class acquireLock_argsStandardScheme extends StandardScheme<acquireLock_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, acquireLock_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // JOB_TEMPLATE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jobTemplateId = iprot.readString();
                struct.setJobTemplateIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, acquireLock_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.jobTemplateId != null) {
          oprot.writeFieldBegin(JOB_TEMPLATE_ID_FIELD_DESC);
          oprot.writeString(struct.jobTemplateId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class acquireLock_result implements org.apache.thrift.TBase<acquireLock_result, acquireLock_result._Fields>, java.io.Serializable, Cloneable, Comparable<acquireLock_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("acquireLock_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField FAIL_ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("failErr", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new acquireLock_resultStandardSchemeFactory());
    }

    public JobTemplateLock success; // required
    public com.wi.director.thrift.v1.common.SystemException err; // required
    public JobTemplateLockFailed failErr; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err"),
      FAIL_ERR((short)2, "failErr");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          case 2: // FAIL_ERR
            return FAIL_ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JobTemplateLock.class)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.FAIL_ERR, new org.apache.thrift.meta_data.FieldMetaData("failErr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(acquireLock_result.class, metaDataMap);
    }

    public acquireLock_result() {
    }

    public acquireLock_result(
      JobTemplateLock success,
      com.wi.director.thrift.v1.common.SystemException err,
      JobTemplateLockFailed failErr)
    {
      this();
      this.success = success;
      this.err = err;
      this.failErr = failErr;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public acquireLock_result(acquireLock_result other) {
      if (other.isSetSuccess()) {
        this.success = new JobTemplateLock(other.success);
      }
      if (other.isSetErr()) {
        this.err = new com.wi.director.thrift.v1.common.SystemException(other.err);
      }
      if (other.isSetFailErr()) {
        this.failErr = new JobTemplateLockFailed(other.failErr);
      }
    }

    public acquireLock_result deepCopy() {
      return new acquireLock_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
      this.failErr = null;
    }

    public JobTemplateLock getSuccess() {
      return this.success;
    }

    public acquireLock_result setSuccess(JobTemplateLock success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.wi.director.thrift.v1.common.SystemException getErr() {
      return this.err;
    }

    public acquireLock_result setErr(com.wi.director.thrift.v1.common.SystemException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public JobTemplateLockFailed getFailErr() {
      return this.failErr;
    }

    public acquireLock_result setFailErr(JobTemplateLockFailed failErr) {
      this.failErr = failErr;
      return this;
    }

    public void unsetFailErr() {
      this.failErr = null;
    }

    /** Returns true if field failErr is set (has been assigned a value) and false otherwise */
    public boolean isSetFailErr() {
      return this.failErr != null;
    }

    public void setFailErrIsSet(boolean value) {
      if (!value) {
        this.failErr = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((JobTemplateLock)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((com.wi.director.thrift.v1.common.SystemException)value);
        }
        break;

      case FAIL_ERR:
        if (value == null) {
          unsetFailErr();
        } else {
          setFailErr((JobTemplateLockFailed)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      case FAIL_ERR:
        return getFailErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      case FAIL_ERR:
        return isSetFailErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof acquireLock_result)
        return this.equals((acquireLock_result)that);
      return false;
    }

    public boolean equals(acquireLock_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      boolean this_present_failErr = true && this.isSetFailErr();
      boolean that_present_failErr = true && that.isSetFailErr();
      if (this_present_failErr || that_present_failErr) {
        if (!(this_present_failErr && that_present_failErr))
          return false;
        if (!this.failErr.equals(that.failErr))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      boolean present_failErr = true && (isSetFailErr());
      list.add(present_failErr);
      if (present_failErr)
        list.add(failErr);

      return list.hashCode();
    }

    @Override
    public int compareTo(acquireLock_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFailErr()).compareTo(other.isSetFailErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFailErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.failErr, other.failErr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("acquireLock_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("failErr:");
      if (this.failErr == null) {
        sb.append("null");
      } else {
        sb.append(this.failErr);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class acquireLock_resultStandardSchemeFactory implements SchemeFactory {
      public acquireLock_resultStandardScheme getScheme() {
        return new acquireLock_resultStandardScheme();
      }
    }

    private static class acquireLock_resultStandardScheme extends StandardScheme<acquireLock_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, acquireLock_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new JobTemplateLock();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new com.wi.director.thrift.v1.common.SystemException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FAIL_ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.failErr = new JobTemplateLockFailed();
                struct.failErr.read(iprot);
                struct.setFailErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, acquireLock_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.failErr != null) {
          oprot.writeFieldBegin(FAIL_ERR_FIELD_DESC);
          struct.failErr.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class forceAcquireLock_args implements org.apache.thrift.TBase<forceAcquireLock_args, forceAcquireLock_args._Fields>, java.io.Serializable, Cloneable, Comparable<forceAcquireLock_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("forceAcquireLock_args");

    private static final org.apache.thrift.protocol.TField JOB_TEMPLATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("jobTemplateId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new forceAcquireLock_argsStandardSchemeFactory());
    }

    public String jobTemplateId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      JOB_TEMPLATE_ID((short)1, "jobTemplateId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // JOB_TEMPLATE_ID
            return JOB_TEMPLATE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.JOB_TEMPLATE_ID, new org.apache.thrift.meta_data.FieldMetaData("jobTemplateId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(forceAcquireLock_args.class, metaDataMap);
    }

    public forceAcquireLock_args() {
    }

    public forceAcquireLock_args(
      String jobTemplateId)
    {
      this();
      this.jobTemplateId = jobTemplateId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public forceAcquireLock_args(forceAcquireLock_args other) {
      if (other.isSetJobTemplateId()) {
        this.jobTemplateId = other.jobTemplateId;
      }
    }

    public forceAcquireLock_args deepCopy() {
      return new forceAcquireLock_args(this);
    }

    @Override
    public void clear() {
      this.jobTemplateId = null;
    }

    public String getJobTemplateId() {
      return this.jobTemplateId;
    }

    public forceAcquireLock_args setJobTemplateId(String jobTemplateId) {
      this.jobTemplateId = jobTemplateId;
      return this;
    }

    public void unsetJobTemplateId() {
      this.jobTemplateId = null;
    }

    /** Returns true if field jobTemplateId is set (has been assigned a value) and false otherwise */
    public boolean isSetJobTemplateId() {
      return this.jobTemplateId != null;
    }

    public void setJobTemplateIdIsSet(boolean value) {
      if (!value) {
        this.jobTemplateId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case JOB_TEMPLATE_ID:
        if (value == null) {
          unsetJobTemplateId();
        } else {
          setJobTemplateId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case JOB_TEMPLATE_ID:
        return getJobTemplateId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case JOB_TEMPLATE_ID:
        return isSetJobTemplateId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof forceAcquireLock_args)
        return this.equals((forceAcquireLock_args)that);
      return false;
    }

    public boolean equals(forceAcquireLock_args that) {
      if (that == null)
        return false;

      boolean this_present_jobTemplateId = true && this.isSetJobTemplateId();
      boolean that_present_jobTemplateId = true && that.isSetJobTemplateId();
      if (this_present_jobTemplateId || that_present_jobTemplateId) {
        if (!(this_present_jobTemplateId && that_present_jobTemplateId))
          return false;
        if (!this.jobTemplateId.equals(that.jobTemplateId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_jobTemplateId = true && (isSetJobTemplateId());
      list.add(present_jobTemplateId);
      if (present_jobTemplateId)
        list.add(jobTemplateId);

      return list.hashCode();
    }

    @Override
    public int compareTo(forceAcquireLock_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetJobTemplateId()).compareTo(other.isSetJobTemplateId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJobTemplateId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobTemplateId, other.jobTemplateId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("forceAcquireLock_args(");
      boolean first = true;

      sb.append("jobTemplateId:");
      if (this.jobTemplateId == null) {
        sb.append("null");
      } else {
        sb.append(this.jobTemplateId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class forceAcquireLock_argsStandardSchemeFactory implements SchemeFactory {
      public forceAcquireLock_argsStandardScheme getScheme() {
        return new forceAcquireLock_argsStandardScheme();
      }
    }

    private static class forceAcquireLock_argsStandardScheme extends StandardScheme<forceAcquireLock_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, forceAcquireLock_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // JOB_TEMPLATE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jobTemplateId = iprot.readString();
                struct.setJobTemplateIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, forceAcquireLock_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.jobTemplateId != null) {
          oprot.writeFieldBegin(JOB_TEMPLATE_ID_FIELD_DESC);
          oprot.writeString(struct.jobTemplateId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class forceAcquireLock_result implements org.apache.thrift.TBase<forceAcquireLock_result, forceAcquireLock_result._Fields>, java.io.Serializable, Cloneable, Comparable<forceAcquireLock_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("forceAcquireLock_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new forceAcquireLock_resultStandardSchemeFactory());
    }

    public ForceAcquireResponse success; // required
    public com.wi.director.thrift.v1.common.SystemException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ForceAcquireResponse.class)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(forceAcquireLock_result.class, metaDataMap);
    }

    public forceAcquireLock_result() {
    }

    public forceAcquireLock_result(
      ForceAcquireResponse success,
      com.wi.director.thrift.v1.common.SystemException err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public forceAcquireLock_result(forceAcquireLock_result other) {
      if (other.isSetSuccess()) {
        this.success = new ForceAcquireResponse(other.success);
      }
      if (other.isSetErr()) {
        this.err = new com.wi.director.thrift.v1.common.SystemException(other.err);
      }
    }

    public forceAcquireLock_result deepCopy() {
      return new forceAcquireLock_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public ForceAcquireResponse getSuccess() {
      return this.success;
    }

    public forceAcquireLock_result setSuccess(ForceAcquireResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.wi.director.thrift.v1.common.SystemException getErr() {
      return this.err;
    }

    public forceAcquireLock_result setErr(com.wi.director.thrift.v1.common.SystemException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ForceAcquireResponse)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((com.wi.director.thrift.v1.common.SystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof forceAcquireLock_result)
        return this.equals((forceAcquireLock_result)that);
      return false;
    }

    public boolean equals(forceAcquireLock_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(forceAcquireLock_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("forceAcquireLock_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class forceAcquireLock_resultStandardSchemeFactory implements SchemeFactory {
      public forceAcquireLock_resultStandardScheme getScheme() {
        return new forceAcquireLock_resultStandardScheme();
      }
    }

    private static class forceAcquireLock_resultStandardScheme extends StandardScheme<forceAcquireLock_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, forceAcquireLock_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ForceAcquireResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new com.wi.director.thrift.v1.common.SystemException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, forceAcquireLock_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class releaseLock_args implements org.apache.thrift.TBase<releaseLock_args, releaseLock_args._Fields>, java.io.Serializable, Cloneable, Comparable<releaseLock_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("releaseLock_args");

    private static final org.apache.thrift.protocol.TField JOB_TEMPLATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("jobTemplateId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new releaseLock_argsStandardSchemeFactory());
    }

    public String jobTemplateId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      JOB_TEMPLATE_ID((short)1, "jobTemplateId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // JOB_TEMPLATE_ID
            return JOB_TEMPLATE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.JOB_TEMPLATE_ID, new org.apache.thrift.meta_data.FieldMetaData("jobTemplateId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(releaseLock_args.class, metaDataMap);
    }

    public releaseLock_args() {
    }

    public releaseLock_args(
      String jobTemplateId)
    {
      this();
      this.jobTemplateId = jobTemplateId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public releaseLock_args(releaseLock_args other) {
      if (other.isSetJobTemplateId()) {
        this.jobTemplateId = other.jobTemplateId;
      }
    }

    public releaseLock_args deepCopy() {
      return new releaseLock_args(this);
    }

    @Override
    public void clear() {
      this.jobTemplateId = null;
    }

    public String getJobTemplateId() {
      return this.jobTemplateId;
    }

    public releaseLock_args setJobTemplateId(String jobTemplateId) {
      this.jobTemplateId = jobTemplateId;
      return this;
    }

    public void unsetJobTemplateId() {
      this.jobTemplateId = null;
    }

    /** Returns true if field jobTemplateId is set (has been assigned a value) and false otherwise */
    public boolean isSetJobTemplateId() {
      return this.jobTemplateId != null;
    }

    public void setJobTemplateIdIsSet(boolean value) {
      if (!value) {
        this.jobTemplateId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case JOB_TEMPLATE_ID:
        if (value == null) {
          unsetJobTemplateId();
        } else {
          setJobTemplateId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case JOB_TEMPLATE_ID:
        return getJobTemplateId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case JOB_TEMPLATE_ID:
        return isSetJobTemplateId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof releaseLock_args)
        return this.equals((releaseLock_args)that);
      return false;
    }

    public boolean equals(releaseLock_args that) {
      if (that == null)
        return false;

      boolean this_present_jobTemplateId = true && this.isSetJobTemplateId();
      boolean that_present_jobTemplateId = true && that.isSetJobTemplateId();
      if (this_present_jobTemplateId || that_present_jobTemplateId) {
        if (!(this_present_jobTemplateId && that_present_jobTemplateId))
          return false;
        if (!this.jobTemplateId.equals(that.jobTemplateId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_jobTemplateId = true && (isSetJobTemplateId());
      list.add(present_jobTemplateId);
      if (present_jobTemplateId)
        list.add(jobTemplateId);

      return list.hashCode();
    }

    @Override
    public int compareTo(releaseLock_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetJobTemplateId()).compareTo(other.isSetJobTemplateId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJobTemplateId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobTemplateId, other.jobTemplateId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("releaseLock_args(");
      boolean first = true;

      sb.append("jobTemplateId:");
      if (this.jobTemplateId == null) {
        sb.append("null");
      } else {
        sb.append(this.jobTemplateId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class releaseLock_argsStandardSchemeFactory implements SchemeFactory {
      public releaseLock_argsStandardScheme getScheme() {
        return new releaseLock_argsStandardScheme();
      }
    }

    private static class releaseLock_argsStandardScheme extends StandardScheme<releaseLock_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, releaseLock_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // JOB_TEMPLATE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jobTemplateId = iprot.readString();
                struct.setJobTemplateIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, releaseLock_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.jobTemplateId != null) {
          oprot.writeFieldBegin(JOB_TEMPLATE_ID_FIELD_DESC);
          oprot.writeString(struct.jobTemplateId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class releaseLock_result implements org.apache.thrift.TBase<releaseLock_result, releaseLock_result._Fields>, java.io.Serializable, Cloneable, Comparable<releaseLock_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("releaseLock_result");

    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new releaseLock_resultStandardSchemeFactory());
    }

    public com.wi.director.thrift.v1.common.SystemException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(releaseLock_result.class, metaDataMap);
    }

    public releaseLock_result() {
    }

    public releaseLock_result(
      com.wi.director.thrift.v1.common.SystemException err)
    {
      this();
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public releaseLock_result(releaseLock_result other) {
      if (other.isSetErr()) {
        this.err = new com.wi.director.thrift.v1.common.SystemException(other.err);
      }
    }

    public releaseLock_result deepCopy() {
      return new releaseLock_result(this);
    }

    @Override
    public void clear() {
      this.err = null;
    }

    public com.wi.director.thrift.v1.common.SystemException getErr() {
      return this.err;
    }

    public releaseLock_result setErr(com.wi.director.thrift.v1.common.SystemException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((com.wi.director.thrift.v1.common.SystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof releaseLock_result)
        return this.equals((releaseLock_result)that);
      return false;
    }

    public boolean equals(releaseLock_result that) {
      if (that == null)
        return false;

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(releaseLock_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("releaseLock_result(");
      boolean first = true;

      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class releaseLock_resultStandardSchemeFactory implements SchemeFactory {
      public releaseLock_resultStandardScheme getScheme() {
        return new releaseLock_resultStandardScheme();
      }
    }

    private static class releaseLock_resultStandardScheme extends StandardScheme<releaseLock_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, releaseLock_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new com.wi.director.thrift.v1.common.SystemException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, releaseLock_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class getHistory_args implements org.apache.thrift.TBase<getHistory_args, getHistory_args._Fields>, java.io.Serializable, Cloneable, Comparable<getHistory_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHistory_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField INTERNAL_VERSIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("internalVersions", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField OTHER_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("otherVersion", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getHistory_argsStandardSchemeFactory());
    }

    public String id; // required
    public List<Integer> internalVersions; // required
    public int otherVersion; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      INTERNAL_VERSIONS((short)2, "internalVersions"),
      OTHER_VERSION((short)3, "otherVersion");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // INTERNAL_VERSIONS
            return INTERNAL_VERSIONS;
          case 3: // OTHER_VERSION
            return OTHER_VERSION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __OTHERVERSION_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.INTERNAL_VERSIONS, new org.apache.thrift.meta_data.FieldMetaData("internalVersions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      tmpMap.put(_Fields.OTHER_VERSION, new org.apache.thrift.meta_data.FieldMetaData("otherVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHistory_args.class, metaDataMap);
    }

    public getHistory_args() {
    }

    public getHistory_args(
      String id,
      List<Integer> internalVersions,
      int otherVersion)
    {
      this();
      this.id = id;
      this.internalVersions = internalVersions;
      this.otherVersion = otherVersion;
      setOtherVersionIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHistory_args(getHistory_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetId()) {
        this.id = other.id;
      }
      if (other.isSetInternalVersions()) {
        List<Integer> __this__internalVersions = new ArrayList<Integer>(other.internalVersions);
        this.internalVersions = __this__internalVersions;
      }
      this.otherVersion = other.otherVersion;
    }

    public getHistory_args deepCopy() {
      return new getHistory_args(this);
    }

    @Override
    public void clear() {
      this.id = null;
      this.internalVersions = null;
      setOtherVersionIsSet(false);
      this.otherVersion = 0;
    }

    public String getId() {
      return this.id;
    }

    public getHistory_args setId(String id) {
      this.id = id;
      return this;
    }

    public void unsetId() {
      this.id = null;
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return this.id != null;
    }

    public void setIdIsSet(boolean value) {
      if (!value) {
        this.id = null;
      }
    }

    public int getInternalVersionsSize() {
      return (this.internalVersions == null) ? 0 : this.internalVersions.size();
    }

    public java.util.Iterator<Integer> getInternalVersionsIterator() {
      return (this.internalVersions == null) ? null : this.internalVersions.iterator();
    }

    public void addToInternalVersions(int elem) {
      if (this.internalVersions == null) {
        this.internalVersions = new ArrayList<Integer>();
      }
      this.internalVersions.add(elem);
    }

    public List<Integer> getInternalVersions() {
      return this.internalVersions;
    }

    public getHistory_args setInternalVersions(List<Integer> internalVersions) {
      this.internalVersions = internalVersions;
      return this;
    }

    public void unsetInternalVersions() {
      this.internalVersions = null;
    }

    /** Returns true if field internalVersions is set (has been assigned a value) and false otherwise */
    public boolean isSetInternalVersions() {
      return this.internalVersions != null;
    }

    public void setInternalVersionsIsSet(boolean value) {
      if (!value) {
        this.internalVersions = null;
      }
    }

    public int getOtherVersion() {
      return this.otherVersion;
    }

    public getHistory_args setOtherVersion(int otherVersion) {
      this.otherVersion = otherVersion;
      setOtherVersionIsSet(true);
      return this;
    }

    public void unsetOtherVersion() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OTHERVERSION_ISSET_ID);
    }

    /** Returns true if field otherVersion is set (has been assigned a value) and false otherwise */
    public boolean isSetOtherVersion() {
      return EncodingUtils.testBit(__isset_bitfield, __OTHERVERSION_ISSET_ID);
    }

    public void setOtherVersionIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OTHERVERSION_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((String)value);
        }
        break;

      case INTERNAL_VERSIONS:
        if (value == null) {
          unsetInternalVersions();
        } else {
          setInternalVersions((List<Integer>)value);
        }
        break;

      case OTHER_VERSION:
        if (value == null) {
          unsetOtherVersion();
        } else {
          setOtherVersion((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return getId();

      case INTERNAL_VERSIONS:
        return getInternalVersions();

      case OTHER_VERSION:
        return getOtherVersion();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      case INTERNAL_VERSIONS:
        return isSetInternalVersions();
      case OTHER_VERSION:
        return isSetOtherVersion();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHistory_args)
        return this.equals((getHistory_args)that);
      return false;
    }

    public boolean equals(getHistory_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true && this.isSetId();
      boolean that_present_id = true && that.isSetId();
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (!this.id.equals(that.id))
          return false;
      }

      boolean this_present_internalVersions = true && this.isSetInternalVersions();
      boolean that_present_internalVersions = true && that.isSetInternalVersions();
      if (this_present_internalVersions || that_present_internalVersions) {
        if (!(this_present_internalVersions && that_present_internalVersions))
          return false;
        if (!this.internalVersions.equals(that.internalVersions))
          return false;
      }

      boolean this_present_otherVersion = true;
      boolean that_present_otherVersion = true;
      if (this_present_otherVersion || that_present_otherVersion) {
        if (!(this_present_otherVersion && that_present_otherVersion))
          return false;
        if (this.otherVersion != that.otherVersion)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_id = true && (isSetId());
      list.add(present_id);
      if (present_id)
        list.add(id);

      boolean present_internalVersions = true && (isSetInternalVersions());
      list.add(present_internalVersions);
      if (present_internalVersions)
        list.add(internalVersions);

      boolean present_otherVersion = true;
      list.add(present_otherVersion);
      if (present_otherVersion)
        list.add(otherVersion);

      return list.hashCode();
    }

    @Override
    public int compareTo(getHistory_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetInternalVersions()).compareTo(other.isSetInternalVersions());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInternalVersions()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.internalVersions, other.internalVersions);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOtherVersion()).compareTo(other.isSetOtherVersion());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOtherVersion()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.otherVersion, other.otherVersion);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHistory_args(");
      boolean first = true;

      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("internalVersions:");
      if (this.internalVersions == null) {
        sb.append("null");
      } else {
        sb.append(this.internalVersions);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("otherVersion:");
      sb.append(this.otherVersion);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getHistory_argsStandardSchemeFactory implements SchemeFactory {
      public getHistory_argsStandardScheme getScheme() {
        return new getHistory_argsStandardScheme();
      }
    }

    private static class getHistory_argsStandardScheme extends StandardScheme<getHistory_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getHistory_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.id = iprot.readString();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // INTERNAL_VERSIONS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list156 = iprot.readListBegin();
                  struct.internalVersions = new ArrayList<Integer>(_list156.size);
                  int _elem157;
                  for (int _i158 = 0; _i158 < _list156.size; ++_i158)
                  {
                    _elem157 = iprot.readI32();
                    struct.internalVersions.add(_elem157);
                  }
                  iprot.readListEnd();
                }
                struct.setInternalVersionsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // OTHER_VERSION
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.otherVersion = iprot.readI32();
                struct.setOtherVersionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getHistory_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.id != null) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
        if (struct.internalVersions != null) {
          oprot.writeFieldBegin(INTERNAL_VERSIONS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.internalVersions.size()));
            for (int _iter159 : struct.internalVersions)
            {
              oprot.writeI32(_iter159);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(OTHER_VERSION_FIELD_DESC);
        oprot.writeI32(struct.otherVersion);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class getHistory_result implements org.apache.thrift.TBase<getHistory_result, getHistory_result._Fields>, java.io.Serializable, Cloneable, Comparable<getHistory_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHistory_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getHistory_resultStandardSchemeFactory());
    }

    public Map<Integer,TemplateHistoryResult> success; // required
    public com.wi.director.thrift.v1.common.SystemException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TemplateHistoryResult.class))));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHistory_result.class, metaDataMap);
    }

    public getHistory_result() {
    }

    public getHistory_result(
      Map<Integer,TemplateHistoryResult> success,
      com.wi.director.thrift.v1.common.SystemException err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHistory_result(getHistory_result other) {
      if (other.isSetSuccess()) {
        Map<Integer,TemplateHistoryResult> __this__success = new HashMap<Integer,TemplateHistoryResult>(other.success.size());
        for (Map.Entry<Integer, TemplateHistoryResult> other_element : other.success.entrySet()) {

          Integer other_element_key = other_element.getKey();
          TemplateHistoryResult other_element_value = other_element.getValue();

          Integer __this__success_copy_key = other_element_key;

          TemplateHistoryResult __this__success_copy_value = new TemplateHistoryResult(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
      if (other.isSetErr()) {
        this.err = new com.wi.director.thrift.v1.common.SystemException(other.err);
      }
    }

    public getHistory_result deepCopy() {
      return new getHistory_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(int key, TemplateHistoryResult val) {
      if (this.success == null) {
        this.success = new HashMap<Integer,TemplateHistoryResult>();
      }
      this.success.put(key, val);
    }

    public Map<Integer,TemplateHistoryResult> getSuccess() {
      return this.success;
    }

    public getHistory_result setSuccess(Map<Integer,TemplateHistoryResult> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.wi.director.thrift.v1.common.SystemException getErr() {
      return this.err;
    }

    public getHistory_result setErr(com.wi.director.thrift.v1.common.SystemException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<Integer,TemplateHistoryResult>)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((com.wi.director.thrift.v1.common.SystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHistory_result)
        return this.equals((getHistory_result)that);
      return false;
    }

    public boolean equals(getHistory_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(getHistory_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHistory_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getHistory_resultStandardSchemeFactory implements SchemeFactory {
      public getHistory_resultStandardScheme getScheme() {
        return new getHistory_resultStandardScheme();
      }
    }

    private static class getHistory_resultStandardScheme extends StandardScheme<getHistory_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getHistory_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map160 = iprot.readMapBegin();
                  struct.success = new HashMap<Integer,TemplateHistoryResult>(2*_map160.size);
                  int _key161;
                  TemplateHistoryResult _val162;
                  for (int _i163 = 0; _i163 < _map160.size; ++_i163)
                  {
                    _key161 = iprot.readI32();
                    _val162 = new TemplateHistoryResult();
                    _val162.read(iprot);
                    struct.success.put(_key161, _val162);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new com.wi.director.thrift.v1.common.SystemException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getHistory_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Map.Entry<Integer, TemplateHistoryResult> _iter164 : struct.success.entrySet())
            {
              oprot.writeI32(_iter164.getKey());
              _iter164.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class revert_args implements org.apache.thrift.TBase<revert_args, revert_args._Fields>, java.io.Serializable, Cloneable, Comparable<revert_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("revert_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField INTERNAL_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("internalVersion", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new revert_argsStandardSchemeFactory());
    }

    public String id; // required
    public int internalVersion; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      INTERNAL_VERSION((short)2, "internalVersion");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // INTERNAL_VERSION
            return INTERNAL_VERSION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __INTERNALVERSION_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.INTERNAL_VERSION, new org.apache.thrift.meta_data.FieldMetaData("internalVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(revert_args.class, metaDataMap);
    }

    public revert_args() {
    }

    public revert_args(
      String id,
      int internalVersion)
    {
      this();
      this.id = id;
      this.internalVersion = internalVersion;
      setInternalVersionIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public revert_args(revert_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetId()) {
        this.id = other.id;
      }
      this.internalVersion = other.internalVersion;
    }

    public revert_args deepCopy() {
      return new revert_args(this);
    }

    @Override
    public void clear() {
      this.id = null;
      setInternalVersionIsSet(false);
      this.internalVersion = 0;
    }

    public String getId() {
      return this.id;
    }

    public revert_args setId(String id) {
      this.id = id;
      return this;
    }

    public void unsetId() {
      this.id = null;
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return this.id != null;
    }

    public void setIdIsSet(boolean value) {
      if (!value) {
        this.id = null;
      }
    }

    public int getInternalVersion() {
      return this.internalVersion;
    }

    public revert_args setInternalVersion(int internalVersion) {
      this.internalVersion = internalVersion;
      setInternalVersionIsSet(true);
      return this;
    }

    public void unsetInternalVersion() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INTERNALVERSION_ISSET_ID);
    }

    /** Returns true if field internalVersion is set (has been assigned a value) and false otherwise */
    public boolean isSetInternalVersion() {
      return EncodingUtils.testBit(__isset_bitfield, __INTERNALVERSION_ISSET_ID);
    }

    public void setInternalVersionIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INTERNALVERSION_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((String)value);
        }
        break;

      case INTERNAL_VERSION:
        if (value == null) {
          unsetInternalVersion();
        } else {
          setInternalVersion((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return getId();

      case INTERNAL_VERSION:
        return getInternalVersion();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      case INTERNAL_VERSION:
        return isSetInternalVersion();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof revert_args)
        return this.equals((revert_args)that);
      return false;
    }

    public boolean equals(revert_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true && this.isSetId();
      boolean that_present_id = true && that.isSetId();
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (!this.id.equals(that.id))
          return false;
      }

      boolean this_present_internalVersion = true;
      boolean that_present_internalVersion = true;
      if (this_present_internalVersion || that_present_internalVersion) {
        if (!(this_present_internalVersion && that_present_internalVersion))
          return false;
        if (this.internalVersion != that.internalVersion)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_id = true && (isSetId());
      list.add(present_id);
      if (present_id)
        list.add(id);

      boolean present_internalVersion = true;
      list.add(present_internalVersion);
      if (present_internalVersion)
        list.add(internalVersion);

      return list.hashCode();
    }

    @Override
    public int compareTo(revert_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetInternalVersion()).compareTo(other.isSetInternalVersion());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInternalVersion()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.internalVersion, other.internalVersion);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("revert_args(");
      boolean first = true;

      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("internalVersion:");
      sb.append(this.internalVersion);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class revert_argsStandardSchemeFactory implements SchemeFactory {
      public revert_argsStandardScheme getScheme() {
        return new revert_argsStandardScheme();
      }
    }

    private static class revert_argsStandardScheme extends StandardScheme<revert_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, revert_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.id = iprot.readString();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // INTERNAL_VERSION
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.internalVersion = iprot.readI32();
                struct.setInternalVersionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, revert_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.id != null) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(INTERNAL_VERSION_FIELD_DESC);
        oprot.writeI32(struct.internalVersion);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class revert_result implements org.apache.thrift.TBase<revert_result, revert_result._Fields>, java.io.Serializable, Cloneable, Comparable<revert_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("revert_result");

    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new revert_resultStandardSchemeFactory());
    }

    public com.wi.director.thrift.v1.common.SystemException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(revert_result.class, metaDataMap);
    }

    public revert_result() {
    }

    public revert_result(
      com.wi.director.thrift.v1.common.SystemException err)
    {
      this();
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public revert_result(revert_result other) {
      if (other.isSetErr()) {
        this.err = new com.wi.director.thrift.v1.common.SystemException(other.err);
      }
    }

    public revert_result deepCopy() {
      return new revert_result(this);
    }

    @Override
    public void clear() {
      this.err = null;
    }

    public com.wi.director.thrift.v1.common.SystemException getErr() {
      return this.err;
    }

    public revert_result setErr(com.wi.director.thrift.v1.common.SystemException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((com.wi.director.thrift.v1.common.SystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof revert_result)
        return this.equals((revert_result)that);
      return false;
    }

    public boolean equals(revert_result that) {
      if (that == null)
        return false;

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(revert_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("revert_result(");
      boolean first = true;

      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class revert_resultStandardSchemeFactory implements SchemeFactory {
      public revert_resultStandardScheme getScheme() {
        return new revert_resultStandardScheme();
      }
    }

    private static class revert_resultStandardScheme extends StandardScheme<revert_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, revert_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new com.wi.director.thrift.v1.common.SystemException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, revert_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class updateAttribute_args implements org.apache.thrift.TBase<updateAttribute_args, updateAttribute_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateAttribute_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateAttribute_args");

    private static final org.apache.thrift.protocol.TField TEMPLATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("templateId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ATTRIBUTE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("attributeId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("values", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField BEHAVE_FIELD_DESC = new org.apache.thrift.protocol.TField("behave", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateAttribute_argsStandardSchemeFactory());
    }

    public String templateId; // required
    public String attributeId; // required
    public List<com.wi.director.thrift.v1.abac.AbacAttributeValue> values; // required
    /**
     * 
     * @see com.wi.director.thrift.v1.abac.AttributeUploadBehaviour
     */
    public com.wi.director.thrift.v1.abac.AttributeUploadBehaviour behave; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TEMPLATE_ID((short)1, "templateId"),
      ATTRIBUTE_ID((short)2, "attributeId"),
      VALUES((short)3, "values"),
      /**
       * 
       * @see com.wi.director.thrift.v1.abac.AttributeUploadBehaviour
       */
      BEHAVE((short)4, "behave");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TEMPLATE_ID
            return TEMPLATE_ID;
          case 2: // ATTRIBUTE_ID
            return ATTRIBUTE_ID;
          case 3: // VALUES
            return VALUES;
          case 4: // BEHAVE
            return BEHAVE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TEMPLATE_ID, new org.apache.thrift.meta_data.FieldMetaData("templateId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "UUID")));
      tmpMap.put(_Fields.ATTRIBUTE_ID, new org.apache.thrift.meta_data.FieldMetaData("attributeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VALUES, new org.apache.thrift.meta_data.FieldMetaData("values", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.abac.AbacAttributeValue.class))));
      tmpMap.put(_Fields.BEHAVE, new org.apache.thrift.meta_data.FieldMetaData("behave", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.wi.director.thrift.v1.abac.AttributeUploadBehaviour.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateAttribute_args.class, metaDataMap);
    }

    public updateAttribute_args() {
    }

    public updateAttribute_args(
      String templateId,
      String attributeId,
      List<com.wi.director.thrift.v1.abac.AbacAttributeValue> values,
      com.wi.director.thrift.v1.abac.AttributeUploadBehaviour behave)
    {
      this();
      this.templateId = templateId;
      this.attributeId = attributeId;
      this.values = values;
      this.behave = behave;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateAttribute_args(updateAttribute_args other) {
      if (other.isSetTemplateId()) {
        this.templateId = other.templateId;
      }
      if (other.isSetAttributeId()) {
        this.attributeId = other.attributeId;
      }
      if (other.isSetValues()) {
        List<com.wi.director.thrift.v1.abac.AbacAttributeValue> __this__values = new ArrayList<com.wi.director.thrift.v1.abac.AbacAttributeValue>(other.values.size());
        for (com.wi.director.thrift.v1.abac.AbacAttributeValue other_element : other.values) {
          __this__values.add(new com.wi.director.thrift.v1.abac.AbacAttributeValue(other_element));
        }
        this.values = __this__values;
      }
      if (other.isSetBehave()) {
        this.behave = other.behave;
      }
    }

    public updateAttribute_args deepCopy() {
      return new updateAttribute_args(this);
    }

    @Override
    public void clear() {
      this.templateId = null;
      this.attributeId = null;
      this.values = null;
      this.behave = null;
    }

    public String getTemplateId() {
      return this.templateId;
    }

    public updateAttribute_args setTemplateId(String templateId) {
      this.templateId = templateId;
      return this;
    }

    public void unsetTemplateId() {
      this.templateId = null;
    }

    /** Returns true if field templateId is set (has been assigned a value) and false otherwise */
    public boolean isSetTemplateId() {
      return this.templateId != null;
    }

    public void setTemplateIdIsSet(boolean value) {
      if (!value) {
        this.templateId = null;
      }
    }

    public String getAttributeId() {
      return this.attributeId;
    }

    public updateAttribute_args setAttributeId(String attributeId) {
      this.attributeId = attributeId;
      return this;
    }

    public void unsetAttributeId() {
      this.attributeId = null;
    }

    /** Returns true if field attributeId is set (has been assigned a value) and false otherwise */
    public boolean isSetAttributeId() {
      return this.attributeId != null;
    }

    public void setAttributeIdIsSet(boolean value) {
      if (!value) {
        this.attributeId = null;
      }
    }

    public int getValuesSize() {
      return (this.values == null) ? 0 : this.values.size();
    }

    public java.util.Iterator<com.wi.director.thrift.v1.abac.AbacAttributeValue> getValuesIterator() {
      return (this.values == null) ? null : this.values.iterator();
    }

    public void addToValues(com.wi.director.thrift.v1.abac.AbacAttributeValue elem) {
      if (this.values == null) {
        this.values = new ArrayList<com.wi.director.thrift.v1.abac.AbacAttributeValue>();
      }
      this.values.add(elem);
    }

    public List<com.wi.director.thrift.v1.abac.AbacAttributeValue> getValues() {
      return this.values;
    }

    public updateAttribute_args setValues(List<com.wi.director.thrift.v1.abac.AbacAttributeValue> values) {
      this.values = values;
      return this;
    }

    public void unsetValues() {
      this.values = null;
    }

    /** Returns true if field values is set (has been assigned a value) and false otherwise */
    public boolean isSetValues() {
      return this.values != null;
    }

    public void setValuesIsSet(boolean value) {
      if (!value) {
        this.values = null;
      }
    }

    /**
     * 
     * @see com.wi.director.thrift.v1.abac.AttributeUploadBehaviour
     */
    public com.wi.director.thrift.v1.abac.AttributeUploadBehaviour getBehave() {
      return this.behave;
    }

    /**
     * 
     * @see com.wi.director.thrift.v1.abac.AttributeUploadBehaviour
     */
    public updateAttribute_args setBehave(com.wi.director.thrift.v1.abac.AttributeUploadBehaviour behave) {
      this.behave = behave;
      return this;
    }

    public void unsetBehave() {
      this.behave = null;
    }

    /** Returns true if field behave is set (has been assigned a value) and false otherwise */
    public boolean isSetBehave() {
      return this.behave != null;
    }

    public void setBehaveIsSet(boolean value) {
      if (!value) {
        this.behave = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TEMPLATE_ID:
        if (value == null) {
          unsetTemplateId();
        } else {
          setTemplateId((String)value);
        }
        break;

      case ATTRIBUTE_ID:
        if (value == null) {
          unsetAttributeId();
        } else {
          setAttributeId((String)value);
        }
        break;

      case VALUES:
        if (value == null) {
          unsetValues();
        } else {
          setValues((List<com.wi.director.thrift.v1.abac.AbacAttributeValue>)value);
        }
        break;

      case BEHAVE:
        if (value == null) {
          unsetBehave();
        } else {
          setBehave((com.wi.director.thrift.v1.abac.AttributeUploadBehaviour)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TEMPLATE_ID:
        return getTemplateId();

      case ATTRIBUTE_ID:
        return getAttributeId();

      case VALUES:
        return getValues();

      case BEHAVE:
        return getBehave();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TEMPLATE_ID:
        return isSetTemplateId();
      case ATTRIBUTE_ID:
        return isSetAttributeId();
      case VALUES:
        return isSetValues();
      case BEHAVE:
        return isSetBehave();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateAttribute_args)
        return this.equals((updateAttribute_args)that);
      return false;
    }

    public boolean equals(updateAttribute_args that) {
      if (that == null)
        return false;

      boolean this_present_templateId = true && this.isSetTemplateId();
      boolean that_present_templateId = true && that.isSetTemplateId();
      if (this_present_templateId || that_present_templateId) {
        if (!(this_present_templateId && that_present_templateId))
          return false;
        if (!this.templateId.equals(that.templateId))
          return false;
      }

      boolean this_present_attributeId = true && this.isSetAttributeId();
      boolean that_present_attributeId = true && that.isSetAttributeId();
      if (this_present_attributeId || that_present_attributeId) {
        if (!(this_present_attributeId && that_present_attributeId))
          return false;
        if (!this.attributeId.equals(that.attributeId))
          return false;
      }

      boolean this_present_values = true && this.isSetValues();
      boolean that_present_values = true && that.isSetValues();
      if (this_present_values || that_present_values) {
        if (!(this_present_values && that_present_values))
          return false;
        if (!this.values.equals(that.values))
          return false;
      }

      boolean this_present_behave = true && this.isSetBehave();
      boolean that_present_behave = true && that.isSetBehave();
      if (this_present_behave || that_present_behave) {
        if (!(this_present_behave && that_present_behave))
          return false;
        if (!this.behave.equals(that.behave))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_templateId = true && (isSetTemplateId());
      list.add(present_templateId);
      if (present_templateId)
        list.add(templateId);

      boolean present_attributeId = true && (isSetAttributeId());
      list.add(present_attributeId);
      if (present_attributeId)
        list.add(attributeId);

      boolean present_values = true && (isSetValues());
      list.add(present_values);
      if (present_values)
        list.add(values);

      boolean present_behave = true && (isSetBehave());
      list.add(present_behave);
      if (present_behave)
        list.add(behave.getValue());

      return list.hashCode();
    }

    @Override
    public int compareTo(updateAttribute_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTemplateId()).compareTo(other.isSetTemplateId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTemplateId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.templateId, other.templateId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAttributeId()).compareTo(other.isSetAttributeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttributeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attributeId, other.attributeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetValues()).compareTo(other.isSetValues());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValues()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.values, other.values);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBehave()).compareTo(other.isSetBehave());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBehave()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.behave, other.behave);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateAttribute_args(");
      boolean first = true;

      sb.append("templateId:");
      if (this.templateId == null) {
        sb.append("null");
      } else {
        sb.append(this.templateId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("attributeId:");
      if (this.attributeId == null) {
        sb.append("null");
      } else {
        sb.append(this.attributeId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("values:");
      if (this.values == null) {
        sb.append("null");
      } else {
        sb.append(this.values);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("behave:");
      if (this.behave == null) {
        sb.append("null");
      } else {
        sb.append(this.behave);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateAttribute_argsStandardSchemeFactory implements SchemeFactory {
      public updateAttribute_argsStandardScheme getScheme() {
        return new updateAttribute_argsStandardScheme();
      }
    }

    private static class updateAttribute_argsStandardScheme extends StandardScheme<updateAttribute_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateAttribute_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TEMPLATE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.templateId = iprot.readString();
                struct.setTemplateIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ATTRIBUTE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.attributeId = iprot.readString();
                struct.setAttributeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // VALUES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list165 = iprot.readListBegin();
                  struct.values = new ArrayList<com.wi.director.thrift.v1.abac.AbacAttributeValue>(_list165.size);
                  com.wi.director.thrift.v1.abac.AbacAttributeValue _elem166;
                  for (int _i167 = 0; _i167 < _list165.size; ++_i167)
                  {
                    _elem166 = new com.wi.director.thrift.v1.abac.AbacAttributeValue();
                    _elem166.read(iprot);
                    struct.values.add(_elem166);
                  }
                  iprot.readListEnd();
                }
                struct.setValuesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // BEHAVE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.behave = com.wi.director.thrift.v1.abac.AttributeUploadBehaviour.findByValue(iprot.readI32());
                struct.setBehaveIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateAttribute_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.templateId != null) {
          oprot.writeFieldBegin(TEMPLATE_ID_FIELD_DESC);
          oprot.writeString(struct.templateId);
          oprot.writeFieldEnd();
        }
        if (struct.attributeId != null) {
          oprot.writeFieldBegin(ATTRIBUTE_ID_FIELD_DESC);
          oprot.writeString(struct.attributeId);
          oprot.writeFieldEnd();
        }
        if (struct.values != null) {
          oprot.writeFieldBegin(VALUES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.values.size()));
            for (com.wi.director.thrift.v1.abac.AbacAttributeValue _iter168 : struct.values)
            {
              _iter168.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.behave != null) {
          oprot.writeFieldBegin(BEHAVE_FIELD_DESC);
          oprot.writeI32(struct.behave.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class updateAttribute_result implements org.apache.thrift.TBase<updateAttribute_result, updateAttribute_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateAttribute_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateAttribute_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateAttribute_resultStandardSchemeFactory());
    }

    public List<com.wi.director.thrift.v1.abac.AbacAttribute> success; // required
    public com.wi.director.thrift.v1.common.SystemException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.abac.AbacAttribute.class))));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateAttribute_result.class, metaDataMap);
    }

    public updateAttribute_result() {
    }

    public updateAttribute_result(
      List<com.wi.director.thrift.v1.abac.AbacAttribute> success,
      com.wi.director.thrift.v1.common.SystemException err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateAttribute_result(updateAttribute_result other) {
      if (other.isSetSuccess()) {
        List<com.wi.director.thrift.v1.abac.AbacAttribute> __this__success = new ArrayList<com.wi.director.thrift.v1.abac.AbacAttribute>(other.success.size());
        for (com.wi.director.thrift.v1.abac.AbacAttribute other_element : other.success) {
          __this__success.add(new com.wi.director.thrift.v1.abac.AbacAttribute(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetErr()) {
        this.err = new com.wi.director.thrift.v1.common.SystemException(other.err);
      }
    }

    public updateAttribute_result deepCopy() {
      return new updateAttribute_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.wi.director.thrift.v1.abac.AbacAttribute> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.wi.director.thrift.v1.abac.AbacAttribute elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.wi.director.thrift.v1.abac.AbacAttribute>();
      }
      this.success.add(elem);
    }

    public List<com.wi.director.thrift.v1.abac.AbacAttribute> getSuccess() {
      return this.success;
    }

    public updateAttribute_result setSuccess(List<com.wi.director.thrift.v1.abac.AbacAttribute> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.wi.director.thrift.v1.common.SystemException getErr() {
      return this.err;
    }

    public updateAttribute_result setErr(com.wi.director.thrift.v1.common.SystemException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.wi.director.thrift.v1.abac.AbacAttribute>)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((com.wi.director.thrift.v1.common.SystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateAttribute_result)
        return this.equals((updateAttribute_result)that);
      return false;
    }

    public boolean equals(updateAttribute_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateAttribute_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateAttribute_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateAttribute_resultStandardSchemeFactory implements SchemeFactory {
      public updateAttribute_resultStandardScheme getScheme() {
        return new updateAttribute_resultStandardScheme();
      }
    }

    private static class updateAttribute_resultStandardScheme extends StandardScheme<updateAttribute_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateAttribute_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list169 = iprot.readListBegin();
                  struct.success = new ArrayList<com.wi.director.thrift.v1.abac.AbacAttribute>(_list169.size);
                  com.wi.director.thrift.v1.abac.AbacAttribute _elem170;
                  for (int _i171 = 0; _i171 < _list169.size; ++_i171)
                  {
                    _elem170 = new com.wi.director.thrift.v1.abac.AbacAttribute();
                    _elem170.read(iprot);
                    struct.success.add(_elem170);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new com.wi.director.thrift.v1.common.SystemException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateAttribute_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.wi.director.thrift.v1.abac.AbacAttribute _iter172 : struct.success)
            {
              _iter172.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

}
