/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wi.director.thrift.v1.messaging;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class StructuredBody implements org.apache.thrift.TBase<StructuredBody, StructuredBody._Fields>, java.io.Serializable, Cloneable, Comparable<StructuredBody> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StructuredBody");

  private static final org.apache.thrift.protocol.TField RESOURCE_LOCATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("resourceLocator", org.apache.thrift.protocol.TType.MAP, (short)1);
  private static final org.apache.thrift.protocol.TField TMPL_FIELD_DESC = new org.apache.thrift.protocol.TField("tmpl", org.apache.thrift.protocol.TType.STRING, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new StructuredBodyStandardSchemeFactory());
  }

  public Map<String,TemplateResource> resourceLocator; // required
  public String tmpl; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RESOURCE_LOCATOR((short)1, "resourceLocator"),
    TMPL((short)2, "tmpl");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RESOURCE_LOCATOR
          return RESOURCE_LOCATOR;
        case 2: // TMPL
          return TMPL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RESOURCE_LOCATOR, new org.apache.thrift.meta_data.FieldMetaData("resourceLocator", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TemplateResource.class))));
    tmpMap.put(_Fields.TMPL, new org.apache.thrift.meta_data.FieldMetaData("tmpl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StructuredBody.class, metaDataMap);
  }

  public StructuredBody() {
  }

  public StructuredBody(
    Map<String,TemplateResource> resourceLocator,
    String tmpl)
  {
    this();
    this.resourceLocator = resourceLocator;
    this.tmpl = tmpl;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StructuredBody(StructuredBody other) {
    if (other.isSetResourceLocator()) {
      Map<String,TemplateResource> __this__resourceLocator = new HashMap<String,TemplateResource>(other.resourceLocator.size());
      for (Map.Entry<String, TemplateResource> other_element : other.resourceLocator.entrySet()) {

        String other_element_key = other_element.getKey();
        TemplateResource other_element_value = other_element.getValue();

        String __this__resourceLocator_copy_key = other_element_key;

        TemplateResource __this__resourceLocator_copy_value = new TemplateResource(other_element_value);

        __this__resourceLocator.put(__this__resourceLocator_copy_key, __this__resourceLocator_copy_value);
      }
      this.resourceLocator = __this__resourceLocator;
    }
    if (other.isSetTmpl()) {
      this.tmpl = other.tmpl;
    }
  }

  public StructuredBody deepCopy() {
    return new StructuredBody(this);
  }

  @Override
  public void clear() {
    this.resourceLocator = null;
    this.tmpl = null;
  }

  public int getResourceLocatorSize() {
    return (this.resourceLocator == null) ? 0 : this.resourceLocator.size();
  }

  public void putToResourceLocator(String key, TemplateResource val) {
    if (this.resourceLocator == null) {
      this.resourceLocator = new HashMap<String,TemplateResource>();
    }
    this.resourceLocator.put(key, val);
  }

  public Map<String,TemplateResource> getResourceLocator() {
    return this.resourceLocator;
  }

  public StructuredBody setResourceLocator(Map<String,TemplateResource> resourceLocator) {
    this.resourceLocator = resourceLocator;
    return this;
  }

  public void unsetResourceLocator() {
    this.resourceLocator = null;
  }

  /** Returns true if field resourceLocator is set (has been assigned a value) and false otherwise */
  public boolean isSetResourceLocator() {
    return this.resourceLocator != null;
  }

  public void setResourceLocatorIsSet(boolean value) {
    if (!value) {
      this.resourceLocator = null;
    }
  }

  public String getTmpl() {
    return this.tmpl;
  }

  public StructuredBody setTmpl(String tmpl) {
    this.tmpl = tmpl;
    return this;
  }

  public void unsetTmpl() {
    this.tmpl = null;
  }

  /** Returns true if field tmpl is set (has been assigned a value) and false otherwise */
  public boolean isSetTmpl() {
    return this.tmpl != null;
  }

  public void setTmplIsSet(boolean value) {
    if (!value) {
      this.tmpl = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RESOURCE_LOCATOR:
      if (value == null) {
        unsetResourceLocator();
      } else {
        setResourceLocator((Map<String,TemplateResource>)value);
      }
      break;

    case TMPL:
      if (value == null) {
        unsetTmpl();
      } else {
        setTmpl((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RESOURCE_LOCATOR:
      return getResourceLocator();

    case TMPL:
      return getTmpl();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RESOURCE_LOCATOR:
      return isSetResourceLocator();
    case TMPL:
      return isSetTmpl();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof StructuredBody)
      return this.equals((StructuredBody)that);
    return false;
  }

  public boolean equals(StructuredBody that) {
    if (that == null)
      return false;

    boolean this_present_resourceLocator = true && this.isSetResourceLocator();
    boolean that_present_resourceLocator = true && that.isSetResourceLocator();
    if (this_present_resourceLocator || that_present_resourceLocator) {
      if (!(this_present_resourceLocator && that_present_resourceLocator))
        return false;
      if (!this.resourceLocator.equals(that.resourceLocator))
        return false;
    }

    boolean this_present_tmpl = true && this.isSetTmpl();
    boolean that_present_tmpl = true && that.isSetTmpl();
    if (this_present_tmpl || that_present_tmpl) {
      if (!(this_present_tmpl && that_present_tmpl))
        return false;
      if (!this.tmpl.equals(that.tmpl))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_resourceLocator = true && (isSetResourceLocator());
    list.add(present_resourceLocator);
    if (present_resourceLocator)
      list.add(resourceLocator);

    boolean present_tmpl = true && (isSetTmpl());
    list.add(present_tmpl);
    if (present_tmpl)
      list.add(tmpl);

    return list.hashCode();
  }

  @Override
  public int compareTo(StructuredBody other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetResourceLocator()).compareTo(other.isSetResourceLocator());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResourceLocator()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resourceLocator, other.resourceLocator);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTmpl()).compareTo(other.isSetTmpl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTmpl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tmpl, other.tmpl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("StructuredBody(");
    boolean first = true;

    sb.append("resourceLocator:");
    if (this.resourceLocator == null) {
      sb.append("null");
    } else {
      sb.append(this.resourceLocator);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tmpl:");
    if (this.tmpl == null) {
      sb.append("null");
    } else {
      sb.append(this.tmpl);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StructuredBodyStandardSchemeFactory implements SchemeFactory {
    public StructuredBodyStandardScheme getScheme() {
      return new StructuredBodyStandardScheme();
    }
  }

  private static class StructuredBodyStandardScheme extends StandardScheme<StructuredBody> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, StructuredBody struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RESOURCE_LOCATOR
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.resourceLocator = new HashMap<String,TemplateResource>(2*_map0.size);
                String _key1;
                TemplateResource _val2;
                for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                {
                  _key1 = iprot.readString();
                  _val2 = new TemplateResource();
                  _val2.read(iprot);
                  struct.resourceLocator.put(_key1, _val2);
                }
                iprot.readMapEnd();
              }
              struct.setResourceLocatorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TMPL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tmpl = iprot.readString();
              struct.setTmplIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, StructuredBody struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.resourceLocator != null) {
        oprot.writeFieldBegin(RESOURCE_LOCATOR_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.resourceLocator.size()));
          for (Map.Entry<String, TemplateResource> _iter4 : struct.resourceLocator.entrySet())
          {
            oprot.writeString(_iter4.getKey());
            _iter4.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.tmpl != null) {
        oprot.writeFieldBegin(TMPL_FIELD_DESC);
        oprot.writeString(struct.tmpl);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

}

