/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wi.director.thrift.v1.team;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * Structure used to indicate the correct hostnames to contact, for
 * customers with non-US deployments.
 */
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class Region implements org.apache.thrift.TBase<Region, Region._Fields>, java.io.Serializable, Cloneable, Comparable<Region> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Region");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField API_HOST_FIELD_DESC = new org.apache.thrift.protocol.TField("apiHost", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SIG_HOST_FIELD_DESC = new org.apache.thrift.protocol.TField("sigHost", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField STATIC_HOST_FIELD_DESC = new org.apache.thrift.protocol.TField("staticHost", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RegionStandardSchemeFactory());
  }

  /**
   * A region code, such as "us-west-2" or "eu-west-1"
   */
  public String id; // required
  /**
   * The hostname part of the REST API.  The API itself is located at
   * <tt>https://</tt><i>&lt;apiHost&gt;</i><tt>/api/</tt>
   */
  public String apiHost; // required
  /**
   * Access to real-time updates are via this host, and the websocket protocol.
   */
  public String sigHost; // required
  public String staticHost; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * A region code, such as "us-west-2" or "eu-west-1"
     */
    ID((short)1, "id"),
    /**
     * The hostname part of the REST API.  The API itself is located at
     * <tt>https://</tt><i>&lt;apiHost&gt;</i><tt>/api/</tt>
     */
    API_HOST((short)2, "apiHost"),
    /**
     * Access to real-time updates are via this host, and the websocket protocol.
     */
    SIG_HOST((short)3, "sigHost"),
    STATIC_HOST((short)4, "staticHost");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // API_HOST
          return API_HOST;
        case 3: // SIG_HOST
          return SIG_HOST;
        case 4: // STATIC_HOST
          return STATIC_HOST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.API_HOST, new org.apache.thrift.meta_data.FieldMetaData("apiHost", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SIG_HOST, new org.apache.thrift.meta_data.FieldMetaData("sigHost", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATIC_HOST, new org.apache.thrift.meta_data.FieldMetaData("staticHost", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Region.class, metaDataMap);
  }

  public Region() {
  }

  public Region(
    String id,
    String apiHost,
    String sigHost,
    String staticHost)
  {
    this();
    this.id = id;
    this.apiHost = apiHost;
    this.sigHost = sigHost;
    this.staticHost = staticHost;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Region(Region other) {
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetApiHost()) {
      this.apiHost = other.apiHost;
    }
    if (other.isSetSigHost()) {
      this.sigHost = other.sigHost;
    }
    if (other.isSetStaticHost()) {
      this.staticHost = other.staticHost;
    }
  }

  public Region deepCopy() {
    return new Region(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.apiHost = null;
    this.sigHost = null;
    this.staticHost = null;
  }

  /**
   * A region code, such as "us-west-2" or "eu-west-1"
   */
  public String getId() {
    return this.id;
  }

  /**
   * A region code, such as "us-west-2" or "eu-west-1"
   */
  public Region setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  /**
   * The hostname part of the REST API.  The API itself is located at
   * <tt>https://</tt><i>&lt;apiHost&gt;</i><tt>/api/</tt>
   */
  public String getApiHost() {
    return this.apiHost;
  }

  /**
   * The hostname part of the REST API.  The API itself is located at
   * <tt>https://</tt><i>&lt;apiHost&gt;</i><tt>/api/</tt>
   */
  public Region setApiHost(String apiHost) {
    this.apiHost = apiHost;
    return this;
  }

  public void unsetApiHost() {
    this.apiHost = null;
  }

  /** Returns true if field apiHost is set (has been assigned a value) and false otherwise */
  public boolean isSetApiHost() {
    return this.apiHost != null;
  }

  public void setApiHostIsSet(boolean value) {
    if (!value) {
      this.apiHost = null;
    }
  }

  /**
   * Access to real-time updates are via this host, and the websocket protocol.
   */
  public String getSigHost() {
    return this.sigHost;
  }

  /**
   * Access to real-time updates are via this host, and the websocket protocol.
   */
  public Region setSigHost(String sigHost) {
    this.sigHost = sigHost;
    return this;
  }

  public void unsetSigHost() {
    this.sigHost = null;
  }

  /** Returns true if field sigHost is set (has been assigned a value) and false otherwise */
  public boolean isSetSigHost() {
    return this.sigHost != null;
  }

  public void setSigHostIsSet(boolean value) {
    if (!value) {
      this.sigHost = null;
    }
  }

  public String getStaticHost() {
    return this.staticHost;
  }

  public Region setStaticHost(String staticHost) {
    this.staticHost = staticHost;
    return this;
  }

  public void unsetStaticHost() {
    this.staticHost = null;
  }

  /** Returns true if field staticHost is set (has been assigned a value) and false otherwise */
  public boolean isSetStaticHost() {
    return this.staticHost != null;
  }

  public void setStaticHostIsSet(boolean value) {
    if (!value) {
      this.staticHost = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case API_HOST:
      if (value == null) {
        unsetApiHost();
      } else {
        setApiHost((String)value);
      }
      break;

    case SIG_HOST:
      if (value == null) {
        unsetSigHost();
      } else {
        setSigHost((String)value);
      }
      break;

    case STATIC_HOST:
      if (value == null) {
        unsetStaticHost();
      } else {
        setStaticHost((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case API_HOST:
      return getApiHost();

    case SIG_HOST:
      return getSigHost();

    case STATIC_HOST:
      return getStaticHost();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case API_HOST:
      return isSetApiHost();
    case SIG_HOST:
      return isSetSigHost();
    case STATIC_HOST:
      return isSetStaticHost();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Region)
      return this.equals((Region)that);
    return false;
  }

  public boolean equals(Region that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_apiHost = true && this.isSetApiHost();
    boolean that_present_apiHost = true && that.isSetApiHost();
    if (this_present_apiHost || that_present_apiHost) {
      if (!(this_present_apiHost && that_present_apiHost))
        return false;
      if (!this.apiHost.equals(that.apiHost))
        return false;
    }

    boolean this_present_sigHost = true && this.isSetSigHost();
    boolean that_present_sigHost = true && that.isSetSigHost();
    if (this_present_sigHost || that_present_sigHost) {
      if (!(this_present_sigHost && that_present_sigHost))
        return false;
      if (!this.sigHost.equals(that.sigHost))
        return false;
    }

    boolean this_present_staticHost = true && this.isSetStaticHost();
    boolean that_present_staticHost = true && that.isSetStaticHost();
    if (this_present_staticHost || that_present_staticHost) {
      if (!(this_present_staticHost && that_present_staticHost))
        return false;
      if (!this.staticHost.equals(that.staticHost))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_apiHost = true && (isSetApiHost());
    list.add(present_apiHost);
    if (present_apiHost)
      list.add(apiHost);

    boolean present_sigHost = true && (isSetSigHost());
    list.add(present_sigHost);
    if (present_sigHost)
      list.add(sigHost);

    boolean present_staticHost = true && (isSetStaticHost());
    list.add(present_staticHost);
    if (present_staticHost)
      list.add(staticHost);

    return list.hashCode();
  }

  @Override
  public int compareTo(Region other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApiHost()).compareTo(other.isSetApiHost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApiHost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.apiHost, other.apiHost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSigHost()).compareTo(other.isSetSigHost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSigHost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sigHost, other.sigHost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStaticHost()).compareTo(other.isSetStaticHost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStaticHost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.staticHost, other.staticHost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Region(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("apiHost:");
    if (this.apiHost == null) {
      sb.append("null");
    } else {
      sb.append(this.apiHost);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sigHost:");
    if (this.sigHost == null) {
      sb.append("null");
    } else {
      sb.append(this.sigHost);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("staticHost:");
    if (this.staticHost == null) {
      sb.append("null");
    } else {
      sb.append(this.staticHost);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RegionStandardSchemeFactory implements SchemeFactory {
    public RegionStandardScheme getScheme() {
      return new RegionStandardScheme();
    }
  }

  private static class RegionStandardScheme extends StandardScheme<Region> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Region struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // API_HOST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.apiHost = iprot.readString();
              struct.setApiHostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SIG_HOST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sigHost = iprot.readString();
              struct.setSigHostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // STATIC_HOST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.staticHost = iprot.readString();
              struct.setStaticHostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Region struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.apiHost != null) {
        oprot.writeFieldBegin(API_HOST_FIELD_DESC);
        oprot.writeString(struct.apiHost);
        oprot.writeFieldEnd();
      }
      if (struct.sigHost != null) {
        oprot.writeFieldBegin(SIG_HOST_FIELD_DESC);
        oprot.writeString(struct.sigHost);
        oprot.writeFieldEnd();
      }
      if (struct.staticHost != null) {
        oprot.writeFieldBegin(STATIC_HOST_FIELD_DESC);
        oprot.writeString(struct.staticHost);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

}

