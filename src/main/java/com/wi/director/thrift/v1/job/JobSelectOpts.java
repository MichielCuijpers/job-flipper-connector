/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wi.director.thrift.v1.job;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class JobSelectOpts implements org.apache.thrift.TBase<JobSelectOpts, JobSelectOpts._Fields>, java.io.Serializable, Cloneable, Comparable<JobSelectOpts> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("JobSelectOpts");

  private static final org.apache.thrift.protocol.TField INCLUDE_TEAM_FIELD_DESC = new org.apache.thrift.protocol.TField("includeTeam", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField INCLUDE_TEMPLATE_FIELD_DESC = new org.apache.thrift.protocol.TField("includeTemplate", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField INCLUDE_ROOT_HEADERS_FIELD_DESC = new org.apache.thrift.protocol.TField("includeRootHeaders", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField INCLUDE_STEPS_FIELD_DESC = new org.apache.thrift.protocol.TField("includeSteps", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField INCLUDE_DOCUMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("includeDocuments", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField INCLUDE_USERS_FIELD_DESC = new org.apache.thrift.protocol.TField("includeUsers", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField INCLUDE_STATS_FIELD_DESC = new org.apache.thrift.protocol.TField("includeStats", org.apache.thrift.protocol.TType.BOOL, (short)7);
  private static final org.apache.thrift.protocol.TField INCLUDE_ACTIVITY_FIELD_DESC = new org.apache.thrift.protocol.TField("includeActivity", org.apache.thrift.protocol.TType.BOOL, (short)8);
  private static final org.apache.thrift.protocol.TField INCLUDE_TEMPLATES_FIELD_DESC = new org.apache.thrift.protocol.TField("includeTemplates", org.apache.thrift.protocol.TType.BOOL, (short)9);
  private static final org.apache.thrift.protocol.TField INCLUDE_CREATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("includeCreator", org.apache.thrift.protocol.TType.BOOL, (short)10);
  private static final org.apache.thrift.protocol.TField INCLUDE_ROLES_FIELD_DESC = new org.apache.thrift.protocol.TField("includeRoles", org.apache.thrift.protocol.TType.BOOL, (short)11);
  private static final org.apache.thrift.protocol.TField INCLUDE_PERMISSIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("includePermissions", org.apache.thrift.protocol.TType.BOOL, (short)12);
  private static final org.apache.thrift.protocol.TField INCLUDE_EXEC_SNIPPETS_FIELD_DESC = new org.apache.thrift.protocol.TField("includeExecSnippets", org.apache.thrift.protocol.TType.BOOL, (short)13);
  private static final org.apache.thrift.protocol.TField INCLUDE_MESSAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("includeMessages", org.apache.thrift.protocol.TType.BOOL, (short)14);
  private static final org.apache.thrift.protocol.TField INCLUDE_ISSUES_FIELD_DESC = new org.apache.thrift.protocol.TField("includeIssues", org.apache.thrift.protocol.TType.BOOL, (short)15);
  private static final org.apache.thrift.protocol.TField INCLUDE_DEVIATION_COUNTS_FIELD_DESC = new org.apache.thrift.protocol.TField("includeDeviationCounts", org.apache.thrift.protocol.TType.BOOL, (short)16);
  private static final org.apache.thrift.protocol.TField INCLUDE_DEVIATIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("includeDeviations", org.apache.thrift.protocol.TType.BOOL, (short)17);
  private static final org.apache.thrift.protocol.TField INCLUDE_REF_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("includeRefMap", org.apache.thrift.protocol.TType.BOOL, (short)25);
  private static final org.apache.thrift.protocol.TField INCLUDE_PLANNED_DATA_SHEET_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("includePlannedDataSheetIds", org.apache.thrift.protocol.TType.BOOL, (short)30);
  private static final org.apache.thrift.protocol.TField INCLUDE_SNAPSHOTTED_DATA_SHEET_VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("includeSnapshottedDataSheetValues", org.apache.thrift.protocol.TType.BOOL, (short)31);
  private static final org.apache.thrift.protocol.TField INCLUDE_ATTRIBUTES_FIELD_DESC = new org.apache.thrift.protocol.TField("includeAttributes", org.apache.thrift.protocol.TType.BOOL, (short)32);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new JobSelectOptsStandardSchemeFactory());
  }

  public boolean includeTeam; // required
  public boolean includeTemplate; // required
  public boolean includeRootHeaders; // required
  public boolean includeSteps; // required
  public boolean includeDocuments; // required
  public boolean includeUsers; // required
  public boolean includeStats; // required
  public boolean includeActivity; // required
  public boolean includeTemplates; // required
  public boolean includeCreator; // required
  public boolean includeRoles; // required
  public boolean includePermissions; // required
  public boolean includeExecSnippets; // required
  public boolean includeMessages; // required
  public boolean includeIssues; // required
  public boolean includeDeviationCounts; // required
  public boolean includeDeviations; // required
  public boolean includeRefMap; // required
  public boolean includePlannedDataSheetIds; // required
  public boolean includeSnapshottedDataSheetValues; // required
  public boolean includeAttributes; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    INCLUDE_TEAM((short)1, "includeTeam"),
    INCLUDE_TEMPLATE((short)2, "includeTemplate"),
    INCLUDE_ROOT_HEADERS((short)3, "includeRootHeaders"),
    INCLUDE_STEPS((short)4, "includeSteps"),
    INCLUDE_DOCUMENTS((short)5, "includeDocuments"),
    INCLUDE_USERS((short)6, "includeUsers"),
    INCLUDE_STATS((short)7, "includeStats"),
    INCLUDE_ACTIVITY((short)8, "includeActivity"),
    INCLUDE_TEMPLATES((short)9, "includeTemplates"),
    INCLUDE_CREATOR((short)10, "includeCreator"),
    INCLUDE_ROLES((short)11, "includeRoles"),
    INCLUDE_PERMISSIONS((short)12, "includePermissions"),
    INCLUDE_EXEC_SNIPPETS((short)13, "includeExecSnippets"),
    INCLUDE_MESSAGES((short)14, "includeMessages"),
    INCLUDE_ISSUES((short)15, "includeIssues"),
    INCLUDE_DEVIATION_COUNTS((short)16, "includeDeviationCounts"),
    INCLUDE_DEVIATIONS((short)17, "includeDeviations"),
    INCLUDE_REF_MAP((short)25, "includeRefMap"),
    INCLUDE_PLANNED_DATA_SHEET_IDS((short)30, "includePlannedDataSheetIds"),
    INCLUDE_SNAPSHOTTED_DATA_SHEET_VALUES((short)31, "includeSnapshottedDataSheetValues"),
    INCLUDE_ATTRIBUTES((short)32, "includeAttributes");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // INCLUDE_TEAM
          return INCLUDE_TEAM;
        case 2: // INCLUDE_TEMPLATE
          return INCLUDE_TEMPLATE;
        case 3: // INCLUDE_ROOT_HEADERS
          return INCLUDE_ROOT_HEADERS;
        case 4: // INCLUDE_STEPS
          return INCLUDE_STEPS;
        case 5: // INCLUDE_DOCUMENTS
          return INCLUDE_DOCUMENTS;
        case 6: // INCLUDE_USERS
          return INCLUDE_USERS;
        case 7: // INCLUDE_STATS
          return INCLUDE_STATS;
        case 8: // INCLUDE_ACTIVITY
          return INCLUDE_ACTIVITY;
        case 9: // INCLUDE_TEMPLATES
          return INCLUDE_TEMPLATES;
        case 10: // INCLUDE_CREATOR
          return INCLUDE_CREATOR;
        case 11: // INCLUDE_ROLES
          return INCLUDE_ROLES;
        case 12: // INCLUDE_PERMISSIONS
          return INCLUDE_PERMISSIONS;
        case 13: // INCLUDE_EXEC_SNIPPETS
          return INCLUDE_EXEC_SNIPPETS;
        case 14: // INCLUDE_MESSAGES
          return INCLUDE_MESSAGES;
        case 15: // INCLUDE_ISSUES
          return INCLUDE_ISSUES;
        case 16: // INCLUDE_DEVIATION_COUNTS
          return INCLUDE_DEVIATION_COUNTS;
        case 17: // INCLUDE_DEVIATIONS
          return INCLUDE_DEVIATIONS;
        case 25: // INCLUDE_REF_MAP
          return INCLUDE_REF_MAP;
        case 30: // INCLUDE_PLANNED_DATA_SHEET_IDS
          return INCLUDE_PLANNED_DATA_SHEET_IDS;
        case 31: // INCLUDE_SNAPSHOTTED_DATA_SHEET_VALUES
          return INCLUDE_SNAPSHOTTED_DATA_SHEET_VALUES;
        case 32: // INCLUDE_ATTRIBUTES
          return INCLUDE_ATTRIBUTES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __INCLUDETEAM_ISSET_ID = 0;
  private static final int __INCLUDETEMPLATE_ISSET_ID = 1;
  private static final int __INCLUDEROOTHEADERS_ISSET_ID = 2;
  private static final int __INCLUDESTEPS_ISSET_ID = 3;
  private static final int __INCLUDEDOCUMENTS_ISSET_ID = 4;
  private static final int __INCLUDEUSERS_ISSET_ID = 5;
  private static final int __INCLUDESTATS_ISSET_ID = 6;
  private static final int __INCLUDEACTIVITY_ISSET_ID = 7;
  private static final int __INCLUDETEMPLATES_ISSET_ID = 8;
  private static final int __INCLUDECREATOR_ISSET_ID = 9;
  private static final int __INCLUDEROLES_ISSET_ID = 10;
  private static final int __INCLUDEPERMISSIONS_ISSET_ID = 11;
  private static final int __INCLUDEEXECSNIPPETS_ISSET_ID = 12;
  private static final int __INCLUDEMESSAGES_ISSET_ID = 13;
  private static final int __INCLUDEISSUES_ISSET_ID = 14;
  private static final int __INCLUDEDEVIATIONCOUNTS_ISSET_ID = 15;
  private static final int __INCLUDEDEVIATIONS_ISSET_ID = 16;
  private static final int __INCLUDEREFMAP_ISSET_ID = 17;
  private static final int __INCLUDEPLANNEDDATASHEETIDS_ISSET_ID = 18;
  private static final int __INCLUDESNAPSHOTTEDDATASHEETVALUES_ISSET_ID = 19;
  private static final int __INCLUDEATTRIBUTES_ISSET_ID = 20;
  private int __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INCLUDE_TEAM, new org.apache.thrift.meta_data.FieldMetaData("includeTeam", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.INCLUDE_TEMPLATE, new org.apache.thrift.meta_data.FieldMetaData("includeTemplate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.INCLUDE_ROOT_HEADERS, new org.apache.thrift.meta_data.FieldMetaData("includeRootHeaders", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.INCLUDE_STEPS, new org.apache.thrift.meta_data.FieldMetaData("includeSteps", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.INCLUDE_DOCUMENTS, new org.apache.thrift.meta_data.FieldMetaData("includeDocuments", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.INCLUDE_USERS, new org.apache.thrift.meta_data.FieldMetaData("includeUsers", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.INCLUDE_STATS, new org.apache.thrift.meta_data.FieldMetaData("includeStats", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.INCLUDE_ACTIVITY, new org.apache.thrift.meta_data.FieldMetaData("includeActivity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.INCLUDE_TEMPLATES, new org.apache.thrift.meta_data.FieldMetaData("includeTemplates", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.INCLUDE_CREATOR, new org.apache.thrift.meta_data.FieldMetaData("includeCreator", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.INCLUDE_ROLES, new org.apache.thrift.meta_data.FieldMetaData("includeRoles", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.INCLUDE_PERMISSIONS, new org.apache.thrift.meta_data.FieldMetaData("includePermissions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.INCLUDE_EXEC_SNIPPETS, new org.apache.thrift.meta_data.FieldMetaData("includeExecSnippets", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.INCLUDE_MESSAGES, new org.apache.thrift.meta_data.FieldMetaData("includeMessages", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.INCLUDE_ISSUES, new org.apache.thrift.meta_data.FieldMetaData("includeIssues", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.INCLUDE_DEVIATION_COUNTS, new org.apache.thrift.meta_data.FieldMetaData("includeDeviationCounts", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.INCLUDE_DEVIATIONS, new org.apache.thrift.meta_data.FieldMetaData("includeDeviations", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.INCLUDE_REF_MAP, new org.apache.thrift.meta_data.FieldMetaData("includeRefMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.INCLUDE_PLANNED_DATA_SHEET_IDS, new org.apache.thrift.meta_data.FieldMetaData("includePlannedDataSheetIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.INCLUDE_SNAPSHOTTED_DATA_SHEET_VALUES, new org.apache.thrift.meta_data.FieldMetaData("includeSnapshottedDataSheetValues", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.INCLUDE_ATTRIBUTES, new org.apache.thrift.meta_data.FieldMetaData("includeAttributes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(JobSelectOpts.class, metaDataMap);
  }

  public JobSelectOpts() {
  }

  public JobSelectOpts(
    boolean includeTeam,
    boolean includeTemplate,
    boolean includeRootHeaders,
    boolean includeSteps,
    boolean includeDocuments,
    boolean includeUsers,
    boolean includeStats,
    boolean includeActivity,
    boolean includeTemplates,
    boolean includeCreator,
    boolean includeRoles,
    boolean includePermissions,
    boolean includeExecSnippets,
    boolean includeMessages,
    boolean includeIssues,
    boolean includeDeviationCounts,
    boolean includeDeviations,
    boolean includeRefMap,
    boolean includePlannedDataSheetIds,
    boolean includeSnapshottedDataSheetValues,
    boolean includeAttributes)
  {
    this();
    this.includeTeam = includeTeam;
    setIncludeTeamIsSet(true);
    this.includeTemplate = includeTemplate;
    setIncludeTemplateIsSet(true);
    this.includeRootHeaders = includeRootHeaders;
    setIncludeRootHeadersIsSet(true);
    this.includeSteps = includeSteps;
    setIncludeStepsIsSet(true);
    this.includeDocuments = includeDocuments;
    setIncludeDocumentsIsSet(true);
    this.includeUsers = includeUsers;
    setIncludeUsersIsSet(true);
    this.includeStats = includeStats;
    setIncludeStatsIsSet(true);
    this.includeActivity = includeActivity;
    setIncludeActivityIsSet(true);
    this.includeTemplates = includeTemplates;
    setIncludeTemplatesIsSet(true);
    this.includeCreator = includeCreator;
    setIncludeCreatorIsSet(true);
    this.includeRoles = includeRoles;
    setIncludeRolesIsSet(true);
    this.includePermissions = includePermissions;
    setIncludePermissionsIsSet(true);
    this.includeExecSnippets = includeExecSnippets;
    setIncludeExecSnippetsIsSet(true);
    this.includeMessages = includeMessages;
    setIncludeMessagesIsSet(true);
    this.includeIssues = includeIssues;
    setIncludeIssuesIsSet(true);
    this.includeDeviationCounts = includeDeviationCounts;
    setIncludeDeviationCountsIsSet(true);
    this.includeDeviations = includeDeviations;
    setIncludeDeviationsIsSet(true);
    this.includeRefMap = includeRefMap;
    setIncludeRefMapIsSet(true);
    this.includePlannedDataSheetIds = includePlannedDataSheetIds;
    setIncludePlannedDataSheetIdsIsSet(true);
    this.includeSnapshottedDataSheetValues = includeSnapshottedDataSheetValues;
    setIncludeSnapshottedDataSheetValuesIsSet(true);
    this.includeAttributes = includeAttributes;
    setIncludeAttributesIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public JobSelectOpts(JobSelectOpts other) {
    __isset_bitfield = other.__isset_bitfield;
    this.includeTeam = other.includeTeam;
    this.includeTemplate = other.includeTemplate;
    this.includeRootHeaders = other.includeRootHeaders;
    this.includeSteps = other.includeSteps;
    this.includeDocuments = other.includeDocuments;
    this.includeUsers = other.includeUsers;
    this.includeStats = other.includeStats;
    this.includeActivity = other.includeActivity;
    this.includeTemplates = other.includeTemplates;
    this.includeCreator = other.includeCreator;
    this.includeRoles = other.includeRoles;
    this.includePermissions = other.includePermissions;
    this.includeExecSnippets = other.includeExecSnippets;
    this.includeMessages = other.includeMessages;
    this.includeIssues = other.includeIssues;
    this.includeDeviationCounts = other.includeDeviationCounts;
    this.includeDeviations = other.includeDeviations;
    this.includeRefMap = other.includeRefMap;
    this.includePlannedDataSheetIds = other.includePlannedDataSheetIds;
    this.includeSnapshottedDataSheetValues = other.includeSnapshottedDataSheetValues;
    this.includeAttributes = other.includeAttributes;
  }

  public JobSelectOpts deepCopy() {
    return new JobSelectOpts(this);
  }

  @Override
  public void clear() {
    setIncludeTeamIsSet(false);
    this.includeTeam = false;
    setIncludeTemplateIsSet(false);
    this.includeTemplate = false;
    setIncludeRootHeadersIsSet(false);
    this.includeRootHeaders = false;
    setIncludeStepsIsSet(false);
    this.includeSteps = false;
    setIncludeDocumentsIsSet(false);
    this.includeDocuments = false;
    setIncludeUsersIsSet(false);
    this.includeUsers = false;
    setIncludeStatsIsSet(false);
    this.includeStats = false;
    setIncludeActivityIsSet(false);
    this.includeActivity = false;
    setIncludeTemplatesIsSet(false);
    this.includeTemplates = false;
    setIncludeCreatorIsSet(false);
    this.includeCreator = false;
    setIncludeRolesIsSet(false);
    this.includeRoles = false;
    setIncludePermissionsIsSet(false);
    this.includePermissions = false;
    setIncludeExecSnippetsIsSet(false);
    this.includeExecSnippets = false;
    setIncludeMessagesIsSet(false);
    this.includeMessages = false;
    setIncludeIssuesIsSet(false);
    this.includeIssues = false;
    setIncludeDeviationCountsIsSet(false);
    this.includeDeviationCounts = false;
    setIncludeDeviationsIsSet(false);
    this.includeDeviations = false;
    setIncludeRefMapIsSet(false);
    this.includeRefMap = false;
    setIncludePlannedDataSheetIdsIsSet(false);
    this.includePlannedDataSheetIds = false;
    setIncludeSnapshottedDataSheetValuesIsSet(false);
    this.includeSnapshottedDataSheetValues = false;
    setIncludeAttributesIsSet(false);
    this.includeAttributes = false;
  }

  public boolean isIncludeTeam() {
    return this.includeTeam;
  }

  public JobSelectOpts setIncludeTeam(boolean includeTeam) {
    this.includeTeam = includeTeam;
    setIncludeTeamIsSet(true);
    return this;
  }

  public void unsetIncludeTeam() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INCLUDETEAM_ISSET_ID);
  }

  /** Returns true if field includeTeam is set (has been assigned a value) and false otherwise */
  public boolean isSetIncludeTeam() {
    return EncodingUtils.testBit(__isset_bitfield, __INCLUDETEAM_ISSET_ID);
  }

  public void setIncludeTeamIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INCLUDETEAM_ISSET_ID, value);
  }

  public boolean isIncludeTemplate() {
    return this.includeTemplate;
  }

  public JobSelectOpts setIncludeTemplate(boolean includeTemplate) {
    this.includeTemplate = includeTemplate;
    setIncludeTemplateIsSet(true);
    return this;
  }

  public void unsetIncludeTemplate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INCLUDETEMPLATE_ISSET_ID);
  }

  /** Returns true if field includeTemplate is set (has been assigned a value) and false otherwise */
  public boolean isSetIncludeTemplate() {
    return EncodingUtils.testBit(__isset_bitfield, __INCLUDETEMPLATE_ISSET_ID);
  }

  public void setIncludeTemplateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INCLUDETEMPLATE_ISSET_ID, value);
  }

  public boolean isIncludeRootHeaders() {
    return this.includeRootHeaders;
  }

  public JobSelectOpts setIncludeRootHeaders(boolean includeRootHeaders) {
    this.includeRootHeaders = includeRootHeaders;
    setIncludeRootHeadersIsSet(true);
    return this;
  }

  public void unsetIncludeRootHeaders() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INCLUDEROOTHEADERS_ISSET_ID);
  }

  /** Returns true if field includeRootHeaders is set (has been assigned a value) and false otherwise */
  public boolean isSetIncludeRootHeaders() {
    return EncodingUtils.testBit(__isset_bitfield, __INCLUDEROOTHEADERS_ISSET_ID);
  }

  public void setIncludeRootHeadersIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INCLUDEROOTHEADERS_ISSET_ID, value);
  }

  public boolean isIncludeSteps() {
    return this.includeSteps;
  }

  public JobSelectOpts setIncludeSteps(boolean includeSteps) {
    this.includeSteps = includeSteps;
    setIncludeStepsIsSet(true);
    return this;
  }

  public void unsetIncludeSteps() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INCLUDESTEPS_ISSET_ID);
  }

  /** Returns true if field includeSteps is set (has been assigned a value) and false otherwise */
  public boolean isSetIncludeSteps() {
    return EncodingUtils.testBit(__isset_bitfield, __INCLUDESTEPS_ISSET_ID);
  }

  public void setIncludeStepsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INCLUDESTEPS_ISSET_ID, value);
  }

  public boolean isIncludeDocuments() {
    return this.includeDocuments;
  }

  public JobSelectOpts setIncludeDocuments(boolean includeDocuments) {
    this.includeDocuments = includeDocuments;
    setIncludeDocumentsIsSet(true);
    return this;
  }

  public void unsetIncludeDocuments() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INCLUDEDOCUMENTS_ISSET_ID);
  }

  /** Returns true if field includeDocuments is set (has been assigned a value) and false otherwise */
  public boolean isSetIncludeDocuments() {
    return EncodingUtils.testBit(__isset_bitfield, __INCLUDEDOCUMENTS_ISSET_ID);
  }

  public void setIncludeDocumentsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INCLUDEDOCUMENTS_ISSET_ID, value);
  }

  public boolean isIncludeUsers() {
    return this.includeUsers;
  }

  public JobSelectOpts setIncludeUsers(boolean includeUsers) {
    this.includeUsers = includeUsers;
    setIncludeUsersIsSet(true);
    return this;
  }

  public void unsetIncludeUsers() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INCLUDEUSERS_ISSET_ID);
  }

  /** Returns true if field includeUsers is set (has been assigned a value) and false otherwise */
  public boolean isSetIncludeUsers() {
    return EncodingUtils.testBit(__isset_bitfield, __INCLUDEUSERS_ISSET_ID);
  }

  public void setIncludeUsersIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INCLUDEUSERS_ISSET_ID, value);
  }

  public boolean isIncludeStats() {
    return this.includeStats;
  }

  public JobSelectOpts setIncludeStats(boolean includeStats) {
    this.includeStats = includeStats;
    setIncludeStatsIsSet(true);
    return this;
  }

  public void unsetIncludeStats() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INCLUDESTATS_ISSET_ID);
  }

  /** Returns true if field includeStats is set (has been assigned a value) and false otherwise */
  public boolean isSetIncludeStats() {
    return EncodingUtils.testBit(__isset_bitfield, __INCLUDESTATS_ISSET_ID);
  }

  public void setIncludeStatsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INCLUDESTATS_ISSET_ID, value);
  }

  public boolean isIncludeActivity() {
    return this.includeActivity;
  }

  public JobSelectOpts setIncludeActivity(boolean includeActivity) {
    this.includeActivity = includeActivity;
    setIncludeActivityIsSet(true);
    return this;
  }

  public void unsetIncludeActivity() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INCLUDEACTIVITY_ISSET_ID);
  }

  /** Returns true if field includeActivity is set (has been assigned a value) and false otherwise */
  public boolean isSetIncludeActivity() {
    return EncodingUtils.testBit(__isset_bitfield, __INCLUDEACTIVITY_ISSET_ID);
  }

  public void setIncludeActivityIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INCLUDEACTIVITY_ISSET_ID, value);
  }

  public boolean isIncludeTemplates() {
    return this.includeTemplates;
  }

  public JobSelectOpts setIncludeTemplates(boolean includeTemplates) {
    this.includeTemplates = includeTemplates;
    setIncludeTemplatesIsSet(true);
    return this;
  }

  public void unsetIncludeTemplates() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INCLUDETEMPLATES_ISSET_ID);
  }

  /** Returns true if field includeTemplates is set (has been assigned a value) and false otherwise */
  public boolean isSetIncludeTemplates() {
    return EncodingUtils.testBit(__isset_bitfield, __INCLUDETEMPLATES_ISSET_ID);
  }

  public void setIncludeTemplatesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INCLUDETEMPLATES_ISSET_ID, value);
  }

  public boolean isIncludeCreator() {
    return this.includeCreator;
  }

  public JobSelectOpts setIncludeCreator(boolean includeCreator) {
    this.includeCreator = includeCreator;
    setIncludeCreatorIsSet(true);
    return this;
  }

  public void unsetIncludeCreator() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INCLUDECREATOR_ISSET_ID);
  }

  /** Returns true if field includeCreator is set (has been assigned a value) and false otherwise */
  public boolean isSetIncludeCreator() {
    return EncodingUtils.testBit(__isset_bitfield, __INCLUDECREATOR_ISSET_ID);
  }

  public void setIncludeCreatorIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INCLUDECREATOR_ISSET_ID, value);
  }

  public boolean isIncludeRoles() {
    return this.includeRoles;
  }

  public JobSelectOpts setIncludeRoles(boolean includeRoles) {
    this.includeRoles = includeRoles;
    setIncludeRolesIsSet(true);
    return this;
  }

  public void unsetIncludeRoles() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INCLUDEROLES_ISSET_ID);
  }

  /** Returns true if field includeRoles is set (has been assigned a value) and false otherwise */
  public boolean isSetIncludeRoles() {
    return EncodingUtils.testBit(__isset_bitfield, __INCLUDEROLES_ISSET_ID);
  }

  public void setIncludeRolesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INCLUDEROLES_ISSET_ID, value);
  }

  public boolean isIncludePermissions() {
    return this.includePermissions;
  }

  public JobSelectOpts setIncludePermissions(boolean includePermissions) {
    this.includePermissions = includePermissions;
    setIncludePermissionsIsSet(true);
    return this;
  }

  public void unsetIncludePermissions() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INCLUDEPERMISSIONS_ISSET_ID);
  }

  /** Returns true if field includePermissions is set (has been assigned a value) and false otherwise */
  public boolean isSetIncludePermissions() {
    return EncodingUtils.testBit(__isset_bitfield, __INCLUDEPERMISSIONS_ISSET_ID);
  }

  public void setIncludePermissionsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INCLUDEPERMISSIONS_ISSET_ID, value);
  }

  public boolean isIncludeExecSnippets() {
    return this.includeExecSnippets;
  }

  public JobSelectOpts setIncludeExecSnippets(boolean includeExecSnippets) {
    this.includeExecSnippets = includeExecSnippets;
    setIncludeExecSnippetsIsSet(true);
    return this;
  }

  public void unsetIncludeExecSnippets() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INCLUDEEXECSNIPPETS_ISSET_ID);
  }

  /** Returns true if field includeExecSnippets is set (has been assigned a value) and false otherwise */
  public boolean isSetIncludeExecSnippets() {
    return EncodingUtils.testBit(__isset_bitfield, __INCLUDEEXECSNIPPETS_ISSET_ID);
  }

  public void setIncludeExecSnippetsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INCLUDEEXECSNIPPETS_ISSET_ID, value);
  }

  public boolean isIncludeMessages() {
    return this.includeMessages;
  }

  public JobSelectOpts setIncludeMessages(boolean includeMessages) {
    this.includeMessages = includeMessages;
    setIncludeMessagesIsSet(true);
    return this;
  }

  public void unsetIncludeMessages() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INCLUDEMESSAGES_ISSET_ID);
  }

  /** Returns true if field includeMessages is set (has been assigned a value) and false otherwise */
  public boolean isSetIncludeMessages() {
    return EncodingUtils.testBit(__isset_bitfield, __INCLUDEMESSAGES_ISSET_ID);
  }

  public void setIncludeMessagesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INCLUDEMESSAGES_ISSET_ID, value);
  }

  public boolean isIncludeIssues() {
    return this.includeIssues;
  }

  public JobSelectOpts setIncludeIssues(boolean includeIssues) {
    this.includeIssues = includeIssues;
    setIncludeIssuesIsSet(true);
    return this;
  }

  public void unsetIncludeIssues() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INCLUDEISSUES_ISSET_ID);
  }

  /** Returns true if field includeIssues is set (has been assigned a value) and false otherwise */
  public boolean isSetIncludeIssues() {
    return EncodingUtils.testBit(__isset_bitfield, __INCLUDEISSUES_ISSET_ID);
  }

  public void setIncludeIssuesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INCLUDEISSUES_ISSET_ID, value);
  }

  public boolean isIncludeDeviationCounts() {
    return this.includeDeviationCounts;
  }

  public JobSelectOpts setIncludeDeviationCounts(boolean includeDeviationCounts) {
    this.includeDeviationCounts = includeDeviationCounts;
    setIncludeDeviationCountsIsSet(true);
    return this;
  }

  public void unsetIncludeDeviationCounts() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INCLUDEDEVIATIONCOUNTS_ISSET_ID);
  }

  /** Returns true if field includeDeviationCounts is set (has been assigned a value) and false otherwise */
  public boolean isSetIncludeDeviationCounts() {
    return EncodingUtils.testBit(__isset_bitfield, __INCLUDEDEVIATIONCOUNTS_ISSET_ID);
  }

  public void setIncludeDeviationCountsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INCLUDEDEVIATIONCOUNTS_ISSET_ID, value);
  }

  public boolean isIncludeDeviations() {
    return this.includeDeviations;
  }

  public JobSelectOpts setIncludeDeviations(boolean includeDeviations) {
    this.includeDeviations = includeDeviations;
    setIncludeDeviationsIsSet(true);
    return this;
  }

  public void unsetIncludeDeviations() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INCLUDEDEVIATIONS_ISSET_ID);
  }

  /** Returns true if field includeDeviations is set (has been assigned a value) and false otherwise */
  public boolean isSetIncludeDeviations() {
    return EncodingUtils.testBit(__isset_bitfield, __INCLUDEDEVIATIONS_ISSET_ID);
  }

  public void setIncludeDeviationsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INCLUDEDEVIATIONS_ISSET_ID, value);
  }

  public boolean isIncludeRefMap() {
    return this.includeRefMap;
  }

  public JobSelectOpts setIncludeRefMap(boolean includeRefMap) {
    this.includeRefMap = includeRefMap;
    setIncludeRefMapIsSet(true);
    return this;
  }

  public void unsetIncludeRefMap() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INCLUDEREFMAP_ISSET_ID);
  }

  /** Returns true if field includeRefMap is set (has been assigned a value) and false otherwise */
  public boolean isSetIncludeRefMap() {
    return EncodingUtils.testBit(__isset_bitfield, __INCLUDEREFMAP_ISSET_ID);
  }

  public void setIncludeRefMapIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INCLUDEREFMAP_ISSET_ID, value);
  }

  public boolean isIncludePlannedDataSheetIds() {
    return this.includePlannedDataSheetIds;
  }

  public JobSelectOpts setIncludePlannedDataSheetIds(boolean includePlannedDataSheetIds) {
    this.includePlannedDataSheetIds = includePlannedDataSheetIds;
    setIncludePlannedDataSheetIdsIsSet(true);
    return this;
  }

  public void unsetIncludePlannedDataSheetIds() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INCLUDEPLANNEDDATASHEETIDS_ISSET_ID);
  }

  /** Returns true if field includePlannedDataSheetIds is set (has been assigned a value) and false otherwise */
  public boolean isSetIncludePlannedDataSheetIds() {
    return EncodingUtils.testBit(__isset_bitfield, __INCLUDEPLANNEDDATASHEETIDS_ISSET_ID);
  }

  public void setIncludePlannedDataSheetIdsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INCLUDEPLANNEDDATASHEETIDS_ISSET_ID, value);
  }

  public boolean isIncludeSnapshottedDataSheetValues() {
    return this.includeSnapshottedDataSheetValues;
  }

  public JobSelectOpts setIncludeSnapshottedDataSheetValues(boolean includeSnapshottedDataSheetValues) {
    this.includeSnapshottedDataSheetValues = includeSnapshottedDataSheetValues;
    setIncludeSnapshottedDataSheetValuesIsSet(true);
    return this;
  }

  public void unsetIncludeSnapshottedDataSheetValues() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INCLUDESNAPSHOTTEDDATASHEETVALUES_ISSET_ID);
  }

  /** Returns true if field includeSnapshottedDataSheetValues is set (has been assigned a value) and false otherwise */
  public boolean isSetIncludeSnapshottedDataSheetValues() {
    return EncodingUtils.testBit(__isset_bitfield, __INCLUDESNAPSHOTTEDDATASHEETVALUES_ISSET_ID);
  }

  public void setIncludeSnapshottedDataSheetValuesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INCLUDESNAPSHOTTEDDATASHEETVALUES_ISSET_ID, value);
  }

  public boolean isIncludeAttributes() {
    return this.includeAttributes;
  }

  public JobSelectOpts setIncludeAttributes(boolean includeAttributes) {
    this.includeAttributes = includeAttributes;
    setIncludeAttributesIsSet(true);
    return this;
  }

  public void unsetIncludeAttributes() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INCLUDEATTRIBUTES_ISSET_ID);
  }

  /** Returns true if field includeAttributes is set (has been assigned a value) and false otherwise */
  public boolean isSetIncludeAttributes() {
    return EncodingUtils.testBit(__isset_bitfield, __INCLUDEATTRIBUTES_ISSET_ID);
  }

  public void setIncludeAttributesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INCLUDEATTRIBUTES_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case INCLUDE_TEAM:
      if (value == null) {
        unsetIncludeTeam();
      } else {
        setIncludeTeam((Boolean)value);
      }
      break;

    case INCLUDE_TEMPLATE:
      if (value == null) {
        unsetIncludeTemplate();
      } else {
        setIncludeTemplate((Boolean)value);
      }
      break;

    case INCLUDE_ROOT_HEADERS:
      if (value == null) {
        unsetIncludeRootHeaders();
      } else {
        setIncludeRootHeaders((Boolean)value);
      }
      break;

    case INCLUDE_STEPS:
      if (value == null) {
        unsetIncludeSteps();
      } else {
        setIncludeSteps((Boolean)value);
      }
      break;

    case INCLUDE_DOCUMENTS:
      if (value == null) {
        unsetIncludeDocuments();
      } else {
        setIncludeDocuments((Boolean)value);
      }
      break;

    case INCLUDE_USERS:
      if (value == null) {
        unsetIncludeUsers();
      } else {
        setIncludeUsers((Boolean)value);
      }
      break;

    case INCLUDE_STATS:
      if (value == null) {
        unsetIncludeStats();
      } else {
        setIncludeStats((Boolean)value);
      }
      break;

    case INCLUDE_ACTIVITY:
      if (value == null) {
        unsetIncludeActivity();
      } else {
        setIncludeActivity((Boolean)value);
      }
      break;

    case INCLUDE_TEMPLATES:
      if (value == null) {
        unsetIncludeTemplates();
      } else {
        setIncludeTemplates((Boolean)value);
      }
      break;

    case INCLUDE_CREATOR:
      if (value == null) {
        unsetIncludeCreator();
      } else {
        setIncludeCreator((Boolean)value);
      }
      break;

    case INCLUDE_ROLES:
      if (value == null) {
        unsetIncludeRoles();
      } else {
        setIncludeRoles((Boolean)value);
      }
      break;

    case INCLUDE_PERMISSIONS:
      if (value == null) {
        unsetIncludePermissions();
      } else {
        setIncludePermissions((Boolean)value);
      }
      break;

    case INCLUDE_EXEC_SNIPPETS:
      if (value == null) {
        unsetIncludeExecSnippets();
      } else {
        setIncludeExecSnippets((Boolean)value);
      }
      break;

    case INCLUDE_MESSAGES:
      if (value == null) {
        unsetIncludeMessages();
      } else {
        setIncludeMessages((Boolean)value);
      }
      break;

    case INCLUDE_ISSUES:
      if (value == null) {
        unsetIncludeIssues();
      } else {
        setIncludeIssues((Boolean)value);
      }
      break;

    case INCLUDE_DEVIATION_COUNTS:
      if (value == null) {
        unsetIncludeDeviationCounts();
      } else {
        setIncludeDeviationCounts((Boolean)value);
      }
      break;

    case INCLUDE_DEVIATIONS:
      if (value == null) {
        unsetIncludeDeviations();
      } else {
        setIncludeDeviations((Boolean)value);
      }
      break;

    case INCLUDE_REF_MAP:
      if (value == null) {
        unsetIncludeRefMap();
      } else {
        setIncludeRefMap((Boolean)value);
      }
      break;

    case INCLUDE_PLANNED_DATA_SHEET_IDS:
      if (value == null) {
        unsetIncludePlannedDataSheetIds();
      } else {
        setIncludePlannedDataSheetIds((Boolean)value);
      }
      break;

    case INCLUDE_SNAPSHOTTED_DATA_SHEET_VALUES:
      if (value == null) {
        unsetIncludeSnapshottedDataSheetValues();
      } else {
        setIncludeSnapshottedDataSheetValues((Boolean)value);
      }
      break;

    case INCLUDE_ATTRIBUTES:
      if (value == null) {
        unsetIncludeAttributes();
      } else {
        setIncludeAttributes((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case INCLUDE_TEAM:
      return isIncludeTeam();

    case INCLUDE_TEMPLATE:
      return isIncludeTemplate();

    case INCLUDE_ROOT_HEADERS:
      return isIncludeRootHeaders();

    case INCLUDE_STEPS:
      return isIncludeSteps();

    case INCLUDE_DOCUMENTS:
      return isIncludeDocuments();

    case INCLUDE_USERS:
      return isIncludeUsers();

    case INCLUDE_STATS:
      return isIncludeStats();

    case INCLUDE_ACTIVITY:
      return isIncludeActivity();

    case INCLUDE_TEMPLATES:
      return isIncludeTemplates();

    case INCLUDE_CREATOR:
      return isIncludeCreator();

    case INCLUDE_ROLES:
      return isIncludeRoles();

    case INCLUDE_PERMISSIONS:
      return isIncludePermissions();

    case INCLUDE_EXEC_SNIPPETS:
      return isIncludeExecSnippets();

    case INCLUDE_MESSAGES:
      return isIncludeMessages();

    case INCLUDE_ISSUES:
      return isIncludeIssues();

    case INCLUDE_DEVIATION_COUNTS:
      return isIncludeDeviationCounts();

    case INCLUDE_DEVIATIONS:
      return isIncludeDeviations();

    case INCLUDE_REF_MAP:
      return isIncludeRefMap();

    case INCLUDE_PLANNED_DATA_SHEET_IDS:
      return isIncludePlannedDataSheetIds();

    case INCLUDE_SNAPSHOTTED_DATA_SHEET_VALUES:
      return isIncludeSnapshottedDataSheetValues();

    case INCLUDE_ATTRIBUTES:
      return isIncludeAttributes();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case INCLUDE_TEAM:
      return isSetIncludeTeam();
    case INCLUDE_TEMPLATE:
      return isSetIncludeTemplate();
    case INCLUDE_ROOT_HEADERS:
      return isSetIncludeRootHeaders();
    case INCLUDE_STEPS:
      return isSetIncludeSteps();
    case INCLUDE_DOCUMENTS:
      return isSetIncludeDocuments();
    case INCLUDE_USERS:
      return isSetIncludeUsers();
    case INCLUDE_STATS:
      return isSetIncludeStats();
    case INCLUDE_ACTIVITY:
      return isSetIncludeActivity();
    case INCLUDE_TEMPLATES:
      return isSetIncludeTemplates();
    case INCLUDE_CREATOR:
      return isSetIncludeCreator();
    case INCLUDE_ROLES:
      return isSetIncludeRoles();
    case INCLUDE_PERMISSIONS:
      return isSetIncludePermissions();
    case INCLUDE_EXEC_SNIPPETS:
      return isSetIncludeExecSnippets();
    case INCLUDE_MESSAGES:
      return isSetIncludeMessages();
    case INCLUDE_ISSUES:
      return isSetIncludeIssues();
    case INCLUDE_DEVIATION_COUNTS:
      return isSetIncludeDeviationCounts();
    case INCLUDE_DEVIATIONS:
      return isSetIncludeDeviations();
    case INCLUDE_REF_MAP:
      return isSetIncludeRefMap();
    case INCLUDE_PLANNED_DATA_SHEET_IDS:
      return isSetIncludePlannedDataSheetIds();
    case INCLUDE_SNAPSHOTTED_DATA_SHEET_VALUES:
      return isSetIncludeSnapshottedDataSheetValues();
    case INCLUDE_ATTRIBUTES:
      return isSetIncludeAttributes();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof JobSelectOpts)
      return this.equals((JobSelectOpts)that);
    return false;
  }

  public boolean equals(JobSelectOpts that) {
    if (that == null)
      return false;

    boolean this_present_includeTeam = true;
    boolean that_present_includeTeam = true;
    if (this_present_includeTeam || that_present_includeTeam) {
      if (!(this_present_includeTeam && that_present_includeTeam))
        return false;
      if (this.includeTeam != that.includeTeam)
        return false;
    }

    boolean this_present_includeTemplate = true;
    boolean that_present_includeTemplate = true;
    if (this_present_includeTemplate || that_present_includeTemplate) {
      if (!(this_present_includeTemplate && that_present_includeTemplate))
        return false;
      if (this.includeTemplate != that.includeTemplate)
        return false;
    }

    boolean this_present_includeRootHeaders = true;
    boolean that_present_includeRootHeaders = true;
    if (this_present_includeRootHeaders || that_present_includeRootHeaders) {
      if (!(this_present_includeRootHeaders && that_present_includeRootHeaders))
        return false;
      if (this.includeRootHeaders != that.includeRootHeaders)
        return false;
    }

    boolean this_present_includeSteps = true;
    boolean that_present_includeSteps = true;
    if (this_present_includeSteps || that_present_includeSteps) {
      if (!(this_present_includeSteps && that_present_includeSteps))
        return false;
      if (this.includeSteps != that.includeSteps)
        return false;
    }

    boolean this_present_includeDocuments = true;
    boolean that_present_includeDocuments = true;
    if (this_present_includeDocuments || that_present_includeDocuments) {
      if (!(this_present_includeDocuments && that_present_includeDocuments))
        return false;
      if (this.includeDocuments != that.includeDocuments)
        return false;
    }

    boolean this_present_includeUsers = true;
    boolean that_present_includeUsers = true;
    if (this_present_includeUsers || that_present_includeUsers) {
      if (!(this_present_includeUsers && that_present_includeUsers))
        return false;
      if (this.includeUsers != that.includeUsers)
        return false;
    }

    boolean this_present_includeStats = true;
    boolean that_present_includeStats = true;
    if (this_present_includeStats || that_present_includeStats) {
      if (!(this_present_includeStats && that_present_includeStats))
        return false;
      if (this.includeStats != that.includeStats)
        return false;
    }

    boolean this_present_includeActivity = true;
    boolean that_present_includeActivity = true;
    if (this_present_includeActivity || that_present_includeActivity) {
      if (!(this_present_includeActivity && that_present_includeActivity))
        return false;
      if (this.includeActivity != that.includeActivity)
        return false;
    }

    boolean this_present_includeTemplates = true;
    boolean that_present_includeTemplates = true;
    if (this_present_includeTemplates || that_present_includeTemplates) {
      if (!(this_present_includeTemplates && that_present_includeTemplates))
        return false;
      if (this.includeTemplates != that.includeTemplates)
        return false;
    }

    boolean this_present_includeCreator = true;
    boolean that_present_includeCreator = true;
    if (this_present_includeCreator || that_present_includeCreator) {
      if (!(this_present_includeCreator && that_present_includeCreator))
        return false;
      if (this.includeCreator != that.includeCreator)
        return false;
    }

    boolean this_present_includeRoles = true;
    boolean that_present_includeRoles = true;
    if (this_present_includeRoles || that_present_includeRoles) {
      if (!(this_present_includeRoles && that_present_includeRoles))
        return false;
      if (this.includeRoles != that.includeRoles)
        return false;
    }

    boolean this_present_includePermissions = true;
    boolean that_present_includePermissions = true;
    if (this_present_includePermissions || that_present_includePermissions) {
      if (!(this_present_includePermissions && that_present_includePermissions))
        return false;
      if (this.includePermissions != that.includePermissions)
        return false;
    }

    boolean this_present_includeExecSnippets = true;
    boolean that_present_includeExecSnippets = true;
    if (this_present_includeExecSnippets || that_present_includeExecSnippets) {
      if (!(this_present_includeExecSnippets && that_present_includeExecSnippets))
        return false;
      if (this.includeExecSnippets != that.includeExecSnippets)
        return false;
    }

    boolean this_present_includeMessages = true;
    boolean that_present_includeMessages = true;
    if (this_present_includeMessages || that_present_includeMessages) {
      if (!(this_present_includeMessages && that_present_includeMessages))
        return false;
      if (this.includeMessages != that.includeMessages)
        return false;
    }

    boolean this_present_includeIssues = true;
    boolean that_present_includeIssues = true;
    if (this_present_includeIssues || that_present_includeIssues) {
      if (!(this_present_includeIssues && that_present_includeIssues))
        return false;
      if (this.includeIssues != that.includeIssues)
        return false;
    }

    boolean this_present_includeDeviationCounts = true;
    boolean that_present_includeDeviationCounts = true;
    if (this_present_includeDeviationCounts || that_present_includeDeviationCounts) {
      if (!(this_present_includeDeviationCounts && that_present_includeDeviationCounts))
        return false;
      if (this.includeDeviationCounts != that.includeDeviationCounts)
        return false;
    }

    boolean this_present_includeDeviations = true;
    boolean that_present_includeDeviations = true;
    if (this_present_includeDeviations || that_present_includeDeviations) {
      if (!(this_present_includeDeviations && that_present_includeDeviations))
        return false;
      if (this.includeDeviations != that.includeDeviations)
        return false;
    }

    boolean this_present_includeRefMap = true;
    boolean that_present_includeRefMap = true;
    if (this_present_includeRefMap || that_present_includeRefMap) {
      if (!(this_present_includeRefMap && that_present_includeRefMap))
        return false;
      if (this.includeRefMap != that.includeRefMap)
        return false;
    }

    boolean this_present_includePlannedDataSheetIds = true;
    boolean that_present_includePlannedDataSheetIds = true;
    if (this_present_includePlannedDataSheetIds || that_present_includePlannedDataSheetIds) {
      if (!(this_present_includePlannedDataSheetIds && that_present_includePlannedDataSheetIds))
        return false;
      if (this.includePlannedDataSheetIds != that.includePlannedDataSheetIds)
        return false;
    }

    boolean this_present_includeSnapshottedDataSheetValues = true;
    boolean that_present_includeSnapshottedDataSheetValues = true;
    if (this_present_includeSnapshottedDataSheetValues || that_present_includeSnapshottedDataSheetValues) {
      if (!(this_present_includeSnapshottedDataSheetValues && that_present_includeSnapshottedDataSheetValues))
        return false;
      if (this.includeSnapshottedDataSheetValues != that.includeSnapshottedDataSheetValues)
        return false;
    }

    boolean this_present_includeAttributes = true;
    boolean that_present_includeAttributes = true;
    if (this_present_includeAttributes || that_present_includeAttributes) {
      if (!(this_present_includeAttributes && that_present_includeAttributes))
        return false;
      if (this.includeAttributes != that.includeAttributes)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_includeTeam = true;
    list.add(present_includeTeam);
    if (present_includeTeam)
      list.add(includeTeam);

    boolean present_includeTemplate = true;
    list.add(present_includeTemplate);
    if (present_includeTemplate)
      list.add(includeTemplate);

    boolean present_includeRootHeaders = true;
    list.add(present_includeRootHeaders);
    if (present_includeRootHeaders)
      list.add(includeRootHeaders);

    boolean present_includeSteps = true;
    list.add(present_includeSteps);
    if (present_includeSteps)
      list.add(includeSteps);

    boolean present_includeDocuments = true;
    list.add(present_includeDocuments);
    if (present_includeDocuments)
      list.add(includeDocuments);

    boolean present_includeUsers = true;
    list.add(present_includeUsers);
    if (present_includeUsers)
      list.add(includeUsers);

    boolean present_includeStats = true;
    list.add(present_includeStats);
    if (present_includeStats)
      list.add(includeStats);

    boolean present_includeActivity = true;
    list.add(present_includeActivity);
    if (present_includeActivity)
      list.add(includeActivity);

    boolean present_includeTemplates = true;
    list.add(present_includeTemplates);
    if (present_includeTemplates)
      list.add(includeTemplates);

    boolean present_includeCreator = true;
    list.add(present_includeCreator);
    if (present_includeCreator)
      list.add(includeCreator);

    boolean present_includeRoles = true;
    list.add(present_includeRoles);
    if (present_includeRoles)
      list.add(includeRoles);

    boolean present_includePermissions = true;
    list.add(present_includePermissions);
    if (present_includePermissions)
      list.add(includePermissions);

    boolean present_includeExecSnippets = true;
    list.add(present_includeExecSnippets);
    if (present_includeExecSnippets)
      list.add(includeExecSnippets);

    boolean present_includeMessages = true;
    list.add(present_includeMessages);
    if (present_includeMessages)
      list.add(includeMessages);

    boolean present_includeIssues = true;
    list.add(present_includeIssues);
    if (present_includeIssues)
      list.add(includeIssues);

    boolean present_includeDeviationCounts = true;
    list.add(present_includeDeviationCounts);
    if (present_includeDeviationCounts)
      list.add(includeDeviationCounts);

    boolean present_includeDeviations = true;
    list.add(present_includeDeviations);
    if (present_includeDeviations)
      list.add(includeDeviations);

    boolean present_includeRefMap = true;
    list.add(present_includeRefMap);
    if (present_includeRefMap)
      list.add(includeRefMap);

    boolean present_includePlannedDataSheetIds = true;
    list.add(present_includePlannedDataSheetIds);
    if (present_includePlannedDataSheetIds)
      list.add(includePlannedDataSheetIds);

    boolean present_includeSnapshottedDataSheetValues = true;
    list.add(present_includeSnapshottedDataSheetValues);
    if (present_includeSnapshottedDataSheetValues)
      list.add(includeSnapshottedDataSheetValues);

    boolean present_includeAttributes = true;
    list.add(present_includeAttributes);
    if (present_includeAttributes)
      list.add(includeAttributes);

    return list.hashCode();
  }

  @Override
  public int compareTo(JobSelectOpts other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetIncludeTeam()).compareTo(other.isSetIncludeTeam());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIncludeTeam()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.includeTeam, other.includeTeam);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIncludeTemplate()).compareTo(other.isSetIncludeTemplate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIncludeTemplate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.includeTemplate, other.includeTemplate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIncludeRootHeaders()).compareTo(other.isSetIncludeRootHeaders());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIncludeRootHeaders()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.includeRootHeaders, other.includeRootHeaders);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIncludeSteps()).compareTo(other.isSetIncludeSteps());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIncludeSteps()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.includeSteps, other.includeSteps);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIncludeDocuments()).compareTo(other.isSetIncludeDocuments());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIncludeDocuments()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.includeDocuments, other.includeDocuments);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIncludeUsers()).compareTo(other.isSetIncludeUsers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIncludeUsers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.includeUsers, other.includeUsers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIncludeStats()).compareTo(other.isSetIncludeStats());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIncludeStats()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.includeStats, other.includeStats);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIncludeActivity()).compareTo(other.isSetIncludeActivity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIncludeActivity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.includeActivity, other.includeActivity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIncludeTemplates()).compareTo(other.isSetIncludeTemplates());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIncludeTemplates()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.includeTemplates, other.includeTemplates);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIncludeCreator()).compareTo(other.isSetIncludeCreator());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIncludeCreator()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.includeCreator, other.includeCreator);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIncludeRoles()).compareTo(other.isSetIncludeRoles());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIncludeRoles()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.includeRoles, other.includeRoles);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIncludePermissions()).compareTo(other.isSetIncludePermissions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIncludePermissions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.includePermissions, other.includePermissions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIncludeExecSnippets()).compareTo(other.isSetIncludeExecSnippets());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIncludeExecSnippets()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.includeExecSnippets, other.includeExecSnippets);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIncludeMessages()).compareTo(other.isSetIncludeMessages());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIncludeMessages()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.includeMessages, other.includeMessages);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIncludeIssues()).compareTo(other.isSetIncludeIssues());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIncludeIssues()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.includeIssues, other.includeIssues);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIncludeDeviationCounts()).compareTo(other.isSetIncludeDeviationCounts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIncludeDeviationCounts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.includeDeviationCounts, other.includeDeviationCounts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIncludeDeviations()).compareTo(other.isSetIncludeDeviations());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIncludeDeviations()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.includeDeviations, other.includeDeviations);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIncludeRefMap()).compareTo(other.isSetIncludeRefMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIncludeRefMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.includeRefMap, other.includeRefMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIncludePlannedDataSheetIds()).compareTo(other.isSetIncludePlannedDataSheetIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIncludePlannedDataSheetIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.includePlannedDataSheetIds, other.includePlannedDataSheetIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIncludeSnapshottedDataSheetValues()).compareTo(other.isSetIncludeSnapshottedDataSheetValues());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIncludeSnapshottedDataSheetValues()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.includeSnapshottedDataSheetValues, other.includeSnapshottedDataSheetValues);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIncludeAttributes()).compareTo(other.isSetIncludeAttributes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIncludeAttributes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.includeAttributes, other.includeAttributes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("JobSelectOpts(");
    boolean first = true;

    sb.append("includeTeam:");
    sb.append(this.includeTeam);
    first = false;
    if (!first) sb.append(", ");
    sb.append("includeTemplate:");
    sb.append(this.includeTemplate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("includeRootHeaders:");
    sb.append(this.includeRootHeaders);
    first = false;
    if (!first) sb.append(", ");
    sb.append("includeSteps:");
    sb.append(this.includeSteps);
    first = false;
    if (!first) sb.append(", ");
    sb.append("includeDocuments:");
    sb.append(this.includeDocuments);
    first = false;
    if (!first) sb.append(", ");
    sb.append("includeUsers:");
    sb.append(this.includeUsers);
    first = false;
    if (!first) sb.append(", ");
    sb.append("includeStats:");
    sb.append(this.includeStats);
    first = false;
    if (!first) sb.append(", ");
    sb.append("includeActivity:");
    sb.append(this.includeActivity);
    first = false;
    if (!first) sb.append(", ");
    sb.append("includeTemplates:");
    sb.append(this.includeTemplates);
    first = false;
    if (!first) sb.append(", ");
    sb.append("includeCreator:");
    sb.append(this.includeCreator);
    first = false;
    if (!first) sb.append(", ");
    sb.append("includeRoles:");
    sb.append(this.includeRoles);
    first = false;
    if (!first) sb.append(", ");
    sb.append("includePermissions:");
    sb.append(this.includePermissions);
    first = false;
    if (!first) sb.append(", ");
    sb.append("includeExecSnippets:");
    sb.append(this.includeExecSnippets);
    first = false;
    if (!first) sb.append(", ");
    sb.append("includeMessages:");
    sb.append(this.includeMessages);
    first = false;
    if (!first) sb.append(", ");
    sb.append("includeIssues:");
    sb.append(this.includeIssues);
    first = false;
    if (!first) sb.append(", ");
    sb.append("includeDeviationCounts:");
    sb.append(this.includeDeviationCounts);
    first = false;
    if (!first) sb.append(", ");
    sb.append("includeDeviations:");
    sb.append(this.includeDeviations);
    first = false;
    if (!first) sb.append(", ");
    sb.append("includeRefMap:");
    sb.append(this.includeRefMap);
    first = false;
    if (!first) sb.append(", ");
    sb.append("includePlannedDataSheetIds:");
    sb.append(this.includePlannedDataSheetIds);
    first = false;
    if (!first) sb.append(", ");
    sb.append("includeSnapshottedDataSheetValues:");
    sb.append(this.includeSnapshottedDataSheetValues);
    first = false;
    if (!first) sb.append(", ");
    sb.append("includeAttributes:");
    sb.append(this.includeAttributes);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class JobSelectOptsStandardSchemeFactory implements SchemeFactory {
    public JobSelectOptsStandardScheme getScheme() {
      return new JobSelectOptsStandardScheme();
    }
  }

  private static class JobSelectOptsStandardScheme extends StandardScheme<JobSelectOpts> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, JobSelectOpts struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // INCLUDE_TEAM
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.includeTeam = iprot.readBool();
              struct.setIncludeTeamIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // INCLUDE_TEMPLATE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.includeTemplate = iprot.readBool();
              struct.setIncludeTemplateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // INCLUDE_ROOT_HEADERS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.includeRootHeaders = iprot.readBool();
              struct.setIncludeRootHeadersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // INCLUDE_STEPS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.includeSteps = iprot.readBool();
              struct.setIncludeStepsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // INCLUDE_DOCUMENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.includeDocuments = iprot.readBool();
              struct.setIncludeDocumentsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // INCLUDE_USERS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.includeUsers = iprot.readBool();
              struct.setIncludeUsersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // INCLUDE_STATS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.includeStats = iprot.readBool();
              struct.setIncludeStatsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // INCLUDE_ACTIVITY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.includeActivity = iprot.readBool();
              struct.setIncludeActivityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // INCLUDE_TEMPLATES
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.includeTemplates = iprot.readBool();
              struct.setIncludeTemplatesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // INCLUDE_CREATOR
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.includeCreator = iprot.readBool();
              struct.setIncludeCreatorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // INCLUDE_ROLES
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.includeRoles = iprot.readBool();
              struct.setIncludeRolesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // INCLUDE_PERMISSIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.includePermissions = iprot.readBool();
              struct.setIncludePermissionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // INCLUDE_EXEC_SNIPPETS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.includeExecSnippets = iprot.readBool();
              struct.setIncludeExecSnippetsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // INCLUDE_MESSAGES
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.includeMessages = iprot.readBool();
              struct.setIncludeMessagesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // INCLUDE_ISSUES
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.includeIssues = iprot.readBool();
              struct.setIncludeIssuesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // INCLUDE_DEVIATION_COUNTS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.includeDeviationCounts = iprot.readBool();
              struct.setIncludeDeviationCountsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // INCLUDE_DEVIATIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.includeDeviations = iprot.readBool();
              struct.setIncludeDeviationsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // INCLUDE_REF_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.includeRefMap = iprot.readBool();
              struct.setIncludeRefMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // INCLUDE_PLANNED_DATA_SHEET_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.includePlannedDataSheetIds = iprot.readBool();
              struct.setIncludePlannedDataSheetIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // INCLUDE_SNAPSHOTTED_DATA_SHEET_VALUES
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.includeSnapshottedDataSheetValues = iprot.readBool();
              struct.setIncludeSnapshottedDataSheetValuesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // INCLUDE_ATTRIBUTES
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.includeAttributes = iprot.readBool();
              struct.setIncludeAttributesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, JobSelectOpts struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(INCLUDE_TEAM_FIELD_DESC);
      oprot.writeBool(struct.includeTeam);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INCLUDE_TEMPLATE_FIELD_DESC);
      oprot.writeBool(struct.includeTemplate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INCLUDE_ROOT_HEADERS_FIELD_DESC);
      oprot.writeBool(struct.includeRootHeaders);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INCLUDE_STEPS_FIELD_DESC);
      oprot.writeBool(struct.includeSteps);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INCLUDE_DOCUMENTS_FIELD_DESC);
      oprot.writeBool(struct.includeDocuments);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INCLUDE_USERS_FIELD_DESC);
      oprot.writeBool(struct.includeUsers);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INCLUDE_STATS_FIELD_DESC);
      oprot.writeBool(struct.includeStats);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INCLUDE_ACTIVITY_FIELD_DESC);
      oprot.writeBool(struct.includeActivity);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INCLUDE_TEMPLATES_FIELD_DESC);
      oprot.writeBool(struct.includeTemplates);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INCLUDE_CREATOR_FIELD_DESC);
      oprot.writeBool(struct.includeCreator);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INCLUDE_ROLES_FIELD_DESC);
      oprot.writeBool(struct.includeRoles);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INCLUDE_PERMISSIONS_FIELD_DESC);
      oprot.writeBool(struct.includePermissions);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INCLUDE_EXEC_SNIPPETS_FIELD_DESC);
      oprot.writeBool(struct.includeExecSnippets);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INCLUDE_MESSAGES_FIELD_DESC);
      oprot.writeBool(struct.includeMessages);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INCLUDE_ISSUES_FIELD_DESC);
      oprot.writeBool(struct.includeIssues);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INCLUDE_DEVIATION_COUNTS_FIELD_DESC);
      oprot.writeBool(struct.includeDeviationCounts);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INCLUDE_DEVIATIONS_FIELD_DESC);
      oprot.writeBool(struct.includeDeviations);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INCLUDE_REF_MAP_FIELD_DESC);
      oprot.writeBool(struct.includeRefMap);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INCLUDE_PLANNED_DATA_SHEET_IDS_FIELD_DESC);
      oprot.writeBool(struct.includePlannedDataSheetIds);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INCLUDE_SNAPSHOTTED_DATA_SHEET_VALUES_FIELD_DESC);
      oprot.writeBool(struct.includeSnapshottedDataSheetValues);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INCLUDE_ATTRIBUTES_FIELD_DESC);
      oprot.writeBool(struct.includeAttributes);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

}

