/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wi.director.thrift.v1.common;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * This data structure is used to request pagination or streaming of
 * data from endpoints that support it.  This allows result sets larger
 * than can be returned within the request timeout to be retrieved
 * piecemeal.<br/><br/>
 * 
 * The first time you call a streaming endpoint and pass this structure,
 * you'll get back a <tt>PageInfo</tt> object which includes a
 * <tt>pageTokens</tt> for one subsequent page.<br/><br/>
 * 
 * To retrieve the next page, pass the token for that page as the
 * <tt>pageToken</tt> field in this struct.  Use of these tokens to
 * resume allows the system to efficiently stream through the data set.
 * With an appropriate sort order, repeating this until no more token is
 * returned allows you to retrieve all data with "at least once"
 * retrieval semantics for each item in the set.<br/><br/>
 * 
 * If the results are being navigated by a user interface, and the user
 * selects to move forward a number of pages, set the <tt>skip</tt>
 * parameter.  The endpoint will return the requested page of data, a
 * <tt>pageToken</tt> for the page after that, and usually also
 * <tt>pageToken</tt> values for the skipped pages.<br/><br />
 * 
 * If the interface shows a handful of page numbers allowing the user to
 * skip forward to a handful of nearby pages, it's possible to request
 * the page tokens for these pages in advance using the <tt>preview</tt>
 * parameter.  This gives you a "preview" of the page tokens for those
 * pages, to facilitate paging forward this small number of pages without
 * using <tt>skip</tt>.<br/><br/>
 * 
 * If the interface shows a final page number to indicate the number of
 * results which matched the user query, it has two options to do this.
 * The first is to issue a combined query which both counts results and
 * returns a page of data.  This is the default, backwards-compatible
 * behavior, when <tt>count</tt> is not specified.  The count is accurate
 * as of the time it was issued; however, it is possible that by the time
 * the end of the set is reached that there are more (or even fewer)
 * pages of data.  The last page of results will always have
 * <tt>left</tt> equal to zero and no <tt>pageToken</tt> for any pages
 * beyond the page number (the <tt>num</tt> field).<br/><br/>
 * 
 * The second, and faster approach, is to first issue a query with
 * <tt>count</tt> set to <tt>false</tt>, and (optionally) a small number
 * such as 1 or 2 passed as <tt>preview</tt>.  This query mode avoids
 * counting items just to know how many pages there are, which means the
 * <tt>left</tt> field will not be an accurate predictor of the number of
 * pages left in the results.  When rendering the results, if the value
 * of <tt>left</tt> returned is the same as or lower than the sent value
 * of <tt>preview</tt>, then the total number of pages in the results can
 * be assumed to be the highest page number in the page tokens that are
 * returned, and the page numbers can be shown to the user as the
 * complete list of pages.  The count is avoided.  If left is higher than
 * that, then there is at least one more page of results.  If the user is
 * interested in the total number of pages (such as by exposing the
 * screen area where the count is shown, or by clicking on a control to
 * request it), then a second call can be issued with the <tt>count</tt>
 * parameter set to <tt>true</tt>.  This second request will return
 * <i>just</i> the count of pages (i.e. the <tt>left</tt> field will be
 * accurate).  This, in combination with the <tt>skip</tt> option, can
 * let the user access the last page of results.  However, when designing
 * such an interface, a preference should be made towards encouraging the
 * user to reverse the sort order or refining their search terms, rather
 * than performing large seeks through the set or attempting to access
 * the last page.<br /><br />
 * 
 * Users wishing to retrieve every item, such as batch ETL jobs, can set
 * <tt>count</tt> to <tt>false</tt> or leave it not set; the only side
 * effect of not setting it is that the first page of results will take
 * slightly longer to retrieve while the system counts the items.
 * 
 */
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class PageReq implements org.apache.thrift.TBase<PageReq, PageReq._Fields>, java.io.Serializable, Cloneable, Comparable<PageReq> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PageReq");

  private static final org.apache.thrift.protocol.TField PAGE_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("pageToken", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("size", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField SKIP_FIELD_DESC = new org.apache.thrift.protocol.TField("skip", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField PREVIEW_FIELD_DESC = new org.apache.thrift.protocol.TField("preview", org.apache.thrift.protocol.TType.I32, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PageReqStandardSchemeFactory());
  }

  /**
   * an opaque token from a <tt>PageInfo</tt> structure which allows resuming of a
   * streamed set.
   */
  public String pageToken; // optional
  /**
   * Number of items per page. Requests for pages larger than the
   * default are not guaranteed to be honored.
   */
  public int size; // required
  /**
   * Number of pages to skip at the beginning of the stream.
   */
  public int skip; // optional
  /**
   * opt in for streaming behavior (see explanation)
   */
  public boolean count; // optional
  /**
   * Return this number of extra page tokens for pages beyond the end
   * of the set
   */
  public int preview; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * an opaque token from a <tt>PageInfo</tt> structure which allows resuming of a
     * streamed set.
     */
    PAGE_TOKEN((short)1, "pageToken"),
    /**
     * Number of items per page. Requests for pages larger than the
     * default are not guaranteed to be honored.
     */
    SIZE((short)2, "size"),
    /**
     * Number of pages to skip at the beginning of the stream.
     */
    SKIP((short)3, "skip"),
    /**
     * opt in for streaming behavior (see explanation)
     */
    COUNT((short)4, "count"),
    /**
     * Return this number of extra page tokens for pages beyond the end
     * of the set
     */
    PREVIEW((short)5, "preview");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PAGE_TOKEN
          return PAGE_TOKEN;
        case 2: // SIZE
          return SIZE;
        case 3: // SKIP
          return SKIP;
        case 4: // COUNT
          return COUNT;
        case 5: // PREVIEW
          return PREVIEW;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SIZE_ISSET_ID = 0;
  private static final int __SKIP_ISSET_ID = 1;
  private static final int __COUNT_ISSET_ID = 2;
  private static final int __PREVIEW_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.PAGE_TOKEN,_Fields.SKIP,_Fields.COUNT,_Fields.PREVIEW};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PAGE_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("pageToken", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SIZE, new org.apache.thrift.meta_data.FieldMetaData("size", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SKIP, new org.apache.thrift.meta_data.FieldMetaData("skip", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PREVIEW, new org.apache.thrift.meta_data.FieldMetaData("preview", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PageReq.class, metaDataMap);
  }

  public PageReq() {
    this.size = 25;

  }

  public PageReq(
    int size)
  {
    this();
    this.size = size;
    setSizeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PageReq(PageReq other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetPageToken()) {
      this.pageToken = other.pageToken;
    }
    this.size = other.size;
    this.skip = other.skip;
    this.count = other.count;
    this.preview = other.preview;
  }

  public PageReq deepCopy() {
    return new PageReq(this);
  }

  @Override
  public void clear() {
    this.pageToken = null;
    this.size = 25;

    setSkipIsSet(false);
    this.skip = 0;
    setCountIsSet(false);
    this.count = false;
    setPreviewIsSet(false);
    this.preview = 0;
  }

  /**
   * an opaque token from a <tt>PageInfo</tt> structure which allows resuming of a
   * streamed set.
   */
  public String getPageToken() {
    return this.pageToken;
  }

  /**
   * an opaque token from a <tt>PageInfo</tt> structure which allows resuming of a
   * streamed set.
   */
  public PageReq setPageToken(String pageToken) {
    this.pageToken = pageToken;
    return this;
  }

  public void unsetPageToken() {
    this.pageToken = null;
  }

  /** Returns true if field pageToken is set (has been assigned a value) and false otherwise */
  public boolean isSetPageToken() {
    return this.pageToken != null;
  }

  public void setPageTokenIsSet(boolean value) {
    if (!value) {
      this.pageToken = null;
    }
  }

  /**
   * Number of items per page. Requests for pages larger than the
   * default are not guaranteed to be honored.
   */
  public int getSize() {
    return this.size;
  }

  /**
   * Number of items per page. Requests for pages larger than the
   * default are not guaranteed to be honored.
   */
  public PageReq setSize(int size) {
    this.size = size;
    setSizeIsSet(true);
    return this;
  }

  public void unsetSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SIZE_ISSET_ID);
  }

  /** Returns true if field size is set (has been assigned a value) and false otherwise */
  public boolean isSetSize() {
    return EncodingUtils.testBit(__isset_bitfield, __SIZE_ISSET_ID);
  }

  public void setSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SIZE_ISSET_ID, value);
  }

  /**
   * Number of pages to skip at the beginning of the stream.
   */
  public int getSkip() {
    return this.skip;
  }

  /**
   * Number of pages to skip at the beginning of the stream.
   */
  public PageReq setSkip(int skip) {
    this.skip = skip;
    setSkipIsSet(true);
    return this;
  }

  public void unsetSkip() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SKIP_ISSET_ID);
  }

  /** Returns true if field skip is set (has been assigned a value) and false otherwise */
  public boolean isSetSkip() {
    return EncodingUtils.testBit(__isset_bitfield, __SKIP_ISSET_ID);
  }

  public void setSkipIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SKIP_ISSET_ID, value);
  }

  /**
   * opt in for streaming behavior (see explanation)
   */
  public boolean isCount() {
    return this.count;
  }

  /**
   * opt in for streaming behavior (see explanation)
   */
  public PageReq setCount(boolean count) {
    this.count = count;
    setCountIsSet(true);
    return this;
  }

  public void unsetCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
  }

  /** Returns true if field count is set (has been assigned a value) and false otherwise */
  public boolean isSetCount() {
    return EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
  }

  public void setCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
  }

  /**
   * Return this number of extra page tokens for pages beyond the end
   * of the set
   */
  public int getPreview() {
    return this.preview;
  }

  /**
   * Return this number of extra page tokens for pages beyond the end
   * of the set
   */
  public PageReq setPreview(int preview) {
    this.preview = preview;
    setPreviewIsSet(true);
    return this;
  }

  public void unsetPreview() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PREVIEW_ISSET_ID);
  }

  /** Returns true if field preview is set (has been assigned a value) and false otherwise */
  public boolean isSetPreview() {
    return EncodingUtils.testBit(__isset_bitfield, __PREVIEW_ISSET_ID);
  }

  public void setPreviewIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PREVIEW_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PAGE_TOKEN:
      if (value == null) {
        unsetPageToken();
      } else {
        setPageToken((String)value);
      }
      break;

    case SIZE:
      if (value == null) {
        unsetSize();
      } else {
        setSize((Integer)value);
      }
      break;

    case SKIP:
      if (value == null) {
        unsetSkip();
      } else {
        setSkip((Integer)value);
      }
      break;

    case COUNT:
      if (value == null) {
        unsetCount();
      } else {
        setCount((Boolean)value);
      }
      break;

    case PREVIEW:
      if (value == null) {
        unsetPreview();
      } else {
        setPreview((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PAGE_TOKEN:
      return getPageToken();

    case SIZE:
      return getSize();

    case SKIP:
      return getSkip();

    case COUNT:
      return isCount();

    case PREVIEW:
      return getPreview();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PAGE_TOKEN:
      return isSetPageToken();
    case SIZE:
      return isSetSize();
    case SKIP:
      return isSetSkip();
    case COUNT:
      return isSetCount();
    case PREVIEW:
      return isSetPreview();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PageReq)
      return this.equals((PageReq)that);
    return false;
  }

  public boolean equals(PageReq that) {
    if (that == null)
      return false;

    boolean this_present_pageToken = true && this.isSetPageToken();
    boolean that_present_pageToken = true && that.isSetPageToken();
    if (this_present_pageToken || that_present_pageToken) {
      if (!(this_present_pageToken && that_present_pageToken))
        return false;
      if (!this.pageToken.equals(that.pageToken))
        return false;
    }

    boolean this_present_size = true;
    boolean that_present_size = true;
    if (this_present_size || that_present_size) {
      if (!(this_present_size && that_present_size))
        return false;
      if (this.size != that.size)
        return false;
    }

    boolean this_present_skip = true && this.isSetSkip();
    boolean that_present_skip = true && that.isSetSkip();
    if (this_present_skip || that_present_skip) {
      if (!(this_present_skip && that_present_skip))
        return false;
      if (this.skip != that.skip)
        return false;
    }

    boolean this_present_count = true && this.isSetCount();
    boolean that_present_count = true && that.isSetCount();
    if (this_present_count || that_present_count) {
      if (!(this_present_count && that_present_count))
        return false;
      if (this.count != that.count)
        return false;
    }

    boolean this_present_preview = true && this.isSetPreview();
    boolean that_present_preview = true && that.isSetPreview();
    if (this_present_preview || that_present_preview) {
      if (!(this_present_preview && that_present_preview))
        return false;
      if (this.preview != that.preview)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pageToken = true && (isSetPageToken());
    list.add(present_pageToken);
    if (present_pageToken)
      list.add(pageToken);

    boolean present_size = true;
    list.add(present_size);
    if (present_size)
      list.add(size);

    boolean present_skip = true && (isSetSkip());
    list.add(present_skip);
    if (present_skip)
      list.add(skip);

    boolean present_count = true && (isSetCount());
    list.add(present_count);
    if (present_count)
      list.add(count);

    boolean present_preview = true && (isSetPreview());
    list.add(present_preview);
    if (present_preview)
      list.add(preview);

    return list.hashCode();
  }

  @Override
  public int compareTo(PageReq other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPageToken()).compareTo(other.isSetPageToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPageToken()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageToken, other.pageToken);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSize()).compareTo(other.isSetSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.size, other.size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSkip()).compareTo(other.isSetSkip());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSkip()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.skip, other.skip);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCount()).compareTo(other.isSetCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, other.count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPreview()).compareTo(other.isSetPreview());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPreview()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.preview, other.preview);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PageReq(");
    boolean first = true;

    if (isSetPageToken()) {
      sb.append("pageToken:");
      if (this.pageToken == null) {
        sb.append("null");
      } else {
        sb.append(this.pageToken);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("size:");
    sb.append(this.size);
    first = false;
    if (isSetSkip()) {
      if (!first) sb.append(", ");
      sb.append("skip:");
      sb.append(this.skip);
      first = false;
    }
    if (isSetCount()) {
      if (!first) sb.append(", ");
      sb.append("count:");
      sb.append(this.count);
      first = false;
    }
    if (isSetPreview()) {
      if (!first) sb.append(", ");
      sb.append("preview:");
      sb.append(this.preview);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PageReqStandardSchemeFactory implements SchemeFactory {
    public PageReqStandardScheme getScheme() {
      return new PageReqStandardScheme();
    }
  }

  private static class PageReqStandardScheme extends StandardScheme<PageReq> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PageReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PAGE_TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pageToken = iprot.readString();
              struct.setPageTokenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.size = iprot.readI32();
              struct.setSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SKIP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.skip = iprot.readI32();
              struct.setSkipIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.count = iprot.readBool();
              struct.setCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PREVIEW
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.preview = iprot.readI32();
              struct.setPreviewIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PageReq struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.pageToken != null) {
        if (struct.isSetPageToken()) {
          oprot.writeFieldBegin(PAGE_TOKEN_FIELD_DESC);
          oprot.writeString(struct.pageToken);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(SIZE_FIELD_DESC);
      oprot.writeI32(struct.size);
      oprot.writeFieldEnd();
      if (struct.isSetSkip()) {
        oprot.writeFieldBegin(SKIP_FIELD_DESC);
        oprot.writeI32(struct.skip);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCount()) {
        oprot.writeFieldBegin(COUNT_FIELD_DESC);
        oprot.writeBool(struct.count);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPreview()) {
        oprot.writeFieldBegin(PREVIEW_FIELD_DESC);
        oprot.writeI32(struct.preview);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

}

