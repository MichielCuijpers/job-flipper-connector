/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wi.director.thrift.v1.jobfilter;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class TimeRange implements org.apache.thrift.TBase<TimeRange, TimeRange._Fields>, java.io.Serializable, Cloneable, Comparable<TimeRange> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TimeRange");

  private static final org.apache.thrift.protocol.TField FROM_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("fromTime", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField TO_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("toTime", org.apache.thrift.protocol.TType.I64, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TimeRangeStandardSchemeFactory());
  }

  /**
   * Inclusive >=
   */
  public long fromTime; // optional
  /**
   * Exclusive <
   */
  public long toTime; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * Inclusive >=
     */
    FROM_TIME((short)1, "fromTime"),
    /**
     * Exclusive <
     */
    TO_TIME((short)2, "toTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FROM_TIME
          return FROM_TIME;
        case 2: // TO_TIME
          return TO_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FROMTIME_ISSET_ID = 0;
  private static final int __TOTIME_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.FROM_TIME,_Fields.TO_TIME};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FROM_TIME, new org.apache.thrift.meta_data.FieldMetaData("fromTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TO_TIME, new org.apache.thrift.meta_data.FieldMetaData("toTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TimeRange.class, metaDataMap);
  }

  public TimeRange() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TimeRange(TimeRange other) {
    __isset_bitfield = other.__isset_bitfield;
    this.fromTime = other.fromTime;
    this.toTime = other.toTime;
  }

  public TimeRange deepCopy() {
    return new TimeRange(this);
  }

  @Override
  public void clear() {
    setFromTimeIsSet(false);
    this.fromTime = 0;
    setToTimeIsSet(false);
    this.toTime = 0;
  }

  /**
   * Inclusive >=
   */
  public long getFromTime() {
    return this.fromTime;
  }

  /**
   * Inclusive >=
   */
  public TimeRange setFromTime(long fromTime) {
    this.fromTime = fromTime;
    setFromTimeIsSet(true);
    return this;
  }

  public void unsetFromTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FROMTIME_ISSET_ID);
  }

  /** Returns true if field fromTime is set (has been assigned a value) and false otherwise */
  public boolean isSetFromTime() {
    return EncodingUtils.testBit(__isset_bitfield, __FROMTIME_ISSET_ID);
  }

  public void setFromTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FROMTIME_ISSET_ID, value);
  }

  /**
   * Exclusive <
   */
  public long getToTime() {
    return this.toTime;
  }

  /**
   * Exclusive <
   */
  public TimeRange setToTime(long toTime) {
    this.toTime = toTime;
    setToTimeIsSet(true);
    return this;
  }

  public void unsetToTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTIME_ISSET_ID);
  }

  /** Returns true if field toTime is set (has been assigned a value) and false otherwise */
  public boolean isSetToTime() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTIME_ISSET_ID);
  }

  public void setToTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTIME_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FROM_TIME:
      if (value == null) {
        unsetFromTime();
      } else {
        setFromTime((Long)value);
      }
      break;

    case TO_TIME:
      if (value == null) {
        unsetToTime();
      } else {
        setToTime((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FROM_TIME:
      return getFromTime();

    case TO_TIME:
      return getToTime();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FROM_TIME:
      return isSetFromTime();
    case TO_TIME:
      return isSetToTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TimeRange)
      return this.equals((TimeRange)that);
    return false;
  }

  public boolean equals(TimeRange that) {
    if (that == null)
      return false;

    boolean this_present_fromTime = true && this.isSetFromTime();
    boolean that_present_fromTime = true && that.isSetFromTime();
    if (this_present_fromTime || that_present_fromTime) {
      if (!(this_present_fromTime && that_present_fromTime))
        return false;
      if (this.fromTime != that.fromTime)
        return false;
    }

    boolean this_present_toTime = true && this.isSetToTime();
    boolean that_present_toTime = true && that.isSetToTime();
    if (this_present_toTime || that_present_toTime) {
      if (!(this_present_toTime && that_present_toTime))
        return false;
      if (this.toTime != that.toTime)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_fromTime = true && (isSetFromTime());
    list.add(present_fromTime);
    if (present_fromTime)
      list.add(fromTime);

    boolean present_toTime = true && (isSetToTime());
    list.add(present_toTime);
    if (present_toTime)
      list.add(toTime);

    return list.hashCode();
  }

  @Override
  public int compareTo(TimeRange other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetFromTime()).compareTo(other.isSetFromTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFromTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromTime, other.fromTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetToTime()).compareTo(other.isSetToTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toTime, other.toTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TimeRange(");
    boolean first = true;

    if (isSetFromTime()) {
      sb.append("fromTime:");
      sb.append(this.fromTime);
      first = false;
    }
    if (isSetToTime()) {
      if (!first) sb.append(", ");
      sb.append("toTime:");
      sb.append(this.toTime);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TimeRangeStandardSchemeFactory implements SchemeFactory {
    public TimeRangeStandardScheme getScheme() {
      return new TimeRangeStandardScheme();
    }
  }

  private static class TimeRangeStandardScheme extends StandardScheme<TimeRange> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TimeRange struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FROM_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.fromTime = iprot.readI64();
              struct.setFromTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TO_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.toTime = iprot.readI64();
              struct.setToTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TimeRange struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetFromTime()) {
        oprot.writeFieldBegin(FROM_TIME_FIELD_DESC);
        oprot.writeI64(struct.fromTime);
        oprot.writeFieldEnd();
      }
      if (struct.isSetToTime()) {
        oprot.writeFieldBegin(TO_TIME_FIELD_DESC);
        oprot.writeI64(struct.toTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

}

