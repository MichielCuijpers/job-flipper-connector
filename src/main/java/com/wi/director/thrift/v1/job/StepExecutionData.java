/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wi.director.thrift.v1.job;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * Execution data for a step
 */
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class StepExecutionData implements org.apache.thrift.TBase<StepExecutionData, StepExecutionData._Fields>, java.io.Serializable, Cloneable, Comparable<StepExecutionData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StepExecutionData");

  private static final org.apache.thrift.protocol.TField STEP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("stepId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField JOB_BASE_STEP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("jobBaseStepId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField STEP_COMPLETE_FIELD_DESC = new org.apache.thrift.protocol.TField("stepComplete", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField FIELD_EXECUTION_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("fieldExecutionData", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField IS_COMPLETE_FIELD_DESC = new org.apache.thrift.protocol.TField("isComplete", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField IS_COMPLETE_LAST_UPDATED_BY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("isCompleteLastUpdatedById", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField IS_COMPLETE_LAST_UPDATED_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("isCompleteLastUpdatedAt", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField IS_NOT_APPLICABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("isNotApplicable", org.apache.thrift.protocol.TType.BOOL, (short)8);
  private static final org.apache.thrift.protocol.TField IS_NOT_APPLICABLE_LAST_UPDATED_BY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("isNotApplicableLastUpdatedById", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField IS_NOT_APPLICABLE_LAST_UPDATED_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("isNotApplicableLastUpdatedAt", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField SEQ_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("seqId", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField DEVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceId", org.apache.thrift.protocol.TType.STRING, (short)1000);
  private static final org.apache.thrift.protocol.TField DEVICE_SEQ_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceSeqId", org.apache.thrift.protocol.TType.I64, (short)1001);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new StepExecutionDataStandardSchemeFactory());
  }

  public String stepId; // required
  public String jobBaseStepId; // required
  public boolean stepComplete; // required
  public List<FieldExecutionData> fieldExecutionData; // required
  public boolean isComplete; // optional
  public String isCompleteLastUpdatedById; // optional
  public long isCompleteLastUpdatedAt; // optional
  public boolean isNotApplicable; // optional
  public String isNotApplicableLastUpdatedById; // optional
  public long isNotApplicableLastUpdatedAt; // optional
  public long seqId; // required
  /**
   * For Mesh
   */
  public String deviceId; // optional
  public long deviceSeqId; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STEP_ID((short)1, "stepId"),
    JOB_BASE_STEP_ID((short)2, "jobBaseStepId"),
    STEP_COMPLETE((short)3, "stepComplete"),
    FIELD_EXECUTION_DATA((short)4, "fieldExecutionData"),
    IS_COMPLETE((short)5, "isComplete"),
    IS_COMPLETE_LAST_UPDATED_BY_ID((short)6, "isCompleteLastUpdatedById"),
    IS_COMPLETE_LAST_UPDATED_AT((short)7, "isCompleteLastUpdatedAt"),
    IS_NOT_APPLICABLE((short)8, "isNotApplicable"),
    IS_NOT_APPLICABLE_LAST_UPDATED_BY_ID((short)9, "isNotApplicableLastUpdatedById"),
    IS_NOT_APPLICABLE_LAST_UPDATED_AT((short)10, "isNotApplicableLastUpdatedAt"),
    SEQ_ID((short)11, "seqId"),
    /**
     * For Mesh
     */
    DEVICE_ID((short)1000, "deviceId"),
    DEVICE_SEQ_ID((short)1001, "deviceSeqId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STEP_ID
          return STEP_ID;
        case 2: // JOB_BASE_STEP_ID
          return JOB_BASE_STEP_ID;
        case 3: // STEP_COMPLETE
          return STEP_COMPLETE;
        case 4: // FIELD_EXECUTION_DATA
          return FIELD_EXECUTION_DATA;
        case 5: // IS_COMPLETE
          return IS_COMPLETE;
        case 6: // IS_COMPLETE_LAST_UPDATED_BY_ID
          return IS_COMPLETE_LAST_UPDATED_BY_ID;
        case 7: // IS_COMPLETE_LAST_UPDATED_AT
          return IS_COMPLETE_LAST_UPDATED_AT;
        case 8: // IS_NOT_APPLICABLE
          return IS_NOT_APPLICABLE;
        case 9: // IS_NOT_APPLICABLE_LAST_UPDATED_BY_ID
          return IS_NOT_APPLICABLE_LAST_UPDATED_BY_ID;
        case 10: // IS_NOT_APPLICABLE_LAST_UPDATED_AT
          return IS_NOT_APPLICABLE_LAST_UPDATED_AT;
        case 11: // SEQ_ID
          return SEQ_ID;
        case 1000: // DEVICE_ID
          return DEVICE_ID;
        case 1001: // DEVICE_SEQ_ID
          return DEVICE_SEQ_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STEPCOMPLETE_ISSET_ID = 0;
  private static final int __ISCOMPLETE_ISSET_ID = 1;
  private static final int __ISCOMPLETELASTUPDATEDAT_ISSET_ID = 2;
  private static final int __ISNOTAPPLICABLE_ISSET_ID = 3;
  private static final int __ISNOTAPPLICABLELASTUPDATEDAT_ISSET_ID = 4;
  private static final int __SEQID_ISSET_ID = 5;
  private static final int __DEVICESEQID_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.IS_COMPLETE,_Fields.IS_COMPLETE_LAST_UPDATED_BY_ID,_Fields.IS_COMPLETE_LAST_UPDATED_AT,_Fields.IS_NOT_APPLICABLE,_Fields.IS_NOT_APPLICABLE_LAST_UPDATED_BY_ID,_Fields.IS_NOT_APPLICABLE_LAST_UPDATED_AT,_Fields.DEVICE_ID,_Fields.DEVICE_SEQ_ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STEP_ID, new org.apache.thrift.meta_data.FieldMetaData("stepId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.JOB_BASE_STEP_ID, new org.apache.thrift.meta_data.FieldMetaData("jobBaseStepId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STEP_COMPLETE, new org.apache.thrift.meta_data.FieldMetaData("stepComplete", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.FIELD_EXECUTION_DATA, new org.apache.thrift.meta_data.FieldMetaData("fieldExecutionData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FieldExecutionData.class))));
    tmpMap.put(_Fields.IS_COMPLETE, new org.apache.thrift.meta_data.FieldMetaData("isComplete", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_COMPLETE_LAST_UPDATED_BY_ID, new org.apache.thrift.meta_data.FieldMetaData("isCompleteLastUpdatedById", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_COMPLETE_LAST_UPDATED_AT, new org.apache.thrift.meta_data.FieldMetaData("isCompleteLastUpdatedAt", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.IS_NOT_APPLICABLE, new org.apache.thrift.meta_data.FieldMetaData("isNotApplicable", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_NOT_APPLICABLE_LAST_UPDATED_BY_ID, new org.apache.thrift.meta_data.FieldMetaData("isNotApplicableLastUpdatedById", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_NOT_APPLICABLE_LAST_UPDATED_AT, new org.apache.thrift.meta_data.FieldMetaData("isNotApplicableLastUpdatedAt", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SEQ_ID, new org.apache.thrift.meta_data.FieldMetaData("seqId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DEVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("deviceId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEVICE_SEQ_ID, new org.apache.thrift.meta_data.FieldMetaData("deviceSeqId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StepExecutionData.class, metaDataMap);
  }

  public StepExecutionData() {
  }

  public StepExecutionData(
    String stepId,
    String jobBaseStepId,
    boolean stepComplete,
    List<FieldExecutionData> fieldExecutionData,
    long seqId)
  {
    this();
    this.stepId = stepId;
    this.jobBaseStepId = jobBaseStepId;
    this.stepComplete = stepComplete;
    setStepCompleteIsSet(true);
    this.fieldExecutionData = fieldExecutionData;
    this.seqId = seqId;
    setSeqIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StepExecutionData(StepExecutionData other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetStepId()) {
      this.stepId = other.stepId;
    }
    if (other.isSetJobBaseStepId()) {
      this.jobBaseStepId = other.jobBaseStepId;
    }
    this.stepComplete = other.stepComplete;
    if (other.isSetFieldExecutionData()) {
      List<FieldExecutionData> __this__fieldExecutionData = new ArrayList<FieldExecutionData>(other.fieldExecutionData.size());
      for (FieldExecutionData other_element : other.fieldExecutionData) {
        __this__fieldExecutionData.add(new FieldExecutionData(other_element));
      }
      this.fieldExecutionData = __this__fieldExecutionData;
    }
    this.isComplete = other.isComplete;
    if (other.isSetIsCompleteLastUpdatedById()) {
      this.isCompleteLastUpdatedById = other.isCompleteLastUpdatedById;
    }
    this.isCompleteLastUpdatedAt = other.isCompleteLastUpdatedAt;
    this.isNotApplicable = other.isNotApplicable;
    if (other.isSetIsNotApplicableLastUpdatedById()) {
      this.isNotApplicableLastUpdatedById = other.isNotApplicableLastUpdatedById;
    }
    this.isNotApplicableLastUpdatedAt = other.isNotApplicableLastUpdatedAt;
    this.seqId = other.seqId;
    if (other.isSetDeviceId()) {
      this.deviceId = other.deviceId;
    }
    this.deviceSeqId = other.deviceSeqId;
  }

  public StepExecutionData deepCopy() {
    return new StepExecutionData(this);
  }

  @Override
  public void clear() {
    this.stepId = null;
    this.jobBaseStepId = null;
    setStepCompleteIsSet(false);
    this.stepComplete = false;
    this.fieldExecutionData = null;
    setIsCompleteIsSet(false);
    this.isComplete = false;
    this.isCompleteLastUpdatedById = null;
    setIsCompleteLastUpdatedAtIsSet(false);
    this.isCompleteLastUpdatedAt = 0;
    setIsNotApplicableIsSet(false);
    this.isNotApplicable = false;
    this.isNotApplicableLastUpdatedById = null;
    setIsNotApplicableLastUpdatedAtIsSet(false);
    this.isNotApplicableLastUpdatedAt = 0;
    setSeqIdIsSet(false);
    this.seqId = 0;
    this.deviceId = null;
    setDeviceSeqIdIsSet(false);
    this.deviceSeqId = 0;
  }

  public String getStepId() {
    return this.stepId;
  }

  public StepExecutionData setStepId(String stepId) {
    this.stepId = stepId;
    return this;
  }

  public void unsetStepId() {
    this.stepId = null;
  }

  /** Returns true if field stepId is set (has been assigned a value) and false otherwise */
  public boolean isSetStepId() {
    return this.stepId != null;
  }

  public void setStepIdIsSet(boolean value) {
    if (!value) {
      this.stepId = null;
    }
  }

  public String getJobBaseStepId() {
    return this.jobBaseStepId;
  }

  public StepExecutionData setJobBaseStepId(String jobBaseStepId) {
    this.jobBaseStepId = jobBaseStepId;
    return this;
  }

  public void unsetJobBaseStepId() {
    this.jobBaseStepId = null;
  }

  /** Returns true if field jobBaseStepId is set (has been assigned a value) and false otherwise */
  public boolean isSetJobBaseStepId() {
    return this.jobBaseStepId != null;
  }

  public void setJobBaseStepIdIsSet(boolean value) {
    if (!value) {
      this.jobBaseStepId = null;
    }
  }

  public boolean isStepComplete() {
    return this.stepComplete;
  }

  public StepExecutionData setStepComplete(boolean stepComplete) {
    this.stepComplete = stepComplete;
    setStepCompleteIsSet(true);
    return this;
  }

  public void unsetStepComplete() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STEPCOMPLETE_ISSET_ID);
  }

  /** Returns true if field stepComplete is set (has been assigned a value) and false otherwise */
  public boolean isSetStepComplete() {
    return EncodingUtils.testBit(__isset_bitfield, __STEPCOMPLETE_ISSET_ID);
  }

  public void setStepCompleteIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STEPCOMPLETE_ISSET_ID, value);
  }

  public int getFieldExecutionDataSize() {
    return (this.fieldExecutionData == null) ? 0 : this.fieldExecutionData.size();
  }

  public java.util.Iterator<FieldExecutionData> getFieldExecutionDataIterator() {
    return (this.fieldExecutionData == null) ? null : this.fieldExecutionData.iterator();
  }

  public void addToFieldExecutionData(FieldExecutionData elem) {
    if (this.fieldExecutionData == null) {
      this.fieldExecutionData = new ArrayList<FieldExecutionData>();
    }
    this.fieldExecutionData.add(elem);
  }

  public List<FieldExecutionData> getFieldExecutionData() {
    return this.fieldExecutionData;
  }

  public StepExecutionData setFieldExecutionData(List<FieldExecutionData> fieldExecutionData) {
    this.fieldExecutionData = fieldExecutionData;
    return this;
  }

  public void unsetFieldExecutionData() {
    this.fieldExecutionData = null;
  }

  /** Returns true if field fieldExecutionData is set (has been assigned a value) and false otherwise */
  public boolean isSetFieldExecutionData() {
    return this.fieldExecutionData != null;
  }

  public void setFieldExecutionDataIsSet(boolean value) {
    if (!value) {
      this.fieldExecutionData = null;
    }
  }

  public boolean isIsComplete() {
    return this.isComplete;
  }

  public StepExecutionData setIsComplete(boolean isComplete) {
    this.isComplete = isComplete;
    setIsCompleteIsSet(true);
    return this;
  }

  public void unsetIsComplete() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISCOMPLETE_ISSET_ID);
  }

  /** Returns true if field isComplete is set (has been assigned a value) and false otherwise */
  public boolean isSetIsComplete() {
    return EncodingUtils.testBit(__isset_bitfield, __ISCOMPLETE_ISSET_ID);
  }

  public void setIsCompleteIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISCOMPLETE_ISSET_ID, value);
  }

  public String getIsCompleteLastUpdatedById() {
    return this.isCompleteLastUpdatedById;
  }

  public StepExecutionData setIsCompleteLastUpdatedById(String isCompleteLastUpdatedById) {
    this.isCompleteLastUpdatedById = isCompleteLastUpdatedById;
    return this;
  }

  public void unsetIsCompleteLastUpdatedById() {
    this.isCompleteLastUpdatedById = null;
  }

  /** Returns true if field isCompleteLastUpdatedById is set (has been assigned a value) and false otherwise */
  public boolean isSetIsCompleteLastUpdatedById() {
    return this.isCompleteLastUpdatedById != null;
  }

  public void setIsCompleteLastUpdatedByIdIsSet(boolean value) {
    if (!value) {
      this.isCompleteLastUpdatedById = null;
    }
  }

  public long getIsCompleteLastUpdatedAt() {
    return this.isCompleteLastUpdatedAt;
  }

  public StepExecutionData setIsCompleteLastUpdatedAt(long isCompleteLastUpdatedAt) {
    this.isCompleteLastUpdatedAt = isCompleteLastUpdatedAt;
    setIsCompleteLastUpdatedAtIsSet(true);
    return this;
  }

  public void unsetIsCompleteLastUpdatedAt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISCOMPLETELASTUPDATEDAT_ISSET_ID);
  }

  /** Returns true if field isCompleteLastUpdatedAt is set (has been assigned a value) and false otherwise */
  public boolean isSetIsCompleteLastUpdatedAt() {
    return EncodingUtils.testBit(__isset_bitfield, __ISCOMPLETELASTUPDATEDAT_ISSET_ID);
  }

  public void setIsCompleteLastUpdatedAtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISCOMPLETELASTUPDATEDAT_ISSET_ID, value);
  }

  public boolean isIsNotApplicable() {
    return this.isNotApplicable;
  }

  public StepExecutionData setIsNotApplicable(boolean isNotApplicable) {
    this.isNotApplicable = isNotApplicable;
    setIsNotApplicableIsSet(true);
    return this;
  }

  public void unsetIsNotApplicable() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISNOTAPPLICABLE_ISSET_ID);
  }

  /** Returns true if field isNotApplicable is set (has been assigned a value) and false otherwise */
  public boolean isSetIsNotApplicable() {
    return EncodingUtils.testBit(__isset_bitfield, __ISNOTAPPLICABLE_ISSET_ID);
  }

  public void setIsNotApplicableIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISNOTAPPLICABLE_ISSET_ID, value);
  }

  public String getIsNotApplicableLastUpdatedById() {
    return this.isNotApplicableLastUpdatedById;
  }

  public StepExecutionData setIsNotApplicableLastUpdatedById(String isNotApplicableLastUpdatedById) {
    this.isNotApplicableLastUpdatedById = isNotApplicableLastUpdatedById;
    return this;
  }

  public void unsetIsNotApplicableLastUpdatedById() {
    this.isNotApplicableLastUpdatedById = null;
  }

  /** Returns true if field isNotApplicableLastUpdatedById is set (has been assigned a value) and false otherwise */
  public boolean isSetIsNotApplicableLastUpdatedById() {
    return this.isNotApplicableLastUpdatedById != null;
  }

  public void setIsNotApplicableLastUpdatedByIdIsSet(boolean value) {
    if (!value) {
      this.isNotApplicableLastUpdatedById = null;
    }
  }

  public long getIsNotApplicableLastUpdatedAt() {
    return this.isNotApplicableLastUpdatedAt;
  }

  public StepExecutionData setIsNotApplicableLastUpdatedAt(long isNotApplicableLastUpdatedAt) {
    this.isNotApplicableLastUpdatedAt = isNotApplicableLastUpdatedAt;
    setIsNotApplicableLastUpdatedAtIsSet(true);
    return this;
  }

  public void unsetIsNotApplicableLastUpdatedAt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISNOTAPPLICABLELASTUPDATEDAT_ISSET_ID);
  }

  /** Returns true if field isNotApplicableLastUpdatedAt is set (has been assigned a value) and false otherwise */
  public boolean isSetIsNotApplicableLastUpdatedAt() {
    return EncodingUtils.testBit(__isset_bitfield, __ISNOTAPPLICABLELASTUPDATEDAT_ISSET_ID);
  }

  public void setIsNotApplicableLastUpdatedAtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISNOTAPPLICABLELASTUPDATEDAT_ISSET_ID, value);
  }

  public long getSeqId() {
    return this.seqId;
  }

  public StepExecutionData setSeqId(long seqId) {
    this.seqId = seqId;
    setSeqIdIsSet(true);
    return this;
  }

  public void unsetSeqId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEQID_ISSET_ID);
  }

  /** Returns true if field seqId is set (has been assigned a value) and false otherwise */
  public boolean isSetSeqId() {
    return EncodingUtils.testBit(__isset_bitfield, __SEQID_ISSET_ID);
  }

  public void setSeqIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEQID_ISSET_ID, value);
  }

  /**
   * For Mesh
   */
  public String getDeviceId() {
    return this.deviceId;
  }

  /**
   * For Mesh
   */
  public StepExecutionData setDeviceId(String deviceId) {
    this.deviceId = deviceId;
    return this;
  }

  public void unsetDeviceId() {
    this.deviceId = null;
  }

  /** Returns true if field deviceId is set (has been assigned a value) and false otherwise */
  public boolean isSetDeviceId() {
    return this.deviceId != null;
  }

  public void setDeviceIdIsSet(boolean value) {
    if (!value) {
      this.deviceId = null;
    }
  }

  public long getDeviceSeqId() {
    return this.deviceSeqId;
  }

  public StepExecutionData setDeviceSeqId(long deviceSeqId) {
    this.deviceSeqId = deviceSeqId;
    setDeviceSeqIdIsSet(true);
    return this;
  }

  public void unsetDeviceSeqId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEVICESEQID_ISSET_ID);
  }

  /** Returns true if field deviceSeqId is set (has been assigned a value) and false otherwise */
  public boolean isSetDeviceSeqId() {
    return EncodingUtils.testBit(__isset_bitfield, __DEVICESEQID_ISSET_ID);
  }

  public void setDeviceSeqIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEVICESEQID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STEP_ID:
      if (value == null) {
        unsetStepId();
      } else {
        setStepId((String)value);
      }
      break;

    case JOB_BASE_STEP_ID:
      if (value == null) {
        unsetJobBaseStepId();
      } else {
        setJobBaseStepId((String)value);
      }
      break;

    case STEP_COMPLETE:
      if (value == null) {
        unsetStepComplete();
      } else {
        setStepComplete((Boolean)value);
      }
      break;

    case FIELD_EXECUTION_DATA:
      if (value == null) {
        unsetFieldExecutionData();
      } else {
        setFieldExecutionData((List<FieldExecutionData>)value);
      }
      break;

    case IS_COMPLETE:
      if (value == null) {
        unsetIsComplete();
      } else {
        setIsComplete((Boolean)value);
      }
      break;

    case IS_COMPLETE_LAST_UPDATED_BY_ID:
      if (value == null) {
        unsetIsCompleteLastUpdatedById();
      } else {
        setIsCompleteLastUpdatedById((String)value);
      }
      break;

    case IS_COMPLETE_LAST_UPDATED_AT:
      if (value == null) {
        unsetIsCompleteLastUpdatedAt();
      } else {
        setIsCompleteLastUpdatedAt((Long)value);
      }
      break;

    case IS_NOT_APPLICABLE:
      if (value == null) {
        unsetIsNotApplicable();
      } else {
        setIsNotApplicable((Boolean)value);
      }
      break;

    case IS_NOT_APPLICABLE_LAST_UPDATED_BY_ID:
      if (value == null) {
        unsetIsNotApplicableLastUpdatedById();
      } else {
        setIsNotApplicableLastUpdatedById((String)value);
      }
      break;

    case IS_NOT_APPLICABLE_LAST_UPDATED_AT:
      if (value == null) {
        unsetIsNotApplicableLastUpdatedAt();
      } else {
        setIsNotApplicableLastUpdatedAt((Long)value);
      }
      break;

    case SEQ_ID:
      if (value == null) {
        unsetSeqId();
      } else {
        setSeqId((Long)value);
      }
      break;

    case DEVICE_ID:
      if (value == null) {
        unsetDeviceId();
      } else {
        setDeviceId((String)value);
      }
      break;

    case DEVICE_SEQ_ID:
      if (value == null) {
        unsetDeviceSeqId();
      } else {
        setDeviceSeqId((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STEP_ID:
      return getStepId();

    case JOB_BASE_STEP_ID:
      return getJobBaseStepId();

    case STEP_COMPLETE:
      return isStepComplete();

    case FIELD_EXECUTION_DATA:
      return getFieldExecutionData();

    case IS_COMPLETE:
      return isIsComplete();

    case IS_COMPLETE_LAST_UPDATED_BY_ID:
      return getIsCompleteLastUpdatedById();

    case IS_COMPLETE_LAST_UPDATED_AT:
      return getIsCompleteLastUpdatedAt();

    case IS_NOT_APPLICABLE:
      return isIsNotApplicable();

    case IS_NOT_APPLICABLE_LAST_UPDATED_BY_ID:
      return getIsNotApplicableLastUpdatedById();

    case IS_NOT_APPLICABLE_LAST_UPDATED_AT:
      return getIsNotApplicableLastUpdatedAt();

    case SEQ_ID:
      return getSeqId();

    case DEVICE_ID:
      return getDeviceId();

    case DEVICE_SEQ_ID:
      return getDeviceSeqId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STEP_ID:
      return isSetStepId();
    case JOB_BASE_STEP_ID:
      return isSetJobBaseStepId();
    case STEP_COMPLETE:
      return isSetStepComplete();
    case FIELD_EXECUTION_DATA:
      return isSetFieldExecutionData();
    case IS_COMPLETE:
      return isSetIsComplete();
    case IS_COMPLETE_LAST_UPDATED_BY_ID:
      return isSetIsCompleteLastUpdatedById();
    case IS_COMPLETE_LAST_UPDATED_AT:
      return isSetIsCompleteLastUpdatedAt();
    case IS_NOT_APPLICABLE:
      return isSetIsNotApplicable();
    case IS_NOT_APPLICABLE_LAST_UPDATED_BY_ID:
      return isSetIsNotApplicableLastUpdatedById();
    case IS_NOT_APPLICABLE_LAST_UPDATED_AT:
      return isSetIsNotApplicableLastUpdatedAt();
    case SEQ_ID:
      return isSetSeqId();
    case DEVICE_ID:
      return isSetDeviceId();
    case DEVICE_SEQ_ID:
      return isSetDeviceSeqId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof StepExecutionData)
      return this.equals((StepExecutionData)that);
    return false;
  }

  public boolean equals(StepExecutionData that) {
    if (that == null)
      return false;

    boolean this_present_stepId = true && this.isSetStepId();
    boolean that_present_stepId = true && that.isSetStepId();
    if (this_present_stepId || that_present_stepId) {
      if (!(this_present_stepId && that_present_stepId))
        return false;
      if (!this.stepId.equals(that.stepId))
        return false;
    }

    boolean this_present_jobBaseStepId = true && this.isSetJobBaseStepId();
    boolean that_present_jobBaseStepId = true && that.isSetJobBaseStepId();
    if (this_present_jobBaseStepId || that_present_jobBaseStepId) {
      if (!(this_present_jobBaseStepId && that_present_jobBaseStepId))
        return false;
      if (!this.jobBaseStepId.equals(that.jobBaseStepId))
        return false;
    }

    boolean this_present_stepComplete = true;
    boolean that_present_stepComplete = true;
    if (this_present_stepComplete || that_present_stepComplete) {
      if (!(this_present_stepComplete && that_present_stepComplete))
        return false;
      if (this.stepComplete != that.stepComplete)
        return false;
    }

    boolean this_present_fieldExecutionData = true && this.isSetFieldExecutionData();
    boolean that_present_fieldExecutionData = true && that.isSetFieldExecutionData();
    if (this_present_fieldExecutionData || that_present_fieldExecutionData) {
      if (!(this_present_fieldExecutionData && that_present_fieldExecutionData))
        return false;
      if (!this.fieldExecutionData.equals(that.fieldExecutionData))
        return false;
    }

    boolean this_present_isComplete = true && this.isSetIsComplete();
    boolean that_present_isComplete = true && that.isSetIsComplete();
    if (this_present_isComplete || that_present_isComplete) {
      if (!(this_present_isComplete && that_present_isComplete))
        return false;
      if (this.isComplete != that.isComplete)
        return false;
    }

    boolean this_present_isCompleteLastUpdatedById = true && this.isSetIsCompleteLastUpdatedById();
    boolean that_present_isCompleteLastUpdatedById = true && that.isSetIsCompleteLastUpdatedById();
    if (this_present_isCompleteLastUpdatedById || that_present_isCompleteLastUpdatedById) {
      if (!(this_present_isCompleteLastUpdatedById && that_present_isCompleteLastUpdatedById))
        return false;
      if (!this.isCompleteLastUpdatedById.equals(that.isCompleteLastUpdatedById))
        return false;
    }

    boolean this_present_isCompleteLastUpdatedAt = true && this.isSetIsCompleteLastUpdatedAt();
    boolean that_present_isCompleteLastUpdatedAt = true && that.isSetIsCompleteLastUpdatedAt();
    if (this_present_isCompleteLastUpdatedAt || that_present_isCompleteLastUpdatedAt) {
      if (!(this_present_isCompleteLastUpdatedAt && that_present_isCompleteLastUpdatedAt))
        return false;
      if (this.isCompleteLastUpdatedAt != that.isCompleteLastUpdatedAt)
        return false;
    }

    boolean this_present_isNotApplicable = true && this.isSetIsNotApplicable();
    boolean that_present_isNotApplicable = true && that.isSetIsNotApplicable();
    if (this_present_isNotApplicable || that_present_isNotApplicable) {
      if (!(this_present_isNotApplicable && that_present_isNotApplicable))
        return false;
      if (this.isNotApplicable != that.isNotApplicable)
        return false;
    }

    boolean this_present_isNotApplicableLastUpdatedById = true && this.isSetIsNotApplicableLastUpdatedById();
    boolean that_present_isNotApplicableLastUpdatedById = true && that.isSetIsNotApplicableLastUpdatedById();
    if (this_present_isNotApplicableLastUpdatedById || that_present_isNotApplicableLastUpdatedById) {
      if (!(this_present_isNotApplicableLastUpdatedById && that_present_isNotApplicableLastUpdatedById))
        return false;
      if (!this.isNotApplicableLastUpdatedById.equals(that.isNotApplicableLastUpdatedById))
        return false;
    }

    boolean this_present_isNotApplicableLastUpdatedAt = true && this.isSetIsNotApplicableLastUpdatedAt();
    boolean that_present_isNotApplicableLastUpdatedAt = true && that.isSetIsNotApplicableLastUpdatedAt();
    if (this_present_isNotApplicableLastUpdatedAt || that_present_isNotApplicableLastUpdatedAt) {
      if (!(this_present_isNotApplicableLastUpdatedAt && that_present_isNotApplicableLastUpdatedAt))
        return false;
      if (this.isNotApplicableLastUpdatedAt != that.isNotApplicableLastUpdatedAt)
        return false;
    }

    boolean this_present_seqId = true;
    boolean that_present_seqId = true;
    if (this_present_seqId || that_present_seqId) {
      if (!(this_present_seqId && that_present_seqId))
        return false;
      if (this.seqId != that.seqId)
        return false;
    }

    boolean this_present_deviceId = true && this.isSetDeviceId();
    boolean that_present_deviceId = true && that.isSetDeviceId();
    if (this_present_deviceId || that_present_deviceId) {
      if (!(this_present_deviceId && that_present_deviceId))
        return false;
      if (!this.deviceId.equals(that.deviceId))
        return false;
    }

    boolean this_present_deviceSeqId = true && this.isSetDeviceSeqId();
    boolean that_present_deviceSeqId = true && that.isSetDeviceSeqId();
    if (this_present_deviceSeqId || that_present_deviceSeqId) {
      if (!(this_present_deviceSeqId && that_present_deviceSeqId))
        return false;
      if (this.deviceSeqId != that.deviceSeqId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_stepId = true && (isSetStepId());
    list.add(present_stepId);
    if (present_stepId)
      list.add(stepId);

    boolean present_jobBaseStepId = true && (isSetJobBaseStepId());
    list.add(present_jobBaseStepId);
    if (present_jobBaseStepId)
      list.add(jobBaseStepId);

    boolean present_stepComplete = true;
    list.add(present_stepComplete);
    if (present_stepComplete)
      list.add(stepComplete);

    boolean present_fieldExecutionData = true && (isSetFieldExecutionData());
    list.add(present_fieldExecutionData);
    if (present_fieldExecutionData)
      list.add(fieldExecutionData);

    boolean present_isComplete = true && (isSetIsComplete());
    list.add(present_isComplete);
    if (present_isComplete)
      list.add(isComplete);

    boolean present_isCompleteLastUpdatedById = true && (isSetIsCompleteLastUpdatedById());
    list.add(present_isCompleteLastUpdatedById);
    if (present_isCompleteLastUpdatedById)
      list.add(isCompleteLastUpdatedById);

    boolean present_isCompleteLastUpdatedAt = true && (isSetIsCompleteLastUpdatedAt());
    list.add(present_isCompleteLastUpdatedAt);
    if (present_isCompleteLastUpdatedAt)
      list.add(isCompleteLastUpdatedAt);

    boolean present_isNotApplicable = true && (isSetIsNotApplicable());
    list.add(present_isNotApplicable);
    if (present_isNotApplicable)
      list.add(isNotApplicable);

    boolean present_isNotApplicableLastUpdatedById = true && (isSetIsNotApplicableLastUpdatedById());
    list.add(present_isNotApplicableLastUpdatedById);
    if (present_isNotApplicableLastUpdatedById)
      list.add(isNotApplicableLastUpdatedById);

    boolean present_isNotApplicableLastUpdatedAt = true && (isSetIsNotApplicableLastUpdatedAt());
    list.add(present_isNotApplicableLastUpdatedAt);
    if (present_isNotApplicableLastUpdatedAt)
      list.add(isNotApplicableLastUpdatedAt);

    boolean present_seqId = true;
    list.add(present_seqId);
    if (present_seqId)
      list.add(seqId);

    boolean present_deviceId = true && (isSetDeviceId());
    list.add(present_deviceId);
    if (present_deviceId)
      list.add(deviceId);

    boolean present_deviceSeqId = true && (isSetDeviceSeqId());
    list.add(present_deviceSeqId);
    if (present_deviceSeqId)
      list.add(deviceSeqId);

    return list.hashCode();
  }

  @Override
  public int compareTo(StepExecutionData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetStepId()).compareTo(other.isSetStepId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStepId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stepId, other.stepId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJobBaseStepId()).compareTo(other.isSetJobBaseStepId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJobBaseStepId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobBaseStepId, other.jobBaseStepId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStepComplete()).compareTo(other.isSetStepComplete());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStepComplete()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stepComplete, other.stepComplete);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFieldExecutionData()).compareTo(other.isSetFieldExecutionData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFieldExecutionData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fieldExecutionData, other.fieldExecutionData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsComplete()).compareTo(other.isSetIsComplete());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsComplete()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isComplete, other.isComplete);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsCompleteLastUpdatedById()).compareTo(other.isSetIsCompleteLastUpdatedById());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsCompleteLastUpdatedById()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isCompleteLastUpdatedById, other.isCompleteLastUpdatedById);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsCompleteLastUpdatedAt()).compareTo(other.isSetIsCompleteLastUpdatedAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsCompleteLastUpdatedAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isCompleteLastUpdatedAt, other.isCompleteLastUpdatedAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsNotApplicable()).compareTo(other.isSetIsNotApplicable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsNotApplicable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isNotApplicable, other.isNotApplicable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsNotApplicableLastUpdatedById()).compareTo(other.isSetIsNotApplicableLastUpdatedById());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsNotApplicableLastUpdatedById()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isNotApplicableLastUpdatedById, other.isNotApplicableLastUpdatedById);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsNotApplicableLastUpdatedAt()).compareTo(other.isSetIsNotApplicableLastUpdatedAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsNotApplicableLastUpdatedAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isNotApplicableLastUpdatedAt, other.isNotApplicableLastUpdatedAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSeqId()).compareTo(other.isSetSeqId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSeqId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.seqId, other.seqId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeviceId()).compareTo(other.isSetDeviceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeviceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceId, other.deviceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeviceSeqId()).compareTo(other.isSetDeviceSeqId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeviceSeqId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceSeqId, other.deviceSeqId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("StepExecutionData(");
    boolean first = true;

    sb.append("stepId:");
    if (this.stepId == null) {
      sb.append("null");
    } else {
      sb.append(this.stepId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("jobBaseStepId:");
    if (this.jobBaseStepId == null) {
      sb.append("null");
    } else {
      sb.append(this.jobBaseStepId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("stepComplete:");
    sb.append(this.stepComplete);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fieldExecutionData:");
    if (this.fieldExecutionData == null) {
      sb.append("null");
    } else {
      sb.append(this.fieldExecutionData);
    }
    first = false;
    if (isSetIsComplete()) {
      if (!first) sb.append(", ");
      sb.append("isComplete:");
      sb.append(this.isComplete);
      first = false;
    }
    if (isSetIsCompleteLastUpdatedById()) {
      if (!first) sb.append(", ");
      sb.append("isCompleteLastUpdatedById:");
      if (this.isCompleteLastUpdatedById == null) {
        sb.append("null");
      } else {
        sb.append(this.isCompleteLastUpdatedById);
      }
      first = false;
    }
    if (isSetIsCompleteLastUpdatedAt()) {
      if (!first) sb.append(", ");
      sb.append("isCompleteLastUpdatedAt:");
      sb.append(this.isCompleteLastUpdatedAt);
      first = false;
    }
    if (isSetIsNotApplicable()) {
      if (!first) sb.append(", ");
      sb.append("isNotApplicable:");
      sb.append(this.isNotApplicable);
      first = false;
    }
    if (isSetIsNotApplicableLastUpdatedById()) {
      if (!first) sb.append(", ");
      sb.append("isNotApplicableLastUpdatedById:");
      if (this.isNotApplicableLastUpdatedById == null) {
        sb.append("null");
      } else {
        sb.append(this.isNotApplicableLastUpdatedById);
      }
      first = false;
    }
    if (isSetIsNotApplicableLastUpdatedAt()) {
      if (!first) sb.append(", ");
      sb.append("isNotApplicableLastUpdatedAt:");
      sb.append(this.isNotApplicableLastUpdatedAt);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("seqId:");
    sb.append(this.seqId);
    first = false;
    if (isSetDeviceId()) {
      if (!first) sb.append(", ");
      sb.append("deviceId:");
      if (this.deviceId == null) {
        sb.append("null");
      } else {
        sb.append(this.deviceId);
      }
      first = false;
    }
    if (isSetDeviceSeqId()) {
      if (!first) sb.append(", ");
      sb.append("deviceSeqId:");
      sb.append(this.deviceSeqId);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StepExecutionDataStandardSchemeFactory implements SchemeFactory {
    public StepExecutionDataStandardScheme getScheme() {
      return new StepExecutionDataStandardScheme();
    }
  }

  private static class StepExecutionDataStandardScheme extends StandardScheme<StepExecutionData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, StepExecutionData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STEP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stepId = iprot.readString();
              struct.setStepIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // JOB_BASE_STEP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.jobBaseStepId = iprot.readString();
              struct.setJobBaseStepIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STEP_COMPLETE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.stepComplete = iprot.readBool();
              struct.setStepCompleteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FIELD_EXECUTION_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list41 = iprot.readListBegin();
                struct.fieldExecutionData = new ArrayList<FieldExecutionData>(_list41.size);
                FieldExecutionData _elem42;
                for (int _i43 = 0; _i43 < _list41.size; ++_i43)
                {
                  _elem42 = new FieldExecutionData();
                  _elem42.read(iprot);
                  struct.fieldExecutionData.add(_elem42);
                }
                iprot.readListEnd();
              }
              struct.setFieldExecutionDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IS_COMPLETE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isComplete = iprot.readBool();
              struct.setIsCompleteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // IS_COMPLETE_LAST_UPDATED_BY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.isCompleteLastUpdatedById = iprot.readString();
              struct.setIsCompleteLastUpdatedByIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // IS_COMPLETE_LAST_UPDATED_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.isCompleteLastUpdatedAt = iprot.readI64();
              struct.setIsCompleteLastUpdatedAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // IS_NOT_APPLICABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isNotApplicable = iprot.readBool();
              struct.setIsNotApplicableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // IS_NOT_APPLICABLE_LAST_UPDATED_BY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.isNotApplicableLastUpdatedById = iprot.readString();
              struct.setIsNotApplicableLastUpdatedByIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // IS_NOT_APPLICABLE_LAST_UPDATED_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.isNotApplicableLastUpdatedAt = iprot.readI64();
              struct.setIsNotApplicableLastUpdatedAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SEQ_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.seqId = iprot.readI64();
              struct.setSeqIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 1000: // DEVICE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deviceId = iprot.readString();
              struct.setDeviceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 1001: // DEVICE_SEQ_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.deviceSeqId = iprot.readI64();
              struct.setDeviceSeqIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, StepExecutionData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.stepId != null) {
        oprot.writeFieldBegin(STEP_ID_FIELD_DESC);
        oprot.writeString(struct.stepId);
        oprot.writeFieldEnd();
      }
      if (struct.jobBaseStepId != null) {
        oprot.writeFieldBegin(JOB_BASE_STEP_ID_FIELD_DESC);
        oprot.writeString(struct.jobBaseStepId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STEP_COMPLETE_FIELD_DESC);
      oprot.writeBool(struct.stepComplete);
      oprot.writeFieldEnd();
      if (struct.fieldExecutionData != null) {
        oprot.writeFieldBegin(FIELD_EXECUTION_DATA_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.fieldExecutionData.size()));
          for (FieldExecutionData _iter44 : struct.fieldExecutionData)
          {
            _iter44.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.isSetIsComplete()) {
        oprot.writeFieldBegin(IS_COMPLETE_FIELD_DESC);
        oprot.writeBool(struct.isComplete);
        oprot.writeFieldEnd();
      }
      if (struct.isCompleteLastUpdatedById != null) {
        if (struct.isSetIsCompleteLastUpdatedById()) {
          oprot.writeFieldBegin(IS_COMPLETE_LAST_UPDATED_BY_ID_FIELD_DESC);
          oprot.writeString(struct.isCompleteLastUpdatedById);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIsCompleteLastUpdatedAt()) {
        oprot.writeFieldBegin(IS_COMPLETE_LAST_UPDATED_AT_FIELD_DESC);
        oprot.writeI64(struct.isCompleteLastUpdatedAt);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIsNotApplicable()) {
        oprot.writeFieldBegin(IS_NOT_APPLICABLE_FIELD_DESC);
        oprot.writeBool(struct.isNotApplicable);
        oprot.writeFieldEnd();
      }
      if (struct.isNotApplicableLastUpdatedById != null) {
        if (struct.isSetIsNotApplicableLastUpdatedById()) {
          oprot.writeFieldBegin(IS_NOT_APPLICABLE_LAST_UPDATED_BY_ID_FIELD_DESC);
          oprot.writeString(struct.isNotApplicableLastUpdatedById);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIsNotApplicableLastUpdatedAt()) {
        oprot.writeFieldBegin(IS_NOT_APPLICABLE_LAST_UPDATED_AT_FIELD_DESC);
        oprot.writeI64(struct.isNotApplicableLastUpdatedAt);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SEQ_ID_FIELD_DESC);
      oprot.writeI64(struct.seqId);
      oprot.writeFieldEnd();
      if (struct.deviceId != null) {
        if (struct.isSetDeviceId()) {
          oprot.writeFieldBegin(DEVICE_ID_FIELD_DESC);
          oprot.writeString(struct.deviceId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDeviceSeqId()) {
        oprot.writeFieldBegin(DEVICE_SEQ_ID_FIELD_DESC);
        oprot.writeI64(struct.deviceSeqId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

}

