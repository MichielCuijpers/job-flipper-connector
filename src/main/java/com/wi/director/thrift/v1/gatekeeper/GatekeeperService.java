/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wi.director.thrift.v1.gatekeeper;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class GatekeeperService {

  public interface Iface {

    public PrepareUserResult prepareUserForJobInvite(String teamId, com.wi.director.thrift.v1.user.UserKey userKey, String inviterId, boolean inPlanning) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public PrepareUserResult prepareUserForJobInvite(String teamId, com.wi.director.thrift.v1.user.UserKey userKey, String inviterId, boolean inPlanning) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      send_prepareUserForJobInvite(teamId, userKey, inviterId, inPlanning);
      return recv_prepareUserForJobInvite();
    }

    public void send_prepareUserForJobInvite(String teamId, com.wi.director.thrift.v1.user.UserKey userKey, String inviterId, boolean inPlanning) throws org.apache.thrift.TException
    {
      prepareUserForJobInvite_args args = new prepareUserForJobInvite_args();
      args.setTeamId(teamId);
      args.setUserKey(userKey);
      args.setInviterId(inviterId);
      args.setInPlanning(inPlanning);
      sendBase("prepareUserForJobInvite", args);
    }

    public PrepareUserResult recv_prepareUserForJobInvite() throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      prepareUserForJobInvite_result result = new prepareUserForJobInvite_result();
      receiveBase(result, "prepareUserForJobInvite");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "prepareUserForJobInvite failed: unknown result");
    }

  }
  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("prepareUserForJobInvite", new prepareUserForJobInvite());
      return processMap;
    }

    public static class prepareUserForJobInvite<I extends Iface> extends org.apache.thrift.ProcessFunction<I, prepareUserForJobInvite_args> {
      public prepareUserForJobInvite() {
        super("prepareUserForJobInvite");
      }

      public prepareUserForJobInvite_args getEmptyArgsInstance() {
        return new prepareUserForJobInvite_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public prepareUserForJobInvite_result getResult(I iface, prepareUserForJobInvite_args args) throws org.apache.thrift.TException {
        prepareUserForJobInvite_result result = new prepareUserForJobInvite_result();
        try {
          result.success = iface.prepareUserForJobInvite(args.teamId, args.userKey, args.inviterId, args.inPlanning);
        } catch (com.wi.director.thrift.v1.common.SystemException err) {
          result.err = err;
        }
        return result;
      }
    }

  }

  public static class prepareUserForJobInvite_args implements org.apache.thrift.TBase<prepareUserForJobInvite_args, prepareUserForJobInvite_args._Fields>, java.io.Serializable, Cloneable, Comparable<prepareUserForJobInvite_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("prepareUserForJobInvite_args");

    private static final org.apache.thrift.protocol.TField TEAM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("teamId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("userKey", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField INVITER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("inviterId", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField IN_PLANNING_FIELD_DESC = new org.apache.thrift.protocol.TField("inPlanning", org.apache.thrift.protocol.TType.BOOL, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new prepareUserForJobInvite_argsStandardSchemeFactory());
    }

    public String teamId; // required
    public com.wi.director.thrift.v1.user.UserKey userKey; // required
    public String inviterId; // required
    public boolean inPlanning; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TEAM_ID((short)1, "teamId"),
      USER_KEY((short)2, "userKey"),
      INVITER_ID((short)3, "inviterId"),
      IN_PLANNING((short)4, "inPlanning");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TEAM_ID
            return TEAM_ID;
          case 2: // USER_KEY
            return USER_KEY;
          case 3: // INVITER_ID
            return INVITER_ID;
          case 4: // IN_PLANNING
            return IN_PLANNING;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __INPLANNING_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TEAM_ID, new org.apache.thrift.meta_data.FieldMetaData("teamId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_KEY, new org.apache.thrift.meta_data.FieldMetaData("userKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.user.UserKey.class)));
      tmpMap.put(_Fields.INVITER_ID, new org.apache.thrift.meta_data.FieldMetaData("inviterId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IN_PLANNING, new org.apache.thrift.meta_data.FieldMetaData("inPlanning", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(prepareUserForJobInvite_args.class, metaDataMap);
    }

    public prepareUserForJobInvite_args() {
    }

    public prepareUserForJobInvite_args(
      String teamId,
      com.wi.director.thrift.v1.user.UserKey userKey,
      String inviterId,
      boolean inPlanning)
    {
      this();
      this.teamId = teamId;
      this.userKey = userKey;
      this.inviterId = inviterId;
      this.inPlanning = inPlanning;
      setInPlanningIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public prepareUserForJobInvite_args(prepareUserForJobInvite_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetTeamId()) {
        this.teamId = other.teamId;
      }
      if (other.isSetUserKey()) {
        this.userKey = new com.wi.director.thrift.v1.user.UserKey(other.userKey);
      }
      if (other.isSetInviterId()) {
        this.inviterId = other.inviterId;
      }
      this.inPlanning = other.inPlanning;
    }

    public prepareUserForJobInvite_args deepCopy() {
      return new prepareUserForJobInvite_args(this);
    }

    @Override
    public void clear() {
      this.teamId = null;
      this.userKey = null;
      this.inviterId = null;
      setInPlanningIsSet(false);
      this.inPlanning = false;
    }

    public String getTeamId() {
      return this.teamId;
    }

    public prepareUserForJobInvite_args setTeamId(String teamId) {
      this.teamId = teamId;
      return this;
    }

    public void unsetTeamId() {
      this.teamId = null;
    }

    /** Returns true if field teamId is set (has been assigned a value) and false otherwise */
    public boolean isSetTeamId() {
      return this.teamId != null;
    }

    public void setTeamIdIsSet(boolean value) {
      if (!value) {
        this.teamId = null;
      }
    }

    public com.wi.director.thrift.v1.user.UserKey getUserKey() {
      return this.userKey;
    }

    public prepareUserForJobInvite_args setUserKey(com.wi.director.thrift.v1.user.UserKey userKey) {
      this.userKey = userKey;
      return this;
    }

    public void unsetUserKey() {
      this.userKey = null;
    }

    /** Returns true if field userKey is set (has been assigned a value) and false otherwise */
    public boolean isSetUserKey() {
      return this.userKey != null;
    }

    public void setUserKeyIsSet(boolean value) {
      if (!value) {
        this.userKey = null;
      }
    }

    public String getInviterId() {
      return this.inviterId;
    }

    public prepareUserForJobInvite_args setInviterId(String inviterId) {
      this.inviterId = inviterId;
      return this;
    }

    public void unsetInviterId() {
      this.inviterId = null;
    }

    /** Returns true if field inviterId is set (has been assigned a value) and false otherwise */
    public boolean isSetInviterId() {
      return this.inviterId != null;
    }

    public void setInviterIdIsSet(boolean value) {
      if (!value) {
        this.inviterId = null;
      }
    }

    public boolean isInPlanning() {
      return this.inPlanning;
    }

    public prepareUserForJobInvite_args setInPlanning(boolean inPlanning) {
      this.inPlanning = inPlanning;
      setInPlanningIsSet(true);
      return this;
    }

    public void unsetInPlanning() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INPLANNING_ISSET_ID);
    }

    /** Returns true if field inPlanning is set (has been assigned a value) and false otherwise */
    public boolean isSetInPlanning() {
      return EncodingUtils.testBit(__isset_bitfield, __INPLANNING_ISSET_ID);
    }

    public void setInPlanningIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INPLANNING_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TEAM_ID:
        if (value == null) {
          unsetTeamId();
        } else {
          setTeamId((String)value);
        }
        break;

      case USER_KEY:
        if (value == null) {
          unsetUserKey();
        } else {
          setUserKey((com.wi.director.thrift.v1.user.UserKey)value);
        }
        break;

      case INVITER_ID:
        if (value == null) {
          unsetInviterId();
        } else {
          setInviterId((String)value);
        }
        break;

      case IN_PLANNING:
        if (value == null) {
          unsetInPlanning();
        } else {
          setInPlanning((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TEAM_ID:
        return getTeamId();

      case USER_KEY:
        return getUserKey();

      case INVITER_ID:
        return getInviterId();

      case IN_PLANNING:
        return isInPlanning();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TEAM_ID:
        return isSetTeamId();
      case USER_KEY:
        return isSetUserKey();
      case INVITER_ID:
        return isSetInviterId();
      case IN_PLANNING:
        return isSetInPlanning();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof prepareUserForJobInvite_args)
        return this.equals((prepareUserForJobInvite_args)that);
      return false;
    }

    public boolean equals(prepareUserForJobInvite_args that) {
      if (that == null)
        return false;

      boolean this_present_teamId = true && this.isSetTeamId();
      boolean that_present_teamId = true && that.isSetTeamId();
      if (this_present_teamId || that_present_teamId) {
        if (!(this_present_teamId && that_present_teamId))
          return false;
        if (!this.teamId.equals(that.teamId))
          return false;
      }

      boolean this_present_userKey = true && this.isSetUserKey();
      boolean that_present_userKey = true && that.isSetUserKey();
      if (this_present_userKey || that_present_userKey) {
        if (!(this_present_userKey && that_present_userKey))
          return false;
        if (!this.userKey.equals(that.userKey))
          return false;
      }

      boolean this_present_inviterId = true && this.isSetInviterId();
      boolean that_present_inviterId = true && that.isSetInviterId();
      if (this_present_inviterId || that_present_inviterId) {
        if (!(this_present_inviterId && that_present_inviterId))
          return false;
        if (!this.inviterId.equals(that.inviterId))
          return false;
      }

      boolean this_present_inPlanning = true;
      boolean that_present_inPlanning = true;
      if (this_present_inPlanning || that_present_inPlanning) {
        if (!(this_present_inPlanning && that_present_inPlanning))
          return false;
        if (this.inPlanning != that.inPlanning)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_teamId = true && (isSetTeamId());
      list.add(present_teamId);
      if (present_teamId)
        list.add(teamId);

      boolean present_userKey = true && (isSetUserKey());
      list.add(present_userKey);
      if (present_userKey)
        list.add(userKey);

      boolean present_inviterId = true && (isSetInviterId());
      list.add(present_inviterId);
      if (present_inviterId)
        list.add(inviterId);

      boolean present_inPlanning = true;
      list.add(present_inPlanning);
      if (present_inPlanning)
        list.add(inPlanning);

      return list.hashCode();
    }

    @Override
    public int compareTo(prepareUserForJobInvite_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTeamId()).compareTo(other.isSetTeamId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTeamId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teamId, other.teamId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserKey()).compareTo(other.isSetUserKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userKey, other.userKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetInviterId()).compareTo(other.isSetInviterId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInviterId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inviterId, other.inviterId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetInPlanning()).compareTo(other.isSetInPlanning());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInPlanning()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inPlanning, other.inPlanning);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("prepareUserForJobInvite_args(");
      boolean first = true;

      sb.append("teamId:");
      if (this.teamId == null) {
        sb.append("null");
      } else {
        sb.append(this.teamId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userKey:");
      if (this.userKey == null) {
        sb.append("null");
      } else {
        sb.append(this.userKey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("inviterId:");
      if (this.inviterId == null) {
        sb.append("null");
      } else {
        sb.append(this.inviterId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("inPlanning:");
      sb.append(this.inPlanning);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class prepareUserForJobInvite_argsStandardSchemeFactory implements SchemeFactory {
      public prepareUserForJobInvite_argsStandardScheme getScheme() {
        return new prepareUserForJobInvite_argsStandardScheme();
      }
    }

    private static class prepareUserForJobInvite_argsStandardScheme extends StandardScheme<prepareUserForJobInvite_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, prepareUserForJobInvite_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TEAM_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.teamId = iprot.readString();
                struct.setTeamIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userKey = new com.wi.director.thrift.v1.user.UserKey();
                struct.userKey.read(iprot);
                struct.setUserKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // INVITER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.inviterId = iprot.readString();
                struct.setInviterIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // IN_PLANNING
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.inPlanning = iprot.readBool();
                struct.setInPlanningIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, prepareUserForJobInvite_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.teamId != null) {
          oprot.writeFieldBegin(TEAM_ID_FIELD_DESC);
          oprot.writeString(struct.teamId);
          oprot.writeFieldEnd();
        }
        if (struct.userKey != null) {
          oprot.writeFieldBegin(USER_KEY_FIELD_DESC);
          struct.userKey.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.inviterId != null) {
          oprot.writeFieldBegin(INVITER_ID_FIELD_DESC);
          oprot.writeString(struct.inviterId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(IN_PLANNING_FIELD_DESC);
        oprot.writeBool(struct.inPlanning);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class prepareUserForJobInvite_result implements org.apache.thrift.TBase<prepareUserForJobInvite_result, prepareUserForJobInvite_result._Fields>, java.io.Serializable, Cloneable, Comparable<prepareUserForJobInvite_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("prepareUserForJobInvite_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new prepareUserForJobInvite_resultStandardSchemeFactory());
    }

    public PrepareUserResult success; // required
    public com.wi.director.thrift.v1.common.SystemException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PrepareUserResult.class)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(prepareUserForJobInvite_result.class, metaDataMap);
    }

    public prepareUserForJobInvite_result() {
    }

    public prepareUserForJobInvite_result(
      PrepareUserResult success,
      com.wi.director.thrift.v1.common.SystemException err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public prepareUserForJobInvite_result(prepareUserForJobInvite_result other) {
      if (other.isSetSuccess()) {
        this.success = new PrepareUserResult(other.success);
      }
      if (other.isSetErr()) {
        this.err = new com.wi.director.thrift.v1.common.SystemException(other.err);
      }
    }

    public prepareUserForJobInvite_result deepCopy() {
      return new prepareUserForJobInvite_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public PrepareUserResult getSuccess() {
      return this.success;
    }

    public prepareUserForJobInvite_result setSuccess(PrepareUserResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.wi.director.thrift.v1.common.SystemException getErr() {
      return this.err;
    }

    public prepareUserForJobInvite_result setErr(com.wi.director.thrift.v1.common.SystemException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((PrepareUserResult)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((com.wi.director.thrift.v1.common.SystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof prepareUserForJobInvite_result)
        return this.equals((prepareUserForJobInvite_result)that);
      return false;
    }

    public boolean equals(prepareUserForJobInvite_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(prepareUserForJobInvite_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("prepareUserForJobInvite_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class prepareUserForJobInvite_resultStandardSchemeFactory implements SchemeFactory {
      public prepareUserForJobInvite_resultStandardScheme getScheme() {
        return new prepareUserForJobInvite_resultStandardScheme();
      }
    }

    private static class prepareUserForJobInvite_resultStandardScheme extends StandardScheme<prepareUserForJobInvite_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, prepareUserForJobInvite_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new PrepareUserResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new com.wi.director.thrift.v1.common.SystemException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, prepareUserForJobInvite_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

}
