/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wi.director.thrift.v1.jobtemplate;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * Mutable parts of the job template
 */
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class JobTemplateParams implements org.apache.thrift.TBase<JobTemplateParams, JobTemplateParams._Fields>, java.io.Serializable, Cloneable, Comparable<JobTemplateParams> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("JobTemplateParams");

  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField DESCRIP_FIELD_DESC = new org.apache.thrift.protocol.TField("descrip", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField METADATA_ENTRY_FIELD_DESC = new org.apache.thrift.protocol.TField("metadataEntry", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField TYP_FIELD_DESC = new org.apache.thrift.protocol.TField("typ", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new JobTemplateParamsStandardSchemeFactory());
  }

  /**
   * Name of the job template. This is required on creation.
   */
  public String title; // optional
  /**
   * Description of the job template
   */
  public String descrip; // optional
  /**
   * Metadata for the job template
   */
  public List<com.wi.director.thrift.v1.metadata.MetadataEntry> metadataEntry; // optional
  /**
   * Template type, cannot be updated
   * 
   * @see TemplateType
   */
  public TemplateType typ; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * Name of the job template. This is required on creation.
     */
    TITLE((short)1, "title"),
    /**
     * Description of the job template
     */
    DESCRIP((short)2, "descrip"),
    /**
     * Metadata for the job template
     */
    METADATA_ENTRY((short)3, "metadataEntry"),
    /**
     * Template type, cannot be updated
     * 
     * @see TemplateType
     */
    TYP((short)4, "typ");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TITLE
          return TITLE;
        case 2: // DESCRIP
          return DESCRIP;
        case 3: // METADATA_ENTRY
          return METADATA_ENTRY;
        case 4: // TYP
          return TYP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.TITLE,_Fields.DESCRIP,_Fields.METADATA_ENTRY,_Fields.TYP};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRIP, new org.apache.thrift.meta_data.FieldMetaData("descrip", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.METADATA_ENTRY, new org.apache.thrift.meta_data.FieldMetaData("metadataEntry", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.metadata.MetadataEntry.class))));
    tmpMap.put(_Fields.TYP, new org.apache.thrift.meta_data.FieldMetaData("typ", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TemplateType.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(JobTemplateParams.class, metaDataMap);
  }

  public JobTemplateParams() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public JobTemplateParams(JobTemplateParams other) {
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    if (other.isSetDescrip()) {
      this.descrip = other.descrip;
    }
    if (other.isSetMetadataEntry()) {
      List<com.wi.director.thrift.v1.metadata.MetadataEntry> __this__metadataEntry = new ArrayList<com.wi.director.thrift.v1.metadata.MetadataEntry>(other.metadataEntry.size());
      for (com.wi.director.thrift.v1.metadata.MetadataEntry other_element : other.metadataEntry) {
        __this__metadataEntry.add(new com.wi.director.thrift.v1.metadata.MetadataEntry(other_element));
      }
      this.metadataEntry = __this__metadataEntry;
    }
    if (other.isSetTyp()) {
      this.typ = other.typ;
    }
  }

  public JobTemplateParams deepCopy() {
    return new JobTemplateParams(this);
  }

  @Override
  public void clear() {
    this.title = null;
    this.descrip = null;
    this.metadataEntry = null;
    this.typ = null;
  }

  /**
   * Name of the job template. This is required on creation.
   */
  public String getTitle() {
    return this.title;
  }

  /**
   * Name of the job template. This is required on creation.
   */
  public JobTemplateParams setTitle(String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  /**
   * Description of the job template
   */
  public String getDescrip() {
    return this.descrip;
  }

  /**
   * Description of the job template
   */
  public JobTemplateParams setDescrip(String descrip) {
    this.descrip = descrip;
    return this;
  }

  public void unsetDescrip() {
    this.descrip = null;
  }

  /** Returns true if field descrip is set (has been assigned a value) and false otherwise */
  public boolean isSetDescrip() {
    return this.descrip != null;
  }

  public void setDescripIsSet(boolean value) {
    if (!value) {
      this.descrip = null;
    }
  }

  public int getMetadataEntrySize() {
    return (this.metadataEntry == null) ? 0 : this.metadataEntry.size();
  }

  public java.util.Iterator<com.wi.director.thrift.v1.metadata.MetadataEntry> getMetadataEntryIterator() {
    return (this.metadataEntry == null) ? null : this.metadataEntry.iterator();
  }

  public void addToMetadataEntry(com.wi.director.thrift.v1.metadata.MetadataEntry elem) {
    if (this.metadataEntry == null) {
      this.metadataEntry = new ArrayList<com.wi.director.thrift.v1.metadata.MetadataEntry>();
    }
    this.metadataEntry.add(elem);
  }

  /**
   * Metadata for the job template
   */
  public List<com.wi.director.thrift.v1.metadata.MetadataEntry> getMetadataEntry() {
    return this.metadataEntry;
  }

  /**
   * Metadata for the job template
   */
  public JobTemplateParams setMetadataEntry(List<com.wi.director.thrift.v1.metadata.MetadataEntry> metadataEntry) {
    this.metadataEntry = metadataEntry;
    return this;
  }

  public void unsetMetadataEntry() {
    this.metadataEntry = null;
  }

  /** Returns true if field metadataEntry is set (has been assigned a value) and false otherwise */
  public boolean isSetMetadataEntry() {
    return this.metadataEntry != null;
  }

  public void setMetadataEntryIsSet(boolean value) {
    if (!value) {
      this.metadataEntry = null;
    }
  }

  /**
   * Template type, cannot be updated
   * 
   * @see TemplateType
   */
  public TemplateType getTyp() {
    return this.typ;
  }

  /**
   * Template type, cannot be updated
   * 
   * @see TemplateType
   */
  public JobTemplateParams setTyp(TemplateType typ) {
    this.typ = typ;
    return this;
  }

  public void unsetTyp() {
    this.typ = null;
  }

  /** Returns true if field typ is set (has been assigned a value) and false otherwise */
  public boolean isSetTyp() {
    return this.typ != null;
  }

  public void setTypIsSet(boolean value) {
    if (!value) {
      this.typ = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((String)value);
      }
      break;

    case DESCRIP:
      if (value == null) {
        unsetDescrip();
      } else {
        setDescrip((String)value);
      }
      break;

    case METADATA_ENTRY:
      if (value == null) {
        unsetMetadataEntry();
      } else {
        setMetadataEntry((List<com.wi.director.thrift.v1.metadata.MetadataEntry>)value);
      }
      break;

    case TYP:
      if (value == null) {
        unsetTyp();
      } else {
        setTyp((TemplateType)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TITLE:
      return getTitle();

    case DESCRIP:
      return getDescrip();

    case METADATA_ENTRY:
      return getMetadataEntry();

    case TYP:
      return getTyp();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TITLE:
      return isSetTitle();
    case DESCRIP:
      return isSetDescrip();
    case METADATA_ENTRY:
      return isSetMetadataEntry();
    case TYP:
      return isSetTyp();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof JobTemplateParams)
      return this.equals((JobTemplateParams)that);
    return false;
  }

  public boolean equals(JobTemplateParams that) {
    if (that == null)
      return false;

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_descrip = true && this.isSetDescrip();
    boolean that_present_descrip = true && that.isSetDescrip();
    if (this_present_descrip || that_present_descrip) {
      if (!(this_present_descrip && that_present_descrip))
        return false;
      if (!this.descrip.equals(that.descrip))
        return false;
    }

    boolean this_present_metadataEntry = true && this.isSetMetadataEntry();
    boolean that_present_metadataEntry = true && that.isSetMetadataEntry();
    if (this_present_metadataEntry || that_present_metadataEntry) {
      if (!(this_present_metadataEntry && that_present_metadataEntry))
        return false;
      if (!this.metadataEntry.equals(that.metadataEntry))
        return false;
    }

    boolean this_present_typ = true && this.isSetTyp();
    boolean that_present_typ = true && that.isSetTyp();
    if (this_present_typ || that_present_typ) {
      if (!(this_present_typ && that_present_typ))
        return false;
      if (!this.typ.equals(that.typ))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_title = true && (isSetTitle());
    list.add(present_title);
    if (present_title)
      list.add(title);

    boolean present_descrip = true && (isSetDescrip());
    list.add(present_descrip);
    if (present_descrip)
      list.add(descrip);

    boolean present_metadataEntry = true && (isSetMetadataEntry());
    list.add(present_metadataEntry);
    if (present_metadataEntry)
      list.add(metadataEntry);

    boolean present_typ = true && (isSetTyp());
    list.add(present_typ);
    if (present_typ)
      list.add(typ.getValue());

    return list.hashCode();
  }

  @Override
  public int compareTo(JobTemplateParams other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTitle()).compareTo(other.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescrip()).compareTo(other.isSetDescrip());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescrip()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.descrip, other.descrip);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMetadataEntry()).compareTo(other.isSetMetadataEntry());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMetadataEntry()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metadataEntry, other.metadataEntry);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTyp()).compareTo(other.isSetTyp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTyp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.typ, other.typ);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("JobTemplateParams(");
    boolean first = true;

    if (isSetTitle()) {
      sb.append("title:");
      if (this.title == null) {
        sb.append("null");
      } else {
        sb.append(this.title);
      }
      first = false;
    }
    if (isSetDescrip()) {
      if (!first) sb.append(", ");
      sb.append("descrip:");
      if (this.descrip == null) {
        sb.append("null");
      } else {
        sb.append(this.descrip);
      }
      first = false;
    }
    if (isSetMetadataEntry()) {
      if (!first) sb.append(", ");
      sb.append("metadataEntry:");
      if (this.metadataEntry == null) {
        sb.append("null");
      } else {
        sb.append(this.metadataEntry);
      }
      first = false;
    }
    if (isSetTyp()) {
      if (!first) sb.append(", ");
      sb.append("typ:");
      if (this.typ == null) {
        sb.append("null");
      } else {
        sb.append(this.typ);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class JobTemplateParamsStandardSchemeFactory implements SchemeFactory {
    public JobTemplateParamsStandardScheme getScheme() {
      return new JobTemplateParamsStandardScheme();
    }
  }

  private static class JobTemplateParamsStandardScheme extends StandardScheme<JobTemplateParams> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, JobTemplateParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DESCRIP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.descrip = iprot.readString();
              struct.setDescripIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // METADATA_ENTRY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.metadataEntry = new ArrayList<com.wi.director.thrift.v1.metadata.MetadataEntry>(_list0.size);
                com.wi.director.thrift.v1.metadata.MetadataEntry _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new com.wi.director.thrift.v1.metadata.MetadataEntry();
                  _elem1.read(iprot);
                  struct.metadataEntry.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setMetadataEntryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TYP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.typ = com.wi.director.thrift.v1.jobtemplate.TemplateType.findByValue(iprot.readI32());
              struct.setTypIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, JobTemplateParams struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.title != null) {
        if (struct.isSetTitle()) {
          oprot.writeFieldBegin(TITLE_FIELD_DESC);
          oprot.writeString(struct.title);
          oprot.writeFieldEnd();
        }
      }
      if (struct.descrip != null) {
        if (struct.isSetDescrip()) {
          oprot.writeFieldBegin(DESCRIP_FIELD_DESC);
          oprot.writeString(struct.descrip);
          oprot.writeFieldEnd();
        }
      }
      if (struct.metadataEntry != null) {
        if (struct.isSetMetadataEntry()) {
          oprot.writeFieldBegin(METADATA_ENTRY_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.metadataEntry.size()));
            for (com.wi.director.thrift.v1.metadata.MetadataEntry _iter3 : struct.metadataEntry)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.typ != null) {
        if (struct.isSetTyp()) {
          oprot.writeFieldBegin(TYP_FIELD_DESC);
          oprot.writeI32(struct.typ.getValue());
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

}

