/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wi.director.thrift.v1.setting;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class SettingChangesPage implements org.apache.thrift.TBase<SettingChangesPage, SettingChangesPage._Fields>, java.io.Serializable, Cloneable, Comparable<SettingChangesPage> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SettingChangesPage");

  private static final org.apache.thrift.protocol.TField CHANGES_FIELD_DESC = new org.apache.thrift.protocol.TField("changes", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField PAGE_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("pageInfo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SettingChangesPageStandardSchemeFactory());
  }

  public List<SettingChange> changes; // required
  public com.wi.director.thrift.v1.common.PageInfo pageInfo; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CHANGES((short)1, "changes"),
    PAGE_INFO((short)2, "pageInfo");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CHANGES
          return CHANGES;
        case 2: // PAGE_INFO
          return PAGE_INFO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.PAGE_INFO};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CHANGES, new org.apache.thrift.meta_data.FieldMetaData("changes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SettingChange.class))));
    tmpMap.put(_Fields.PAGE_INFO, new org.apache.thrift.meta_data.FieldMetaData("pageInfo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.common.PageInfo.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SettingChangesPage.class, metaDataMap);
  }

  public SettingChangesPage() {
  }

  public SettingChangesPage(
    List<SettingChange> changes)
  {
    this();
    this.changes = changes;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SettingChangesPage(SettingChangesPage other) {
    if (other.isSetChanges()) {
      List<SettingChange> __this__changes = new ArrayList<SettingChange>(other.changes.size());
      for (SettingChange other_element : other.changes) {
        __this__changes.add(new SettingChange(other_element));
      }
      this.changes = __this__changes;
    }
    if (other.isSetPageInfo()) {
      this.pageInfo = new com.wi.director.thrift.v1.common.PageInfo(other.pageInfo);
    }
  }

  public SettingChangesPage deepCopy() {
    return new SettingChangesPage(this);
  }

  @Override
  public void clear() {
    this.changes = null;
    this.pageInfo = null;
  }

  public int getChangesSize() {
    return (this.changes == null) ? 0 : this.changes.size();
  }

  public java.util.Iterator<SettingChange> getChangesIterator() {
    return (this.changes == null) ? null : this.changes.iterator();
  }

  public void addToChanges(SettingChange elem) {
    if (this.changes == null) {
      this.changes = new ArrayList<SettingChange>();
    }
    this.changes.add(elem);
  }

  public List<SettingChange> getChanges() {
    return this.changes;
  }

  public SettingChangesPage setChanges(List<SettingChange> changes) {
    this.changes = changes;
    return this;
  }

  public void unsetChanges() {
    this.changes = null;
  }

  /** Returns true if field changes is set (has been assigned a value) and false otherwise */
  public boolean isSetChanges() {
    return this.changes != null;
  }

  public void setChangesIsSet(boolean value) {
    if (!value) {
      this.changes = null;
    }
  }

  public com.wi.director.thrift.v1.common.PageInfo getPageInfo() {
    return this.pageInfo;
  }

  public SettingChangesPage setPageInfo(com.wi.director.thrift.v1.common.PageInfo pageInfo) {
    this.pageInfo = pageInfo;
    return this;
  }

  public void unsetPageInfo() {
    this.pageInfo = null;
  }

  /** Returns true if field pageInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetPageInfo() {
    return this.pageInfo != null;
  }

  public void setPageInfoIsSet(boolean value) {
    if (!value) {
      this.pageInfo = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CHANGES:
      if (value == null) {
        unsetChanges();
      } else {
        setChanges((List<SettingChange>)value);
      }
      break;

    case PAGE_INFO:
      if (value == null) {
        unsetPageInfo();
      } else {
        setPageInfo((com.wi.director.thrift.v1.common.PageInfo)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CHANGES:
      return getChanges();

    case PAGE_INFO:
      return getPageInfo();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CHANGES:
      return isSetChanges();
    case PAGE_INFO:
      return isSetPageInfo();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SettingChangesPage)
      return this.equals((SettingChangesPage)that);
    return false;
  }

  public boolean equals(SettingChangesPage that) {
    if (that == null)
      return false;

    boolean this_present_changes = true && this.isSetChanges();
    boolean that_present_changes = true && that.isSetChanges();
    if (this_present_changes || that_present_changes) {
      if (!(this_present_changes && that_present_changes))
        return false;
      if (!this.changes.equals(that.changes))
        return false;
    }

    boolean this_present_pageInfo = true && this.isSetPageInfo();
    boolean that_present_pageInfo = true && that.isSetPageInfo();
    if (this_present_pageInfo || that_present_pageInfo) {
      if (!(this_present_pageInfo && that_present_pageInfo))
        return false;
      if (!this.pageInfo.equals(that.pageInfo))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_changes = true && (isSetChanges());
    list.add(present_changes);
    if (present_changes)
      list.add(changes);

    boolean present_pageInfo = true && (isSetPageInfo());
    list.add(present_pageInfo);
    if (present_pageInfo)
      list.add(pageInfo);

    return list.hashCode();
  }

  @Override
  public int compareTo(SettingChangesPage other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetChanges()).compareTo(other.isSetChanges());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChanges()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.changes, other.changes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPageInfo()).compareTo(other.isSetPageInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPageInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageInfo, other.pageInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SettingChangesPage(");
    boolean first = true;

    sb.append("changes:");
    if (this.changes == null) {
      sb.append("null");
    } else {
      sb.append(this.changes);
    }
    first = false;
    if (isSetPageInfo()) {
      if (!first) sb.append(", ");
      sb.append("pageInfo:");
      if (this.pageInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.pageInfo);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (pageInfo != null) {
      pageInfo.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SettingChangesPageStandardSchemeFactory implements SchemeFactory {
    public SettingChangesPageStandardScheme getScheme() {
      return new SettingChangesPageStandardScheme();
    }
  }

  private static class SettingChangesPageStandardScheme extends StandardScheme<SettingChangesPage> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SettingChangesPage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CHANGES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list19 = iprot.readListBegin();
                struct.changes = new ArrayList<SettingChange>(_list19.size);
                SettingChange _elem20;
                for (int _i21 = 0; _i21 < _list19.size; ++_i21)
                {
                  _elem20 = new SettingChange();
                  _elem20.read(iprot);
                  struct.changes.add(_elem20);
                }
                iprot.readListEnd();
              }
              struct.setChangesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PAGE_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.pageInfo = new com.wi.director.thrift.v1.common.PageInfo();
              struct.pageInfo.read(iprot);
              struct.setPageInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SettingChangesPage struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.changes != null) {
        oprot.writeFieldBegin(CHANGES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.changes.size()));
          for (SettingChange _iter22 : struct.changes)
          {
            _iter22.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.pageInfo != null) {
        if (struct.isSetPageInfo()) {
          oprot.writeFieldBegin(PAGE_INFO_FIELD_DESC);
          struct.pageInfo.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

}

