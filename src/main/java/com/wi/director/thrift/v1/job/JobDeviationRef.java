/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wi.director.thrift.v1.job;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * A combination of ids are used based on deviation type
 */
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class JobDeviationRef implements org.apache.thrift.TBase<JobDeviationRef, JobDeviationRef._Fields>, java.io.Serializable, Cloneable, Comparable<JobDeviationRef> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("JobDeviationRef");

  private static final org.apache.thrift.protocol.TField DEVIATION_STEP_GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("deviationStepGroupId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField DEVIATION_STEP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("deviationStepId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DEVIATION_STEP_FIELD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("deviationStepFieldId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SOURCE_STEP_GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sourceStepGroupId", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField SOURCE_STEP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sourceStepId", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField SOURCE_TEMPLATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sourceTemplateId", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField SOURCE_TEMPLATE_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("sourceTemplateVersion", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField TEMPLATE_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("templateIndex", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField HIERARCHY_POSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("hierarchyPosition", org.apache.thrift.protocol.TType.STRING, (short)16);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new JobDeviationRefStandardSchemeFactory());
  }

  public String deviationStepGroupId; // optional
  public String deviationStepId; // optional
  public String deviationStepFieldId; // optional
  public String sourceStepGroupId; // optional
  public String sourceStepId; // optional
  public String sourceTemplateId; // optional
  public int sourceTemplateVersion; // optional
  public int templateIndex; // optional
  public String hierarchyPosition; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DEVIATION_STEP_GROUP_ID((short)1, "deviationStepGroupId"),
    DEVIATION_STEP_ID((short)2, "deviationStepId"),
    DEVIATION_STEP_FIELD_ID((short)3, "deviationStepFieldId"),
    SOURCE_STEP_GROUP_ID((short)11, "sourceStepGroupId"),
    SOURCE_STEP_ID((short)12, "sourceStepId"),
    SOURCE_TEMPLATE_ID((short)13, "sourceTemplateId"),
    SOURCE_TEMPLATE_VERSION((short)14, "sourceTemplateVersion"),
    TEMPLATE_INDEX((short)15, "templateIndex"),
    HIERARCHY_POSITION((short)16, "hierarchyPosition");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DEVIATION_STEP_GROUP_ID
          return DEVIATION_STEP_GROUP_ID;
        case 2: // DEVIATION_STEP_ID
          return DEVIATION_STEP_ID;
        case 3: // DEVIATION_STEP_FIELD_ID
          return DEVIATION_STEP_FIELD_ID;
        case 11: // SOURCE_STEP_GROUP_ID
          return SOURCE_STEP_GROUP_ID;
        case 12: // SOURCE_STEP_ID
          return SOURCE_STEP_ID;
        case 13: // SOURCE_TEMPLATE_ID
          return SOURCE_TEMPLATE_ID;
        case 14: // SOURCE_TEMPLATE_VERSION
          return SOURCE_TEMPLATE_VERSION;
        case 15: // TEMPLATE_INDEX
          return TEMPLATE_INDEX;
        case 16: // HIERARCHY_POSITION
          return HIERARCHY_POSITION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SOURCETEMPLATEVERSION_ISSET_ID = 0;
  private static final int __TEMPLATEINDEX_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.DEVIATION_STEP_GROUP_ID,_Fields.DEVIATION_STEP_ID,_Fields.DEVIATION_STEP_FIELD_ID,_Fields.SOURCE_STEP_GROUP_ID,_Fields.SOURCE_STEP_ID,_Fields.SOURCE_TEMPLATE_ID,_Fields.SOURCE_TEMPLATE_VERSION,_Fields.TEMPLATE_INDEX,_Fields.HIERARCHY_POSITION};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DEVIATION_STEP_GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("deviationStepGroupId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEVIATION_STEP_ID, new org.apache.thrift.meta_data.FieldMetaData("deviationStepId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEVIATION_STEP_FIELD_ID, new org.apache.thrift.meta_data.FieldMetaData("deviationStepFieldId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SOURCE_STEP_GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("sourceStepGroupId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SOURCE_STEP_ID, new org.apache.thrift.meta_data.FieldMetaData("sourceStepId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SOURCE_TEMPLATE_ID, new org.apache.thrift.meta_data.FieldMetaData("sourceTemplateId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SOURCE_TEMPLATE_VERSION, new org.apache.thrift.meta_data.FieldMetaData("sourceTemplateVersion", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TEMPLATE_INDEX, new org.apache.thrift.meta_data.FieldMetaData("templateIndex", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HIERARCHY_POSITION, new org.apache.thrift.meta_data.FieldMetaData("hierarchyPosition", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(JobDeviationRef.class, metaDataMap);
  }

  public JobDeviationRef() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public JobDeviationRef(JobDeviationRef other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetDeviationStepGroupId()) {
      this.deviationStepGroupId = other.deviationStepGroupId;
    }
    if (other.isSetDeviationStepId()) {
      this.deviationStepId = other.deviationStepId;
    }
    if (other.isSetDeviationStepFieldId()) {
      this.deviationStepFieldId = other.deviationStepFieldId;
    }
    if (other.isSetSourceStepGroupId()) {
      this.sourceStepGroupId = other.sourceStepGroupId;
    }
    if (other.isSetSourceStepId()) {
      this.sourceStepId = other.sourceStepId;
    }
    if (other.isSetSourceTemplateId()) {
      this.sourceTemplateId = other.sourceTemplateId;
    }
    this.sourceTemplateVersion = other.sourceTemplateVersion;
    this.templateIndex = other.templateIndex;
    if (other.isSetHierarchyPosition()) {
      this.hierarchyPosition = other.hierarchyPosition;
    }
  }

  public JobDeviationRef deepCopy() {
    return new JobDeviationRef(this);
  }

  @Override
  public void clear() {
    this.deviationStepGroupId = null;
    this.deviationStepId = null;
    this.deviationStepFieldId = null;
    this.sourceStepGroupId = null;
    this.sourceStepId = null;
    this.sourceTemplateId = null;
    setSourceTemplateVersionIsSet(false);
    this.sourceTemplateVersion = 0;
    setTemplateIndexIsSet(false);
    this.templateIndex = 0;
    this.hierarchyPosition = null;
  }

  public String getDeviationStepGroupId() {
    return this.deviationStepGroupId;
  }

  public JobDeviationRef setDeviationStepGroupId(String deviationStepGroupId) {
    this.deviationStepGroupId = deviationStepGroupId;
    return this;
  }

  public void unsetDeviationStepGroupId() {
    this.deviationStepGroupId = null;
  }

  /** Returns true if field deviationStepGroupId is set (has been assigned a value) and false otherwise */
  public boolean isSetDeviationStepGroupId() {
    return this.deviationStepGroupId != null;
  }

  public void setDeviationStepGroupIdIsSet(boolean value) {
    if (!value) {
      this.deviationStepGroupId = null;
    }
  }

  public String getDeviationStepId() {
    return this.deviationStepId;
  }

  public JobDeviationRef setDeviationStepId(String deviationStepId) {
    this.deviationStepId = deviationStepId;
    return this;
  }

  public void unsetDeviationStepId() {
    this.deviationStepId = null;
  }

  /** Returns true if field deviationStepId is set (has been assigned a value) and false otherwise */
  public boolean isSetDeviationStepId() {
    return this.deviationStepId != null;
  }

  public void setDeviationStepIdIsSet(boolean value) {
    if (!value) {
      this.deviationStepId = null;
    }
  }

  public String getDeviationStepFieldId() {
    return this.deviationStepFieldId;
  }

  public JobDeviationRef setDeviationStepFieldId(String deviationStepFieldId) {
    this.deviationStepFieldId = deviationStepFieldId;
    return this;
  }

  public void unsetDeviationStepFieldId() {
    this.deviationStepFieldId = null;
  }

  /** Returns true if field deviationStepFieldId is set (has been assigned a value) and false otherwise */
  public boolean isSetDeviationStepFieldId() {
    return this.deviationStepFieldId != null;
  }

  public void setDeviationStepFieldIdIsSet(boolean value) {
    if (!value) {
      this.deviationStepFieldId = null;
    }
  }

  public String getSourceStepGroupId() {
    return this.sourceStepGroupId;
  }

  public JobDeviationRef setSourceStepGroupId(String sourceStepGroupId) {
    this.sourceStepGroupId = sourceStepGroupId;
    return this;
  }

  public void unsetSourceStepGroupId() {
    this.sourceStepGroupId = null;
  }

  /** Returns true if field sourceStepGroupId is set (has been assigned a value) and false otherwise */
  public boolean isSetSourceStepGroupId() {
    return this.sourceStepGroupId != null;
  }

  public void setSourceStepGroupIdIsSet(boolean value) {
    if (!value) {
      this.sourceStepGroupId = null;
    }
  }

  public String getSourceStepId() {
    return this.sourceStepId;
  }

  public JobDeviationRef setSourceStepId(String sourceStepId) {
    this.sourceStepId = sourceStepId;
    return this;
  }

  public void unsetSourceStepId() {
    this.sourceStepId = null;
  }

  /** Returns true if field sourceStepId is set (has been assigned a value) and false otherwise */
  public boolean isSetSourceStepId() {
    return this.sourceStepId != null;
  }

  public void setSourceStepIdIsSet(boolean value) {
    if (!value) {
      this.sourceStepId = null;
    }
  }

  public String getSourceTemplateId() {
    return this.sourceTemplateId;
  }

  public JobDeviationRef setSourceTemplateId(String sourceTemplateId) {
    this.sourceTemplateId = sourceTemplateId;
    return this;
  }

  public void unsetSourceTemplateId() {
    this.sourceTemplateId = null;
  }

  /** Returns true if field sourceTemplateId is set (has been assigned a value) and false otherwise */
  public boolean isSetSourceTemplateId() {
    return this.sourceTemplateId != null;
  }

  public void setSourceTemplateIdIsSet(boolean value) {
    if (!value) {
      this.sourceTemplateId = null;
    }
  }

  public int getSourceTemplateVersion() {
    return this.sourceTemplateVersion;
  }

  public JobDeviationRef setSourceTemplateVersion(int sourceTemplateVersion) {
    this.sourceTemplateVersion = sourceTemplateVersion;
    setSourceTemplateVersionIsSet(true);
    return this;
  }

  public void unsetSourceTemplateVersion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SOURCETEMPLATEVERSION_ISSET_ID);
  }

  /** Returns true if field sourceTemplateVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetSourceTemplateVersion() {
    return EncodingUtils.testBit(__isset_bitfield, __SOURCETEMPLATEVERSION_ISSET_ID);
  }

  public void setSourceTemplateVersionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SOURCETEMPLATEVERSION_ISSET_ID, value);
  }

  public int getTemplateIndex() {
    return this.templateIndex;
  }

  public JobDeviationRef setTemplateIndex(int templateIndex) {
    this.templateIndex = templateIndex;
    setTemplateIndexIsSet(true);
    return this;
  }

  public void unsetTemplateIndex() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TEMPLATEINDEX_ISSET_ID);
  }

  /** Returns true if field templateIndex is set (has been assigned a value) and false otherwise */
  public boolean isSetTemplateIndex() {
    return EncodingUtils.testBit(__isset_bitfield, __TEMPLATEINDEX_ISSET_ID);
  }

  public void setTemplateIndexIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TEMPLATEINDEX_ISSET_ID, value);
  }

  public String getHierarchyPosition() {
    return this.hierarchyPosition;
  }

  public JobDeviationRef setHierarchyPosition(String hierarchyPosition) {
    this.hierarchyPosition = hierarchyPosition;
    return this;
  }

  public void unsetHierarchyPosition() {
    this.hierarchyPosition = null;
  }

  /** Returns true if field hierarchyPosition is set (has been assigned a value) and false otherwise */
  public boolean isSetHierarchyPosition() {
    return this.hierarchyPosition != null;
  }

  public void setHierarchyPositionIsSet(boolean value) {
    if (!value) {
      this.hierarchyPosition = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DEVIATION_STEP_GROUP_ID:
      if (value == null) {
        unsetDeviationStepGroupId();
      } else {
        setDeviationStepGroupId((String)value);
      }
      break;

    case DEVIATION_STEP_ID:
      if (value == null) {
        unsetDeviationStepId();
      } else {
        setDeviationStepId((String)value);
      }
      break;

    case DEVIATION_STEP_FIELD_ID:
      if (value == null) {
        unsetDeviationStepFieldId();
      } else {
        setDeviationStepFieldId((String)value);
      }
      break;

    case SOURCE_STEP_GROUP_ID:
      if (value == null) {
        unsetSourceStepGroupId();
      } else {
        setSourceStepGroupId((String)value);
      }
      break;

    case SOURCE_STEP_ID:
      if (value == null) {
        unsetSourceStepId();
      } else {
        setSourceStepId((String)value);
      }
      break;

    case SOURCE_TEMPLATE_ID:
      if (value == null) {
        unsetSourceTemplateId();
      } else {
        setSourceTemplateId((String)value);
      }
      break;

    case SOURCE_TEMPLATE_VERSION:
      if (value == null) {
        unsetSourceTemplateVersion();
      } else {
        setSourceTemplateVersion((Integer)value);
      }
      break;

    case TEMPLATE_INDEX:
      if (value == null) {
        unsetTemplateIndex();
      } else {
        setTemplateIndex((Integer)value);
      }
      break;

    case HIERARCHY_POSITION:
      if (value == null) {
        unsetHierarchyPosition();
      } else {
        setHierarchyPosition((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DEVIATION_STEP_GROUP_ID:
      return getDeviationStepGroupId();

    case DEVIATION_STEP_ID:
      return getDeviationStepId();

    case DEVIATION_STEP_FIELD_ID:
      return getDeviationStepFieldId();

    case SOURCE_STEP_GROUP_ID:
      return getSourceStepGroupId();

    case SOURCE_STEP_ID:
      return getSourceStepId();

    case SOURCE_TEMPLATE_ID:
      return getSourceTemplateId();

    case SOURCE_TEMPLATE_VERSION:
      return getSourceTemplateVersion();

    case TEMPLATE_INDEX:
      return getTemplateIndex();

    case HIERARCHY_POSITION:
      return getHierarchyPosition();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DEVIATION_STEP_GROUP_ID:
      return isSetDeviationStepGroupId();
    case DEVIATION_STEP_ID:
      return isSetDeviationStepId();
    case DEVIATION_STEP_FIELD_ID:
      return isSetDeviationStepFieldId();
    case SOURCE_STEP_GROUP_ID:
      return isSetSourceStepGroupId();
    case SOURCE_STEP_ID:
      return isSetSourceStepId();
    case SOURCE_TEMPLATE_ID:
      return isSetSourceTemplateId();
    case SOURCE_TEMPLATE_VERSION:
      return isSetSourceTemplateVersion();
    case TEMPLATE_INDEX:
      return isSetTemplateIndex();
    case HIERARCHY_POSITION:
      return isSetHierarchyPosition();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof JobDeviationRef)
      return this.equals((JobDeviationRef)that);
    return false;
  }

  public boolean equals(JobDeviationRef that) {
    if (that == null)
      return false;

    boolean this_present_deviationStepGroupId = true && this.isSetDeviationStepGroupId();
    boolean that_present_deviationStepGroupId = true && that.isSetDeviationStepGroupId();
    if (this_present_deviationStepGroupId || that_present_deviationStepGroupId) {
      if (!(this_present_deviationStepGroupId && that_present_deviationStepGroupId))
        return false;
      if (!this.deviationStepGroupId.equals(that.deviationStepGroupId))
        return false;
    }

    boolean this_present_deviationStepId = true && this.isSetDeviationStepId();
    boolean that_present_deviationStepId = true && that.isSetDeviationStepId();
    if (this_present_deviationStepId || that_present_deviationStepId) {
      if (!(this_present_deviationStepId && that_present_deviationStepId))
        return false;
      if (!this.deviationStepId.equals(that.deviationStepId))
        return false;
    }

    boolean this_present_deviationStepFieldId = true && this.isSetDeviationStepFieldId();
    boolean that_present_deviationStepFieldId = true && that.isSetDeviationStepFieldId();
    if (this_present_deviationStepFieldId || that_present_deviationStepFieldId) {
      if (!(this_present_deviationStepFieldId && that_present_deviationStepFieldId))
        return false;
      if (!this.deviationStepFieldId.equals(that.deviationStepFieldId))
        return false;
    }

    boolean this_present_sourceStepGroupId = true && this.isSetSourceStepGroupId();
    boolean that_present_sourceStepGroupId = true && that.isSetSourceStepGroupId();
    if (this_present_sourceStepGroupId || that_present_sourceStepGroupId) {
      if (!(this_present_sourceStepGroupId && that_present_sourceStepGroupId))
        return false;
      if (!this.sourceStepGroupId.equals(that.sourceStepGroupId))
        return false;
    }

    boolean this_present_sourceStepId = true && this.isSetSourceStepId();
    boolean that_present_sourceStepId = true && that.isSetSourceStepId();
    if (this_present_sourceStepId || that_present_sourceStepId) {
      if (!(this_present_sourceStepId && that_present_sourceStepId))
        return false;
      if (!this.sourceStepId.equals(that.sourceStepId))
        return false;
    }

    boolean this_present_sourceTemplateId = true && this.isSetSourceTemplateId();
    boolean that_present_sourceTemplateId = true && that.isSetSourceTemplateId();
    if (this_present_sourceTemplateId || that_present_sourceTemplateId) {
      if (!(this_present_sourceTemplateId && that_present_sourceTemplateId))
        return false;
      if (!this.sourceTemplateId.equals(that.sourceTemplateId))
        return false;
    }

    boolean this_present_sourceTemplateVersion = true && this.isSetSourceTemplateVersion();
    boolean that_present_sourceTemplateVersion = true && that.isSetSourceTemplateVersion();
    if (this_present_sourceTemplateVersion || that_present_sourceTemplateVersion) {
      if (!(this_present_sourceTemplateVersion && that_present_sourceTemplateVersion))
        return false;
      if (this.sourceTemplateVersion != that.sourceTemplateVersion)
        return false;
    }

    boolean this_present_templateIndex = true && this.isSetTemplateIndex();
    boolean that_present_templateIndex = true && that.isSetTemplateIndex();
    if (this_present_templateIndex || that_present_templateIndex) {
      if (!(this_present_templateIndex && that_present_templateIndex))
        return false;
      if (this.templateIndex != that.templateIndex)
        return false;
    }

    boolean this_present_hierarchyPosition = true && this.isSetHierarchyPosition();
    boolean that_present_hierarchyPosition = true && that.isSetHierarchyPosition();
    if (this_present_hierarchyPosition || that_present_hierarchyPosition) {
      if (!(this_present_hierarchyPosition && that_present_hierarchyPosition))
        return false;
      if (!this.hierarchyPosition.equals(that.hierarchyPosition))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_deviationStepGroupId = true && (isSetDeviationStepGroupId());
    list.add(present_deviationStepGroupId);
    if (present_deviationStepGroupId)
      list.add(deviationStepGroupId);

    boolean present_deviationStepId = true && (isSetDeviationStepId());
    list.add(present_deviationStepId);
    if (present_deviationStepId)
      list.add(deviationStepId);

    boolean present_deviationStepFieldId = true && (isSetDeviationStepFieldId());
    list.add(present_deviationStepFieldId);
    if (present_deviationStepFieldId)
      list.add(deviationStepFieldId);

    boolean present_sourceStepGroupId = true && (isSetSourceStepGroupId());
    list.add(present_sourceStepGroupId);
    if (present_sourceStepGroupId)
      list.add(sourceStepGroupId);

    boolean present_sourceStepId = true && (isSetSourceStepId());
    list.add(present_sourceStepId);
    if (present_sourceStepId)
      list.add(sourceStepId);

    boolean present_sourceTemplateId = true && (isSetSourceTemplateId());
    list.add(present_sourceTemplateId);
    if (present_sourceTemplateId)
      list.add(sourceTemplateId);

    boolean present_sourceTemplateVersion = true && (isSetSourceTemplateVersion());
    list.add(present_sourceTemplateVersion);
    if (present_sourceTemplateVersion)
      list.add(sourceTemplateVersion);

    boolean present_templateIndex = true && (isSetTemplateIndex());
    list.add(present_templateIndex);
    if (present_templateIndex)
      list.add(templateIndex);

    boolean present_hierarchyPosition = true && (isSetHierarchyPosition());
    list.add(present_hierarchyPosition);
    if (present_hierarchyPosition)
      list.add(hierarchyPosition);

    return list.hashCode();
  }

  @Override
  public int compareTo(JobDeviationRef other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetDeviationStepGroupId()).compareTo(other.isSetDeviationStepGroupId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeviationStepGroupId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviationStepGroupId, other.deviationStepGroupId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeviationStepId()).compareTo(other.isSetDeviationStepId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeviationStepId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviationStepId, other.deviationStepId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeviationStepFieldId()).compareTo(other.isSetDeviationStepFieldId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeviationStepFieldId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviationStepFieldId, other.deviationStepFieldId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSourceStepGroupId()).compareTo(other.isSetSourceStepGroupId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSourceStepGroupId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sourceStepGroupId, other.sourceStepGroupId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSourceStepId()).compareTo(other.isSetSourceStepId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSourceStepId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sourceStepId, other.sourceStepId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSourceTemplateId()).compareTo(other.isSetSourceTemplateId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSourceTemplateId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sourceTemplateId, other.sourceTemplateId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSourceTemplateVersion()).compareTo(other.isSetSourceTemplateVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSourceTemplateVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sourceTemplateVersion, other.sourceTemplateVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTemplateIndex()).compareTo(other.isSetTemplateIndex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTemplateIndex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.templateIndex, other.templateIndex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHierarchyPosition()).compareTo(other.isSetHierarchyPosition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHierarchyPosition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hierarchyPosition, other.hierarchyPosition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("JobDeviationRef(");
    boolean first = true;

    if (isSetDeviationStepGroupId()) {
      sb.append("deviationStepGroupId:");
      if (this.deviationStepGroupId == null) {
        sb.append("null");
      } else {
        sb.append(this.deviationStepGroupId);
      }
      first = false;
    }
    if (isSetDeviationStepId()) {
      if (!first) sb.append(", ");
      sb.append("deviationStepId:");
      if (this.deviationStepId == null) {
        sb.append("null");
      } else {
        sb.append(this.deviationStepId);
      }
      first = false;
    }
    if (isSetDeviationStepFieldId()) {
      if (!first) sb.append(", ");
      sb.append("deviationStepFieldId:");
      if (this.deviationStepFieldId == null) {
        sb.append("null");
      } else {
        sb.append(this.deviationStepFieldId);
      }
      first = false;
    }
    if (isSetSourceStepGroupId()) {
      if (!first) sb.append(", ");
      sb.append("sourceStepGroupId:");
      if (this.sourceStepGroupId == null) {
        sb.append("null");
      } else {
        sb.append(this.sourceStepGroupId);
      }
      first = false;
    }
    if (isSetSourceStepId()) {
      if (!first) sb.append(", ");
      sb.append("sourceStepId:");
      if (this.sourceStepId == null) {
        sb.append("null");
      } else {
        sb.append(this.sourceStepId);
      }
      first = false;
    }
    if (isSetSourceTemplateId()) {
      if (!first) sb.append(", ");
      sb.append("sourceTemplateId:");
      if (this.sourceTemplateId == null) {
        sb.append("null");
      } else {
        sb.append(this.sourceTemplateId);
      }
      first = false;
    }
    if (isSetSourceTemplateVersion()) {
      if (!first) sb.append(", ");
      sb.append("sourceTemplateVersion:");
      sb.append(this.sourceTemplateVersion);
      first = false;
    }
    if (isSetTemplateIndex()) {
      if (!first) sb.append(", ");
      sb.append("templateIndex:");
      sb.append(this.templateIndex);
      first = false;
    }
    if (isSetHierarchyPosition()) {
      if (!first) sb.append(", ");
      sb.append("hierarchyPosition:");
      if (this.hierarchyPosition == null) {
        sb.append("null");
      } else {
        sb.append(this.hierarchyPosition);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class JobDeviationRefStandardSchemeFactory implements SchemeFactory {
    public JobDeviationRefStandardScheme getScheme() {
      return new JobDeviationRefStandardScheme();
    }
  }

  private static class JobDeviationRefStandardScheme extends StandardScheme<JobDeviationRef> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, JobDeviationRef struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DEVIATION_STEP_GROUP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deviationStepGroupId = iprot.readString();
              struct.setDeviationStepGroupIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DEVIATION_STEP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deviationStepId = iprot.readString();
              struct.setDeviationStepIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DEVIATION_STEP_FIELD_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deviationStepFieldId = iprot.readString();
              struct.setDeviationStepFieldIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SOURCE_STEP_GROUP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sourceStepGroupId = iprot.readString();
              struct.setSourceStepGroupIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // SOURCE_STEP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sourceStepId = iprot.readString();
              struct.setSourceStepIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // SOURCE_TEMPLATE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sourceTemplateId = iprot.readString();
              struct.setSourceTemplateIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // SOURCE_TEMPLATE_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sourceTemplateVersion = iprot.readI32();
              struct.setSourceTemplateVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // TEMPLATE_INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.templateIndex = iprot.readI32();
              struct.setTemplateIndexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // HIERARCHY_POSITION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hierarchyPosition = iprot.readString();
              struct.setHierarchyPositionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, JobDeviationRef struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.deviationStepGroupId != null) {
        if (struct.isSetDeviationStepGroupId()) {
          oprot.writeFieldBegin(DEVIATION_STEP_GROUP_ID_FIELD_DESC);
          oprot.writeString(struct.deviationStepGroupId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.deviationStepId != null) {
        if (struct.isSetDeviationStepId()) {
          oprot.writeFieldBegin(DEVIATION_STEP_ID_FIELD_DESC);
          oprot.writeString(struct.deviationStepId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.deviationStepFieldId != null) {
        if (struct.isSetDeviationStepFieldId()) {
          oprot.writeFieldBegin(DEVIATION_STEP_FIELD_ID_FIELD_DESC);
          oprot.writeString(struct.deviationStepFieldId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.sourceStepGroupId != null) {
        if (struct.isSetSourceStepGroupId()) {
          oprot.writeFieldBegin(SOURCE_STEP_GROUP_ID_FIELD_DESC);
          oprot.writeString(struct.sourceStepGroupId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.sourceStepId != null) {
        if (struct.isSetSourceStepId()) {
          oprot.writeFieldBegin(SOURCE_STEP_ID_FIELD_DESC);
          oprot.writeString(struct.sourceStepId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.sourceTemplateId != null) {
        if (struct.isSetSourceTemplateId()) {
          oprot.writeFieldBegin(SOURCE_TEMPLATE_ID_FIELD_DESC);
          oprot.writeString(struct.sourceTemplateId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSourceTemplateVersion()) {
        oprot.writeFieldBegin(SOURCE_TEMPLATE_VERSION_FIELD_DESC);
        oprot.writeI32(struct.sourceTemplateVersion);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTemplateIndex()) {
        oprot.writeFieldBegin(TEMPLATE_INDEX_FIELD_DESC);
        oprot.writeI32(struct.templateIndex);
        oprot.writeFieldEnd();
      }
      if (struct.hierarchyPosition != null) {
        if (struct.isSetHierarchyPosition()) {
          oprot.writeFieldBegin(HIERARCHY_POSITION_FIELD_DESC);
          oprot.writeString(struct.hierarchyPosition);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

}

