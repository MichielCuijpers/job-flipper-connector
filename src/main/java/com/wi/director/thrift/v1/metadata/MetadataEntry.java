/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wi.director.thrift.v1.metadata;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class MetadataEntry implements org.apache.thrift.TBase<MetadataEntry, MetadataEntry._Fields>, java.io.Serializable, Cloneable, Comparable<MetadataEntry> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MetadataEntry");

  private static final org.apache.thrift.protocol.TField METADATA_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("metadataId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField ID_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("idValue", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField EXTERNALLY_MANAGED_FIELD_DESC = new org.apache.thrift.protocol.TField("externallyManaged", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField REFERENCED_FIELD_DESC = new org.apache.thrift.protocol.TField("referenced", org.apache.thrift.protocol.TType.BOOL, (short)10);
  private static final org.apache.thrift.protocol.TField VALUE_DIFF_FIELD_DESC = new org.apache.thrift.protocol.TField("valueDiff", org.apache.thrift.protocol.TType.STRUCT, (short)200);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MetadataEntryStandardSchemeFactory());
  }

  public String metadataId; // required
  public String key; // required
  public MetadataValue value; // required
  public MetadataValue idValue; // optional
  /**
   * This value is a metadata field that is externally managed
   */
  public boolean externallyManaged; // optional
  public boolean referenced; // optional
  /**
   * NOHTML v2 Metadata diffing
   * When diffing metadata, you’ll find all entries (added/removed/modified) in the metadata map (id -> MetadataEntry)
   * Presence of the valueDiff field within the MetadataEntry struct indicates that something’s changed with this particular entry
   * The nature of the change is listed within valueDiff.latestChange.changeType
   * Note that in particular, the metdataById map on the `base` JobTemplateModular will contain keys that are not present in base, but were added in `other`
   */
  public MetadataValueDiff valueDiff; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    METADATA_ID((short)1, "metadataId"),
    KEY((short)3, "key"),
    VALUE((short)2, "value"),
    ID_VALUE((short)4, "idValue"),
    /**
     * This value is a metadata field that is externally managed
     */
    EXTERNALLY_MANAGED((short)5, "externallyManaged"),
    REFERENCED((short)10, "referenced"),
    /**
     * NOHTML v2 Metadata diffing
     * When diffing metadata, you’ll find all entries (added/removed/modified) in the metadata map (id -> MetadataEntry)
     * Presence of the valueDiff field within the MetadataEntry struct indicates that something’s changed with this particular entry
     * The nature of the change is listed within valueDiff.latestChange.changeType
     * Note that in particular, the metdataById map on the `base` JobTemplateModular will contain keys that are not present in base, but were added in `other`
     */
    VALUE_DIFF((short)200, "valueDiff");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // METADATA_ID
          return METADATA_ID;
        case 3: // KEY
          return KEY;
        case 2: // VALUE
          return VALUE;
        case 4: // ID_VALUE
          return ID_VALUE;
        case 5: // EXTERNALLY_MANAGED
          return EXTERNALLY_MANAGED;
        case 10: // REFERENCED
          return REFERENCED;
        case 200: // VALUE_DIFF
          return VALUE_DIFF;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __EXTERNALLYMANAGED_ISSET_ID = 0;
  private static final int __REFERENCED_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID_VALUE,_Fields.EXTERNALLY_MANAGED,_Fields.REFERENCED,_Fields.VALUE_DIFF};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.METADATA_ID, new org.apache.thrift.meta_data.FieldMetaData("metadataId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MetadataValue.class)));
    tmpMap.put(_Fields.ID_VALUE, new org.apache.thrift.meta_data.FieldMetaData("idValue", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MetadataValue.class)));
    tmpMap.put(_Fields.EXTERNALLY_MANAGED, new org.apache.thrift.meta_data.FieldMetaData("externallyManaged", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.REFERENCED, new org.apache.thrift.meta_data.FieldMetaData("referenced", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.VALUE_DIFF, new org.apache.thrift.meta_data.FieldMetaData("valueDiff", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MetadataValueDiff.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MetadataEntry.class, metaDataMap);
  }

  public MetadataEntry() {
  }

  public MetadataEntry(
    String metadataId,
    String key,
    MetadataValue value)
  {
    this();
    this.metadataId = metadataId;
    this.key = key;
    this.value = value;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MetadataEntry(MetadataEntry other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetMetadataId()) {
      this.metadataId = other.metadataId;
    }
    if (other.isSetKey()) {
      this.key = other.key;
    }
    if (other.isSetValue()) {
      this.value = new MetadataValue(other.value);
    }
    if (other.isSetIdValue()) {
      this.idValue = new MetadataValue(other.idValue);
    }
    this.externallyManaged = other.externallyManaged;
    this.referenced = other.referenced;
    if (other.isSetValueDiff()) {
      this.valueDiff = new MetadataValueDiff(other.valueDiff);
    }
  }

  public MetadataEntry deepCopy() {
    return new MetadataEntry(this);
  }

  @Override
  public void clear() {
    this.metadataId = null;
    this.key = null;
    this.value = null;
    this.idValue = null;
    setExternallyManagedIsSet(false);
    this.externallyManaged = false;
    setReferencedIsSet(false);
    this.referenced = false;
    this.valueDiff = null;
  }

  public String getMetadataId() {
    return this.metadataId;
  }

  public MetadataEntry setMetadataId(String metadataId) {
    this.metadataId = metadataId;
    return this;
  }

  public void unsetMetadataId() {
    this.metadataId = null;
  }

  /** Returns true if field metadataId is set (has been assigned a value) and false otherwise */
  public boolean isSetMetadataId() {
    return this.metadataId != null;
  }

  public void setMetadataIdIsSet(boolean value) {
    if (!value) {
      this.metadataId = null;
    }
  }

  public String getKey() {
    return this.key;
  }

  public MetadataEntry setKey(String key) {
    this.key = key;
    return this;
  }

  public void unsetKey() {
    this.key = null;
  }

  /** Returns true if field key is set (has been assigned a value) and false otherwise */
  public boolean isSetKey() {
    return this.key != null;
  }

  public void setKeyIsSet(boolean value) {
    if (!value) {
      this.key = null;
    }
  }

  public MetadataValue getValue() {
    return this.value;
  }

  public MetadataEntry setValue(MetadataValue value) {
    this.value = value;
    return this;
  }

  public void unsetValue() {
    this.value = null;
  }

  /** Returns true if field value is set (has been assigned a value) and false otherwise */
  public boolean isSetValue() {
    return this.value != null;
  }

  public void setValueIsSet(boolean value) {
    if (!value) {
      this.value = null;
    }
  }

  public MetadataValue getIdValue() {
    return this.idValue;
  }

  public MetadataEntry setIdValue(MetadataValue idValue) {
    this.idValue = idValue;
    return this;
  }

  public void unsetIdValue() {
    this.idValue = null;
  }

  /** Returns true if field idValue is set (has been assigned a value) and false otherwise */
  public boolean isSetIdValue() {
    return this.idValue != null;
  }

  public void setIdValueIsSet(boolean value) {
    if (!value) {
      this.idValue = null;
    }
  }

  /**
   * This value is a metadata field that is externally managed
   */
  public boolean isExternallyManaged() {
    return this.externallyManaged;
  }

  /**
   * This value is a metadata field that is externally managed
   */
  public MetadataEntry setExternallyManaged(boolean externallyManaged) {
    this.externallyManaged = externallyManaged;
    setExternallyManagedIsSet(true);
    return this;
  }

  public void unsetExternallyManaged() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXTERNALLYMANAGED_ISSET_ID);
  }

  /** Returns true if field externallyManaged is set (has been assigned a value) and false otherwise */
  public boolean isSetExternallyManaged() {
    return EncodingUtils.testBit(__isset_bitfield, __EXTERNALLYMANAGED_ISSET_ID);
  }

  public void setExternallyManagedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXTERNALLYMANAGED_ISSET_ID, value);
  }

  public boolean isReferenced() {
    return this.referenced;
  }

  public MetadataEntry setReferenced(boolean referenced) {
    this.referenced = referenced;
    setReferencedIsSet(true);
    return this;
  }

  public void unsetReferenced() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REFERENCED_ISSET_ID);
  }

  /** Returns true if field referenced is set (has been assigned a value) and false otherwise */
  public boolean isSetReferenced() {
    return EncodingUtils.testBit(__isset_bitfield, __REFERENCED_ISSET_ID);
  }

  public void setReferencedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REFERENCED_ISSET_ID, value);
  }

  /**
   * NOHTML v2 Metadata diffing
   * When diffing metadata, you’ll find all entries (added/removed/modified) in the metadata map (id -> MetadataEntry)
   * Presence of the valueDiff field within the MetadataEntry struct indicates that something’s changed with this particular entry
   * The nature of the change is listed within valueDiff.latestChange.changeType
   * Note that in particular, the metdataById map on the `base` JobTemplateModular will contain keys that are not present in base, but were added in `other`
   */
  public MetadataValueDiff getValueDiff() {
    return this.valueDiff;
  }

  /**
   * NOHTML v2 Metadata diffing
   * When diffing metadata, you’ll find all entries (added/removed/modified) in the metadata map (id -> MetadataEntry)
   * Presence of the valueDiff field within the MetadataEntry struct indicates that something’s changed with this particular entry
   * The nature of the change is listed within valueDiff.latestChange.changeType
   * Note that in particular, the metdataById map on the `base` JobTemplateModular will contain keys that are not present in base, but were added in `other`
   */
  public MetadataEntry setValueDiff(MetadataValueDiff valueDiff) {
    this.valueDiff = valueDiff;
    return this;
  }

  public void unsetValueDiff() {
    this.valueDiff = null;
  }

  /** Returns true if field valueDiff is set (has been assigned a value) and false otherwise */
  public boolean isSetValueDiff() {
    return this.valueDiff != null;
  }

  public void setValueDiffIsSet(boolean value) {
    if (!value) {
      this.valueDiff = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case METADATA_ID:
      if (value == null) {
        unsetMetadataId();
      } else {
        setMetadataId((String)value);
      }
      break;

    case KEY:
      if (value == null) {
        unsetKey();
      } else {
        setKey((String)value);
      }
      break;

    case VALUE:
      if (value == null) {
        unsetValue();
      } else {
        setValue((MetadataValue)value);
      }
      break;

    case ID_VALUE:
      if (value == null) {
        unsetIdValue();
      } else {
        setIdValue((MetadataValue)value);
      }
      break;

    case EXTERNALLY_MANAGED:
      if (value == null) {
        unsetExternallyManaged();
      } else {
        setExternallyManaged((Boolean)value);
      }
      break;

    case REFERENCED:
      if (value == null) {
        unsetReferenced();
      } else {
        setReferenced((Boolean)value);
      }
      break;

    case VALUE_DIFF:
      if (value == null) {
        unsetValueDiff();
      } else {
        setValueDiff((MetadataValueDiff)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case METADATA_ID:
      return getMetadataId();

    case KEY:
      return getKey();

    case VALUE:
      return getValue();

    case ID_VALUE:
      return getIdValue();

    case EXTERNALLY_MANAGED:
      return isExternallyManaged();

    case REFERENCED:
      return isReferenced();

    case VALUE_DIFF:
      return getValueDiff();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case METADATA_ID:
      return isSetMetadataId();
    case KEY:
      return isSetKey();
    case VALUE:
      return isSetValue();
    case ID_VALUE:
      return isSetIdValue();
    case EXTERNALLY_MANAGED:
      return isSetExternallyManaged();
    case REFERENCED:
      return isSetReferenced();
    case VALUE_DIFF:
      return isSetValueDiff();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MetadataEntry)
      return this.equals((MetadataEntry)that);
    return false;
  }

  public boolean equals(MetadataEntry that) {
    if (that == null)
      return false;

    boolean this_present_metadataId = true && this.isSetMetadataId();
    boolean that_present_metadataId = true && that.isSetMetadataId();
    if (this_present_metadataId || that_present_metadataId) {
      if (!(this_present_metadataId && that_present_metadataId))
        return false;
      if (!this.metadataId.equals(that.metadataId))
        return false;
    }

    boolean this_present_key = true && this.isSetKey();
    boolean that_present_key = true && that.isSetKey();
    if (this_present_key || that_present_key) {
      if (!(this_present_key && that_present_key))
        return false;
      if (!this.key.equals(that.key))
        return false;
    }

    boolean this_present_value = true && this.isSetValue();
    boolean that_present_value = true && that.isSetValue();
    if (this_present_value || that_present_value) {
      if (!(this_present_value && that_present_value))
        return false;
      if (!this.value.equals(that.value))
        return false;
    }

    boolean this_present_idValue = true && this.isSetIdValue();
    boolean that_present_idValue = true && that.isSetIdValue();
    if (this_present_idValue || that_present_idValue) {
      if (!(this_present_idValue && that_present_idValue))
        return false;
      if (!this.idValue.equals(that.idValue))
        return false;
    }

    boolean this_present_externallyManaged = true && this.isSetExternallyManaged();
    boolean that_present_externallyManaged = true && that.isSetExternallyManaged();
    if (this_present_externallyManaged || that_present_externallyManaged) {
      if (!(this_present_externallyManaged && that_present_externallyManaged))
        return false;
      if (this.externallyManaged != that.externallyManaged)
        return false;
    }

    boolean this_present_referenced = true && this.isSetReferenced();
    boolean that_present_referenced = true && that.isSetReferenced();
    if (this_present_referenced || that_present_referenced) {
      if (!(this_present_referenced && that_present_referenced))
        return false;
      if (this.referenced != that.referenced)
        return false;
    }

    boolean this_present_valueDiff = true && this.isSetValueDiff();
    boolean that_present_valueDiff = true && that.isSetValueDiff();
    if (this_present_valueDiff || that_present_valueDiff) {
      if (!(this_present_valueDiff && that_present_valueDiff))
        return false;
      if (!this.valueDiff.equals(that.valueDiff))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_metadataId = true && (isSetMetadataId());
    list.add(present_metadataId);
    if (present_metadataId)
      list.add(metadataId);

    boolean present_key = true && (isSetKey());
    list.add(present_key);
    if (present_key)
      list.add(key);

    boolean present_value = true && (isSetValue());
    list.add(present_value);
    if (present_value)
      list.add(value);

    boolean present_idValue = true && (isSetIdValue());
    list.add(present_idValue);
    if (present_idValue)
      list.add(idValue);

    boolean present_externallyManaged = true && (isSetExternallyManaged());
    list.add(present_externallyManaged);
    if (present_externallyManaged)
      list.add(externallyManaged);

    boolean present_referenced = true && (isSetReferenced());
    list.add(present_referenced);
    if (present_referenced)
      list.add(referenced);

    boolean present_valueDiff = true && (isSetValueDiff());
    list.add(present_valueDiff);
    if (present_valueDiff)
      list.add(valueDiff);

    return list.hashCode();
  }

  @Override
  public int compareTo(MetadataEntry other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMetadataId()).compareTo(other.isSetMetadataId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMetadataId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metadataId, other.metadataId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValue()).compareTo(other.isSetValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, other.value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIdValue()).compareTo(other.isSetIdValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idValue, other.idValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExternallyManaged()).compareTo(other.isSetExternallyManaged());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExternallyManaged()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.externallyManaged, other.externallyManaged);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReferenced()).compareTo(other.isSetReferenced());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReferenced()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.referenced, other.referenced);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValueDiff()).compareTo(other.isSetValueDiff());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValueDiff()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.valueDiff, other.valueDiff);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MetadataEntry(");
    boolean first = true;

    sb.append("metadataId:");
    if (this.metadataId == null) {
      sb.append("null");
    } else {
      sb.append(this.metadataId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("key:");
    if (this.key == null) {
      sb.append("null");
    } else {
      sb.append(this.key);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("value:");
    if (this.value == null) {
      sb.append("null");
    } else {
      sb.append(this.value);
    }
    first = false;
    if (isSetIdValue()) {
      if (!first) sb.append(", ");
      sb.append("idValue:");
      if (this.idValue == null) {
        sb.append("null");
      } else {
        sb.append(this.idValue);
      }
      first = false;
    }
    if (isSetExternallyManaged()) {
      if (!first) sb.append(", ");
      sb.append("externallyManaged:");
      sb.append(this.externallyManaged);
      first = false;
    }
    if (isSetReferenced()) {
      if (!first) sb.append(", ");
      sb.append("referenced:");
      sb.append(this.referenced);
      first = false;
    }
    if (isSetValueDiff()) {
      if (!first) sb.append(", ");
      sb.append("valueDiff:");
      if (this.valueDiff == null) {
        sb.append("null");
      } else {
        sb.append(this.valueDiff);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (valueDiff != null) {
      valueDiff.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MetadataEntryStandardSchemeFactory implements SchemeFactory {
    public MetadataEntryStandardScheme getScheme() {
      return new MetadataEntryStandardScheme();
    }
  }

  private static class MetadataEntryStandardScheme extends StandardScheme<MetadataEntry> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MetadataEntry struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // METADATA_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.metadataId = iprot.readString();
              struct.setMetadataIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.key = iprot.readString();
              struct.setKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.value = new MetadataValue();
              struct.value.read(iprot);
              struct.setValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ID_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.idValue = new MetadataValue();
              struct.idValue.read(iprot);
              struct.setIdValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // EXTERNALLY_MANAGED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.externallyManaged = iprot.readBool();
              struct.setExternallyManagedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // REFERENCED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.referenced = iprot.readBool();
              struct.setReferencedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 200: // VALUE_DIFF
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.valueDiff = new MetadataValueDiff();
              struct.valueDiff.read(iprot);
              struct.setValueDiffIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MetadataEntry struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.metadataId != null) {
        oprot.writeFieldBegin(METADATA_ID_FIELD_DESC);
        oprot.writeString(struct.metadataId);
        oprot.writeFieldEnd();
      }
      if (struct.value != null) {
        oprot.writeFieldBegin(VALUE_FIELD_DESC);
        struct.value.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.key != null) {
        oprot.writeFieldBegin(KEY_FIELD_DESC);
        oprot.writeString(struct.key);
        oprot.writeFieldEnd();
      }
      if (struct.idValue != null) {
        if (struct.isSetIdValue()) {
          oprot.writeFieldBegin(ID_VALUE_FIELD_DESC);
          struct.idValue.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetExternallyManaged()) {
        oprot.writeFieldBegin(EXTERNALLY_MANAGED_FIELD_DESC);
        oprot.writeBool(struct.externallyManaged);
        oprot.writeFieldEnd();
      }
      if (struct.isSetReferenced()) {
        oprot.writeFieldBegin(REFERENCED_FIELD_DESC);
        oprot.writeBool(struct.referenced);
        oprot.writeFieldEnd();
      }
      if (struct.valueDiff != null) {
        if (struct.isSetValueDiff()) {
          oprot.writeFieldBegin(VALUE_DIFF_FIELD_DESC);
          struct.valueDiff.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

}

