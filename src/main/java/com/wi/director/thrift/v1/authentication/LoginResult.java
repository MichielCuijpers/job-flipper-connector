/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wi.director.thrift.v1.authentication;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class LoginResult implements org.apache.thrift.TBase<LoginResult, LoginResult._Fields>, java.io.Serializable, Cloneable, Comparable<LoginResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LoginResult");

  private static final org.apache.thrift.protocol.TField AUTH_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("authToken", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CURRENT_USER_FIELD_DESC = new org.apache.thrift.protocol.TField("currentUser", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField TEAM_ID_TO_TEAM_ROLE_FIELD_DESC = new org.apache.thrift.protocol.TField("teamIdToTeamRole", org.apache.thrift.protocol.TType.MAP, (short)3);
  private static final org.apache.thrift.protocol.TField TEAM_ID_TO_REGION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("teamIdToRegionId", org.apache.thrift.protocol.TType.MAP, (short)4);
  private static final org.apache.thrift.protocol.TField REGION_ID_TO_REGION_FIELD_DESC = new org.apache.thrift.protocol.TField("regionIdToRegion", org.apache.thrift.protocol.TType.MAP, (short)5);
  private static final org.apache.thrift.protocol.TField PREFERRED_REGION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("preferredRegionId", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField PERIODS_FIELD_DESC = new org.apache.thrift.protocol.TField("periods", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField TEAM_ID_TO_JOB_PERMISSIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("teamIdToJobPermissions", org.apache.thrift.protocol.TType.MAP, (short)8);
  private static final org.apache.thrift.protocol.TField TEAM_ID_TO_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("teamIdToInfo", org.apache.thrift.protocol.TType.MAP, (short)9);
  private static final org.apache.thrift.protocol.TField MOTHERSHIP_CERTIFICATE_FIELD_DESC = new org.apache.thrift.protocol.TField("mothershipCertificate", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField USER_CERTIFICATE_FIELD_DESC = new org.apache.thrift.protocol.TField("userCertificate", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionId", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField PROXY_USER_EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("proxyUserEmail", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField CURRENT_USER_MODULAR_FIELD_DESC = new org.apache.thrift.protocol.TField("currentUserModular", org.apache.thrift.protocol.TType.STRUCT, (short)14);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new LoginResultStandardSchemeFactory());
  }

  public String authToken; // required
  public com.wi.director.thrift.v1.user.User currentUser; // required
  /**
   * Map of all the roles currentUser has across all the teams she is a part of
   */
  public Map<String,List<com.wi.director.thrift.v1.user.TeamRole>> teamIdToTeamRole; // required
  /**
   * The following two maps indicate the API host to contact for
   * customers with non-US deployments.  Every team is located on one
   * region, and the maps specify which region each of the teams you can
   * access are located, and for each of them what the relevant
   * hostnames are.
   */
  public Map<String,String> teamIdToRegionId; // required
  public Map<String,com.wi.director.thrift.v1.team.Region> regionIdToRegion; // required
  public String preferredRegionId; // required
  public AuthPeriods periods; // required
  public Map<String,com.wi.director.thrift.v1.jobrole.JobPermissions> teamIdToJobPermissions; // required
  public Map<String,TeamInfo> teamIdToInfo; // required
  /**
   * This is a server signed certificate you can use to authenticate
   * other people's certificate in mesh mode
   */
  public String mothershipCertificate; // optional
  /**
   * If you requested the server to sign a certificate this response will
   * have the PEM encoded cert
   */
  public String userCertificate; // optional
  public String sessionId; // required
  public String proxyUserEmail; // optional
  public com.wi.director.thrift.v1.user.UserModular currentUserModular; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    AUTH_TOKEN((short)1, "authToken"),
    CURRENT_USER((short)2, "currentUser"),
    /**
     * Map of all the roles currentUser has across all the teams she is a part of
     */
    TEAM_ID_TO_TEAM_ROLE((short)3, "teamIdToTeamRole"),
    /**
     * The following two maps indicate the API host to contact for
     * customers with non-US deployments.  Every team is located on one
     * region, and the maps specify which region each of the teams you can
     * access are located, and for each of them what the relevant
     * hostnames are.
     */
    TEAM_ID_TO_REGION_ID((short)4, "teamIdToRegionId"),
    REGION_ID_TO_REGION((short)5, "regionIdToRegion"),
    PREFERRED_REGION_ID((short)6, "preferredRegionId"),
    PERIODS((short)7, "periods"),
    TEAM_ID_TO_JOB_PERMISSIONS((short)8, "teamIdToJobPermissions"),
    TEAM_ID_TO_INFO((short)9, "teamIdToInfo"),
    /**
     * This is a server signed certificate you can use to authenticate
     * other people's certificate in mesh mode
     */
    MOTHERSHIP_CERTIFICATE((short)10, "mothershipCertificate"),
    /**
     * If you requested the server to sign a certificate this response will
     * have the PEM encoded cert
     */
    USER_CERTIFICATE((short)11, "userCertificate"),
    SESSION_ID((short)12, "sessionId"),
    PROXY_USER_EMAIL((short)13, "proxyUserEmail"),
    CURRENT_USER_MODULAR((short)14, "currentUserModular");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // AUTH_TOKEN
          return AUTH_TOKEN;
        case 2: // CURRENT_USER
          return CURRENT_USER;
        case 3: // TEAM_ID_TO_TEAM_ROLE
          return TEAM_ID_TO_TEAM_ROLE;
        case 4: // TEAM_ID_TO_REGION_ID
          return TEAM_ID_TO_REGION_ID;
        case 5: // REGION_ID_TO_REGION
          return REGION_ID_TO_REGION;
        case 6: // PREFERRED_REGION_ID
          return PREFERRED_REGION_ID;
        case 7: // PERIODS
          return PERIODS;
        case 8: // TEAM_ID_TO_JOB_PERMISSIONS
          return TEAM_ID_TO_JOB_PERMISSIONS;
        case 9: // TEAM_ID_TO_INFO
          return TEAM_ID_TO_INFO;
        case 10: // MOTHERSHIP_CERTIFICATE
          return MOTHERSHIP_CERTIFICATE;
        case 11: // USER_CERTIFICATE
          return USER_CERTIFICATE;
        case 12: // SESSION_ID
          return SESSION_ID;
        case 13: // PROXY_USER_EMAIL
          return PROXY_USER_EMAIL;
        case 14: // CURRENT_USER_MODULAR
          return CURRENT_USER_MODULAR;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.MOTHERSHIP_CERTIFICATE,_Fields.USER_CERTIFICATE,_Fields.PROXY_USER_EMAIL};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.AUTH_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("authToken", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CURRENT_USER, new org.apache.thrift.meta_data.FieldMetaData("currentUser", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.user.User.class)));
    tmpMap.put(_Fields.TEAM_ID_TO_TEAM_ROLE, new org.apache.thrift.meta_data.FieldMetaData("teamIdToTeamRole", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.wi.director.thrift.v1.user.TeamRole.class)))));
    tmpMap.put(_Fields.TEAM_ID_TO_REGION_ID, new org.apache.thrift.meta_data.FieldMetaData("teamIdToRegionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.REGION_ID_TO_REGION, new org.apache.thrift.meta_data.FieldMetaData("regionIdToRegion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.team.Region.class))));
    tmpMap.put(_Fields.PREFERRED_REGION_ID, new org.apache.thrift.meta_data.FieldMetaData("preferredRegionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PERIODS, new org.apache.thrift.meta_data.FieldMetaData("periods", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AuthPeriods.class)));
    tmpMap.put(_Fields.TEAM_ID_TO_JOB_PERMISSIONS, new org.apache.thrift.meta_data.FieldMetaData("teamIdToJobPermissions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.jobrole.JobPermissions.class))));
    tmpMap.put(_Fields.TEAM_ID_TO_INFO, new org.apache.thrift.meta_data.FieldMetaData("teamIdToInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TeamInfo.class))));
    tmpMap.put(_Fields.MOTHERSHIP_CERTIFICATE, new org.apache.thrift.meta_data.FieldMetaData("mothershipCertificate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_CERTIFICATE, new org.apache.thrift.meta_data.FieldMetaData("userCertificate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROXY_USER_EMAIL, new org.apache.thrift.meta_data.FieldMetaData("proxyUserEmail", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CURRENT_USER_MODULAR, new org.apache.thrift.meta_data.FieldMetaData("currentUserModular", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.user.UserModular.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LoginResult.class, metaDataMap);
  }

  public LoginResult() {
  }

  public LoginResult(
    String authToken,
    com.wi.director.thrift.v1.user.User currentUser,
    Map<String,List<com.wi.director.thrift.v1.user.TeamRole>> teamIdToTeamRole,
    Map<String,String> teamIdToRegionId,
    Map<String,com.wi.director.thrift.v1.team.Region> regionIdToRegion,
    String preferredRegionId,
    AuthPeriods periods,
    Map<String,com.wi.director.thrift.v1.jobrole.JobPermissions> teamIdToJobPermissions,
    Map<String,TeamInfo> teamIdToInfo,
    String sessionId,
    com.wi.director.thrift.v1.user.UserModular currentUserModular)
  {
    this();
    this.authToken = authToken;
    this.currentUser = currentUser;
    this.teamIdToTeamRole = teamIdToTeamRole;
    this.teamIdToRegionId = teamIdToRegionId;
    this.regionIdToRegion = regionIdToRegion;
    this.preferredRegionId = preferredRegionId;
    this.periods = periods;
    this.teamIdToJobPermissions = teamIdToJobPermissions;
    this.teamIdToInfo = teamIdToInfo;
    this.sessionId = sessionId;
    this.currentUserModular = currentUserModular;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LoginResult(LoginResult other) {
    if (other.isSetAuthToken()) {
      this.authToken = other.authToken;
    }
    if (other.isSetCurrentUser()) {
      this.currentUser = new com.wi.director.thrift.v1.user.User(other.currentUser);
    }
    if (other.isSetTeamIdToTeamRole()) {
      Map<String,List<com.wi.director.thrift.v1.user.TeamRole>> __this__teamIdToTeamRole = new HashMap<String,List<com.wi.director.thrift.v1.user.TeamRole>>(other.teamIdToTeamRole.size());
      for (Map.Entry<String, List<com.wi.director.thrift.v1.user.TeamRole>> other_element : other.teamIdToTeamRole.entrySet()) {

        String other_element_key = other_element.getKey();
        List<com.wi.director.thrift.v1.user.TeamRole> other_element_value = other_element.getValue();

        String __this__teamIdToTeamRole_copy_key = other_element_key;

        List<com.wi.director.thrift.v1.user.TeamRole> __this__teamIdToTeamRole_copy_value = new ArrayList<com.wi.director.thrift.v1.user.TeamRole>(other_element_value.size());
        for (com.wi.director.thrift.v1.user.TeamRole other_element_value_element : other_element_value) {
          __this__teamIdToTeamRole_copy_value.add(other_element_value_element);
        }

        __this__teamIdToTeamRole.put(__this__teamIdToTeamRole_copy_key, __this__teamIdToTeamRole_copy_value);
      }
      this.teamIdToTeamRole = __this__teamIdToTeamRole;
    }
    if (other.isSetTeamIdToRegionId()) {
      Map<String,String> __this__teamIdToRegionId = new HashMap<String,String>(other.teamIdToRegionId);
      this.teamIdToRegionId = __this__teamIdToRegionId;
    }
    if (other.isSetRegionIdToRegion()) {
      Map<String,com.wi.director.thrift.v1.team.Region> __this__regionIdToRegion = new HashMap<String,com.wi.director.thrift.v1.team.Region>(other.regionIdToRegion.size());
      for (Map.Entry<String, com.wi.director.thrift.v1.team.Region> other_element : other.regionIdToRegion.entrySet()) {

        String other_element_key = other_element.getKey();
        com.wi.director.thrift.v1.team.Region other_element_value = other_element.getValue();

        String __this__regionIdToRegion_copy_key = other_element_key;

        com.wi.director.thrift.v1.team.Region __this__regionIdToRegion_copy_value = new com.wi.director.thrift.v1.team.Region(other_element_value);

        __this__regionIdToRegion.put(__this__regionIdToRegion_copy_key, __this__regionIdToRegion_copy_value);
      }
      this.regionIdToRegion = __this__regionIdToRegion;
    }
    if (other.isSetPreferredRegionId()) {
      this.preferredRegionId = other.preferredRegionId;
    }
    if (other.isSetPeriods()) {
      this.periods = new AuthPeriods(other.periods);
    }
    if (other.isSetTeamIdToJobPermissions()) {
      Map<String,com.wi.director.thrift.v1.jobrole.JobPermissions> __this__teamIdToJobPermissions = new HashMap<String,com.wi.director.thrift.v1.jobrole.JobPermissions>(other.teamIdToJobPermissions.size());
      for (Map.Entry<String, com.wi.director.thrift.v1.jobrole.JobPermissions> other_element : other.teamIdToJobPermissions.entrySet()) {

        String other_element_key = other_element.getKey();
        com.wi.director.thrift.v1.jobrole.JobPermissions other_element_value = other_element.getValue();

        String __this__teamIdToJobPermissions_copy_key = other_element_key;

        com.wi.director.thrift.v1.jobrole.JobPermissions __this__teamIdToJobPermissions_copy_value = new com.wi.director.thrift.v1.jobrole.JobPermissions(other_element_value);

        __this__teamIdToJobPermissions.put(__this__teamIdToJobPermissions_copy_key, __this__teamIdToJobPermissions_copy_value);
      }
      this.teamIdToJobPermissions = __this__teamIdToJobPermissions;
    }
    if (other.isSetTeamIdToInfo()) {
      Map<String,TeamInfo> __this__teamIdToInfo = new HashMap<String,TeamInfo>(other.teamIdToInfo.size());
      for (Map.Entry<String, TeamInfo> other_element : other.teamIdToInfo.entrySet()) {

        String other_element_key = other_element.getKey();
        TeamInfo other_element_value = other_element.getValue();

        String __this__teamIdToInfo_copy_key = other_element_key;

        TeamInfo __this__teamIdToInfo_copy_value = new TeamInfo(other_element_value);

        __this__teamIdToInfo.put(__this__teamIdToInfo_copy_key, __this__teamIdToInfo_copy_value);
      }
      this.teamIdToInfo = __this__teamIdToInfo;
    }
    if (other.isSetMothershipCertificate()) {
      this.mothershipCertificate = other.mothershipCertificate;
    }
    if (other.isSetUserCertificate()) {
      this.userCertificate = other.userCertificate;
    }
    if (other.isSetSessionId()) {
      this.sessionId = other.sessionId;
    }
    if (other.isSetProxyUserEmail()) {
      this.proxyUserEmail = other.proxyUserEmail;
    }
    if (other.isSetCurrentUserModular()) {
      this.currentUserModular = new com.wi.director.thrift.v1.user.UserModular(other.currentUserModular);
    }
  }

  public LoginResult deepCopy() {
    return new LoginResult(this);
  }

  @Override
  public void clear() {
    this.authToken = null;
    this.currentUser = null;
    this.teamIdToTeamRole = null;
    this.teamIdToRegionId = null;
    this.regionIdToRegion = null;
    this.preferredRegionId = null;
    this.periods = null;
    this.teamIdToJobPermissions = null;
    this.teamIdToInfo = null;
    this.mothershipCertificate = null;
    this.userCertificate = null;
    this.sessionId = null;
    this.proxyUserEmail = null;
    this.currentUserModular = null;
  }

  public String getAuthToken() {
    return this.authToken;
  }

  public LoginResult setAuthToken(String authToken) {
    this.authToken = authToken;
    return this;
  }

  public void unsetAuthToken() {
    this.authToken = null;
  }

  /** Returns true if field authToken is set (has been assigned a value) and false otherwise */
  public boolean isSetAuthToken() {
    return this.authToken != null;
  }

  public void setAuthTokenIsSet(boolean value) {
    if (!value) {
      this.authToken = null;
    }
  }

  public com.wi.director.thrift.v1.user.User getCurrentUser() {
    return this.currentUser;
  }

  public LoginResult setCurrentUser(com.wi.director.thrift.v1.user.User currentUser) {
    this.currentUser = currentUser;
    return this;
  }

  public void unsetCurrentUser() {
    this.currentUser = null;
  }

  /** Returns true if field currentUser is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrentUser() {
    return this.currentUser != null;
  }

  public void setCurrentUserIsSet(boolean value) {
    if (!value) {
      this.currentUser = null;
    }
  }

  public int getTeamIdToTeamRoleSize() {
    return (this.teamIdToTeamRole == null) ? 0 : this.teamIdToTeamRole.size();
  }

  public void putToTeamIdToTeamRole(String key, List<com.wi.director.thrift.v1.user.TeamRole> val) {
    if (this.teamIdToTeamRole == null) {
      this.teamIdToTeamRole = new HashMap<String,List<com.wi.director.thrift.v1.user.TeamRole>>();
    }
    this.teamIdToTeamRole.put(key, val);
  }

  /**
   * Map of all the roles currentUser has across all the teams she is a part of
   */
  public Map<String,List<com.wi.director.thrift.v1.user.TeamRole>> getTeamIdToTeamRole() {
    return this.teamIdToTeamRole;
  }

  /**
   * Map of all the roles currentUser has across all the teams she is a part of
   */
  public LoginResult setTeamIdToTeamRole(Map<String,List<com.wi.director.thrift.v1.user.TeamRole>> teamIdToTeamRole) {
    this.teamIdToTeamRole = teamIdToTeamRole;
    return this;
  }

  public void unsetTeamIdToTeamRole() {
    this.teamIdToTeamRole = null;
  }

  /** Returns true if field teamIdToTeamRole is set (has been assigned a value) and false otherwise */
  public boolean isSetTeamIdToTeamRole() {
    return this.teamIdToTeamRole != null;
  }

  public void setTeamIdToTeamRoleIsSet(boolean value) {
    if (!value) {
      this.teamIdToTeamRole = null;
    }
  }

  public int getTeamIdToRegionIdSize() {
    return (this.teamIdToRegionId == null) ? 0 : this.teamIdToRegionId.size();
  }

  public void putToTeamIdToRegionId(String key, String val) {
    if (this.teamIdToRegionId == null) {
      this.teamIdToRegionId = new HashMap<String,String>();
    }
    this.teamIdToRegionId.put(key, val);
  }

  /**
   * The following two maps indicate the API host to contact for
   * customers with non-US deployments.  Every team is located on one
   * region, and the maps specify which region each of the teams you can
   * access are located, and for each of them what the relevant
   * hostnames are.
   */
  public Map<String,String> getTeamIdToRegionId() {
    return this.teamIdToRegionId;
  }

  /**
   * The following two maps indicate the API host to contact for
   * customers with non-US deployments.  Every team is located on one
   * region, and the maps specify which region each of the teams you can
   * access are located, and for each of them what the relevant
   * hostnames are.
   */
  public LoginResult setTeamIdToRegionId(Map<String,String> teamIdToRegionId) {
    this.teamIdToRegionId = teamIdToRegionId;
    return this;
  }

  public void unsetTeamIdToRegionId() {
    this.teamIdToRegionId = null;
  }

  /** Returns true if field teamIdToRegionId is set (has been assigned a value) and false otherwise */
  public boolean isSetTeamIdToRegionId() {
    return this.teamIdToRegionId != null;
  }

  public void setTeamIdToRegionIdIsSet(boolean value) {
    if (!value) {
      this.teamIdToRegionId = null;
    }
  }

  public int getRegionIdToRegionSize() {
    return (this.regionIdToRegion == null) ? 0 : this.regionIdToRegion.size();
  }

  public void putToRegionIdToRegion(String key, com.wi.director.thrift.v1.team.Region val) {
    if (this.regionIdToRegion == null) {
      this.regionIdToRegion = new HashMap<String,com.wi.director.thrift.v1.team.Region>();
    }
    this.regionIdToRegion.put(key, val);
  }

  public Map<String,com.wi.director.thrift.v1.team.Region> getRegionIdToRegion() {
    return this.regionIdToRegion;
  }

  public LoginResult setRegionIdToRegion(Map<String,com.wi.director.thrift.v1.team.Region> regionIdToRegion) {
    this.regionIdToRegion = regionIdToRegion;
    return this;
  }

  public void unsetRegionIdToRegion() {
    this.regionIdToRegion = null;
  }

  /** Returns true if field regionIdToRegion is set (has been assigned a value) and false otherwise */
  public boolean isSetRegionIdToRegion() {
    return this.regionIdToRegion != null;
  }

  public void setRegionIdToRegionIsSet(boolean value) {
    if (!value) {
      this.regionIdToRegion = null;
    }
  }

  public String getPreferredRegionId() {
    return this.preferredRegionId;
  }

  public LoginResult setPreferredRegionId(String preferredRegionId) {
    this.preferredRegionId = preferredRegionId;
    return this;
  }

  public void unsetPreferredRegionId() {
    this.preferredRegionId = null;
  }

  /** Returns true if field preferredRegionId is set (has been assigned a value) and false otherwise */
  public boolean isSetPreferredRegionId() {
    return this.preferredRegionId != null;
  }

  public void setPreferredRegionIdIsSet(boolean value) {
    if (!value) {
      this.preferredRegionId = null;
    }
  }

  public AuthPeriods getPeriods() {
    return this.periods;
  }

  public LoginResult setPeriods(AuthPeriods periods) {
    this.periods = periods;
    return this;
  }

  public void unsetPeriods() {
    this.periods = null;
  }

  /** Returns true if field periods is set (has been assigned a value) and false otherwise */
  public boolean isSetPeriods() {
    return this.periods != null;
  }

  public void setPeriodsIsSet(boolean value) {
    if (!value) {
      this.periods = null;
    }
  }

  public int getTeamIdToJobPermissionsSize() {
    return (this.teamIdToJobPermissions == null) ? 0 : this.teamIdToJobPermissions.size();
  }

  public void putToTeamIdToJobPermissions(String key, com.wi.director.thrift.v1.jobrole.JobPermissions val) {
    if (this.teamIdToJobPermissions == null) {
      this.teamIdToJobPermissions = new HashMap<String,com.wi.director.thrift.v1.jobrole.JobPermissions>();
    }
    this.teamIdToJobPermissions.put(key, val);
  }

  public Map<String,com.wi.director.thrift.v1.jobrole.JobPermissions> getTeamIdToJobPermissions() {
    return this.teamIdToJobPermissions;
  }

  public LoginResult setTeamIdToJobPermissions(Map<String,com.wi.director.thrift.v1.jobrole.JobPermissions> teamIdToJobPermissions) {
    this.teamIdToJobPermissions = teamIdToJobPermissions;
    return this;
  }

  public void unsetTeamIdToJobPermissions() {
    this.teamIdToJobPermissions = null;
  }

  /** Returns true if field teamIdToJobPermissions is set (has been assigned a value) and false otherwise */
  public boolean isSetTeamIdToJobPermissions() {
    return this.teamIdToJobPermissions != null;
  }

  public void setTeamIdToJobPermissionsIsSet(boolean value) {
    if (!value) {
      this.teamIdToJobPermissions = null;
    }
  }

  public int getTeamIdToInfoSize() {
    return (this.teamIdToInfo == null) ? 0 : this.teamIdToInfo.size();
  }

  public void putToTeamIdToInfo(String key, TeamInfo val) {
    if (this.teamIdToInfo == null) {
      this.teamIdToInfo = new HashMap<String,TeamInfo>();
    }
    this.teamIdToInfo.put(key, val);
  }

  public Map<String,TeamInfo> getTeamIdToInfo() {
    return this.teamIdToInfo;
  }

  public LoginResult setTeamIdToInfo(Map<String,TeamInfo> teamIdToInfo) {
    this.teamIdToInfo = teamIdToInfo;
    return this;
  }

  public void unsetTeamIdToInfo() {
    this.teamIdToInfo = null;
  }

  /** Returns true if field teamIdToInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetTeamIdToInfo() {
    return this.teamIdToInfo != null;
  }

  public void setTeamIdToInfoIsSet(boolean value) {
    if (!value) {
      this.teamIdToInfo = null;
    }
  }

  /**
   * This is a server signed certificate you can use to authenticate
   * other people's certificate in mesh mode
   */
  public String getMothershipCertificate() {
    return this.mothershipCertificate;
  }

  /**
   * This is a server signed certificate you can use to authenticate
   * other people's certificate in mesh mode
   */
  public LoginResult setMothershipCertificate(String mothershipCertificate) {
    this.mothershipCertificate = mothershipCertificate;
    return this;
  }

  public void unsetMothershipCertificate() {
    this.mothershipCertificate = null;
  }

  /** Returns true if field mothershipCertificate is set (has been assigned a value) and false otherwise */
  public boolean isSetMothershipCertificate() {
    return this.mothershipCertificate != null;
  }

  public void setMothershipCertificateIsSet(boolean value) {
    if (!value) {
      this.mothershipCertificate = null;
    }
  }

  /**
   * If you requested the server to sign a certificate this response will
   * have the PEM encoded cert
   */
  public String getUserCertificate() {
    return this.userCertificate;
  }

  /**
   * If you requested the server to sign a certificate this response will
   * have the PEM encoded cert
   */
  public LoginResult setUserCertificate(String userCertificate) {
    this.userCertificate = userCertificate;
    return this;
  }

  public void unsetUserCertificate() {
    this.userCertificate = null;
  }

  /** Returns true if field userCertificate is set (has been assigned a value) and false otherwise */
  public boolean isSetUserCertificate() {
    return this.userCertificate != null;
  }

  public void setUserCertificateIsSet(boolean value) {
    if (!value) {
      this.userCertificate = null;
    }
  }

  public String getSessionId() {
    return this.sessionId;
  }

  public LoginResult setSessionId(String sessionId) {
    this.sessionId = sessionId;
    return this;
  }

  public void unsetSessionId() {
    this.sessionId = null;
  }

  /** Returns true if field sessionId is set (has been assigned a value) and false otherwise */
  public boolean isSetSessionId() {
    return this.sessionId != null;
  }

  public void setSessionIdIsSet(boolean value) {
    if (!value) {
      this.sessionId = null;
    }
  }

  public String getProxyUserEmail() {
    return this.proxyUserEmail;
  }

  public LoginResult setProxyUserEmail(String proxyUserEmail) {
    this.proxyUserEmail = proxyUserEmail;
    return this;
  }

  public void unsetProxyUserEmail() {
    this.proxyUserEmail = null;
  }

  /** Returns true if field proxyUserEmail is set (has been assigned a value) and false otherwise */
  public boolean isSetProxyUserEmail() {
    return this.proxyUserEmail != null;
  }

  public void setProxyUserEmailIsSet(boolean value) {
    if (!value) {
      this.proxyUserEmail = null;
    }
  }

  public com.wi.director.thrift.v1.user.UserModular getCurrentUserModular() {
    return this.currentUserModular;
  }

  public LoginResult setCurrentUserModular(com.wi.director.thrift.v1.user.UserModular currentUserModular) {
    this.currentUserModular = currentUserModular;
    return this;
  }

  public void unsetCurrentUserModular() {
    this.currentUserModular = null;
  }

  /** Returns true if field currentUserModular is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrentUserModular() {
    return this.currentUserModular != null;
  }

  public void setCurrentUserModularIsSet(boolean value) {
    if (!value) {
      this.currentUserModular = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case AUTH_TOKEN:
      if (value == null) {
        unsetAuthToken();
      } else {
        setAuthToken((String)value);
      }
      break;

    case CURRENT_USER:
      if (value == null) {
        unsetCurrentUser();
      } else {
        setCurrentUser((com.wi.director.thrift.v1.user.User)value);
      }
      break;

    case TEAM_ID_TO_TEAM_ROLE:
      if (value == null) {
        unsetTeamIdToTeamRole();
      } else {
        setTeamIdToTeamRole((Map<String,List<com.wi.director.thrift.v1.user.TeamRole>>)value);
      }
      break;

    case TEAM_ID_TO_REGION_ID:
      if (value == null) {
        unsetTeamIdToRegionId();
      } else {
        setTeamIdToRegionId((Map<String,String>)value);
      }
      break;

    case REGION_ID_TO_REGION:
      if (value == null) {
        unsetRegionIdToRegion();
      } else {
        setRegionIdToRegion((Map<String,com.wi.director.thrift.v1.team.Region>)value);
      }
      break;

    case PREFERRED_REGION_ID:
      if (value == null) {
        unsetPreferredRegionId();
      } else {
        setPreferredRegionId((String)value);
      }
      break;

    case PERIODS:
      if (value == null) {
        unsetPeriods();
      } else {
        setPeriods((AuthPeriods)value);
      }
      break;

    case TEAM_ID_TO_JOB_PERMISSIONS:
      if (value == null) {
        unsetTeamIdToJobPermissions();
      } else {
        setTeamIdToJobPermissions((Map<String,com.wi.director.thrift.v1.jobrole.JobPermissions>)value);
      }
      break;

    case TEAM_ID_TO_INFO:
      if (value == null) {
        unsetTeamIdToInfo();
      } else {
        setTeamIdToInfo((Map<String,TeamInfo>)value);
      }
      break;

    case MOTHERSHIP_CERTIFICATE:
      if (value == null) {
        unsetMothershipCertificate();
      } else {
        setMothershipCertificate((String)value);
      }
      break;

    case USER_CERTIFICATE:
      if (value == null) {
        unsetUserCertificate();
      } else {
        setUserCertificate((String)value);
      }
      break;

    case SESSION_ID:
      if (value == null) {
        unsetSessionId();
      } else {
        setSessionId((String)value);
      }
      break;

    case PROXY_USER_EMAIL:
      if (value == null) {
        unsetProxyUserEmail();
      } else {
        setProxyUserEmail((String)value);
      }
      break;

    case CURRENT_USER_MODULAR:
      if (value == null) {
        unsetCurrentUserModular();
      } else {
        setCurrentUserModular((com.wi.director.thrift.v1.user.UserModular)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case AUTH_TOKEN:
      return getAuthToken();

    case CURRENT_USER:
      return getCurrentUser();

    case TEAM_ID_TO_TEAM_ROLE:
      return getTeamIdToTeamRole();

    case TEAM_ID_TO_REGION_ID:
      return getTeamIdToRegionId();

    case REGION_ID_TO_REGION:
      return getRegionIdToRegion();

    case PREFERRED_REGION_ID:
      return getPreferredRegionId();

    case PERIODS:
      return getPeriods();

    case TEAM_ID_TO_JOB_PERMISSIONS:
      return getTeamIdToJobPermissions();

    case TEAM_ID_TO_INFO:
      return getTeamIdToInfo();

    case MOTHERSHIP_CERTIFICATE:
      return getMothershipCertificate();

    case USER_CERTIFICATE:
      return getUserCertificate();

    case SESSION_ID:
      return getSessionId();

    case PROXY_USER_EMAIL:
      return getProxyUserEmail();

    case CURRENT_USER_MODULAR:
      return getCurrentUserModular();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case AUTH_TOKEN:
      return isSetAuthToken();
    case CURRENT_USER:
      return isSetCurrentUser();
    case TEAM_ID_TO_TEAM_ROLE:
      return isSetTeamIdToTeamRole();
    case TEAM_ID_TO_REGION_ID:
      return isSetTeamIdToRegionId();
    case REGION_ID_TO_REGION:
      return isSetRegionIdToRegion();
    case PREFERRED_REGION_ID:
      return isSetPreferredRegionId();
    case PERIODS:
      return isSetPeriods();
    case TEAM_ID_TO_JOB_PERMISSIONS:
      return isSetTeamIdToJobPermissions();
    case TEAM_ID_TO_INFO:
      return isSetTeamIdToInfo();
    case MOTHERSHIP_CERTIFICATE:
      return isSetMothershipCertificate();
    case USER_CERTIFICATE:
      return isSetUserCertificate();
    case SESSION_ID:
      return isSetSessionId();
    case PROXY_USER_EMAIL:
      return isSetProxyUserEmail();
    case CURRENT_USER_MODULAR:
      return isSetCurrentUserModular();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof LoginResult)
      return this.equals((LoginResult)that);
    return false;
  }

  public boolean equals(LoginResult that) {
    if (that == null)
      return false;

    boolean this_present_authToken = true && this.isSetAuthToken();
    boolean that_present_authToken = true && that.isSetAuthToken();
    if (this_present_authToken || that_present_authToken) {
      if (!(this_present_authToken && that_present_authToken))
        return false;
      if (!this.authToken.equals(that.authToken))
        return false;
    }

    boolean this_present_currentUser = true && this.isSetCurrentUser();
    boolean that_present_currentUser = true && that.isSetCurrentUser();
    if (this_present_currentUser || that_present_currentUser) {
      if (!(this_present_currentUser && that_present_currentUser))
        return false;
      if (!this.currentUser.equals(that.currentUser))
        return false;
    }

    boolean this_present_teamIdToTeamRole = true && this.isSetTeamIdToTeamRole();
    boolean that_present_teamIdToTeamRole = true && that.isSetTeamIdToTeamRole();
    if (this_present_teamIdToTeamRole || that_present_teamIdToTeamRole) {
      if (!(this_present_teamIdToTeamRole && that_present_teamIdToTeamRole))
        return false;
      if (!this.teamIdToTeamRole.equals(that.teamIdToTeamRole))
        return false;
    }

    boolean this_present_teamIdToRegionId = true && this.isSetTeamIdToRegionId();
    boolean that_present_teamIdToRegionId = true && that.isSetTeamIdToRegionId();
    if (this_present_teamIdToRegionId || that_present_teamIdToRegionId) {
      if (!(this_present_teamIdToRegionId && that_present_teamIdToRegionId))
        return false;
      if (!this.teamIdToRegionId.equals(that.teamIdToRegionId))
        return false;
    }

    boolean this_present_regionIdToRegion = true && this.isSetRegionIdToRegion();
    boolean that_present_regionIdToRegion = true && that.isSetRegionIdToRegion();
    if (this_present_regionIdToRegion || that_present_regionIdToRegion) {
      if (!(this_present_regionIdToRegion && that_present_regionIdToRegion))
        return false;
      if (!this.regionIdToRegion.equals(that.regionIdToRegion))
        return false;
    }

    boolean this_present_preferredRegionId = true && this.isSetPreferredRegionId();
    boolean that_present_preferredRegionId = true && that.isSetPreferredRegionId();
    if (this_present_preferredRegionId || that_present_preferredRegionId) {
      if (!(this_present_preferredRegionId && that_present_preferredRegionId))
        return false;
      if (!this.preferredRegionId.equals(that.preferredRegionId))
        return false;
    }

    boolean this_present_periods = true && this.isSetPeriods();
    boolean that_present_periods = true && that.isSetPeriods();
    if (this_present_periods || that_present_periods) {
      if (!(this_present_periods && that_present_periods))
        return false;
      if (!this.periods.equals(that.periods))
        return false;
    }

    boolean this_present_teamIdToJobPermissions = true && this.isSetTeamIdToJobPermissions();
    boolean that_present_teamIdToJobPermissions = true && that.isSetTeamIdToJobPermissions();
    if (this_present_teamIdToJobPermissions || that_present_teamIdToJobPermissions) {
      if (!(this_present_teamIdToJobPermissions && that_present_teamIdToJobPermissions))
        return false;
      if (!this.teamIdToJobPermissions.equals(that.teamIdToJobPermissions))
        return false;
    }

    boolean this_present_teamIdToInfo = true && this.isSetTeamIdToInfo();
    boolean that_present_teamIdToInfo = true && that.isSetTeamIdToInfo();
    if (this_present_teamIdToInfo || that_present_teamIdToInfo) {
      if (!(this_present_teamIdToInfo && that_present_teamIdToInfo))
        return false;
      if (!this.teamIdToInfo.equals(that.teamIdToInfo))
        return false;
    }

    boolean this_present_mothershipCertificate = true && this.isSetMothershipCertificate();
    boolean that_present_mothershipCertificate = true && that.isSetMothershipCertificate();
    if (this_present_mothershipCertificate || that_present_mothershipCertificate) {
      if (!(this_present_mothershipCertificate && that_present_mothershipCertificate))
        return false;
      if (!this.mothershipCertificate.equals(that.mothershipCertificate))
        return false;
    }

    boolean this_present_userCertificate = true && this.isSetUserCertificate();
    boolean that_present_userCertificate = true && that.isSetUserCertificate();
    if (this_present_userCertificate || that_present_userCertificate) {
      if (!(this_present_userCertificate && that_present_userCertificate))
        return false;
      if (!this.userCertificate.equals(that.userCertificate))
        return false;
    }

    boolean this_present_sessionId = true && this.isSetSessionId();
    boolean that_present_sessionId = true && that.isSetSessionId();
    if (this_present_sessionId || that_present_sessionId) {
      if (!(this_present_sessionId && that_present_sessionId))
        return false;
      if (!this.sessionId.equals(that.sessionId))
        return false;
    }

    boolean this_present_proxyUserEmail = true && this.isSetProxyUserEmail();
    boolean that_present_proxyUserEmail = true && that.isSetProxyUserEmail();
    if (this_present_proxyUserEmail || that_present_proxyUserEmail) {
      if (!(this_present_proxyUserEmail && that_present_proxyUserEmail))
        return false;
      if (!this.proxyUserEmail.equals(that.proxyUserEmail))
        return false;
    }

    boolean this_present_currentUserModular = true && this.isSetCurrentUserModular();
    boolean that_present_currentUserModular = true && that.isSetCurrentUserModular();
    if (this_present_currentUserModular || that_present_currentUserModular) {
      if (!(this_present_currentUserModular && that_present_currentUserModular))
        return false;
      if (!this.currentUserModular.equals(that.currentUserModular))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_authToken = true && (isSetAuthToken());
    list.add(present_authToken);
    if (present_authToken)
      list.add(authToken);

    boolean present_currentUser = true && (isSetCurrentUser());
    list.add(present_currentUser);
    if (present_currentUser)
      list.add(currentUser);

    boolean present_teamIdToTeamRole = true && (isSetTeamIdToTeamRole());
    list.add(present_teamIdToTeamRole);
    if (present_teamIdToTeamRole)
      list.add(teamIdToTeamRole);

    boolean present_teamIdToRegionId = true && (isSetTeamIdToRegionId());
    list.add(present_teamIdToRegionId);
    if (present_teamIdToRegionId)
      list.add(teamIdToRegionId);

    boolean present_regionIdToRegion = true && (isSetRegionIdToRegion());
    list.add(present_regionIdToRegion);
    if (present_regionIdToRegion)
      list.add(regionIdToRegion);

    boolean present_preferredRegionId = true && (isSetPreferredRegionId());
    list.add(present_preferredRegionId);
    if (present_preferredRegionId)
      list.add(preferredRegionId);

    boolean present_periods = true && (isSetPeriods());
    list.add(present_periods);
    if (present_periods)
      list.add(periods);

    boolean present_teamIdToJobPermissions = true && (isSetTeamIdToJobPermissions());
    list.add(present_teamIdToJobPermissions);
    if (present_teamIdToJobPermissions)
      list.add(teamIdToJobPermissions);

    boolean present_teamIdToInfo = true && (isSetTeamIdToInfo());
    list.add(present_teamIdToInfo);
    if (present_teamIdToInfo)
      list.add(teamIdToInfo);

    boolean present_mothershipCertificate = true && (isSetMothershipCertificate());
    list.add(present_mothershipCertificate);
    if (present_mothershipCertificate)
      list.add(mothershipCertificate);

    boolean present_userCertificate = true && (isSetUserCertificate());
    list.add(present_userCertificate);
    if (present_userCertificate)
      list.add(userCertificate);

    boolean present_sessionId = true && (isSetSessionId());
    list.add(present_sessionId);
    if (present_sessionId)
      list.add(sessionId);

    boolean present_proxyUserEmail = true && (isSetProxyUserEmail());
    list.add(present_proxyUserEmail);
    if (present_proxyUserEmail)
      list.add(proxyUserEmail);

    boolean present_currentUserModular = true && (isSetCurrentUserModular());
    list.add(present_currentUserModular);
    if (present_currentUserModular)
      list.add(currentUserModular);

    return list.hashCode();
  }

  @Override
  public int compareTo(LoginResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAuthToken()).compareTo(other.isSetAuthToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuthToken()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authToken, other.authToken);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrentUser()).compareTo(other.isSetCurrentUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrentUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currentUser, other.currentUser);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTeamIdToTeamRole()).compareTo(other.isSetTeamIdToTeamRole());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeamIdToTeamRole()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teamIdToTeamRole, other.teamIdToTeamRole);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTeamIdToRegionId()).compareTo(other.isSetTeamIdToRegionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeamIdToRegionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teamIdToRegionId, other.teamIdToRegionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegionIdToRegion()).compareTo(other.isSetRegionIdToRegion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegionIdToRegion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regionIdToRegion, other.regionIdToRegion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPreferredRegionId()).compareTo(other.isSetPreferredRegionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPreferredRegionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.preferredRegionId, other.preferredRegionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPeriods()).compareTo(other.isSetPeriods());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPeriods()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.periods, other.periods);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTeamIdToJobPermissions()).compareTo(other.isSetTeamIdToJobPermissions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeamIdToJobPermissions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teamIdToJobPermissions, other.teamIdToJobPermissions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTeamIdToInfo()).compareTo(other.isSetTeamIdToInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeamIdToInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teamIdToInfo, other.teamIdToInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMothershipCertificate()).compareTo(other.isSetMothershipCertificate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMothershipCertificate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mothershipCertificate, other.mothershipCertificate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserCertificate()).compareTo(other.isSetUserCertificate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserCertificate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userCertificate, other.userCertificate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSessionId()).compareTo(other.isSetSessionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSessionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionId, other.sessionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProxyUserEmail()).compareTo(other.isSetProxyUserEmail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProxyUserEmail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.proxyUserEmail, other.proxyUserEmail);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrentUserModular()).compareTo(other.isSetCurrentUserModular());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrentUserModular()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currentUserModular, other.currentUserModular);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("LoginResult(");
    boolean first = true;

    sb.append("authToken:");
    if (this.authToken == null) {
      sb.append("null");
    } else {
      sb.append(this.authToken);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("currentUser:");
    if (this.currentUser == null) {
      sb.append("null");
    } else {
      sb.append(this.currentUser);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("teamIdToTeamRole:");
    if (this.teamIdToTeamRole == null) {
      sb.append("null");
    } else {
      sb.append(this.teamIdToTeamRole);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("teamIdToRegionId:");
    if (this.teamIdToRegionId == null) {
      sb.append("null");
    } else {
      sb.append(this.teamIdToRegionId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("regionIdToRegion:");
    if (this.regionIdToRegion == null) {
      sb.append("null");
    } else {
      sb.append(this.regionIdToRegion);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("preferredRegionId:");
    if (this.preferredRegionId == null) {
      sb.append("null");
    } else {
      sb.append(this.preferredRegionId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("periods:");
    if (this.periods == null) {
      sb.append("null");
    } else {
      sb.append(this.periods);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("teamIdToJobPermissions:");
    if (this.teamIdToJobPermissions == null) {
      sb.append("null");
    } else {
      sb.append(this.teamIdToJobPermissions);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("teamIdToInfo:");
    if (this.teamIdToInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.teamIdToInfo);
    }
    first = false;
    if (isSetMothershipCertificate()) {
      if (!first) sb.append(", ");
      sb.append("mothershipCertificate:");
      if (this.mothershipCertificate == null) {
        sb.append("null");
      } else {
        sb.append(this.mothershipCertificate);
      }
      first = false;
    }
    if (isSetUserCertificate()) {
      if (!first) sb.append(", ");
      sb.append("userCertificate:");
      if (this.userCertificate == null) {
        sb.append("null");
      } else {
        sb.append(this.userCertificate);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("sessionId:");
    if (this.sessionId == null) {
      sb.append("null");
    } else {
      sb.append(this.sessionId);
    }
    first = false;
    if (isSetProxyUserEmail()) {
      if (!first) sb.append(", ");
      sb.append("proxyUserEmail:");
      if (this.proxyUserEmail == null) {
        sb.append("null");
      } else {
        sb.append(this.proxyUserEmail);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("currentUserModular:");
    if (this.currentUserModular == null) {
      sb.append("null");
    } else {
      sb.append(this.currentUserModular);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (currentUser != null) {
      currentUser.validate();
    }
    if (periods != null) {
      periods.validate();
    }
    if (currentUserModular != null) {
      currentUserModular.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LoginResultStandardSchemeFactory implements SchemeFactory {
    public LoginResultStandardScheme getScheme() {
      return new LoginResultStandardScheme();
    }
  }

  private static class LoginResultStandardScheme extends StandardScheme<LoginResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LoginResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // AUTH_TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.authToken = iprot.readString();
              struct.setAuthTokenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CURRENT_USER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.currentUser = new com.wi.director.thrift.v1.user.User();
              struct.currentUser.read(iprot);
              struct.setCurrentUserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TEAM_ID_TO_TEAM_ROLE
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map19 = iprot.readMapBegin();
                struct.teamIdToTeamRole = new HashMap<String,List<com.wi.director.thrift.v1.user.TeamRole>>(2*_map19.size);
                String _key20;
                List<com.wi.director.thrift.v1.user.TeamRole> _val21;
                for (int _i22 = 0; _i22 < _map19.size; ++_i22)
                {
                  _key20 = iprot.readString();
                  {
                    org.apache.thrift.protocol.TList _list23 = iprot.readListBegin();
                    _val21 = new ArrayList<com.wi.director.thrift.v1.user.TeamRole>(_list23.size);
                    com.wi.director.thrift.v1.user.TeamRole _elem24;
                    for (int _i25 = 0; _i25 < _list23.size; ++_i25)
                    {
                      _elem24 = com.wi.director.thrift.v1.user.TeamRole.findByValue(iprot.readI32());
                      _val21.add(_elem24);
                    }
                    iprot.readListEnd();
                  }
                  struct.teamIdToTeamRole.put(_key20, _val21);
                }
                iprot.readMapEnd();
              }
              struct.setTeamIdToTeamRoleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TEAM_ID_TO_REGION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map26 = iprot.readMapBegin();
                struct.teamIdToRegionId = new HashMap<String,String>(2*_map26.size);
                String _key27;
                String _val28;
                for (int _i29 = 0; _i29 < _map26.size; ++_i29)
                {
                  _key27 = iprot.readString();
                  _val28 = iprot.readString();
                  struct.teamIdToRegionId.put(_key27, _val28);
                }
                iprot.readMapEnd();
              }
              struct.setTeamIdToRegionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // REGION_ID_TO_REGION
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map30 = iprot.readMapBegin();
                struct.regionIdToRegion = new HashMap<String,com.wi.director.thrift.v1.team.Region>(2*_map30.size);
                String _key31;
                com.wi.director.thrift.v1.team.Region _val32;
                for (int _i33 = 0; _i33 < _map30.size; ++_i33)
                {
                  _key31 = iprot.readString();
                  _val32 = new com.wi.director.thrift.v1.team.Region();
                  _val32.read(iprot);
                  struct.regionIdToRegion.put(_key31, _val32);
                }
                iprot.readMapEnd();
              }
              struct.setRegionIdToRegionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PREFERRED_REGION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.preferredRegionId = iprot.readString();
              struct.setPreferredRegionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PERIODS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.periods = new AuthPeriods();
              struct.periods.read(iprot);
              struct.setPeriodsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TEAM_ID_TO_JOB_PERMISSIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map34 = iprot.readMapBegin();
                struct.teamIdToJobPermissions = new HashMap<String,com.wi.director.thrift.v1.jobrole.JobPermissions>(2*_map34.size);
                String _key35;
                com.wi.director.thrift.v1.jobrole.JobPermissions _val36;
                for (int _i37 = 0; _i37 < _map34.size; ++_i37)
                {
                  _key35 = iprot.readString();
                  _val36 = new com.wi.director.thrift.v1.jobrole.JobPermissions();
                  _val36.read(iprot);
                  struct.teamIdToJobPermissions.put(_key35, _val36);
                }
                iprot.readMapEnd();
              }
              struct.setTeamIdToJobPermissionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TEAM_ID_TO_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map38 = iprot.readMapBegin();
                struct.teamIdToInfo = new HashMap<String,TeamInfo>(2*_map38.size);
                String _key39;
                TeamInfo _val40;
                for (int _i41 = 0; _i41 < _map38.size; ++_i41)
                {
                  _key39 = iprot.readString();
                  _val40 = new TeamInfo();
                  _val40.read(iprot);
                  struct.teamIdToInfo.put(_key39, _val40);
                }
                iprot.readMapEnd();
              }
              struct.setTeamIdToInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // MOTHERSHIP_CERTIFICATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mothershipCertificate = iprot.readString();
              struct.setMothershipCertificateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // USER_CERTIFICATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userCertificate = iprot.readString();
              struct.setUserCertificateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // SESSION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sessionId = iprot.readString();
              struct.setSessionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // PROXY_USER_EMAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.proxyUserEmail = iprot.readString();
              struct.setProxyUserEmailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // CURRENT_USER_MODULAR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.currentUserModular = new com.wi.director.thrift.v1.user.UserModular();
              struct.currentUserModular.read(iprot);
              struct.setCurrentUserModularIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LoginResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.authToken != null) {
        oprot.writeFieldBegin(AUTH_TOKEN_FIELD_DESC);
        oprot.writeString(struct.authToken);
        oprot.writeFieldEnd();
      }
      if (struct.currentUser != null) {
        oprot.writeFieldBegin(CURRENT_USER_FIELD_DESC);
        struct.currentUser.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.teamIdToTeamRole != null) {
        oprot.writeFieldBegin(TEAM_ID_TO_TEAM_ROLE_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, struct.teamIdToTeamRole.size()));
          for (Map.Entry<String, List<com.wi.director.thrift.v1.user.TeamRole>> _iter42 : struct.teamIdToTeamRole.entrySet())
          {
            oprot.writeString(_iter42.getKey());
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, _iter42.getValue().size()));
              for (com.wi.director.thrift.v1.user.TeamRole _iter43 : _iter42.getValue())
              {
                oprot.writeI32(_iter43.getValue());
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.teamIdToRegionId != null) {
        oprot.writeFieldBegin(TEAM_ID_TO_REGION_ID_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.teamIdToRegionId.size()));
          for (Map.Entry<String, String> _iter44 : struct.teamIdToRegionId.entrySet())
          {
            oprot.writeString(_iter44.getKey());
            oprot.writeString(_iter44.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.regionIdToRegion != null) {
        oprot.writeFieldBegin(REGION_ID_TO_REGION_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.regionIdToRegion.size()));
          for (Map.Entry<String, com.wi.director.thrift.v1.team.Region> _iter45 : struct.regionIdToRegion.entrySet())
          {
            oprot.writeString(_iter45.getKey());
            _iter45.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.preferredRegionId != null) {
        oprot.writeFieldBegin(PREFERRED_REGION_ID_FIELD_DESC);
        oprot.writeString(struct.preferredRegionId);
        oprot.writeFieldEnd();
      }
      if (struct.periods != null) {
        oprot.writeFieldBegin(PERIODS_FIELD_DESC);
        struct.periods.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.teamIdToJobPermissions != null) {
        oprot.writeFieldBegin(TEAM_ID_TO_JOB_PERMISSIONS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.teamIdToJobPermissions.size()));
          for (Map.Entry<String, com.wi.director.thrift.v1.jobrole.JobPermissions> _iter46 : struct.teamIdToJobPermissions.entrySet())
          {
            oprot.writeString(_iter46.getKey());
            _iter46.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.teamIdToInfo != null) {
        oprot.writeFieldBegin(TEAM_ID_TO_INFO_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.teamIdToInfo.size()));
          for (Map.Entry<String, TeamInfo> _iter47 : struct.teamIdToInfo.entrySet())
          {
            oprot.writeString(_iter47.getKey());
            _iter47.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.mothershipCertificate != null) {
        if (struct.isSetMothershipCertificate()) {
          oprot.writeFieldBegin(MOTHERSHIP_CERTIFICATE_FIELD_DESC);
          oprot.writeString(struct.mothershipCertificate);
          oprot.writeFieldEnd();
        }
      }
      if (struct.userCertificate != null) {
        if (struct.isSetUserCertificate()) {
          oprot.writeFieldBegin(USER_CERTIFICATE_FIELD_DESC);
          oprot.writeString(struct.userCertificate);
          oprot.writeFieldEnd();
        }
      }
      if (struct.sessionId != null) {
        oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
        oprot.writeString(struct.sessionId);
        oprot.writeFieldEnd();
      }
      if (struct.proxyUserEmail != null) {
        if (struct.isSetProxyUserEmail()) {
          oprot.writeFieldBegin(PROXY_USER_EMAIL_FIELD_DESC);
          oprot.writeString(struct.proxyUserEmail);
          oprot.writeFieldEnd();
        }
      }
      if (struct.currentUserModular != null) {
        oprot.writeFieldBegin(CURRENT_USER_MODULAR_FIELD_DESC);
        struct.currentUserModular.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

}

