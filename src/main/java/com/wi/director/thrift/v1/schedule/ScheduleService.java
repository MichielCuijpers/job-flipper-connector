/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wi.director.thrift.v1.schedule;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class ScheduleService {

  public interface Iface {

    /**
     * Max numNextScheduledRuns is 10
     * 
     * @param ownerId
     * @param numLogsToInclude
     * @param numNextScheduledRuns
     */
    public GetScheduleResult getByOwnerId(String ownerId, int numLogsToInclude, int numNextScheduledRuns) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public GetScheduleResult getByOwnerId(String ownerId, int numLogsToInclude, int numNextScheduledRuns) throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      send_getByOwnerId(ownerId, numLogsToInclude, numNextScheduledRuns);
      return recv_getByOwnerId();
    }

    public void send_getByOwnerId(String ownerId, int numLogsToInclude, int numNextScheduledRuns) throws org.apache.thrift.TException
    {
      getByOwnerId_args args = new getByOwnerId_args();
      args.setOwnerId(ownerId);
      args.setNumLogsToInclude(numLogsToInclude);
      args.setNumNextScheduledRuns(numNextScheduledRuns);
      sendBase("getByOwnerId", args);
    }

    public GetScheduleResult recv_getByOwnerId() throws com.wi.director.thrift.v1.common.SystemException, org.apache.thrift.TException
    {
      getByOwnerId_result result = new getByOwnerId_result();
      receiveBase(result, "getByOwnerId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getByOwnerId failed: unknown result");
    }

  }
  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getByOwnerId", new getByOwnerId());
      return processMap;
    }

    public static class getByOwnerId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getByOwnerId_args> {
      public getByOwnerId() {
        super("getByOwnerId");
      }

      public getByOwnerId_args getEmptyArgsInstance() {
        return new getByOwnerId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getByOwnerId_result getResult(I iface, getByOwnerId_args args) throws org.apache.thrift.TException {
        getByOwnerId_result result = new getByOwnerId_result();
        try {
          result.success = iface.getByOwnerId(args.ownerId, args.numLogsToInclude, args.numNextScheduledRuns);
        } catch (com.wi.director.thrift.v1.common.SystemException err) {
          result.err = err;
        }
        return result;
      }
    }

  }

  public static class getByOwnerId_args implements org.apache.thrift.TBase<getByOwnerId_args, getByOwnerId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getByOwnerId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getByOwnerId_args");

    private static final org.apache.thrift.protocol.TField OWNER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ownerId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField NUM_LOGS_TO_INCLUDE_FIELD_DESC = new org.apache.thrift.protocol.TField("numLogsToInclude", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField NUM_NEXT_SCHEDULED_RUNS_FIELD_DESC = new org.apache.thrift.protocol.TField("numNextScheduledRuns", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getByOwnerId_argsStandardSchemeFactory());
    }

    public String ownerId; // required
    public int numLogsToInclude; // required
    public int numNextScheduledRuns; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OWNER_ID((short)1, "ownerId"),
      NUM_LOGS_TO_INCLUDE((short)2, "numLogsToInclude"),
      NUM_NEXT_SCHEDULED_RUNS((short)3, "numNextScheduledRuns");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OWNER_ID
            return OWNER_ID;
          case 2: // NUM_LOGS_TO_INCLUDE
            return NUM_LOGS_TO_INCLUDE;
          case 3: // NUM_NEXT_SCHEDULED_RUNS
            return NUM_NEXT_SCHEDULED_RUNS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NUMLOGSTOINCLUDE_ISSET_ID = 0;
    private static final int __NUMNEXTSCHEDULEDRUNS_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OWNER_ID, new org.apache.thrift.meta_data.FieldMetaData("ownerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NUM_LOGS_TO_INCLUDE, new org.apache.thrift.meta_data.FieldMetaData("numLogsToInclude", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.NUM_NEXT_SCHEDULED_RUNS, new org.apache.thrift.meta_data.FieldMetaData("numNextScheduledRuns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getByOwnerId_args.class, metaDataMap);
    }

    public getByOwnerId_args() {
    }

    public getByOwnerId_args(
      String ownerId,
      int numLogsToInclude,
      int numNextScheduledRuns)
    {
      this();
      this.ownerId = ownerId;
      this.numLogsToInclude = numLogsToInclude;
      setNumLogsToIncludeIsSet(true);
      this.numNextScheduledRuns = numNextScheduledRuns;
      setNumNextScheduledRunsIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getByOwnerId_args(getByOwnerId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetOwnerId()) {
        this.ownerId = other.ownerId;
      }
      this.numLogsToInclude = other.numLogsToInclude;
      this.numNextScheduledRuns = other.numNextScheduledRuns;
    }

    public getByOwnerId_args deepCopy() {
      return new getByOwnerId_args(this);
    }

    @Override
    public void clear() {
      this.ownerId = null;
      setNumLogsToIncludeIsSet(false);
      this.numLogsToInclude = 0;
      setNumNextScheduledRunsIsSet(false);
      this.numNextScheduledRuns = 0;
    }

    public String getOwnerId() {
      return this.ownerId;
    }

    public getByOwnerId_args setOwnerId(String ownerId) {
      this.ownerId = ownerId;
      return this;
    }

    public void unsetOwnerId() {
      this.ownerId = null;
    }

    /** Returns true if field ownerId is set (has been assigned a value) and false otherwise */
    public boolean isSetOwnerId() {
      return this.ownerId != null;
    }

    public void setOwnerIdIsSet(boolean value) {
      if (!value) {
        this.ownerId = null;
      }
    }

    public int getNumLogsToInclude() {
      return this.numLogsToInclude;
    }

    public getByOwnerId_args setNumLogsToInclude(int numLogsToInclude) {
      this.numLogsToInclude = numLogsToInclude;
      setNumLogsToIncludeIsSet(true);
      return this;
    }

    public void unsetNumLogsToInclude() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMLOGSTOINCLUDE_ISSET_ID);
    }

    /** Returns true if field numLogsToInclude is set (has been assigned a value) and false otherwise */
    public boolean isSetNumLogsToInclude() {
      return EncodingUtils.testBit(__isset_bitfield, __NUMLOGSTOINCLUDE_ISSET_ID);
    }

    public void setNumLogsToIncludeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMLOGSTOINCLUDE_ISSET_ID, value);
    }

    public int getNumNextScheduledRuns() {
      return this.numNextScheduledRuns;
    }

    public getByOwnerId_args setNumNextScheduledRuns(int numNextScheduledRuns) {
      this.numNextScheduledRuns = numNextScheduledRuns;
      setNumNextScheduledRunsIsSet(true);
      return this;
    }

    public void unsetNumNextScheduledRuns() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMNEXTSCHEDULEDRUNS_ISSET_ID);
    }

    /** Returns true if field numNextScheduledRuns is set (has been assigned a value) and false otherwise */
    public boolean isSetNumNextScheduledRuns() {
      return EncodingUtils.testBit(__isset_bitfield, __NUMNEXTSCHEDULEDRUNS_ISSET_ID);
    }

    public void setNumNextScheduledRunsIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMNEXTSCHEDULEDRUNS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OWNER_ID:
        if (value == null) {
          unsetOwnerId();
        } else {
          setOwnerId((String)value);
        }
        break;

      case NUM_LOGS_TO_INCLUDE:
        if (value == null) {
          unsetNumLogsToInclude();
        } else {
          setNumLogsToInclude((Integer)value);
        }
        break;

      case NUM_NEXT_SCHEDULED_RUNS:
        if (value == null) {
          unsetNumNextScheduledRuns();
        } else {
          setNumNextScheduledRuns((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OWNER_ID:
        return getOwnerId();

      case NUM_LOGS_TO_INCLUDE:
        return getNumLogsToInclude();

      case NUM_NEXT_SCHEDULED_RUNS:
        return getNumNextScheduledRuns();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OWNER_ID:
        return isSetOwnerId();
      case NUM_LOGS_TO_INCLUDE:
        return isSetNumLogsToInclude();
      case NUM_NEXT_SCHEDULED_RUNS:
        return isSetNumNextScheduledRuns();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getByOwnerId_args)
        return this.equals((getByOwnerId_args)that);
      return false;
    }

    public boolean equals(getByOwnerId_args that) {
      if (that == null)
        return false;

      boolean this_present_ownerId = true && this.isSetOwnerId();
      boolean that_present_ownerId = true && that.isSetOwnerId();
      if (this_present_ownerId || that_present_ownerId) {
        if (!(this_present_ownerId && that_present_ownerId))
          return false;
        if (!this.ownerId.equals(that.ownerId))
          return false;
      }

      boolean this_present_numLogsToInclude = true;
      boolean that_present_numLogsToInclude = true;
      if (this_present_numLogsToInclude || that_present_numLogsToInclude) {
        if (!(this_present_numLogsToInclude && that_present_numLogsToInclude))
          return false;
        if (this.numLogsToInclude != that.numLogsToInclude)
          return false;
      }

      boolean this_present_numNextScheduledRuns = true;
      boolean that_present_numNextScheduledRuns = true;
      if (this_present_numNextScheduledRuns || that_present_numNextScheduledRuns) {
        if (!(this_present_numNextScheduledRuns && that_present_numNextScheduledRuns))
          return false;
        if (this.numNextScheduledRuns != that.numNextScheduledRuns)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ownerId = true && (isSetOwnerId());
      list.add(present_ownerId);
      if (present_ownerId)
        list.add(ownerId);

      boolean present_numLogsToInclude = true;
      list.add(present_numLogsToInclude);
      if (present_numLogsToInclude)
        list.add(numLogsToInclude);

      boolean present_numNextScheduledRuns = true;
      list.add(present_numNextScheduledRuns);
      if (present_numNextScheduledRuns)
        list.add(numNextScheduledRuns);

      return list.hashCode();
    }

    @Override
    public int compareTo(getByOwnerId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOwnerId()).compareTo(other.isSetOwnerId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOwnerId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ownerId, other.ownerId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNumLogsToInclude()).compareTo(other.isSetNumLogsToInclude());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumLogsToInclude()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numLogsToInclude, other.numLogsToInclude);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNumNextScheduledRuns()).compareTo(other.isSetNumNextScheduledRuns());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumNextScheduledRuns()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numNextScheduledRuns, other.numNextScheduledRuns);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getByOwnerId_args(");
      boolean first = true;

      sb.append("ownerId:");
      if (this.ownerId == null) {
        sb.append("null");
      } else {
        sb.append(this.ownerId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("numLogsToInclude:");
      sb.append(this.numLogsToInclude);
      first = false;
      if (!first) sb.append(", ");
      sb.append("numNextScheduledRuns:");
      sb.append(this.numNextScheduledRuns);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getByOwnerId_argsStandardSchemeFactory implements SchemeFactory {
      public getByOwnerId_argsStandardScheme getScheme() {
        return new getByOwnerId_argsStandardScheme();
      }
    }

    private static class getByOwnerId_argsStandardScheme extends StandardScheme<getByOwnerId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getByOwnerId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OWNER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ownerId = iprot.readString();
                struct.setOwnerIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NUM_LOGS_TO_INCLUDE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.numLogsToInclude = iprot.readI32();
                struct.setNumLogsToIncludeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NUM_NEXT_SCHEDULED_RUNS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.numNextScheduledRuns = iprot.readI32();
                struct.setNumNextScheduledRunsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getByOwnerId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ownerId != null) {
          oprot.writeFieldBegin(OWNER_ID_FIELD_DESC);
          oprot.writeString(struct.ownerId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(NUM_LOGS_TO_INCLUDE_FIELD_DESC);
        oprot.writeI32(struct.numLogsToInclude);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(NUM_NEXT_SCHEDULED_RUNS_FIELD_DESC);
        oprot.writeI32(struct.numNextScheduledRuns);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class getByOwnerId_result implements org.apache.thrift.TBase<getByOwnerId_result, getByOwnerId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getByOwnerId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getByOwnerId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getByOwnerId_resultStandardSchemeFactory());
    }

    public GetScheduleResult success; // required
    public com.wi.director.thrift.v1.common.SystemException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GetScheduleResult.class)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getByOwnerId_result.class, metaDataMap);
    }

    public getByOwnerId_result() {
    }

    public getByOwnerId_result(
      GetScheduleResult success,
      com.wi.director.thrift.v1.common.SystemException err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getByOwnerId_result(getByOwnerId_result other) {
      if (other.isSetSuccess()) {
        this.success = new GetScheduleResult(other.success);
      }
      if (other.isSetErr()) {
        this.err = new com.wi.director.thrift.v1.common.SystemException(other.err);
      }
    }

    public getByOwnerId_result deepCopy() {
      return new getByOwnerId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public GetScheduleResult getSuccess() {
      return this.success;
    }

    public getByOwnerId_result setSuccess(GetScheduleResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.wi.director.thrift.v1.common.SystemException getErr() {
      return this.err;
    }

    public getByOwnerId_result setErr(com.wi.director.thrift.v1.common.SystemException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((GetScheduleResult)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((com.wi.director.thrift.v1.common.SystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getByOwnerId_result)
        return this.equals((getByOwnerId_result)that);
      return false;
    }

    public boolean equals(getByOwnerId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(getByOwnerId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getByOwnerId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getByOwnerId_resultStandardSchemeFactory implements SchemeFactory {
      public getByOwnerId_resultStandardScheme getScheme() {
        return new getByOwnerId_resultStandardScheme();
      }
    }

    private static class getByOwnerId_resultStandardScheme extends StandardScheme<getByOwnerId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getByOwnerId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new GetScheduleResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new com.wi.director.thrift.v1.common.SystemException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getByOwnerId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

}
