/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wi.director.thrift.v1.authentication;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class LoginOptions implements org.apache.thrift.TBase<LoginOptions, LoginOptions._Fields>, java.io.Serializable, Cloneable, Comparable<LoginOptions> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LoginOptions");

  private static final org.apache.thrift.protocol.TField CERTIFICATE_SIGNING_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("certificateSigningRequest", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PROXIED_USER_EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("proxiedUserEmail", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField USER_PRIVATE_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("userPrivateKey", org.apache.thrift.protocol.TType.STRING, (short)100);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new LoginOptionsStandardSchemeFactory());
  }

  /**
   * Send up a PEM encoded certificate signing request for mothership to sign
   * You can then use this certificate later on prove your authenticity
   * to other people.
   * Mothership will override any parameters it sees fit (will use same public key)
   * So always use the LoginResult#userCertificate you get back down
   */
  public String certificateSigningRequest; // optional
  /**
   * Login as this user, but with a proxy super admin account
   * If the account is not a super admin, the login would be rejected
   * The returned token and user will be the proxied user's, with the `proxyUserEmail`
   * set to the admin's email
   */
  public String proxiedUserEmail; // optional
  /**
   * NOTHML
   */
  public String userPrivateKey; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * Send up a PEM encoded certificate signing request for mothership to sign
     * You can then use this certificate later on prove your authenticity
     * to other people.
     * Mothership will override any parameters it sees fit (will use same public key)
     * So always use the LoginResult#userCertificate you get back down
     */
    CERTIFICATE_SIGNING_REQUEST((short)1, "certificateSigningRequest"),
    /**
     * Login as this user, but with a proxy super admin account
     * If the account is not a super admin, the login would be rejected
     * The returned token and user will be the proxied user's, with the `proxyUserEmail`
     * set to the admin's email
     */
    PROXIED_USER_EMAIL((short)2, "proxiedUserEmail"),
    /**
     * NOTHML
     */
    USER_PRIVATE_KEY((short)100, "userPrivateKey");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CERTIFICATE_SIGNING_REQUEST
          return CERTIFICATE_SIGNING_REQUEST;
        case 2: // PROXIED_USER_EMAIL
          return PROXIED_USER_EMAIL;
        case 100: // USER_PRIVATE_KEY
          return USER_PRIVATE_KEY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.CERTIFICATE_SIGNING_REQUEST,_Fields.PROXIED_USER_EMAIL,_Fields.USER_PRIVATE_KEY};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CERTIFICATE_SIGNING_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("certificateSigningRequest", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROXIED_USER_EMAIL, new org.apache.thrift.meta_data.FieldMetaData("proxiedUserEmail", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_PRIVATE_KEY, new org.apache.thrift.meta_data.FieldMetaData("userPrivateKey", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LoginOptions.class, metaDataMap);
  }

  public LoginOptions() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LoginOptions(LoginOptions other) {
    if (other.isSetCertificateSigningRequest()) {
      this.certificateSigningRequest = other.certificateSigningRequest;
    }
    if (other.isSetProxiedUserEmail()) {
      this.proxiedUserEmail = other.proxiedUserEmail;
    }
    if (other.isSetUserPrivateKey()) {
      this.userPrivateKey = other.userPrivateKey;
    }
  }

  public LoginOptions deepCopy() {
    return new LoginOptions(this);
  }

  @Override
  public void clear() {
    this.certificateSigningRequest = null;
    this.proxiedUserEmail = null;
    this.userPrivateKey = null;
  }

  /**
   * Send up a PEM encoded certificate signing request for mothership to sign
   * You can then use this certificate later on prove your authenticity
   * to other people.
   * Mothership will override any parameters it sees fit (will use same public key)
   * So always use the LoginResult#userCertificate you get back down
   */
  public String getCertificateSigningRequest() {
    return this.certificateSigningRequest;
  }

  /**
   * Send up a PEM encoded certificate signing request for mothership to sign
   * You can then use this certificate later on prove your authenticity
   * to other people.
   * Mothership will override any parameters it sees fit (will use same public key)
   * So always use the LoginResult#userCertificate you get back down
   */
  public LoginOptions setCertificateSigningRequest(String certificateSigningRequest) {
    this.certificateSigningRequest = certificateSigningRequest;
    return this;
  }

  public void unsetCertificateSigningRequest() {
    this.certificateSigningRequest = null;
  }

  /** Returns true if field certificateSigningRequest is set (has been assigned a value) and false otherwise */
  public boolean isSetCertificateSigningRequest() {
    return this.certificateSigningRequest != null;
  }

  public void setCertificateSigningRequestIsSet(boolean value) {
    if (!value) {
      this.certificateSigningRequest = null;
    }
  }

  /**
   * Login as this user, but with a proxy super admin account
   * If the account is not a super admin, the login would be rejected
   * The returned token and user will be the proxied user's, with the `proxyUserEmail`
   * set to the admin's email
   */
  public String getProxiedUserEmail() {
    return this.proxiedUserEmail;
  }

  /**
   * Login as this user, but with a proxy super admin account
   * If the account is not a super admin, the login would be rejected
   * The returned token and user will be the proxied user's, with the `proxyUserEmail`
   * set to the admin's email
   */
  public LoginOptions setProxiedUserEmail(String proxiedUserEmail) {
    this.proxiedUserEmail = proxiedUserEmail;
    return this;
  }

  public void unsetProxiedUserEmail() {
    this.proxiedUserEmail = null;
  }

  /** Returns true if field proxiedUserEmail is set (has been assigned a value) and false otherwise */
  public boolean isSetProxiedUserEmail() {
    return this.proxiedUserEmail != null;
  }

  public void setProxiedUserEmailIsSet(boolean value) {
    if (!value) {
      this.proxiedUserEmail = null;
    }
  }

  /**
   * NOTHML
   */
  public String getUserPrivateKey() {
    return this.userPrivateKey;
  }

  /**
   * NOTHML
   */
  public LoginOptions setUserPrivateKey(String userPrivateKey) {
    this.userPrivateKey = userPrivateKey;
    return this;
  }

  public void unsetUserPrivateKey() {
    this.userPrivateKey = null;
  }

  /** Returns true if field userPrivateKey is set (has been assigned a value) and false otherwise */
  public boolean isSetUserPrivateKey() {
    return this.userPrivateKey != null;
  }

  public void setUserPrivateKeyIsSet(boolean value) {
    if (!value) {
      this.userPrivateKey = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CERTIFICATE_SIGNING_REQUEST:
      if (value == null) {
        unsetCertificateSigningRequest();
      } else {
        setCertificateSigningRequest((String)value);
      }
      break;

    case PROXIED_USER_EMAIL:
      if (value == null) {
        unsetProxiedUserEmail();
      } else {
        setProxiedUserEmail((String)value);
      }
      break;

    case USER_PRIVATE_KEY:
      if (value == null) {
        unsetUserPrivateKey();
      } else {
        setUserPrivateKey((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CERTIFICATE_SIGNING_REQUEST:
      return getCertificateSigningRequest();

    case PROXIED_USER_EMAIL:
      return getProxiedUserEmail();

    case USER_PRIVATE_KEY:
      return getUserPrivateKey();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CERTIFICATE_SIGNING_REQUEST:
      return isSetCertificateSigningRequest();
    case PROXIED_USER_EMAIL:
      return isSetProxiedUserEmail();
    case USER_PRIVATE_KEY:
      return isSetUserPrivateKey();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof LoginOptions)
      return this.equals((LoginOptions)that);
    return false;
  }

  public boolean equals(LoginOptions that) {
    if (that == null)
      return false;

    boolean this_present_certificateSigningRequest = true && this.isSetCertificateSigningRequest();
    boolean that_present_certificateSigningRequest = true && that.isSetCertificateSigningRequest();
    if (this_present_certificateSigningRequest || that_present_certificateSigningRequest) {
      if (!(this_present_certificateSigningRequest && that_present_certificateSigningRequest))
        return false;
      if (!this.certificateSigningRequest.equals(that.certificateSigningRequest))
        return false;
    }

    boolean this_present_proxiedUserEmail = true && this.isSetProxiedUserEmail();
    boolean that_present_proxiedUserEmail = true && that.isSetProxiedUserEmail();
    if (this_present_proxiedUserEmail || that_present_proxiedUserEmail) {
      if (!(this_present_proxiedUserEmail && that_present_proxiedUserEmail))
        return false;
      if (!this.proxiedUserEmail.equals(that.proxiedUserEmail))
        return false;
    }

    boolean this_present_userPrivateKey = true && this.isSetUserPrivateKey();
    boolean that_present_userPrivateKey = true && that.isSetUserPrivateKey();
    if (this_present_userPrivateKey || that_present_userPrivateKey) {
      if (!(this_present_userPrivateKey && that_present_userPrivateKey))
        return false;
      if (!this.userPrivateKey.equals(that.userPrivateKey))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_certificateSigningRequest = true && (isSetCertificateSigningRequest());
    list.add(present_certificateSigningRequest);
    if (present_certificateSigningRequest)
      list.add(certificateSigningRequest);

    boolean present_proxiedUserEmail = true && (isSetProxiedUserEmail());
    list.add(present_proxiedUserEmail);
    if (present_proxiedUserEmail)
      list.add(proxiedUserEmail);

    boolean present_userPrivateKey = true && (isSetUserPrivateKey());
    list.add(present_userPrivateKey);
    if (present_userPrivateKey)
      list.add(userPrivateKey);

    return list.hashCode();
  }

  @Override
  public int compareTo(LoginOptions other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCertificateSigningRequest()).compareTo(other.isSetCertificateSigningRequest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCertificateSigningRequest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.certificateSigningRequest, other.certificateSigningRequest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProxiedUserEmail()).compareTo(other.isSetProxiedUserEmail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProxiedUserEmail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.proxiedUserEmail, other.proxiedUserEmail);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserPrivateKey()).compareTo(other.isSetUserPrivateKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserPrivateKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userPrivateKey, other.userPrivateKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("LoginOptions(");
    boolean first = true;

    if (isSetCertificateSigningRequest()) {
      sb.append("certificateSigningRequest:");
      if (this.certificateSigningRequest == null) {
        sb.append("null");
      } else {
        sb.append(this.certificateSigningRequest);
      }
      first = false;
    }
    if (isSetProxiedUserEmail()) {
      if (!first) sb.append(", ");
      sb.append("proxiedUserEmail:");
      if (this.proxiedUserEmail == null) {
        sb.append("null");
      } else {
        sb.append(this.proxiedUserEmail);
      }
      first = false;
    }
    if (isSetUserPrivateKey()) {
      if (!first) sb.append(", ");
      sb.append("userPrivateKey:");
      if (this.userPrivateKey == null) {
        sb.append("null");
      } else {
        sb.append(this.userPrivateKey);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LoginOptionsStandardSchemeFactory implements SchemeFactory {
    public LoginOptionsStandardScheme getScheme() {
      return new LoginOptionsStandardScheme();
    }
  }

  private static class LoginOptionsStandardScheme extends StandardScheme<LoginOptions> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LoginOptions struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CERTIFICATE_SIGNING_REQUEST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.certificateSigningRequest = iprot.readString();
              struct.setCertificateSigningRequestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROXIED_USER_EMAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.proxiedUserEmail = iprot.readString();
              struct.setProxiedUserEmailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 100: // USER_PRIVATE_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userPrivateKey = iprot.readString();
              struct.setUserPrivateKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LoginOptions struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.certificateSigningRequest != null) {
        if (struct.isSetCertificateSigningRequest()) {
          oprot.writeFieldBegin(CERTIFICATE_SIGNING_REQUEST_FIELD_DESC);
          oprot.writeString(struct.certificateSigningRequest);
          oprot.writeFieldEnd();
        }
      }
      if (struct.proxiedUserEmail != null) {
        if (struct.isSetProxiedUserEmail()) {
          oprot.writeFieldBegin(PROXIED_USER_EMAIL_FIELD_DESC);
          oprot.writeString(struct.proxiedUserEmail);
          oprot.writeFieldEnd();
        }
      }
      if (struct.userPrivateKey != null) {
        if (struct.isSetUserPrivateKey()) {
          oprot.writeFieldBegin(USER_PRIVATE_KEY_FIELD_DESC);
          oprot.writeString(struct.userPrivateKey);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

}

