/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wi.director.thrift.v1.step;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * The StepGroup struct
 */
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class StepGroup implements org.apache.thrift.TBase<StepGroup, StepGroup._Fields>, java.io.Serializable, Cloneable, Comparable<StepGroup> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StepGroup");

  private static final org.apache.thrift.protocol.TField HEADERS_FIELD_DESC = new org.apache.thrift.protocol.TField("headers", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField SOURCE_TEMPLATE_FIELD_DESC = new org.apache.thrift.protocol.TField("sourceTemplate", org.apache.thrift.protocol.TType.STRUCT, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new StepGroupStandardSchemeFactory());
  }

  public com.wi.director.thrift.v1.group_headers.StepGroupHeaders headers; // optional
  public SourceTemplateRef sourceTemplate; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    HEADERS((short)1, "headers"),
    SOURCE_TEMPLATE((short)2, "sourceTemplate");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // HEADERS
          return HEADERS;
        case 2: // SOURCE_TEMPLATE
          return SOURCE_TEMPLATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.HEADERS,_Fields.SOURCE_TEMPLATE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.HEADERS, new org.apache.thrift.meta_data.FieldMetaData("headers", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.group_headers.StepGroupHeaders.class)));
    tmpMap.put(_Fields.SOURCE_TEMPLATE, new org.apache.thrift.meta_data.FieldMetaData("sourceTemplate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SourceTemplateRef.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StepGroup.class, metaDataMap);
  }

  public StepGroup() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StepGroup(StepGroup other) {
    if (other.isSetHeaders()) {
      this.headers = new com.wi.director.thrift.v1.group_headers.StepGroupHeaders(other.headers);
    }
    if (other.isSetSourceTemplate()) {
      this.sourceTemplate = new SourceTemplateRef(other.sourceTemplate);
    }
  }

  public StepGroup deepCopy() {
    return new StepGroup(this);
  }

  @Override
  public void clear() {
    this.headers = null;
    this.sourceTemplate = null;
  }

  public com.wi.director.thrift.v1.group_headers.StepGroupHeaders getHeaders() {
    return this.headers;
  }

  public StepGroup setHeaders(com.wi.director.thrift.v1.group_headers.StepGroupHeaders headers) {
    this.headers = headers;
    return this;
  }

  public void unsetHeaders() {
    this.headers = null;
  }

  /** Returns true if field headers is set (has been assigned a value) and false otherwise */
  public boolean isSetHeaders() {
    return this.headers != null;
  }

  public void setHeadersIsSet(boolean value) {
    if (!value) {
      this.headers = null;
    }
  }

  public SourceTemplateRef getSourceTemplate() {
    return this.sourceTemplate;
  }

  public StepGroup setSourceTemplate(SourceTemplateRef sourceTemplate) {
    this.sourceTemplate = sourceTemplate;
    return this;
  }

  public void unsetSourceTemplate() {
    this.sourceTemplate = null;
  }

  /** Returns true if field sourceTemplate is set (has been assigned a value) and false otherwise */
  public boolean isSetSourceTemplate() {
    return this.sourceTemplate != null;
  }

  public void setSourceTemplateIsSet(boolean value) {
    if (!value) {
      this.sourceTemplate = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case HEADERS:
      if (value == null) {
        unsetHeaders();
      } else {
        setHeaders((com.wi.director.thrift.v1.group_headers.StepGroupHeaders)value);
      }
      break;

    case SOURCE_TEMPLATE:
      if (value == null) {
        unsetSourceTemplate();
      } else {
        setSourceTemplate((SourceTemplateRef)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case HEADERS:
      return getHeaders();

    case SOURCE_TEMPLATE:
      return getSourceTemplate();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case HEADERS:
      return isSetHeaders();
    case SOURCE_TEMPLATE:
      return isSetSourceTemplate();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof StepGroup)
      return this.equals((StepGroup)that);
    return false;
  }

  public boolean equals(StepGroup that) {
    if (that == null)
      return false;

    boolean this_present_headers = true && this.isSetHeaders();
    boolean that_present_headers = true && that.isSetHeaders();
    if (this_present_headers || that_present_headers) {
      if (!(this_present_headers && that_present_headers))
        return false;
      if (!this.headers.equals(that.headers))
        return false;
    }

    boolean this_present_sourceTemplate = true && this.isSetSourceTemplate();
    boolean that_present_sourceTemplate = true && that.isSetSourceTemplate();
    if (this_present_sourceTemplate || that_present_sourceTemplate) {
      if (!(this_present_sourceTemplate && that_present_sourceTemplate))
        return false;
      if (!this.sourceTemplate.equals(that.sourceTemplate))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_headers = true && (isSetHeaders());
    list.add(present_headers);
    if (present_headers)
      list.add(headers);

    boolean present_sourceTemplate = true && (isSetSourceTemplate());
    list.add(present_sourceTemplate);
    if (present_sourceTemplate)
      list.add(sourceTemplate);

    return list.hashCode();
  }

  @Override
  public int compareTo(StepGroup other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetHeaders()).compareTo(other.isSetHeaders());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeaders()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.headers, other.headers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSourceTemplate()).compareTo(other.isSetSourceTemplate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSourceTemplate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sourceTemplate, other.sourceTemplate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("StepGroup(");
    boolean first = true;

    if (isSetHeaders()) {
      sb.append("headers:");
      if (this.headers == null) {
        sb.append("null");
      } else {
        sb.append(this.headers);
      }
      first = false;
    }
    if (isSetSourceTemplate()) {
      if (!first) sb.append(", ");
      sb.append("sourceTemplate:");
      if (this.sourceTemplate == null) {
        sb.append("null");
      } else {
        sb.append(this.sourceTemplate);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (headers != null) {
      headers.validate();
    }
    if (sourceTemplate != null) {
      sourceTemplate.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StepGroupStandardSchemeFactory implements SchemeFactory {
    public StepGroupStandardScheme getScheme() {
      return new StepGroupStandardScheme();
    }
  }

  private static class StepGroupStandardScheme extends StandardScheme<StepGroup> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, StepGroup struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // HEADERS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.headers = new com.wi.director.thrift.v1.group_headers.StepGroupHeaders();
              struct.headers.read(iprot);
              struct.setHeadersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SOURCE_TEMPLATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.sourceTemplate = new SourceTemplateRef();
              struct.sourceTemplate.read(iprot);
              struct.setSourceTemplateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, StepGroup struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.headers != null) {
        if (struct.isSetHeaders()) {
          oprot.writeFieldBegin(HEADERS_FIELD_DESC);
          struct.headers.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.sourceTemplate != null) {
        if (struct.isSetSourceTemplate()) {
          oprot.writeFieldBegin(SOURCE_TEMPLATE_FIELD_DESC);
          struct.sourceTemplate.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

}

