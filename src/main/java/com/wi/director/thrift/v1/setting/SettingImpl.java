/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wi.director.thrift.v1.setting;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * struct to allow for future settings types
 */
public class SettingImpl extends org.apache.thrift.TUnion<SettingImpl, SettingImpl._Fields> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SettingImpl");
  private static final org.apache.thrift.protocol.TField TOGGLE_FIELD_DESC = new org.apache.thrift.protocol.TField("toggle", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("text", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField OPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("option", org.apache.thrift.protocol.TType.STRUCT, (short)3);

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TOGGLE((short)1, "toggle"),
    TEXT((short)2, "text"),
    OPTION((short)3, "option");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TOGGLE
          return TOGGLE;
        case 2: // TEXT
          return TEXT;
        case 3: // OPTION
          return OPTION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TOGGLE, new org.apache.thrift.meta_data.FieldMetaData("toggle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ToggleSetting.class)));
    tmpMap.put(_Fields.TEXT, new org.apache.thrift.meta_data.FieldMetaData("text", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TextSetting.class)));
    tmpMap.put(_Fields.OPTION, new org.apache.thrift.meta_data.FieldMetaData("option", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OptionSetting.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SettingImpl.class, metaDataMap);
  }

  public SettingImpl() {
    super();
  }

  public SettingImpl(_Fields setField, Object value) {
    super(setField, value);
  }

  public SettingImpl(SettingImpl other) {
    super(other);
  }
  public SettingImpl deepCopy() {
    return new SettingImpl(this);
  }

  public static SettingImpl toggle(ToggleSetting value) {
    SettingImpl x = new SettingImpl();
    x.setToggle(value);
    return x;
  }

  public static SettingImpl text(TextSetting value) {
    SettingImpl x = new SettingImpl();
    x.setText(value);
    return x;
  }

  public static SettingImpl option(OptionSetting value) {
    SettingImpl x = new SettingImpl();
    x.setOption(value);
    return x;
  }


  @Override
  protected void checkType(_Fields setField, Object value) throws ClassCastException {
    switch (setField) {
      case TOGGLE:
        if (value instanceof ToggleSetting) {
          break;
        }
        throw new ClassCastException("Was expecting value of type ToggleSetting for field 'toggle', but got " + value.getClass().getSimpleName());
      case TEXT:
        if (value instanceof TextSetting) {
          break;
        }
        throw new ClassCastException("Was expecting value of type TextSetting for field 'text', but got " + value.getClass().getSimpleName());
      case OPTION:
        if (value instanceof OptionSetting) {
          break;
        }
        throw new ClassCastException("Was expecting value of type OptionSetting for field 'option', but got " + value.getClass().getSimpleName());
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected Object standardSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TField field) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(field.id);
    if (setField != null) {
      switch (setField) {
        case TOGGLE:
          if (field.type == TOGGLE_FIELD_DESC.type) {
            ToggleSetting toggle;
            toggle = new ToggleSetting();
            toggle.read(iprot);
            return toggle;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case TEXT:
          if (field.type == TEXT_FIELD_DESC.type) {
            TextSetting text;
            text = new TextSetting();
            text.read(iprot);
            return text;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case OPTION:
          if (field.type == OPTION_FIELD_DESC.type) {
            OptionSetting option;
            option = new OptionSetting();
            option.read(iprot);
            return option;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      return null;
    }
  }

  @Override
  protected void standardSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case TOGGLE:
        ToggleSetting toggle = (ToggleSetting)value_;
        toggle.write(oprot);
        return;
      case TEXT:
        TextSetting text = (TextSetting)value_;
        text.write(oprot);
        return;
      case OPTION:
        OptionSetting option = (OptionSetting)value_;
        option.write(oprot);
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected Object tupleSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, short fieldID) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(fieldID);
    if (setField != null) {
      switch (setField) {
        case TOGGLE:
          ToggleSetting toggle;
          toggle = new ToggleSetting();
          toggle.read(iprot);
          return toggle;
        case TEXT:
          TextSetting text;
          text = new TextSetting();
          text.read(iprot);
          return text;
        case OPTION:
          OptionSetting option;
          option = new OptionSetting();
          option.read(iprot);
          return option;
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      throw new TProtocolException("Couldn't find a field with field id " + fieldID);
    }
  }

  @Override
  protected void tupleSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case TOGGLE:
        ToggleSetting toggle = (ToggleSetting)value_;
        toggle.write(oprot);
        return;
      case TEXT:
        TextSetting text = (TextSetting)value_;
        text.write(oprot);
        return;
      case OPTION:
        OptionSetting option = (OptionSetting)value_;
        option.write(oprot);
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TField getFieldDesc(_Fields setField) {
    switch (setField) {
      case TOGGLE:
        return TOGGLE_FIELD_DESC;
      case TEXT:
        return TEXT_FIELD_DESC;
      case OPTION:
        return OPTION_FIELD_DESC;
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TStruct getStructDesc() {
    return STRUCT_DESC;
  }

  @Override
  protected _Fields enumForId(short id) {
    return _Fields.findByThriftIdOrThrow(id);
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public ToggleSetting getToggle() {
    if (getSetField() == _Fields.TOGGLE) {
      return (ToggleSetting)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'toggle' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setToggle(ToggleSetting value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.TOGGLE;
    value_ = value;
  }

  public TextSetting getText() {
    if (getSetField() == _Fields.TEXT) {
      return (TextSetting)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'text' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setText(TextSetting value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.TEXT;
    value_ = value;
  }

  public OptionSetting getOption() {
    if (getSetField() == _Fields.OPTION) {
      return (OptionSetting)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'option' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setOption(OptionSetting value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.OPTION;
    value_ = value;
  }

  public boolean isSetToggle() {
    return setField_ == _Fields.TOGGLE;
  }


  public boolean isSetText() {
    return setField_ == _Fields.TEXT;
  }


  public boolean isSetOption() {
    return setField_ == _Fields.OPTION;
  }


  public boolean equals(Object other) {
    if (other instanceof SettingImpl) {
      return equals((SettingImpl)other);
    } else {
      return false;
    }
  }

  public boolean equals(SettingImpl other) {
    return other != null && getSetField() == other.getSetField() && getFieldValue().equals(other.getFieldValue());
  }

  @Override
  public int compareTo(SettingImpl other) {
    int lastComparison = org.apache.thrift.TBaseHelper.compareTo(getSetField(), other.getSetField());
    if (lastComparison == 0) {
      return org.apache.thrift.TBaseHelper.compareTo(getFieldValue(), other.getFieldValue());
    }
    return lastComparison;
  }


  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();
    list.add(this.getClass().getName());
    org.apache.thrift.TFieldIdEnum setField = getSetField();
    if (setField != null) {
      list.add(setField.getThriftFieldId());
      Object value = getFieldValue();
      if (value instanceof org.apache.thrift.TEnum) {
        list.add(((org.apache.thrift.TEnum)getFieldValue()).getValue());
      } else {
        list.add(value);
      }
    }
    return list.hashCode();
  }
  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


}
