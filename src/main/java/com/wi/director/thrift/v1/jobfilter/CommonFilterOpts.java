/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wi.director.thrift.v1.jobfilter;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class CommonFilterOpts implements org.apache.thrift.TBase<CommonFilterOpts, CommonFilterOpts._Fields>, java.io.Serializable, Cloneable, Comparable<CommonFilterOpts> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CommonFilterOpts");

  private static final org.apache.thrift.protocol.TField TEAM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("teamId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField STATES_FIELD_DESC = new org.apache.thrift.protocol.TField("states", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField STARTED_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startedTime", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField COMPLETED_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("completedTime", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField SOURCE_TEMPLATE_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("sourceTemplateIds", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField ALL_SOURCE_TEMPLATE_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("allSourceTemplateIds", org.apache.thrift.protocol.TType.BOOL, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CommonFilterOptsStandardSchemeFactory());
  }

  /**
   * If unset, queries across all teams the user belongs to
   */
  public String teamId; // optional
  /**
   * Substring text search on title
   */
  public String title; // optional
  /**
   * State match: issues do not have PLANNED state
   */
  public List<com.wi.director.thrift.v1.job.JobState> states; // optional
  /**
   * Start time range
   */
  public JobTimeRange startedTime; // optional
  /**
   * Completion time range
   */
  public JobTimeRange completedTime; // optional
  /**
   * Templates created from
   */
  public List<String> sourceTemplateIds; // optional
  /**
   * Must have all sourceTemplateIds
   */
  public boolean allSourceTemplateIds; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * If unset, queries across all teams the user belongs to
     */
    TEAM_ID((short)1, "teamId"),
    /**
     * Substring text search on title
     */
    TITLE((short)2, "title"),
    /**
     * State match: issues do not have PLANNED state
     */
    STATES((short)3, "states"),
    /**
     * Start time range
     */
    STARTED_TIME((short)4, "startedTime"),
    /**
     * Completion time range
     */
    COMPLETED_TIME((short)5, "completedTime"),
    /**
     * Templates created from
     */
    SOURCE_TEMPLATE_IDS((short)6, "sourceTemplateIds"),
    /**
     * Must have all sourceTemplateIds
     */
    ALL_SOURCE_TEMPLATE_IDS((short)7, "allSourceTemplateIds");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TEAM_ID
          return TEAM_ID;
        case 2: // TITLE
          return TITLE;
        case 3: // STATES
          return STATES;
        case 4: // STARTED_TIME
          return STARTED_TIME;
        case 5: // COMPLETED_TIME
          return COMPLETED_TIME;
        case 6: // SOURCE_TEMPLATE_IDS
          return SOURCE_TEMPLATE_IDS;
        case 7: // ALL_SOURCE_TEMPLATE_IDS
          return ALL_SOURCE_TEMPLATE_IDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ALLSOURCETEMPLATEIDS_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.TEAM_ID,_Fields.TITLE,_Fields.STATES,_Fields.STARTED_TIME,_Fields.COMPLETED_TIME,_Fields.SOURCE_TEMPLATE_IDS,_Fields.ALL_SOURCE_TEMPLATE_IDS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TEAM_ID, new org.apache.thrift.meta_data.FieldMetaData("teamId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATES, new org.apache.thrift.meta_data.FieldMetaData("states", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.wi.director.thrift.v1.job.JobState.class))));
    tmpMap.put(_Fields.STARTED_TIME, new org.apache.thrift.meta_data.FieldMetaData("startedTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JobTimeRange.class)));
    tmpMap.put(_Fields.COMPLETED_TIME, new org.apache.thrift.meta_data.FieldMetaData("completedTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JobTimeRange.class)));
    tmpMap.put(_Fields.SOURCE_TEMPLATE_IDS, new org.apache.thrift.meta_data.FieldMetaData("sourceTemplateIds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.ALL_SOURCE_TEMPLATE_IDS, new org.apache.thrift.meta_data.FieldMetaData("allSourceTemplateIds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CommonFilterOpts.class, metaDataMap);
  }

  public CommonFilterOpts() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CommonFilterOpts(CommonFilterOpts other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTeamId()) {
      this.teamId = other.teamId;
    }
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    if (other.isSetStates()) {
      List<com.wi.director.thrift.v1.job.JobState> __this__states = new ArrayList<com.wi.director.thrift.v1.job.JobState>(other.states.size());
      for (com.wi.director.thrift.v1.job.JobState other_element : other.states) {
        __this__states.add(other_element);
      }
      this.states = __this__states;
    }
    if (other.isSetStartedTime()) {
      this.startedTime = new JobTimeRange(other.startedTime);
    }
    if (other.isSetCompletedTime()) {
      this.completedTime = new JobTimeRange(other.completedTime);
    }
    if (other.isSetSourceTemplateIds()) {
      List<String> __this__sourceTemplateIds = new ArrayList<String>(other.sourceTemplateIds);
      this.sourceTemplateIds = __this__sourceTemplateIds;
    }
    this.allSourceTemplateIds = other.allSourceTemplateIds;
  }

  public CommonFilterOpts deepCopy() {
    return new CommonFilterOpts(this);
  }

  @Override
  public void clear() {
    this.teamId = null;
    this.title = null;
    this.states = null;
    this.startedTime = null;
    this.completedTime = null;
    this.sourceTemplateIds = null;
    setAllSourceTemplateIdsIsSet(false);
    this.allSourceTemplateIds = false;
  }

  /**
   * If unset, queries across all teams the user belongs to
   */
  public String getTeamId() {
    return this.teamId;
  }

  /**
   * If unset, queries across all teams the user belongs to
   */
  public CommonFilterOpts setTeamId(String teamId) {
    this.teamId = teamId;
    return this;
  }

  public void unsetTeamId() {
    this.teamId = null;
  }

  /** Returns true if field teamId is set (has been assigned a value) and false otherwise */
  public boolean isSetTeamId() {
    return this.teamId != null;
  }

  public void setTeamIdIsSet(boolean value) {
    if (!value) {
      this.teamId = null;
    }
  }

  /**
   * Substring text search on title
   */
  public String getTitle() {
    return this.title;
  }

  /**
   * Substring text search on title
   */
  public CommonFilterOpts setTitle(String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public int getStatesSize() {
    return (this.states == null) ? 0 : this.states.size();
  }

  public java.util.Iterator<com.wi.director.thrift.v1.job.JobState> getStatesIterator() {
    return (this.states == null) ? null : this.states.iterator();
  }

  public void addToStates(com.wi.director.thrift.v1.job.JobState elem) {
    if (this.states == null) {
      this.states = new ArrayList<com.wi.director.thrift.v1.job.JobState>();
    }
    this.states.add(elem);
  }

  /**
   * State match: issues do not have PLANNED state
   */
  public List<com.wi.director.thrift.v1.job.JobState> getStates() {
    return this.states;
  }

  /**
   * State match: issues do not have PLANNED state
   */
  public CommonFilterOpts setStates(List<com.wi.director.thrift.v1.job.JobState> states) {
    this.states = states;
    return this;
  }

  public void unsetStates() {
    this.states = null;
  }

  /** Returns true if field states is set (has been assigned a value) and false otherwise */
  public boolean isSetStates() {
    return this.states != null;
  }

  public void setStatesIsSet(boolean value) {
    if (!value) {
      this.states = null;
    }
  }

  /**
   * Start time range
   */
  public JobTimeRange getStartedTime() {
    return this.startedTime;
  }

  /**
   * Start time range
   */
  public CommonFilterOpts setStartedTime(JobTimeRange startedTime) {
    this.startedTime = startedTime;
    return this;
  }

  public void unsetStartedTime() {
    this.startedTime = null;
  }

  /** Returns true if field startedTime is set (has been assigned a value) and false otherwise */
  public boolean isSetStartedTime() {
    return this.startedTime != null;
  }

  public void setStartedTimeIsSet(boolean value) {
    if (!value) {
      this.startedTime = null;
    }
  }

  /**
   * Completion time range
   */
  public JobTimeRange getCompletedTime() {
    return this.completedTime;
  }

  /**
   * Completion time range
   */
  public CommonFilterOpts setCompletedTime(JobTimeRange completedTime) {
    this.completedTime = completedTime;
    return this;
  }

  public void unsetCompletedTime() {
    this.completedTime = null;
  }

  /** Returns true if field completedTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCompletedTime() {
    return this.completedTime != null;
  }

  public void setCompletedTimeIsSet(boolean value) {
    if (!value) {
      this.completedTime = null;
    }
  }

  public int getSourceTemplateIdsSize() {
    return (this.sourceTemplateIds == null) ? 0 : this.sourceTemplateIds.size();
  }

  public java.util.Iterator<String> getSourceTemplateIdsIterator() {
    return (this.sourceTemplateIds == null) ? null : this.sourceTemplateIds.iterator();
  }

  public void addToSourceTemplateIds(String elem) {
    if (this.sourceTemplateIds == null) {
      this.sourceTemplateIds = new ArrayList<String>();
    }
    this.sourceTemplateIds.add(elem);
  }

  /**
   * Templates created from
   */
  public List<String> getSourceTemplateIds() {
    return this.sourceTemplateIds;
  }

  /**
   * Templates created from
   */
  public CommonFilterOpts setSourceTemplateIds(List<String> sourceTemplateIds) {
    this.sourceTemplateIds = sourceTemplateIds;
    return this;
  }

  public void unsetSourceTemplateIds() {
    this.sourceTemplateIds = null;
  }

  /** Returns true if field sourceTemplateIds is set (has been assigned a value) and false otherwise */
  public boolean isSetSourceTemplateIds() {
    return this.sourceTemplateIds != null;
  }

  public void setSourceTemplateIdsIsSet(boolean value) {
    if (!value) {
      this.sourceTemplateIds = null;
    }
  }

  /**
   * Must have all sourceTemplateIds
   */
  public boolean isAllSourceTemplateIds() {
    return this.allSourceTemplateIds;
  }

  /**
   * Must have all sourceTemplateIds
   */
  public CommonFilterOpts setAllSourceTemplateIds(boolean allSourceTemplateIds) {
    this.allSourceTemplateIds = allSourceTemplateIds;
    setAllSourceTemplateIdsIsSet(true);
    return this;
  }

  public void unsetAllSourceTemplateIds() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ALLSOURCETEMPLATEIDS_ISSET_ID);
  }

  /** Returns true if field allSourceTemplateIds is set (has been assigned a value) and false otherwise */
  public boolean isSetAllSourceTemplateIds() {
    return EncodingUtils.testBit(__isset_bitfield, __ALLSOURCETEMPLATEIDS_ISSET_ID);
  }

  public void setAllSourceTemplateIdsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ALLSOURCETEMPLATEIDS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TEAM_ID:
      if (value == null) {
        unsetTeamId();
      } else {
        setTeamId((String)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((String)value);
      }
      break;

    case STATES:
      if (value == null) {
        unsetStates();
      } else {
        setStates((List<com.wi.director.thrift.v1.job.JobState>)value);
      }
      break;

    case STARTED_TIME:
      if (value == null) {
        unsetStartedTime();
      } else {
        setStartedTime((JobTimeRange)value);
      }
      break;

    case COMPLETED_TIME:
      if (value == null) {
        unsetCompletedTime();
      } else {
        setCompletedTime((JobTimeRange)value);
      }
      break;

    case SOURCE_TEMPLATE_IDS:
      if (value == null) {
        unsetSourceTemplateIds();
      } else {
        setSourceTemplateIds((List<String>)value);
      }
      break;

    case ALL_SOURCE_TEMPLATE_IDS:
      if (value == null) {
        unsetAllSourceTemplateIds();
      } else {
        setAllSourceTemplateIds((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TEAM_ID:
      return getTeamId();

    case TITLE:
      return getTitle();

    case STATES:
      return getStates();

    case STARTED_TIME:
      return getStartedTime();

    case COMPLETED_TIME:
      return getCompletedTime();

    case SOURCE_TEMPLATE_IDS:
      return getSourceTemplateIds();

    case ALL_SOURCE_TEMPLATE_IDS:
      return isAllSourceTemplateIds();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TEAM_ID:
      return isSetTeamId();
    case TITLE:
      return isSetTitle();
    case STATES:
      return isSetStates();
    case STARTED_TIME:
      return isSetStartedTime();
    case COMPLETED_TIME:
      return isSetCompletedTime();
    case SOURCE_TEMPLATE_IDS:
      return isSetSourceTemplateIds();
    case ALL_SOURCE_TEMPLATE_IDS:
      return isSetAllSourceTemplateIds();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CommonFilterOpts)
      return this.equals((CommonFilterOpts)that);
    return false;
  }

  public boolean equals(CommonFilterOpts that) {
    if (that == null)
      return false;

    boolean this_present_teamId = true && this.isSetTeamId();
    boolean that_present_teamId = true && that.isSetTeamId();
    if (this_present_teamId || that_present_teamId) {
      if (!(this_present_teamId && that_present_teamId))
        return false;
      if (!this.teamId.equals(that.teamId))
        return false;
    }

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_states = true && this.isSetStates();
    boolean that_present_states = true && that.isSetStates();
    if (this_present_states || that_present_states) {
      if (!(this_present_states && that_present_states))
        return false;
      if (!this.states.equals(that.states))
        return false;
    }

    boolean this_present_startedTime = true && this.isSetStartedTime();
    boolean that_present_startedTime = true && that.isSetStartedTime();
    if (this_present_startedTime || that_present_startedTime) {
      if (!(this_present_startedTime && that_present_startedTime))
        return false;
      if (!this.startedTime.equals(that.startedTime))
        return false;
    }

    boolean this_present_completedTime = true && this.isSetCompletedTime();
    boolean that_present_completedTime = true && that.isSetCompletedTime();
    if (this_present_completedTime || that_present_completedTime) {
      if (!(this_present_completedTime && that_present_completedTime))
        return false;
      if (!this.completedTime.equals(that.completedTime))
        return false;
    }

    boolean this_present_sourceTemplateIds = true && this.isSetSourceTemplateIds();
    boolean that_present_sourceTemplateIds = true && that.isSetSourceTemplateIds();
    if (this_present_sourceTemplateIds || that_present_sourceTemplateIds) {
      if (!(this_present_sourceTemplateIds && that_present_sourceTemplateIds))
        return false;
      if (!this.sourceTemplateIds.equals(that.sourceTemplateIds))
        return false;
    }

    boolean this_present_allSourceTemplateIds = true && this.isSetAllSourceTemplateIds();
    boolean that_present_allSourceTemplateIds = true && that.isSetAllSourceTemplateIds();
    if (this_present_allSourceTemplateIds || that_present_allSourceTemplateIds) {
      if (!(this_present_allSourceTemplateIds && that_present_allSourceTemplateIds))
        return false;
      if (this.allSourceTemplateIds != that.allSourceTemplateIds)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_teamId = true && (isSetTeamId());
    list.add(present_teamId);
    if (present_teamId)
      list.add(teamId);

    boolean present_title = true && (isSetTitle());
    list.add(present_title);
    if (present_title)
      list.add(title);

    boolean present_states = true && (isSetStates());
    list.add(present_states);
    if (present_states)
      list.add(states);

    boolean present_startedTime = true && (isSetStartedTime());
    list.add(present_startedTime);
    if (present_startedTime)
      list.add(startedTime);

    boolean present_completedTime = true && (isSetCompletedTime());
    list.add(present_completedTime);
    if (present_completedTime)
      list.add(completedTime);

    boolean present_sourceTemplateIds = true && (isSetSourceTemplateIds());
    list.add(present_sourceTemplateIds);
    if (present_sourceTemplateIds)
      list.add(sourceTemplateIds);

    boolean present_allSourceTemplateIds = true && (isSetAllSourceTemplateIds());
    list.add(present_allSourceTemplateIds);
    if (present_allSourceTemplateIds)
      list.add(allSourceTemplateIds);

    return list.hashCode();
  }

  @Override
  public int compareTo(CommonFilterOpts other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTeamId()).compareTo(other.isSetTeamId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeamId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teamId, other.teamId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTitle()).compareTo(other.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStates()).compareTo(other.isSetStates());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStates()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.states, other.states);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartedTime()).compareTo(other.isSetStartedTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartedTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startedTime, other.startedTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompletedTime()).compareTo(other.isSetCompletedTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompletedTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.completedTime, other.completedTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSourceTemplateIds()).compareTo(other.isSetSourceTemplateIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSourceTemplateIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sourceTemplateIds, other.sourceTemplateIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAllSourceTemplateIds()).compareTo(other.isSetAllSourceTemplateIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAllSourceTemplateIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.allSourceTemplateIds, other.allSourceTemplateIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CommonFilterOpts(");
    boolean first = true;

    if (isSetTeamId()) {
      sb.append("teamId:");
      if (this.teamId == null) {
        sb.append("null");
      } else {
        sb.append(this.teamId);
      }
      first = false;
    }
    if (isSetTitle()) {
      if (!first) sb.append(", ");
      sb.append("title:");
      if (this.title == null) {
        sb.append("null");
      } else {
        sb.append(this.title);
      }
      first = false;
    }
    if (isSetStates()) {
      if (!first) sb.append(", ");
      sb.append("states:");
      if (this.states == null) {
        sb.append("null");
      } else {
        sb.append(this.states);
      }
      first = false;
    }
    if (isSetStartedTime()) {
      if (!first) sb.append(", ");
      sb.append("startedTime:");
      if (this.startedTime == null) {
        sb.append("null");
      } else {
        sb.append(this.startedTime);
      }
      first = false;
    }
    if (isSetCompletedTime()) {
      if (!first) sb.append(", ");
      sb.append("completedTime:");
      if (this.completedTime == null) {
        sb.append("null");
      } else {
        sb.append(this.completedTime);
      }
      first = false;
    }
    if (isSetSourceTemplateIds()) {
      if (!first) sb.append(", ");
      sb.append("sourceTemplateIds:");
      if (this.sourceTemplateIds == null) {
        sb.append("null");
      } else {
        sb.append(this.sourceTemplateIds);
      }
      first = false;
    }
    if (isSetAllSourceTemplateIds()) {
      if (!first) sb.append(", ");
      sb.append("allSourceTemplateIds:");
      sb.append(this.allSourceTemplateIds);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (startedTime != null) {
      startedTime.validate();
    }
    if (completedTime != null) {
      completedTime.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CommonFilterOptsStandardSchemeFactory implements SchemeFactory {
    public CommonFilterOptsStandardScheme getScheme() {
      return new CommonFilterOptsStandardScheme();
    }
  }

  private static class CommonFilterOptsStandardScheme extends StandardScheme<CommonFilterOpts> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CommonFilterOpts struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TEAM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.teamId = iprot.readString();
              struct.setTeamIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STATES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.states = new ArrayList<com.wi.director.thrift.v1.job.JobState>(_list0.size);
                com.wi.director.thrift.v1.job.JobState _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = com.wi.director.thrift.v1.job.JobState.findByValue(iprot.readI32());
                  struct.states.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setStatesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // STARTED_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.startedTime = new JobTimeRange();
              struct.startedTime.read(iprot);
              struct.setStartedTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COMPLETED_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.completedTime = new JobTimeRange();
              struct.completedTime.read(iprot);
              struct.setCompletedTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SOURCE_TEMPLATE_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.sourceTemplateIds = new ArrayList<String>(_list3.size);
                String _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = iprot.readString();
                  struct.sourceTemplateIds.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setSourceTemplateIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ALL_SOURCE_TEMPLATE_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.allSourceTemplateIds = iprot.readBool();
              struct.setAllSourceTemplateIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CommonFilterOpts struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.teamId != null) {
        if (struct.isSetTeamId()) {
          oprot.writeFieldBegin(TEAM_ID_FIELD_DESC);
          oprot.writeString(struct.teamId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.title != null) {
        if (struct.isSetTitle()) {
          oprot.writeFieldBegin(TITLE_FIELD_DESC);
          oprot.writeString(struct.title);
          oprot.writeFieldEnd();
        }
      }
      if (struct.states != null) {
        if (struct.isSetStates()) {
          oprot.writeFieldBegin(STATES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.states.size()));
            for (com.wi.director.thrift.v1.job.JobState _iter6 : struct.states)
            {
              oprot.writeI32(_iter6.getValue());
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.startedTime != null) {
        if (struct.isSetStartedTime()) {
          oprot.writeFieldBegin(STARTED_TIME_FIELD_DESC);
          struct.startedTime.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.completedTime != null) {
        if (struct.isSetCompletedTime()) {
          oprot.writeFieldBegin(COMPLETED_TIME_FIELD_DESC);
          struct.completedTime.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.sourceTemplateIds != null) {
        if (struct.isSetSourceTemplateIds()) {
          oprot.writeFieldBegin(SOURCE_TEMPLATE_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.sourceTemplateIds.size()));
            for (String _iter7 : struct.sourceTemplateIds)
            {
              oprot.writeString(_iter7);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetAllSourceTemplateIds()) {
        oprot.writeFieldBegin(ALL_SOURCE_TEMPLATE_IDS_FIELD_DESC);
        oprot.writeBool(struct.allSourceTemplateIds);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

}

