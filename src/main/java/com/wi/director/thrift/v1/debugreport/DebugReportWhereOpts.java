/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wi.director.thrift.v1.debugreport;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class DebugReportWhereOpts implements org.apache.thrift.TBase<DebugReportWhereOpts, DebugReportWhereOpts._Fields>, java.io.Serializable, Cloneable, Comparable<DebugReportWhereOpts> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DebugReportWhereOpts");

  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField REPORT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("reportType", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField PAGE_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("pageReq", org.apache.thrift.protocol.TType.STRUCT, (short)100);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DebugReportWhereOptsStandardSchemeFactory());
  }

  public String userId; // optional
  /**
   * 
   * @see DebugReportType
   */
  public DebugReportType reportType; // optional
  public com.wi.director.thrift.v1.common.PageReq pageReq; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    USER_ID((short)1, "userId"),
    /**
     * 
     * @see DebugReportType
     */
    REPORT_TYPE((short)2, "reportType"),
    PAGE_REQ((short)100, "pageReq");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USER_ID
          return USER_ID;
        case 2: // REPORT_TYPE
          return REPORT_TYPE;
        case 100: // PAGE_REQ
          return PAGE_REQ;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.USER_ID,_Fields.REPORT_TYPE,_Fields.PAGE_REQ};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "UUID")));
    tmpMap.put(_Fields.REPORT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("reportType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, DebugReportType.class)));
    tmpMap.put(_Fields.PAGE_REQ, new org.apache.thrift.meta_data.FieldMetaData("pageReq", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.common.PageReq.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DebugReportWhereOpts.class, metaDataMap);
  }

  public DebugReportWhereOpts() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DebugReportWhereOpts(DebugReportWhereOpts other) {
    if (other.isSetUserId()) {
      this.userId = other.userId;
    }
    if (other.isSetReportType()) {
      this.reportType = other.reportType;
    }
    if (other.isSetPageReq()) {
      this.pageReq = new com.wi.director.thrift.v1.common.PageReq(other.pageReq);
    }
  }

  public DebugReportWhereOpts deepCopy() {
    return new DebugReportWhereOpts(this);
  }

  @Override
  public void clear() {
    this.userId = null;
    this.reportType = null;
    this.pageReq = null;
  }

  public String getUserId() {
    return this.userId;
  }

  public DebugReportWhereOpts setUserId(String userId) {
    this.userId = userId;
    return this;
  }

  public void unsetUserId() {
    this.userId = null;
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return this.userId != null;
  }

  public void setUserIdIsSet(boolean value) {
    if (!value) {
      this.userId = null;
    }
  }

  /**
   * 
   * @see DebugReportType
   */
  public DebugReportType getReportType() {
    return this.reportType;
  }

  /**
   * 
   * @see DebugReportType
   */
  public DebugReportWhereOpts setReportType(DebugReportType reportType) {
    this.reportType = reportType;
    return this;
  }

  public void unsetReportType() {
    this.reportType = null;
  }

  /** Returns true if field reportType is set (has been assigned a value) and false otherwise */
  public boolean isSetReportType() {
    return this.reportType != null;
  }

  public void setReportTypeIsSet(boolean value) {
    if (!value) {
      this.reportType = null;
    }
  }

  public com.wi.director.thrift.v1.common.PageReq getPageReq() {
    return this.pageReq;
  }

  public DebugReportWhereOpts setPageReq(com.wi.director.thrift.v1.common.PageReq pageReq) {
    this.pageReq = pageReq;
    return this;
  }

  public void unsetPageReq() {
    this.pageReq = null;
  }

  /** Returns true if field pageReq is set (has been assigned a value) and false otherwise */
  public boolean isSetPageReq() {
    return this.pageReq != null;
  }

  public void setPageReqIsSet(boolean value) {
    if (!value) {
      this.pageReq = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((String)value);
      }
      break;

    case REPORT_TYPE:
      if (value == null) {
        unsetReportType();
      } else {
        setReportType((DebugReportType)value);
      }
      break;

    case PAGE_REQ:
      if (value == null) {
        unsetPageReq();
      } else {
        setPageReq((com.wi.director.thrift.v1.common.PageReq)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case USER_ID:
      return getUserId();

    case REPORT_TYPE:
      return getReportType();

    case PAGE_REQ:
      return getPageReq();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case USER_ID:
      return isSetUserId();
    case REPORT_TYPE:
      return isSetReportType();
    case PAGE_REQ:
      return isSetPageReq();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DebugReportWhereOpts)
      return this.equals((DebugReportWhereOpts)that);
    return false;
  }

  public boolean equals(DebugReportWhereOpts that) {
    if (that == null)
      return false;

    boolean this_present_userId = true && this.isSetUserId();
    boolean that_present_userId = true && that.isSetUserId();
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (!this.userId.equals(that.userId))
        return false;
    }

    boolean this_present_reportType = true && this.isSetReportType();
    boolean that_present_reportType = true && that.isSetReportType();
    if (this_present_reportType || that_present_reportType) {
      if (!(this_present_reportType && that_present_reportType))
        return false;
      if (!this.reportType.equals(that.reportType))
        return false;
    }

    boolean this_present_pageReq = true && this.isSetPageReq();
    boolean that_present_pageReq = true && that.isSetPageReq();
    if (this_present_pageReq || that_present_pageReq) {
      if (!(this_present_pageReq && that_present_pageReq))
        return false;
      if (!this.pageReq.equals(that.pageReq))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_userId = true && (isSetUserId());
    list.add(present_userId);
    if (present_userId)
      list.add(userId);

    boolean present_reportType = true && (isSetReportType());
    list.add(present_reportType);
    if (present_reportType)
      list.add(reportType.getValue());

    boolean present_pageReq = true && (isSetPageReq());
    list.add(present_pageReq);
    if (present_pageReq)
      list.add(pageReq);

    return list.hashCode();
  }

  @Override
  public int compareTo(DebugReportWhereOpts other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReportType()).compareTo(other.isSetReportType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReportType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reportType, other.reportType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPageReq()).compareTo(other.isSetPageReq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPageReq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageReq, other.pageReq);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DebugReportWhereOpts(");
    boolean first = true;

    if (isSetUserId()) {
      sb.append("userId:");
      if (this.userId == null) {
        sb.append("null");
      } else {
        sb.append(this.userId);
      }
      first = false;
    }
    if (isSetReportType()) {
      if (!first) sb.append(", ");
      sb.append("reportType:");
      if (this.reportType == null) {
        sb.append("null");
      } else {
        sb.append(this.reportType);
      }
      first = false;
    }
    if (isSetPageReq()) {
      if (!first) sb.append(", ");
      sb.append("pageReq:");
      if (this.pageReq == null) {
        sb.append("null");
      } else {
        sb.append(this.pageReq);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (pageReq != null) {
      pageReq.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DebugReportWhereOptsStandardSchemeFactory implements SchemeFactory {
    public DebugReportWhereOptsStandardScheme getScheme() {
      return new DebugReportWhereOptsStandardScheme();
    }
  }

  private static class DebugReportWhereOptsStandardScheme extends StandardScheme<DebugReportWhereOpts> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DebugReportWhereOpts struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userId = iprot.readString();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // REPORT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.reportType = com.wi.director.thrift.v1.debugreport.DebugReportType.findByValue(iprot.readI32());
              struct.setReportTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 100: // PAGE_REQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.pageReq = new com.wi.director.thrift.v1.common.PageReq();
              struct.pageReq.read(iprot);
              struct.setPageReqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DebugReportWhereOpts struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.userId != null) {
        if (struct.isSetUserId()) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.userId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.reportType != null) {
        if (struct.isSetReportType()) {
          oprot.writeFieldBegin(REPORT_TYPE_FIELD_DESC);
          oprot.writeI32(struct.reportType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.pageReq != null) {
        if (struct.isSetPageReq()) {
          oprot.writeFieldBegin(PAGE_REQ_FIELD_DESC);
          struct.pageReq.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

}

