/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wi.director.thrift.v1.messaging;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * Structured body contains a rich message body of the following format:
 * <br><br>
 * Template example:
 * <br><br>
 * <pre>
 *  messageTemplate: "{{user}} added document {{doc}}",
 *  tmpl:
 *    "user": { "typ": User, "id": someUUID, "label": UserName },
 *    "doc": { "typ": Document, "id": someUUID, "label": DocName },
 * </pre>
 * To display messages as a client, the client should take the following steps:
 * <ol type="1">
 * <li> Detect all sequences in the template matching \{\{([^}]+\}\}, anything inside double braces {{}}</li>
 * <li> Within those sequences, the text should correspond to an entry in the resourceLocator</li>
 * <li> Use the ResourceType of the entry to determine object type</li>
 * <li> If the Label field is populated, use the label as the display name. If not,
 * use the Id and Type fields to fetch the appropriate object and label</li>
 * </ol>
 * 
 * <br><br>
 * Sending a strutured message
 * <br><br>
 * In order to send structured data, follow the format above when constructing a message struct to
 * send to the server. The server will prioritize the StructuredBody field over the body field when
 * present. In order to escape "{{" and "}}" replace with "\{{" and "\}}" respectively. The clients
 * will be responsible for unescaping. Escape format is defined for consistency across clients.
 */
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class Message implements org.apache.thrift.TBase<Message, Message._Fields>, java.io.Serializable, Cloneable, Comparable<Message> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Message");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField JOB_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("jobId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SEQ_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("seqId", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField CLIENT_CREATED_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("clientCreatedAt", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField("category", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField SENDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("senderId", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField RECEIVER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("receiverType", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField RECEIVER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("receiverId", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField BODY_FIELD_DESC = new org.apache.thrift.protocol.TField("body", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField SERVER_CREATED_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("serverCreatedAt", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField STRUCTURED_BODY_FIELD_DESC = new org.apache.thrift.protocol.TField("structuredBody", org.apache.thrift.protocol.TType.STRUCT, (short)11);
  private static final org.apache.thrift.protocol.TField TARGET_STEP_FIELD_DESC = new org.apache.thrift.protocol.TField("targetStep", org.apache.thrift.protocol.TType.STRUCT, (short)12);
  private static final org.apache.thrift.protocol.TField DOCUMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("documents", org.apache.thrift.protocol.TType.LIST, (short)50);
  private static final org.apache.thrift.protocol.TField UPDATED_SEQ_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("updatedSeqId", org.apache.thrift.protocol.TType.I64, (short)51);
  private static final org.apache.thrift.protocol.TField DEVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceId", org.apache.thrift.protocol.TType.STRING, (short)200);
  private static final org.apache.thrift.protocol.TField DEVICE_SEQ_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceSeqId", org.apache.thrift.protocol.TType.I64, (short)201);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MessageStandardSchemeFactory());
  }

  public String id; // required
  public String jobId; // required
  public long seqId; // required
  public long clientCreatedAt; // required
  /**
   * 
   * @see MessageCategory
   */
  public MessageCategory category; // required
  public String senderId; // required
  /**
   * 
   * @see ReceiverType
   */
  public ReceiverType receiverType; // required
  public String receiverId; // required
  public String body; // required
  public long serverCreatedAt; // required
  /**
   * Args used to populate template. Key is template argument name
   */
  public StructuredBody structuredBody; // optional
  /**
   * Deprecated. Use structured body to send structured messages.
   * Set to target step when sending a ping messsage for a step
   */
  public com.wi.director.thrift.v1.step.BaseStep targetStep; // optional
  /**
   * Send documents with isPending = true & empty ids to reserve documentIds;
   * these will be returned in the order they were passed in, but with the ID
   * filled in. If the mimeType and size are provided, the receiving end can be
   * clever about its UI to display progress.
   * 
   * On Get, messages containing any pending documents will only be returned
   * if the option canHandlePendingDocuments is set to true.
   */
  public List<com.wi.director.thrift.v1.document.Document> documents; // required
  /**
   * If this is an update to a previous message that had a pending document,
   * this is a reference to the earlier message that is now updated. If several
   * modifications happen to same user-facing message this will still point to
   * the original seqId (the anchoring location) and not subsequent ones.
   */
  public long updatedSeqId; // optional
  /**
   * For Mesh
   */
  public String deviceId; // optional
  public long deviceSeqId; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    JOB_ID((short)2, "jobId"),
    SEQ_ID((short)3, "seqId"),
    CLIENT_CREATED_AT((short)4, "clientCreatedAt"),
    /**
     * 
     * @see MessageCategory
     */
    CATEGORY((short)5, "category"),
    SENDER_ID((short)6, "senderId"),
    /**
     * 
     * @see ReceiverType
     */
    RECEIVER_TYPE((short)7, "receiverType"),
    RECEIVER_ID((short)8, "receiverId"),
    BODY((short)9, "body"),
    SERVER_CREATED_AT((short)10, "serverCreatedAt"),
    /**
     * Args used to populate template. Key is template argument name
     */
    STRUCTURED_BODY((short)11, "structuredBody"),
    /**
     * Deprecated. Use structured body to send structured messages.
     * Set to target step when sending a ping messsage for a step
     */
    TARGET_STEP((short)12, "targetStep"),
    /**
     * Send documents with isPending = true & empty ids to reserve documentIds;
     * these will be returned in the order they were passed in, but with the ID
     * filled in. If the mimeType and size are provided, the receiving end can be
     * clever about its UI to display progress.
     * 
     * On Get, messages containing any pending documents will only be returned
     * if the option canHandlePendingDocuments is set to true.
     */
    DOCUMENTS((short)50, "documents"),
    /**
     * If this is an update to a previous message that had a pending document,
     * this is a reference to the earlier message that is now updated. If several
     * modifications happen to same user-facing message this will still point to
     * the original seqId (the anchoring location) and not subsequent ones.
     */
    UPDATED_SEQ_ID((short)51, "updatedSeqId"),
    /**
     * For Mesh
     */
    DEVICE_ID((short)200, "deviceId"),
    DEVICE_SEQ_ID((short)201, "deviceSeqId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // JOB_ID
          return JOB_ID;
        case 3: // SEQ_ID
          return SEQ_ID;
        case 4: // CLIENT_CREATED_AT
          return CLIENT_CREATED_AT;
        case 5: // CATEGORY
          return CATEGORY;
        case 6: // SENDER_ID
          return SENDER_ID;
        case 7: // RECEIVER_TYPE
          return RECEIVER_TYPE;
        case 8: // RECEIVER_ID
          return RECEIVER_ID;
        case 9: // BODY
          return BODY;
        case 10: // SERVER_CREATED_AT
          return SERVER_CREATED_AT;
        case 11: // STRUCTURED_BODY
          return STRUCTURED_BODY;
        case 12: // TARGET_STEP
          return TARGET_STEP;
        case 50: // DOCUMENTS
          return DOCUMENTS;
        case 51: // UPDATED_SEQ_ID
          return UPDATED_SEQ_ID;
        case 200: // DEVICE_ID
          return DEVICE_ID;
        case 201: // DEVICE_SEQ_ID
          return DEVICE_SEQ_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SEQID_ISSET_ID = 0;
  private static final int __CLIENTCREATEDAT_ISSET_ID = 1;
  private static final int __SERVERCREATEDAT_ISSET_ID = 2;
  private static final int __UPDATEDSEQID_ISSET_ID = 3;
  private static final int __DEVICESEQID_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.STRUCTURED_BODY,_Fields.TARGET_STEP,_Fields.UPDATED_SEQ_ID,_Fields.DEVICE_ID,_Fields.DEVICE_SEQ_ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.JOB_ID, new org.apache.thrift.meta_data.FieldMetaData("jobId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SEQ_ID, new org.apache.thrift.meta_data.FieldMetaData("seqId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CLIENT_CREATED_AT, new org.apache.thrift.meta_data.FieldMetaData("clientCreatedAt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CATEGORY, new org.apache.thrift.meta_data.FieldMetaData("category", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MessageCategory.class)));
    tmpMap.put(_Fields.SENDER_ID, new org.apache.thrift.meta_data.FieldMetaData("senderId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RECEIVER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("receiverType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ReceiverType.class)));
    tmpMap.put(_Fields.RECEIVER_ID, new org.apache.thrift.meta_data.FieldMetaData("receiverId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BODY, new org.apache.thrift.meta_data.FieldMetaData("body", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SERVER_CREATED_AT, new org.apache.thrift.meta_data.FieldMetaData("serverCreatedAt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.STRUCTURED_BODY, new org.apache.thrift.meta_data.FieldMetaData("structuredBody", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StructuredBody.class)));
    tmpMap.put(_Fields.TARGET_STEP, new org.apache.thrift.meta_data.FieldMetaData("targetStep", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.step.BaseStep.class)));
    tmpMap.put(_Fields.DOCUMENTS, new org.apache.thrift.meta_data.FieldMetaData("documents", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.document.Document.class))));
    tmpMap.put(_Fields.UPDATED_SEQ_ID, new org.apache.thrift.meta_data.FieldMetaData("updatedSeqId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DEVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("deviceId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEVICE_SEQ_ID, new org.apache.thrift.meta_data.FieldMetaData("deviceSeqId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Message.class, metaDataMap);
  }

  public Message() {
  }

  public Message(
    String id,
    String jobId,
    long seqId,
    long clientCreatedAt,
    MessageCategory category,
    String senderId,
    ReceiverType receiverType,
    String receiverId,
    String body,
    long serverCreatedAt,
    List<com.wi.director.thrift.v1.document.Document> documents)
  {
    this();
    this.id = id;
    this.jobId = jobId;
    this.seqId = seqId;
    setSeqIdIsSet(true);
    this.clientCreatedAt = clientCreatedAt;
    setClientCreatedAtIsSet(true);
    this.category = category;
    this.senderId = senderId;
    this.receiverType = receiverType;
    this.receiverId = receiverId;
    this.body = body;
    this.serverCreatedAt = serverCreatedAt;
    setServerCreatedAtIsSet(true);
    this.documents = documents;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Message(Message other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetJobId()) {
      this.jobId = other.jobId;
    }
    this.seqId = other.seqId;
    this.clientCreatedAt = other.clientCreatedAt;
    if (other.isSetCategory()) {
      this.category = other.category;
    }
    if (other.isSetSenderId()) {
      this.senderId = other.senderId;
    }
    if (other.isSetReceiverType()) {
      this.receiverType = other.receiverType;
    }
    if (other.isSetReceiverId()) {
      this.receiverId = other.receiverId;
    }
    if (other.isSetBody()) {
      this.body = other.body;
    }
    this.serverCreatedAt = other.serverCreatedAt;
    if (other.isSetStructuredBody()) {
      this.structuredBody = new StructuredBody(other.structuredBody);
    }
    if (other.isSetTargetStep()) {
      this.targetStep = new com.wi.director.thrift.v1.step.BaseStep(other.targetStep);
    }
    if (other.isSetDocuments()) {
      List<com.wi.director.thrift.v1.document.Document> __this__documents = new ArrayList<com.wi.director.thrift.v1.document.Document>(other.documents.size());
      for (com.wi.director.thrift.v1.document.Document other_element : other.documents) {
        __this__documents.add(new com.wi.director.thrift.v1.document.Document(other_element));
      }
      this.documents = __this__documents;
    }
    this.updatedSeqId = other.updatedSeqId;
    if (other.isSetDeviceId()) {
      this.deviceId = other.deviceId;
    }
    this.deviceSeqId = other.deviceSeqId;
  }

  public Message deepCopy() {
    return new Message(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.jobId = null;
    setSeqIdIsSet(false);
    this.seqId = 0;
    setClientCreatedAtIsSet(false);
    this.clientCreatedAt = 0;
    this.category = null;
    this.senderId = null;
    this.receiverType = null;
    this.receiverId = null;
    this.body = null;
    setServerCreatedAtIsSet(false);
    this.serverCreatedAt = 0;
    this.structuredBody = null;
    this.targetStep = null;
    this.documents = null;
    setUpdatedSeqIdIsSet(false);
    this.updatedSeqId = 0;
    this.deviceId = null;
    setDeviceSeqIdIsSet(false);
    this.deviceSeqId = 0;
  }

  public String getId() {
    return this.id;
  }

  public Message setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public String getJobId() {
    return this.jobId;
  }

  public Message setJobId(String jobId) {
    this.jobId = jobId;
    return this;
  }

  public void unsetJobId() {
    this.jobId = null;
  }

  /** Returns true if field jobId is set (has been assigned a value) and false otherwise */
  public boolean isSetJobId() {
    return this.jobId != null;
  }

  public void setJobIdIsSet(boolean value) {
    if (!value) {
      this.jobId = null;
    }
  }

  public long getSeqId() {
    return this.seqId;
  }

  public Message setSeqId(long seqId) {
    this.seqId = seqId;
    setSeqIdIsSet(true);
    return this;
  }

  public void unsetSeqId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEQID_ISSET_ID);
  }

  /** Returns true if field seqId is set (has been assigned a value) and false otherwise */
  public boolean isSetSeqId() {
    return EncodingUtils.testBit(__isset_bitfield, __SEQID_ISSET_ID);
  }

  public void setSeqIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEQID_ISSET_ID, value);
  }

  public long getClientCreatedAt() {
    return this.clientCreatedAt;
  }

  public Message setClientCreatedAt(long clientCreatedAt) {
    this.clientCreatedAt = clientCreatedAt;
    setClientCreatedAtIsSet(true);
    return this;
  }

  public void unsetClientCreatedAt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CLIENTCREATEDAT_ISSET_ID);
  }

  /** Returns true if field clientCreatedAt is set (has been assigned a value) and false otherwise */
  public boolean isSetClientCreatedAt() {
    return EncodingUtils.testBit(__isset_bitfield, __CLIENTCREATEDAT_ISSET_ID);
  }

  public void setClientCreatedAtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CLIENTCREATEDAT_ISSET_ID, value);
  }

  /**
   * 
   * @see MessageCategory
   */
  public MessageCategory getCategory() {
    return this.category;
  }

  /**
   * 
   * @see MessageCategory
   */
  public Message setCategory(MessageCategory category) {
    this.category = category;
    return this;
  }

  public void unsetCategory() {
    this.category = null;
  }

  /** Returns true if field category is set (has been assigned a value) and false otherwise */
  public boolean isSetCategory() {
    return this.category != null;
  }

  public void setCategoryIsSet(boolean value) {
    if (!value) {
      this.category = null;
    }
  }

  public String getSenderId() {
    return this.senderId;
  }

  public Message setSenderId(String senderId) {
    this.senderId = senderId;
    return this;
  }

  public void unsetSenderId() {
    this.senderId = null;
  }

  /** Returns true if field senderId is set (has been assigned a value) and false otherwise */
  public boolean isSetSenderId() {
    return this.senderId != null;
  }

  public void setSenderIdIsSet(boolean value) {
    if (!value) {
      this.senderId = null;
    }
  }

  /**
   * 
   * @see ReceiverType
   */
  public ReceiverType getReceiverType() {
    return this.receiverType;
  }

  /**
   * 
   * @see ReceiverType
   */
  public Message setReceiverType(ReceiverType receiverType) {
    this.receiverType = receiverType;
    return this;
  }

  public void unsetReceiverType() {
    this.receiverType = null;
  }

  /** Returns true if field receiverType is set (has been assigned a value) and false otherwise */
  public boolean isSetReceiverType() {
    return this.receiverType != null;
  }

  public void setReceiverTypeIsSet(boolean value) {
    if (!value) {
      this.receiverType = null;
    }
  }

  public String getReceiverId() {
    return this.receiverId;
  }

  public Message setReceiverId(String receiverId) {
    this.receiverId = receiverId;
    return this;
  }

  public void unsetReceiverId() {
    this.receiverId = null;
  }

  /** Returns true if field receiverId is set (has been assigned a value) and false otherwise */
  public boolean isSetReceiverId() {
    return this.receiverId != null;
  }

  public void setReceiverIdIsSet(boolean value) {
    if (!value) {
      this.receiverId = null;
    }
  }

  public String getBody() {
    return this.body;
  }

  public Message setBody(String body) {
    this.body = body;
    return this;
  }

  public void unsetBody() {
    this.body = null;
  }

  /** Returns true if field body is set (has been assigned a value) and false otherwise */
  public boolean isSetBody() {
    return this.body != null;
  }

  public void setBodyIsSet(boolean value) {
    if (!value) {
      this.body = null;
    }
  }

  public long getServerCreatedAt() {
    return this.serverCreatedAt;
  }

  public Message setServerCreatedAt(long serverCreatedAt) {
    this.serverCreatedAt = serverCreatedAt;
    setServerCreatedAtIsSet(true);
    return this;
  }

  public void unsetServerCreatedAt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SERVERCREATEDAT_ISSET_ID);
  }

  /** Returns true if field serverCreatedAt is set (has been assigned a value) and false otherwise */
  public boolean isSetServerCreatedAt() {
    return EncodingUtils.testBit(__isset_bitfield, __SERVERCREATEDAT_ISSET_ID);
  }

  public void setServerCreatedAtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SERVERCREATEDAT_ISSET_ID, value);
  }

  /**
   * Args used to populate template. Key is template argument name
   */
  public StructuredBody getStructuredBody() {
    return this.structuredBody;
  }

  /**
   * Args used to populate template. Key is template argument name
   */
  public Message setStructuredBody(StructuredBody structuredBody) {
    this.structuredBody = structuredBody;
    return this;
  }

  public void unsetStructuredBody() {
    this.structuredBody = null;
  }

  /** Returns true if field structuredBody is set (has been assigned a value) and false otherwise */
  public boolean isSetStructuredBody() {
    return this.structuredBody != null;
  }

  public void setStructuredBodyIsSet(boolean value) {
    if (!value) {
      this.structuredBody = null;
    }
  }

  /**
   * Deprecated. Use structured body to send structured messages.
   * Set to target step when sending a ping messsage for a step
   */
  public com.wi.director.thrift.v1.step.BaseStep getTargetStep() {
    return this.targetStep;
  }

  /**
   * Deprecated. Use structured body to send structured messages.
   * Set to target step when sending a ping messsage for a step
   */
  public Message setTargetStep(com.wi.director.thrift.v1.step.BaseStep targetStep) {
    this.targetStep = targetStep;
    return this;
  }

  public void unsetTargetStep() {
    this.targetStep = null;
  }

  /** Returns true if field targetStep is set (has been assigned a value) and false otherwise */
  public boolean isSetTargetStep() {
    return this.targetStep != null;
  }

  public void setTargetStepIsSet(boolean value) {
    if (!value) {
      this.targetStep = null;
    }
  }

  public int getDocumentsSize() {
    return (this.documents == null) ? 0 : this.documents.size();
  }

  public java.util.Iterator<com.wi.director.thrift.v1.document.Document> getDocumentsIterator() {
    return (this.documents == null) ? null : this.documents.iterator();
  }

  public void addToDocuments(com.wi.director.thrift.v1.document.Document elem) {
    if (this.documents == null) {
      this.documents = new ArrayList<com.wi.director.thrift.v1.document.Document>();
    }
    this.documents.add(elem);
  }

  /**
   * Send documents with isPending = true & empty ids to reserve documentIds;
   * these will be returned in the order they were passed in, but with the ID
   * filled in. If the mimeType and size are provided, the receiving end can be
   * clever about its UI to display progress.
   * 
   * On Get, messages containing any pending documents will only be returned
   * if the option canHandlePendingDocuments is set to true.
   */
  public List<com.wi.director.thrift.v1.document.Document> getDocuments() {
    return this.documents;
  }

  /**
   * Send documents with isPending = true & empty ids to reserve documentIds;
   * these will be returned in the order they were passed in, but with the ID
   * filled in. If the mimeType and size are provided, the receiving end can be
   * clever about its UI to display progress.
   * 
   * On Get, messages containing any pending documents will only be returned
   * if the option canHandlePendingDocuments is set to true.
   */
  public Message setDocuments(List<com.wi.director.thrift.v1.document.Document> documents) {
    this.documents = documents;
    return this;
  }

  public void unsetDocuments() {
    this.documents = null;
  }

  /** Returns true if field documents is set (has been assigned a value) and false otherwise */
  public boolean isSetDocuments() {
    return this.documents != null;
  }

  public void setDocumentsIsSet(boolean value) {
    if (!value) {
      this.documents = null;
    }
  }

  /**
   * If this is an update to a previous message that had a pending document,
   * this is a reference to the earlier message that is now updated. If several
   * modifications happen to same user-facing message this will still point to
   * the original seqId (the anchoring location) and not subsequent ones.
   */
  public long getUpdatedSeqId() {
    return this.updatedSeqId;
  }

  /**
   * If this is an update to a previous message that had a pending document,
   * this is a reference to the earlier message that is now updated. If several
   * modifications happen to same user-facing message this will still point to
   * the original seqId (the anchoring location) and not subsequent ones.
   */
  public Message setUpdatedSeqId(long updatedSeqId) {
    this.updatedSeqId = updatedSeqId;
    setUpdatedSeqIdIsSet(true);
    return this;
  }

  public void unsetUpdatedSeqId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPDATEDSEQID_ISSET_ID);
  }

  /** Returns true if field updatedSeqId is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdatedSeqId() {
    return EncodingUtils.testBit(__isset_bitfield, __UPDATEDSEQID_ISSET_ID);
  }

  public void setUpdatedSeqIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPDATEDSEQID_ISSET_ID, value);
  }

  /**
   * For Mesh
   */
  public String getDeviceId() {
    return this.deviceId;
  }

  /**
   * For Mesh
   */
  public Message setDeviceId(String deviceId) {
    this.deviceId = deviceId;
    return this;
  }

  public void unsetDeviceId() {
    this.deviceId = null;
  }

  /** Returns true if field deviceId is set (has been assigned a value) and false otherwise */
  public boolean isSetDeviceId() {
    return this.deviceId != null;
  }

  public void setDeviceIdIsSet(boolean value) {
    if (!value) {
      this.deviceId = null;
    }
  }

  public long getDeviceSeqId() {
    return this.deviceSeqId;
  }

  public Message setDeviceSeqId(long deviceSeqId) {
    this.deviceSeqId = deviceSeqId;
    setDeviceSeqIdIsSet(true);
    return this;
  }

  public void unsetDeviceSeqId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEVICESEQID_ISSET_ID);
  }

  /** Returns true if field deviceSeqId is set (has been assigned a value) and false otherwise */
  public boolean isSetDeviceSeqId() {
    return EncodingUtils.testBit(__isset_bitfield, __DEVICESEQID_ISSET_ID);
  }

  public void setDeviceSeqIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEVICESEQID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case JOB_ID:
      if (value == null) {
        unsetJobId();
      } else {
        setJobId((String)value);
      }
      break;

    case SEQ_ID:
      if (value == null) {
        unsetSeqId();
      } else {
        setSeqId((Long)value);
      }
      break;

    case CLIENT_CREATED_AT:
      if (value == null) {
        unsetClientCreatedAt();
      } else {
        setClientCreatedAt((Long)value);
      }
      break;

    case CATEGORY:
      if (value == null) {
        unsetCategory();
      } else {
        setCategory((MessageCategory)value);
      }
      break;

    case SENDER_ID:
      if (value == null) {
        unsetSenderId();
      } else {
        setSenderId((String)value);
      }
      break;

    case RECEIVER_TYPE:
      if (value == null) {
        unsetReceiverType();
      } else {
        setReceiverType((ReceiverType)value);
      }
      break;

    case RECEIVER_ID:
      if (value == null) {
        unsetReceiverId();
      } else {
        setReceiverId((String)value);
      }
      break;

    case BODY:
      if (value == null) {
        unsetBody();
      } else {
        setBody((String)value);
      }
      break;

    case SERVER_CREATED_AT:
      if (value == null) {
        unsetServerCreatedAt();
      } else {
        setServerCreatedAt((Long)value);
      }
      break;

    case STRUCTURED_BODY:
      if (value == null) {
        unsetStructuredBody();
      } else {
        setStructuredBody((StructuredBody)value);
      }
      break;

    case TARGET_STEP:
      if (value == null) {
        unsetTargetStep();
      } else {
        setTargetStep((com.wi.director.thrift.v1.step.BaseStep)value);
      }
      break;

    case DOCUMENTS:
      if (value == null) {
        unsetDocuments();
      } else {
        setDocuments((List<com.wi.director.thrift.v1.document.Document>)value);
      }
      break;

    case UPDATED_SEQ_ID:
      if (value == null) {
        unsetUpdatedSeqId();
      } else {
        setUpdatedSeqId((Long)value);
      }
      break;

    case DEVICE_ID:
      if (value == null) {
        unsetDeviceId();
      } else {
        setDeviceId((String)value);
      }
      break;

    case DEVICE_SEQ_ID:
      if (value == null) {
        unsetDeviceSeqId();
      } else {
        setDeviceSeqId((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case JOB_ID:
      return getJobId();

    case SEQ_ID:
      return getSeqId();

    case CLIENT_CREATED_AT:
      return getClientCreatedAt();

    case CATEGORY:
      return getCategory();

    case SENDER_ID:
      return getSenderId();

    case RECEIVER_TYPE:
      return getReceiverType();

    case RECEIVER_ID:
      return getReceiverId();

    case BODY:
      return getBody();

    case SERVER_CREATED_AT:
      return getServerCreatedAt();

    case STRUCTURED_BODY:
      return getStructuredBody();

    case TARGET_STEP:
      return getTargetStep();

    case DOCUMENTS:
      return getDocuments();

    case UPDATED_SEQ_ID:
      return getUpdatedSeqId();

    case DEVICE_ID:
      return getDeviceId();

    case DEVICE_SEQ_ID:
      return getDeviceSeqId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case JOB_ID:
      return isSetJobId();
    case SEQ_ID:
      return isSetSeqId();
    case CLIENT_CREATED_AT:
      return isSetClientCreatedAt();
    case CATEGORY:
      return isSetCategory();
    case SENDER_ID:
      return isSetSenderId();
    case RECEIVER_TYPE:
      return isSetReceiverType();
    case RECEIVER_ID:
      return isSetReceiverId();
    case BODY:
      return isSetBody();
    case SERVER_CREATED_AT:
      return isSetServerCreatedAt();
    case STRUCTURED_BODY:
      return isSetStructuredBody();
    case TARGET_STEP:
      return isSetTargetStep();
    case DOCUMENTS:
      return isSetDocuments();
    case UPDATED_SEQ_ID:
      return isSetUpdatedSeqId();
    case DEVICE_ID:
      return isSetDeviceId();
    case DEVICE_SEQ_ID:
      return isSetDeviceSeqId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Message)
      return this.equals((Message)that);
    return false;
  }

  public boolean equals(Message that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_jobId = true && this.isSetJobId();
    boolean that_present_jobId = true && that.isSetJobId();
    if (this_present_jobId || that_present_jobId) {
      if (!(this_present_jobId && that_present_jobId))
        return false;
      if (!this.jobId.equals(that.jobId))
        return false;
    }

    boolean this_present_seqId = true;
    boolean that_present_seqId = true;
    if (this_present_seqId || that_present_seqId) {
      if (!(this_present_seqId && that_present_seqId))
        return false;
      if (this.seqId != that.seqId)
        return false;
    }

    boolean this_present_clientCreatedAt = true;
    boolean that_present_clientCreatedAt = true;
    if (this_present_clientCreatedAt || that_present_clientCreatedAt) {
      if (!(this_present_clientCreatedAt && that_present_clientCreatedAt))
        return false;
      if (this.clientCreatedAt != that.clientCreatedAt)
        return false;
    }

    boolean this_present_category = true && this.isSetCategory();
    boolean that_present_category = true && that.isSetCategory();
    if (this_present_category || that_present_category) {
      if (!(this_present_category && that_present_category))
        return false;
      if (!this.category.equals(that.category))
        return false;
    }

    boolean this_present_senderId = true && this.isSetSenderId();
    boolean that_present_senderId = true && that.isSetSenderId();
    if (this_present_senderId || that_present_senderId) {
      if (!(this_present_senderId && that_present_senderId))
        return false;
      if (!this.senderId.equals(that.senderId))
        return false;
    }

    boolean this_present_receiverType = true && this.isSetReceiverType();
    boolean that_present_receiverType = true && that.isSetReceiverType();
    if (this_present_receiverType || that_present_receiverType) {
      if (!(this_present_receiverType && that_present_receiverType))
        return false;
      if (!this.receiverType.equals(that.receiverType))
        return false;
    }

    boolean this_present_receiverId = true && this.isSetReceiverId();
    boolean that_present_receiverId = true && that.isSetReceiverId();
    if (this_present_receiverId || that_present_receiverId) {
      if (!(this_present_receiverId && that_present_receiverId))
        return false;
      if (!this.receiverId.equals(that.receiverId))
        return false;
    }

    boolean this_present_body = true && this.isSetBody();
    boolean that_present_body = true && that.isSetBody();
    if (this_present_body || that_present_body) {
      if (!(this_present_body && that_present_body))
        return false;
      if (!this.body.equals(that.body))
        return false;
    }

    boolean this_present_serverCreatedAt = true;
    boolean that_present_serverCreatedAt = true;
    if (this_present_serverCreatedAt || that_present_serverCreatedAt) {
      if (!(this_present_serverCreatedAt && that_present_serverCreatedAt))
        return false;
      if (this.serverCreatedAt != that.serverCreatedAt)
        return false;
    }

    boolean this_present_structuredBody = true && this.isSetStructuredBody();
    boolean that_present_structuredBody = true && that.isSetStructuredBody();
    if (this_present_structuredBody || that_present_structuredBody) {
      if (!(this_present_structuredBody && that_present_structuredBody))
        return false;
      if (!this.structuredBody.equals(that.structuredBody))
        return false;
    }

    boolean this_present_targetStep = true && this.isSetTargetStep();
    boolean that_present_targetStep = true && that.isSetTargetStep();
    if (this_present_targetStep || that_present_targetStep) {
      if (!(this_present_targetStep && that_present_targetStep))
        return false;
      if (!this.targetStep.equals(that.targetStep))
        return false;
    }

    boolean this_present_documents = true && this.isSetDocuments();
    boolean that_present_documents = true && that.isSetDocuments();
    if (this_present_documents || that_present_documents) {
      if (!(this_present_documents && that_present_documents))
        return false;
      if (!this.documents.equals(that.documents))
        return false;
    }

    boolean this_present_updatedSeqId = true && this.isSetUpdatedSeqId();
    boolean that_present_updatedSeqId = true && that.isSetUpdatedSeqId();
    if (this_present_updatedSeqId || that_present_updatedSeqId) {
      if (!(this_present_updatedSeqId && that_present_updatedSeqId))
        return false;
      if (this.updatedSeqId != that.updatedSeqId)
        return false;
    }

    boolean this_present_deviceId = true && this.isSetDeviceId();
    boolean that_present_deviceId = true && that.isSetDeviceId();
    if (this_present_deviceId || that_present_deviceId) {
      if (!(this_present_deviceId && that_present_deviceId))
        return false;
      if (!this.deviceId.equals(that.deviceId))
        return false;
    }

    boolean this_present_deviceSeqId = true && this.isSetDeviceSeqId();
    boolean that_present_deviceSeqId = true && that.isSetDeviceSeqId();
    if (this_present_deviceSeqId || that_present_deviceSeqId) {
      if (!(this_present_deviceSeqId && that_present_deviceSeqId))
        return false;
      if (this.deviceSeqId != that.deviceSeqId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_jobId = true && (isSetJobId());
    list.add(present_jobId);
    if (present_jobId)
      list.add(jobId);

    boolean present_seqId = true;
    list.add(present_seqId);
    if (present_seqId)
      list.add(seqId);

    boolean present_clientCreatedAt = true;
    list.add(present_clientCreatedAt);
    if (present_clientCreatedAt)
      list.add(clientCreatedAt);

    boolean present_category = true && (isSetCategory());
    list.add(present_category);
    if (present_category)
      list.add(category.getValue());

    boolean present_senderId = true && (isSetSenderId());
    list.add(present_senderId);
    if (present_senderId)
      list.add(senderId);

    boolean present_receiverType = true && (isSetReceiverType());
    list.add(present_receiverType);
    if (present_receiverType)
      list.add(receiverType.getValue());

    boolean present_receiverId = true && (isSetReceiverId());
    list.add(present_receiverId);
    if (present_receiverId)
      list.add(receiverId);

    boolean present_body = true && (isSetBody());
    list.add(present_body);
    if (present_body)
      list.add(body);

    boolean present_serverCreatedAt = true;
    list.add(present_serverCreatedAt);
    if (present_serverCreatedAt)
      list.add(serverCreatedAt);

    boolean present_structuredBody = true && (isSetStructuredBody());
    list.add(present_structuredBody);
    if (present_structuredBody)
      list.add(structuredBody);

    boolean present_targetStep = true && (isSetTargetStep());
    list.add(present_targetStep);
    if (present_targetStep)
      list.add(targetStep);

    boolean present_documents = true && (isSetDocuments());
    list.add(present_documents);
    if (present_documents)
      list.add(documents);

    boolean present_updatedSeqId = true && (isSetUpdatedSeqId());
    list.add(present_updatedSeqId);
    if (present_updatedSeqId)
      list.add(updatedSeqId);

    boolean present_deviceId = true && (isSetDeviceId());
    list.add(present_deviceId);
    if (present_deviceId)
      list.add(deviceId);

    boolean present_deviceSeqId = true && (isSetDeviceSeqId());
    list.add(present_deviceSeqId);
    if (present_deviceSeqId)
      list.add(deviceSeqId);

    return list.hashCode();
  }

  @Override
  public int compareTo(Message other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJobId()).compareTo(other.isSetJobId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJobId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobId, other.jobId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSeqId()).compareTo(other.isSetSeqId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSeqId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.seqId, other.seqId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClientCreatedAt()).compareTo(other.isSetClientCreatedAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientCreatedAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientCreatedAt, other.clientCreatedAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCategory()).compareTo(other.isSetCategory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCategory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.category, other.category);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSenderId()).compareTo(other.isSetSenderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSenderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.senderId, other.senderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReceiverType()).compareTo(other.isSetReceiverType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReceiverType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.receiverType, other.receiverType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReceiverId()).compareTo(other.isSetReceiverId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReceiverId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.receiverId, other.receiverId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBody()).compareTo(other.isSetBody());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBody()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.body, other.body);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServerCreatedAt()).compareTo(other.isSetServerCreatedAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServerCreatedAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverCreatedAt, other.serverCreatedAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStructuredBody()).compareTo(other.isSetStructuredBody());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStructuredBody()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.structuredBody, other.structuredBody);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTargetStep()).compareTo(other.isSetTargetStep());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTargetStep()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.targetStep, other.targetStep);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDocuments()).compareTo(other.isSetDocuments());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDocuments()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.documents, other.documents);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdatedSeqId()).compareTo(other.isSetUpdatedSeqId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdatedSeqId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updatedSeqId, other.updatedSeqId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeviceId()).compareTo(other.isSetDeviceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeviceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceId, other.deviceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeviceSeqId()).compareTo(other.isSetDeviceSeqId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeviceSeqId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceSeqId, other.deviceSeqId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Message(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("jobId:");
    if (this.jobId == null) {
      sb.append("null");
    } else {
      sb.append(this.jobId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("seqId:");
    sb.append(this.seqId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("clientCreatedAt:");
    sb.append(this.clientCreatedAt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("category:");
    if (this.category == null) {
      sb.append("null");
    } else {
      sb.append(this.category);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("senderId:");
    if (this.senderId == null) {
      sb.append("null");
    } else {
      sb.append(this.senderId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("receiverType:");
    if (this.receiverType == null) {
      sb.append("null");
    } else {
      sb.append(this.receiverType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("receiverId:");
    if (this.receiverId == null) {
      sb.append("null");
    } else {
      sb.append(this.receiverId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("body:");
    if (this.body == null) {
      sb.append("null");
    } else {
      sb.append(this.body);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("serverCreatedAt:");
    sb.append(this.serverCreatedAt);
    first = false;
    if (isSetStructuredBody()) {
      if (!first) sb.append(", ");
      sb.append("structuredBody:");
      if (this.structuredBody == null) {
        sb.append("null");
      } else {
        sb.append(this.structuredBody);
      }
      first = false;
    }
    if (isSetTargetStep()) {
      if (!first) sb.append(", ");
      sb.append("targetStep:");
      if (this.targetStep == null) {
        sb.append("null");
      } else {
        sb.append(this.targetStep);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("documents:");
    if (this.documents == null) {
      sb.append("null");
    } else {
      sb.append(this.documents);
    }
    first = false;
    if (isSetUpdatedSeqId()) {
      if (!first) sb.append(", ");
      sb.append("updatedSeqId:");
      sb.append(this.updatedSeqId);
      first = false;
    }
    if (isSetDeviceId()) {
      if (!first) sb.append(", ");
      sb.append("deviceId:");
      if (this.deviceId == null) {
        sb.append("null");
      } else {
        sb.append(this.deviceId);
      }
      first = false;
    }
    if (isSetDeviceSeqId()) {
      if (!first) sb.append(", ");
      sb.append("deviceSeqId:");
      sb.append(this.deviceSeqId);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (structuredBody != null) {
      structuredBody.validate();
    }
    if (targetStep != null) {
      targetStep.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MessageStandardSchemeFactory implements SchemeFactory {
    public MessageStandardScheme getScheme() {
      return new MessageStandardScheme();
    }
  }

  private static class MessageStandardScheme extends StandardScheme<Message> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Message struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // JOB_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.jobId = iprot.readString();
              struct.setJobIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SEQ_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.seqId = iprot.readI64();
              struct.setSeqIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CLIENT_CREATED_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.clientCreatedAt = iprot.readI64();
              struct.setClientCreatedAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CATEGORY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.category = com.wi.director.thrift.v1.messaging.MessageCategory.findByValue(iprot.readI32());
              struct.setCategoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SENDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.senderId = iprot.readString();
              struct.setSenderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // RECEIVER_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.receiverType = com.wi.director.thrift.v1.messaging.ReceiverType.findByValue(iprot.readI32());
              struct.setReceiverTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // RECEIVER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.receiverId = iprot.readString();
              struct.setReceiverIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // BODY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.body = iprot.readString();
              struct.setBodyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SERVER_CREATED_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.serverCreatedAt = iprot.readI64();
              struct.setServerCreatedAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // STRUCTURED_BODY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.structuredBody = new StructuredBody();
              struct.structuredBody.read(iprot);
              struct.setStructuredBodyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // TARGET_STEP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.targetStep = new com.wi.director.thrift.v1.step.BaseStep();
              struct.targetStep.read(iprot);
              struct.setTargetStepIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 50: // DOCUMENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list5 = iprot.readListBegin();
                struct.documents = new ArrayList<com.wi.director.thrift.v1.document.Document>(_list5.size);
                com.wi.director.thrift.v1.document.Document _elem6;
                for (int _i7 = 0; _i7 < _list5.size; ++_i7)
                {
                  _elem6 = new com.wi.director.thrift.v1.document.Document();
                  _elem6.read(iprot);
                  struct.documents.add(_elem6);
                }
                iprot.readListEnd();
              }
              struct.setDocumentsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 51: // UPDATED_SEQ_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.updatedSeqId = iprot.readI64();
              struct.setUpdatedSeqIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 200: // DEVICE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deviceId = iprot.readString();
              struct.setDeviceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 201: // DEVICE_SEQ_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.deviceSeqId = iprot.readI64();
              struct.setDeviceSeqIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Message struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.jobId != null) {
        oprot.writeFieldBegin(JOB_ID_FIELD_DESC);
        oprot.writeString(struct.jobId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SEQ_ID_FIELD_DESC);
      oprot.writeI64(struct.seqId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CLIENT_CREATED_AT_FIELD_DESC);
      oprot.writeI64(struct.clientCreatedAt);
      oprot.writeFieldEnd();
      if (struct.category != null) {
        oprot.writeFieldBegin(CATEGORY_FIELD_DESC);
        oprot.writeI32(struct.category.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.senderId != null) {
        oprot.writeFieldBegin(SENDER_ID_FIELD_DESC);
        oprot.writeString(struct.senderId);
        oprot.writeFieldEnd();
      }
      if (struct.receiverType != null) {
        oprot.writeFieldBegin(RECEIVER_TYPE_FIELD_DESC);
        oprot.writeI32(struct.receiverType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.receiverId != null) {
        oprot.writeFieldBegin(RECEIVER_ID_FIELD_DESC);
        oprot.writeString(struct.receiverId);
        oprot.writeFieldEnd();
      }
      if (struct.body != null) {
        oprot.writeFieldBegin(BODY_FIELD_DESC);
        oprot.writeString(struct.body);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SERVER_CREATED_AT_FIELD_DESC);
      oprot.writeI64(struct.serverCreatedAt);
      oprot.writeFieldEnd();
      if (struct.structuredBody != null) {
        if (struct.isSetStructuredBody()) {
          oprot.writeFieldBegin(STRUCTURED_BODY_FIELD_DESC);
          struct.structuredBody.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.targetStep != null) {
        if (struct.isSetTargetStep()) {
          oprot.writeFieldBegin(TARGET_STEP_FIELD_DESC);
          struct.targetStep.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.documents != null) {
        oprot.writeFieldBegin(DOCUMENTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.documents.size()));
          for (com.wi.director.thrift.v1.document.Document _iter8 : struct.documents)
          {
            _iter8.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.isSetUpdatedSeqId()) {
        oprot.writeFieldBegin(UPDATED_SEQ_ID_FIELD_DESC);
        oprot.writeI64(struct.updatedSeqId);
        oprot.writeFieldEnd();
      }
      if (struct.deviceId != null) {
        if (struct.isSetDeviceId()) {
          oprot.writeFieldBegin(DEVICE_ID_FIELD_DESC);
          oprot.writeString(struct.deviceId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDeviceSeqId()) {
        oprot.writeFieldBegin(DEVICE_SEQ_ID_FIELD_DESC);
        oprot.writeI64(struct.deviceSeqId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

}

