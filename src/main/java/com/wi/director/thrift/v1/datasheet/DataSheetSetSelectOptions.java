/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wi.director.thrift.v1.datasheet;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class DataSheetSetSelectOptions implements org.apache.thrift.TBase<DataSheetSetSelectOptions, DataSheetSetSelectOptions._Fields>, java.io.Serializable, Cloneable, Comparable<DataSheetSetSelectOptions> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DataSheetSetSelectOptions");

  private static final org.apache.thrift.protocol.TField INCLUDE_DEFINITIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("includeDefinitions", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField INCLUDE_SHEETS_FIELD_DESC = new org.apache.thrift.protocol.TField("includeSheets", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField SHEET_PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("sheetPageSize", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField INCLUDE_ACTIVE_SHEET_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("includeActiveSheetCount", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField INCLUDE_ARCHIVED_SHEET_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("includeArchivedSheetCount", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField DEFINITION_TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("definitionTitle", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField DEFINITION_TYPES_FIELD_DESC = new org.apache.thrift.protocol.TField("definitionTypes", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField INCLUDE_ATTRIBUTES_FIELD_DESC = new org.apache.thrift.protocol.TField("includeAttributes", org.apache.thrift.protocol.TType.BOOL, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DataSheetSetSelectOptionsStandardSchemeFactory());
  }

  /**
   * Includes active definition list
   */
  public boolean includeDefinitions; // required
  /**
   * Includes active data sheet list
   */
  public boolean includeSheets; // required
  /**
   * Includes only the first X sheets, 0 = all
   */
  public int sheetPageSize; // required
  /**
   * Includes active sheet count
   */
  public boolean includeActiveSheetCount; // required
  /**
   * Includes archived sheet count
   */
  public boolean includeArchivedSheetCount; // required
  /**
   * Includes only definitions that contain this title
   */
  public String definitionTitle; // optional
  /**
   * Includes only these definition types, if not set, includes all
   */
  public List<DefinitionType> definitionTypes; // optional
  public boolean includeAttributes; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * Includes active definition list
     */
    INCLUDE_DEFINITIONS((short)1, "includeDefinitions"),
    /**
     * Includes active data sheet list
     */
    INCLUDE_SHEETS((short)2, "includeSheets"),
    /**
     * Includes only the first X sheets, 0 = all
     */
    SHEET_PAGE_SIZE((short)3, "sheetPageSize"),
    /**
     * Includes active sheet count
     */
    INCLUDE_ACTIVE_SHEET_COUNT((short)4, "includeActiveSheetCount"),
    /**
     * Includes archived sheet count
     */
    INCLUDE_ARCHIVED_SHEET_COUNT((short)5, "includeArchivedSheetCount"),
    /**
     * Includes only definitions that contain this title
     */
    DEFINITION_TITLE((short)6, "definitionTitle"),
    /**
     * Includes only these definition types, if not set, includes all
     */
    DEFINITION_TYPES((short)7, "definitionTypes"),
    INCLUDE_ATTRIBUTES((short)8, "includeAttributes");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // INCLUDE_DEFINITIONS
          return INCLUDE_DEFINITIONS;
        case 2: // INCLUDE_SHEETS
          return INCLUDE_SHEETS;
        case 3: // SHEET_PAGE_SIZE
          return SHEET_PAGE_SIZE;
        case 4: // INCLUDE_ACTIVE_SHEET_COUNT
          return INCLUDE_ACTIVE_SHEET_COUNT;
        case 5: // INCLUDE_ARCHIVED_SHEET_COUNT
          return INCLUDE_ARCHIVED_SHEET_COUNT;
        case 6: // DEFINITION_TITLE
          return DEFINITION_TITLE;
        case 7: // DEFINITION_TYPES
          return DEFINITION_TYPES;
        case 8: // INCLUDE_ATTRIBUTES
          return INCLUDE_ATTRIBUTES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __INCLUDEDEFINITIONS_ISSET_ID = 0;
  private static final int __INCLUDESHEETS_ISSET_ID = 1;
  private static final int __SHEETPAGESIZE_ISSET_ID = 2;
  private static final int __INCLUDEACTIVESHEETCOUNT_ISSET_ID = 3;
  private static final int __INCLUDEARCHIVEDSHEETCOUNT_ISSET_ID = 4;
  private static final int __INCLUDEATTRIBUTES_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.DEFINITION_TITLE,_Fields.DEFINITION_TYPES};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INCLUDE_DEFINITIONS, new org.apache.thrift.meta_data.FieldMetaData("includeDefinitions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.INCLUDE_SHEETS, new org.apache.thrift.meta_data.FieldMetaData("includeSheets", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SHEET_PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("sheetPageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.INCLUDE_ACTIVE_SHEET_COUNT, new org.apache.thrift.meta_data.FieldMetaData("includeActiveSheetCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.INCLUDE_ARCHIVED_SHEET_COUNT, new org.apache.thrift.meta_data.FieldMetaData("includeArchivedSheetCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DEFINITION_TITLE, new org.apache.thrift.meta_data.FieldMetaData("definitionTitle", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEFINITION_TYPES, new org.apache.thrift.meta_data.FieldMetaData("definitionTypes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, DefinitionType.class))));
    tmpMap.put(_Fields.INCLUDE_ATTRIBUTES, new org.apache.thrift.meta_data.FieldMetaData("includeAttributes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DataSheetSetSelectOptions.class, metaDataMap);
  }

  public DataSheetSetSelectOptions() {
    this.includeDefinitions = true;

    this.includeSheets = true;

    this.sheetPageSize = 0;

    this.includeActiveSheetCount = true;

    this.includeArchivedSheetCount = true;

  }

  public DataSheetSetSelectOptions(
    boolean includeDefinitions,
    boolean includeSheets,
    int sheetPageSize,
    boolean includeActiveSheetCount,
    boolean includeArchivedSheetCount,
    boolean includeAttributes)
  {
    this();
    this.includeDefinitions = includeDefinitions;
    setIncludeDefinitionsIsSet(true);
    this.includeSheets = includeSheets;
    setIncludeSheetsIsSet(true);
    this.sheetPageSize = sheetPageSize;
    setSheetPageSizeIsSet(true);
    this.includeActiveSheetCount = includeActiveSheetCount;
    setIncludeActiveSheetCountIsSet(true);
    this.includeArchivedSheetCount = includeArchivedSheetCount;
    setIncludeArchivedSheetCountIsSet(true);
    this.includeAttributes = includeAttributes;
    setIncludeAttributesIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DataSheetSetSelectOptions(DataSheetSetSelectOptions other) {
    __isset_bitfield = other.__isset_bitfield;
    this.includeDefinitions = other.includeDefinitions;
    this.includeSheets = other.includeSheets;
    this.sheetPageSize = other.sheetPageSize;
    this.includeActiveSheetCount = other.includeActiveSheetCount;
    this.includeArchivedSheetCount = other.includeArchivedSheetCount;
    if (other.isSetDefinitionTitle()) {
      this.definitionTitle = other.definitionTitle;
    }
    if (other.isSetDefinitionTypes()) {
      List<DefinitionType> __this__definitionTypes = new ArrayList<DefinitionType>(other.definitionTypes.size());
      for (DefinitionType other_element : other.definitionTypes) {
        __this__definitionTypes.add(other_element);
      }
      this.definitionTypes = __this__definitionTypes;
    }
    this.includeAttributes = other.includeAttributes;
  }

  public DataSheetSetSelectOptions deepCopy() {
    return new DataSheetSetSelectOptions(this);
  }

  @Override
  public void clear() {
    this.includeDefinitions = true;

    this.includeSheets = true;

    this.sheetPageSize = 0;

    this.includeActiveSheetCount = true;

    this.includeArchivedSheetCount = true;

    this.definitionTitle = null;
    this.definitionTypes = null;
    setIncludeAttributesIsSet(false);
    this.includeAttributes = false;
  }

  /**
   * Includes active definition list
   */
  public boolean isIncludeDefinitions() {
    return this.includeDefinitions;
  }

  /**
   * Includes active definition list
   */
  public DataSheetSetSelectOptions setIncludeDefinitions(boolean includeDefinitions) {
    this.includeDefinitions = includeDefinitions;
    setIncludeDefinitionsIsSet(true);
    return this;
  }

  public void unsetIncludeDefinitions() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INCLUDEDEFINITIONS_ISSET_ID);
  }

  /** Returns true if field includeDefinitions is set (has been assigned a value) and false otherwise */
  public boolean isSetIncludeDefinitions() {
    return EncodingUtils.testBit(__isset_bitfield, __INCLUDEDEFINITIONS_ISSET_ID);
  }

  public void setIncludeDefinitionsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INCLUDEDEFINITIONS_ISSET_ID, value);
  }

  /**
   * Includes active data sheet list
   */
  public boolean isIncludeSheets() {
    return this.includeSheets;
  }

  /**
   * Includes active data sheet list
   */
  public DataSheetSetSelectOptions setIncludeSheets(boolean includeSheets) {
    this.includeSheets = includeSheets;
    setIncludeSheetsIsSet(true);
    return this;
  }

  public void unsetIncludeSheets() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INCLUDESHEETS_ISSET_ID);
  }

  /** Returns true if field includeSheets is set (has been assigned a value) and false otherwise */
  public boolean isSetIncludeSheets() {
    return EncodingUtils.testBit(__isset_bitfield, __INCLUDESHEETS_ISSET_ID);
  }

  public void setIncludeSheetsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INCLUDESHEETS_ISSET_ID, value);
  }

  /**
   * Includes only the first X sheets, 0 = all
   */
  public int getSheetPageSize() {
    return this.sheetPageSize;
  }

  /**
   * Includes only the first X sheets, 0 = all
   */
  public DataSheetSetSelectOptions setSheetPageSize(int sheetPageSize) {
    this.sheetPageSize = sheetPageSize;
    setSheetPageSizeIsSet(true);
    return this;
  }

  public void unsetSheetPageSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHEETPAGESIZE_ISSET_ID);
  }

  /** Returns true if field sheetPageSize is set (has been assigned a value) and false otherwise */
  public boolean isSetSheetPageSize() {
    return EncodingUtils.testBit(__isset_bitfield, __SHEETPAGESIZE_ISSET_ID);
  }

  public void setSheetPageSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHEETPAGESIZE_ISSET_ID, value);
  }

  /**
   * Includes active sheet count
   */
  public boolean isIncludeActiveSheetCount() {
    return this.includeActiveSheetCount;
  }

  /**
   * Includes active sheet count
   */
  public DataSheetSetSelectOptions setIncludeActiveSheetCount(boolean includeActiveSheetCount) {
    this.includeActiveSheetCount = includeActiveSheetCount;
    setIncludeActiveSheetCountIsSet(true);
    return this;
  }

  public void unsetIncludeActiveSheetCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INCLUDEACTIVESHEETCOUNT_ISSET_ID);
  }

  /** Returns true if field includeActiveSheetCount is set (has been assigned a value) and false otherwise */
  public boolean isSetIncludeActiveSheetCount() {
    return EncodingUtils.testBit(__isset_bitfield, __INCLUDEACTIVESHEETCOUNT_ISSET_ID);
  }

  public void setIncludeActiveSheetCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INCLUDEACTIVESHEETCOUNT_ISSET_ID, value);
  }

  /**
   * Includes archived sheet count
   */
  public boolean isIncludeArchivedSheetCount() {
    return this.includeArchivedSheetCount;
  }

  /**
   * Includes archived sheet count
   */
  public DataSheetSetSelectOptions setIncludeArchivedSheetCount(boolean includeArchivedSheetCount) {
    this.includeArchivedSheetCount = includeArchivedSheetCount;
    setIncludeArchivedSheetCountIsSet(true);
    return this;
  }

  public void unsetIncludeArchivedSheetCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INCLUDEARCHIVEDSHEETCOUNT_ISSET_ID);
  }

  /** Returns true if field includeArchivedSheetCount is set (has been assigned a value) and false otherwise */
  public boolean isSetIncludeArchivedSheetCount() {
    return EncodingUtils.testBit(__isset_bitfield, __INCLUDEARCHIVEDSHEETCOUNT_ISSET_ID);
  }

  public void setIncludeArchivedSheetCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INCLUDEARCHIVEDSHEETCOUNT_ISSET_ID, value);
  }

  /**
   * Includes only definitions that contain this title
   */
  public String getDefinitionTitle() {
    return this.definitionTitle;
  }

  /**
   * Includes only definitions that contain this title
   */
  public DataSheetSetSelectOptions setDefinitionTitle(String definitionTitle) {
    this.definitionTitle = definitionTitle;
    return this;
  }

  public void unsetDefinitionTitle() {
    this.definitionTitle = null;
  }

  /** Returns true if field definitionTitle is set (has been assigned a value) and false otherwise */
  public boolean isSetDefinitionTitle() {
    return this.definitionTitle != null;
  }

  public void setDefinitionTitleIsSet(boolean value) {
    if (!value) {
      this.definitionTitle = null;
    }
  }

  public int getDefinitionTypesSize() {
    return (this.definitionTypes == null) ? 0 : this.definitionTypes.size();
  }

  public java.util.Iterator<DefinitionType> getDefinitionTypesIterator() {
    return (this.definitionTypes == null) ? null : this.definitionTypes.iterator();
  }

  public void addToDefinitionTypes(DefinitionType elem) {
    if (this.definitionTypes == null) {
      this.definitionTypes = new ArrayList<DefinitionType>();
    }
    this.definitionTypes.add(elem);
  }

  /**
   * Includes only these definition types, if not set, includes all
   */
  public List<DefinitionType> getDefinitionTypes() {
    return this.definitionTypes;
  }

  /**
   * Includes only these definition types, if not set, includes all
   */
  public DataSheetSetSelectOptions setDefinitionTypes(List<DefinitionType> definitionTypes) {
    this.definitionTypes = definitionTypes;
    return this;
  }

  public void unsetDefinitionTypes() {
    this.definitionTypes = null;
  }

  /** Returns true if field definitionTypes is set (has been assigned a value) and false otherwise */
  public boolean isSetDefinitionTypes() {
    return this.definitionTypes != null;
  }

  public void setDefinitionTypesIsSet(boolean value) {
    if (!value) {
      this.definitionTypes = null;
    }
  }

  public boolean isIncludeAttributes() {
    return this.includeAttributes;
  }

  public DataSheetSetSelectOptions setIncludeAttributes(boolean includeAttributes) {
    this.includeAttributes = includeAttributes;
    setIncludeAttributesIsSet(true);
    return this;
  }

  public void unsetIncludeAttributes() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INCLUDEATTRIBUTES_ISSET_ID);
  }

  /** Returns true if field includeAttributes is set (has been assigned a value) and false otherwise */
  public boolean isSetIncludeAttributes() {
    return EncodingUtils.testBit(__isset_bitfield, __INCLUDEATTRIBUTES_ISSET_ID);
  }

  public void setIncludeAttributesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INCLUDEATTRIBUTES_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case INCLUDE_DEFINITIONS:
      if (value == null) {
        unsetIncludeDefinitions();
      } else {
        setIncludeDefinitions((Boolean)value);
      }
      break;

    case INCLUDE_SHEETS:
      if (value == null) {
        unsetIncludeSheets();
      } else {
        setIncludeSheets((Boolean)value);
      }
      break;

    case SHEET_PAGE_SIZE:
      if (value == null) {
        unsetSheetPageSize();
      } else {
        setSheetPageSize((Integer)value);
      }
      break;

    case INCLUDE_ACTIVE_SHEET_COUNT:
      if (value == null) {
        unsetIncludeActiveSheetCount();
      } else {
        setIncludeActiveSheetCount((Boolean)value);
      }
      break;

    case INCLUDE_ARCHIVED_SHEET_COUNT:
      if (value == null) {
        unsetIncludeArchivedSheetCount();
      } else {
        setIncludeArchivedSheetCount((Boolean)value);
      }
      break;

    case DEFINITION_TITLE:
      if (value == null) {
        unsetDefinitionTitle();
      } else {
        setDefinitionTitle((String)value);
      }
      break;

    case DEFINITION_TYPES:
      if (value == null) {
        unsetDefinitionTypes();
      } else {
        setDefinitionTypes((List<DefinitionType>)value);
      }
      break;

    case INCLUDE_ATTRIBUTES:
      if (value == null) {
        unsetIncludeAttributes();
      } else {
        setIncludeAttributes((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case INCLUDE_DEFINITIONS:
      return isIncludeDefinitions();

    case INCLUDE_SHEETS:
      return isIncludeSheets();

    case SHEET_PAGE_SIZE:
      return getSheetPageSize();

    case INCLUDE_ACTIVE_SHEET_COUNT:
      return isIncludeActiveSheetCount();

    case INCLUDE_ARCHIVED_SHEET_COUNT:
      return isIncludeArchivedSheetCount();

    case DEFINITION_TITLE:
      return getDefinitionTitle();

    case DEFINITION_TYPES:
      return getDefinitionTypes();

    case INCLUDE_ATTRIBUTES:
      return isIncludeAttributes();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case INCLUDE_DEFINITIONS:
      return isSetIncludeDefinitions();
    case INCLUDE_SHEETS:
      return isSetIncludeSheets();
    case SHEET_PAGE_SIZE:
      return isSetSheetPageSize();
    case INCLUDE_ACTIVE_SHEET_COUNT:
      return isSetIncludeActiveSheetCount();
    case INCLUDE_ARCHIVED_SHEET_COUNT:
      return isSetIncludeArchivedSheetCount();
    case DEFINITION_TITLE:
      return isSetDefinitionTitle();
    case DEFINITION_TYPES:
      return isSetDefinitionTypes();
    case INCLUDE_ATTRIBUTES:
      return isSetIncludeAttributes();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DataSheetSetSelectOptions)
      return this.equals((DataSheetSetSelectOptions)that);
    return false;
  }

  public boolean equals(DataSheetSetSelectOptions that) {
    if (that == null)
      return false;

    boolean this_present_includeDefinitions = true;
    boolean that_present_includeDefinitions = true;
    if (this_present_includeDefinitions || that_present_includeDefinitions) {
      if (!(this_present_includeDefinitions && that_present_includeDefinitions))
        return false;
      if (this.includeDefinitions != that.includeDefinitions)
        return false;
    }

    boolean this_present_includeSheets = true;
    boolean that_present_includeSheets = true;
    if (this_present_includeSheets || that_present_includeSheets) {
      if (!(this_present_includeSheets && that_present_includeSheets))
        return false;
      if (this.includeSheets != that.includeSheets)
        return false;
    }

    boolean this_present_sheetPageSize = true;
    boolean that_present_sheetPageSize = true;
    if (this_present_sheetPageSize || that_present_sheetPageSize) {
      if (!(this_present_sheetPageSize && that_present_sheetPageSize))
        return false;
      if (this.sheetPageSize != that.sheetPageSize)
        return false;
    }

    boolean this_present_includeActiveSheetCount = true;
    boolean that_present_includeActiveSheetCount = true;
    if (this_present_includeActiveSheetCount || that_present_includeActiveSheetCount) {
      if (!(this_present_includeActiveSheetCount && that_present_includeActiveSheetCount))
        return false;
      if (this.includeActiveSheetCount != that.includeActiveSheetCount)
        return false;
    }

    boolean this_present_includeArchivedSheetCount = true;
    boolean that_present_includeArchivedSheetCount = true;
    if (this_present_includeArchivedSheetCount || that_present_includeArchivedSheetCount) {
      if (!(this_present_includeArchivedSheetCount && that_present_includeArchivedSheetCount))
        return false;
      if (this.includeArchivedSheetCount != that.includeArchivedSheetCount)
        return false;
    }

    boolean this_present_definitionTitle = true && this.isSetDefinitionTitle();
    boolean that_present_definitionTitle = true && that.isSetDefinitionTitle();
    if (this_present_definitionTitle || that_present_definitionTitle) {
      if (!(this_present_definitionTitle && that_present_definitionTitle))
        return false;
      if (!this.definitionTitle.equals(that.definitionTitle))
        return false;
    }

    boolean this_present_definitionTypes = true && this.isSetDefinitionTypes();
    boolean that_present_definitionTypes = true && that.isSetDefinitionTypes();
    if (this_present_definitionTypes || that_present_definitionTypes) {
      if (!(this_present_definitionTypes && that_present_definitionTypes))
        return false;
      if (!this.definitionTypes.equals(that.definitionTypes))
        return false;
    }

    boolean this_present_includeAttributes = true;
    boolean that_present_includeAttributes = true;
    if (this_present_includeAttributes || that_present_includeAttributes) {
      if (!(this_present_includeAttributes && that_present_includeAttributes))
        return false;
      if (this.includeAttributes != that.includeAttributes)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_includeDefinitions = true;
    list.add(present_includeDefinitions);
    if (present_includeDefinitions)
      list.add(includeDefinitions);

    boolean present_includeSheets = true;
    list.add(present_includeSheets);
    if (present_includeSheets)
      list.add(includeSheets);

    boolean present_sheetPageSize = true;
    list.add(present_sheetPageSize);
    if (present_sheetPageSize)
      list.add(sheetPageSize);

    boolean present_includeActiveSheetCount = true;
    list.add(present_includeActiveSheetCount);
    if (present_includeActiveSheetCount)
      list.add(includeActiveSheetCount);

    boolean present_includeArchivedSheetCount = true;
    list.add(present_includeArchivedSheetCount);
    if (present_includeArchivedSheetCount)
      list.add(includeArchivedSheetCount);

    boolean present_definitionTitle = true && (isSetDefinitionTitle());
    list.add(present_definitionTitle);
    if (present_definitionTitle)
      list.add(definitionTitle);

    boolean present_definitionTypes = true && (isSetDefinitionTypes());
    list.add(present_definitionTypes);
    if (present_definitionTypes)
      list.add(definitionTypes);

    boolean present_includeAttributes = true;
    list.add(present_includeAttributes);
    if (present_includeAttributes)
      list.add(includeAttributes);

    return list.hashCode();
  }

  @Override
  public int compareTo(DataSheetSetSelectOptions other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetIncludeDefinitions()).compareTo(other.isSetIncludeDefinitions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIncludeDefinitions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.includeDefinitions, other.includeDefinitions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIncludeSheets()).compareTo(other.isSetIncludeSheets());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIncludeSheets()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.includeSheets, other.includeSheets);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSheetPageSize()).compareTo(other.isSetSheetPageSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSheetPageSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sheetPageSize, other.sheetPageSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIncludeActiveSheetCount()).compareTo(other.isSetIncludeActiveSheetCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIncludeActiveSheetCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.includeActiveSheetCount, other.includeActiveSheetCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIncludeArchivedSheetCount()).compareTo(other.isSetIncludeArchivedSheetCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIncludeArchivedSheetCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.includeArchivedSheetCount, other.includeArchivedSheetCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDefinitionTitle()).compareTo(other.isSetDefinitionTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDefinitionTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.definitionTitle, other.definitionTitle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDefinitionTypes()).compareTo(other.isSetDefinitionTypes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDefinitionTypes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.definitionTypes, other.definitionTypes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIncludeAttributes()).compareTo(other.isSetIncludeAttributes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIncludeAttributes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.includeAttributes, other.includeAttributes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DataSheetSetSelectOptions(");
    boolean first = true;

    sb.append("includeDefinitions:");
    sb.append(this.includeDefinitions);
    first = false;
    if (!first) sb.append(", ");
    sb.append("includeSheets:");
    sb.append(this.includeSheets);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sheetPageSize:");
    sb.append(this.sheetPageSize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("includeActiveSheetCount:");
    sb.append(this.includeActiveSheetCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("includeArchivedSheetCount:");
    sb.append(this.includeArchivedSheetCount);
    first = false;
    if (isSetDefinitionTitle()) {
      if (!first) sb.append(", ");
      sb.append("definitionTitle:");
      if (this.definitionTitle == null) {
        sb.append("null");
      } else {
        sb.append(this.definitionTitle);
      }
      first = false;
    }
    if (isSetDefinitionTypes()) {
      if (!first) sb.append(", ");
      sb.append("definitionTypes:");
      if (this.definitionTypes == null) {
        sb.append("null");
      } else {
        sb.append(this.definitionTypes);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("includeAttributes:");
    sb.append(this.includeAttributes);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DataSheetSetSelectOptionsStandardSchemeFactory implements SchemeFactory {
    public DataSheetSetSelectOptionsStandardScheme getScheme() {
      return new DataSheetSetSelectOptionsStandardScheme();
    }
  }

  private static class DataSheetSetSelectOptionsStandardScheme extends StandardScheme<DataSheetSetSelectOptions> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DataSheetSetSelectOptions struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // INCLUDE_DEFINITIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.includeDefinitions = iprot.readBool();
              struct.setIncludeDefinitionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // INCLUDE_SHEETS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.includeSheets = iprot.readBool();
              struct.setIncludeSheetsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SHEET_PAGE_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sheetPageSize = iprot.readI32();
              struct.setSheetPageSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // INCLUDE_ACTIVE_SHEET_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.includeActiveSheetCount = iprot.readBool();
              struct.setIncludeActiveSheetCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // INCLUDE_ARCHIVED_SHEET_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.includeArchivedSheetCount = iprot.readBool();
              struct.setIncludeArchivedSheetCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DEFINITION_TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.definitionTitle = iprot.readString();
              struct.setDefinitionTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DEFINITION_TYPES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list26 = iprot.readListBegin();
                struct.definitionTypes = new ArrayList<DefinitionType>(_list26.size);
                DefinitionType _elem27;
                for (int _i28 = 0; _i28 < _list26.size; ++_i28)
                {
                  _elem27 = com.wi.director.thrift.v1.datasheet.DefinitionType.findByValue(iprot.readI32());
                  struct.definitionTypes.add(_elem27);
                }
                iprot.readListEnd();
              }
              struct.setDefinitionTypesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // INCLUDE_ATTRIBUTES
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.includeAttributes = iprot.readBool();
              struct.setIncludeAttributesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DataSheetSetSelectOptions struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(INCLUDE_DEFINITIONS_FIELD_DESC);
      oprot.writeBool(struct.includeDefinitions);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INCLUDE_SHEETS_FIELD_DESC);
      oprot.writeBool(struct.includeSheets);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SHEET_PAGE_SIZE_FIELD_DESC);
      oprot.writeI32(struct.sheetPageSize);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INCLUDE_ACTIVE_SHEET_COUNT_FIELD_DESC);
      oprot.writeBool(struct.includeActiveSheetCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INCLUDE_ARCHIVED_SHEET_COUNT_FIELD_DESC);
      oprot.writeBool(struct.includeArchivedSheetCount);
      oprot.writeFieldEnd();
      if (struct.definitionTitle != null) {
        if (struct.isSetDefinitionTitle()) {
          oprot.writeFieldBegin(DEFINITION_TITLE_FIELD_DESC);
          oprot.writeString(struct.definitionTitle);
          oprot.writeFieldEnd();
        }
      }
      if (struct.definitionTypes != null) {
        if (struct.isSetDefinitionTypes()) {
          oprot.writeFieldBegin(DEFINITION_TYPES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.definitionTypes.size()));
            for (DefinitionType _iter29 : struct.definitionTypes)
            {
              oprot.writeI32(_iter29.getValue());
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(INCLUDE_ATTRIBUTES_FIELD_DESC);
      oprot.writeBool(struct.includeAttributes);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

}

