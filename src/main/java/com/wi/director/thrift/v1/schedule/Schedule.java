/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wi.director.thrift.v1.schedule;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class Schedule implements org.apache.thrift.TBase<Schedule, Schedule._Fields>, java.io.Serializable, Cloneable, Comparable<Schedule> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Schedule");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField OWNER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ownerId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SCHEDULE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("scheduleType", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField NUM_RUNS_FIELD_DESC = new org.apache.thrift.protocol.TField("numRuns", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField NUM_FAILURES_FIELD_DESC = new org.apache.thrift.protocol.TField("numFailures", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField LAST_SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("lastSuccess", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField NEXT_RUN_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("nextRunAt", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField RULE_FIELD_DESC = new org.apache.thrift.protocol.TField("rule", org.apache.thrift.protocol.TType.STRUCT, (short)9);
  private static final org.apache.thrift.protocol.TField COMPLETED_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("completedAt", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField PAUSED_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("pausedAt", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("error", org.apache.thrift.protocol.TType.STRING, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ScheduleStandardSchemeFactory());
  }

  public String id; // required
  public String ownerId; // required
  public int scheduleType; // required
  public int numRuns; // required
  public int numFailures; // required
  public String lastSuccess; // required
  public String nextRunAt; // required
  public RecurringRule rule; // optional
  public String completedAt; // required
  public String pausedAt; // required
  public String error; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    OWNER_ID((short)2, "ownerId"),
    SCHEDULE_TYPE((short)3, "scheduleType"),
    NUM_RUNS((short)4, "numRuns"),
    NUM_FAILURES((short)5, "numFailures"),
    LAST_SUCCESS((short)6, "lastSuccess"),
    NEXT_RUN_AT((short)7, "nextRunAt"),
    RULE((short)9, "rule"),
    COMPLETED_AT((short)10, "completedAt"),
    PAUSED_AT((short)11, "pausedAt"),
    ERROR((short)12, "error");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // OWNER_ID
          return OWNER_ID;
        case 3: // SCHEDULE_TYPE
          return SCHEDULE_TYPE;
        case 4: // NUM_RUNS
          return NUM_RUNS;
        case 5: // NUM_FAILURES
          return NUM_FAILURES;
        case 6: // LAST_SUCCESS
          return LAST_SUCCESS;
        case 7: // NEXT_RUN_AT
          return NEXT_RUN_AT;
        case 9: // RULE
          return RULE;
        case 10: // COMPLETED_AT
          return COMPLETED_AT;
        case 11: // PAUSED_AT
          return PAUSED_AT;
        case 12: // ERROR
          return ERROR;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SCHEDULETYPE_ISSET_ID = 0;
  private static final int __NUMRUNS_ISSET_ID = 1;
  private static final int __NUMFAILURES_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.RULE,_Fields.ERROR};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OWNER_ID, new org.apache.thrift.meta_data.FieldMetaData("ownerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SCHEDULE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("scheduleType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUM_RUNS, new org.apache.thrift.meta_data.FieldMetaData("numRuns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUM_FAILURES, new org.apache.thrift.meta_data.FieldMetaData("numFailures", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LAST_SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("lastSuccess", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NEXT_RUN_AT, new org.apache.thrift.meta_data.FieldMetaData("nextRunAt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RULE, new org.apache.thrift.meta_data.FieldMetaData("rule", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RecurringRule.class)));
    tmpMap.put(_Fields.COMPLETED_AT, new org.apache.thrift.meta_data.FieldMetaData("completedAt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAUSED_AT, new org.apache.thrift.meta_data.FieldMetaData("pausedAt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ERROR, new org.apache.thrift.meta_data.FieldMetaData("error", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Schedule.class, metaDataMap);
  }

  public Schedule() {
  }

  public Schedule(
    String id,
    String ownerId,
    int scheduleType,
    int numRuns,
    int numFailures,
    String lastSuccess,
    String nextRunAt,
    String completedAt,
    String pausedAt)
  {
    this();
    this.id = id;
    this.ownerId = ownerId;
    this.scheduleType = scheduleType;
    setScheduleTypeIsSet(true);
    this.numRuns = numRuns;
    setNumRunsIsSet(true);
    this.numFailures = numFailures;
    setNumFailuresIsSet(true);
    this.lastSuccess = lastSuccess;
    this.nextRunAt = nextRunAt;
    this.completedAt = completedAt;
    this.pausedAt = pausedAt;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Schedule(Schedule other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetOwnerId()) {
      this.ownerId = other.ownerId;
    }
    this.scheduleType = other.scheduleType;
    this.numRuns = other.numRuns;
    this.numFailures = other.numFailures;
    if (other.isSetLastSuccess()) {
      this.lastSuccess = other.lastSuccess;
    }
    if (other.isSetNextRunAt()) {
      this.nextRunAt = other.nextRunAt;
    }
    if (other.isSetRule()) {
      this.rule = new RecurringRule(other.rule);
    }
    if (other.isSetCompletedAt()) {
      this.completedAt = other.completedAt;
    }
    if (other.isSetPausedAt()) {
      this.pausedAt = other.pausedAt;
    }
    if (other.isSetError()) {
      this.error = other.error;
    }
  }

  public Schedule deepCopy() {
    return new Schedule(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.ownerId = null;
    setScheduleTypeIsSet(false);
    this.scheduleType = 0;
    setNumRunsIsSet(false);
    this.numRuns = 0;
    setNumFailuresIsSet(false);
    this.numFailures = 0;
    this.lastSuccess = null;
    this.nextRunAt = null;
    this.rule = null;
    this.completedAt = null;
    this.pausedAt = null;
    this.error = null;
  }

  public String getId() {
    return this.id;
  }

  public Schedule setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public String getOwnerId() {
    return this.ownerId;
  }

  public Schedule setOwnerId(String ownerId) {
    this.ownerId = ownerId;
    return this;
  }

  public void unsetOwnerId() {
    this.ownerId = null;
  }

  /** Returns true if field ownerId is set (has been assigned a value) and false otherwise */
  public boolean isSetOwnerId() {
    return this.ownerId != null;
  }

  public void setOwnerIdIsSet(boolean value) {
    if (!value) {
      this.ownerId = null;
    }
  }

  public int getScheduleType() {
    return this.scheduleType;
  }

  public Schedule setScheduleType(int scheduleType) {
    this.scheduleType = scheduleType;
    setScheduleTypeIsSet(true);
    return this;
  }

  public void unsetScheduleType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SCHEDULETYPE_ISSET_ID);
  }

  /** Returns true if field scheduleType is set (has been assigned a value) and false otherwise */
  public boolean isSetScheduleType() {
    return EncodingUtils.testBit(__isset_bitfield, __SCHEDULETYPE_ISSET_ID);
  }

  public void setScheduleTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SCHEDULETYPE_ISSET_ID, value);
  }

  public int getNumRuns() {
    return this.numRuns;
  }

  public Schedule setNumRuns(int numRuns) {
    this.numRuns = numRuns;
    setNumRunsIsSet(true);
    return this;
  }

  public void unsetNumRuns() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMRUNS_ISSET_ID);
  }

  /** Returns true if field numRuns is set (has been assigned a value) and false otherwise */
  public boolean isSetNumRuns() {
    return EncodingUtils.testBit(__isset_bitfield, __NUMRUNS_ISSET_ID);
  }

  public void setNumRunsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMRUNS_ISSET_ID, value);
  }

  public int getNumFailures() {
    return this.numFailures;
  }

  public Schedule setNumFailures(int numFailures) {
    this.numFailures = numFailures;
    setNumFailuresIsSet(true);
    return this;
  }

  public void unsetNumFailures() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMFAILURES_ISSET_ID);
  }

  /** Returns true if field numFailures is set (has been assigned a value) and false otherwise */
  public boolean isSetNumFailures() {
    return EncodingUtils.testBit(__isset_bitfield, __NUMFAILURES_ISSET_ID);
  }

  public void setNumFailuresIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMFAILURES_ISSET_ID, value);
  }

  public String getLastSuccess() {
    return this.lastSuccess;
  }

  public Schedule setLastSuccess(String lastSuccess) {
    this.lastSuccess = lastSuccess;
    return this;
  }

  public void unsetLastSuccess() {
    this.lastSuccess = null;
  }

  /** Returns true if field lastSuccess is set (has been assigned a value) and false otherwise */
  public boolean isSetLastSuccess() {
    return this.lastSuccess != null;
  }

  public void setLastSuccessIsSet(boolean value) {
    if (!value) {
      this.lastSuccess = null;
    }
  }

  public String getNextRunAt() {
    return this.nextRunAt;
  }

  public Schedule setNextRunAt(String nextRunAt) {
    this.nextRunAt = nextRunAt;
    return this;
  }

  public void unsetNextRunAt() {
    this.nextRunAt = null;
  }

  /** Returns true if field nextRunAt is set (has been assigned a value) and false otherwise */
  public boolean isSetNextRunAt() {
    return this.nextRunAt != null;
  }

  public void setNextRunAtIsSet(boolean value) {
    if (!value) {
      this.nextRunAt = null;
    }
  }

  public RecurringRule getRule() {
    return this.rule;
  }

  public Schedule setRule(RecurringRule rule) {
    this.rule = rule;
    return this;
  }

  public void unsetRule() {
    this.rule = null;
  }

  /** Returns true if field rule is set (has been assigned a value) and false otherwise */
  public boolean isSetRule() {
    return this.rule != null;
  }

  public void setRuleIsSet(boolean value) {
    if (!value) {
      this.rule = null;
    }
  }

  public String getCompletedAt() {
    return this.completedAt;
  }

  public Schedule setCompletedAt(String completedAt) {
    this.completedAt = completedAt;
    return this;
  }

  public void unsetCompletedAt() {
    this.completedAt = null;
  }

  /** Returns true if field completedAt is set (has been assigned a value) and false otherwise */
  public boolean isSetCompletedAt() {
    return this.completedAt != null;
  }

  public void setCompletedAtIsSet(boolean value) {
    if (!value) {
      this.completedAt = null;
    }
  }

  public String getPausedAt() {
    return this.pausedAt;
  }

  public Schedule setPausedAt(String pausedAt) {
    this.pausedAt = pausedAt;
    return this;
  }

  public void unsetPausedAt() {
    this.pausedAt = null;
  }

  /** Returns true if field pausedAt is set (has been assigned a value) and false otherwise */
  public boolean isSetPausedAt() {
    return this.pausedAt != null;
  }

  public void setPausedAtIsSet(boolean value) {
    if (!value) {
      this.pausedAt = null;
    }
  }

  public String getError() {
    return this.error;
  }

  public Schedule setError(String error) {
    this.error = error;
    return this;
  }

  public void unsetError() {
    this.error = null;
  }

  /** Returns true if field error is set (has been assigned a value) and false otherwise */
  public boolean isSetError() {
    return this.error != null;
  }

  public void setErrorIsSet(boolean value) {
    if (!value) {
      this.error = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case OWNER_ID:
      if (value == null) {
        unsetOwnerId();
      } else {
        setOwnerId((String)value);
      }
      break;

    case SCHEDULE_TYPE:
      if (value == null) {
        unsetScheduleType();
      } else {
        setScheduleType((Integer)value);
      }
      break;

    case NUM_RUNS:
      if (value == null) {
        unsetNumRuns();
      } else {
        setNumRuns((Integer)value);
      }
      break;

    case NUM_FAILURES:
      if (value == null) {
        unsetNumFailures();
      } else {
        setNumFailures((Integer)value);
      }
      break;

    case LAST_SUCCESS:
      if (value == null) {
        unsetLastSuccess();
      } else {
        setLastSuccess((String)value);
      }
      break;

    case NEXT_RUN_AT:
      if (value == null) {
        unsetNextRunAt();
      } else {
        setNextRunAt((String)value);
      }
      break;

    case RULE:
      if (value == null) {
        unsetRule();
      } else {
        setRule((RecurringRule)value);
      }
      break;

    case COMPLETED_AT:
      if (value == null) {
        unsetCompletedAt();
      } else {
        setCompletedAt((String)value);
      }
      break;

    case PAUSED_AT:
      if (value == null) {
        unsetPausedAt();
      } else {
        setPausedAt((String)value);
      }
      break;

    case ERROR:
      if (value == null) {
        unsetError();
      } else {
        setError((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case OWNER_ID:
      return getOwnerId();

    case SCHEDULE_TYPE:
      return getScheduleType();

    case NUM_RUNS:
      return getNumRuns();

    case NUM_FAILURES:
      return getNumFailures();

    case LAST_SUCCESS:
      return getLastSuccess();

    case NEXT_RUN_AT:
      return getNextRunAt();

    case RULE:
      return getRule();

    case COMPLETED_AT:
      return getCompletedAt();

    case PAUSED_AT:
      return getPausedAt();

    case ERROR:
      return getError();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case OWNER_ID:
      return isSetOwnerId();
    case SCHEDULE_TYPE:
      return isSetScheduleType();
    case NUM_RUNS:
      return isSetNumRuns();
    case NUM_FAILURES:
      return isSetNumFailures();
    case LAST_SUCCESS:
      return isSetLastSuccess();
    case NEXT_RUN_AT:
      return isSetNextRunAt();
    case RULE:
      return isSetRule();
    case COMPLETED_AT:
      return isSetCompletedAt();
    case PAUSED_AT:
      return isSetPausedAt();
    case ERROR:
      return isSetError();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Schedule)
      return this.equals((Schedule)that);
    return false;
  }

  public boolean equals(Schedule that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_ownerId = true && this.isSetOwnerId();
    boolean that_present_ownerId = true && that.isSetOwnerId();
    if (this_present_ownerId || that_present_ownerId) {
      if (!(this_present_ownerId && that_present_ownerId))
        return false;
      if (!this.ownerId.equals(that.ownerId))
        return false;
    }

    boolean this_present_scheduleType = true;
    boolean that_present_scheduleType = true;
    if (this_present_scheduleType || that_present_scheduleType) {
      if (!(this_present_scheduleType && that_present_scheduleType))
        return false;
      if (this.scheduleType != that.scheduleType)
        return false;
    }

    boolean this_present_numRuns = true;
    boolean that_present_numRuns = true;
    if (this_present_numRuns || that_present_numRuns) {
      if (!(this_present_numRuns && that_present_numRuns))
        return false;
      if (this.numRuns != that.numRuns)
        return false;
    }

    boolean this_present_numFailures = true;
    boolean that_present_numFailures = true;
    if (this_present_numFailures || that_present_numFailures) {
      if (!(this_present_numFailures && that_present_numFailures))
        return false;
      if (this.numFailures != that.numFailures)
        return false;
    }

    boolean this_present_lastSuccess = true && this.isSetLastSuccess();
    boolean that_present_lastSuccess = true && that.isSetLastSuccess();
    if (this_present_lastSuccess || that_present_lastSuccess) {
      if (!(this_present_lastSuccess && that_present_lastSuccess))
        return false;
      if (!this.lastSuccess.equals(that.lastSuccess))
        return false;
    }

    boolean this_present_nextRunAt = true && this.isSetNextRunAt();
    boolean that_present_nextRunAt = true && that.isSetNextRunAt();
    if (this_present_nextRunAt || that_present_nextRunAt) {
      if (!(this_present_nextRunAt && that_present_nextRunAt))
        return false;
      if (!this.nextRunAt.equals(that.nextRunAt))
        return false;
    }

    boolean this_present_rule = true && this.isSetRule();
    boolean that_present_rule = true && that.isSetRule();
    if (this_present_rule || that_present_rule) {
      if (!(this_present_rule && that_present_rule))
        return false;
      if (!this.rule.equals(that.rule))
        return false;
    }

    boolean this_present_completedAt = true && this.isSetCompletedAt();
    boolean that_present_completedAt = true && that.isSetCompletedAt();
    if (this_present_completedAt || that_present_completedAt) {
      if (!(this_present_completedAt && that_present_completedAt))
        return false;
      if (!this.completedAt.equals(that.completedAt))
        return false;
    }

    boolean this_present_pausedAt = true && this.isSetPausedAt();
    boolean that_present_pausedAt = true && that.isSetPausedAt();
    if (this_present_pausedAt || that_present_pausedAt) {
      if (!(this_present_pausedAt && that_present_pausedAt))
        return false;
      if (!this.pausedAt.equals(that.pausedAt))
        return false;
    }

    boolean this_present_error = true && this.isSetError();
    boolean that_present_error = true && that.isSetError();
    if (this_present_error || that_present_error) {
      if (!(this_present_error && that_present_error))
        return false;
      if (!this.error.equals(that.error))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_ownerId = true && (isSetOwnerId());
    list.add(present_ownerId);
    if (present_ownerId)
      list.add(ownerId);

    boolean present_scheduleType = true;
    list.add(present_scheduleType);
    if (present_scheduleType)
      list.add(scheduleType);

    boolean present_numRuns = true;
    list.add(present_numRuns);
    if (present_numRuns)
      list.add(numRuns);

    boolean present_numFailures = true;
    list.add(present_numFailures);
    if (present_numFailures)
      list.add(numFailures);

    boolean present_lastSuccess = true && (isSetLastSuccess());
    list.add(present_lastSuccess);
    if (present_lastSuccess)
      list.add(lastSuccess);

    boolean present_nextRunAt = true && (isSetNextRunAt());
    list.add(present_nextRunAt);
    if (present_nextRunAt)
      list.add(nextRunAt);

    boolean present_rule = true && (isSetRule());
    list.add(present_rule);
    if (present_rule)
      list.add(rule);

    boolean present_completedAt = true && (isSetCompletedAt());
    list.add(present_completedAt);
    if (present_completedAt)
      list.add(completedAt);

    boolean present_pausedAt = true && (isSetPausedAt());
    list.add(present_pausedAt);
    if (present_pausedAt)
      list.add(pausedAt);

    boolean present_error = true && (isSetError());
    list.add(present_error);
    if (present_error)
      list.add(error);

    return list.hashCode();
  }

  @Override
  public int compareTo(Schedule other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOwnerId()).compareTo(other.isSetOwnerId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOwnerId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ownerId, other.ownerId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetScheduleType()).compareTo(other.isSetScheduleType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScheduleType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scheduleType, other.scheduleType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNumRuns()).compareTo(other.isSetNumRuns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumRuns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numRuns, other.numRuns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNumFailures()).compareTo(other.isSetNumFailures());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumFailures()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numFailures, other.numFailures);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastSuccess()).compareTo(other.isSetLastSuccess());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastSuccess()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastSuccess, other.lastSuccess);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNextRunAt()).compareTo(other.isSetNextRunAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNextRunAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nextRunAt, other.nextRunAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRule()).compareTo(other.isSetRule());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRule()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rule, other.rule);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompletedAt()).compareTo(other.isSetCompletedAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompletedAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.completedAt, other.completedAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPausedAt()).compareTo(other.isSetPausedAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPausedAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pausedAt, other.pausedAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetError()).compareTo(other.isSetError());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetError()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error, other.error);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Schedule(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ownerId:");
    if (this.ownerId == null) {
      sb.append("null");
    } else {
      sb.append(this.ownerId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("scheduleType:");
    sb.append(this.scheduleType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("numRuns:");
    sb.append(this.numRuns);
    first = false;
    if (!first) sb.append(", ");
    sb.append("numFailures:");
    sb.append(this.numFailures);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastSuccess:");
    if (this.lastSuccess == null) {
      sb.append("null");
    } else {
      sb.append(this.lastSuccess);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nextRunAt:");
    if (this.nextRunAt == null) {
      sb.append("null");
    } else {
      sb.append(this.nextRunAt);
    }
    first = false;
    if (isSetRule()) {
      if (!first) sb.append(", ");
      sb.append("rule:");
      if (this.rule == null) {
        sb.append("null");
      } else {
        sb.append(this.rule);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("completedAt:");
    if (this.completedAt == null) {
      sb.append("null");
    } else {
      sb.append(this.completedAt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pausedAt:");
    if (this.pausedAt == null) {
      sb.append("null");
    } else {
      sb.append(this.pausedAt);
    }
    first = false;
    if (isSetError()) {
      if (!first) sb.append(", ");
      sb.append("error:");
      if (this.error == null) {
        sb.append("null");
      } else {
        sb.append(this.error);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (rule != null) {
      rule.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ScheduleStandardSchemeFactory implements SchemeFactory {
    public ScheduleStandardScheme getScheme() {
      return new ScheduleStandardScheme();
    }
  }

  private static class ScheduleStandardScheme extends StandardScheme<Schedule> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Schedule struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // OWNER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ownerId = iprot.readString();
              struct.setOwnerIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SCHEDULE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.scheduleType = iprot.readI32();
              struct.setScheduleTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NUM_RUNS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.numRuns = iprot.readI32();
              struct.setNumRunsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // NUM_FAILURES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.numFailures = iprot.readI32();
              struct.setNumFailuresIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // LAST_SUCCESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastSuccess = iprot.readString();
              struct.setLastSuccessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // NEXT_RUN_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nextRunAt = iprot.readString();
              struct.setNextRunAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // RULE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.rule = new RecurringRule();
              struct.rule.read(iprot);
              struct.setRuleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // COMPLETED_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.completedAt = iprot.readString();
              struct.setCompletedAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // PAUSED_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pausedAt = iprot.readString();
              struct.setPausedAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // ERROR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.error = iprot.readString();
              struct.setErrorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Schedule struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.ownerId != null) {
        oprot.writeFieldBegin(OWNER_ID_FIELD_DESC);
        oprot.writeString(struct.ownerId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SCHEDULE_TYPE_FIELD_DESC);
      oprot.writeI32(struct.scheduleType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUM_RUNS_FIELD_DESC);
      oprot.writeI32(struct.numRuns);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUM_FAILURES_FIELD_DESC);
      oprot.writeI32(struct.numFailures);
      oprot.writeFieldEnd();
      if (struct.lastSuccess != null) {
        oprot.writeFieldBegin(LAST_SUCCESS_FIELD_DESC);
        oprot.writeString(struct.lastSuccess);
        oprot.writeFieldEnd();
      }
      if (struct.nextRunAt != null) {
        oprot.writeFieldBegin(NEXT_RUN_AT_FIELD_DESC);
        oprot.writeString(struct.nextRunAt);
        oprot.writeFieldEnd();
      }
      if (struct.rule != null) {
        if (struct.isSetRule()) {
          oprot.writeFieldBegin(RULE_FIELD_DESC);
          struct.rule.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.completedAt != null) {
        oprot.writeFieldBegin(COMPLETED_AT_FIELD_DESC);
        oprot.writeString(struct.completedAt);
        oprot.writeFieldEnd();
      }
      if (struct.pausedAt != null) {
        oprot.writeFieldBegin(PAUSED_AT_FIELD_DESC);
        oprot.writeString(struct.pausedAt);
        oprot.writeFieldEnd();
      }
      if (struct.error != null) {
        if (struct.isSetError()) {
          oprot.writeFieldBegin(ERROR_FIELD_DESC);
          oprot.writeString(struct.error);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

}

