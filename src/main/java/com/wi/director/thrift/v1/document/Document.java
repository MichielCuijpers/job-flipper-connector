/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wi.director.thrift.v1.document;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * A document represents any type of file that can be associated with jobs or job templates.
 */
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class Document implements org.apache.thrift.TBase<Document, Document._Fields>, java.io.Serializable, Cloneable, Comparable<Document> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Document");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField MIME_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("mimeType", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("size", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField TEAM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("teamId", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField IS_PENDING_FIELD_DESC = new org.apache.thrift.protocol.TField("isPending", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField MD5_CHECKSUM_FIELD_DESC = new org.apache.thrift.protocol.TField("md5Checksum", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField CAPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("caption", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField THUMBNAIL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("thumbnailId", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField LATEST_CHANGE_FIELD_DESC = new org.apache.thrift.protocol.TField("latestChange", org.apache.thrift.protocol.TType.STRUCT, (short)200);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DocumentStandardSchemeFactory());
  }

  public String id; // required
  public String mimeType; // required
  public String name; // required
  public long size; // required
  public String teamId; // optional
  public boolean isPending; // required
  public String md5Checksum; // required
  public String caption; // optional
  public String thumbnailId; // optional
  public com.wi.director.thrift.v1.diff.Change latestChange; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    MIME_TYPE((short)2, "mimeType"),
    NAME((short)3, "name"),
    SIZE((short)4, "size"),
    TEAM_ID((short)5, "teamId"),
    IS_PENDING((short)6, "isPending"),
    MD5_CHECKSUM((short)7, "md5Checksum"),
    CAPTION((short)8, "caption"),
    THUMBNAIL_ID((short)9, "thumbnailId"),
    LATEST_CHANGE((short)200, "latestChange");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // MIME_TYPE
          return MIME_TYPE;
        case 3: // NAME
          return NAME;
        case 4: // SIZE
          return SIZE;
        case 5: // TEAM_ID
          return TEAM_ID;
        case 6: // IS_PENDING
          return IS_PENDING;
        case 7: // MD5_CHECKSUM
          return MD5_CHECKSUM;
        case 8: // CAPTION
          return CAPTION;
        case 9: // THUMBNAIL_ID
          return THUMBNAIL_ID;
        case 200: // LATEST_CHANGE
          return LATEST_CHANGE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SIZE_ISSET_ID = 0;
  private static final int __ISPENDING_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.TEAM_ID,_Fields.CAPTION,_Fields.THUMBNAIL_ID,_Fields.LATEST_CHANGE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MIME_TYPE, new org.apache.thrift.meta_data.FieldMetaData("mimeType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SIZE, new org.apache.thrift.meta_data.FieldMetaData("size", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TEAM_ID, new org.apache.thrift.meta_data.FieldMetaData("teamId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_PENDING, new org.apache.thrift.meta_data.FieldMetaData("isPending", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.MD5_CHECKSUM, new org.apache.thrift.meta_data.FieldMetaData("md5Checksum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CAPTION, new org.apache.thrift.meta_data.FieldMetaData("caption", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.THUMBNAIL_ID, new org.apache.thrift.meta_data.FieldMetaData("thumbnailId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LATEST_CHANGE, new org.apache.thrift.meta_data.FieldMetaData("latestChange", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.diff.Change.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Document.class, metaDataMap);
  }

  public Document() {
    this.isPending = false;

  }

  public Document(
    String id,
    String mimeType,
    String name,
    long size,
    boolean isPending,
    String md5Checksum)
  {
    this();
    this.id = id;
    this.mimeType = mimeType;
    this.name = name;
    this.size = size;
    setSizeIsSet(true);
    this.isPending = isPending;
    setIsPendingIsSet(true);
    this.md5Checksum = md5Checksum;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Document(Document other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetMimeType()) {
      this.mimeType = other.mimeType;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    this.size = other.size;
    if (other.isSetTeamId()) {
      this.teamId = other.teamId;
    }
    this.isPending = other.isPending;
    if (other.isSetMd5Checksum()) {
      this.md5Checksum = other.md5Checksum;
    }
    if (other.isSetCaption()) {
      this.caption = other.caption;
    }
    if (other.isSetThumbnailId()) {
      this.thumbnailId = other.thumbnailId;
    }
    if (other.isSetLatestChange()) {
      this.latestChange = new com.wi.director.thrift.v1.diff.Change(other.latestChange);
    }
  }

  public Document deepCopy() {
    return new Document(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.mimeType = null;
    this.name = null;
    setSizeIsSet(false);
    this.size = 0;
    this.teamId = null;
    this.isPending = false;

    this.md5Checksum = null;
    this.caption = null;
    this.thumbnailId = null;
    this.latestChange = null;
  }

  public String getId() {
    return this.id;
  }

  public Document setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public String getMimeType() {
    return this.mimeType;
  }

  public Document setMimeType(String mimeType) {
    this.mimeType = mimeType;
    return this;
  }

  public void unsetMimeType() {
    this.mimeType = null;
  }

  /** Returns true if field mimeType is set (has been assigned a value) and false otherwise */
  public boolean isSetMimeType() {
    return this.mimeType != null;
  }

  public void setMimeTypeIsSet(boolean value) {
    if (!value) {
      this.mimeType = null;
    }
  }

  public String getName() {
    return this.name;
  }

  public Document setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public long getSize() {
    return this.size;
  }

  public Document setSize(long size) {
    this.size = size;
    setSizeIsSet(true);
    return this;
  }

  public void unsetSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SIZE_ISSET_ID);
  }

  /** Returns true if field size is set (has been assigned a value) and false otherwise */
  public boolean isSetSize() {
    return EncodingUtils.testBit(__isset_bitfield, __SIZE_ISSET_ID);
  }

  public void setSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SIZE_ISSET_ID, value);
  }

  public String getTeamId() {
    return this.teamId;
  }

  public Document setTeamId(String teamId) {
    this.teamId = teamId;
    return this;
  }

  public void unsetTeamId() {
    this.teamId = null;
  }

  /** Returns true if field teamId is set (has been assigned a value) and false otherwise */
  public boolean isSetTeamId() {
    return this.teamId != null;
  }

  public void setTeamIdIsSet(boolean value) {
    if (!value) {
      this.teamId = null;
    }
  }

  public boolean isIsPending() {
    return this.isPending;
  }

  public Document setIsPending(boolean isPending) {
    this.isPending = isPending;
    setIsPendingIsSet(true);
    return this;
  }

  public void unsetIsPending() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISPENDING_ISSET_ID);
  }

  /** Returns true if field isPending is set (has been assigned a value) and false otherwise */
  public boolean isSetIsPending() {
    return EncodingUtils.testBit(__isset_bitfield, __ISPENDING_ISSET_ID);
  }

  public void setIsPendingIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISPENDING_ISSET_ID, value);
  }

  public String getMd5Checksum() {
    return this.md5Checksum;
  }

  public Document setMd5Checksum(String md5Checksum) {
    this.md5Checksum = md5Checksum;
    return this;
  }

  public void unsetMd5Checksum() {
    this.md5Checksum = null;
  }

  /** Returns true if field md5Checksum is set (has been assigned a value) and false otherwise */
  public boolean isSetMd5Checksum() {
    return this.md5Checksum != null;
  }

  public void setMd5ChecksumIsSet(boolean value) {
    if (!value) {
      this.md5Checksum = null;
    }
  }

  public String getCaption() {
    return this.caption;
  }

  public Document setCaption(String caption) {
    this.caption = caption;
    return this;
  }

  public void unsetCaption() {
    this.caption = null;
  }

  /** Returns true if field caption is set (has been assigned a value) and false otherwise */
  public boolean isSetCaption() {
    return this.caption != null;
  }

  public void setCaptionIsSet(boolean value) {
    if (!value) {
      this.caption = null;
    }
  }

  public String getThumbnailId() {
    return this.thumbnailId;
  }

  public Document setThumbnailId(String thumbnailId) {
    this.thumbnailId = thumbnailId;
    return this;
  }

  public void unsetThumbnailId() {
    this.thumbnailId = null;
  }

  /** Returns true if field thumbnailId is set (has been assigned a value) and false otherwise */
  public boolean isSetThumbnailId() {
    return this.thumbnailId != null;
  }

  public void setThumbnailIdIsSet(boolean value) {
    if (!value) {
      this.thumbnailId = null;
    }
  }

  public com.wi.director.thrift.v1.diff.Change getLatestChange() {
    return this.latestChange;
  }

  public Document setLatestChange(com.wi.director.thrift.v1.diff.Change latestChange) {
    this.latestChange = latestChange;
    return this;
  }

  public void unsetLatestChange() {
    this.latestChange = null;
  }

  /** Returns true if field latestChange is set (has been assigned a value) and false otherwise */
  public boolean isSetLatestChange() {
    return this.latestChange != null;
  }

  public void setLatestChangeIsSet(boolean value) {
    if (!value) {
      this.latestChange = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case MIME_TYPE:
      if (value == null) {
        unsetMimeType();
      } else {
        setMimeType((String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case SIZE:
      if (value == null) {
        unsetSize();
      } else {
        setSize((Long)value);
      }
      break;

    case TEAM_ID:
      if (value == null) {
        unsetTeamId();
      } else {
        setTeamId((String)value);
      }
      break;

    case IS_PENDING:
      if (value == null) {
        unsetIsPending();
      } else {
        setIsPending((Boolean)value);
      }
      break;

    case MD5_CHECKSUM:
      if (value == null) {
        unsetMd5Checksum();
      } else {
        setMd5Checksum((String)value);
      }
      break;

    case CAPTION:
      if (value == null) {
        unsetCaption();
      } else {
        setCaption((String)value);
      }
      break;

    case THUMBNAIL_ID:
      if (value == null) {
        unsetThumbnailId();
      } else {
        setThumbnailId((String)value);
      }
      break;

    case LATEST_CHANGE:
      if (value == null) {
        unsetLatestChange();
      } else {
        setLatestChange((com.wi.director.thrift.v1.diff.Change)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case MIME_TYPE:
      return getMimeType();

    case NAME:
      return getName();

    case SIZE:
      return getSize();

    case TEAM_ID:
      return getTeamId();

    case IS_PENDING:
      return isIsPending();

    case MD5_CHECKSUM:
      return getMd5Checksum();

    case CAPTION:
      return getCaption();

    case THUMBNAIL_ID:
      return getThumbnailId();

    case LATEST_CHANGE:
      return getLatestChange();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case MIME_TYPE:
      return isSetMimeType();
    case NAME:
      return isSetName();
    case SIZE:
      return isSetSize();
    case TEAM_ID:
      return isSetTeamId();
    case IS_PENDING:
      return isSetIsPending();
    case MD5_CHECKSUM:
      return isSetMd5Checksum();
    case CAPTION:
      return isSetCaption();
    case THUMBNAIL_ID:
      return isSetThumbnailId();
    case LATEST_CHANGE:
      return isSetLatestChange();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Document)
      return this.equals((Document)that);
    return false;
  }

  public boolean equals(Document that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_mimeType = true && this.isSetMimeType();
    boolean that_present_mimeType = true && that.isSetMimeType();
    if (this_present_mimeType || that_present_mimeType) {
      if (!(this_present_mimeType && that_present_mimeType))
        return false;
      if (!this.mimeType.equals(that.mimeType))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_size = true;
    boolean that_present_size = true;
    if (this_present_size || that_present_size) {
      if (!(this_present_size && that_present_size))
        return false;
      if (this.size != that.size)
        return false;
    }

    boolean this_present_teamId = true && this.isSetTeamId();
    boolean that_present_teamId = true && that.isSetTeamId();
    if (this_present_teamId || that_present_teamId) {
      if (!(this_present_teamId && that_present_teamId))
        return false;
      if (!this.teamId.equals(that.teamId))
        return false;
    }

    boolean this_present_isPending = true;
    boolean that_present_isPending = true;
    if (this_present_isPending || that_present_isPending) {
      if (!(this_present_isPending && that_present_isPending))
        return false;
      if (this.isPending != that.isPending)
        return false;
    }

    boolean this_present_md5Checksum = true && this.isSetMd5Checksum();
    boolean that_present_md5Checksum = true && that.isSetMd5Checksum();
    if (this_present_md5Checksum || that_present_md5Checksum) {
      if (!(this_present_md5Checksum && that_present_md5Checksum))
        return false;
      if (!this.md5Checksum.equals(that.md5Checksum))
        return false;
    }

    boolean this_present_caption = true && this.isSetCaption();
    boolean that_present_caption = true && that.isSetCaption();
    if (this_present_caption || that_present_caption) {
      if (!(this_present_caption && that_present_caption))
        return false;
      if (!this.caption.equals(that.caption))
        return false;
    }

    boolean this_present_thumbnailId = true && this.isSetThumbnailId();
    boolean that_present_thumbnailId = true && that.isSetThumbnailId();
    if (this_present_thumbnailId || that_present_thumbnailId) {
      if (!(this_present_thumbnailId && that_present_thumbnailId))
        return false;
      if (!this.thumbnailId.equals(that.thumbnailId))
        return false;
    }

    boolean this_present_latestChange = true && this.isSetLatestChange();
    boolean that_present_latestChange = true && that.isSetLatestChange();
    if (this_present_latestChange || that_present_latestChange) {
      if (!(this_present_latestChange && that_present_latestChange))
        return false;
      if (!this.latestChange.equals(that.latestChange))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_mimeType = true && (isSetMimeType());
    list.add(present_mimeType);
    if (present_mimeType)
      list.add(mimeType);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_size = true;
    list.add(present_size);
    if (present_size)
      list.add(size);

    boolean present_teamId = true && (isSetTeamId());
    list.add(present_teamId);
    if (present_teamId)
      list.add(teamId);

    boolean present_isPending = true;
    list.add(present_isPending);
    if (present_isPending)
      list.add(isPending);

    boolean present_md5Checksum = true && (isSetMd5Checksum());
    list.add(present_md5Checksum);
    if (present_md5Checksum)
      list.add(md5Checksum);

    boolean present_caption = true && (isSetCaption());
    list.add(present_caption);
    if (present_caption)
      list.add(caption);

    boolean present_thumbnailId = true && (isSetThumbnailId());
    list.add(present_thumbnailId);
    if (present_thumbnailId)
      list.add(thumbnailId);

    boolean present_latestChange = true && (isSetLatestChange());
    list.add(present_latestChange);
    if (present_latestChange)
      list.add(latestChange);

    return list.hashCode();
  }

  @Override
  public int compareTo(Document other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMimeType()).compareTo(other.isSetMimeType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMimeType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mimeType, other.mimeType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSize()).compareTo(other.isSetSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.size, other.size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTeamId()).compareTo(other.isSetTeamId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeamId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teamId, other.teamId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsPending()).compareTo(other.isSetIsPending());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsPending()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isPending, other.isPending);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMd5Checksum()).compareTo(other.isSetMd5Checksum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMd5Checksum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.md5Checksum, other.md5Checksum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCaption()).compareTo(other.isSetCaption());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCaption()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caption, other.caption);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetThumbnailId()).compareTo(other.isSetThumbnailId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThumbnailId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.thumbnailId, other.thumbnailId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLatestChange()).compareTo(other.isSetLatestChange());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLatestChange()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.latestChange, other.latestChange);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Document(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mimeType:");
    if (this.mimeType == null) {
      sb.append("null");
    } else {
      sb.append(this.mimeType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("size:");
    sb.append(this.size);
    first = false;
    if (isSetTeamId()) {
      if (!first) sb.append(", ");
      sb.append("teamId:");
      if (this.teamId == null) {
        sb.append("null");
      } else {
        sb.append(this.teamId);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("isPending:");
    sb.append(this.isPending);
    first = false;
    if (!first) sb.append(", ");
    sb.append("md5Checksum:");
    if (this.md5Checksum == null) {
      sb.append("null");
    } else {
      sb.append(this.md5Checksum);
    }
    first = false;
    if (isSetCaption()) {
      if (!first) sb.append(", ");
      sb.append("caption:");
      if (this.caption == null) {
        sb.append("null");
      } else {
        sb.append(this.caption);
      }
      first = false;
    }
    if (isSetThumbnailId()) {
      if (!first) sb.append(", ");
      sb.append("thumbnailId:");
      if (this.thumbnailId == null) {
        sb.append("null");
      } else {
        sb.append(this.thumbnailId);
      }
      first = false;
    }
    if (isSetLatestChange()) {
      if (!first) sb.append(", ");
      sb.append("latestChange:");
      if (this.latestChange == null) {
        sb.append("null");
      } else {
        sb.append(this.latestChange);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (latestChange != null) {
      latestChange.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DocumentStandardSchemeFactory implements SchemeFactory {
    public DocumentStandardScheme getScheme() {
      return new DocumentStandardScheme();
    }
  }

  private static class DocumentStandardScheme extends StandardScheme<Document> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Document struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MIME_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mimeType = iprot.readString();
              struct.setMimeTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.size = iprot.readI64();
              struct.setSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TEAM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.teamId = iprot.readString();
              struct.setTeamIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // IS_PENDING
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isPending = iprot.readBool();
              struct.setIsPendingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // MD5_CHECKSUM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.md5Checksum = iprot.readString();
              struct.setMd5ChecksumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CAPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.caption = iprot.readString();
              struct.setCaptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // THUMBNAIL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.thumbnailId = iprot.readString();
              struct.setThumbnailIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 200: // LATEST_CHANGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.latestChange = new com.wi.director.thrift.v1.diff.Change();
              struct.latestChange.read(iprot);
              struct.setLatestChangeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Document struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.mimeType != null) {
        oprot.writeFieldBegin(MIME_TYPE_FIELD_DESC);
        oprot.writeString(struct.mimeType);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SIZE_FIELD_DESC);
      oprot.writeI64(struct.size);
      oprot.writeFieldEnd();
      if (struct.teamId != null) {
        if (struct.isSetTeamId()) {
          oprot.writeFieldBegin(TEAM_ID_FIELD_DESC);
          oprot.writeString(struct.teamId);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(IS_PENDING_FIELD_DESC);
      oprot.writeBool(struct.isPending);
      oprot.writeFieldEnd();
      if (struct.md5Checksum != null) {
        oprot.writeFieldBegin(MD5_CHECKSUM_FIELD_DESC);
        oprot.writeString(struct.md5Checksum);
        oprot.writeFieldEnd();
      }
      if (struct.caption != null) {
        if (struct.isSetCaption()) {
          oprot.writeFieldBegin(CAPTION_FIELD_DESC);
          oprot.writeString(struct.caption);
          oprot.writeFieldEnd();
        }
      }
      if (struct.thumbnailId != null) {
        if (struct.isSetThumbnailId()) {
          oprot.writeFieldBegin(THUMBNAIL_ID_FIELD_DESC);
          oprot.writeString(struct.thumbnailId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.latestChange != null) {
        if (struct.isSetLatestChange()) {
          oprot.writeFieldBegin(LATEST_CHANGE_FIELD_DESC);
          struct.latestChange.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

}

