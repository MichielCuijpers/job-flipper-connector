/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wi.director.thrift.v1.jobfilter;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class JobFilterIssueOpts implements org.apache.thrift.TBase<JobFilterIssueOpts, JobFilterIssueOpts._Fields>, java.io.Serializable, Cloneable, Comparable<JobFilterIssueOpts> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("JobFilterIssueOpts");

  private static final org.apache.thrift.protocol.TField OPTS_FIELD_DESC = new org.apache.thrift.protocol.TField("opts", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField CREATOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("creatorId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PRIORITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("priorities", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField SRC_JOB_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("srcJobIds", org.apache.thrift.protocol.TType.LIST, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new JobFilterIssueOptsStandardSchemeFactory());
  }

  public CommonFilterOpts opts; // required
  /**
   * Issue creator id
   */
  public String creatorId; // optional
  /**
   * Issue priorities
   */
  public List<Integer> priorities; // optional
  /**
   * Source job ids issues are tied to
   */
  public List<String> srcJobIds; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    OPTS((short)1, "opts"),
    /**
     * Issue creator id
     */
    CREATOR_ID((short)2, "creatorId"),
    /**
     * Issue priorities
     */
    PRIORITIES((short)3, "priorities"),
    /**
     * Source job ids issues are tied to
     */
    SRC_JOB_IDS((short)4, "srcJobIds");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // OPTS
          return OPTS;
        case 2: // CREATOR_ID
          return CREATOR_ID;
        case 3: // PRIORITIES
          return PRIORITIES;
        case 4: // SRC_JOB_IDS
          return SRC_JOB_IDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.CREATOR_ID,_Fields.PRIORITIES,_Fields.SRC_JOB_IDS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.OPTS, new org.apache.thrift.meta_data.FieldMetaData("opts", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CommonFilterOpts.class)));
    tmpMap.put(_Fields.CREATOR_ID, new org.apache.thrift.meta_data.FieldMetaData("creatorId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRIORITIES, new org.apache.thrift.meta_data.FieldMetaData("priorities", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.SRC_JOB_IDS, new org.apache.thrift.meta_data.FieldMetaData("srcJobIds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(JobFilterIssueOpts.class, metaDataMap);
  }

  public JobFilterIssueOpts() {
  }

  public JobFilterIssueOpts(
    CommonFilterOpts opts)
  {
    this();
    this.opts = opts;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public JobFilterIssueOpts(JobFilterIssueOpts other) {
    if (other.isSetOpts()) {
      this.opts = new CommonFilterOpts(other.opts);
    }
    if (other.isSetCreatorId()) {
      this.creatorId = other.creatorId;
    }
    if (other.isSetPriorities()) {
      List<Integer> __this__priorities = new ArrayList<Integer>(other.priorities);
      this.priorities = __this__priorities;
    }
    if (other.isSetSrcJobIds()) {
      List<String> __this__srcJobIds = new ArrayList<String>(other.srcJobIds);
      this.srcJobIds = __this__srcJobIds;
    }
  }

  public JobFilterIssueOpts deepCopy() {
    return new JobFilterIssueOpts(this);
  }

  @Override
  public void clear() {
    this.opts = null;
    this.creatorId = null;
    this.priorities = null;
    this.srcJobIds = null;
  }

  public CommonFilterOpts getOpts() {
    return this.opts;
  }

  public JobFilterIssueOpts setOpts(CommonFilterOpts opts) {
    this.opts = opts;
    return this;
  }

  public void unsetOpts() {
    this.opts = null;
  }

  /** Returns true if field opts is set (has been assigned a value) and false otherwise */
  public boolean isSetOpts() {
    return this.opts != null;
  }

  public void setOptsIsSet(boolean value) {
    if (!value) {
      this.opts = null;
    }
  }

  /**
   * Issue creator id
   */
  public String getCreatorId() {
    return this.creatorId;
  }

  /**
   * Issue creator id
   */
  public JobFilterIssueOpts setCreatorId(String creatorId) {
    this.creatorId = creatorId;
    return this;
  }

  public void unsetCreatorId() {
    this.creatorId = null;
  }

  /** Returns true if field creatorId is set (has been assigned a value) and false otherwise */
  public boolean isSetCreatorId() {
    return this.creatorId != null;
  }

  public void setCreatorIdIsSet(boolean value) {
    if (!value) {
      this.creatorId = null;
    }
  }

  public int getPrioritiesSize() {
    return (this.priorities == null) ? 0 : this.priorities.size();
  }

  public java.util.Iterator<Integer> getPrioritiesIterator() {
    return (this.priorities == null) ? null : this.priorities.iterator();
  }

  public void addToPriorities(int elem) {
    if (this.priorities == null) {
      this.priorities = new ArrayList<Integer>();
    }
    this.priorities.add(elem);
  }

  /**
   * Issue priorities
   */
  public List<Integer> getPriorities() {
    return this.priorities;
  }

  /**
   * Issue priorities
   */
  public JobFilterIssueOpts setPriorities(List<Integer> priorities) {
    this.priorities = priorities;
    return this;
  }

  public void unsetPriorities() {
    this.priorities = null;
  }

  /** Returns true if field priorities is set (has been assigned a value) and false otherwise */
  public boolean isSetPriorities() {
    return this.priorities != null;
  }

  public void setPrioritiesIsSet(boolean value) {
    if (!value) {
      this.priorities = null;
    }
  }

  public int getSrcJobIdsSize() {
    return (this.srcJobIds == null) ? 0 : this.srcJobIds.size();
  }

  public java.util.Iterator<String> getSrcJobIdsIterator() {
    return (this.srcJobIds == null) ? null : this.srcJobIds.iterator();
  }

  public void addToSrcJobIds(String elem) {
    if (this.srcJobIds == null) {
      this.srcJobIds = new ArrayList<String>();
    }
    this.srcJobIds.add(elem);
  }

  /**
   * Source job ids issues are tied to
   */
  public List<String> getSrcJobIds() {
    return this.srcJobIds;
  }

  /**
   * Source job ids issues are tied to
   */
  public JobFilterIssueOpts setSrcJobIds(List<String> srcJobIds) {
    this.srcJobIds = srcJobIds;
    return this;
  }

  public void unsetSrcJobIds() {
    this.srcJobIds = null;
  }

  /** Returns true if field srcJobIds is set (has been assigned a value) and false otherwise */
  public boolean isSetSrcJobIds() {
    return this.srcJobIds != null;
  }

  public void setSrcJobIdsIsSet(boolean value) {
    if (!value) {
      this.srcJobIds = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case OPTS:
      if (value == null) {
        unsetOpts();
      } else {
        setOpts((CommonFilterOpts)value);
      }
      break;

    case CREATOR_ID:
      if (value == null) {
        unsetCreatorId();
      } else {
        setCreatorId((String)value);
      }
      break;

    case PRIORITIES:
      if (value == null) {
        unsetPriorities();
      } else {
        setPriorities((List<Integer>)value);
      }
      break;

    case SRC_JOB_IDS:
      if (value == null) {
        unsetSrcJobIds();
      } else {
        setSrcJobIds((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case OPTS:
      return getOpts();

    case CREATOR_ID:
      return getCreatorId();

    case PRIORITIES:
      return getPriorities();

    case SRC_JOB_IDS:
      return getSrcJobIds();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case OPTS:
      return isSetOpts();
    case CREATOR_ID:
      return isSetCreatorId();
    case PRIORITIES:
      return isSetPriorities();
    case SRC_JOB_IDS:
      return isSetSrcJobIds();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof JobFilterIssueOpts)
      return this.equals((JobFilterIssueOpts)that);
    return false;
  }

  public boolean equals(JobFilterIssueOpts that) {
    if (that == null)
      return false;

    boolean this_present_opts = true && this.isSetOpts();
    boolean that_present_opts = true && that.isSetOpts();
    if (this_present_opts || that_present_opts) {
      if (!(this_present_opts && that_present_opts))
        return false;
      if (!this.opts.equals(that.opts))
        return false;
    }

    boolean this_present_creatorId = true && this.isSetCreatorId();
    boolean that_present_creatorId = true && that.isSetCreatorId();
    if (this_present_creatorId || that_present_creatorId) {
      if (!(this_present_creatorId && that_present_creatorId))
        return false;
      if (!this.creatorId.equals(that.creatorId))
        return false;
    }

    boolean this_present_priorities = true && this.isSetPriorities();
    boolean that_present_priorities = true && that.isSetPriorities();
    if (this_present_priorities || that_present_priorities) {
      if (!(this_present_priorities && that_present_priorities))
        return false;
      if (!this.priorities.equals(that.priorities))
        return false;
    }

    boolean this_present_srcJobIds = true && this.isSetSrcJobIds();
    boolean that_present_srcJobIds = true && that.isSetSrcJobIds();
    if (this_present_srcJobIds || that_present_srcJobIds) {
      if (!(this_present_srcJobIds && that_present_srcJobIds))
        return false;
      if (!this.srcJobIds.equals(that.srcJobIds))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_opts = true && (isSetOpts());
    list.add(present_opts);
    if (present_opts)
      list.add(opts);

    boolean present_creatorId = true && (isSetCreatorId());
    list.add(present_creatorId);
    if (present_creatorId)
      list.add(creatorId);

    boolean present_priorities = true && (isSetPriorities());
    list.add(present_priorities);
    if (present_priorities)
      list.add(priorities);

    boolean present_srcJobIds = true && (isSetSrcJobIds());
    list.add(present_srcJobIds);
    if (present_srcJobIds)
      list.add(srcJobIds);

    return list.hashCode();
  }

  @Override
  public int compareTo(JobFilterIssueOpts other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetOpts()).compareTo(other.isSetOpts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.opts, other.opts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreatorId()).compareTo(other.isSetCreatorId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreatorId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creatorId, other.creatorId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPriorities()).compareTo(other.isSetPriorities());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPriorities()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priorities, other.priorities);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSrcJobIds()).compareTo(other.isSetSrcJobIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSrcJobIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.srcJobIds, other.srcJobIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("JobFilterIssueOpts(");
    boolean first = true;

    sb.append("opts:");
    if (this.opts == null) {
      sb.append("null");
    } else {
      sb.append(this.opts);
    }
    first = false;
    if (isSetCreatorId()) {
      if (!first) sb.append(", ");
      sb.append("creatorId:");
      if (this.creatorId == null) {
        sb.append("null");
      } else {
        sb.append(this.creatorId);
      }
      first = false;
    }
    if (isSetPriorities()) {
      if (!first) sb.append(", ");
      sb.append("priorities:");
      if (this.priorities == null) {
        sb.append("null");
      } else {
        sb.append(this.priorities);
      }
      first = false;
    }
    if (isSetSrcJobIds()) {
      if (!first) sb.append(", ");
      sb.append("srcJobIds:");
      if (this.srcJobIds == null) {
        sb.append("null");
      } else {
        sb.append(this.srcJobIds);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (opts != null) {
      opts.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class JobFilterIssueOptsStandardSchemeFactory implements SchemeFactory {
    public JobFilterIssueOptsStandardScheme getScheme() {
      return new JobFilterIssueOptsStandardScheme();
    }
  }

  private static class JobFilterIssueOptsStandardScheme extends StandardScheme<JobFilterIssueOpts> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, JobFilterIssueOpts struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // OPTS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.opts = new CommonFilterOpts();
              struct.opts.read(iprot);
              struct.setOptsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CREATOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.creatorId = iprot.readString();
              struct.setCreatorIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PRIORITIES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.priorities = new ArrayList<Integer>(_list16.size);
                int _elem17;
                for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                {
                  _elem17 = iprot.readI32();
                  struct.priorities.add(_elem17);
                }
                iprot.readListEnd();
              }
              struct.setPrioritiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SRC_JOB_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list19 = iprot.readListBegin();
                struct.srcJobIds = new ArrayList<String>(_list19.size);
                String _elem20;
                for (int _i21 = 0; _i21 < _list19.size; ++_i21)
                {
                  _elem20 = iprot.readString();
                  struct.srcJobIds.add(_elem20);
                }
                iprot.readListEnd();
              }
              struct.setSrcJobIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, JobFilterIssueOpts struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.opts != null) {
        oprot.writeFieldBegin(OPTS_FIELD_DESC);
        struct.opts.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.creatorId != null) {
        if (struct.isSetCreatorId()) {
          oprot.writeFieldBegin(CREATOR_ID_FIELD_DESC);
          oprot.writeString(struct.creatorId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.priorities != null) {
        if (struct.isSetPriorities()) {
          oprot.writeFieldBegin(PRIORITIES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.priorities.size()));
            for (int _iter22 : struct.priorities)
            {
              oprot.writeI32(_iter22);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.srcJobIds != null) {
        if (struct.isSetSrcJobIds()) {
          oprot.writeFieldBegin(SRC_JOB_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.srcJobIds.size()));
            for (String _iter23 : struct.srcJobIds)
            {
              oprot.writeString(_iter23);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

}

