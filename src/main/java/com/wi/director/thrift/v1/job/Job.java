/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wi.director.thrift.v1.job;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * Base Job object
 */
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class Job implements org.apache.thrift.TBase<Job, Job._Fields>, java.io.Serializable, Cloneable, Comparable<Job> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Job");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField STEP_GROUP_FIELD_DESC = new org.apache.thrift.protocol.TField("stepGroup", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField TEAM_FIELD_DESC = new org.apache.thrift.protocol.TField("team", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField JOB_TEMPLATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("jobTemplateId", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField JOB_TEMPLATE_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("jobTemplateVersion", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField COMPLETED_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("completedAt", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField DOCUMENT_EMAIL_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("documentEmailAddress", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField CREATED_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("createdAt", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField DOCUMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("documents", org.apache.thrift.protocol.TType.LIST, (short)11);
  private static final org.apache.thrift.protocol.TField JOB_USERS_FIELD_DESC = new org.apache.thrift.protocol.TField("jobUsers", org.apache.thrift.protocol.TType.LIST, (short)12);
  private static final org.apache.thrift.protocol.TField COMPLETED_STEPS_FIELD_DESC = new org.apache.thrift.protocol.TField("completedSteps", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField TOTAL_STEPS_FIELD_DESC = new org.apache.thrift.protocol.TField("totalSteps", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField REASON_COMPLETED_FIELD_DESC = new org.apache.thrift.protocol.TField("reasonCompleted", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField IS_PREVIEW_FIELD_DESC = new org.apache.thrift.protocol.TField("isPreview", org.apache.thrift.protocol.TType.BOOL, (short)16);
  private static final org.apache.thrift.protocol.TField PLANNED_START_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("plannedStartAt", org.apache.thrift.protocol.TType.I64, (short)17);
  private static final org.apache.thrift.protocol.TField STARTED_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("startedAt", org.apache.thrift.protocol.TType.I64, (short)18);
  private static final org.apache.thrift.protocol.TField CREATOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("creatorId", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField METADATA_BY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("metadataById", org.apache.thrift.protocol.TType.MAP, (short)20);
  private static final org.apache.thrift.protocol.TField MESH_ENABLED_FIELD_DESC = new org.apache.thrift.protocol.TField("meshEnabled", org.apache.thrift.protocol.TType.BOOL, (short)21);
  private static final org.apache.thrift.protocol.TField START_AUTO_FIELD_DESC = new org.apache.thrift.protocol.TField("startAuto", org.apache.thrift.protocol.TType.BOOL, (short)22);
  private static final org.apache.thrift.protocol.TField JOB_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("jobType", org.apache.thrift.protocol.TType.I32, (short)23);
  private static final org.apache.thrift.protocol.TField USING_EVENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("usingEvents", org.apache.thrift.protocol.TType.BOOL, (short)24);
  private static final org.apache.thrift.protocol.TField SRC_FIELD_DESC = new org.apache.thrift.protocol.TField("src", org.apache.thrift.protocol.TType.STRUCT, (short)25);
  private static final org.apache.thrift.protocol.TField ARCHIVED_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("archivedAt", org.apache.thrift.protocol.TType.I64, (short)26);
  private static final org.apache.thrift.protocol.TField LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("location", org.apache.thrift.protocol.TType.STRING, (short)27);
  private static final org.apache.thrift.protocol.TField PLANNED_START_JOB_ROLE_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("plannedStartJobRoleIds", org.apache.thrift.protocol.TType.LIST, (short)28);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new JobStandardSchemeFactory());
  }

  public String id; // required
  public String title; // required
  public com.wi.director.thrift.v1.step.BaseStep stepGroup; // required
  public com.wi.director.thrift.v1.team.Team team; // required
  public String jobTemplateId; // required
  public int jobTemplateVersion; // required
  public long completedAt; // required
  public String documentEmailAddress; // required
  public long createdAt; // required
  public List<com.wi.director.thrift.v1.document.Document> documents; // required
  public List<JobUser> jobUsers; // required
  public int completedSteps; // required
  public int totalSteps; // required
  public String reasonCompleted; // required
  public boolean isPreview; // required
  public long plannedStartAt; // required
  public long startedAt; // required
  public String creatorId; // required
  public Map<String,com.wi.director.thrift.v1.metadata.MetadataEntry> metadataById; // required
  public boolean meshEnabled; // required
  public boolean startAuto; // optional
  /**
   * 
   * @see JobType
   */
  public JobType jobType; // required
  public boolean usingEvents; // required
  /**
   * If JobType is Issue, optionally specify a source of the issue. <br>
   * If job is an instance started from an AdHoc (on-demand) job, specify the source job. <br>
   * Currently, only accepting references down to the detail of a step/group. <br>
   */
  public com.wi.director.thrift.v1.messaging.JobPtr src; // optional
  public long archivedAt; // required
  public String location; // optional
  /**
   * If JobType is AdHoc, this must be a non-empty, valid job role id list for
   * the user starting an ad hoc job to be assigned the following roles.
   * This is in addition to the roles already assigned to this user during planning.
   */
  public List<String> plannedStartJobRoleIds; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    TITLE((short)2, "title"),
    STEP_GROUP((short)3, "stepGroup"),
    TEAM((short)4, "team"),
    JOB_TEMPLATE_ID((short)5, "jobTemplateId"),
    JOB_TEMPLATE_VERSION((short)6, "jobTemplateVersion"),
    COMPLETED_AT((short)7, "completedAt"),
    DOCUMENT_EMAIL_ADDRESS((short)8, "documentEmailAddress"),
    CREATED_AT((short)9, "createdAt"),
    DOCUMENTS((short)11, "documents"),
    JOB_USERS((short)12, "jobUsers"),
    COMPLETED_STEPS((short)13, "completedSteps"),
    TOTAL_STEPS((short)14, "totalSteps"),
    REASON_COMPLETED((short)15, "reasonCompleted"),
    IS_PREVIEW((short)16, "isPreview"),
    PLANNED_START_AT((short)17, "plannedStartAt"),
    STARTED_AT((short)18, "startedAt"),
    CREATOR_ID((short)19, "creatorId"),
    METADATA_BY_ID((short)20, "metadataById"),
    MESH_ENABLED((short)21, "meshEnabled"),
    START_AUTO((short)22, "startAuto"),
    /**
     * 
     * @see JobType
     */
    JOB_TYPE((short)23, "jobType"),
    USING_EVENTS((short)24, "usingEvents"),
    /**
     * If JobType is Issue, optionally specify a source of the issue. <br>
     * If job is an instance started from an AdHoc (on-demand) job, specify the source job. <br>
     * Currently, only accepting references down to the detail of a step/group. <br>
     */
    SRC((short)25, "src"),
    ARCHIVED_AT((short)26, "archivedAt"),
    LOCATION((short)27, "location"),
    /**
     * If JobType is AdHoc, this must be a non-empty, valid job role id list for
     * the user starting an ad hoc job to be assigned the following roles.
     * This is in addition to the roles already assigned to this user during planning.
     */
    PLANNED_START_JOB_ROLE_IDS((short)28, "plannedStartJobRoleIds");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // TITLE
          return TITLE;
        case 3: // STEP_GROUP
          return STEP_GROUP;
        case 4: // TEAM
          return TEAM;
        case 5: // JOB_TEMPLATE_ID
          return JOB_TEMPLATE_ID;
        case 6: // JOB_TEMPLATE_VERSION
          return JOB_TEMPLATE_VERSION;
        case 7: // COMPLETED_AT
          return COMPLETED_AT;
        case 8: // DOCUMENT_EMAIL_ADDRESS
          return DOCUMENT_EMAIL_ADDRESS;
        case 9: // CREATED_AT
          return CREATED_AT;
        case 11: // DOCUMENTS
          return DOCUMENTS;
        case 12: // JOB_USERS
          return JOB_USERS;
        case 13: // COMPLETED_STEPS
          return COMPLETED_STEPS;
        case 14: // TOTAL_STEPS
          return TOTAL_STEPS;
        case 15: // REASON_COMPLETED
          return REASON_COMPLETED;
        case 16: // IS_PREVIEW
          return IS_PREVIEW;
        case 17: // PLANNED_START_AT
          return PLANNED_START_AT;
        case 18: // STARTED_AT
          return STARTED_AT;
        case 19: // CREATOR_ID
          return CREATOR_ID;
        case 20: // METADATA_BY_ID
          return METADATA_BY_ID;
        case 21: // MESH_ENABLED
          return MESH_ENABLED;
        case 22: // START_AUTO
          return START_AUTO;
        case 23: // JOB_TYPE
          return JOB_TYPE;
        case 24: // USING_EVENTS
          return USING_EVENTS;
        case 25: // SRC
          return SRC;
        case 26: // ARCHIVED_AT
          return ARCHIVED_AT;
        case 27: // LOCATION
          return LOCATION;
        case 28: // PLANNED_START_JOB_ROLE_IDS
          return PLANNED_START_JOB_ROLE_IDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __JOBTEMPLATEVERSION_ISSET_ID = 0;
  private static final int __COMPLETEDAT_ISSET_ID = 1;
  private static final int __CREATEDAT_ISSET_ID = 2;
  private static final int __COMPLETEDSTEPS_ISSET_ID = 3;
  private static final int __TOTALSTEPS_ISSET_ID = 4;
  private static final int __ISPREVIEW_ISSET_ID = 5;
  private static final int __PLANNEDSTARTAT_ISSET_ID = 6;
  private static final int __STARTEDAT_ISSET_ID = 7;
  private static final int __MESHENABLED_ISSET_ID = 8;
  private static final int __STARTAUTO_ISSET_ID = 9;
  private static final int __USINGEVENTS_ISSET_ID = 10;
  private static final int __ARCHIVEDAT_ISSET_ID = 11;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.START_AUTO,_Fields.SRC,_Fields.LOCATION,_Fields.PLANNED_START_JOB_ROLE_IDS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STEP_GROUP, new org.apache.thrift.meta_data.FieldMetaData("stepGroup", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.step.BaseStep.class)));
    tmpMap.put(_Fields.TEAM, new org.apache.thrift.meta_data.FieldMetaData("team", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.team.Team.class)));
    tmpMap.put(_Fields.JOB_TEMPLATE_ID, new org.apache.thrift.meta_data.FieldMetaData("jobTemplateId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.JOB_TEMPLATE_VERSION, new org.apache.thrift.meta_data.FieldMetaData("jobTemplateVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COMPLETED_AT, new org.apache.thrift.meta_data.FieldMetaData("completedAt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DOCUMENT_EMAIL_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("documentEmailAddress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATED_AT, new org.apache.thrift.meta_data.FieldMetaData("createdAt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DOCUMENTS, new org.apache.thrift.meta_data.FieldMetaData("documents", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.document.Document.class))));
    tmpMap.put(_Fields.JOB_USERS, new org.apache.thrift.meta_data.FieldMetaData("jobUsers", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JobUser.class))));
    tmpMap.put(_Fields.COMPLETED_STEPS, new org.apache.thrift.meta_data.FieldMetaData("completedSteps", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL_STEPS, new org.apache.thrift.meta_data.FieldMetaData("totalSteps", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REASON_COMPLETED, new org.apache.thrift.meta_data.FieldMetaData("reasonCompleted", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_PREVIEW, new org.apache.thrift.meta_data.FieldMetaData("isPreview", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PLANNED_START_AT, new org.apache.thrift.meta_data.FieldMetaData("plannedStartAt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.STARTED_AT, new org.apache.thrift.meta_data.FieldMetaData("startedAt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CREATOR_ID, new org.apache.thrift.meta_data.FieldMetaData("creatorId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.METADATA_BY_ID, new org.apache.thrift.meta_data.FieldMetaData("metadataById", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.metadata.MetadataEntry.class))));
    tmpMap.put(_Fields.MESH_ENABLED, new org.apache.thrift.meta_data.FieldMetaData("meshEnabled", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.START_AUTO, new org.apache.thrift.meta_data.FieldMetaData("startAuto", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.JOB_TYPE, new org.apache.thrift.meta_data.FieldMetaData("jobType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, JobType.class)));
    tmpMap.put(_Fields.USING_EVENTS, new org.apache.thrift.meta_data.FieldMetaData("usingEvents", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SRC, new org.apache.thrift.meta_data.FieldMetaData("src", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.messaging.JobPtr.class)));
    tmpMap.put(_Fields.ARCHIVED_AT, new org.apache.thrift.meta_data.FieldMetaData("archivedAt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LOCATION, new org.apache.thrift.meta_data.FieldMetaData("location", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLANNED_START_JOB_ROLE_IDS, new org.apache.thrift.meta_data.FieldMetaData("plannedStartJobRoleIds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Job.class, metaDataMap);
  }

  public Job() {
  }

  public Job(
    String id,
    String title,
    com.wi.director.thrift.v1.step.BaseStep stepGroup,
    com.wi.director.thrift.v1.team.Team team,
    String jobTemplateId,
    int jobTemplateVersion,
    long completedAt,
    String documentEmailAddress,
    long createdAt,
    List<com.wi.director.thrift.v1.document.Document> documents,
    List<JobUser> jobUsers,
    int completedSteps,
    int totalSteps,
    String reasonCompleted,
    boolean isPreview,
    long plannedStartAt,
    long startedAt,
    String creatorId,
    Map<String,com.wi.director.thrift.v1.metadata.MetadataEntry> metadataById,
    boolean meshEnabled,
    JobType jobType,
    boolean usingEvents,
    long archivedAt)
  {
    this();
    this.id = id;
    this.title = title;
    this.stepGroup = stepGroup;
    this.team = team;
    this.jobTemplateId = jobTemplateId;
    this.jobTemplateVersion = jobTemplateVersion;
    setJobTemplateVersionIsSet(true);
    this.completedAt = completedAt;
    setCompletedAtIsSet(true);
    this.documentEmailAddress = documentEmailAddress;
    this.createdAt = createdAt;
    setCreatedAtIsSet(true);
    this.documents = documents;
    this.jobUsers = jobUsers;
    this.completedSteps = completedSteps;
    setCompletedStepsIsSet(true);
    this.totalSteps = totalSteps;
    setTotalStepsIsSet(true);
    this.reasonCompleted = reasonCompleted;
    this.isPreview = isPreview;
    setIsPreviewIsSet(true);
    this.plannedStartAt = plannedStartAt;
    setPlannedStartAtIsSet(true);
    this.startedAt = startedAt;
    setStartedAtIsSet(true);
    this.creatorId = creatorId;
    this.metadataById = metadataById;
    this.meshEnabled = meshEnabled;
    setMeshEnabledIsSet(true);
    this.jobType = jobType;
    this.usingEvents = usingEvents;
    setUsingEventsIsSet(true);
    this.archivedAt = archivedAt;
    setArchivedAtIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Job(Job other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    if (other.isSetStepGroup()) {
      this.stepGroup = new com.wi.director.thrift.v1.step.BaseStep(other.stepGroup);
    }
    if (other.isSetTeam()) {
      this.team = new com.wi.director.thrift.v1.team.Team(other.team);
    }
    if (other.isSetJobTemplateId()) {
      this.jobTemplateId = other.jobTemplateId;
    }
    this.jobTemplateVersion = other.jobTemplateVersion;
    this.completedAt = other.completedAt;
    if (other.isSetDocumentEmailAddress()) {
      this.documentEmailAddress = other.documentEmailAddress;
    }
    this.createdAt = other.createdAt;
    if (other.isSetDocuments()) {
      List<com.wi.director.thrift.v1.document.Document> __this__documents = new ArrayList<com.wi.director.thrift.v1.document.Document>(other.documents.size());
      for (com.wi.director.thrift.v1.document.Document other_element : other.documents) {
        __this__documents.add(new com.wi.director.thrift.v1.document.Document(other_element));
      }
      this.documents = __this__documents;
    }
    if (other.isSetJobUsers()) {
      List<JobUser> __this__jobUsers = new ArrayList<JobUser>(other.jobUsers.size());
      for (JobUser other_element : other.jobUsers) {
        __this__jobUsers.add(new JobUser(other_element));
      }
      this.jobUsers = __this__jobUsers;
    }
    this.completedSteps = other.completedSteps;
    this.totalSteps = other.totalSteps;
    if (other.isSetReasonCompleted()) {
      this.reasonCompleted = other.reasonCompleted;
    }
    this.isPreview = other.isPreview;
    this.plannedStartAt = other.plannedStartAt;
    this.startedAt = other.startedAt;
    if (other.isSetCreatorId()) {
      this.creatorId = other.creatorId;
    }
    if (other.isSetMetadataById()) {
      Map<String,com.wi.director.thrift.v1.metadata.MetadataEntry> __this__metadataById = new HashMap<String,com.wi.director.thrift.v1.metadata.MetadataEntry>(other.metadataById.size());
      for (Map.Entry<String, com.wi.director.thrift.v1.metadata.MetadataEntry> other_element : other.metadataById.entrySet()) {

        String other_element_key = other_element.getKey();
        com.wi.director.thrift.v1.metadata.MetadataEntry other_element_value = other_element.getValue();

        String __this__metadataById_copy_key = other_element_key;

        com.wi.director.thrift.v1.metadata.MetadataEntry __this__metadataById_copy_value = new com.wi.director.thrift.v1.metadata.MetadataEntry(other_element_value);

        __this__metadataById.put(__this__metadataById_copy_key, __this__metadataById_copy_value);
      }
      this.metadataById = __this__metadataById;
    }
    this.meshEnabled = other.meshEnabled;
    this.startAuto = other.startAuto;
    if (other.isSetJobType()) {
      this.jobType = other.jobType;
    }
    this.usingEvents = other.usingEvents;
    if (other.isSetSrc()) {
      this.src = new com.wi.director.thrift.v1.messaging.JobPtr(other.src);
    }
    this.archivedAt = other.archivedAt;
    if (other.isSetLocation()) {
      this.location = other.location;
    }
    if (other.isSetPlannedStartJobRoleIds()) {
      List<String> __this__plannedStartJobRoleIds = new ArrayList<String>(other.plannedStartJobRoleIds);
      this.plannedStartJobRoleIds = __this__plannedStartJobRoleIds;
    }
  }

  public Job deepCopy() {
    return new Job(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.title = null;
    this.stepGroup = null;
    this.team = null;
    this.jobTemplateId = null;
    setJobTemplateVersionIsSet(false);
    this.jobTemplateVersion = 0;
    setCompletedAtIsSet(false);
    this.completedAt = 0;
    this.documentEmailAddress = null;
    setCreatedAtIsSet(false);
    this.createdAt = 0;
    this.documents = null;
    this.jobUsers = null;
    setCompletedStepsIsSet(false);
    this.completedSteps = 0;
    setTotalStepsIsSet(false);
    this.totalSteps = 0;
    this.reasonCompleted = null;
    setIsPreviewIsSet(false);
    this.isPreview = false;
    setPlannedStartAtIsSet(false);
    this.plannedStartAt = 0;
    setStartedAtIsSet(false);
    this.startedAt = 0;
    this.creatorId = null;
    this.metadataById = null;
    setMeshEnabledIsSet(false);
    this.meshEnabled = false;
    setStartAutoIsSet(false);
    this.startAuto = false;
    this.jobType = null;
    setUsingEventsIsSet(false);
    this.usingEvents = false;
    this.src = null;
    setArchivedAtIsSet(false);
    this.archivedAt = 0;
    this.location = null;
    this.plannedStartJobRoleIds = null;
  }

  public String getId() {
    return this.id;
  }

  public Job setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public String getTitle() {
    return this.title;
  }

  public Job setTitle(String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public com.wi.director.thrift.v1.step.BaseStep getStepGroup() {
    return this.stepGroup;
  }

  public Job setStepGroup(com.wi.director.thrift.v1.step.BaseStep stepGroup) {
    this.stepGroup = stepGroup;
    return this;
  }

  public void unsetStepGroup() {
    this.stepGroup = null;
  }

  /** Returns true if field stepGroup is set (has been assigned a value) and false otherwise */
  public boolean isSetStepGroup() {
    return this.stepGroup != null;
  }

  public void setStepGroupIsSet(boolean value) {
    if (!value) {
      this.stepGroup = null;
    }
  }

  public com.wi.director.thrift.v1.team.Team getTeam() {
    return this.team;
  }

  public Job setTeam(com.wi.director.thrift.v1.team.Team team) {
    this.team = team;
    return this;
  }

  public void unsetTeam() {
    this.team = null;
  }

  /** Returns true if field team is set (has been assigned a value) and false otherwise */
  public boolean isSetTeam() {
    return this.team != null;
  }

  public void setTeamIsSet(boolean value) {
    if (!value) {
      this.team = null;
    }
  }

  public String getJobTemplateId() {
    return this.jobTemplateId;
  }

  public Job setJobTemplateId(String jobTemplateId) {
    this.jobTemplateId = jobTemplateId;
    return this;
  }

  public void unsetJobTemplateId() {
    this.jobTemplateId = null;
  }

  /** Returns true if field jobTemplateId is set (has been assigned a value) and false otherwise */
  public boolean isSetJobTemplateId() {
    return this.jobTemplateId != null;
  }

  public void setJobTemplateIdIsSet(boolean value) {
    if (!value) {
      this.jobTemplateId = null;
    }
  }

  public int getJobTemplateVersion() {
    return this.jobTemplateVersion;
  }

  public Job setJobTemplateVersion(int jobTemplateVersion) {
    this.jobTemplateVersion = jobTemplateVersion;
    setJobTemplateVersionIsSet(true);
    return this;
  }

  public void unsetJobTemplateVersion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __JOBTEMPLATEVERSION_ISSET_ID);
  }

  /** Returns true if field jobTemplateVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetJobTemplateVersion() {
    return EncodingUtils.testBit(__isset_bitfield, __JOBTEMPLATEVERSION_ISSET_ID);
  }

  public void setJobTemplateVersionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __JOBTEMPLATEVERSION_ISSET_ID, value);
  }

  public long getCompletedAt() {
    return this.completedAt;
  }

  public Job setCompletedAt(long completedAt) {
    this.completedAt = completedAt;
    setCompletedAtIsSet(true);
    return this;
  }

  public void unsetCompletedAt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMPLETEDAT_ISSET_ID);
  }

  /** Returns true if field completedAt is set (has been assigned a value) and false otherwise */
  public boolean isSetCompletedAt() {
    return EncodingUtils.testBit(__isset_bitfield, __COMPLETEDAT_ISSET_ID);
  }

  public void setCompletedAtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMPLETEDAT_ISSET_ID, value);
  }

  public String getDocumentEmailAddress() {
    return this.documentEmailAddress;
  }

  public Job setDocumentEmailAddress(String documentEmailAddress) {
    this.documentEmailAddress = documentEmailAddress;
    return this;
  }

  public void unsetDocumentEmailAddress() {
    this.documentEmailAddress = null;
  }

  /** Returns true if field documentEmailAddress is set (has been assigned a value) and false otherwise */
  public boolean isSetDocumentEmailAddress() {
    return this.documentEmailAddress != null;
  }

  public void setDocumentEmailAddressIsSet(boolean value) {
    if (!value) {
      this.documentEmailAddress = null;
    }
  }

  public long getCreatedAt() {
    return this.createdAt;
  }

  public Job setCreatedAt(long createdAt) {
    this.createdAt = createdAt;
    setCreatedAtIsSet(true);
    return this;
  }

  public void unsetCreatedAt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATEDAT_ISSET_ID);
  }

  /** Returns true if field createdAt is set (has been assigned a value) and false otherwise */
  public boolean isSetCreatedAt() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATEDAT_ISSET_ID);
  }

  public void setCreatedAtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATEDAT_ISSET_ID, value);
  }

  public int getDocumentsSize() {
    return (this.documents == null) ? 0 : this.documents.size();
  }

  public java.util.Iterator<com.wi.director.thrift.v1.document.Document> getDocumentsIterator() {
    return (this.documents == null) ? null : this.documents.iterator();
  }

  public void addToDocuments(com.wi.director.thrift.v1.document.Document elem) {
    if (this.documents == null) {
      this.documents = new ArrayList<com.wi.director.thrift.v1.document.Document>();
    }
    this.documents.add(elem);
  }

  public List<com.wi.director.thrift.v1.document.Document> getDocuments() {
    return this.documents;
  }

  public Job setDocuments(List<com.wi.director.thrift.v1.document.Document> documents) {
    this.documents = documents;
    return this;
  }

  public void unsetDocuments() {
    this.documents = null;
  }

  /** Returns true if field documents is set (has been assigned a value) and false otherwise */
  public boolean isSetDocuments() {
    return this.documents != null;
  }

  public void setDocumentsIsSet(boolean value) {
    if (!value) {
      this.documents = null;
    }
  }

  public int getJobUsersSize() {
    return (this.jobUsers == null) ? 0 : this.jobUsers.size();
  }

  public java.util.Iterator<JobUser> getJobUsersIterator() {
    return (this.jobUsers == null) ? null : this.jobUsers.iterator();
  }

  public void addToJobUsers(JobUser elem) {
    if (this.jobUsers == null) {
      this.jobUsers = new ArrayList<JobUser>();
    }
    this.jobUsers.add(elem);
  }

  public List<JobUser> getJobUsers() {
    return this.jobUsers;
  }

  public Job setJobUsers(List<JobUser> jobUsers) {
    this.jobUsers = jobUsers;
    return this;
  }

  public void unsetJobUsers() {
    this.jobUsers = null;
  }

  /** Returns true if field jobUsers is set (has been assigned a value) and false otherwise */
  public boolean isSetJobUsers() {
    return this.jobUsers != null;
  }

  public void setJobUsersIsSet(boolean value) {
    if (!value) {
      this.jobUsers = null;
    }
  }

  public int getCompletedSteps() {
    return this.completedSteps;
  }

  public Job setCompletedSteps(int completedSteps) {
    this.completedSteps = completedSteps;
    setCompletedStepsIsSet(true);
    return this;
  }

  public void unsetCompletedSteps() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMPLETEDSTEPS_ISSET_ID);
  }

  /** Returns true if field completedSteps is set (has been assigned a value) and false otherwise */
  public boolean isSetCompletedSteps() {
    return EncodingUtils.testBit(__isset_bitfield, __COMPLETEDSTEPS_ISSET_ID);
  }

  public void setCompletedStepsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMPLETEDSTEPS_ISSET_ID, value);
  }

  public int getTotalSteps() {
    return this.totalSteps;
  }

  public Job setTotalSteps(int totalSteps) {
    this.totalSteps = totalSteps;
    setTotalStepsIsSet(true);
    return this;
  }

  public void unsetTotalSteps() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALSTEPS_ISSET_ID);
  }

  /** Returns true if field totalSteps is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalSteps() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALSTEPS_ISSET_ID);
  }

  public void setTotalStepsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALSTEPS_ISSET_ID, value);
  }

  public String getReasonCompleted() {
    return this.reasonCompleted;
  }

  public Job setReasonCompleted(String reasonCompleted) {
    this.reasonCompleted = reasonCompleted;
    return this;
  }

  public void unsetReasonCompleted() {
    this.reasonCompleted = null;
  }

  /** Returns true if field reasonCompleted is set (has been assigned a value) and false otherwise */
  public boolean isSetReasonCompleted() {
    return this.reasonCompleted != null;
  }

  public void setReasonCompletedIsSet(boolean value) {
    if (!value) {
      this.reasonCompleted = null;
    }
  }

  public boolean isIsPreview() {
    return this.isPreview;
  }

  public Job setIsPreview(boolean isPreview) {
    this.isPreview = isPreview;
    setIsPreviewIsSet(true);
    return this;
  }

  public void unsetIsPreview() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISPREVIEW_ISSET_ID);
  }

  /** Returns true if field isPreview is set (has been assigned a value) and false otherwise */
  public boolean isSetIsPreview() {
    return EncodingUtils.testBit(__isset_bitfield, __ISPREVIEW_ISSET_ID);
  }

  public void setIsPreviewIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISPREVIEW_ISSET_ID, value);
  }

  public long getPlannedStartAt() {
    return this.plannedStartAt;
  }

  public Job setPlannedStartAt(long plannedStartAt) {
    this.plannedStartAt = plannedStartAt;
    setPlannedStartAtIsSet(true);
    return this;
  }

  public void unsetPlannedStartAt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PLANNEDSTARTAT_ISSET_ID);
  }

  /** Returns true if field plannedStartAt is set (has been assigned a value) and false otherwise */
  public boolean isSetPlannedStartAt() {
    return EncodingUtils.testBit(__isset_bitfield, __PLANNEDSTARTAT_ISSET_ID);
  }

  public void setPlannedStartAtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PLANNEDSTARTAT_ISSET_ID, value);
  }

  public long getStartedAt() {
    return this.startedAt;
  }

  public Job setStartedAt(long startedAt) {
    this.startedAt = startedAt;
    setStartedAtIsSet(true);
    return this;
  }

  public void unsetStartedAt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTEDAT_ISSET_ID);
  }

  /** Returns true if field startedAt is set (has been assigned a value) and false otherwise */
  public boolean isSetStartedAt() {
    return EncodingUtils.testBit(__isset_bitfield, __STARTEDAT_ISSET_ID);
  }

  public void setStartedAtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTEDAT_ISSET_ID, value);
  }

  public String getCreatorId() {
    return this.creatorId;
  }

  public Job setCreatorId(String creatorId) {
    this.creatorId = creatorId;
    return this;
  }

  public void unsetCreatorId() {
    this.creatorId = null;
  }

  /** Returns true if field creatorId is set (has been assigned a value) and false otherwise */
  public boolean isSetCreatorId() {
    return this.creatorId != null;
  }

  public void setCreatorIdIsSet(boolean value) {
    if (!value) {
      this.creatorId = null;
    }
  }

  public int getMetadataByIdSize() {
    return (this.metadataById == null) ? 0 : this.metadataById.size();
  }

  public void putToMetadataById(String key, com.wi.director.thrift.v1.metadata.MetadataEntry val) {
    if (this.metadataById == null) {
      this.metadataById = new HashMap<String,com.wi.director.thrift.v1.metadata.MetadataEntry>();
    }
    this.metadataById.put(key, val);
  }

  public Map<String,com.wi.director.thrift.v1.metadata.MetadataEntry> getMetadataById() {
    return this.metadataById;
  }

  public Job setMetadataById(Map<String,com.wi.director.thrift.v1.metadata.MetadataEntry> metadataById) {
    this.metadataById = metadataById;
    return this;
  }

  public void unsetMetadataById() {
    this.metadataById = null;
  }

  /** Returns true if field metadataById is set (has been assigned a value) and false otherwise */
  public boolean isSetMetadataById() {
    return this.metadataById != null;
  }

  public void setMetadataByIdIsSet(boolean value) {
    if (!value) {
      this.metadataById = null;
    }
  }

  public boolean isMeshEnabled() {
    return this.meshEnabled;
  }

  public Job setMeshEnabled(boolean meshEnabled) {
    this.meshEnabled = meshEnabled;
    setMeshEnabledIsSet(true);
    return this;
  }

  public void unsetMeshEnabled() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MESHENABLED_ISSET_ID);
  }

  /** Returns true if field meshEnabled is set (has been assigned a value) and false otherwise */
  public boolean isSetMeshEnabled() {
    return EncodingUtils.testBit(__isset_bitfield, __MESHENABLED_ISSET_ID);
  }

  public void setMeshEnabledIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MESHENABLED_ISSET_ID, value);
  }

  public boolean isStartAuto() {
    return this.startAuto;
  }

  public Job setStartAuto(boolean startAuto) {
    this.startAuto = startAuto;
    setStartAutoIsSet(true);
    return this;
  }

  public void unsetStartAuto() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTAUTO_ISSET_ID);
  }

  /** Returns true if field startAuto is set (has been assigned a value) and false otherwise */
  public boolean isSetStartAuto() {
    return EncodingUtils.testBit(__isset_bitfield, __STARTAUTO_ISSET_ID);
  }

  public void setStartAutoIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTAUTO_ISSET_ID, value);
  }

  /**
   * 
   * @see JobType
   */
  public JobType getJobType() {
    return this.jobType;
  }

  /**
   * 
   * @see JobType
   */
  public Job setJobType(JobType jobType) {
    this.jobType = jobType;
    return this;
  }

  public void unsetJobType() {
    this.jobType = null;
  }

  /** Returns true if field jobType is set (has been assigned a value) and false otherwise */
  public boolean isSetJobType() {
    return this.jobType != null;
  }

  public void setJobTypeIsSet(boolean value) {
    if (!value) {
      this.jobType = null;
    }
  }

  public boolean isUsingEvents() {
    return this.usingEvents;
  }

  public Job setUsingEvents(boolean usingEvents) {
    this.usingEvents = usingEvents;
    setUsingEventsIsSet(true);
    return this;
  }

  public void unsetUsingEvents() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USINGEVENTS_ISSET_ID);
  }

  /** Returns true if field usingEvents is set (has been assigned a value) and false otherwise */
  public boolean isSetUsingEvents() {
    return EncodingUtils.testBit(__isset_bitfield, __USINGEVENTS_ISSET_ID);
  }

  public void setUsingEventsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USINGEVENTS_ISSET_ID, value);
  }

  /**
   * If JobType is Issue, optionally specify a source of the issue. <br>
   * If job is an instance started from an AdHoc (on-demand) job, specify the source job. <br>
   * Currently, only accepting references down to the detail of a step/group. <br>
   */
  public com.wi.director.thrift.v1.messaging.JobPtr getSrc() {
    return this.src;
  }

  /**
   * If JobType is Issue, optionally specify a source of the issue. <br>
   * If job is an instance started from an AdHoc (on-demand) job, specify the source job. <br>
   * Currently, only accepting references down to the detail of a step/group. <br>
   */
  public Job setSrc(com.wi.director.thrift.v1.messaging.JobPtr src) {
    this.src = src;
    return this;
  }

  public void unsetSrc() {
    this.src = null;
  }

  /** Returns true if field src is set (has been assigned a value) and false otherwise */
  public boolean isSetSrc() {
    return this.src != null;
  }

  public void setSrcIsSet(boolean value) {
    if (!value) {
      this.src = null;
    }
  }

  public long getArchivedAt() {
    return this.archivedAt;
  }

  public Job setArchivedAt(long archivedAt) {
    this.archivedAt = archivedAt;
    setArchivedAtIsSet(true);
    return this;
  }

  public void unsetArchivedAt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ARCHIVEDAT_ISSET_ID);
  }

  /** Returns true if field archivedAt is set (has been assigned a value) and false otherwise */
  public boolean isSetArchivedAt() {
    return EncodingUtils.testBit(__isset_bitfield, __ARCHIVEDAT_ISSET_ID);
  }

  public void setArchivedAtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ARCHIVEDAT_ISSET_ID, value);
  }

  public String getLocation() {
    return this.location;
  }

  public Job setLocation(String location) {
    this.location = location;
    return this;
  }

  public void unsetLocation() {
    this.location = null;
  }

  /** Returns true if field location is set (has been assigned a value) and false otherwise */
  public boolean isSetLocation() {
    return this.location != null;
  }

  public void setLocationIsSet(boolean value) {
    if (!value) {
      this.location = null;
    }
  }

  public int getPlannedStartJobRoleIdsSize() {
    return (this.plannedStartJobRoleIds == null) ? 0 : this.plannedStartJobRoleIds.size();
  }

  public java.util.Iterator<String> getPlannedStartJobRoleIdsIterator() {
    return (this.plannedStartJobRoleIds == null) ? null : this.plannedStartJobRoleIds.iterator();
  }

  public void addToPlannedStartJobRoleIds(String elem) {
    if (this.plannedStartJobRoleIds == null) {
      this.plannedStartJobRoleIds = new ArrayList<String>();
    }
    this.plannedStartJobRoleIds.add(elem);
  }

  /**
   * If JobType is AdHoc, this must be a non-empty, valid job role id list for
   * the user starting an ad hoc job to be assigned the following roles.
   * This is in addition to the roles already assigned to this user during planning.
   */
  public List<String> getPlannedStartJobRoleIds() {
    return this.plannedStartJobRoleIds;
  }

  /**
   * If JobType is AdHoc, this must be a non-empty, valid job role id list for
   * the user starting an ad hoc job to be assigned the following roles.
   * This is in addition to the roles already assigned to this user during planning.
   */
  public Job setPlannedStartJobRoleIds(List<String> plannedStartJobRoleIds) {
    this.plannedStartJobRoleIds = plannedStartJobRoleIds;
    return this;
  }

  public void unsetPlannedStartJobRoleIds() {
    this.plannedStartJobRoleIds = null;
  }

  /** Returns true if field plannedStartJobRoleIds is set (has been assigned a value) and false otherwise */
  public boolean isSetPlannedStartJobRoleIds() {
    return this.plannedStartJobRoleIds != null;
  }

  public void setPlannedStartJobRoleIdsIsSet(boolean value) {
    if (!value) {
      this.plannedStartJobRoleIds = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((String)value);
      }
      break;

    case STEP_GROUP:
      if (value == null) {
        unsetStepGroup();
      } else {
        setStepGroup((com.wi.director.thrift.v1.step.BaseStep)value);
      }
      break;

    case TEAM:
      if (value == null) {
        unsetTeam();
      } else {
        setTeam((com.wi.director.thrift.v1.team.Team)value);
      }
      break;

    case JOB_TEMPLATE_ID:
      if (value == null) {
        unsetJobTemplateId();
      } else {
        setJobTemplateId((String)value);
      }
      break;

    case JOB_TEMPLATE_VERSION:
      if (value == null) {
        unsetJobTemplateVersion();
      } else {
        setJobTemplateVersion((Integer)value);
      }
      break;

    case COMPLETED_AT:
      if (value == null) {
        unsetCompletedAt();
      } else {
        setCompletedAt((Long)value);
      }
      break;

    case DOCUMENT_EMAIL_ADDRESS:
      if (value == null) {
        unsetDocumentEmailAddress();
      } else {
        setDocumentEmailAddress((String)value);
      }
      break;

    case CREATED_AT:
      if (value == null) {
        unsetCreatedAt();
      } else {
        setCreatedAt((Long)value);
      }
      break;

    case DOCUMENTS:
      if (value == null) {
        unsetDocuments();
      } else {
        setDocuments((List<com.wi.director.thrift.v1.document.Document>)value);
      }
      break;

    case JOB_USERS:
      if (value == null) {
        unsetJobUsers();
      } else {
        setJobUsers((List<JobUser>)value);
      }
      break;

    case COMPLETED_STEPS:
      if (value == null) {
        unsetCompletedSteps();
      } else {
        setCompletedSteps((Integer)value);
      }
      break;

    case TOTAL_STEPS:
      if (value == null) {
        unsetTotalSteps();
      } else {
        setTotalSteps((Integer)value);
      }
      break;

    case REASON_COMPLETED:
      if (value == null) {
        unsetReasonCompleted();
      } else {
        setReasonCompleted((String)value);
      }
      break;

    case IS_PREVIEW:
      if (value == null) {
        unsetIsPreview();
      } else {
        setIsPreview((Boolean)value);
      }
      break;

    case PLANNED_START_AT:
      if (value == null) {
        unsetPlannedStartAt();
      } else {
        setPlannedStartAt((Long)value);
      }
      break;

    case STARTED_AT:
      if (value == null) {
        unsetStartedAt();
      } else {
        setStartedAt((Long)value);
      }
      break;

    case CREATOR_ID:
      if (value == null) {
        unsetCreatorId();
      } else {
        setCreatorId((String)value);
      }
      break;

    case METADATA_BY_ID:
      if (value == null) {
        unsetMetadataById();
      } else {
        setMetadataById((Map<String,com.wi.director.thrift.v1.metadata.MetadataEntry>)value);
      }
      break;

    case MESH_ENABLED:
      if (value == null) {
        unsetMeshEnabled();
      } else {
        setMeshEnabled((Boolean)value);
      }
      break;

    case START_AUTO:
      if (value == null) {
        unsetStartAuto();
      } else {
        setStartAuto((Boolean)value);
      }
      break;

    case JOB_TYPE:
      if (value == null) {
        unsetJobType();
      } else {
        setJobType((JobType)value);
      }
      break;

    case USING_EVENTS:
      if (value == null) {
        unsetUsingEvents();
      } else {
        setUsingEvents((Boolean)value);
      }
      break;

    case SRC:
      if (value == null) {
        unsetSrc();
      } else {
        setSrc((com.wi.director.thrift.v1.messaging.JobPtr)value);
      }
      break;

    case ARCHIVED_AT:
      if (value == null) {
        unsetArchivedAt();
      } else {
        setArchivedAt((Long)value);
      }
      break;

    case LOCATION:
      if (value == null) {
        unsetLocation();
      } else {
        setLocation((String)value);
      }
      break;

    case PLANNED_START_JOB_ROLE_IDS:
      if (value == null) {
        unsetPlannedStartJobRoleIds();
      } else {
        setPlannedStartJobRoleIds((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case TITLE:
      return getTitle();

    case STEP_GROUP:
      return getStepGroup();

    case TEAM:
      return getTeam();

    case JOB_TEMPLATE_ID:
      return getJobTemplateId();

    case JOB_TEMPLATE_VERSION:
      return getJobTemplateVersion();

    case COMPLETED_AT:
      return getCompletedAt();

    case DOCUMENT_EMAIL_ADDRESS:
      return getDocumentEmailAddress();

    case CREATED_AT:
      return getCreatedAt();

    case DOCUMENTS:
      return getDocuments();

    case JOB_USERS:
      return getJobUsers();

    case COMPLETED_STEPS:
      return getCompletedSteps();

    case TOTAL_STEPS:
      return getTotalSteps();

    case REASON_COMPLETED:
      return getReasonCompleted();

    case IS_PREVIEW:
      return isIsPreview();

    case PLANNED_START_AT:
      return getPlannedStartAt();

    case STARTED_AT:
      return getStartedAt();

    case CREATOR_ID:
      return getCreatorId();

    case METADATA_BY_ID:
      return getMetadataById();

    case MESH_ENABLED:
      return isMeshEnabled();

    case START_AUTO:
      return isStartAuto();

    case JOB_TYPE:
      return getJobType();

    case USING_EVENTS:
      return isUsingEvents();

    case SRC:
      return getSrc();

    case ARCHIVED_AT:
      return getArchivedAt();

    case LOCATION:
      return getLocation();

    case PLANNED_START_JOB_ROLE_IDS:
      return getPlannedStartJobRoleIds();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case TITLE:
      return isSetTitle();
    case STEP_GROUP:
      return isSetStepGroup();
    case TEAM:
      return isSetTeam();
    case JOB_TEMPLATE_ID:
      return isSetJobTemplateId();
    case JOB_TEMPLATE_VERSION:
      return isSetJobTemplateVersion();
    case COMPLETED_AT:
      return isSetCompletedAt();
    case DOCUMENT_EMAIL_ADDRESS:
      return isSetDocumentEmailAddress();
    case CREATED_AT:
      return isSetCreatedAt();
    case DOCUMENTS:
      return isSetDocuments();
    case JOB_USERS:
      return isSetJobUsers();
    case COMPLETED_STEPS:
      return isSetCompletedSteps();
    case TOTAL_STEPS:
      return isSetTotalSteps();
    case REASON_COMPLETED:
      return isSetReasonCompleted();
    case IS_PREVIEW:
      return isSetIsPreview();
    case PLANNED_START_AT:
      return isSetPlannedStartAt();
    case STARTED_AT:
      return isSetStartedAt();
    case CREATOR_ID:
      return isSetCreatorId();
    case METADATA_BY_ID:
      return isSetMetadataById();
    case MESH_ENABLED:
      return isSetMeshEnabled();
    case START_AUTO:
      return isSetStartAuto();
    case JOB_TYPE:
      return isSetJobType();
    case USING_EVENTS:
      return isSetUsingEvents();
    case SRC:
      return isSetSrc();
    case ARCHIVED_AT:
      return isSetArchivedAt();
    case LOCATION:
      return isSetLocation();
    case PLANNED_START_JOB_ROLE_IDS:
      return isSetPlannedStartJobRoleIds();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Job)
      return this.equals((Job)that);
    return false;
  }

  public boolean equals(Job that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_stepGroup = true && this.isSetStepGroup();
    boolean that_present_stepGroup = true && that.isSetStepGroup();
    if (this_present_stepGroup || that_present_stepGroup) {
      if (!(this_present_stepGroup && that_present_stepGroup))
        return false;
      if (!this.stepGroup.equals(that.stepGroup))
        return false;
    }

    boolean this_present_team = true && this.isSetTeam();
    boolean that_present_team = true && that.isSetTeam();
    if (this_present_team || that_present_team) {
      if (!(this_present_team && that_present_team))
        return false;
      if (!this.team.equals(that.team))
        return false;
    }

    boolean this_present_jobTemplateId = true && this.isSetJobTemplateId();
    boolean that_present_jobTemplateId = true && that.isSetJobTemplateId();
    if (this_present_jobTemplateId || that_present_jobTemplateId) {
      if (!(this_present_jobTemplateId && that_present_jobTemplateId))
        return false;
      if (!this.jobTemplateId.equals(that.jobTemplateId))
        return false;
    }

    boolean this_present_jobTemplateVersion = true;
    boolean that_present_jobTemplateVersion = true;
    if (this_present_jobTemplateVersion || that_present_jobTemplateVersion) {
      if (!(this_present_jobTemplateVersion && that_present_jobTemplateVersion))
        return false;
      if (this.jobTemplateVersion != that.jobTemplateVersion)
        return false;
    }

    boolean this_present_completedAt = true;
    boolean that_present_completedAt = true;
    if (this_present_completedAt || that_present_completedAt) {
      if (!(this_present_completedAt && that_present_completedAt))
        return false;
      if (this.completedAt != that.completedAt)
        return false;
    }

    boolean this_present_documentEmailAddress = true && this.isSetDocumentEmailAddress();
    boolean that_present_documentEmailAddress = true && that.isSetDocumentEmailAddress();
    if (this_present_documentEmailAddress || that_present_documentEmailAddress) {
      if (!(this_present_documentEmailAddress && that_present_documentEmailAddress))
        return false;
      if (!this.documentEmailAddress.equals(that.documentEmailAddress))
        return false;
    }

    boolean this_present_createdAt = true;
    boolean that_present_createdAt = true;
    if (this_present_createdAt || that_present_createdAt) {
      if (!(this_present_createdAt && that_present_createdAt))
        return false;
      if (this.createdAt != that.createdAt)
        return false;
    }

    boolean this_present_documents = true && this.isSetDocuments();
    boolean that_present_documents = true && that.isSetDocuments();
    if (this_present_documents || that_present_documents) {
      if (!(this_present_documents && that_present_documents))
        return false;
      if (!this.documents.equals(that.documents))
        return false;
    }

    boolean this_present_jobUsers = true && this.isSetJobUsers();
    boolean that_present_jobUsers = true && that.isSetJobUsers();
    if (this_present_jobUsers || that_present_jobUsers) {
      if (!(this_present_jobUsers && that_present_jobUsers))
        return false;
      if (!this.jobUsers.equals(that.jobUsers))
        return false;
    }

    boolean this_present_completedSteps = true;
    boolean that_present_completedSteps = true;
    if (this_present_completedSteps || that_present_completedSteps) {
      if (!(this_present_completedSteps && that_present_completedSteps))
        return false;
      if (this.completedSteps != that.completedSteps)
        return false;
    }

    boolean this_present_totalSteps = true;
    boolean that_present_totalSteps = true;
    if (this_present_totalSteps || that_present_totalSteps) {
      if (!(this_present_totalSteps && that_present_totalSteps))
        return false;
      if (this.totalSteps != that.totalSteps)
        return false;
    }

    boolean this_present_reasonCompleted = true && this.isSetReasonCompleted();
    boolean that_present_reasonCompleted = true && that.isSetReasonCompleted();
    if (this_present_reasonCompleted || that_present_reasonCompleted) {
      if (!(this_present_reasonCompleted && that_present_reasonCompleted))
        return false;
      if (!this.reasonCompleted.equals(that.reasonCompleted))
        return false;
    }

    boolean this_present_isPreview = true;
    boolean that_present_isPreview = true;
    if (this_present_isPreview || that_present_isPreview) {
      if (!(this_present_isPreview && that_present_isPreview))
        return false;
      if (this.isPreview != that.isPreview)
        return false;
    }

    boolean this_present_plannedStartAt = true;
    boolean that_present_plannedStartAt = true;
    if (this_present_plannedStartAt || that_present_plannedStartAt) {
      if (!(this_present_plannedStartAt && that_present_plannedStartAt))
        return false;
      if (this.plannedStartAt != that.plannedStartAt)
        return false;
    }

    boolean this_present_startedAt = true;
    boolean that_present_startedAt = true;
    if (this_present_startedAt || that_present_startedAt) {
      if (!(this_present_startedAt && that_present_startedAt))
        return false;
      if (this.startedAt != that.startedAt)
        return false;
    }

    boolean this_present_creatorId = true && this.isSetCreatorId();
    boolean that_present_creatorId = true && that.isSetCreatorId();
    if (this_present_creatorId || that_present_creatorId) {
      if (!(this_present_creatorId && that_present_creatorId))
        return false;
      if (!this.creatorId.equals(that.creatorId))
        return false;
    }

    boolean this_present_metadataById = true && this.isSetMetadataById();
    boolean that_present_metadataById = true && that.isSetMetadataById();
    if (this_present_metadataById || that_present_metadataById) {
      if (!(this_present_metadataById && that_present_metadataById))
        return false;
      if (!this.metadataById.equals(that.metadataById))
        return false;
    }

    boolean this_present_meshEnabled = true;
    boolean that_present_meshEnabled = true;
    if (this_present_meshEnabled || that_present_meshEnabled) {
      if (!(this_present_meshEnabled && that_present_meshEnabled))
        return false;
      if (this.meshEnabled != that.meshEnabled)
        return false;
    }

    boolean this_present_startAuto = true && this.isSetStartAuto();
    boolean that_present_startAuto = true && that.isSetStartAuto();
    if (this_present_startAuto || that_present_startAuto) {
      if (!(this_present_startAuto && that_present_startAuto))
        return false;
      if (this.startAuto != that.startAuto)
        return false;
    }

    boolean this_present_jobType = true && this.isSetJobType();
    boolean that_present_jobType = true && that.isSetJobType();
    if (this_present_jobType || that_present_jobType) {
      if (!(this_present_jobType && that_present_jobType))
        return false;
      if (!this.jobType.equals(that.jobType))
        return false;
    }

    boolean this_present_usingEvents = true;
    boolean that_present_usingEvents = true;
    if (this_present_usingEvents || that_present_usingEvents) {
      if (!(this_present_usingEvents && that_present_usingEvents))
        return false;
      if (this.usingEvents != that.usingEvents)
        return false;
    }

    boolean this_present_src = true && this.isSetSrc();
    boolean that_present_src = true && that.isSetSrc();
    if (this_present_src || that_present_src) {
      if (!(this_present_src && that_present_src))
        return false;
      if (!this.src.equals(that.src))
        return false;
    }

    boolean this_present_archivedAt = true;
    boolean that_present_archivedAt = true;
    if (this_present_archivedAt || that_present_archivedAt) {
      if (!(this_present_archivedAt && that_present_archivedAt))
        return false;
      if (this.archivedAt != that.archivedAt)
        return false;
    }

    boolean this_present_location = true && this.isSetLocation();
    boolean that_present_location = true && that.isSetLocation();
    if (this_present_location || that_present_location) {
      if (!(this_present_location && that_present_location))
        return false;
      if (!this.location.equals(that.location))
        return false;
    }

    boolean this_present_plannedStartJobRoleIds = true && this.isSetPlannedStartJobRoleIds();
    boolean that_present_plannedStartJobRoleIds = true && that.isSetPlannedStartJobRoleIds();
    if (this_present_plannedStartJobRoleIds || that_present_plannedStartJobRoleIds) {
      if (!(this_present_plannedStartJobRoleIds && that_present_plannedStartJobRoleIds))
        return false;
      if (!this.plannedStartJobRoleIds.equals(that.plannedStartJobRoleIds))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_title = true && (isSetTitle());
    list.add(present_title);
    if (present_title)
      list.add(title);

    boolean present_stepGroup = true && (isSetStepGroup());
    list.add(present_stepGroup);
    if (present_stepGroup)
      list.add(stepGroup);

    boolean present_team = true && (isSetTeam());
    list.add(present_team);
    if (present_team)
      list.add(team);

    boolean present_jobTemplateId = true && (isSetJobTemplateId());
    list.add(present_jobTemplateId);
    if (present_jobTemplateId)
      list.add(jobTemplateId);

    boolean present_jobTemplateVersion = true;
    list.add(present_jobTemplateVersion);
    if (present_jobTemplateVersion)
      list.add(jobTemplateVersion);

    boolean present_completedAt = true;
    list.add(present_completedAt);
    if (present_completedAt)
      list.add(completedAt);

    boolean present_documentEmailAddress = true && (isSetDocumentEmailAddress());
    list.add(present_documentEmailAddress);
    if (present_documentEmailAddress)
      list.add(documentEmailAddress);

    boolean present_createdAt = true;
    list.add(present_createdAt);
    if (present_createdAt)
      list.add(createdAt);

    boolean present_documents = true && (isSetDocuments());
    list.add(present_documents);
    if (present_documents)
      list.add(documents);

    boolean present_jobUsers = true && (isSetJobUsers());
    list.add(present_jobUsers);
    if (present_jobUsers)
      list.add(jobUsers);

    boolean present_completedSteps = true;
    list.add(present_completedSteps);
    if (present_completedSteps)
      list.add(completedSteps);

    boolean present_totalSteps = true;
    list.add(present_totalSteps);
    if (present_totalSteps)
      list.add(totalSteps);

    boolean present_reasonCompleted = true && (isSetReasonCompleted());
    list.add(present_reasonCompleted);
    if (present_reasonCompleted)
      list.add(reasonCompleted);

    boolean present_isPreview = true;
    list.add(present_isPreview);
    if (present_isPreview)
      list.add(isPreview);

    boolean present_plannedStartAt = true;
    list.add(present_plannedStartAt);
    if (present_plannedStartAt)
      list.add(plannedStartAt);

    boolean present_startedAt = true;
    list.add(present_startedAt);
    if (present_startedAt)
      list.add(startedAt);

    boolean present_creatorId = true && (isSetCreatorId());
    list.add(present_creatorId);
    if (present_creatorId)
      list.add(creatorId);

    boolean present_metadataById = true && (isSetMetadataById());
    list.add(present_metadataById);
    if (present_metadataById)
      list.add(metadataById);

    boolean present_meshEnabled = true;
    list.add(present_meshEnabled);
    if (present_meshEnabled)
      list.add(meshEnabled);

    boolean present_startAuto = true && (isSetStartAuto());
    list.add(present_startAuto);
    if (present_startAuto)
      list.add(startAuto);

    boolean present_jobType = true && (isSetJobType());
    list.add(present_jobType);
    if (present_jobType)
      list.add(jobType.getValue());

    boolean present_usingEvents = true;
    list.add(present_usingEvents);
    if (present_usingEvents)
      list.add(usingEvents);

    boolean present_src = true && (isSetSrc());
    list.add(present_src);
    if (present_src)
      list.add(src);

    boolean present_archivedAt = true;
    list.add(present_archivedAt);
    if (present_archivedAt)
      list.add(archivedAt);

    boolean present_location = true && (isSetLocation());
    list.add(present_location);
    if (present_location)
      list.add(location);

    boolean present_plannedStartJobRoleIds = true && (isSetPlannedStartJobRoleIds());
    list.add(present_plannedStartJobRoleIds);
    if (present_plannedStartJobRoleIds)
      list.add(plannedStartJobRoleIds);

    return list.hashCode();
  }

  @Override
  public int compareTo(Job other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTitle()).compareTo(other.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStepGroup()).compareTo(other.isSetStepGroup());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStepGroup()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stepGroup, other.stepGroup);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTeam()).compareTo(other.isSetTeam());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeam()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.team, other.team);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJobTemplateId()).compareTo(other.isSetJobTemplateId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJobTemplateId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobTemplateId, other.jobTemplateId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJobTemplateVersion()).compareTo(other.isSetJobTemplateVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJobTemplateVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobTemplateVersion, other.jobTemplateVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompletedAt()).compareTo(other.isSetCompletedAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompletedAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.completedAt, other.completedAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDocumentEmailAddress()).compareTo(other.isSetDocumentEmailAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDocumentEmailAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.documentEmailAddress, other.documentEmailAddress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreatedAt()).compareTo(other.isSetCreatedAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreatedAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createdAt, other.createdAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDocuments()).compareTo(other.isSetDocuments());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDocuments()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.documents, other.documents);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJobUsers()).compareTo(other.isSetJobUsers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJobUsers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobUsers, other.jobUsers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompletedSteps()).compareTo(other.isSetCompletedSteps());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompletedSteps()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.completedSteps, other.completedSteps);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalSteps()).compareTo(other.isSetTotalSteps());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalSteps()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalSteps, other.totalSteps);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReasonCompleted()).compareTo(other.isSetReasonCompleted());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReasonCompleted()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reasonCompleted, other.reasonCompleted);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsPreview()).compareTo(other.isSetIsPreview());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsPreview()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isPreview, other.isPreview);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlannedStartAt()).compareTo(other.isSetPlannedStartAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlannedStartAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.plannedStartAt, other.plannedStartAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartedAt()).compareTo(other.isSetStartedAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartedAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startedAt, other.startedAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreatorId()).compareTo(other.isSetCreatorId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreatorId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creatorId, other.creatorId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMetadataById()).compareTo(other.isSetMetadataById());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMetadataById()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metadataById, other.metadataById);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMeshEnabled()).compareTo(other.isSetMeshEnabled());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMeshEnabled()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.meshEnabled, other.meshEnabled);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartAuto()).compareTo(other.isSetStartAuto());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartAuto()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startAuto, other.startAuto);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJobType()).compareTo(other.isSetJobType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJobType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobType, other.jobType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUsingEvents()).compareTo(other.isSetUsingEvents());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsingEvents()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.usingEvents, other.usingEvents);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSrc()).compareTo(other.isSetSrc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSrc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src, other.src);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArchivedAt()).compareTo(other.isSetArchivedAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArchivedAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.archivedAt, other.archivedAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocation()).compareTo(other.isSetLocation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.location, other.location);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlannedStartJobRoleIds()).compareTo(other.isSetPlannedStartJobRoleIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlannedStartJobRoleIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.plannedStartJobRoleIds, other.plannedStartJobRoleIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Job(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("title:");
    if (this.title == null) {
      sb.append("null");
    } else {
      sb.append(this.title);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("stepGroup:");
    if (this.stepGroup == null) {
      sb.append("null");
    } else {
      sb.append(this.stepGroup);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("team:");
    if (this.team == null) {
      sb.append("null");
    } else {
      sb.append(this.team);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("jobTemplateId:");
    if (this.jobTemplateId == null) {
      sb.append("null");
    } else {
      sb.append(this.jobTemplateId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("jobTemplateVersion:");
    sb.append(this.jobTemplateVersion);
    first = false;
    if (!first) sb.append(", ");
    sb.append("completedAt:");
    sb.append(this.completedAt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("documentEmailAddress:");
    if (this.documentEmailAddress == null) {
      sb.append("null");
    } else {
      sb.append(this.documentEmailAddress);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createdAt:");
    sb.append(this.createdAt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("documents:");
    if (this.documents == null) {
      sb.append("null");
    } else {
      sb.append(this.documents);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("jobUsers:");
    if (this.jobUsers == null) {
      sb.append("null");
    } else {
      sb.append(this.jobUsers);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("completedSteps:");
    sb.append(this.completedSteps);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalSteps:");
    sb.append(this.totalSteps);
    first = false;
    if (!first) sb.append(", ");
    sb.append("reasonCompleted:");
    if (this.reasonCompleted == null) {
      sb.append("null");
    } else {
      sb.append(this.reasonCompleted);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isPreview:");
    sb.append(this.isPreview);
    first = false;
    if (!first) sb.append(", ");
    sb.append("plannedStartAt:");
    sb.append(this.plannedStartAt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("startedAt:");
    sb.append(this.startedAt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("creatorId:");
    if (this.creatorId == null) {
      sb.append("null");
    } else {
      sb.append(this.creatorId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("metadataById:");
    if (this.metadataById == null) {
      sb.append("null");
    } else {
      sb.append(this.metadataById);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("meshEnabled:");
    sb.append(this.meshEnabled);
    first = false;
    if (isSetStartAuto()) {
      if (!first) sb.append(", ");
      sb.append("startAuto:");
      sb.append(this.startAuto);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("jobType:");
    if (this.jobType == null) {
      sb.append("null");
    } else {
      sb.append(this.jobType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("usingEvents:");
    sb.append(this.usingEvents);
    first = false;
    if (isSetSrc()) {
      if (!first) sb.append(", ");
      sb.append("src:");
      if (this.src == null) {
        sb.append("null");
      } else {
        sb.append(this.src);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("archivedAt:");
    sb.append(this.archivedAt);
    first = false;
    if (isSetLocation()) {
      if (!first) sb.append(", ");
      sb.append("location:");
      if (this.location == null) {
        sb.append("null");
      } else {
        sb.append(this.location);
      }
      first = false;
    }
    if (isSetPlannedStartJobRoleIds()) {
      if (!first) sb.append(", ");
      sb.append("plannedStartJobRoleIds:");
      if (this.plannedStartJobRoleIds == null) {
        sb.append("null");
      } else {
        sb.append(this.plannedStartJobRoleIds);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (stepGroup != null) {
      stepGroup.validate();
    }
    if (team != null) {
      team.validate();
    }
    if (src != null) {
      src.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class JobStandardSchemeFactory implements SchemeFactory {
    public JobStandardScheme getScheme() {
      return new JobStandardScheme();
    }
  }

  private static class JobStandardScheme extends StandardScheme<Job> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Job struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STEP_GROUP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.stepGroup = new com.wi.director.thrift.v1.step.BaseStep();
              struct.stepGroup.read(iprot);
              struct.setStepGroupIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TEAM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.team = new com.wi.director.thrift.v1.team.Team();
              struct.team.read(iprot);
              struct.setTeamIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // JOB_TEMPLATE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.jobTemplateId = iprot.readString();
              struct.setJobTemplateIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // JOB_TEMPLATE_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.jobTemplateVersion = iprot.readI32();
              struct.setJobTemplateVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // COMPLETED_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.completedAt = iprot.readI64();
              struct.setCompletedAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DOCUMENT_EMAIL_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.documentEmailAddress = iprot.readString();
              struct.setDocumentEmailAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CREATED_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createdAt = iprot.readI64();
              struct.setCreatedAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // DOCUMENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list57 = iprot.readListBegin();
                struct.documents = new ArrayList<com.wi.director.thrift.v1.document.Document>(_list57.size);
                com.wi.director.thrift.v1.document.Document _elem58;
                for (int _i59 = 0; _i59 < _list57.size; ++_i59)
                {
                  _elem58 = new com.wi.director.thrift.v1.document.Document();
                  _elem58.read(iprot);
                  struct.documents.add(_elem58);
                }
                iprot.readListEnd();
              }
              struct.setDocumentsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // JOB_USERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list60 = iprot.readListBegin();
                struct.jobUsers = new ArrayList<JobUser>(_list60.size);
                JobUser _elem61;
                for (int _i62 = 0; _i62 < _list60.size; ++_i62)
                {
                  _elem61 = new JobUser();
                  _elem61.read(iprot);
                  struct.jobUsers.add(_elem61);
                }
                iprot.readListEnd();
              }
              struct.setJobUsersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // COMPLETED_STEPS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.completedSteps = iprot.readI32();
              struct.setCompletedStepsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // TOTAL_STEPS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalSteps = iprot.readI32();
              struct.setTotalStepsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // REASON_COMPLETED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reasonCompleted = iprot.readString();
              struct.setReasonCompletedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // IS_PREVIEW
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isPreview = iprot.readBool();
              struct.setIsPreviewIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // PLANNED_START_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.plannedStartAt = iprot.readI64();
              struct.setPlannedStartAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // STARTED_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.startedAt = iprot.readI64();
              struct.setStartedAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // CREATOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.creatorId = iprot.readString();
              struct.setCreatorIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // METADATA_BY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map63 = iprot.readMapBegin();
                struct.metadataById = new HashMap<String,com.wi.director.thrift.v1.metadata.MetadataEntry>(2*_map63.size);
                String _key64;
                com.wi.director.thrift.v1.metadata.MetadataEntry _val65;
                for (int _i66 = 0; _i66 < _map63.size; ++_i66)
                {
                  _key64 = iprot.readString();
                  _val65 = new com.wi.director.thrift.v1.metadata.MetadataEntry();
                  _val65.read(iprot);
                  struct.metadataById.put(_key64, _val65);
                }
                iprot.readMapEnd();
              }
              struct.setMetadataByIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // MESH_ENABLED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.meshEnabled = iprot.readBool();
              struct.setMeshEnabledIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // START_AUTO
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.startAuto = iprot.readBool();
              struct.setStartAutoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // JOB_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.jobType = com.wi.director.thrift.v1.job.JobType.findByValue(iprot.readI32());
              struct.setJobTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // USING_EVENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.usingEvents = iprot.readBool();
              struct.setUsingEventsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // SRC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.src = new com.wi.director.thrift.v1.messaging.JobPtr();
              struct.src.read(iprot);
              struct.setSrcIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // ARCHIVED_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.archivedAt = iprot.readI64();
              struct.setArchivedAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // LOCATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.location = iprot.readString();
              struct.setLocationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // PLANNED_START_JOB_ROLE_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list67 = iprot.readListBegin();
                struct.plannedStartJobRoleIds = new ArrayList<String>(_list67.size);
                String _elem68;
                for (int _i69 = 0; _i69 < _list67.size; ++_i69)
                {
                  _elem68 = iprot.readString();
                  struct.plannedStartJobRoleIds.add(_elem68);
                }
                iprot.readListEnd();
              }
              struct.setPlannedStartJobRoleIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Job struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.title != null) {
        oprot.writeFieldBegin(TITLE_FIELD_DESC);
        oprot.writeString(struct.title);
        oprot.writeFieldEnd();
      }
      if (struct.stepGroup != null) {
        oprot.writeFieldBegin(STEP_GROUP_FIELD_DESC);
        struct.stepGroup.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.team != null) {
        oprot.writeFieldBegin(TEAM_FIELD_DESC);
        struct.team.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.jobTemplateId != null) {
        oprot.writeFieldBegin(JOB_TEMPLATE_ID_FIELD_DESC);
        oprot.writeString(struct.jobTemplateId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(JOB_TEMPLATE_VERSION_FIELD_DESC);
      oprot.writeI32(struct.jobTemplateVersion);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COMPLETED_AT_FIELD_DESC);
      oprot.writeI64(struct.completedAt);
      oprot.writeFieldEnd();
      if (struct.documentEmailAddress != null) {
        oprot.writeFieldBegin(DOCUMENT_EMAIL_ADDRESS_FIELD_DESC);
        oprot.writeString(struct.documentEmailAddress);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATED_AT_FIELD_DESC);
      oprot.writeI64(struct.createdAt);
      oprot.writeFieldEnd();
      if (struct.documents != null) {
        oprot.writeFieldBegin(DOCUMENTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.documents.size()));
          for (com.wi.director.thrift.v1.document.Document _iter70 : struct.documents)
          {
            _iter70.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.jobUsers != null) {
        oprot.writeFieldBegin(JOB_USERS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.jobUsers.size()));
          for (JobUser _iter71 : struct.jobUsers)
          {
            _iter71.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(COMPLETED_STEPS_FIELD_DESC);
      oprot.writeI32(struct.completedSteps);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_STEPS_FIELD_DESC);
      oprot.writeI32(struct.totalSteps);
      oprot.writeFieldEnd();
      if (struct.reasonCompleted != null) {
        oprot.writeFieldBegin(REASON_COMPLETED_FIELD_DESC);
        oprot.writeString(struct.reasonCompleted);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_PREVIEW_FIELD_DESC);
      oprot.writeBool(struct.isPreview);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PLANNED_START_AT_FIELD_DESC);
      oprot.writeI64(struct.plannedStartAt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STARTED_AT_FIELD_DESC);
      oprot.writeI64(struct.startedAt);
      oprot.writeFieldEnd();
      if (struct.creatorId != null) {
        oprot.writeFieldBegin(CREATOR_ID_FIELD_DESC);
        oprot.writeString(struct.creatorId);
        oprot.writeFieldEnd();
      }
      if (struct.metadataById != null) {
        oprot.writeFieldBegin(METADATA_BY_ID_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.metadataById.size()));
          for (Map.Entry<String, com.wi.director.thrift.v1.metadata.MetadataEntry> _iter72 : struct.metadataById.entrySet())
          {
            oprot.writeString(_iter72.getKey());
            _iter72.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MESH_ENABLED_FIELD_DESC);
      oprot.writeBool(struct.meshEnabled);
      oprot.writeFieldEnd();
      if (struct.isSetStartAuto()) {
        oprot.writeFieldBegin(START_AUTO_FIELD_DESC);
        oprot.writeBool(struct.startAuto);
        oprot.writeFieldEnd();
      }
      if (struct.jobType != null) {
        oprot.writeFieldBegin(JOB_TYPE_FIELD_DESC);
        oprot.writeI32(struct.jobType.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(USING_EVENTS_FIELD_DESC);
      oprot.writeBool(struct.usingEvents);
      oprot.writeFieldEnd();
      if (struct.src != null) {
        if (struct.isSetSrc()) {
          oprot.writeFieldBegin(SRC_FIELD_DESC);
          struct.src.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(ARCHIVED_AT_FIELD_DESC);
      oprot.writeI64(struct.archivedAt);
      oprot.writeFieldEnd();
      if (struct.location != null) {
        if (struct.isSetLocation()) {
          oprot.writeFieldBegin(LOCATION_FIELD_DESC);
          oprot.writeString(struct.location);
          oprot.writeFieldEnd();
        }
      }
      if (struct.plannedStartJobRoleIds != null) {
        if (struct.isSetPlannedStartJobRoleIds()) {
          oprot.writeFieldBegin(PLANNED_START_JOB_ROLE_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.plannedStartJobRoleIds.size()));
            for (String _iter73 : struct.plannedStartJobRoleIds)
            {
              oprot.writeString(_iter73);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

}

