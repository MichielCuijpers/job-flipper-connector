/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wi.director.thrift.v1.metadata;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class Metadata implements org.apache.thrift.TBase<Metadata, Metadata._Fields>, java.io.Serializable, Cloneable, Comparable<Metadata> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Metadata");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField CONSTRAINTS_FIELD_DESC = new org.apache.thrift.protocol.TField("constraints", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField OWNER_FIELD_DESC = new org.apache.thrift.protocol.TField("owner", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField CREATED_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("createdAt", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField IS_REQUIRED_FIELD_DESC = new org.apache.thrift.protocol.TField("isRequired", org.apache.thrift.protocol.TType.BOOL, (short)7);
  private static final org.apache.thrift.protocol.TField ARCHIVED_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("archivedAt", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField UPDATED_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("updatedAt", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField POSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("position", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField DEFAULT_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("defaultValue", org.apache.thrift.protocol.TType.STRUCT, (short)11);
  private static final org.apache.thrift.protocol.TField CLEAR_DEFAULT_FIELD_DESC = new org.apache.thrift.protocol.TField("clearDefault", org.apache.thrift.protocol.TType.BOOL, (short)12);
  private static final org.apache.thrift.protocol.TField EXTERNALLY_MANAGED_FIELD_DESC = new org.apache.thrift.protocol.TField("externallyManaged", org.apache.thrift.protocol.TType.BOOL, (short)13);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MetadataStandardSchemeFactory());
  }

  public String id; // required
  /**
   * Display name of metadata element
   */
  public String key; // required
  /**
   * Type of metadata element
   * 
   * @see MetadataType
   */
  public MetadataType type; // required
  /**
   * Optional constraints for list or numeric
   */
  public Constraints constraints; // required
  /**
   * Owning scope for metadata
   * 
   * @see Owner
   */
  public Owner owner; // required
  /**
   * Timestamp of when the Metadata was created
   */
  public long createdAt; // required
  /**
   * Is data required (for template metadata, before starting)
   */
  public boolean isRequired; // required
  /**
   * Timestamp of when the Metadata was archived, or 0 if not archived
   */
  public long archivedAt; // required
  /**
   * Timestamp of when the Metadata was last updated
   */
  public long updatedAt; // required
  /**
   * Display position, used as the sort index;
   * if not passed in, add 1.0 to highest for team+owner
   */
  public double position; // optional
  /**
   * Default value to display when a field is newly added or cleared. See <a href="https://parsable.zendesk.com/hc/en-us/articles/115004740947">Setting Default Values for Metadata</a> for usage explanation.
   */
  public MetadataValue defaultValue; // optional
  /**
   * Flag to clear the default value, if previously set
   */
  public boolean clearDefault; // optional
  /**
   * Flag to indicate this field is externally managed
   */
  public boolean externallyManaged; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    /**
     * Display name of metadata element
     */
    KEY((short)2, "key"),
    /**
     * Type of metadata element
     * 
     * @see MetadataType
     */
    TYPE((short)3, "type"),
    /**
     * Optional constraints for list or numeric
     */
    CONSTRAINTS((short)4, "constraints"),
    /**
     * Owning scope for metadata
     * 
     * @see Owner
     */
    OWNER((short)5, "owner"),
    /**
     * Timestamp of when the Metadata was created
     */
    CREATED_AT((short)6, "createdAt"),
    /**
     * Is data required (for template metadata, before starting)
     */
    IS_REQUIRED((short)7, "isRequired"),
    /**
     * Timestamp of when the Metadata was archived, or 0 if not archived
     */
    ARCHIVED_AT((short)8, "archivedAt"),
    /**
     * Timestamp of when the Metadata was last updated
     */
    UPDATED_AT((short)9, "updatedAt"),
    /**
     * Display position, used as the sort index;
     * if not passed in, add 1.0 to highest for team+owner
     */
    POSITION((short)10, "position"),
    /**
     * Default value to display when a field is newly added or cleared. See <a href="https://parsable.zendesk.com/hc/en-us/articles/115004740947">Setting Default Values for Metadata</a> for usage explanation.
     */
    DEFAULT_VALUE((short)11, "defaultValue"),
    /**
     * Flag to clear the default value, if previously set
     */
    CLEAR_DEFAULT((short)12, "clearDefault"),
    /**
     * Flag to indicate this field is externally managed
     */
    EXTERNALLY_MANAGED((short)13, "externallyManaged");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // KEY
          return KEY;
        case 3: // TYPE
          return TYPE;
        case 4: // CONSTRAINTS
          return CONSTRAINTS;
        case 5: // OWNER
          return OWNER;
        case 6: // CREATED_AT
          return CREATED_AT;
        case 7: // IS_REQUIRED
          return IS_REQUIRED;
        case 8: // ARCHIVED_AT
          return ARCHIVED_AT;
        case 9: // UPDATED_AT
          return UPDATED_AT;
        case 10: // POSITION
          return POSITION;
        case 11: // DEFAULT_VALUE
          return DEFAULT_VALUE;
        case 12: // CLEAR_DEFAULT
          return CLEAR_DEFAULT;
        case 13: // EXTERNALLY_MANAGED
          return EXTERNALLY_MANAGED;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CREATEDAT_ISSET_ID = 0;
  private static final int __ISREQUIRED_ISSET_ID = 1;
  private static final int __ARCHIVEDAT_ISSET_ID = 2;
  private static final int __UPDATEDAT_ISSET_ID = 3;
  private static final int __POSITION_ISSET_ID = 4;
  private static final int __CLEARDEFAULT_ISSET_ID = 5;
  private static final int __EXTERNALLYMANAGED_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.POSITION,_Fields.DEFAULT_VALUE,_Fields.CLEAR_DEFAULT,_Fields.EXTERNALLY_MANAGED};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MetadataType.class)));
    tmpMap.put(_Fields.CONSTRAINTS, new org.apache.thrift.meta_data.FieldMetaData("constraints", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Constraints.class)));
    tmpMap.put(_Fields.OWNER, new org.apache.thrift.meta_data.FieldMetaData("owner", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Owner.class)));
    tmpMap.put(_Fields.CREATED_AT, new org.apache.thrift.meta_data.FieldMetaData("createdAt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.IS_REQUIRED, new org.apache.thrift.meta_data.FieldMetaData("isRequired", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ARCHIVED_AT, new org.apache.thrift.meta_data.FieldMetaData("archivedAt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.UPDATED_AT, new org.apache.thrift.meta_data.FieldMetaData("updatedAt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.POSITION, new org.apache.thrift.meta_data.FieldMetaData("position", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DEFAULT_VALUE, new org.apache.thrift.meta_data.FieldMetaData("defaultValue", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MetadataValue.class)));
    tmpMap.put(_Fields.CLEAR_DEFAULT, new org.apache.thrift.meta_data.FieldMetaData("clearDefault", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.EXTERNALLY_MANAGED, new org.apache.thrift.meta_data.FieldMetaData("externallyManaged", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Metadata.class, metaDataMap);
  }

  public Metadata() {
  }

  public Metadata(
    String id,
    String key,
    MetadataType type,
    Constraints constraints,
    Owner owner,
    long createdAt,
    boolean isRequired,
    long archivedAt,
    long updatedAt)
  {
    this();
    this.id = id;
    this.key = key;
    this.type = type;
    this.constraints = constraints;
    this.owner = owner;
    this.createdAt = createdAt;
    setCreatedAtIsSet(true);
    this.isRequired = isRequired;
    setIsRequiredIsSet(true);
    this.archivedAt = archivedAt;
    setArchivedAtIsSet(true);
    this.updatedAt = updatedAt;
    setUpdatedAtIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Metadata(Metadata other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetKey()) {
      this.key = other.key;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetConstraints()) {
      this.constraints = new Constraints(other.constraints);
    }
    if (other.isSetOwner()) {
      this.owner = other.owner;
    }
    this.createdAt = other.createdAt;
    this.isRequired = other.isRequired;
    this.archivedAt = other.archivedAt;
    this.updatedAt = other.updatedAt;
    this.position = other.position;
    if (other.isSetDefaultValue()) {
      this.defaultValue = new MetadataValue(other.defaultValue);
    }
    this.clearDefault = other.clearDefault;
    this.externallyManaged = other.externallyManaged;
  }

  public Metadata deepCopy() {
    return new Metadata(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.key = null;
    this.type = null;
    this.constraints = null;
    this.owner = null;
    setCreatedAtIsSet(false);
    this.createdAt = 0;
    setIsRequiredIsSet(false);
    this.isRequired = false;
    setArchivedAtIsSet(false);
    this.archivedAt = 0;
    setUpdatedAtIsSet(false);
    this.updatedAt = 0;
    setPositionIsSet(false);
    this.position = 0.0;
    this.defaultValue = null;
    setClearDefaultIsSet(false);
    this.clearDefault = false;
    setExternallyManagedIsSet(false);
    this.externallyManaged = false;
  }

  public String getId() {
    return this.id;
  }

  public Metadata setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  /**
   * Display name of metadata element
   */
  public String getKey() {
    return this.key;
  }

  /**
   * Display name of metadata element
   */
  public Metadata setKey(String key) {
    this.key = key;
    return this;
  }

  public void unsetKey() {
    this.key = null;
  }

  /** Returns true if field key is set (has been assigned a value) and false otherwise */
  public boolean isSetKey() {
    return this.key != null;
  }

  public void setKeyIsSet(boolean value) {
    if (!value) {
      this.key = null;
    }
  }

  /**
   * Type of metadata element
   * 
   * @see MetadataType
   */
  public MetadataType getType() {
    return this.type;
  }

  /**
   * Type of metadata element
   * 
   * @see MetadataType
   */
  public Metadata setType(MetadataType type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  /**
   * Optional constraints for list or numeric
   */
  public Constraints getConstraints() {
    return this.constraints;
  }

  /**
   * Optional constraints for list or numeric
   */
  public Metadata setConstraints(Constraints constraints) {
    this.constraints = constraints;
    return this;
  }

  public void unsetConstraints() {
    this.constraints = null;
  }

  /** Returns true if field constraints is set (has been assigned a value) and false otherwise */
  public boolean isSetConstraints() {
    return this.constraints != null;
  }

  public void setConstraintsIsSet(boolean value) {
    if (!value) {
      this.constraints = null;
    }
  }

  /**
   * Owning scope for metadata
   * 
   * @see Owner
   */
  public Owner getOwner() {
    return this.owner;
  }

  /**
   * Owning scope for metadata
   * 
   * @see Owner
   */
  public Metadata setOwner(Owner owner) {
    this.owner = owner;
    return this;
  }

  public void unsetOwner() {
    this.owner = null;
  }

  /** Returns true if field owner is set (has been assigned a value) and false otherwise */
  public boolean isSetOwner() {
    return this.owner != null;
  }

  public void setOwnerIsSet(boolean value) {
    if (!value) {
      this.owner = null;
    }
  }

  /**
   * Timestamp of when the Metadata was created
   */
  public long getCreatedAt() {
    return this.createdAt;
  }

  /**
   * Timestamp of when the Metadata was created
   */
  public Metadata setCreatedAt(long createdAt) {
    this.createdAt = createdAt;
    setCreatedAtIsSet(true);
    return this;
  }

  public void unsetCreatedAt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATEDAT_ISSET_ID);
  }

  /** Returns true if field createdAt is set (has been assigned a value) and false otherwise */
  public boolean isSetCreatedAt() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATEDAT_ISSET_ID);
  }

  public void setCreatedAtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATEDAT_ISSET_ID, value);
  }

  /**
   * Is data required (for template metadata, before starting)
   */
  public boolean isIsRequired() {
    return this.isRequired;
  }

  /**
   * Is data required (for template metadata, before starting)
   */
  public Metadata setIsRequired(boolean isRequired) {
    this.isRequired = isRequired;
    setIsRequiredIsSet(true);
    return this;
  }

  public void unsetIsRequired() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISREQUIRED_ISSET_ID);
  }

  /** Returns true if field isRequired is set (has been assigned a value) and false otherwise */
  public boolean isSetIsRequired() {
    return EncodingUtils.testBit(__isset_bitfield, __ISREQUIRED_ISSET_ID);
  }

  public void setIsRequiredIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISREQUIRED_ISSET_ID, value);
  }

  /**
   * Timestamp of when the Metadata was archived, or 0 if not archived
   */
  public long getArchivedAt() {
    return this.archivedAt;
  }

  /**
   * Timestamp of when the Metadata was archived, or 0 if not archived
   */
  public Metadata setArchivedAt(long archivedAt) {
    this.archivedAt = archivedAt;
    setArchivedAtIsSet(true);
    return this;
  }

  public void unsetArchivedAt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ARCHIVEDAT_ISSET_ID);
  }

  /** Returns true if field archivedAt is set (has been assigned a value) and false otherwise */
  public boolean isSetArchivedAt() {
    return EncodingUtils.testBit(__isset_bitfield, __ARCHIVEDAT_ISSET_ID);
  }

  public void setArchivedAtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ARCHIVEDAT_ISSET_ID, value);
  }

  /**
   * Timestamp of when the Metadata was last updated
   */
  public long getUpdatedAt() {
    return this.updatedAt;
  }

  /**
   * Timestamp of when the Metadata was last updated
   */
  public Metadata setUpdatedAt(long updatedAt) {
    this.updatedAt = updatedAt;
    setUpdatedAtIsSet(true);
    return this;
  }

  public void unsetUpdatedAt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPDATEDAT_ISSET_ID);
  }

  /** Returns true if field updatedAt is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdatedAt() {
    return EncodingUtils.testBit(__isset_bitfield, __UPDATEDAT_ISSET_ID);
  }

  public void setUpdatedAtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPDATEDAT_ISSET_ID, value);
  }

  /**
   * Display position, used as the sort index;
   * if not passed in, add 1.0 to highest for team+owner
   */
  public double getPosition() {
    return this.position;
  }

  /**
   * Display position, used as the sort index;
   * if not passed in, add 1.0 to highest for team+owner
   */
  public Metadata setPosition(double position) {
    this.position = position;
    setPositionIsSet(true);
    return this;
  }

  public void unsetPosition() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POSITION_ISSET_ID);
  }

  /** Returns true if field position is set (has been assigned a value) and false otherwise */
  public boolean isSetPosition() {
    return EncodingUtils.testBit(__isset_bitfield, __POSITION_ISSET_ID);
  }

  public void setPositionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POSITION_ISSET_ID, value);
  }

  /**
   * Default value to display when a field is newly added or cleared. See <a href="https://parsable.zendesk.com/hc/en-us/articles/115004740947">Setting Default Values for Metadata</a> for usage explanation.
   */
  public MetadataValue getDefaultValue() {
    return this.defaultValue;
  }

  /**
   * Default value to display when a field is newly added or cleared. See <a href="https://parsable.zendesk.com/hc/en-us/articles/115004740947">Setting Default Values for Metadata</a> for usage explanation.
   */
  public Metadata setDefaultValue(MetadataValue defaultValue) {
    this.defaultValue = defaultValue;
    return this;
  }

  public void unsetDefaultValue() {
    this.defaultValue = null;
  }

  /** Returns true if field defaultValue is set (has been assigned a value) and false otherwise */
  public boolean isSetDefaultValue() {
    return this.defaultValue != null;
  }

  public void setDefaultValueIsSet(boolean value) {
    if (!value) {
      this.defaultValue = null;
    }
  }

  /**
   * Flag to clear the default value, if previously set
   */
  public boolean isClearDefault() {
    return this.clearDefault;
  }

  /**
   * Flag to clear the default value, if previously set
   */
  public Metadata setClearDefault(boolean clearDefault) {
    this.clearDefault = clearDefault;
    setClearDefaultIsSet(true);
    return this;
  }

  public void unsetClearDefault() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CLEARDEFAULT_ISSET_ID);
  }

  /** Returns true if field clearDefault is set (has been assigned a value) and false otherwise */
  public boolean isSetClearDefault() {
    return EncodingUtils.testBit(__isset_bitfield, __CLEARDEFAULT_ISSET_ID);
  }

  public void setClearDefaultIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CLEARDEFAULT_ISSET_ID, value);
  }

  /**
   * Flag to indicate this field is externally managed
   */
  public boolean isExternallyManaged() {
    return this.externallyManaged;
  }

  /**
   * Flag to indicate this field is externally managed
   */
  public Metadata setExternallyManaged(boolean externallyManaged) {
    this.externallyManaged = externallyManaged;
    setExternallyManagedIsSet(true);
    return this;
  }

  public void unsetExternallyManaged() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXTERNALLYMANAGED_ISSET_ID);
  }

  /** Returns true if field externallyManaged is set (has been assigned a value) and false otherwise */
  public boolean isSetExternallyManaged() {
    return EncodingUtils.testBit(__isset_bitfield, __EXTERNALLYMANAGED_ISSET_ID);
  }

  public void setExternallyManagedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXTERNALLYMANAGED_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case KEY:
      if (value == null) {
        unsetKey();
      } else {
        setKey((String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((MetadataType)value);
      }
      break;

    case CONSTRAINTS:
      if (value == null) {
        unsetConstraints();
      } else {
        setConstraints((Constraints)value);
      }
      break;

    case OWNER:
      if (value == null) {
        unsetOwner();
      } else {
        setOwner((Owner)value);
      }
      break;

    case CREATED_AT:
      if (value == null) {
        unsetCreatedAt();
      } else {
        setCreatedAt((Long)value);
      }
      break;

    case IS_REQUIRED:
      if (value == null) {
        unsetIsRequired();
      } else {
        setIsRequired((Boolean)value);
      }
      break;

    case ARCHIVED_AT:
      if (value == null) {
        unsetArchivedAt();
      } else {
        setArchivedAt((Long)value);
      }
      break;

    case UPDATED_AT:
      if (value == null) {
        unsetUpdatedAt();
      } else {
        setUpdatedAt((Long)value);
      }
      break;

    case POSITION:
      if (value == null) {
        unsetPosition();
      } else {
        setPosition((Double)value);
      }
      break;

    case DEFAULT_VALUE:
      if (value == null) {
        unsetDefaultValue();
      } else {
        setDefaultValue((MetadataValue)value);
      }
      break;

    case CLEAR_DEFAULT:
      if (value == null) {
        unsetClearDefault();
      } else {
        setClearDefault((Boolean)value);
      }
      break;

    case EXTERNALLY_MANAGED:
      if (value == null) {
        unsetExternallyManaged();
      } else {
        setExternallyManaged((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case KEY:
      return getKey();

    case TYPE:
      return getType();

    case CONSTRAINTS:
      return getConstraints();

    case OWNER:
      return getOwner();

    case CREATED_AT:
      return getCreatedAt();

    case IS_REQUIRED:
      return isIsRequired();

    case ARCHIVED_AT:
      return getArchivedAt();

    case UPDATED_AT:
      return getUpdatedAt();

    case POSITION:
      return getPosition();

    case DEFAULT_VALUE:
      return getDefaultValue();

    case CLEAR_DEFAULT:
      return isClearDefault();

    case EXTERNALLY_MANAGED:
      return isExternallyManaged();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case KEY:
      return isSetKey();
    case TYPE:
      return isSetType();
    case CONSTRAINTS:
      return isSetConstraints();
    case OWNER:
      return isSetOwner();
    case CREATED_AT:
      return isSetCreatedAt();
    case IS_REQUIRED:
      return isSetIsRequired();
    case ARCHIVED_AT:
      return isSetArchivedAt();
    case UPDATED_AT:
      return isSetUpdatedAt();
    case POSITION:
      return isSetPosition();
    case DEFAULT_VALUE:
      return isSetDefaultValue();
    case CLEAR_DEFAULT:
      return isSetClearDefault();
    case EXTERNALLY_MANAGED:
      return isSetExternallyManaged();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Metadata)
      return this.equals((Metadata)that);
    return false;
  }

  public boolean equals(Metadata that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_key = true && this.isSetKey();
    boolean that_present_key = true && that.isSetKey();
    if (this_present_key || that_present_key) {
      if (!(this_present_key && that_present_key))
        return false;
      if (!this.key.equals(that.key))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_constraints = true && this.isSetConstraints();
    boolean that_present_constraints = true && that.isSetConstraints();
    if (this_present_constraints || that_present_constraints) {
      if (!(this_present_constraints && that_present_constraints))
        return false;
      if (!this.constraints.equals(that.constraints))
        return false;
    }

    boolean this_present_owner = true && this.isSetOwner();
    boolean that_present_owner = true && that.isSetOwner();
    if (this_present_owner || that_present_owner) {
      if (!(this_present_owner && that_present_owner))
        return false;
      if (!this.owner.equals(that.owner))
        return false;
    }

    boolean this_present_createdAt = true;
    boolean that_present_createdAt = true;
    if (this_present_createdAt || that_present_createdAt) {
      if (!(this_present_createdAt && that_present_createdAt))
        return false;
      if (this.createdAt != that.createdAt)
        return false;
    }

    boolean this_present_isRequired = true;
    boolean that_present_isRequired = true;
    if (this_present_isRequired || that_present_isRequired) {
      if (!(this_present_isRequired && that_present_isRequired))
        return false;
      if (this.isRequired != that.isRequired)
        return false;
    }

    boolean this_present_archivedAt = true;
    boolean that_present_archivedAt = true;
    if (this_present_archivedAt || that_present_archivedAt) {
      if (!(this_present_archivedAt && that_present_archivedAt))
        return false;
      if (this.archivedAt != that.archivedAt)
        return false;
    }

    boolean this_present_updatedAt = true;
    boolean that_present_updatedAt = true;
    if (this_present_updatedAt || that_present_updatedAt) {
      if (!(this_present_updatedAt && that_present_updatedAt))
        return false;
      if (this.updatedAt != that.updatedAt)
        return false;
    }

    boolean this_present_position = true && this.isSetPosition();
    boolean that_present_position = true && that.isSetPosition();
    if (this_present_position || that_present_position) {
      if (!(this_present_position && that_present_position))
        return false;
      if (this.position != that.position)
        return false;
    }

    boolean this_present_defaultValue = true && this.isSetDefaultValue();
    boolean that_present_defaultValue = true && that.isSetDefaultValue();
    if (this_present_defaultValue || that_present_defaultValue) {
      if (!(this_present_defaultValue && that_present_defaultValue))
        return false;
      if (!this.defaultValue.equals(that.defaultValue))
        return false;
    }

    boolean this_present_clearDefault = true && this.isSetClearDefault();
    boolean that_present_clearDefault = true && that.isSetClearDefault();
    if (this_present_clearDefault || that_present_clearDefault) {
      if (!(this_present_clearDefault && that_present_clearDefault))
        return false;
      if (this.clearDefault != that.clearDefault)
        return false;
    }

    boolean this_present_externallyManaged = true && this.isSetExternallyManaged();
    boolean that_present_externallyManaged = true && that.isSetExternallyManaged();
    if (this_present_externallyManaged || that_present_externallyManaged) {
      if (!(this_present_externallyManaged && that_present_externallyManaged))
        return false;
      if (this.externallyManaged != that.externallyManaged)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_key = true && (isSetKey());
    list.add(present_key);
    if (present_key)
      list.add(key);

    boolean present_type = true && (isSetType());
    list.add(present_type);
    if (present_type)
      list.add(type.getValue());

    boolean present_constraints = true && (isSetConstraints());
    list.add(present_constraints);
    if (present_constraints)
      list.add(constraints);

    boolean present_owner = true && (isSetOwner());
    list.add(present_owner);
    if (present_owner)
      list.add(owner.getValue());

    boolean present_createdAt = true;
    list.add(present_createdAt);
    if (present_createdAt)
      list.add(createdAt);

    boolean present_isRequired = true;
    list.add(present_isRequired);
    if (present_isRequired)
      list.add(isRequired);

    boolean present_archivedAt = true;
    list.add(present_archivedAt);
    if (present_archivedAt)
      list.add(archivedAt);

    boolean present_updatedAt = true;
    list.add(present_updatedAt);
    if (present_updatedAt)
      list.add(updatedAt);

    boolean present_position = true && (isSetPosition());
    list.add(present_position);
    if (present_position)
      list.add(position);

    boolean present_defaultValue = true && (isSetDefaultValue());
    list.add(present_defaultValue);
    if (present_defaultValue)
      list.add(defaultValue);

    boolean present_clearDefault = true && (isSetClearDefault());
    list.add(present_clearDefault);
    if (present_clearDefault)
      list.add(clearDefault);

    boolean present_externallyManaged = true && (isSetExternallyManaged());
    list.add(present_externallyManaged);
    if (present_externallyManaged)
      list.add(externallyManaged);

    return list.hashCode();
  }

  @Override
  public int compareTo(Metadata other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConstraints()).compareTo(other.isSetConstraints());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConstraints()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.constraints, other.constraints);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOwner()).compareTo(other.isSetOwner());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOwner()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.owner, other.owner);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreatedAt()).compareTo(other.isSetCreatedAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreatedAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createdAt, other.createdAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsRequired()).compareTo(other.isSetIsRequired());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsRequired()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isRequired, other.isRequired);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArchivedAt()).compareTo(other.isSetArchivedAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArchivedAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.archivedAt, other.archivedAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdatedAt()).compareTo(other.isSetUpdatedAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdatedAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updatedAt, other.updatedAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPosition()).compareTo(other.isSetPosition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPosition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.position, other.position);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDefaultValue()).compareTo(other.isSetDefaultValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDefaultValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.defaultValue, other.defaultValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClearDefault()).compareTo(other.isSetClearDefault());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClearDefault()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clearDefault, other.clearDefault);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExternallyManaged()).compareTo(other.isSetExternallyManaged());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExternallyManaged()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.externallyManaged, other.externallyManaged);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Metadata(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("key:");
    if (this.key == null) {
      sb.append("null");
    } else {
      sb.append(this.key);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("constraints:");
    if (this.constraints == null) {
      sb.append("null");
    } else {
      sb.append(this.constraints);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("owner:");
    if (this.owner == null) {
      sb.append("null");
    } else {
      sb.append(this.owner);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createdAt:");
    sb.append(this.createdAt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isRequired:");
    sb.append(this.isRequired);
    first = false;
    if (!first) sb.append(", ");
    sb.append("archivedAt:");
    sb.append(this.archivedAt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updatedAt:");
    sb.append(this.updatedAt);
    first = false;
    if (isSetPosition()) {
      if (!first) sb.append(", ");
      sb.append("position:");
      sb.append(this.position);
      first = false;
    }
    if (isSetDefaultValue()) {
      if (!first) sb.append(", ");
      sb.append("defaultValue:");
      if (this.defaultValue == null) {
        sb.append("null");
      } else {
        sb.append(this.defaultValue);
      }
      first = false;
    }
    if (isSetClearDefault()) {
      if (!first) sb.append(", ");
      sb.append("clearDefault:");
      sb.append(this.clearDefault);
      first = false;
    }
    if (isSetExternallyManaged()) {
      if (!first) sb.append(", ");
      sb.append("externallyManaged:");
      sb.append(this.externallyManaged);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (constraints != null) {
      constraints.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MetadataStandardSchemeFactory implements SchemeFactory {
    public MetadataStandardScheme getScheme() {
      return new MetadataStandardScheme();
    }
  }

  private static class MetadataStandardScheme extends StandardScheme<Metadata> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Metadata struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.key = iprot.readString();
              struct.setKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = com.wi.director.thrift.v1.metadata.MetadataType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CONSTRAINTS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.constraints = new Constraints();
              struct.constraints.read(iprot);
              struct.setConstraintsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // OWNER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.owner = com.wi.director.thrift.v1.metadata.Owner.findByValue(iprot.readI32());
              struct.setOwnerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CREATED_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createdAt = iprot.readI64();
              struct.setCreatedAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // IS_REQUIRED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isRequired = iprot.readBool();
              struct.setIsRequiredIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ARCHIVED_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.archivedAt = iprot.readI64();
              struct.setArchivedAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // UPDATED_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.updatedAt = iprot.readI64();
              struct.setUpdatedAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // POSITION
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.position = iprot.readDouble();
              struct.setPositionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // DEFAULT_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.defaultValue = new MetadataValue();
              struct.defaultValue.read(iprot);
              struct.setDefaultValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CLEAR_DEFAULT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.clearDefault = iprot.readBool();
              struct.setClearDefaultIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // EXTERNALLY_MANAGED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.externallyManaged = iprot.readBool();
              struct.setExternallyManagedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Metadata struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.key != null) {
        oprot.writeFieldBegin(KEY_FIELD_DESC);
        oprot.writeString(struct.key);
        oprot.writeFieldEnd();
      }
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.constraints != null) {
        oprot.writeFieldBegin(CONSTRAINTS_FIELD_DESC);
        struct.constraints.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.owner != null) {
        oprot.writeFieldBegin(OWNER_FIELD_DESC);
        oprot.writeI32(struct.owner.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATED_AT_FIELD_DESC);
      oprot.writeI64(struct.createdAt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_REQUIRED_FIELD_DESC);
      oprot.writeBool(struct.isRequired);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ARCHIVED_AT_FIELD_DESC);
      oprot.writeI64(struct.archivedAt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UPDATED_AT_FIELD_DESC);
      oprot.writeI64(struct.updatedAt);
      oprot.writeFieldEnd();
      if (struct.isSetPosition()) {
        oprot.writeFieldBegin(POSITION_FIELD_DESC);
        oprot.writeDouble(struct.position);
        oprot.writeFieldEnd();
      }
      if (struct.defaultValue != null) {
        if (struct.isSetDefaultValue()) {
          oprot.writeFieldBegin(DEFAULT_VALUE_FIELD_DESC);
          struct.defaultValue.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetClearDefault()) {
        oprot.writeFieldBegin(CLEAR_DEFAULT_FIELD_DESC);
        oprot.writeBool(struct.clearDefault);
        oprot.writeFieldEnd();
      }
      if (struct.isSetExternallyManaged()) {
        oprot.writeFieldBegin(EXTERNALLY_MANAGED_FIELD_DESC);
        oprot.writeBool(struct.externallyManaged);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

}

