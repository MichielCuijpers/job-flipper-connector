/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wi.director.thrift.v1.field_data;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * Limits on a numerical input
 */
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class NumberConstraints implements org.apache.thrift.TBase<NumberConstraints, NumberConstraints._Fields>, java.io.Serializable, Cloneable, Comparable<NumberConstraints> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("NumberConstraints");

  private static final org.apache.thrift.protocol.TField RANGE_START_FIELD_DESC = new org.apache.thrift.protocol.TField("rangeStart", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
  private static final org.apache.thrift.protocol.TField RANGE_END_FIELD_DESC = new org.apache.thrift.protocol.TField("rangeEnd", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField PRECISE_START_FIELD_DESC = new org.apache.thrift.protocol.TField("preciseStart", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField PRECISE_END_FIELD_DESC = new org.apache.thrift.protocol.TField("preciseEnd", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField RANGE_LOW_WRAPPER_FIELD_DESC = new org.apache.thrift.protocol.TField("rangeLowWrapper", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField RANGE_HIGH_WRAPPER_FIELD_DESC = new org.apache.thrift.protocol.TField("rangeHighWrapper", org.apache.thrift.protocol.TType.STRUCT, (short)8);
  private static final org.apache.thrift.protocol.TField UNIT_FIELD_DESC = new org.apache.thrift.protocol.TField("unit", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField UNIT_WRAPPER_FIELD_DESC = new org.apache.thrift.protocol.TField("unitWrapper", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField NUMBER_UNIT_CONSTRAINT_FIELD_DESC = new org.apache.thrift.protocol.TField("numberUnitConstraint", org.apache.thrift.protocol.TType.STRUCT, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new NumberConstraintsStandardSchemeFactory());
  }

  /**
   * Deprecated. Use preciseStart and preciseEnd instead
   */
  public double rangeStart; // optional
  public double rangeEnd; // optional
  /**
   * Deprecated. These replace rangeStart and rangeEnd going forward
   */
  public com.wi.director.thrift.v1.common.PreciseNumber preciseStart; // optional
  public com.wi.director.thrift.v1.common.PreciseNumber preciseEnd; // optional
  /**
   * Use these wrappers instead of preciseStart and preciseEnd
   */
  public com.parsable.thrift.v1.reference.NumberWrapper rangeLowWrapper; // optional
  public com.parsable.thrift.v1.reference.NumberWrapper rangeHighWrapper; // optional
  public String unit; // optional
  public com.parsable.thrift.v1.reference.StringWrapper unitWrapper; // optional
  public NumberUnitConstraint numberUnitConstraint; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * Deprecated. Use preciseStart and preciseEnd instead
     */
    RANGE_START((short)1, "rangeStart"),
    RANGE_END((short)2, "rangeEnd"),
    /**
     * Deprecated. These replace rangeStart and rangeEnd going forward
     */
    PRECISE_START((short)4, "preciseStart"),
    PRECISE_END((short)5, "preciseEnd"),
    /**
     * Use these wrappers instead of preciseStart and preciseEnd
     */
    RANGE_LOW_WRAPPER((short)7, "rangeLowWrapper"),
    RANGE_HIGH_WRAPPER((short)8, "rangeHighWrapper"),
    UNIT((short)3, "unit"),
    UNIT_WRAPPER((short)6, "unitWrapper"),
    NUMBER_UNIT_CONSTRAINT((short)9, "numberUnitConstraint");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RANGE_START
          return RANGE_START;
        case 2: // RANGE_END
          return RANGE_END;
        case 4: // PRECISE_START
          return PRECISE_START;
        case 5: // PRECISE_END
          return PRECISE_END;
        case 7: // RANGE_LOW_WRAPPER
          return RANGE_LOW_WRAPPER;
        case 8: // RANGE_HIGH_WRAPPER
          return RANGE_HIGH_WRAPPER;
        case 3: // UNIT
          return UNIT;
        case 6: // UNIT_WRAPPER
          return UNIT_WRAPPER;
        case 9: // NUMBER_UNIT_CONSTRAINT
          return NUMBER_UNIT_CONSTRAINT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __RANGESTART_ISSET_ID = 0;
  private static final int __RANGEEND_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.RANGE_START,_Fields.RANGE_END,_Fields.PRECISE_START,_Fields.PRECISE_END,_Fields.RANGE_LOW_WRAPPER,_Fields.RANGE_HIGH_WRAPPER,_Fields.UNIT,_Fields.UNIT_WRAPPER,_Fields.NUMBER_UNIT_CONSTRAINT};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RANGE_START, new org.apache.thrift.meta_data.FieldMetaData("rangeStart", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RANGE_END, new org.apache.thrift.meta_data.FieldMetaData("rangeEnd", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PRECISE_START, new org.apache.thrift.meta_data.FieldMetaData("preciseStart", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.common.PreciseNumber.class)));
    tmpMap.put(_Fields.PRECISE_END, new org.apache.thrift.meta_data.FieldMetaData("preciseEnd", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.common.PreciseNumber.class)));
    tmpMap.put(_Fields.RANGE_LOW_WRAPPER, new org.apache.thrift.meta_data.FieldMetaData("rangeLowWrapper", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.parsable.thrift.v1.reference.NumberWrapper.class)));
    tmpMap.put(_Fields.RANGE_HIGH_WRAPPER, new org.apache.thrift.meta_data.FieldMetaData("rangeHighWrapper", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.parsable.thrift.v1.reference.NumberWrapper.class)));
    tmpMap.put(_Fields.UNIT, new org.apache.thrift.meta_data.FieldMetaData("unit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UNIT_WRAPPER, new org.apache.thrift.meta_data.FieldMetaData("unitWrapper", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.parsable.thrift.v1.reference.StringWrapper.class)));
    tmpMap.put(_Fields.NUMBER_UNIT_CONSTRAINT, new org.apache.thrift.meta_data.FieldMetaData("numberUnitConstraint", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NumberUnitConstraint.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(NumberConstraints.class, metaDataMap);
  }

  public NumberConstraints() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public NumberConstraints(NumberConstraints other) {
    __isset_bitfield = other.__isset_bitfield;
    this.rangeStart = other.rangeStart;
    this.rangeEnd = other.rangeEnd;
    if (other.isSetPreciseStart()) {
      this.preciseStart = new com.wi.director.thrift.v1.common.PreciseNumber(other.preciseStart);
    }
    if (other.isSetPreciseEnd()) {
      this.preciseEnd = new com.wi.director.thrift.v1.common.PreciseNumber(other.preciseEnd);
    }
    if (other.isSetRangeLowWrapper()) {
      this.rangeLowWrapper = new com.parsable.thrift.v1.reference.NumberWrapper(other.rangeLowWrapper);
    }
    if (other.isSetRangeHighWrapper()) {
      this.rangeHighWrapper = new com.parsable.thrift.v1.reference.NumberWrapper(other.rangeHighWrapper);
    }
    if (other.isSetUnit()) {
      this.unit = other.unit;
    }
    if (other.isSetUnitWrapper()) {
      this.unitWrapper = new com.parsable.thrift.v1.reference.StringWrapper(other.unitWrapper);
    }
    if (other.isSetNumberUnitConstraint()) {
      this.numberUnitConstraint = new NumberUnitConstraint(other.numberUnitConstraint);
    }
  }

  public NumberConstraints deepCopy() {
    return new NumberConstraints(this);
  }

  @Override
  public void clear() {
    setRangeStartIsSet(false);
    this.rangeStart = 0.0;
    setRangeEndIsSet(false);
    this.rangeEnd = 0.0;
    this.preciseStart = null;
    this.preciseEnd = null;
    this.rangeLowWrapper = null;
    this.rangeHighWrapper = null;
    this.unit = null;
    this.unitWrapper = null;
    this.numberUnitConstraint = null;
  }

  /**
   * Deprecated. Use preciseStart and preciseEnd instead
   */
  public double getRangeStart() {
    return this.rangeStart;
  }

  /**
   * Deprecated. Use preciseStart and preciseEnd instead
   */
  public NumberConstraints setRangeStart(double rangeStart) {
    this.rangeStart = rangeStart;
    setRangeStartIsSet(true);
    return this;
  }

  public void unsetRangeStart() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RANGESTART_ISSET_ID);
  }

  /** Returns true if field rangeStart is set (has been assigned a value) and false otherwise */
  public boolean isSetRangeStart() {
    return EncodingUtils.testBit(__isset_bitfield, __RANGESTART_ISSET_ID);
  }

  public void setRangeStartIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RANGESTART_ISSET_ID, value);
  }

  public double getRangeEnd() {
    return this.rangeEnd;
  }

  public NumberConstraints setRangeEnd(double rangeEnd) {
    this.rangeEnd = rangeEnd;
    setRangeEndIsSet(true);
    return this;
  }

  public void unsetRangeEnd() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RANGEEND_ISSET_ID);
  }

  /** Returns true if field rangeEnd is set (has been assigned a value) and false otherwise */
  public boolean isSetRangeEnd() {
    return EncodingUtils.testBit(__isset_bitfield, __RANGEEND_ISSET_ID);
  }

  public void setRangeEndIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RANGEEND_ISSET_ID, value);
  }

  /**
   * Deprecated. These replace rangeStart and rangeEnd going forward
   */
  public com.wi.director.thrift.v1.common.PreciseNumber getPreciseStart() {
    return this.preciseStart;
  }

  /**
   * Deprecated. These replace rangeStart and rangeEnd going forward
   */
  public NumberConstraints setPreciseStart(com.wi.director.thrift.v1.common.PreciseNumber preciseStart) {
    this.preciseStart = preciseStart;
    return this;
  }

  public void unsetPreciseStart() {
    this.preciseStart = null;
  }

  /** Returns true if field preciseStart is set (has been assigned a value) and false otherwise */
  public boolean isSetPreciseStart() {
    return this.preciseStart != null;
  }

  public void setPreciseStartIsSet(boolean value) {
    if (!value) {
      this.preciseStart = null;
    }
  }

  public com.wi.director.thrift.v1.common.PreciseNumber getPreciseEnd() {
    return this.preciseEnd;
  }

  public NumberConstraints setPreciseEnd(com.wi.director.thrift.v1.common.PreciseNumber preciseEnd) {
    this.preciseEnd = preciseEnd;
    return this;
  }

  public void unsetPreciseEnd() {
    this.preciseEnd = null;
  }

  /** Returns true if field preciseEnd is set (has been assigned a value) and false otherwise */
  public boolean isSetPreciseEnd() {
    return this.preciseEnd != null;
  }

  public void setPreciseEndIsSet(boolean value) {
    if (!value) {
      this.preciseEnd = null;
    }
  }

  /**
   * Use these wrappers instead of preciseStart and preciseEnd
   */
  public com.parsable.thrift.v1.reference.NumberWrapper getRangeLowWrapper() {
    return this.rangeLowWrapper;
  }

  /**
   * Use these wrappers instead of preciseStart and preciseEnd
   */
  public NumberConstraints setRangeLowWrapper(com.parsable.thrift.v1.reference.NumberWrapper rangeLowWrapper) {
    this.rangeLowWrapper = rangeLowWrapper;
    return this;
  }

  public void unsetRangeLowWrapper() {
    this.rangeLowWrapper = null;
  }

  /** Returns true if field rangeLowWrapper is set (has been assigned a value) and false otherwise */
  public boolean isSetRangeLowWrapper() {
    return this.rangeLowWrapper != null;
  }

  public void setRangeLowWrapperIsSet(boolean value) {
    if (!value) {
      this.rangeLowWrapper = null;
    }
  }

  public com.parsable.thrift.v1.reference.NumberWrapper getRangeHighWrapper() {
    return this.rangeHighWrapper;
  }

  public NumberConstraints setRangeHighWrapper(com.parsable.thrift.v1.reference.NumberWrapper rangeHighWrapper) {
    this.rangeHighWrapper = rangeHighWrapper;
    return this;
  }

  public void unsetRangeHighWrapper() {
    this.rangeHighWrapper = null;
  }

  /** Returns true if field rangeHighWrapper is set (has been assigned a value) and false otherwise */
  public boolean isSetRangeHighWrapper() {
    return this.rangeHighWrapper != null;
  }

  public void setRangeHighWrapperIsSet(boolean value) {
    if (!value) {
      this.rangeHighWrapper = null;
    }
  }

  public String getUnit() {
    return this.unit;
  }

  public NumberConstraints setUnit(String unit) {
    this.unit = unit;
    return this;
  }

  public void unsetUnit() {
    this.unit = null;
  }

  /** Returns true if field unit is set (has been assigned a value) and false otherwise */
  public boolean isSetUnit() {
    return this.unit != null;
  }

  public void setUnitIsSet(boolean value) {
    if (!value) {
      this.unit = null;
    }
  }

  public com.parsable.thrift.v1.reference.StringWrapper getUnitWrapper() {
    return this.unitWrapper;
  }

  public NumberConstraints setUnitWrapper(com.parsable.thrift.v1.reference.StringWrapper unitWrapper) {
    this.unitWrapper = unitWrapper;
    return this;
  }

  public void unsetUnitWrapper() {
    this.unitWrapper = null;
  }

  /** Returns true if field unitWrapper is set (has been assigned a value) and false otherwise */
  public boolean isSetUnitWrapper() {
    return this.unitWrapper != null;
  }

  public void setUnitWrapperIsSet(boolean value) {
    if (!value) {
      this.unitWrapper = null;
    }
  }

  public NumberUnitConstraint getNumberUnitConstraint() {
    return this.numberUnitConstraint;
  }

  public NumberConstraints setNumberUnitConstraint(NumberUnitConstraint numberUnitConstraint) {
    this.numberUnitConstraint = numberUnitConstraint;
    return this;
  }

  public void unsetNumberUnitConstraint() {
    this.numberUnitConstraint = null;
  }

  /** Returns true if field numberUnitConstraint is set (has been assigned a value) and false otherwise */
  public boolean isSetNumberUnitConstraint() {
    return this.numberUnitConstraint != null;
  }

  public void setNumberUnitConstraintIsSet(boolean value) {
    if (!value) {
      this.numberUnitConstraint = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RANGE_START:
      if (value == null) {
        unsetRangeStart();
      } else {
        setRangeStart((Double)value);
      }
      break;

    case RANGE_END:
      if (value == null) {
        unsetRangeEnd();
      } else {
        setRangeEnd((Double)value);
      }
      break;

    case PRECISE_START:
      if (value == null) {
        unsetPreciseStart();
      } else {
        setPreciseStart((com.wi.director.thrift.v1.common.PreciseNumber)value);
      }
      break;

    case PRECISE_END:
      if (value == null) {
        unsetPreciseEnd();
      } else {
        setPreciseEnd((com.wi.director.thrift.v1.common.PreciseNumber)value);
      }
      break;

    case RANGE_LOW_WRAPPER:
      if (value == null) {
        unsetRangeLowWrapper();
      } else {
        setRangeLowWrapper((com.parsable.thrift.v1.reference.NumberWrapper)value);
      }
      break;

    case RANGE_HIGH_WRAPPER:
      if (value == null) {
        unsetRangeHighWrapper();
      } else {
        setRangeHighWrapper((com.parsable.thrift.v1.reference.NumberWrapper)value);
      }
      break;

    case UNIT:
      if (value == null) {
        unsetUnit();
      } else {
        setUnit((String)value);
      }
      break;

    case UNIT_WRAPPER:
      if (value == null) {
        unsetUnitWrapper();
      } else {
        setUnitWrapper((com.parsable.thrift.v1.reference.StringWrapper)value);
      }
      break;

    case NUMBER_UNIT_CONSTRAINT:
      if (value == null) {
        unsetNumberUnitConstraint();
      } else {
        setNumberUnitConstraint((NumberUnitConstraint)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RANGE_START:
      return getRangeStart();

    case RANGE_END:
      return getRangeEnd();

    case PRECISE_START:
      return getPreciseStart();

    case PRECISE_END:
      return getPreciseEnd();

    case RANGE_LOW_WRAPPER:
      return getRangeLowWrapper();

    case RANGE_HIGH_WRAPPER:
      return getRangeHighWrapper();

    case UNIT:
      return getUnit();

    case UNIT_WRAPPER:
      return getUnitWrapper();

    case NUMBER_UNIT_CONSTRAINT:
      return getNumberUnitConstraint();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RANGE_START:
      return isSetRangeStart();
    case RANGE_END:
      return isSetRangeEnd();
    case PRECISE_START:
      return isSetPreciseStart();
    case PRECISE_END:
      return isSetPreciseEnd();
    case RANGE_LOW_WRAPPER:
      return isSetRangeLowWrapper();
    case RANGE_HIGH_WRAPPER:
      return isSetRangeHighWrapper();
    case UNIT:
      return isSetUnit();
    case UNIT_WRAPPER:
      return isSetUnitWrapper();
    case NUMBER_UNIT_CONSTRAINT:
      return isSetNumberUnitConstraint();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof NumberConstraints)
      return this.equals((NumberConstraints)that);
    return false;
  }

  public boolean equals(NumberConstraints that) {
    if (that == null)
      return false;

    boolean this_present_rangeStart = true && this.isSetRangeStart();
    boolean that_present_rangeStart = true && that.isSetRangeStart();
    if (this_present_rangeStart || that_present_rangeStart) {
      if (!(this_present_rangeStart && that_present_rangeStart))
        return false;
      if (this.rangeStart != that.rangeStart)
        return false;
    }

    boolean this_present_rangeEnd = true && this.isSetRangeEnd();
    boolean that_present_rangeEnd = true && that.isSetRangeEnd();
    if (this_present_rangeEnd || that_present_rangeEnd) {
      if (!(this_present_rangeEnd && that_present_rangeEnd))
        return false;
      if (this.rangeEnd != that.rangeEnd)
        return false;
    }

    boolean this_present_preciseStart = true && this.isSetPreciseStart();
    boolean that_present_preciseStart = true && that.isSetPreciseStart();
    if (this_present_preciseStart || that_present_preciseStart) {
      if (!(this_present_preciseStart && that_present_preciseStart))
        return false;
      if (!this.preciseStart.equals(that.preciseStart))
        return false;
    }

    boolean this_present_preciseEnd = true && this.isSetPreciseEnd();
    boolean that_present_preciseEnd = true && that.isSetPreciseEnd();
    if (this_present_preciseEnd || that_present_preciseEnd) {
      if (!(this_present_preciseEnd && that_present_preciseEnd))
        return false;
      if (!this.preciseEnd.equals(that.preciseEnd))
        return false;
    }

    boolean this_present_rangeLowWrapper = true && this.isSetRangeLowWrapper();
    boolean that_present_rangeLowWrapper = true && that.isSetRangeLowWrapper();
    if (this_present_rangeLowWrapper || that_present_rangeLowWrapper) {
      if (!(this_present_rangeLowWrapper && that_present_rangeLowWrapper))
        return false;
      if (!this.rangeLowWrapper.equals(that.rangeLowWrapper))
        return false;
    }

    boolean this_present_rangeHighWrapper = true && this.isSetRangeHighWrapper();
    boolean that_present_rangeHighWrapper = true && that.isSetRangeHighWrapper();
    if (this_present_rangeHighWrapper || that_present_rangeHighWrapper) {
      if (!(this_present_rangeHighWrapper && that_present_rangeHighWrapper))
        return false;
      if (!this.rangeHighWrapper.equals(that.rangeHighWrapper))
        return false;
    }

    boolean this_present_unit = true && this.isSetUnit();
    boolean that_present_unit = true && that.isSetUnit();
    if (this_present_unit || that_present_unit) {
      if (!(this_present_unit && that_present_unit))
        return false;
      if (!this.unit.equals(that.unit))
        return false;
    }

    boolean this_present_unitWrapper = true && this.isSetUnitWrapper();
    boolean that_present_unitWrapper = true && that.isSetUnitWrapper();
    if (this_present_unitWrapper || that_present_unitWrapper) {
      if (!(this_present_unitWrapper && that_present_unitWrapper))
        return false;
      if (!this.unitWrapper.equals(that.unitWrapper))
        return false;
    }

    boolean this_present_numberUnitConstraint = true && this.isSetNumberUnitConstraint();
    boolean that_present_numberUnitConstraint = true && that.isSetNumberUnitConstraint();
    if (this_present_numberUnitConstraint || that_present_numberUnitConstraint) {
      if (!(this_present_numberUnitConstraint && that_present_numberUnitConstraint))
        return false;
      if (!this.numberUnitConstraint.equals(that.numberUnitConstraint))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_rangeStart = true && (isSetRangeStart());
    list.add(present_rangeStart);
    if (present_rangeStart)
      list.add(rangeStart);

    boolean present_rangeEnd = true && (isSetRangeEnd());
    list.add(present_rangeEnd);
    if (present_rangeEnd)
      list.add(rangeEnd);

    boolean present_preciseStart = true && (isSetPreciseStart());
    list.add(present_preciseStart);
    if (present_preciseStart)
      list.add(preciseStart);

    boolean present_preciseEnd = true && (isSetPreciseEnd());
    list.add(present_preciseEnd);
    if (present_preciseEnd)
      list.add(preciseEnd);

    boolean present_rangeLowWrapper = true && (isSetRangeLowWrapper());
    list.add(present_rangeLowWrapper);
    if (present_rangeLowWrapper)
      list.add(rangeLowWrapper);

    boolean present_rangeHighWrapper = true && (isSetRangeHighWrapper());
    list.add(present_rangeHighWrapper);
    if (present_rangeHighWrapper)
      list.add(rangeHighWrapper);

    boolean present_unit = true && (isSetUnit());
    list.add(present_unit);
    if (present_unit)
      list.add(unit);

    boolean present_unitWrapper = true && (isSetUnitWrapper());
    list.add(present_unitWrapper);
    if (present_unitWrapper)
      list.add(unitWrapper);

    boolean present_numberUnitConstraint = true && (isSetNumberUnitConstraint());
    list.add(present_numberUnitConstraint);
    if (present_numberUnitConstraint)
      list.add(numberUnitConstraint);

    return list.hashCode();
  }

  @Override
  public int compareTo(NumberConstraints other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetRangeStart()).compareTo(other.isSetRangeStart());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRangeStart()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rangeStart, other.rangeStart);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRangeEnd()).compareTo(other.isSetRangeEnd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRangeEnd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rangeEnd, other.rangeEnd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPreciseStart()).compareTo(other.isSetPreciseStart());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPreciseStart()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.preciseStart, other.preciseStart);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPreciseEnd()).compareTo(other.isSetPreciseEnd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPreciseEnd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.preciseEnd, other.preciseEnd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRangeLowWrapper()).compareTo(other.isSetRangeLowWrapper());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRangeLowWrapper()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rangeLowWrapper, other.rangeLowWrapper);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRangeHighWrapper()).compareTo(other.isSetRangeHighWrapper());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRangeHighWrapper()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rangeHighWrapper, other.rangeHighWrapper);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnit()).compareTo(other.isSetUnit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unit, other.unit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnitWrapper()).compareTo(other.isSetUnitWrapper());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnitWrapper()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unitWrapper, other.unitWrapper);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNumberUnitConstraint()).compareTo(other.isSetNumberUnitConstraint());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumberUnitConstraint()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numberUnitConstraint, other.numberUnitConstraint);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("NumberConstraints(");
    boolean first = true;

    if (isSetRangeStart()) {
      sb.append("rangeStart:");
      sb.append(this.rangeStart);
      first = false;
    }
    if (isSetRangeEnd()) {
      if (!first) sb.append(", ");
      sb.append("rangeEnd:");
      sb.append(this.rangeEnd);
      first = false;
    }
    if (isSetPreciseStart()) {
      if (!first) sb.append(", ");
      sb.append("preciseStart:");
      if (this.preciseStart == null) {
        sb.append("null");
      } else {
        sb.append(this.preciseStart);
      }
      first = false;
    }
    if (isSetPreciseEnd()) {
      if (!first) sb.append(", ");
      sb.append("preciseEnd:");
      if (this.preciseEnd == null) {
        sb.append("null");
      } else {
        sb.append(this.preciseEnd);
      }
      first = false;
    }
    if (isSetRangeLowWrapper()) {
      if (!first) sb.append(", ");
      sb.append("rangeLowWrapper:");
      if (this.rangeLowWrapper == null) {
        sb.append("null");
      } else {
        sb.append(this.rangeLowWrapper);
      }
      first = false;
    }
    if (isSetRangeHighWrapper()) {
      if (!first) sb.append(", ");
      sb.append("rangeHighWrapper:");
      if (this.rangeHighWrapper == null) {
        sb.append("null");
      } else {
        sb.append(this.rangeHighWrapper);
      }
      first = false;
    }
    if (isSetUnit()) {
      if (!first) sb.append(", ");
      sb.append("unit:");
      if (this.unit == null) {
        sb.append("null");
      } else {
        sb.append(this.unit);
      }
      first = false;
    }
    if (isSetUnitWrapper()) {
      if (!first) sb.append(", ");
      sb.append("unitWrapper:");
      if (this.unitWrapper == null) {
        sb.append("null");
      } else {
        sb.append(this.unitWrapper);
      }
      first = false;
    }
    if (isSetNumberUnitConstraint()) {
      if (!first) sb.append(", ");
      sb.append("numberUnitConstraint:");
      if (this.numberUnitConstraint == null) {
        sb.append("null");
      } else {
        sb.append(this.numberUnitConstraint);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (preciseStart != null) {
      preciseStart.validate();
    }
    if (preciseEnd != null) {
      preciseEnd.validate();
    }
    if (rangeLowWrapper != null) {
      rangeLowWrapper.validate();
    }
    if (rangeHighWrapper != null) {
      rangeHighWrapper.validate();
    }
    if (unitWrapper != null) {
      unitWrapper.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class NumberConstraintsStandardSchemeFactory implements SchemeFactory {
    public NumberConstraintsStandardScheme getScheme() {
      return new NumberConstraintsStandardScheme();
    }
  }

  private static class NumberConstraintsStandardScheme extends StandardScheme<NumberConstraints> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, NumberConstraints struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RANGE_START
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.rangeStart = iprot.readDouble();
              struct.setRangeStartIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RANGE_END
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.rangeEnd = iprot.readDouble();
              struct.setRangeEndIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PRECISE_START
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.preciseStart = new com.wi.director.thrift.v1.common.PreciseNumber();
              struct.preciseStart.read(iprot);
              struct.setPreciseStartIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PRECISE_END
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.preciseEnd = new com.wi.director.thrift.v1.common.PreciseNumber();
              struct.preciseEnd.read(iprot);
              struct.setPreciseEndIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // RANGE_LOW_WRAPPER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.rangeLowWrapper = new com.parsable.thrift.v1.reference.NumberWrapper();
              struct.rangeLowWrapper.read(iprot);
              struct.setRangeLowWrapperIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // RANGE_HIGH_WRAPPER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.rangeHighWrapper = new com.parsable.thrift.v1.reference.NumberWrapper();
              struct.rangeHighWrapper.read(iprot);
              struct.setRangeHighWrapperIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // UNIT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.unit = iprot.readString();
              struct.setUnitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // UNIT_WRAPPER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.unitWrapper = new com.parsable.thrift.v1.reference.StringWrapper();
              struct.unitWrapper.read(iprot);
              struct.setUnitWrapperIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // NUMBER_UNIT_CONSTRAINT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.numberUnitConstraint = new NumberUnitConstraint();
              struct.numberUnitConstraint.read(iprot);
              struct.setNumberUnitConstraintIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, NumberConstraints struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetRangeStart()) {
        oprot.writeFieldBegin(RANGE_START_FIELD_DESC);
        oprot.writeDouble(struct.rangeStart);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRangeEnd()) {
        oprot.writeFieldBegin(RANGE_END_FIELD_DESC);
        oprot.writeDouble(struct.rangeEnd);
        oprot.writeFieldEnd();
      }
      if (struct.unit != null) {
        if (struct.isSetUnit()) {
          oprot.writeFieldBegin(UNIT_FIELD_DESC);
          oprot.writeString(struct.unit);
          oprot.writeFieldEnd();
        }
      }
      if (struct.preciseStart != null) {
        if (struct.isSetPreciseStart()) {
          oprot.writeFieldBegin(PRECISE_START_FIELD_DESC);
          struct.preciseStart.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.preciseEnd != null) {
        if (struct.isSetPreciseEnd()) {
          oprot.writeFieldBegin(PRECISE_END_FIELD_DESC);
          struct.preciseEnd.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.unitWrapper != null) {
        if (struct.isSetUnitWrapper()) {
          oprot.writeFieldBegin(UNIT_WRAPPER_FIELD_DESC);
          struct.unitWrapper.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.rangeLowWrapper != null) {
        if (struct.isSetRangeLowWrapper()) {
          oprot.writeFieldBegin(RANGE_LOW_WRAPPER_FIELD_DESC);
          struct.rangeLowWrapper.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.rangeHighWrapper != null) {
        if (struct.isSetRangeHighWrapper()) {
          oprot.writeFieldBegin(RANGE_HIGH_WRAPPER_FIELD_DESC);
          struct.rangeHighWrapper.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.numberUnitConstraint != null) {
        if (struct.isSetNumberUnitConstraint()) {
          oprot.writeFieldBegin(NUMBER_UNIT_CONSTRAINT_FIELD_DESC);
          struct.numberUnitConstraint.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

}

