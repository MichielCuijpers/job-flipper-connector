/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wi.director.thrift.v1.metadata;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class ListOptions implements org.apache.thrift.TBase<ListOptions, ListOptions._Fields>, java.io.Serializable, Cloneable, Comparable<ListOptions> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ListOptions");

  private static final org.apache.thrift.protocol.TField OPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("options", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField VALUE_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("valueIds", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ListOptionsStandardSchemeFactory());
  }

  /**
   * list of options to choose from
   */
  public List<String> options; // required
  /**
   * list of value ids to uniquely identify the options
   */
  public List<String> valueIds; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * list of options to choose from
     */
    OPTIONS((short)1, "options"),
    /**
     * list of value ids to uniquely identify the options
     */
    VALUE_IDS((short)2, "valueIds");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // OPTIONS
          return OPTIONS;
        case 2: // VALUE_IDS
          return VALUE_IDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.VALUE_IDS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.OPTIONS, new org.apache.thrift.meta_data.FieldMetaData("options", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.VALUE_IDS, new org.apache.thrift.meta_data.FieldMetaData("valueIds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ListOptions.class, metaDataMap);
  }

  public ListOptions() {
  }

  public ListOptions(
    List<String> options)
  {
    this();
    this.options = options;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ListOptions(ListOptions other) {
    if (other.isSetOptions()) {
      List<String> __this__options = new ArrayList<String>(other.options);
      this.options = __this__options;
    }
    if (other.isSetValueIds()) {
      List<String> __this__valueIds = new ArrayList<String>(other.valueIds);
      this.valueIds = __this__valueIds;
    }
  }

  public ListOptions deepCopy() {
    return new ListOptions(this);
  }

  @Override
  public void clear() {
    this.options = null;
    this.valueIds = null;
  }

  public int getOptionsSize() {
    return (this.options == null) ? 0 : this.options.size();
  }

  public java.util.Iterator<String> getOptionsIterator() {
    return (this.options == null) ? null : this.options.iterator();
  }

  public void addToOptions(String elem) {
    if (this.options == null) {
      this.options = new ArrayList<String>();
    }
    this.options.add(elem);
  }

  /**
   * list of options to choose from
   */
  public List<String> getOptions() {
    return this.options;
  }

  /**
   * list of options to choose from
   */
  public ListOptions setOptions(List<String> options) {
    this.options = options;
    return this;
  }

  public void unsetOptions() {
    this.options = null;
  }

  /** Returns true if field options is set (has been assigned a value) and false otherwise */
  public boolean isSetOptions() {
    return this.options != null;
  }

  public void setOptionsIsSet(boolean value) {
    if (!value) {
      this.options = null;
    }
  }

  public int getValueIdsSize() {
    return (this.valueIds == null) ? 0 : this.valueIds.size();
  }

  public java.util.Iterator<String> getValueIdsIterator() {
    return (this.valueIds == null) ? null : this.valueIds.iterator();
  }

  public void addToValueIds(String elem) {
    if (this.valueIds == null) {
      this.valueIds = new ArrayList<String>();
    }
    this.valueIds.add(elem);
  }

  /**
   * list of value ids to uniquely identify the options
   */
  public List<String> getValueIds() {
    return this.valueIds;
  }

  /**
   * list of value ids to uniquely identify the options
   */
  public ListOptions setValueIds(List<String> valueIds) {
    this.valueIds = valueIds;
    return this;
  }

  public void unsetValueIds() {
    this.valueIds = null;
  }

  /** Returns true if field valueIds is set (has been assigned a value) and false otherwise */
  public boolean isSetValueIds() {
    return this.valueIds != null;
  }

  public void setValueIdsIsSet(boolean value) {
    if (!value) {
      this.valueIds = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case OPTIONS:
      if (value == null) {
        unsetOptions();
      } else {
        setOptions((List<String>)value);
      }
      break;

    case VALUE_IDS:
      if (value == null) {
        unsetValueIds();
      } else {
        setValueIds((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case OPTIONS:
      return getOptions();

    case VALUE_IDS:
      return getValueIds();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case OPTIONS:
      return isSetOptions();
    case VALUE_IDS:
      return isSetValueIds();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ListOptions)
      return this.equals((ListOptions)that);
    return false;
  }

  public boolean equals(ListOptions that) {
    if (that == null)
      return false;

    boolean this_present_options = true && this.isSetOptions();
    boolean that_present_options = true && that.isSetOptions();
    if (this_present_options || that_present_options) {
      if (!(this_present_options && that_present_options))
        return false;
      if (!this.options.equals(that.options))
        return false;
    }

    boolean this_present_valueIds = true && this.isSetValueIds();
    boolean that_present_valueIds = true && that.isSetValueIds();
    if (this_present_valueIds || that_present_valueIds) {
      if (!(this_present_valueIds && that_present_valueIds))
        return false;
      if (!this.valueIds.equals(that.valueIds))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_options = true && (isSetOptions());
    list.add(present_options);
    if (present_options)
      list.add(options);

    boolean present_valueIds = true && (isSetValueIds());
    list.add(present_valueIds);
    if (present_valueIds)
      list.add(valueIds);

    return list.hashCode();
  }

  @Override
  public int compareTo(ListOptions other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetOptions()).compareTo(other.isSetOptions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOptions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.options, other.options);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValueIds()).compareTo(other.isSetValueIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValueIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.valueIds, other.valueIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ListOptions(");
    boolean first = true;

    sb.append("options:");
    if (this.options == null) {
      sb.append("null");
    } else {
      sb.append(this.options);
    }
    first = false;
    if (isSetValueIds()) {
      if (!first) sb.append(", ");
      sb.append("valueIds:");
      if (this.valueIds == null) {
        sb.append("null");
      } else {
        sb.append(this.valueIds);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ListOptionsStandardSchemeFactory implements SchemeFactory {
    public ListOptionsStandardScheme getScheme() {
      return new ListOptionsStandardScheme();
    }
  }

  private static class ListOptionsStandardScheme extends StandardScheme<ListOptions> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ListOptions struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // OPTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list4 = iprot.readListBegin();
                struct.options = new ArrayList<String>(_list4.size);
                String _elem5;
                for (int _i6 = 0; _i6 < _list4.size; ++_i6)
                {
                  _elem5 = iprot.readString();
                  struct.options.add(_elem5);
                }
                iprot.readListEnd();
              }
              struct.setOptionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // VALUE_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list7 = iprot.readListBegin();
                struct.valueIds = new ArrayList<String>(_list7.size);
                String _elem8;
                for (int _i9 = 0; _i9 < _list7.size; ++_i9)
                {
                  _elem8 = iprot.readString();
                  struct.valueIds.add(_elem8);
                }
                iprot.readListEnd();
              }
              struct.setValueIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ListOptions struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.options != null) {
        oprot.writeFieldBegin(OPTIONS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.options.size()));
          for (String _iter10 : struct.options)
          {
            oprot.writeString(_iter10);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.valueIds != null) {
        if (struct.isSetValueIds()) {
          oprot.writeFieldBegin(VALUE_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.valueIds.size()));
            for (String _iter11 : struct.valueIds)
            {
              oprot.writeString(_iter11);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

}

