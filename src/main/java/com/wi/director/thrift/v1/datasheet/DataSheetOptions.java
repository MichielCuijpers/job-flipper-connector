/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wi.director.thrift.v1.datasheet;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class DataSheetOptions implements org.apache.thrift.TBase<DataSheetOptions, DataSheetOptions._Fields>, java.io.Serializable, Cloneable, Comparable<DataSheetOptions> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DataSheetOptions");

  private static final org.apache.thrift.protocol.TField SHOW_ARCHIVED_FIELD_DESC = new org.apache.thrift.protocol.TField("showArchived", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField ONLY_ARCHIVED_FIELD_DESC = new org.apache.thrift.protocol.TField("onlyArchived", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PAGE_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("pageReq", org.apache.thrift.protocol.TType.STRUCT, (short)20);
  private static final org.apache.thrift.protocol.TField ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("order", org.apache.thrift.protocol.TType.LIST, (short)30);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DataSheetOptionsStandardSchemeFactory());
  }

  /**
   * Default to active sheets only
   */
  public boolean showArchived; // optional
  /**
   * Show only the archived sheets
   */
  public boolean onlyArchived; // optional
  /**
   * Search for sheets that contain this title
   */
  public String title; // optional
  public com.wi.director.thrift.v1.common.PageReq pageReq; // optional
  /**
   * Default is by most recent edit
   */
  public List<DataSheetOrder> order; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * Default to active sheets only
     */
    SHOW_ARCHIVED((short)1, "showArchived"),
    /**
     * Show only the archived sheets
     */
    ONLY_ARCHIVED((short)2, "onlyArchived"),
    /**
     * Search for sheets that contain this title
     */
    TITLE((short)3, "title"),
    PAGE_REQ((short)20, "pageReq"),
    /**
     * Default is by most recent edit
     */
    ORDER((short)30, "order");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SHOW_ARCHIVED
          return SHOW_ARCHIVED;
        case 2: // ONLY_ARCHIVED
          return ONLY_ARCHIVED;
        case 3: // TITLE
          return TITLE;
        case 20: // PAGE_REQ
          return PAGE_REQ;
        case 30: // ORDER
          return ORDER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SHOWARCHIVED_ISSET_ID = 0;
  private static final int __ONLYARCHIVED_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.SHOW_ARCHIVED,_Fields.ONLY_ARCHIVED,_Fields.TITLE,_Fields.PAGE_REQ,_Fields.ORDER};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SHOW_ARCHIVED, new org.apache.thrift.meta_data.FieldMetaData("showArchived", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ONLY_ARCHIVED, new org.apache.thrift.meta_data.FieldMetaData("onlyArchived", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAGE_REQ, new org.apache.thrift.meta_data.FieldMetaData("pageReq", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.common.PageReq.class)));
    tmpMap.put(_Fields.ORDER, new org.apache.thrift.meta_data.FieldMetaData("order", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DataSheetOrder.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DataSheetOptions.class, metaDataMap);
  }

  public DataSheetOptions() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DataSheetOptions(DataSheetOptions other) {
    __isset_bitfield = other.__isset_bitfield;
    this.showArchived = other.showArchived;
    this.onlyArchived = other.onlyArchived;
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    if (other.isSetPageReq()) {
      this.pageReq = new com.wi.director.thrift.v1.common.PageReq(other.pageReq);
    }
    if (other.isSetOrder()) {
      List<DataSheetOrder> __this__order = new ArrayList<DataSheetOrder>(other.order.size());
      for (DataSheetOrder other_element : other.order) {
        __this__order.add(new DataSheetOrder(other_element));
      }
      this.order = __this__order;
    }
  }

  public DataSheetOptions deepCopy() {
    return new DataSheetOptions(this);
  }

  @Override
  public void clear() {
    setShowArchivedIsSet(false);
    this.showArchived = false;
    setOnlyArchivedIsSet(false);
    this.onlyArchived = false;
    this.title = null;
    this.pageReq = null;
    this.order = null;
  }

  /**
   * Default to active sheets only
   */
  public boolean isShowArchived() {
    return this.showArchived;
  }

  /**
   * Default to active sheets only
   */
  public DataSheetOptions setShowArchived(boolean showArchived) {
    this.showArchived = showArchived;
    setShowArchivedIsSet(true);
    return this;
  }

  public void unsetShowArchived() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHOWARCHIVED_ISSET_ID);
  }

  /** Returns true if field showArchived is set (has been assigned a value) and false otherwise */
  public boolean isSetShowArchived() {
    return EncodingUtils.testBit(__isset_bitfield, __SHOWARCHIVED_ISSET_ID);
  }

  public void setShowArchivedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHOWARCHIVED_ISSET_ID, value);
  }

  /**
   * Show only the archived sheets
   */
  public boolean isOnlyArchived() {
    return this.onlyArchived;
  }

  /**
   * Show only the archived sheets
   */
  public DataSheetOptions setOnlyArchived(boolean onlyArchived) {
    this.onlyArchived = onlyArchived;
    setOnlyArchivedIsSet(true);
    return this;
  }

  public void unsetOnlyArchived() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ONLYARCHIVED_ISSET_ID);
  }

  /** Returns true if field onlyArchived is set (has been assigned a value) and false otherwise */
  public boolean isSetOnlyArchived() {
    return EncodingUtils.testBit(__isset_bitfield, __ONLYARCHIVED_ISSET_ID);
  }

  public void setOnlyArchivedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ONLYARCHIVED_ISSET_ID, value);
  }

  /**
   * Search for sheets that contain this title
   */
  public String getTitle() {
    return this.title;
  }

  /**
   * Search for sheets that contain this title
   */
  public DataSheetOptions setTitle(String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public com.wi.director.thrift.v1.common.PageReq getPageReq() {
    return this.pageReq;
  }

  public DataSheetOptions setPageReq(com.wi.director.thrift.v1.common.PageReq pageReq) {
    this.pageReq = pageReq;
    return this;
  }

  public void unsetPageReq() {
    this.pageReq = null;
  }

  /** Returns true if field pageReq is set (has been assigned a value) and false otherwise */
  public boolean isSetPageReq() {
    return this.pageReq != null;
  }

  public void setPageReqIsSet(boolean value) {
    if (!value) {
      this.pageReq = null;
    }
  }

  public int getOrderSize() {
    return (this.order == null) ? 0 : this.order.size();
  }

  public java.util.Iterator<DataSheetOrder> getOrderIterator() {
    return (this.order == null) ? null : this.order.iterator();
  }

  public void addToOrder(DataSheetOrder elem) {
    if (this.order == null) {
      this.order = new ArrayList<DataSheetOrder>();
    }
    this.order.add(elem);
  }

  /**
   * Default is by most recent edit
   */
  public List<DataSheetOrder> getOrder() {
    return this.order;
  }

  /**
   * Default is by most recent edit
   */
  public DataSheetOptions setOrder(List<DataSheetOrder> order) {
    this.order = order;
    return this;
  }

  public void unsetOrder() {
    this.order = null;
  }

  /** Returns true if field order is set (has been assigned a value) and false otherwise */
  public boolean isSetOrder() {
    return this.order != null;
  }

  public void setOrderIsSet(boolean value) {
    if (!value) {
      this.order = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SHOW_ARCHIVED:
      if (value == null) {
        unsetShowArchived();
      } else {
        setShowArchived((Boolean)value);
      }
      break;

    case ONLY_ARCHIVED:
      if (value == null) {
        unsetOnlyArchived();
      } else {
        setOnlyArchived((Boolean)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((String)value);
      }
      break;

    case PAGE_REQ:
      if (value == null) {
        unsetPageReq();
      } else {
        setPageReq((com.wi.director.thrift.v1.common.PageReq)value);
      }
      break;

    case ORDER:
      if (value == null) {
        unsetOrder();
      } else {
        setOrder((List<DataSheetOrder>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SHOW_ARCHIVED:
      return isShowArchived();

    case ONLY_ARCHIVED:
      return isOnlyArchived();

    case TITLE:
      return getTitle();

    case PAGE_REQ:
      return getPageReq();

    case ORDER:
      return getOrder();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SHOW_ARCHIVED:
      return isSetShowArchived();
    case ONLY_ARCHIVED:
      return isSetOnlyArchived();
    case TITLE:
      return isSetTitle();
    case PAGE_REQ:
      return isSetPageReq();
    case ORDER:
      return isSetOrder();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DataSheetOptions)
      return this.equals((DataSheetOptions)that);
    return false;
  }

  public boolean equals(DataSheetOptions that) {
    if (that == null)
      return false;

    boolean this_present_showArchived = true && this.isSetShowArchived();
    boolean that_present_showArchived = true && that.isSetShowArchived();
    if (this_present_showArchived || that_present_showArchived) {
      if (!(this_present_showArchived && that_present_showArchived))
        return false;
      if (this.showArchived != that.showArchived)
        return false;
    }

    boolean this_present_onlyArchived = true && this.isSetOnlyArchived();
    boolean that_present_onlyArchived = true && that.isSetOnlyArchived();
    if (this_present_onlyArchived || that_present_onlyArchived) {
      if (!(this_present_onlyArchived && that_present_onlyArchived))
        return false;
      if (this.onlyArchived != that.onlyArchived)
        return false;
    }

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_pageReq = true && this.isSetPageReq();
    boolean that_present_pageReq = true && that.isSetPageReq();
    if (this_present_pageReq || that_present_pageReq) {
      if (!(this_present_pageReq && that_present_pageReq))
        return false;
      if (!this.pageReq.equals(that.pageReq))
        return false;
    }

    boolean this_present_order = true && this.isSetOrder();
    boolean that_present_order = true && that.isSetOrder();
    if (this_present_order || that_present_order) {
      if (!(this_present_order && that_present_order))
        return false;
      if (!this.order.equals(that.order))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_showArchived = true && (isSetShowArchived());
    list.add(present_showArchived);
    if (present_showArchived)
      list.add(showArchived);

    boolean present_onlyArchived = true && (isSetOnlyArchived());
    list.add(present_onlyArchived);
    if (present_onlyArchived)
      list.add(onlyArchived);

    boolean present_title = true && (isSetTitle());
    list.add(present_title);
    if (present_title)
      list.add(title);

    boolean present_pageReq = true && (isSetPageReq());
    list.add(present_pageReq);
    if (present_pageReq)
      list.add(pageReq);

    boolean present_order = true && (isSetOrder());
    list.add(present_order);
    if (present_order)
      list.add(order);

    return list.hashCode();
  }

  @Override
  public int compareTo(DataSheetOptions other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetShowArchived()).compareTo(other.isSetShowArchived());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShowArchived()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.showArchived, other.showArchived);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOnlyArchived()).compareTo(other.isSetOnlyArchived());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOnlyArchived()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.onlyArchived, other.onlyArchived);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTitle()).compareTo(other.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPageReq()).compareTo(other.isSetPageReq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPageReq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageReq, other.pageReq);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrder()).compareTo(other.isSetOrder());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrder()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.order, other.order);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DataSheetOptions(");
    boolean first = true;

    if (isSetShowArchived()) {
      sb.append("showArchived:");
      sb.append(this.showArchived);
      first = false;
    }
    if (isSetOnlyArchived()) {
      if (!first) sb.append(", ");
      sb.append("onlyArchived:");
      sb.append(this.onlyArchived);
      first = false;
    }
    if (isSetTitle()) {
      if (!first) sb.append(", ");
      sb.append("title:");
      if (this.title == null) {
        sb.append("null");
      } else {
        sb.append(this.title);
      }
      first = false;
    }
    if (isSetPageReq()) {
      if (!first) sb.append(", ");
      sb.append("pageReq:");
      if (this.pageReq == null) {
        sb.append("null");
      } else {
        sb.append(this.pageReq);
      }
      first = false;
    }
    if (isSetOrder()) {
      if (!first) sb.append(", ");
      sb.append("order:");
      if (this.order == null) {
        sb.append("null");
      } else {
        sb.append(this.order);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (pageReq != null) {
      pageReq.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DataSheetOptionsStandardSchemeFactory implements SchemeFactory {
    public DataSheetOptionsStandardScheme getScheme() {
      return new DataSheetOptionsStandardScheme();
    }
  }

  private static class DataSheetOptionsStandardScheme extends StandardScheme<DataSheetOptions> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DataSheetOptions struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SHOW_ARCHIVED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.showArchived = iprot.readBool();
              struct.setShowArchivedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ONLY_ARCHIVED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.onlyArchived = iprot.readBool();
              struct.setOnlyArchivedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // PAGE_REQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.pageReq = new com.wi.director.thrift.v1.common.PageReq();
              struct.pageReq.read(iprot);
              struct.setPageReqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // ORDER
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list34 = iprot.readListBegin();
                struct.order = new ArrayList<DataSheetOrder>(_list34.size);
                DataSheetOrder _elem35;
                for (int _i36 = 0; _i36 < _list34.size; ++_i36)
                {
                  _elem35 = new DataSheetOrder();
                  _elem35.read(iprot);
                  struct.order.add(_elem35);
                }
                iprot.readListEnd();
              }
              struct.setOrderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DataSheetOptions struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetShowArchived()) {
        oprot.writeFieldBegin(SHOW_ARCHIVED_FIELD_DESC);
        oprot.writeBool(struct.showArchived);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOnlyArchived()) {
        oprot.writeFieldBegin(ONLY_ARCHIVED_FIELD_DESC);
        oprot.writeBool(struct.onlyArchived);
        oprot.writeFieldEnd();
      }
      if (struct.title != null) {
        if (struct.isSetTitle()) {
          oprot.writeFieldBegin(TITLE_FIELD_DESC);
          oprot.writeString(struct.title);
          oprot.writeFieldEnd();
        }
      }
      if (struct.pageReq != null) {
        if (struct.isSetPageReq()) {
          oprot.writeFieldBegin(PAGE_REQ_FIELD_DESC);
          struct.pageReq.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.order != null) {
        if (struct.isSetOrder()) {
          oprot.writeFieldBegin(ORDER_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.order.size()));
            for (DataSheetOrder _iter37 : struct.order)
            {
              _iter37.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

}

