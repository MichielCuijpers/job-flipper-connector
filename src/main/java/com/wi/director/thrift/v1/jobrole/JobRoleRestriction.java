/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wi.director.thrift.v1.jobrole;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class JobRoleRestriction implements org.apache.thrift.TBase<JobRoleRestriction, JobRoleRestriction._Fields>, java.io.Serializable, Cloneable, Comparable<JobRoleRestriction> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("JobRoleRestriction");

  private static final org.apache.thrift.protocol.TField RESTRICTED_FIELD_DESC = new org.apache.thrift.protocol.TField("restricted", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField PERMIT_USER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("permitUserIds", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField PERMITTED_USERS_FIELD_DESC = new org.apache.thrift.protocol.TField("permittedUsers", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new JobRoleRestrictionStandardSchemeFactory());
  }

  /**
   * When creating/updating a job role, if true, restrict to the user ids/emails specified by permitUserIds
   * <br> When retrieving a job role, it is restricted to the users specified by permittedUsers or permitUserIds based on <code>JobRoleSelectOpts</code>, by default permitUserIds
   */
  public boolean restricted; // optional
  public List<String> permitUserIds; // optional
  public List<com.wi.director.thrift.v1.user.UserModular> permittedUsers; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * When creating/updating a job role, if true, restrict to the user ids/emails specified by permitUserIds
     * <br> When retrieving a job role, it is restricted to the users specified by permittedUsers or permitUserIds based on <code>JobRoleSelectOpts</code>, by default permitUserIds
     */
    RESTRICTED((short)1, "restricted"),
    PERMIT_USER_IDS((short)2, "permitUserIds"),
    PERMITTED_USERS((short)3, "permittedUsers");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RESTRICTED
          return RESTRICTED;
        case 2: // PERMIT_USER_IDS
          return PERMIT_USER_IDS;
        case 3: // PERMITTED_USERS
          return PERMITTED_USERS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __RESTRICTED_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.RESTRICTED,_Fields.PERMIT_USER_IDS,_Fields.PERMITTED_USERS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RESTRICTED, new org.apache.thrift.meta_data.FieldMetaData("restricted", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PERMIT_USER_IDS, new org.apache.thrift.meta_data.FieldMetaData("permitUserIds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.PERMITTED_USERS, new org.apache.thrift.meta_data.FieldMetaData("permittedUsers", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wi.director.thrift.v1.user.UserModular.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(JobRoleRestriction.class, metaDataMap);
  }

  public JobRoleRestriction() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public JobRoleRestriction(JobRoleRestriction other) {
    __isset_bitfield = other.__isset_bitfield;
    this.restricted = other.restricted;
    if (other.isSetPermitUserIds()) {
      List<String> __this__permitUserIds = new ArrayList<String>(other.permitUserIds);
      this.permitUserIds = __this__permitUserIds;
    }
    if (other.isSetPermittedUsers()) {
      List<com.wi.director.thrift.v1.user.UserModular> __this__permittedUsers = new ArrayList<com.wi.director.thrift.v1.user.UserModular>(other.permittedUsers.size());
      for (com.wi.director.thrift.v1.user.UserModular other_element : other.permittedUsers) {
        __this__permittedUsers.add(new com.wi.director.thrift.v1.user.UserModular(other_element));
      }
      this.permittedUsers = __this__permittedUsers;
    }
  }

  public JobRoleRestriction deepCopy() {
    return new JobRoleRestriction(this);
  }

  @Override
  public void clear() {
    setRestrictedIsSet(false);
    this.restricted = false;
    this.permitUserIds = null;
    this.permittedUsers = null;
  }

  /**
   * When creating/updating a job role, if true, restrict to the user ids/emails specified by permitUserIds
   * <br> When retrieving a job role, it is restricted to the users specified by permittedUsers or permitUserIds based on <code>JobRoleSelectOpts</code>, by default permitUserIds
   */
  public boolean isRestricted() {
    return this.restricted;
  }

  /**
   * When creating/updating a job role, if true, restrict to the user ids/emails specified by permitUserIds
   * <br> When retrieving a job role, it is restricted to the users specified by permittedUsers or permitUserIds based on <code>JobRoleSelectOpts</code>, by default permitUserIds
   */
  public JobRoleRestriction setRestricted(boolean restricted) {
    this.restricted = restricted;
    setRestrictedIsSet(true);
    return this;
  }

  public void unsetRestricted() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RESTRICTED_ISSET_ID);
  }

  /** Returns true if field restricted is set (has been assigned a value) and false otherwise */
  public boolean isSetRestricted() {
    return EncodingUtils.testBit(__isset_bitfield, __RESTRICTED_ISSET_ID);
  }

  public void setRestrictedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RESTRICTED_ISSET_ID, value);
  }

  public int getPermitUserIdsSize() {
    return (this.permitUserIds == null) ? 0 : this.permitUserIds.size();
  }

  public java.util.Iterator<String> getPermitUserIdsIterator() {
    return (this.permitUserIds == null) ? null : this.permitUserIds.iterator();
  }

  public void addToPermitUserIds(String elem) {
    if (this.permitUserIds == null) {
      this.permitUserIds = new ArrayList<String>();
    }
    this.permitUserIds.add(elem);
  }

  public List<String> getPermitUserIds() {
    return this.permitUserIds;
  }

  public JobRoleRestriction setPermitUserIds(List<String> permitUserIds) {
    this.permitUserIds = permitUserIds;
    return this;
  }

  public void unsetPermitUserIds() {
    this.permitUserIds = null;
  }

  /** Returns true if field permitUserIds is set (has been assigned a value) and false otherwise */
  public boolean isSetPermitUserIds() {
    return this.permitUserIds != null;
  }

  public void setPermitUserIdsIsSet(boolean value) {
    if (!value) {
      this.permitUserIds = null;
    }
  }

  public int getPermittedUsersSize() {
    return (this.permittedUsers == null) ? 0 : this.permittedUsers.size();
  }

  public java.util.Iterator<com.wi.director.thrift.v1.user.UserModular> getPermittedUsersIterator() {
    return (this.permittedUsers == null) ? null : this.permittedUsers.iterator();
  }

  public void addToPermittedUsers(com.wi.director.thrift.v1.user.UserModular elem) {
    if (this.permittedUsers == null) {
      this.permittedUsers = new ArrayList<com.wi.director.thrift.v1.user.UserModular>();
    }
    this.permittedUsers.add(elem);
  }

  public List<com.wi.director.thrift.v1.user.UserModular> getPermittedUsers() {
    return this.permittedUsers;
  }

  public JobRoleRestriction setPermittedUsers(List<com.wi.director.thrift.v1.user.UserModular> permittedUsers) {
    this.permittedUsers = permittedUsers;
    return this;
  }

  public void unsetPermittedUsers() {
    this.permittedUsers = null;
  }

  /** Returns true if field permittedUsers is set (has been assigned a value) and false otherwise */
  public boolean isSetPermittedUsers() {
    return this.permittedUsers != null;
  }

  public void setPermittedUsersIsSet(boolean value) {
    if (!value) {
      this.permittedUsers = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RESTRICTED:
      if (value == null) {
        unsetRestricted();
      } else {
        setRestricted((Boolean)value);
      }
      break;

    case PERMIT_USER_IDS:
      if (value == null) {
        unsetPermitUserIds();
      } else {
        setPermitUserIds((List<String>)value);
      }
      break;

    case PERMITTED_USERS:
      if (value == null) {
        unsetPermittedUsers();
      } else {
        setPermittedUsers((List<com.wi.director.thrift.v1.user.UserModular>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RESTRICTED:
      return isRestricted();

    case PERMIT_USER_IDS:
      return getPermitUserIds();

    case PERMITTED_USERS:
      return getPermittedUsers();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RESTRICTED:
      return isSetRestricted();
    case PERMIT_USER_IDS:
      return isSetPermitUserIds();
    case PERMITTED_USERS:
      return isSetPermittedUsers();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof JobRoleRestriction)
      return this.equals((JobRoleRestriction)that);
    return false;
  }

  public boolean equals(JobRoleRestriction that) {
    if (that == null)
      return false;

    boolean this_present_restricted = true && this.isSetRestricted();
    boolean that_present_restricted = true && that.isSetRestricted();
    if (this_present_restricted || that_present_restricted) {
      if (!(this_present_restricted && that_present_restricted))
        return false;
      if (this.restricted != that.restricted)
        return false;
    }

    boolean this_present_permitUserIds = true && this.isSetPermitUserIds();
    boolean that_present_permitUserIds = true && that.isSetPermitUserIds();
    if (this_present_permitUserIds || that_present_permitUserIds) {
      if (!(this_present_permitUserIds && that_present_permitUserIds))
        return false;
      if (!this.permitUserIds.equals(that.permitUserIds))
        return false;
    }

    boolean this_present_permittedUsers = true && this.isSetPermittedUsers();
    boolean that_present_permittedUsers = true && that.isSetPermittedUsers();
    if (this_present_permittedUsers || that_present_permittedUsers) {
      if (!(this_present_permittedUsers && that_present_permittedUsers))
        return false;
      if (!this.permittedUsers.equals(that.permittedUsers))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_restricted = true && (isSetRestricted());
    list.add(present_restricted);
    if (present_restricted)
      list.add(restricted);

    boolean present_permitUserIds = true && (isSetPermitUserIds());
    list.add(present_permitUserIds);
    if (present_permitUserIds)
      list.add(permitUserIds);

    boolean present_permittedUsers = true && (isSetPermittedUsers());
    list.add(present_permittedUsers);
    if (present_permittedUsers)
      list.add(permittedUsers);

    return list.hashCode();
  }

  @Override
  public int compareTo(JobRoleRestriction other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetRestricted()).compareTo(other.isSetRestricted());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRestricted()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.restricted, other.restricted);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPermitUserIds()).compareTo(other.isSetPermitUserIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPermitUserIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.permitUserIds, other.permitUserIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPermittedUsers()).compareTo(other.isSetPermittedUsers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPermittedUsers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.permittedUsers, other.permittedUsers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("JobRoleRestriction(");
    boolean first = true;

    if (isSetRestricted()) {
      sb.append("restricted:");
      sb.append(this.restricted);
      first = false;
    }
    if (isSetPermitUserIds()) {
      if (!first) sb.append(", ");
      sb.append("permitUserIds:");
      if (this.permitUserIds == null) {
        sb.append("null");
      } else {
        sb.append(this.permitUserIds);
      }
      first = false;
    }
    if (isSetPermittedUsers()) {
      if (!first) sb.append(", ");
      sb.append("permittedUsers:");
      if (this.permittedUsers == null) {
        sb.append("null");
      } else {
        sb.append(this.permittedUsers);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class JobRoleRestrictionStandardSchemeFactory implements SchemeFactory {
    public JobRoleRestrictionStandardScheme getScheme() {
      return new JobRoleRestrictionStandardScheme();
    }
  }

  private static class JobRoleRestrictionStandardScheme extends StandardScheme<JobRoleRestriction> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, JobRoleRestriction struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RESTRICTED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.restricted = iprot.readBool();
              struct.setRestrictedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PERMIT_USER_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.permitUserIds = new ArrayList<String>(_list0.size);
                String _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readString();
                  struct.permitUserIds.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setPermitUserIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PERMITTED_USERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.permittedUsers = new ArrayList<com.wi.director.thrift.v1.user.UserModular>(_list3.size);
                com.wi.director.thrift.v1.user.UserModular _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = new com.wi.director.thrift.v1.user.UserModular();
                  _elem4.read(iprot);
                  struct.permittedUsers.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setPermittedUsersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, JobRoleRestriction struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetRestricted()) {
        oprot.writeFieldBegin(RESTRICTED_FIELD_DESC);
        oprot.writeBool(struct.restricted);
        oprot.writeFieldEnd();
      }
      if (struct.permitUserIds != null) {
        if (struct.isSetPermitUserIds()) {
          oprot.writeFieldBegin(PERMIT_USER_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.permitUserIds.size()));
            for (String _iter6 : struct.permitUserIds)
            {
              oprot.writeString(_iter6);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.permittedUsers != null) {
        if (struct.isSetPermittedUsers()) {
          oprot.writeFieldBegin(PERMITTED_USERS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.permittedUsers.size()));
            for (com.wi.director.thrift.v1.user.UserModular _iter7 : struct.permittedUsers)
            {
              _iter7.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

}

