/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wi.director.thrift.v1.notification;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class NotificationResponse implements org.apache.thrift.TBase<NotificationResponse, NotificationResponse._Fields>, java.io.Serializable, Cloneable, Comparable<NotificationResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("NotificationResponse");

  private static final org.apache.thrift.protocol.TField UNREAD_NOTIFICATIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("unreadNotifications", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField NOTIFICATIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("notifications", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField TOTAL_NOTIFICATIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("totalNotifications", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField REMAINING_NOTIFICATIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("remainingNotifications", org.apache.thrift.protocol.TType.I64, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new NotificationResponseStandardSchemeFactory());
  }

  public long unreadNotifications; // required
  public List<Notification> notifications; // required
  public long totalNotifications; // required
  public long remainingNotifications; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    UNREAD_NOTIFICATIONS((short)1, "unreadNotifications"),
    NOTIFICATIONS((short)2, "notifications"),
    TOTAL_NOTIFICATIONS((short)3, "totalNotifications"),
    REMAINING_NOTIFICATIONS((short)4, "remainingNotifications");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // UNREAD_NOTIFICATIONS
          return UNREAD_NOTIFICATIONS;
        case 2: // NOTIFICATIONS
          return NOTIFICATIONS;
        case 3: // TOTAL_NOTIFICATIONS
          return TOTAL_NOTIFICATIONS;
        case 4: // REMAINING_NOTIFICATIONS
          return REMAINING_NOTIFICATIONS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __UNREADNOTIFICATIONS_ISSET_ID = 0;
  private static final int __TOTALNOTIFICATIONS_ISSET_ID = 1;
  private static final int __REMAININGNOTIFICATIONS_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.UNREAD_NOTIFICATIONS, new org.apache.thrift.meta_data.FieldMetaData("unreadNotifications", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NOTIFICATIONS, new org.apache.thrift.meta_data.FieldMetaData("notifications", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Notification.class))));
    tmpMap.put(_Fields.TOTAL_NOTIFICATIONS, new org.apache.thrift.meta_data.FieldMetaData("totalNotifications", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.REMAINING_NOTIFICATIONS, new org.apache.thrift.meta_data.FieldMetaData("remainingNotifications", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(NotificationResponse.class, metaDataMap);
  }

  public NotificationResponse() {
  }

  public NotificationResponse(
    long unreadNotifications,
    List<Notification> notifications,
    long totalNotifications,
    long remainingNotifications)
  {
    this();
    this.unreadNotifications = unreadNotifications;
    setUnreadNotificationsIsSet(true);
    this.notifications = notifications;
    this.totalNotifications = totalNotifications;
    setTotalNotificationsIsSet(true);
    this.remainingNotifications = remainingNotifications;
    setRemainingNotificationsIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public NotificationResponse(NotificationResponse other) {
    __isset_bitfield = other.__isset_bitfield;
    this.unreadNotifications = other.unreadNotifications;
    if (other.isSetNotifications()) {
      List<Notification> __this__notifications = new ArrayList<Notification>(other.notifications.size());
      for (Notification other_element : other.notifications) {
        __this__notifications.add(new Notification(other_element));
      }
      this.notifications = __this__notifications;
    }
    this.totalNotifications = other.totalNotifications;
    this.remainingNotifications = other.remainingNotifications;
  }

  public NotificationResponse deepCopy() {
    return new NotificationResponse(this);
  }

  @Override
  public void clear() {
    setUnreadNotificationsIsSet(false);
    this.unreadNotifications = 0;
    this.notifications = null;
    setTotalNotificationsIsSet(false);
    this.totalNotifications = 0;
    setRemainingNotificationsIsSet(false);
    this.remainingNotifications = 0;
  }

  public long getUnreadNotifications() {
    return this.unreadNotifications;
  }

  public NotificationResponse setUnreadNotifications(long unreadNotifications) {
    this.unreadNotifications = unreadNotifications;
    setUnreadNotificationsIsSet(true);
    return this;
  }

  public void unsetUnreadNotifications() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UNREADNOTIFICATIONS_ISSET_ID);
  }

  /** Returns true if field unreadNotifications is set (has been assigned a value) and false otherwise */
  public boolean isSetUnreadNotifications() {
    return EncodingUtils.testBit(__isset_bitfield, __UNREADNOTIFICATIONS_ISSET_ID);
  }

  public void setUnreadNotificationsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UNREADNOTIFICATIONS_ISSET_ID, value);
  }

  public int getNotificationsSize() {
    return (this.notifications == null) ? 0 : this.notifications.size();
  }

  public java.util.Iterator<Notification> getNotificationsIterator() {
    return (this.notifications == null) ? null : this.notifications.iterator();
  }

  public void addToNotifications(Notification elem) {
    if (this.notifications == null) {
      this.notifications = new ArrayList<Notification>();
    }
    this.notifications.add(elem);
  }

  public List<Notification> getNotifications() {
    return this.notifications;
  }

  public NotificationResponse setNotifications(List<Notification> notifications) {
    this.notifications = notifications;
    return this;
  }

  public void unsetNotifications() {
    this.notifications = null;
  }

  /** Returns true if field notifications is set (has been assigned a value) and false otherwise */
  public boolean isSetNotifications() {
    return this.notifications != null;
  }

  public void setNotificationsIsSet(boolean value) {
    if (!value) {
      this.notifications = null;
    }
  }

  public long getTotalNotifications() {
    return this.totalNotifications;
  }

  public NotificationResponse setTotalNotifications(long totalNotifications) {
    this.totalNotifications = totalNotifications;
    setTotalNotificationsIsSet(true);
    return this;
  }

  public void unsetTotalNotifications() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALNOTIFICATIONS_ISSET_ID);
  }

  /** Returns true if field totalNotifications is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalNotifications() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALNOTIFICATIONS_ISSET_ID);
  }

  public void setTotalNotificationsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALNOTIFICATIONS_ISSET_ID, value);
  }

  public long getRemainingNotifications() {
    return this.remainingNotifications;
  }

  public NotificationResponse setRemainingNotifications(long remainingNotifications) {
    this.remainingNotifications = remainingNotifications;
    setRemainingNotificationsIsSet(true);
    return this;
  }

  public void unsetRemainingNotifications() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REMAININGNOTIFICATIONS_ISSET_ID);
  }

  /** Returns true if field remainingNotifications is set (has been assigned a value) and false otherwise */
  public boolean isSetRemainingNotifications() {
    return EncodingUtils.testBit(__isset_bitfield, __REMAININGNOTIFICATIONS_ISSET_ID);
  }

  public void setRemainingNotificationsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REMAININGNOTIFICATIONS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case UNREAD_NOTIFICATIONS:
      if (value == null) {
        unsetUnreadNotifications();
      } else {
        setUnreadNotifications((Long)value);
      }
      break;

    case NOTIFICATIONS:
      if (value == null) {
        unsetNotifications();
      } else {
        setNotifications((List<Notification>)value);
      }
      break;

    case TOTAL_NOTIFICATIONS:
      if (value == null) {
        unsetTotalNotifications();
      } else {
        setTotalNotifications((Long)value);
      }
      break;

    case REMAINING_NOTIFICATIONS:
      if (value == null) {
        unsetRemainingNotifications();
      } else {
        setRemainingNotifications((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case UNREAD_NOTIFICATIONS:
      return getUnreadNotifications();

    case NOTIFICATIONS:
      return getNotifications();

    case TOTAL_NOTIFICATIONS:
      return getTotalNotifications();

    case REMAINING_NOTIFICATIONS:
      return getRemainingNotifications();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case UNREAD_NOTIFICATIONS:
      return isSetUnreadNotifications();
    case NOTIFICATIONS:
      return isSetNotifications();
    case TOTAL_NOTIFICATIONS:
      return isSetTotalNotifications();
    case REMAINING_NOTIFICATIONS:
      return isSetRemainingNotifications();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof NotificationResponse)
      return this.equals((NotificationResponse)that);
    return false;
  }

  public boolean equals(NotificationResponse that) {
    if (that == null)
      return false;

    boolean this_present_unreadNotifications = true;
    boolean that_present_unreadNotifications = true;
    if (this_present_unreadNotifications || that_present_unreadNotifications) {
      if (!(this_present_unreadNotifications && that_present_unreadNotifications))
        return false;
      if (this.unreadNotifications != that.unreadNotifications)
        return false;
    }

    boolean this_present_notifications = true && this.isSetNotifications();
    boolean that_present_notifications = true && that.isSetNotifications();
    if (this_present_notifications || that_present_notifications) {
      if (!(this_present_notifications && that_present_notifications))
        return false;
      if (!this.notifications.equals(that.notifications))
        return false;
    }

    boolean this_present_totalNotifications = true;
    boolean that_present_totalNotifications = true;
    if (this_present_totalNotifications || that_present_totalNotifications) {
      if (!(this_present_totalNotifications && that_present_totalNotifications))
        return false;
      if (this.totalNotifications != that.totalNotifications)
        return false;
    }

    boolean this_present_remainingNotifications = true;
    boolean that_present_remainingNotifications = true;
    if (this_present_remainingNotifications || that_present_remainingNotifications) {
      if (!(this_present_remainingNotifications && that_present_remainingNotifications))
        return false;
      if (this.remainingNotifications != that.remainingNotifications)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_unreadNotifications = true;
    list.add(present_unreadNotifications);
    if (present_unreadNotifications)
      list.add(unreadNotifications);

    boolean present_notifications = true && (isSetNotifications());
    list.add(present_notifications);
    if (present_notifications)
      list.add(notifications);

    boolean present_totalNotifications = true;
    list.add(present_totalNotifications);
    if (present_totalNotifications)
      list.add(totalNotifications);

    boolean present_remainingNotifications = true;
    list.add(present_remainingNotifications);
    if (present_remainingNotifications)
      list.add(remainingNotifications);

    return list.hashCode();
  }

  @Override
  public int compareTo(NotificationResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUnreadNotifications()).compareTo(other.isSetUnreadNotifications());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnreadNotifications()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unreadNotifications, other.unreadNotifications);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNotifications()).compareTo(other.isSetNotifications());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotifications()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notifications, other.notifications);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalNotifications()).compareTo(other.isSetTotalNotifications());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalNotifications()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalNotifications, other.totalNotifications);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemainingNotifications()).compareTo(other.isSetRemainingNotifications());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemainingNotifications()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remainingNotifications, other.remainingNotifications);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("NotificationResponse(");
    boolean first = true;

    sb.append("unreadNotifications:");
    sb.append(this.unreadNotifications);
    first = false;
    if (!first) sb.append(", ");
    sb.append("notifications:");
    if (this.notifications == null) {
      sb.append("null");
    } else {
      sb.append(this.notifications);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalNotifications:");
    sb.append(this.totalNotifications);
    first = false;
    if (!first) sb.append(", ");
    sb.append("remainingNotifications:");
    sb.append(this.remainingNotifications);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class NotificationResponseStandardSchemeFactory implements SchemeFactory {
    public NotificationResponseStandardScheme getScheme() {
      return new NotificationResponseStandardScheme();
    }
  }

  private static class NotificationResponseStandardScheme extends StandardScheme<NotificationResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, NotificationResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // UNREAD_NOTIFICATIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.unreadNotifications = iprot.readI64();
              struct.setUnreadNotificationsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NOTIFICATIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list5 = iprot.readListBegin();
                struct.notifications = new ArrayList<Notification>(_list5.size);
                Notification _elem6;
                for (int _i7 = 0; _i7 < _list5.size; ++_i7)
                {
                  _elem6 = new Notification();
                  _elem6.read(iprot);
                  struct.notifications.add(_elem6);
                }
                iprot.readListEnd();
              }
              struct.setNotificationsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TOTAL_NOTIFICATIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.totalNotifications = iprot.readI64();
              struct.setTotalNotificationsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // REMAINING_NOTIFICATIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.remainingNotifications = iprot.readI64();
              struct.setRemainingNotificationsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, NotificationResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(UNREAD_NOTIFICATIONS_FIELD_DESC);
      oprot.writeI64(struct.unreadNotifications);
      oprot.writeFieldEnd();
      if (struct.notifications != null) {
        oprot.writeFieldBegin(NOTIFICATIONS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.notifications.size()));
          for (Notification _iter8 : struct.notifications)
          {
            _iter8.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TOTAL_NOTIFICATIONS_FIELD_DESC);
      oprot.writeI64(struct.totalNotifications);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REMAINING_NOTIFICATIONS_FIELD_DESC);
      oprot.writeI64(struct.remainingNotifications);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

}

