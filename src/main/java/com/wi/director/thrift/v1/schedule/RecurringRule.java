/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wi.director.thrift.v1.schedule;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class RecurringRule implements org.apache.thrift.TBase<RecurringRule, RecurringRule._Fields>, java.io.Serializable, Cloneable, Comparable<RecurringRule> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RecurringRule");

  private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField REPEAT_TIMES_FIELD_DESC = new org.apache.thrift.protocol.TField("repeatTimes", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField REPEAT_FIELD_DESC = new org.apache.thrift.protocol.TField("repeat", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField REPEAT_INTERVAL_FIELD_DESC = new org.apache.thrift.protocol.TField("repeatInterval", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField DAY_OF_WEEK_FIELD_DESC = new org.apache.thrift.protocol.TField("dayOfWeek", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField DAY_OF_MONTH_FIELD_DESC = new org.apache.thrift.protocol.TField("dayOfMonth", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField MONTH_FIELD_DESC = new org.apache.thrift.protocol.TField("month", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("location", org.apache.thrift.protocol.TType.STRING, (short)20);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RecurringRuleStandardSchemeFactory());
  }

  public String startTime; // required
  public String endTime; // optional
  public int repeatTimes; // optional
  /**
   * 
   * @see RepeatFrequency
   */
  public RepeatFrequency repeat; // required
  public int repeatInterval; // required
  public List<Integer> dayOfWeek; // optional
  public List<Integer> dayOfMonth; // optional
  public List<Integer> month; // optional
  public String location; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    START_TIME((short)1, "startTime"),
    END_TIME((short)2, "endTime"),
    REPEAT_TIMES((short)3, "repeatTimes"),
    /**
     * 
     * @see RepeatFrequency
     */
    REPEAT((short)4, "repeat"),
    REPEAT_INTERVAL((short)5, "repeatInterval"),
    DAY_OF_WEEK((short)6, "dayOfWeek"),
    DAY_OF_MONTH((short)7, "dayOfMonth"),
    MONTH((short)8, "month"),
    LOCATION((short)20, "location");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // START_TIME
          return START_TIME;
        case 2: // END_TIME
          return END_TIME;
        case 3: // REPEAT_TIMES
          return REPEAT_TIMES;
        case 4: // REPEAT
          return REPEAT;
        case 5: // REPEAT_INTERVAL
          return REPEAT_INTERVAL;
        case 6: // DAY_OF_WEEK
          return DAY_OF_WEEK;
        case 7: // DAY_OF_MONTH
          return DAY_OF_MONTH;
        case 8: // MONTH
          return MONTH;
        case 20: // LOCATION
          return LOCATION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __REPEATTIMES_ISSET_ID = 0;
  private static final int __REPEATINTERVAL_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.END_TIME,_Fields.REPEAT_TIMES,_Fields.DAY_OF_WEEK,_Fields.DAY_OF_MONTH,_Fields.MONTH,_Fields.LOCATION};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REPEAT_TIMES, new org.apache.thrift.meta_data.FieldMetaData("repeatTimes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REPEAT, new org.apache.thrift.meta_data.FieldMetaData("repeat", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, RepeatFrequency.class)));
    tmpMap.put(_Fields.REPEAT_INTERVAL, new org.apache.thrift.meta_data.FieldMetaData("repeatInterval", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DAY_OF_WEEK, new org.apache.thrift.meta_data.FieldMetaData("dayOfWeek", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.DAY_OF_MONTH, new org.apache.thrift.meta_data.FieldMetaData("dayOfMonth", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.MONTH, new org.apache.thrift.meta_data.FieldMetaData("month", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.LOCATION, new org.apache.thrift.meta_data.FieldMetaData("location", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RecurringRule.class, metaDataMap);
  }

  public RecurringRule() {
    this.repeatInterval = 1;

  }

  public RecurringRule(
    String startTime,
    RepeatFrequency repeat,
    int repeatInterval)
  {
    this();
    this.startTime = startTime;
    this.repeat = repeat;
    this.repeatInterval = repeatInterval;
    setRepeatIntervalIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RecurringRule(RecurringRule other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetStartTime()) {
      this.startTime = other.startTime;
    }
    if (other.isSetEndTime()) {
      this.endTime = other.endTime;
    }
    this.repeatTimes = other.repeatTimes;
    if (other.isSetRepeat()) {
      this.repeat = other.repeat;
    }
    this.repeatInterval = other.repeatInterval;
    if (other.isSetDayOfWeek()) {
      List<Integer> __this__dayOfWeek = new ArrayList<Integer>(other.dayOfWeek);
      this.dayOfWeek = __this__dayOfWeek;
    }
    if (other.isSetDayOfMonth()) {
      List<Integer> __this__dayOfMonth = new ArrayList<Integer>(other.dayOfMonth);
      this.dayOfMonth = __this__dayOfMonth;
    }
    if (other.isSetMonth()) {
      List<Integer> __this__month = new ArrayList<Integer>(other.month);
      this.month = __this__month;
    }
    if (other.isSetLocation()) {
      this.location = other.location;
    }
  }

  public RecurringRule deepCopy() {
    return new RecurringRule(this);
  }

  @Override
  public void clear() {
    this.startTime = null;
    this.endTime = null;
    setRepeatTimesIsSet(false);
    this.repeatTimes = 0;
    this.repeat = null;
    this.repeatInterval = 1;

    this.dayOfWeek = null;
    this.dayOfMonth = null;
    this.month = null;
    this.location = null;
  }

  public String getStartTime() {
    return this.startTime;
  }

  public RecurringRule setStartTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

  public void unsetStartTime() {
    this.startTime = null;
  }

  /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTime() {
    return this.startTime != null;
  }

  public void setStartTimeIsSet(boolean value) {
    if (!value) {
      this.startTime = null;
    }
  }

  public String getEndTime() {
    return this.endTime;
  }

  public RecurringRule setEndTime(String endTime) {
    this.endTime = endTime;
    return this;
  }

  public void unsetEndTime() {
    this.endTime = null;
  }

  /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
  public boolean isSetEndTime() {
    return this.endTime != null;
  }

  public void setEndTimeIsSet(boolean value) {
    if (!value) {
      this.endTime = null;
    }
  }

  public int getRepeatTimes() {
    return this.repeatTimes;
  }

  public RecurringRule setRepeatTimes(int repeatTimes) {
    this.repeatTimes = repeatTimes;
    setRepeatTimesIsSet(true);
    return this;
  }

  public void unsetRepeatTimes() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPEATTIMES_ISSET_ID);
  }

  /** Returns true if field repeatTimes is set (has been assigned a value) and false otherwise */
  public boolean isSetRepeatTimes() {
    return EncodingUtils.testBit(__isset_bitfield, __REPEATTIMES_ISSET_ID);
  }

  public void setRepeatTimesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPEATTIMES_ISSET_ID, value);
  }

  /**
   * 
   * @see RepeatFrequency
   */
  public RepeatFrequency getRepeat() {
    return this.repeat;
  }

  /**
   * 
   * @see RepeatFrequency
   */
  public RecurringRule setRepeat(RepeatFrequency repeat) {
    this.repeat = repeat;
    return this;
  }

  public void unsetRepeat() {
    this.repeat = null;
  }

  /** Returns true if field repeat is set (has been assigned a value) and false otherwise */
  public boolean isSetRepeat() {
    return this.repeat != null;
  }

  public void setRepeatIsSet(boolean value) {
    if (!value) {
      this.repeat = null;
    }
  }

  public int getRepeatInterval() {
    return this.repeatInterval;
  }

  public RecurringRule setRepeatInterval(int repeatInterval) {
    this.repeatInterval = repeatInterval;
    setRepeatIntervalIsSet(true);
    return this;
  }

  public void unsetRepeatInterval() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPEATINTERVAL_ISSET_ID);
  }

  /** Returns true if field repeatInterval is set (has been assigned a value) and false otherwise */
  public boolean isSetRepeatInterval() {
    return EncodingUtils.testBit(__isset_bitfield, __REPEATINTERVAL_ISSET_ID);
  }

  public void setRepeatIntervalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPEATINTERVAL_ISSET_ID, value);
  }

  public int getDayOfWeekSize() {
    return (this.dayOfWeek == null) ? 0 : this.dayOfWeek.size();
  }

  public java.util.Iterator<Integer> getDayOfWeekIterator() {
    return (this.dayOfWeek == null) ? null : this.dayOfWeek.iterator();
  }

  public void addToDayOfWeek(int elem) {
    if (this.dayOfWeek == null) {
      this.dayOfWeek = new ArrayList<Integer>();
    }
    this.dayOfWeek.add(elem);
  }

  public List<Integer> getDayOfWeek() {
    return this.dayOfWeek;
  }

  public RecurringRule setDayOfWeek(List<Integer> dayOfWeek) {
    this.dayOfWeek = dayOfWeek;
    return this;
  }

  public void unsetDayOfWeek() {
    this.dayOfWeek = null;
  }

  /** Returns true if field dayOfWeek is set (has been assigned a value) and false otherwise */
  public boolean isSetDayOfWeek() {
    return this.dayOfWeek != null;
  }

  public void setDayOfWeekIsSet(boolean value) {
    if (!value) {
      this.dayOfWeek = null;
    }
  }

  public int getDayOfMonthSize() {
    return (this.dayOfMonth == null) ? 0 : this.dayOfMonth.size();
  }

  public java.util.Iterator<Integer> getDayOfMonthIterator() {
    return (this.dayOfMonth == null) ? null : this.dayOfMonth.iterator();
  }

  public void addToDayOfMonth(int elem) {
    if (this.dayOfMonth == null) {
      this.dayOfMonth = new ArrayList<Integer>();
    }
    this.dayOfMonth.add(elem);
  }

  public List<Integer> getDayOfMonth() {
    return this.dayOfMonth;
  }

  public RecurringRule setDayOfMonth(List<Integer> dayOfMonth) {
    this.dayOfMonth = dayOfMonth;
    return this;
  }

  public void unsetDayOfMonth() {
    this.dayOfMonth = null;
  }

  /** Returns true if field dayOfMonth is set (has been assigned a value) and false otherwise */
  public boolean isSetDayOfMonth() {
    return this.dayOfMonth != null;
  }

  public void setDayOfMonthIsSet(boolean value) {
    if (!value) {
      this.dayOfMonth = null;
    }
  }

  public int getMonthSize() {
    return (this.month == null) ? 0 : this.month.size();
  }

  public java.util.Iterator<Integer> getMonthIterator() {
    return (this.month == null) ? null : this.month.iterator();
  }

  public void addToMonth(int elem) {
    if (this.month == null) {
      this.month = new ArrayList<Integer>();
    }
    this.month.add(elem);
  }

  public List<Integer> getMonth() {
    return this.month;
  }

  public RecurringRule setMonth(List<Integer> month) {
    this.month = month;
    return this;
  }

  public void unsetMonth() {
    this.month = null;
  }

  /** Returns true if field month is set (has been assigned a value) and false otherwise */
  public boolean isSetMonth() {
    return this.month != null;
  }

  public void setMonthIsSet(boolean value) {
    if (!value) {
      this.month = null;
    }
  }

  public String getLocation() {
    return this.location;
  }

  public RecurringRule setLocation(String location) {
    this.location = location;
    return this;
  }

  public void unsetLocation() {
    this.location = null;
  }

  /** Returns true if field location is set (has been assigned a value) and false otherwise */
  public boolean isSetLocation() {
    return this.location != null;
  }

  public void setLocationIsSet(boolean value) {
    if (!value) {
      this.location = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case START_TIME:
      if (value == null) {
        unsetStartTime();
      } else {
        setStartTime((String)value);
      }
      break;

    case END_TIME:
      if (value == null) {
        unsetEndTime();
      } else {
        setEndTime((String)value);
      }
      break;

    case REPEAT_TIMES:
      if (value == null) {
        unsetRepeatTimes();
      } else {
        setRepeatTimes((Integer)value);
      }
      break;

    case REPEAT:
      if (value == null) {
        unsetRepeat();
      } else {
        setRepeat((RepeatFrequency)value);
      }
      break;

    case REPEAT_INTERVAL:
      if (value == null) {
        unsetRepeatInterval();
      } else {
        setRepeatInterval((Integer)value);
      }
      break;

    case DAY_OF_WEEK:
      if (value == null) {
        unsetDayOfWeek();
      } else {
        setDayOfWeek((List<Integer>)value);
      }
      break;

    case DAY_OF_MONTH:
      if (value == null) {
        unsetDayOfMonth();
      } else {
        setDayOfMonth((List<Integer>)value);
      }
      break;

    case MONTH:
      if (value == null) {
        unsetMonth();
      } else {
        setMonth((List<Integer>)value);
      }
      break;

    case LOCATION:
      if (value == null) {
        unsetLocation();
      } else {
        setLocation((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case START_TIME:
      return getStartTime();

    case END_TIME:
      return getEndTime();

    case REPEAT_TIMES:
      return getRepeatTimes();

    case REPEAT:
      return getRepeat();

    case REPEAT_INTERVAL:
      return getRepeatInterval();

    case DAY_OF_WEEK:
      return getDayOfWeek();

    case DAY_OF_MONTH:
      return getDayOfMonth();

    case MONTH:
      return getMonth();

    case LOCATION:
      return getLocation();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case START_TIME:
      return isSetStartTime();
    case END_TIME:
      return isSetEndTime();
    case REPEAT_TIMES:
      return isSetRepeatTimes();
    case REPEAT:
      return isSetRepeat();
    case REPEAT_INTERVAL:
      return isSetRepeatInterval();
    case DAY_OF_WEEK:
      return isSetDayOfWeek();
    case DAY_OF_MONTH:
      return isSetDayOfMonth();
    case MONTH:
      return isSetMonth();
    case LOCATION:
      return isSetLocation();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RecurringRule)
      return this.equals((RecurringRule)that);
    return false;
  }

  public boolean equals(RecurringRule that) {
    if (that == null)
      return false;

    boolean this_present_startTime = true && this.isSetStartTime();
    boolean that_present_startTime = true && that.isSetStartTime();
    if (this_present_startTime || that_present_startTime) {
      if (!(this_present_startTime && that_present_startTime))
        return false;
      if (!this.startTime.equals(that.startTime))
        return false;
    }

    boolean this_present_endTime = true && this.isSetEndTime();
    boolean that_present_endTime = true && that.isSetEndTime();
    if (this_present_endTime || that_present_endTime) {
      if (!(this_present_endTime && that_present_endTime))
        return false;
      if (!this.endTime.equals(that.endTime))
        return false;
    }

    boolean this_present_repeatTimes = true && this.isSetRepeatTimes();
    boolean that_present_repeatTimes = true && that.isSetRepeatTimes();
    if (this_present_repeatTimes || that_present_repeatTimes) {
      if (!(this_present_repeatTimes && that_present_repeatTimes))
        return false;
      if (this.repeatTimes != that.repeatTimes)
        return false;
    }

    boolean this_present_repeat = true && this.isSetRepeat();
    boolean that_present_repeat = true && that.isSetRepeat();
    if (this_present_repeat || that_present_repeat) {
      if (!(this_present_repeat && that_present_repeat))
        return false;
      if (!this.repeat.equals(that.repeat))
        return false;
    }

    boolean this_present_repeatInterval = true;
    boolean that_present_repeatInterval = true;
    if (this_present_repeatInterval || that_present_repeatInterval) {
      if (!(this_present_repeatInterval && that_present_repeatInterval))
        return false;
      if (this.repeatInterval != that.repeatInterval)
        return false;
    }

    boolean this_present_dayOfWeek = true && this.isSetDayOfWeek();
    boolean that_present_dayOfWeek = true && that.isSetDayOfWeek();
    if (this_present_dayOfWeek || that_present_dayOfWeek) {
      if (!(this_present_dayOfWeek && that_present_dayOfWeek))
        return false;
      if (!this.dayOfWeek.equals(that.dayOfWeek))
        return false;
    }

    boolean this_present_dayOfMonth = true && this.isSetDayOfMonth();
    boolean that_present_dayOfMonth = true && that.isSetDayOfMonth();
    if (this_present_dayOfMonth || that_present_dayOfMonth) {
      if (!(this_present_dayOfMonth && that_present_dayOfMonth))
        return false;
      if (!this.dayOfMonth.equals(that.dayOfMonth))
        return false;
    }

    boolean this_present_month = true && this.isSetMonth();
    boolean that_present_month = true && that.isSetMonth();
    if (this_present_month || that_present_month) {
      if (!(this_present_month && that_present_month))
        return false;
      if (!this.month.equals(that.month))
        return false;
    }

    boolean this_present_location = true && this.isSetLocation();
    boolean that_present_location = true && that.isSetLocation();
    if (this_present_location || that_present_location) {
      if (!(this_present_location && that_present_location))
        return false;
      if (!this.location.equals(that.location))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_startTime = true && (isSetStartTime());
    list.add(present_startTime);
    if (present_startTime)
      list.add(startTime);

    boolean present_endTime = true && (isSetEndTime());
    list.add(present_endTime);
    if (present_endTime)
      list.add(endTime);

    boolean present_repeatTimes = true && (isSetRepeatTimes());
    list.add(present_repeatTimes);
    if (present_repeatTimes)
      list.add(repeatTimes);

    boolean present_repeat = true && (isSetRepeat());
    list.add(present_repeat);
    if (present_repeat)
      list.add(repeat.getValue());

    boolean present_repeatInterval = true;
    list.add(present_repeatInterval);
    if (present_repeatInterval)
      list.add(repeatInterval);

    boolean present_dayOfWeek = true && (isSetDayOfWeek());
    list.add(present_dayOfWeek);
    if (present_dayOfWeek)
      list.add(dayOfWeek);

    boolean present_dayOfMonth = true && (isSetDayOfMonth());
    list.add(present_dayOfMonth);
    if (present_dayOfMonth)
      list.add(dayOfMonth);

    boolean present_month = true && (isSetMonth());
    list.add(present_month);
    if (present_month)
      list.add(month);

    boolean present_location = true && (isSetLocation());
    list.add(present_location);
    if (present_location)
      list.add(location);

    return list.hashCode();
  }

  @Override
  public int compareTo(RecurringRule other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(other.isSetEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepeatTimes()).compareTo(other.isSetRepeatTimes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepeatTimes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repeatTimes, other.repeatTimes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepeat()).compareTo(other.isSetRepeat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepeat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repeat, other.repeat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepeatInterval()).compareTo(other.isSetRepeatInterval());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepeatInterval()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repeatInterval, other.repeatInterval);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDayOfWeek()).compareTo(other.isSetDayOfWeek());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDayOfWeek()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dayOfWeek, other.dayOfWeek);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDayOfMonth()).compareTo(other.isSetDayOfMonth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDayOfMonth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dayOfMonth, other.dayOfMonth);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMonth()).compareTo(other.isSetMonth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMonth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.month, other.month);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocation()).compareTo(other.isSetLocation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.location, other.location);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RecurringRule(");
    boolean first = true;

    sb.append("startTime:");
    if (this.startTime == null) {
      sb.append("null");
    } else {
      sb.append(this.startTime);
    }
    first = false;
    if (isSetEndTime()) {
      if (!first) sb.append(", ");
      sb.append("endTime:");
      if (this.endTime == null) {
        sb.append("null");
      } else {
        sb.append(this.endTime);
      }
      first = false;
    }
    if (isSetRepeatTimes()) {
      if (!first) sb.append(", ");
      sb.append("repeatTimes:");
      sb.append(this.repeatTimes);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("repeat:");
    if (this.repeat == null) {
      sb.append("null");
    } else {
      sb.append(this.repeat);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("repeatInterval:");
    sb.append(this.repeatInterval);
    first = false;
    if (isSetDayOfWeek()) {
      if (!first) sb.append(", ");
      sb.append("dayOfWeek:");
      if (this.dayOfWeek == null) {
        sb.append("null");
      } else {
        sb.append(this.dayOfWeek);
      }
      first = false;
    }
    if (isSetDayOfMonth()) {
      if (!first) sb.append(", ");
      sb.append("dayOfMonth:");
      if (this.dayOfMonth == null) {
        sb.append("null");
      } else {
        sb.append(this.dayOfMonth);
      }
      first = false;
    }
    if (isSetMonth()) {
      if (!first) sb.append(", ");
      sb.append("month:");
      if (this.month == null) {
        sb.append("null");
      } else {
        sb.append(this.month);
      }
      first = false;
    }
    if (isSetLocation()) {
      if (!first) sb.append(", ");
      sb.append("location:");
      if (this.location == null) {
        sb.append("null");
      } else {
        sb.append(this.location);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RecurringRuleStandardSchemeFactory implements SchemeFactory {
    public RecurringRuleStandardScheme getScheme() {
      return new RecurringRuleStandardScheme();
    }
  }

  private static class RecurringRuleStandardScheme extends StandardScheme<RecurringRule> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RecurringRule struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.startTime = iprot.readString();
              struct.setStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.endTime = iprot.readString();
              struct.setEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REPEAT_TIMES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.repeatTimes = iprot.readI32();
              struct.setRepeatTimesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // REPEAT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.repeat = com.wi.director.thrift.v1.schedule.RepeatFrequency.findByValue(iprot.readI32());
              struct.setRepeatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // REPEAT_INTERVAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.repeatInterval = iprot.readI32();
              struct.setRepeatIntervalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DAY_OF_WEEK
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.dayOfWeek = new ArrayList<Integer>(_list0.size);
                int _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readI32();
                  struct.dayOfWeek.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setDayOfWeekIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DAY_OF_MONTH
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.dayOfMonth = new ArrayList<Integer>(_list3.size);
                int _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = iprot.readI32();
                  struct.dayOfMonth.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setDayOfMonthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // MONTH
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                struct.month = new ArrayList<Integer>(_list6.size);
                int _elem7;
                for (int _i8 = 0; _i8 < _list6.size; ++_i8)
                {
                  _elem7 = iprot.readI32();
                  struct.month.add(_elem7);
                }
                iprot.readListEnd();
              }
              struct.setMonthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // LOCATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.location = iprot.readString();
              struct.setLocationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RecurringRule struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.startTime != null) {
        oprot.writeFieldBegin(START_TIME_FIELD_DESC);
        oprot.writeString(struct.startTime);
        oprot.writeFieldEnd();
      }
      if (struct.endTime != null) {
        if (struct.isSetEndTime()) {
          oprot.writeFieldBegin(END_TIME_FIELD_DESC);
          oprot.writeString(struct.endTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetRepeatTimes()) {
        oprot.writeFieldBegin(REPEAT_TIMES_FIELD_DESC);
        oprot.writeI32(struct.repeatTimes);
        oprot.writeFieldEnd();
      }
      if (struct.repeat != null) {
        oprot.writeFieldBegin(REPEAT_FIELD_DESC);
        oprot.writeI32(struct.repeat.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REPEAT_INTERVAL_FIELD_DESC);
      oprot.writeI32(struct.repeatInterval);
      oprot.writeFieldEnd();
      if (struct.dayOfWeek != null) {
        if (struct.isSetDayOfWeek()) {
          oprot.writeFieldBegin(DAY_OF_WEEK_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.dayOfWeek.size()));
            for (int _iter9 : struct.dayOfWeek)
            {
              oprot.writeI32(_iter9);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.dayOfMonth != null) {
        if (struct.isSetDayOfMonth()) {
          oprot.writeFieldBegin(DAY_OF_MONTH_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.dayOfMonth.size()));
            for (int _iter10 : struct.dayOfMonth)
            {
              oprot.writeI32(_iter10);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.month != null) {
        if (struct.isSetMonth()) {
          oprot.writeFieldBegin(MONTH_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.month.size()));
            for (int _iter11 : struct.month)
            {
              oprot.writeI32(_iter11);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.location != null) {
        if (struct.isSetLocation()) {
          oprot.writeFieldBegin(LOCATION_FIELD_DESC);
          oprot.writeString(struct.location);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

}

