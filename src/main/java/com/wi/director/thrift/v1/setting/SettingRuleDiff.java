/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wi.director.thrift.v1.setting;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)")
public class SettingRuleDiff implements org.apache.thrift.TBase<SettingRuleDiff, SettingRuleDiff._Fields>, java.io.Serializable, Cloneable, Comparable<SettingRuleDiff> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SettingRuleDiff");

  private static final org.apache.thrift.protocol.TField RULE_FIELD_DESC = new org.apache.thrift.protocol.TField("rule", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField OLD_SETTINGS_FIELD_DESC = new org.apache.thrift.protocol.TField("oldSettings", org.apache.thrift.protocol.TType.MAP, (short)2);
  private static final org.apache.thrift.protocol.TField NEW_SETTINGS_FIELD_DESC = new org.apache.thrift.protocol.TField("newSettings", org.apache.thrift.protocol.TType.MAP, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SettingRuleDiffStandardSchemeFactory());
  }

  public SettingRule rule; // required
  public Map<String,SettingImpl> oldSettings; // optional
  public Map<String,SettingImpl> newSettings; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RULE((short)1, "rule"),
    OLD_SETTINGS((short)2, "oldSettings"),
    NEW_SETTINGS((short)3, "newSettings");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RULE
          return RULE;
        case 2: // OLD_SETTINGS
          return OLD_SETTINGS;
        case 3: // NEW_SETTINGS
          return NEW_SETTINGS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.OLD_SETTINGS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RULE, new org.apache.thrift.meta_data.FieldMetaData("rule", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SettingRule.class)));
    tmpMap.put(_Fields.OLD_SETTINGS, new org.apache.thrift.meta_data.FieldMetaData("oldSettings", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SettingImpl.class))));
    tmpMap.put(_Fields.NEW_SETTINGS, new org.apache.thrift.meta_data.FieldMetaData("newSettings", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SettingImpl.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SettingRuleDiff.class, metaDataMap);
  }

  public SettingRuleDiff() {
  }

  public SettingRuleDiff(
    SettingRule rule,
    Map<String,SettingImpl> newSettings)
  {
    this();
    this.rule = rule;
    this.newSettings = newSettings;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SettingRuleDiff(SettingRuleDiff other) {
    if (other.isSetRule()) {
      this.rule = new SettingRule(other.rule);
    }
    if (other.isSetOldSettings()) {
      Map<String,SettingImpl> __this__oldSettings = new HashMap<String,SettingImpl>(other.oldSettings.size());
      for (Map.Entry<String, SettingImpl> other_element : other.oldSettings.entrySet()) {

        String other_element_key = other_element.getKey();
        SettingImpl other_element_value = other_element.getValue();

        String __this__oldSettings_copy_key = other_element_key;

        SettingImpl __this__oldSettings_copy_value = new SettingImpl(other_element_value);

        __this__oldSettings.put(__this__oldSettings_copy_key, __this__oldSettings_copy_value);
      }
      this.oldSettings = __this__oldSettings;
    }
    if (other.isSetNewSettings()) {
      Map<String,SettingImpl> __this__newSettings = new HashMap<String,SettingImpl>(other.newSettings.size());
      for (Map.Entry<String, SettingImpl> other_element : other.newSettings.entrySet()) {

        String other_element_key = other_element.getKey();
        SettingImpl other_element_value = other_element.getValue();

        String __this__newSettings_copy_key = other_element_key;

        SettingImpl __this__newSettings_copy_value = new SettingImpl(other_element_value);

        __this__newSettings.put(__this__newSettings_copy_key, __this__newSettings_copy_value);
      }
      this.newSettings = __this__newSettings;
    }
  }

  public SettingRuleDiff deepCopy() {
    return new SettingRuleDiff(this);
  }

  @Override
  public void clear() {
    this.rule = null;
    this.oldSettings = null;
    this.newSettings = null;
  }

  public SettingRule getRule() {
    return this.rule;
  }

  public SettingRuleDiff setRule(SettingRule rule) {
    this.rule = rule;
    return this;
  }

  public void unsetRule() {
    this.rule = null;
  }

  /** Returns true if field rule is set (has been assigned a value) and false otherwise */
  public boolean isSetRule() {
    return this.rule != null;
  }

  public void setRuleIsSet(boolean value) {
    if (!value) {
      this.rule = null;
    }
  }

  public int getOldSettingsSize() {
    return (this.oldSettings == null) ? 0 : this.oldSettings.size();
  }

  public void putToOldSettings(String key, SettingImpl val) {
    if (this.oldSettings == null) {
      this.oldSettings = new HashMap<String,SettingImpl>();
    }
    this.oldSettings.put(key, val);
  }

  public Map<String,SettingImpl> getOldSettings() {
    return this.oldSettings;
  }

  public SettingRuleDiff setOldSettings(Map<String,SettingImpl> oldSettings) {
    this.oldSettings = oldSettings;
    return this;
  }

  public void unsetOldSettings() {
    this.oldSettings = null;
  }

  /** Returns true if field oldSettings is set (has been assigned a value) and false otherwise */
  public boolean isSetOldSettings() {
    return this.oldSettings != null;
  }

  public void setOldSettingsIsSet(boolean value) {
    if (!value) {
      this.oldSettings = null;
    }
  }

  public int getNewSettingsSize() {
    return (this.newSettings == null) ? 0 : this.newSettings.size();
  }

  public void putToNewSettings(String key, SettingImpl val) {
    if (this.newSettings == null) {
      this.newSettings = new HashMap<String,SettingImpl>();
    }
    this.newSettings.put(key, val);
  }

  public Map<String,SettingImpl> getNewSettings() {
    return this.newSettings;
  }

  public SettingRuleDiff setNewSettings(Map<String,SettingImpl> newSettings) {
    this.newSettings = newSettings;
    return this;
  }

  public void unsetNewSettings() {
    this.newSettings = null;
  }

  /** Returns true if field newSettings is set (has been assigned a value) and false otherwise */
  public boolean isSetNewSettings() {
    return this.newSettings != null;
  }

  public void setNewSettingsIsSet(boolean value) {
    if (!value) {
      this.newSettings = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RULE:
      if (value == null) {
        unsetRule();
      } else {
        setRule((SettingRule)value);
      }
      break;

    case OLD_SETTINGS:
      if (value == null) {
        unsetOldSettings();
      } else {
        setOldSettings((Map<String,SettingImpl>)value);
      }
      break;

    case NEW_SETTINGS:
      if (value == null) {
        unsetNewSettings();
      } else {
        setNewSettings((Map<String,SettingImpl>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RULE:
      return getRule();

    case OLD_SETTINGS:
      return getOldSettings();

    case NEW_SETTINGS:
      return getNewSettings();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RULE:
      return isSetRule();
    case OLD_SETTINGS:
      return isSetOldSettings();
    case NEW_SETTINGS:
      return isSetNewSettings();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SettingRuleDiff)
      return this.equals((SettingRuleDiff)that);
    return false;
  }

  public boolean equals(SettingRuleDiff that) {
    if (that == null)
      return false;

    boolean this_present_rule = true && this.isSetRule();
    boolean that_present_rule = true && that.isSetRule();
    if (this_present_rule || that_present_rule) {
      if (!(this_present_rule && that_present_rule))
        return false;
      if (!this.rule.equals(that.rule))
        return false;
    }

    boolean this_present_oldSettings = true && this.isSetOldSettings();
    boolean that_present_oldSettings = true && that.isSetOldSettings();
    if (this_present_oldSettings || that_present_oldSettings) {
      if (!(this_present_oldSettings && that_present_oldSettings))
        return false;
      if (!this.oldSettings.equals(that.oldSettings))
        return false;
    }

    boolean this_present_newSettings = true && this.isSetNewSettings();
    boolean that_present_newSettings = true && that.isSetNewSettings();
    if (this_present_newSettings || that_present_newSettings) {
      if (!(this_present_newSettings && that_present_newSettings))
        return false;
      if (!this.newSettings.equals(that.newSettings))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_rule = true && (isSetRule());
    list.add(present_rule);
    if (present_rule)
      list.add(rule);

    boolean present_oldSettings = true && (isSetOldSettings());
    list.add(present_oldSettings);
    if (present_oldSettings)
      list.add(oldSettings);

    boolean present_newSettings = true && (isSetNewSettings());
    list.add(present_newSettings);
    if (present_newSettings)
      list.add(newSettings);

    return list.hashCode();
  }

  @Override
  public int compareTo(SettingRuleDiff other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetRule()).compareTo(other.isSetRule());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRule()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rule, other.rule);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOldSettings()).compareTo(other.isSetOldSettings());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOldSettings()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oldSettings, other.oldSettings);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNewSettings()).compareTo(other.isSetNewSettings());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNewSettings()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newSettings, other.newSettings);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SettingRuleDiff(");
    boolean first = true;

    sb.append("rule:");
    if (this.rule == null) {
      sb.append("null");
    } else {
      sb.append(this.rule);
    }
    first = false;
    if (isSetOldSettings()) {
      if (!first) sb.append(", ");
      sb.append("oldSettings:");
      if (this.oldSettings == null) {
        sb.append("null");
      } else {
        sb.append(this.oldSettings);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("newSettings:");
    if (this.newSettings == null) {
      sb.append("null");
    } else {
      sb.append(this.newSettings);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (rule != null) {
      rule.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SettingRuleDiffStandardSchemeFactory implements SchemeFactory {
    public SettingRuleDiffStandardScheme getScheme() {
      return new SettingRuleDiffStandardScheme();
    }
  }

  private static class SettingRuleDiffStandardScheme extends StandardScheme<SettingRuleDiff> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SettingRuleDiff struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RULE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.rule = new SettingRule();
              struct.rule.read(iprot);
              struct.setRuleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // OLD_SETTINGS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map27 = iprot.readMapBegin();
                struct.oldSettings = new HashMap<String,SettingImpl>(2*_map27.size);
                String _key28;
                SettingImpl _val29;
                for (int _i30 = 0; _i30 < _map27.size; ++_i30)
                {
                  _key28 = iprot.readString();
                  _val29 = new SettingImpl();
                  _val29.read(iprot);
                  struct.oldSettings.put(_key28, _val29);
                }
                iprot.readMapEnd();
              }
              struct.setOldSettingsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NEW_SETTINGS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map31 = iprot.readMapBegin();
                struct.newSettings = new HashMap<String,SettingImpl>(2*_map31.size);
                String _key32;
                SettingImpl _val33;
                for (int _i34 = 0; _i34 < _map31.size; ++_i34)
                {
                  _key32 = iprot.readString();
                  _val33 = new SettingImpl();
                  _val33.read(iprot);
                  struct.newSettings.put(_key32, _val33);
                }
                iprot.readMapEnd();
              }
              struct.setNewSettingsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SettingRuleDiff struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.rule != null) {
        oprot.writeFieldBegin(RULE_FIELD_DESC);
        struct.rule.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.oldSettings != null) {
        if (struct.isSetOldSettings()) {
          oprot.writeFieldBegin(OLD_SETTINGS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.oldSettings.size()));
            for (Map.Entry<String, SettingImpl> _iter35 : struct.oldSettings.entrySet())
            {
              oprot.writeString(_iter35.getKey());
              _iter35.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.newSettings != null) {
        oprot.writeFieldBegin(NEW_SETTINGS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.newSettings.size()));
          for (Map.Entry<String, SettingImpl> _iter36 : struct.newSettings.entrySet())
          {
            oprot.writeString(_iter36.getKey());
            _iter36.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

}

